primary_analysis_sql,structure_sql,validation_sql,business_rules_sql,sample_data_sql,hardcoded_issues,parameterisation_recommendations,response_id,dashboard_id
"-- THIS IS THE MAIN SQL TO RUN -- Single query showing all key metrics calculated together
WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS int) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      pub.publication_name,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number AS calendar_fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year,
      calendar.period_name,
      dep.department_name
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
          CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
          CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE
            WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
            ELSE 'N'
          END AS month_end_flag,
          CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
          CAST(c.fy_year AS int) AS fy_year,
          control_inner.period_name
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control_inner
          ON control_inner.source_week_number = c.fy_year_week_number AND control_inner.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  fy_year,
  source_system_name,
  period_name,
  SUM(Actual_Amount) AS total_actual_amount,
  COUNT(source_system_name) AS source_system_record_count,
  COUNT(DISTINCT fiscal_week_id) AS distinct_fiscal_weeks,
  COUNT(DISTINCT gl_publication_code) AS distinct_publications
FROM
  OSandFACT
WHERE
  fy_year IS NOT NULL
  AND source_system_name IS NOT NULL
GROUP BY
  fy_year,
  source_system_name,
  period_name
ORDER BY
  fy_year DESC, source_system_name
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT os.fiscal_week_id) as unique_fiscal_weeks_fact,
  COUNT(DISTINCT os.gl_publication_code) as unique_publication_codes_fact,
  COUNT(DISTINCT os.os_level_12) as unique_department_codes_fact,
  MIN(calendar.fy_first_day_of_week) as earliest_fiscal_week_date,
  MAX(calendar.fy_last_day_of_week) as latest_fiscal_week_date,
  COUNT(DISTINCT calendar.fy_year) as unique_fiscal_years_calendar,
  COUNT(DISTINCT control.period_name) as unique_period_names_control,
  APPROX_COUNT_DISTINCT(os.source_system_name) as approx_unique_source_systems
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
    ON calendar.fy_year_week_number = control.source_week_number
WHERE
  calendar.fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(t0.Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_positive_test,
  CASE WHEN COUNT(DISTINCT t0.source_system_name) > 0 THEN 'PASS' ELSE 'FAIL' END as source_system_present_test,
  CASE WHEN MAX(calendar.fy_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as fiscal_year_freshness_test,
  CASE WHEN SUM(CASE WHEN control.period_name IN ('CP', 'PY') THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as period_control_filter_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON t0.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
    ON calendar.fy_year_week_number = control.source_week_number
WHERE
  calendar.fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Period Control Filter' as rule_name,
  COUNT(*) as total_records_in_control_table,
  SUM(CASE WHEN period_name IN ('CP', 'PY') THEN 1 ELSE 0 END) as records_matching_dashboard_filter,
  SAFE_DIVIDE(SUM(CASE WHEN period_name IN ('CP', 'PY') THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_matching_filter,
  ARRAY_AGG(DISTINCT period_name) as all_period_names_in_control_table
FROM
  `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control
LIMIT 1;","WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS int) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      pub.publication_name,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number AS calendar_fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year,
      calendar.period_name,
      dep.department_name
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
          CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
          CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE
            WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
            ELSE 'N'
          END AS month_end_flag,
          CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
          CAST(c.fy_year AS int) AS fy_year,
          control_inner.period_name
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control_inner
          ON control_inner.source_week_number = c.fy_year_week_number AND control_inner.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  *
FROM
  OSandFACT
WHERE
  fy_year IS NOT NULL
  AND source_system_name IS NOT NULL
ORDER BY
  fy_year DESC, fiscal_week_id DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': ""period_name filter in the calendar subquery, used to select 'Current Period' and 'Prior Year' data."", 'suggested_governance': 'These period types should ideally be driven by a configuration table or user-selected parameters in the dashboard, allowing for more flexible time period analysis without modifying the SQL.', 'impact': 'high', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded period types ('CP', 'PY') with user-selectable parameters or a dynamic lookup from a governance table."", ""Consider adding a date range parameter for the fiscal year to allow users to select specific historical periods beyond 'CP' and 'PY'.""]",0,d7412673-0af1-4efe-8374-ca475b001fb6
"-- This is the main SQL to run for comprehensive business analysis, combining all key metrics and dimensions.
-- Hardcoded values are replaced with dynamic alternatives or parameters for flexibility.

WITH base_data AS (
  SELECT
    t0.Advertiser,
    t0.PortfolioParentGroup,
    t0.PortfolioChildGroup,
    t0.TransactionType,
    t0.FinancialYear,
    t0.FinancialQuarter,
    t0.FinancialMonthNumber,
    t0.RevenueGross,
    -- Derived Financial Period (from Q2 & Q3)
    CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) AS financial_period_derived,
    -- Remapped Financial Month Number (from Q3)
    CASE
      WHEN (t0.FinancialMonthNumber = 1) THEN 7
      WHEN (t0.FinancialMonthNumber = 2) THEN 8
      WHEN (t0.FinancialMonthNumber = 3) THEN 9
      WHEN (t0.FinancialMonthNumber = 4) THEN 10
      WHEN (t0.FinancialMonthNumber = 5) THEN 11
      WHEN (t0.FinancialMonthNumber = 6) THEN 12
      WHEN (t0.FinancialMonthNumber = 7) THEN 1
      WHEN (t0.FinancialMonthNumber = 8) THEN 2
      WHEN (t0.FinancialMonthNumber = 9) THEN 3
      WHEN (t0.FinancialMonthNumber = 10) THEN 4
      WHEN (t0.FinancialMonthNumber = 11) THEN 5
      WHEN (t0.FinancialMonthNumber = 12) THEN 6
      ELSE NULL
    END AS remapped_financial_month_number,
    -- Hardcoded comparison date (replaced with CURRENT_DATE() for dynamic analysis)
    DATE(CURRENT_DATE()) AS hardcoded_comparison_date_dynamic
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
  -- Apply a general date filter for performance, e.g., last 2 financial years
  WHERE t0.FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
)
SELECT
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  FinancialYear,
  FinancialQuarter,
  FinancialMonthNumber,
  financial_period_derived,
  -- Calculate constructed_date and derived_date_complex for analysis
  DATE(FinancialYear, remapped_financial_month_number, 1) AS constructed_date,
  SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(FinancialYear, remapped_financial_month_number, 1) AS DATETIME), MONTH) AS DATE) AS derived_date_complex,
  -- Flag for the complex date comparison logic (original: constructed_date <= '2025-06-26')
  (DATE(FinancialYear, remapped_financial_month_number, 1) <= hardcoded_comparison_date_dynamic) AS is_date_within_complex_filter,
  SUM(RevenueGross) AS total_revenue_gross
FROM base_data
GROUP BY
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  FinancialYear,
  FinancialQuarter,
  FinancialMonthNumber,
  financial_period_derived,
  constructed_date,
  derived_date_complex,
  is_date_within_complex_filter
ORDER BY
  FinancialYear DESC, FinancialQuarter DESC, total_revenue_gross DESC
LIMIT 1000;
","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT Advertiser) as unique_advertisers,
  COUNT(DISTINCT PortfolioParentGroup) as unique_parent_groups,
  COUNT(DISTINCT PortfolioChildGroup) as unique_child_groups,
  COUNT(DISTINCT TransactionType) as unique_transaction_types,
  MIN(CONCAT(FinancialYear, '-', LPAD(FinancialMonthNumber, 2, '0'))) as earliest_financial_period,
  MAX(CONCAT(FinancialYear, '-', LPAD(FinancialMonthNumber, 2, '0'))) as latest_financial_period,
  APPROX_COUNT_DISTINCT(CONCAT(Advertiser, PortfolioParentGroup, FinancialYear, FinancialMonthNumber)) as approx_unique_monthly_records
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(RevenueGross) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_present_test,
  CASE WHEN MAX(FinancialYear) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` 
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Transaction Type Not Guaranteed' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (TransactionType NOT IN ('Guaranteed') OR TransactionType IS NULL) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (TransactionType NOT IN ('Guaranteed') OR TransactionType IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'Specific PortfolioParentGroup Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN PortfolioParentGroup IN ('CONSORTIUM VIC') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN PortfolioParentGroup IN ('CONSORTIUM VIC') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 2;","SELECT 
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  FinancialYear,
  FinancialQuarter,
  FinancialMonthNumber,
  RevenueGross
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
ORDER BY FinancialYear DESC, FinancialQuarter DESC, RevenueGross DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '26/06/2025', 'original_format': '2025-06-26 07:36:48.083696+00', 'context': 'Used as a fixed comparison date in a complex date filter (clmn13_ = true, i.e., constructed_date <= hardcoded_date)', 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard parameter to make the filter dynamic and relevant to the current period.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'INDEPENDENT AGENCIES NSW'""], 'context': 'Filter for PortfolioParentGroup in Query 1.', 'suggested_governance': ""Use a parameter or join to a 'PortfolioParentGroup' lookup table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Guaranteed'""], 'context': 'Exclusion filter for TransactionType in Query 1.', 'suggested_governance': ""Use a parameter or join to a 'TransactionType' lookup table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'FY2025 - Q4'""], 'context': 'Filter for Financial Period in Query 2 and Query 3.', 'suggested_governance': 'Derive dynamically based on current date/financial period or use a dashboard parameter.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM VIC'""], 'context': 'Filter for PortfolioParentGroup in Query 3.', 'suggested_governance': ""Use a parameter or join to a 'PortfolioParentGroup' lookup table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Deal'""], 'context': 'Filter for TransactionType in Query 3.', 'suggested_governance': ""Use a parameter or join to a 'TransactionType' lookup table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'VIC CON B3'"", ""'VIC CON B2'"", ""'VIC CON B1'""], 'context': 'Filter for PortfolioChildGroup in Query 3.', 'suggested_governance': ""Use a parameter or join to a 'PortfolioChildGroup' lookup table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['CASE WHEN (FinancialMonthNumber = 1) THEN 7 ... ELSE NULL END'], 'context': 'Month remapping logic in Query 3, potentially for a custom financial calendar.', 'suggested_governance': ""Externalize this logic to a UDF or a configuration table if it's a standard business rule, or document its purpose clearly."", 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., CURRENT_DATE(), DATE_SUB()).', 'Replace hardcoded lookup values for PortfolioParentGroup, PortfolioChildGroup, and TransactionType with joins to governed reference tables or dashboard parameters.', ""Use configuration tables or dynamic derivations for financial period filters (e.g., 'FY2025 - Q4') instead of hardcoded strings."", 'Externalize complex business logic like month remapping into UDFs or configuration tables for better maintainability and transparency.']",1,6f1c8731-02da-464f-b146-bf2947860735
"-- This is the main SQL to run for business analysis, combining metrics from both queries and using the more granular daily table.
-- It replaces hardcoded dates with CURRENT_DATE() and suggests parameterization for currency display.

WITH base_data AS (
  SELECT
    ad_type_name AS adtype_name,
    is_xtend_flag AS xtend_flag,
    unified_publication_name,
    unified_publication_gl_code,
    CASE
      WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
        'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
        'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
        'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
        'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
        'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
      ELSE 'Non Sundry Pubs'
    END AS Sundry_Pubs_Flag,
    fy_year_month_number,
    CAST(`right`(CAST(fy_year_month_number AS STRING), 2) AS INT) AS fiscal_month_number,
    fy_year AS financial_year,
    fy_quarter_of_year AS financial_quarter,
    fy_month_of_year AS financial_month,
    fy_month_short_name AS financial_short_month,
    fy_week_of_year AS financial_week,
    revenue_transaction_status_code AS revenue_transaction_status,
    is_print_digital_flag,
    current_fy_month_of_year AS current_financial_month,
    current_fy_week_of_year AS current_financial_week,
    fy_year_week_number,
    style_name,
    UPPER(ASL.fin_adtype_name) AS fin_adtype_name,
    CASE
      WHEN sync_sales_segment_l2_name = 'MRCA' THEN 'MRCA'
      ELSE 'Client'
    END AS Sales_Group,
    EXTRACT(DAYOFWEEK FROM `current_date`()) AS DOW_Today,
    sales_segment_l1_name AS sales_segment_l_1_name,
    sales_segment_l2_name AS sales_segment_l_2_name,
    sync_sales_segment_l1_name AS sales_segment_l_1_name_sync,
    sync_sales_segment_l2_name AS sales_segment_l_2_name_sync,
    fy_quarter_of_year_name,
    relative_fy_year_offset,
    relative_fy_quarter_offset,
    relative_fy_month_offset,
    relative_fy_week_offset,
    customer_group_name AS advertiser_group,
    customer_group_parent_name AS advertiser_parent,
    SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
    curr_sales_segment_gm_name AS sales_segment_gm_name,
    sync_sales_segment_gm_name AS sales_segment_gm_name_sync,
    revenue_group_level1_name AS revenue_group_level_1_name,
    revenue_group_level2_name AS revenue_group_level_2_name,
    SUM(IFNULL(lgb_pub_amount, 0)) AS pub_lgb,
    SUM(IFNULL(lgb_ss_amount, 0)) AS ss_lgb,
    SUM(IFNULL(pipeline_amount, 0)) AS pipeline,
    SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
    UPPER(revenue_group_type_code) AS revenue_type,
    Upper(revenue_type_level2_code) AS revenue_type_Level2,
    UPPER(ASL.revenue_group_sub_type_code) AS revenue_group_subtype,
    current_portfolio_group_owner_sync,
    sync_portfolio_group_name AS portfolio_group_name_sync,
    current_portfolio_group_name AS portfolio_group_name_current,
    sync_portfolio_parent_group_name AS portfolio_parent_group_name_sync,
    industry_level1_name AS aszsic_industry_level_1_name,
    industry_level1_code AS anzsic_industry_level_1_code,
    industry_level2_code AS anzsic_industry_level_2_code,
    industry_level2_name AS aszsic_industry_level_2_name,
    industry_level3_code AS anzsic_industry_level_3_code,
    industry_level3_name AS anzsic_industry_level_3_name,
    industry_level4_code AS anzsic_industry_level_4_code,
    industry_level4_name AS anzsic_industry_level_4_name,
    industry_pillar_name AS nca_industry_pillar,
    industry_pillar_group_name AS nca_industry_anzsic_pillar_group,
    ASL.product_group_name AS product_group,
    division_group_name AS publishing_division_group,
    division_parent_group_name AS publishing_division_parent,
    CASE
      WHEN client_reporting_date >= `current_date`('Australia/Sydney') THEN 'Y'
      ELSE 'N'
    END AS is_future_period_flag,
    CASE
      WHEN client_reporting_date >= DATE_ADD(`current_date`('Australia/Sydney'), INTERVAL -365 DAY) THEN 'Y'
      ELSE 'N'
    END AS ly_is_future_period_flag,
    CASE
      WHEN client_reporting_date >= DATE_ADD(`current_date`('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
      ELSE 'N'
    END AS ny_is_future_period_flag,
    cost_model_type_code AS cost_model_type,
    CASE
      WHEN dw_source_system_code = 'PLUTO' THEN CAST(client_reporting_date AS string)
      ELSE booking_line_created_date
    END AS booking_line_created_date_str,
    advertiser_name,
    current_portfolio_conformed_owner_sync,
    sync_portfolio_conformed_name AS portfolio_conformed_name_sync,
    publishing_division_name AS publishing_division,
    booking_line_created_week_of_year AS booking_line_created_week,
    booking_line_created_month_of_year AS booking_line_created_month,
    booking_line_created_month_short_name AS booking_line_created_short_month,
    booking_line_created_quarter_of_year AS booking_line_created_quarter,
    booking_line_created_year,
    agency_group_parent_name AS agency_parent,
    agency_group_name AS agency_group,
    agency_name,
    agency_id_src AS agency_number,
    cal_month_name AS calendar_month_name,
    cal_year AS calendar_year,
    section_l5_name AS classification_name,
    SUM(IFNULL(target_amount, 0)) AS target_amount,
    IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD,
    IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS current_portfolio_group_owner_full,
    IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
    IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS portfolio_full_name_sync,
    IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS sync_portfolio_conformed_owner_full,
    current_portfolio_conformed_owner_current,
    current_portfolio_group_owner_current,
    adtype_l1,
    adtype_l2,
    legacy_growth_flag,
    relative_cal_year_offset,
    cal_quarter_of_year_name AS calendar_quarter_of_year,
    cal_year_week_number AS calendar_week,
    CAST(client_reporting_date AS DATE) AS client_reporting_date_parsed,
    CAST(booking_line_created_date AS DATE) AS booking_line_created_date_parsed,
    MIN(CASE WHEN customer_group_parent_name = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY fy_year) AS fix_date_lod
  FROM
    `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
  WHERE
    (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
        'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
        'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
    (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
    '-')))
  GROUP BY ALL -- Grouping by all selected columns to aggregate sums
)
SELECT
  -- Dimensions
  adtype_l1,
  fin_adtype_name,
  CASE
    WHEN (fin_adtype_name = 'XTEND') THEN 'XTEND'
    WHEN (revenue_group_subtype = 'DIGITAL' AND revenue_type = 'PROGRAMMATIC SOURCE') THEN 'PROGRAMMATIC - DIGITAL OTHER'
    WHEN (revenue_group_subtype = 'DIGITAL' AND revenue_type = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(cost_model_type, 3) = 'GUA') THEN 'PROGRAMMATIC - GUARANTEED'
    WHEN (revenue_group_subtype = 'DIGITAL' AND revenue_type = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(cost_model_type, 3) = 'NON') THEN 'PROGRAMMATIC - OPEN EXCHANGE'
    WHEN (revenue_group_subtype = 'DIGITAL' AND revenue_type = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(cost_model_type, 3) = 'PMP') THEN 'PROGRAMMATIC - PMP'
    WHEN (revenue_type = 'DIGITAL') THEN 'ADPT DIGITAL'
    WHEN (SAFE.LEFT(revenue_group_subtype, 6) = 'SUNDRY') THEN 'SUNDRY'
    ELSE revenue_group_subtype
  END AS revenue_type_dimension,
  revenue_group_subtype,
  unified_publication_name,
  advertiser_parent,
  booking_line_created_date_parsed AS booking_line_created_date,
  financial_year,
  financial_quarter,
  financial_month,
  financial_week,
  calendar_year,
  calendar_month_name,
  calendar_week,
  Sales_Group,
  sales_segment_l_1_name,
  sales_segment_l_2_name,
  advertiser_group,
  advertiser_name,
  portfolio_group_name_sync,
  portfolio_group_name_current,
  portfolio_parent_group_name_sync,
  GSD,
  anzsic_industry_level_1_name,
  product_group,
  publishing_division,
  agency_group,
  cost_model_type,
  revenue_transaction_status,
  -- Metrics
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS gross_revenue_current_fy,
  SUM(CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END) AS gross_revenue_next_fy,
  SUM(SAFE_DIVIDE(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_current_fy_k,
  SUM(SAFE_DIVIDE(CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_next_fy_k,
  SUM(CASE
    WHEN (relative_fy_year_offset = 0 AND UPPER(unified_publication_name) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))
      OR (relative_fy_year_offset = 0 AND (SAFE_CAST(CASE WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' AND sales_segment_l_2_name_sync = 'Digital Other' AND advertiser_parent != 'DOUBLECLICK') THEN fix_date_lod ELSE booking_line_created_date_parsed END AS DATETIME) <= DATETIME_ADD(CAST(CURRENT_DATE('Australia/Sydney') AS DATETIME), INTERVAL -365 DAY)))
    THEN SAFE_DIVIDE(gross_revenue_amount, 1000)
    ELSE 0
  END) AS gross_revenue_conditional_k,
  SUM(adjustment_amount) AS total_adjustment_amount,
  SUM(pub_lgb) AS total_pub_lgb,
  SUM(ss_lgb) AS total_ss_lgb,
  SUM(pipeline) AS total_pipeline,
  SUM(target_amount) AS total_target_amount,
  COUNT(CASE
    WHEN (UPPER(revenue_group_subtype) = 'PRINT') THEN 1
    WHEN (UPPER(revenue_group_subtype) = 'DIGITAL') THEN 2
    WHEN (UPPER(revenue_group_subtype) = 'PROGRAMMATIC') THEN 3
    WHEN (UPPER(revenue_group_subtype) = 'PROGRAMMATIC EXCHANGE') THEN 4
    WHEN (UPPER(revenue_group_subtype) = 'PROGRAMMATIC SOURCE') THEN 5
    WHEN (UPPER(revenue_group_subtype) = 'SUNDRY ADSALES OVERLAY') THEN 6
    ELSE NULL
  END) AS revenue_type_encoded_count,
  SUM(CASE
    WHEN (UPPER(revenue_group_subtype) = 'PRINT') THEN 1
    WHEN (UPPER(revenue_group_subtype) = 'DIGITAL') THEN 2
    WHEN (UPPER(revenue_group_subtype) = 'PROGRAMMATIC') THEN 3
    WHEN (UPPER(revenue_group_subtype) = 'PROGRAMMATIC EXCHANGE') THEN 4
    WHEN (UPPER(revenue_group_subtype) = 'PROGRAMMATIC SOURCE') THEN 5
    WHEN (UPPER(revenue_group_subtype) = 'SUNDRY ADSALES OVERLAY') THEN 6
    ELSE NULL
  END) AS revenue_type_encoded_sum
FROM base_data
GROUP BY
  -- Group by all dimensions to get the correct aggregation level
  adtype_l1,
  fin_adtype_name,
  revenue_type_dimension,
  revenue_group_subtype,
  unified_publication_name,
  advertiser_parent,
  booking_line_created_date_parsed,
  financial_year,
  financial_quarter,
  financial_month,
  financial_week,
  calendar_year,
  calendar_month_name,
  calendar_week,
  Sales_Group,
  sales_segment_l_1_name,
  sales_segment_l_2_name,
  advertiser_group,
  advertiser_name,
  portfolio_group_name_sync,
  portfolio_group_name_current,
  portfolio_parent_group_name_sync,
  GSD,
  anzsic_industry_level_1_name,
  product_group,
  publishing_division,
  agency_group,
  cost_model_type,
  revenue_transaction_status
ORDER BY financial_year DESC, financial_month DESC
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT client_reporting_date) as unique_client_reporting_dates,
  COUNT(DISTINCT booking_line_created_date) as unique_booking_line_created_dates,
  COUNT(DISTINCT advertiser_id_src) as unique_advertisers,
  COUNT(DISTINCT unified_publication_name) as unique_publications,
  MIN(client_reporting_date) as earliest_client_reporting_date,
  MAX(client_reporting_date) as latest_client_reporting_date,
  MIN(booking_line_created_date) as earliest_booking_line_created_date,
  MAX(booking_line_created_date) as latest_booking_line_created_date,
  APPROX_COUNT_DISTINCT(CONCAT(CAST(client_reporting_date AS STRING), '-', CAST(advertiser_id_src AS STRING), '-', CAST(booking_line_id_src AS STRING))) as approx_unique_transactions
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  client_reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","-- Quick validation that all metric calculations work syntactically and data is fresh
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_advertiser_test,
  CASE WHEN MAX(client_reporting_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN COUNTIF(relative_fy_year_offset = 0) > 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_data_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  client_reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Status Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  client_reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'SUDDENLY Publication Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-'))) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-'))) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  client_reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","-- Query to get representative sample data for further analysis
SELECT
  client_reporting_date,
  booking_line_created_date,
  financial_year,
  financial_month,
  adtype_l1,
  fin_adtype_name,
  revenue_type_code AS revenue_type,
  revenue_group_subtype_code AS revenue_group_subtype,
  gross_revenue_amount,
  target_amount,
  pipeline_amount,
  advertiser_name,
  unified_publication_name,
  relative_fy_year_offset,
  relative_cal_year_offset,
  revenue_transaction_status_code,
  style_name,
  source_publishing_division_name,
  advertiser_id_src,
  ad_type_name,
  customer_group_parent_name AS advertiser_parent,
  dw_source_system_code
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  client_reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND gross_revenue_amount IS NOT NULL
ORDER BY client_reporting_date DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '08/05/2025', 'original_format': '2025-05-08 01:48:02.510465+00', 'context': 'Used as a fixed reference date in calculations for `clmn13_` and `clmn11_` (Query 2 & 3), which are then used in date comparisons (`clmn43_`, `clmn35_`). This date is in the future relative to current date.', 'suggested_fix': ""Replace with `CURRENT_DATE('Australia/Sydney')` or a dashboard parameter for the 'as of' date."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Admin.ADV'"", ""'Admin.DTM'"", ""'Admin.HWT'"", ""'Admin.International'"", ""'Admin.Sales'"", ""'Admin.Sport'"", ""'Admin.TCM'"", ""'Bestrecipes.Admin'"", ""'Bodyandsoul.Admin'"", ""'CODE'"", ""'CodeBet'"", ""'Delicious.admin'"", ""'Escape.Admin'"", ""'GQ.Admin'"", ""'Kidspot.Admin'"", ""'National Sundry'"", ""'National Tabloid PrePrint'"", ""'News.Admin'"", ""'odds.com.au'"", ""'Punters.com.au'"", ""'Qantas Travel Insider'"", ""'RACENET'"", ""'Shortlyster Managed Service'"", ""'Sky News'"", ""'SKYNEWS.ADMIN'"", ""'Stellar.Admin'"", ""'Stockhead'"", ""'SUDDENLY.CW'"", ""'SUDDENLY.NORTH'"", ""'SUDDENLY.TGG'"", ""'Taste.Admin'"", ""'TAUS.ADMIN'"", ""'The Sunday Times'"", ""'TOOWOOMBACUSTOM'"", ""'Vogue.Admin'"", ""'Vogueliving.Admin'""], 'context': ""List of unified publication names used to classify 'Sundry Pubs'."", 'suggested_governance': 'Create a `publication_classification_lookup` table with `publication_name` and `is_sundry_flag`.', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'MRCA'""], 'context': ""Specific sales segment name used to classify 'Sales_Group'."", 'suggested_governance': 'Manage sales segment classifications in a `sales_segment_lookup` table.', 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'""], 'context': 'Specific advertiser parent name used in `fix_date_lod` calculation and other conditional logic.', 'suggested_governance': 'Manage special advertiser classifications in an `advertiser_lookup` table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'""], 'context': 'Specific source system code used to determine `booking_line_created_date` source.', 'suggested_governance': 'Manage source system definitions in a `source_system_lookup` table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'thresholds', 'hardcoded_values': [""'VACANT'""], 'context': 'Default value for owner names when NULL.', 'suggested_governance': 'Define default values in a configuration table or handle via data quality rules.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'PRINT'"", ""'DIGITAL'"", ""'PROGRAMMATIC'"", ""'PROGRAMMATIC EXCHANGE'"", ""'PROGRAMMATIC SOURCE'"", ""'SUNDRY ADSALES OVERLAY'"", ""'XTEND'"", ""'ADPT DIGITAL'"", ""'SUNDRY'"", ""'PROGRAMMATIC - GUARANTEED'"", ""'PROGRAMMATIC - OPEN EXCHANGE'"", ""'PROGRAMMATIC - PMP'"", ""'PROGRAMMATIC - DIGITAL OTHER'""], 'context': 'Categorization logic for various revenue and ad types.', 'suggested_governance': 'Create a `revenue_type_classification_lookup` table to map raw types to standardized categories.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'OUTSTREAM'"", ""'XTEND'"", ""'EDMEDIA'"", ""'ECOMMERCE'""], 'context': 'Specific unified publication names used in conditional revenue calculations.', 'suggested_governance': 'Manage these publication types in a `publication_type_lookup` table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'17114'"", ""'29172'"", ""'52809'""], 'context': ""Specific advertiser IDs used in a complex filter for 'SUDDENLY' publications."", 'suggested_governance': 'Manage these special advertiser IDs in an `advertiser_special_case_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'$'""], 'context': 'String literal used to determine if currency should be displayed in thousands or as-is. Implies a missing parameter.', 'suggested_governance': ""Introduce a dashboard parameter for currency display format (e.g., 'UNIT_DISPLAY_FORMAT' with values 'FULL' or 'THOUSANDS')."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters (e.g., `start_date`, `end_date`) or relative date functions (`CURRENT_DATE()`, `DATE_SUB()`).', 'Replace hardcoded lookup values (e.g., publication names, sales segments, advertiser IDs, revenue types) with joins to governed reference tables.', ""Use configuration tables for complex business rules (e.g., 'Sundry Pubs' classification, revenue type categorization) instead of hardcoded `CASE` statements."", ""Introduce a dashboard parameter for currency display format (e.g., 'Show in Thousands' boolean or 'Currency Unit' string)."", 'Parameterize the `relative_fy_year_offset` and `relative_cal_year_offset` filters to allow dynamic selection of fiscal/calendar years.']",2,52c11c9c-052a-4e45-9cda-8fecd87d7964
"WITH base_data AS (
  SELECT
    t0.GROSS_AMOUNT_DIFF,
    t0.advertiser_group,
    t0.advertiser_parent,
    t0.booking_line_id,
    t0.booking_number,
    t0.financial_short_month,
    t0.financial_year,
    t0.movement_date,
    t0.portfolio_group_name_sync,
    t0.portfolio_parent_group_name_sync,
    t0.portfolio_conformed_name_sync,
    t0.revenue_sub_type,
    t0.revenue_type,
    t0.xtend_flag
  FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
  WHERE t0.movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Use relative date for broader analysis
),
calculated_dimensions AS (
  SELECT
    GROSS_AMOUNT_DIFF,
    movement_date,
    financial_year,
    financial_short_month,
    advertiser_group,
    advertiser_parent,
    booking_line_id,
    booking_number,
    portfolio_group_name_sync,
    portfolio_parent_group_name_sync,
    portfolio_conformed_name_sync,
    revenue_sub_type,
    revenue_type,
    xtend_flag,
    CASE WHEN advertiser_group IS NULL THEN 'Nah' ELSE advertiser_group END AS advertiser_group_or_nah,
    PARSE_DATE('%Y-%b-%d', CONCAT(financial_year,'-',financial_short_month,'-1')) AS financial_date_parsed,
    (portfolio_parent_group_name_sync = 'DIGITAL OTHER') AS is_digital_other_parent,
    SAFE.LEFT(revenue_sub_type, 6) AS revenue_sub_type_prefix_6,
    SAFE.LEFT(revenue_sub_type, 3) AS revenue_sub_type_prefix_3,
    (revenue_sub_type = 'DIGITAL') AS is_revenue_sub_type_digital,
    (SAFE.LEFT(revenue_sub_type, 3) = 'PRO') AS is_pro_prefix,
    ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL')) AS is_digital_other_and_digital_sub_type,
    CASE
      WHEN xtend_flag = 'Y' THEN 'XTEND'
      WHEN (SAFE.LEFT(revenue_sub_type, 3) = 'PRO' OR ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL'))) THEN 'PROGRAMMATIC'
      WHEN revenue_sub_type = 'DIGITAL' THEN 'ADPT DIGITAL'
      WHEN SAFE.LEFT(revenue_sub_type, 6) = 'SUNDRY' THEN 'SUNDRY'
      ELSE revenue_sub_type
    END AS revenue_category
  FROM base_data
)
SELECT
  movement_date,
  financial_year,
  financial_date_parsed,
  advertiser_parent,
  advertiser_group_or_nah,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  portfolio_conformed_name_sync,
  revenue_type,
  revenue_sub_type,
  revenue_category,
  SUM(GROSS_AMOUNT_DIFF) AS gross_amount_diff_total,
  SUM(CASE WHEN revenue_type = 'DIGITAL' THEN GROSS_AMOUNT_DIFF ELSE 0 END) AS digital_revenue,
  SUM(CASE WHEN revenue_type = 'PRINT' THEN GROSS_AMOUNT_DIFF ELSE 0 END) AS print_revenue
FROM calculated_dimensions
GROUP BY
  movement_date,
  financial_year,
  financial_date_parsed,
  advertiser_parent,
  advertiser_group_or_nah,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  portfolio_conformed_name_sync,
  revenue_type,
  revenue_sub_type,
  revenue_category
ORDER BY movement_date DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT movement_date) as unique_movement_dates,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT advertiser_parent) as unique_advertiser_parents,
  COUNT(DISTINCT portfolio_parent_group_name_sync) as unique_portfolio_parent_groups,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  MIN(movement_date) as earliest_movement_date,
  MAX(movement_date) as latest_movement_date,
  APPROX_COUNT_DISTINCT(booking_line_id) as approx_unique_booking_line_ids
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(GROSS_AMOUNT_DIFF) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as gross_amount_diff_test,
  CASE WHEN COUNT(DISTINCT movement_date) > 0 THEN 'PASS' ELSE 'FAIL' END as movement_date_freshness_test,
  CASE WHEN COUNT(DISTINCT advertiser_parent) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_parent_presence_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.GROSS_AMOUNT_DIFF,
    t0.advertiser_group,
    t0.advertiser_parent,
    t0.financial_short_month,
    t0.financial_year,
    t0.movement_date,
    t0.portfolio_group_name_sync,
    t0.portfolio_parent_group_name_sync,
    t0.revenue_sub_type,
    t0.revenue_type,
    t0.xtend_flag
  FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
  WHERE t0.movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
)
SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Category Logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE
    WHEN (xtend_flag = 'Y' AND revenue_category = 'XTEND') THEN 1
    WHEN ((SAFE.LEFT(revenue_sub_type, 3) = 'PRO' OR ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL'))) AND revenue_category = 'PROGRAMMATIC') THEN 1
    WHEN (revenue_sub_type = 'DIGITAL' AND revenue_category = 'ADPT DIGITAL') THEN 1
    WHEN (SAFE.LEFT(revenue_sub_type, 6) = 'SUNDRY' AND revenue_category = 'SUNDRY') THEN 1
    WHEN (NOT (xtend_flag = 'Y' OR (SAFE.LEFT(revenue_sub_type, 3) = 'PRO' OR ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL'))) OR revenue_sub_type = 'DIGITAL' OR SAFE.LEFT(revenue_sub_type, 6) = 'SUNDRY') AND revenue_category = revenue_sub_type) THEN 1
    ELSE 0
  END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE
    WHEN (xtend_flag = 'Y' AND revenue_category = 'XTEND') THEN 1
    WHEN ((SAFE.LEFT(revenue_sub_type, 3) = 'PRO' OR ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL'))) AND revenue_category = 'PROGRAMMATIC') THEN 1
    WHEN (revenue_sub_type = 'DIGITAL' AND revenue_category = 'ADPT DIGITAL') THEN 1
    WHEN (SAFE.LEFT(revenue_sub_type, 6) = 'SUNDRY' AND revenue_category = 'SUNDRY') THEN 1
    WHEN (NOT (xtend_flag = 'Y' OR (SAFE.LEFT(revenue_sub_type, 3) = 'PRO' OR ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL'))) OR revenue_sub_type = 'DIGITAL' OR SAFE.LEFT(revenue_sub_type, 6) = 'SUNDRY') AND revenue_category = revenue_sub_type) THEN 1
    ELSE 0
  END), COUNT(*)) * 100 as pass_rate_percentage
FROM (
  SELECT
    *,
    CASE
      WHEN xtend_flag = 'Y' THEN 'XTEND'
      WHEN (SAFE.LEFT(revenue_sub_type, 3) = 'PRO' OR ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL'))) THEN 'PROGRAMMATIC'
      WHEN revenue_sub_type = 'DIGITAL' THEN 'ADPT DIGITAL'
      WHEN SAFE.LEFT(revenue_sub_type, 6) = 'SUNDRY' THEN 'SUNDRY'
      ELSE revenue_sub_type
    END AS revenue_category
  FROM base_data
) subquery;","SELECT
  GROSS_AMOUNT_DIFF,
  advertiser_group,
  advertiser_parent,
  booking_line_id,
  booking_number,
  financial_short_month,
  financial_year,
  movement_date,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  portfolio_conformed_name_sync,
  revenue_sub_type,
  revenue_type,
  xtend_flag
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY movement_date DESC, GROSS_AMOUNT_DIFF DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '29/05/2025', 'original_format': '2025-05-29', 'context': 'Used as a fixed date filter for movement_date in Query 1.', 'suggested_fix': 'Replace with a dashboard date parameter (e.g., @start_date, @end_date) or relative date functions (e.g., CURRENT_DATE()).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '23/06/2025', 'original_format': '2025-06-23', 'context': 'Used as a fixed date filter for movement_date in Query 2.', 'suggested_fix': 'Replace with a dashboard date parameter (e.g., @start_date, @end_date) or relative date functions (e.g., CURRENT_DATE()).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Y'"", ""'PRO'"", ""'DIGITAL OTHER'"", ""'DIGITAL'"", ""'SUNDRY'""], 'context': ""Logic for 'revenue_category' dimension is hardcoded within a CASE statement, defining 'XTEND', 'PROGRAMMATIC', 'ADPT DIGITAL', 'SUNDRY' categories."", 'suggested_governance': 'Move these business rules and their corresponding values to a governed lookup table (e.g., `revenue_category_rules`) that can be joined to, allowing for easier updates and transparency.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Nah'"", ""'DIGITAL'"", ""'PRINT'""], 'context': ""Default value for NULL advertiser_group ('Nah') and specific revenue_type values ('DIGITAL', 'PRINT') used in calculations."", 'suggested_governance': ""For 'Nah', consider if this should be a standard 'Unknown' or 'N/A' value. For 'DIGITAL'/'PRINT', if these are part of a larger set of revenue types, ensure they are consistent with a `revenue_type_master` table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM SA'"", ""'DIRECT SA WA'"", ""'CONSORTIUM NSW'"", ""'QLD IA C2'""], 'context': 'Specific portfolio parent group names and conformed names used as filters.', 'suggested_governance': 'These portfolio names should be managed in a `portfolio_hierarchy` or `portfolio_master` table, allowing for dynamic filtering and consistent naming across reports.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': [""'2025'""], 'context': 'Fixed financial year filter.', 'suggested_governance': 'Replace with a parameter or relative year calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with dashboard date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`).', ""Externalize business rules for 'revenue_category' into a configuration table to allow for flexible updates without modifying SQL."", 'Manage portfolio names and other categorical filters in governed reference tables to ensure consistency and maintainability.']",3,a1b901e6-c4fb-44bc-955a-3a7070c15829
"-- This query consolidates all key metrics and dimensions from the dashboard's queries.
-- It uses relative fiscal year filtering and includes all derived fields.
WITH base_ad_data AS (
  SELECT
    t0.advertiser_name,
    t0.booking_number,
    t0.booking_name,
    t0.regexp_extract(t0.booking_name, r'^[^ _]+') AS booking_name_1st_keyword,
    t0.sort_caption,
    t0.adsize_name,
    t0.classification_name,
    t0.revenue_type,
    t0.revenue_group_subtype,
    t0.financial_year,
    t0.fy_year_month_number,
    t0.financial_short_month,
    t0.revenue_transaction_status,
    t0.record_type_code,
    t0.gross_revenue_amount, -- This is already a sum from the underlying view
    t0.net_revenue,         -- This is already a sum from the underlying view
    -- Derived Ad Size Category
    CASE
      WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
      WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
      ELSE 'Media'
    END AS ad_size_category
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.relative_fy_year_offset IN (-1, 0, 1) -- Filter for current, previous, and next fiscal year
)
SELECT
  financial_year,
  fy_year_month_number,
  financial_short_month,
  revenue_transaction_status,
  ad_size_category,
  booking_name,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(net_revenue) AS total_net_revenue,
  COUNT(DISTINCT booking_name) AS unique_bookings,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers
FROM
  base_ad_data
-- Example filters for specific analysis, can be parameterized or removed for full dataset
-- WHERE
--   financial_year = '2025' -- Example: Filter for a specific financial year
--   AND fy_year_month_number BETWEEN 202501 AND 202503 -- Example: Specific months from one of the original queries
--   AND booking_name IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series') -- Example: Specific booking names
GROUP BY
  financial_year,
  fy_year_month_number,
  financial_short_month,
  revenue_transaction_status,
  ad_size_category,
  booking_name
ORDER BY
  financial_year DESC, fy_year_month_number DESC
LIMIT 10000;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT financial_year) AS unique_financial_years,
  COUNT(DISTINCT fy_year_month_number) AS unique_fy_months,
  COUNT(DISTINCT revenue_transaction_status) AS unique_transaction_statuses,
  COUNT(DISTINCT adsize_name) AS unique_ad_sizes,
  COUNT(DISTINCT booking_name) AS unique_booking_names,
  MIN(financial_year) AS earliest_financial_year,
  MAX(financial_year) AS latest_financial_year,
  MIN(fy_year_month_number) AS earliest_fy_month_number,
  MAX(fy_year_month_number) AS latest_fy_month_number,
  SUM(gross_revenue_amount) AS total_gross_revenue_sample,
  SUM(net_revenue) AS total_net_revenue_sample
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1) -- Focus on the relevant fiscal years
LIMIT 1;","-- Quick validation that all metric calculations work syntactically and data exists
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS gross_revenue_test,
  CASE WHEN COUNT(DISTINCT revenue_transaction_status) > 0 THEN 'PASS' ELSE 'FAIL' END AS transaction_status_test,
  CASE WHEN MAX(financial_year) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS financial_year_freshness_test,
  COUNT(*) AS records_in_sample
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset = 0 -- Focus on current fiscal year for freshness
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
WITH ad_data AS (
  SELECT
    adsize_name,
    booking_name,
    financial_year,
    fy_year_month_number,
    gross_revenue_amount,
    -- Re-create the ad_size_category logic
    CASE
      WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
      WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
      ELSE 'Media'
    END AS ad_size_category
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
  WHERE
    relative_fy_year_offset IN (-1, 0, 1)
)
SELECT
  'Business Rule Validation' AS validation_type,
  'Ad Size Category Distribution' AS rule_name,
  ad_size_category,
  COUNT(*) AS records_count,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SAFE_DIVIDE(SUM(gross_revenue_amount), (SELECT SUM(gross_revenue_amount) FROM ad_data)) * 100 AS percentage_of_total_revenue
FROM
  ad_data
GROUP BY
  ad_size_category
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'Hardcoded Booking Names Revenue' AS rule_name,
  booking_name,
  COUNT(*) AS records_count,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SAFE_DIVIDE(SUM(gross_revenue_amount), (SELECT SUM(gross_revenue_amount) FROM ad_data WHERE financial_year = '2025')) * 100 AS percentage_of_2025_revenue
FROM
  ad_data
WHERE
  financial_year = '2025'
  AND booking_name IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series', 'Future Bradfield FY25 B1', 'Future Sydney Bradfield 2024')
GROUP BY
  booking_name
ORDER BY
  validation_type, rule_name, total_gross_revenue DESC;","-- Query to get representative sample data for further analysis
SELECT
  advertiser_name,
  booking_name,
  adsize_name,
  financial_year,
  fy_year_month_number,
  financial_short_month,
  revenue_transaction_status,
  gross_revenue_amount,
  net_revenue,
  relative_fy_year_offset
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1) -- Focus on relevant fiscal years
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  financial_year DESC, fy_year_month_number DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'financial_year filter', 'suggested_fix': 'replace with a parameter or relative fiscal year calculation (e.g., based on CURRENT_DATE() and fiscal year start rules)', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202501', 'original_format': '202501', 'context': 'fy_year_month_number filter', 'suggested_fix': 'replace with a parameter or relative fiscal month calculation', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202502', 'original_format': '202502', 'context': 'fy_year_month_number filter', 'suggested_fix': 'replace with a parameter or relative fiscal month calculation', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202503', 'original_format': '202503', 'context': 'fy_year_month_number filter', 'suggested_fix': 'replace with a parameter or relative fiscal month calculation', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'^(.*event sponsorship.*)$'"", ""'^(.*production.*)$'""], 'context': 'ad_size_category derivation based on adsize_name', 'suggested_governance': 'define ad size categories in a lookup table or configuration table, join to it', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Future Bradfield 2024'"", ""'Sydney & Brisbane Future Series'"", ""'Future Bradfield FY25 B1'"", ""'Future Sydney Bradfield 2024'""], 'context': 'booking_name filter', 'suggested_governance': 'define specific booking names/campaigns in a lookup table, join to it or allow user selection via parameters', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., for fiscal year/month selection).', 'Replace hardcoded lookup values for booking names with joins to governed reference tables or allow user selection via parameters.', 'Use configuration tables for ad size category business rules instead of hardcoded regex in CASE statements.']",4,e83da1de-4227-43e6-bcc6-73051c66914b
"WITH
  scenario_counts AS (
    SELECT
      t0.scenario,
      COUNT(1) AS count_by_scenario
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    GROUP BY
      t0.scenario
  ),
  total_records_cte AS (
    SELECT
      COUNT(1) AS total_records
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
  )
SELECT
  sc.scenario,
  sc.count_by_scenario,
  (SELECT total_records FROM total_records_cte) AS total_records_overall
FROM
  scenario_counts sc
ORDER BY
  sc.count_by_scenario DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT scenario) as unique_scenarios,
  MIN(scenario) as min_scenario_value,
  MAX(scenario) as max_scenario_value
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(1) > 0 THEN 'PASS' ELSE 'FAIL' END as data_exists_test,
  CASE WHEN COUNT(DISTINCT scenario) > 0 THEN 'PASS' ELSE 'FAIL' END as scenario_data_exists_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'No specific business rules identified from provided queries' as rule_name,
  COUNT(*) as records_tested,
  COUNT(*) as records_passing_rule,
  100.0 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","SELECT
  t0.*
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 100;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'other', 'hardcoded_values': [""''""], 'context': ""An empty string is selected as 'clmn0_' in the first query, likely a Looker Studio internal placeholder."", 'suggested_governance': ""Investigate the purpose of this empty string. If it's meant to represent a category, it should be replaced with a meaningful value or a parameter. If it's a Looker Studio artifact, no action needed."", 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Investigate the purpose of the hardcoded empty string (`''`) in dimension selection; if it represents a category, it should be replaced with a meaningful value or a parameter.""]",5,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
"WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      -- The @time_period is hardcoded to 'Rolling 12 months' in the outer queries
      -- This should be a parameter in a governed setup
      CASE 'Rolling 12 months'
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  ),
  fixed_global_counts AS (
    SELECT
      COUNT(DISTINCT portfolio_parent_group_name) AS fixed_ppg_count,
      COUNT(DISTINCT sales_segment_gm_name) AS fixed_gm_count,
      COUNT(DISTINCT portfolio_group_name) AS fixed_pg_count,
      COUNT(DISTINCT portfolio_conformed_name) AS fixed_portfolio_count,
      COUNT(DISTINCT media_network) AS fixed_publisher_count
    FROM
      TEMP1
  ),
  pre_aggregated_data AS (
    SELECT
      t2.*,
      fc.fixed_publisher_count,
      -- Calculate quarter based on calendar_month_short_name (as per clmn55_ in Q1)
      CASE
        WHEN calendar_month_short_name IN ('Jan', 'Feb', 'Mar') THEN 'Q1'
        WHEN calendar_month_short_name IN ('Apr', 'May', 'Jun') THEN 'Q2'
        WHEN calendar_month_short_name IN ('Jul', 'Aug', 'Sep') THEN 'Q3'
        WHEN calendar_month_short_name IN ('Oct', 'Nov', 'Dec') THEN 'Q4'
        ELSE NULL
      END AS calendar_quarter,
      -- YearMonth key (clmn40_ in Q1)
      (CAST(calendar_year AS FLOAT64)*100) + 
        CASE calendar_month_short_name
          WHEN 'Jan' THEN 1 WHEN 'Feb' THEN 2 WHEN 'Mar' THEN 3 WHEN 'Apr' THEN 4 WHEN 'May' THEN 5 WHEN 'Jun' THEN 6
          WHEN 'Jul' THEN 7 WHEN 'Aug' THEN 8 WHEN 'Sep' THEN 9 WHEN 'Oct' THEN 10 WHEN 'Nov' THEN 11 WHEN 'Dec' THEN 12
          ELSE NULL
        END AS year_month_key,
      EXTRACT(MONTH FROM TIMESTAMP(date)) AS month_of_date_num,
      -- Spend in thousands
      SAFE_DIVIDE(Spend, 1000) AS spend_k
    FROM
      TEMP2 t2
      CROSS JOIN fixed_global_counts fc
  )
SELECT
  date,
  Advertiser,
  Major_Category,
  Media_Network,
  Category,
  Sub_Category,
  portfolio_parent_group_name,
  calendar_year,
  calendar_month_short_name,
  financial_year,
  latest_date,
  max_fin_year,
  ty_ly_embed AS time_period_type,
  calendar_quarter AS quarter_period,
  year_month_key,
  month_of_date_num,
  -- Metrics
  spend_k AS spend_in_thousands,
  CASE WHEN ty_ly_embed = 'ty' THEN spend_k ELSE 0 END AS total_spend_ty_k,
  CASE WHEN ty_ly_embed = 'ly' THEN spend_k ELSE 0 END AS total_spend_ly_k,
  CASE WHEN ty_ly_embed = 'ty' AND Media_Network = 'NEWS CORP' THEN spend_k ELSE 0 END AS news_corp_spend_ty_k,
  CASE WHEN ty_ly_embed = 'ly' AND Media_Network = 'NEWS CORP' THEN spend_k ELSE 0 END AS news_corp_spend_ly_k,
  CASE WHEN ty_ly_embed = 'ty' AND Media_Network = 'youtube' THEN spend_k ELSE 0 END AS youtube_spend_ty_k,
  CASE WHEN ty_ly_embed = 'ty' AND Media_Network = 'facebook' THEN spend_k ELSE 0 END AS facebook_spend_ty_k,
  fixed_publisher_count AS overall_fixed_publisher_count
FROM
  pre_aggregated_data
WHERE
  date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) -- Sample for analysis, can be adjusted for full dashboard load
ORDER BY
  date DESC
LIMIT 100000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT date) as unique_dates,
  COUNT(DISTINCT Advertiser) as unique_advertisers,
  COUNT(DISTINCT Media_Network) as unique_media_networks,
  COUNT(DISTINCT Major_Category) as unique_major_categories,
  MIN(date) as earliest_date,
  MAX(date) as latest_date,
  APPROX_COUNT_DISTINCT(CONCAT(CAST(date AS STRING), Advertiser, Media_Network, Spend)) as approx_unique_rows_at_grain
FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(Spend) > 0 THEN 'PASS' ELSE 'FAIL' END as total_spend_check,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_advertiser_check,
  CASE WHEN MAX(date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_check
FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","WITH
  adex_data AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  TEMP1 AS (
    SELECT
      *,
      (SELECT MAX(date) FROM adex_data) AS latest_date,
      (SELECT MAX(financial_year) FROM adex_data) AS max_fin_year
    FROM
      adex_data
  )
SELECT
  'Business Rule Validation' as validation_type,
  'Rolling 12 Months TY/LY Logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 1 ELSE 0 END) as records_in_ty_period,
  SUM(CASE WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 1 ELSE 0 END) as records_in_ly_period,
  SUM(CASE WHEN Spend IS NULL THEN 1 ELSE 0 END) as null_spend_records,
  SUM(CASE WHEN Media_Network = 'NEWS CORP' AND Spend IS NOT NULL THEN 1 ELSE 0 END) as news_corp_spend_records
FROM TEMP1
WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR);","SELECT 
  date,
  Advertiser,
  Major_Category,
  Media_Network,
  Category,
  Sub_Category,
  Spend,
  portfolio_parent_group_name,
  financial_year,
  account_number
FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND Spend IS NOT NULL
ORDER BY date DESC, Spend DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'NEWS CORP'"", ""'youtube'"", ""'facebook'""], 'context': 'Media Network names used in conditional spend calculations.', 'suggested_governance': 'These media network names should be managed in a reference table (e.g., `dim_media_network`) and joined to the main data for consistent categorization and easier updates.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Q1'"", ""'Q2'"", ""'Q3'"", ""'Q4'""], 'context': 'Quarter definitions based on month numbers.', 'suggested_governance': 'Quarter definitions should be part of a comprehensive date dimension table, allowing for flexible fiscal or calendar quarter definitions without hardcoding logic in every query.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Rolling 12 months'"", ""'Calendar Year'"", ""'Financial Year'""], 'context': 'Time period selection logic is hardcoded, overriding the `@time_period` variable.', 'suggested_governance': 'This selection should be driven by a dashboard parameter or a configuration table, allowing users to dynamically choose the time period type without modifying the underlying SQL.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'KEY ACCOUNTS TRAVEL'""], 'context': 'Specific `portfolio_parent_group_name` used as a filter.', 'suggested_governance': 'This filter value should be configurable via a dashboard parameter or a lookup table for business units/groups, enabling dynamic filtering.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'NT Dept Of Trade Business & Innovation'"", ""'NT Dept Of Chief Minister'"", ""'NT Dept Of Infrastructure Planning & Logistics'"", ""'NT Dept Of Industry Tourism & Trade'"", ""'NT Dept Of Education Employment & Training'"", ""'NT Dept Of Tourism & Culture'"", ""'NT Dept Of Transport'"", ""'NT Dept Of Attorney-General & Justice'"", ""'NT Dept Of Environment & Natural Resources'"", ""'NT Dept Of Lands Planning & The Environment'"", ""'NT Dept Of Health'"", ""'NT Dept Of Police Fire & Emergency Services'"", ""'NT Dept Of Business'"", ""'NT Dept Of Territory Families, Housing & Communities'"", ""'NT Dept Of Primary Industry & Resources'"", ""'NT Dept Of Environment Parks & Water Security'"", ""'NT Dept Of Corporate & Information Services'""], 'context': 'A long list of specific Advertiser names used as a filter.', 'suggested_governance': ""This list should be managed externally, perhaps in a reference table for 'NT Government Departments' or similar, and joined or filtered dynamically via a dashboard parameter."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'other', 'hardcoded_values': [""'$'"", ""'$\\'000'""], 'context': 'Display format logic embedded in SQL.', 'suggested_governance': 'Display formatting (e.g., currency symbols, thousands separators) should be handled by the visualization tool (Looker Studio) and not by the SQL query.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to ensure data freshness and dynamic reporting periods.', 'Replace hardcoded lookup values (e.g., Media Network names, Advertiser names, time period types) with joins to governed reference tables or dashboard parameters to improve flexibility and maintainability.', 'Use configuration tables for business rules (e.g., quarter definitions, time period logic) instead of hardcoded logic within the query to centralize rule management and reduce redundancy.']",6,601ed0d2-e944-4189-8170-d593c8e72026
"-- This is the main SQL to run for business analysis, providing all key metrics and dimensions at a common grain.
-- It consolidates the transformations and filters observed across the dashboard's queries.
WITH transformed_data AS (
  SELECT
    t0.advertiser,
    t0.buyer,
    t0.revenuenet,
    t0.source,
    UPPER(SAFE_CAST(t0.source_transaction_type AS STRING)) AS source_transaction_type_upper,
    CONCAT('FY', SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2), ' ', SAFE_CAST(t0.financialquarter AS STRING)) AS financial_period_label,
    SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS month_start_date,
    DATE(t0.financialyear, t0.financialmonthnumber, 1) AS original_financial_date_start
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
)
SELECT
  month_start_date,
  advertiser,
  buyer,
  source,
  source_transaction_type_upper,
  financial_period_label,
  SUM(revenuenet) AS total_revenue_net
FROM transformed_data
WHERE
  -- Apply the most common and broad filters observed across all queries
  source_transaction_type_upper IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
  -- Date range based on the union of all hardcoded dates, adjusted for the 6-month offset.
  -- This covers the original financial periods from May 2025 to December 2025.
  AND original_financial_date_start BETWEEN DATE('2025-05-01') AND DATE('2025-12-01')
GROUP BY
  month_start_date,
  advertiser,
  buyer,
  source,
  source_transaction_type_upper,
  financial_period_label
ORDER BY
  month_start_date DESC
LIMIT 10000;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.financialyear) as unique_financial_years,
  COUNT(DISTINCT t0.financialmonthnumber) as unique_financial_months,
  COUNT(DISTINCT t0.advertiser) as unique_advertisers,
  COUNT(DISTINCT t0.buyer) as unique_buyers,
  COUNT(DISTINCT t0.source) as unique_sources,
  COUNT(DISTINCT t0.source_transaction_type) as unique_transaction_types,
  MIN(DATE(t0.financialyear, t0.financialmonthnumber, 1)) as earliest_financial_date,
  MAX(DATE(t0.financialyear, t0.financialmonthnumber, 1)) as latest_financial_date,
  APPROX_COUNT_DISTINCT(CONCAT(t0.advertiser, t0.buyer, t0.source, t0.financialyear, t0.financialmonthnumber)) as approx_unique_combinations
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH);","-- Quick validation that all metric calculations work syntactically and data exists
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(t0.revenuenet) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as revenuenet_exists_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_exists_test,
  CASE WHEN MAX(DATE(t0.financialyear, t0.financialmonthnumber, 1)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
WITH transformed_data AS (
  SELECT
    t0.advertiser,
    t0.buyer,
    t0.revenuenet,
    t0.source,
    UPPER(SAFE_CAST(t0.source_transaction_type AS STRING)) AS source_transaction_type_upper,
    CONCAT('FY', SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2), ' ', SAFE_CAST(t0.financialquarter AS STRING)) AS financial_period_label,
    SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS month_start_date
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
  WHERE DATE(t0.financialyear, t0.financialmonthnumber, 1) BETWEEN DATE('2025-05-01') AND DATE('2025-12-01') -- Focus on relevant date range
)
SELECT
  'Business Rule Validation' as validation_type,
  'Source Transaction Type Filter Coverage' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN source_transaction_type_upper IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN source_transaction_type_upper IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_transaction_type,
  'Advertiser Filter Coverage (Example)' as rule_name_advertiser,
  SUM(CASE WHEN advertiser IN ('The Smith Family *', 'Kmart Corporation *', 'Target Corporation *', 'Myer *') THEN 1 ELSE 0 END) as records_passing_advertiser_filter,
  SAFE_DIVIDE(SUM(CASE WHEN advertiser IN ('The Smith Family *', 'Kmart Corporation *', 'Target Corporation *', 'Myer *') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_advertiser
FROM transformed_data;","-- Query to get representative sample data for further analysis
SELECT
  t0.advertiser,
  t0.buyer,
  t0.revenuenet,
  t0.source,
  t0.source_transaction_type,
  t0.financialmonthnumber,
  t0.financialquarter,
  t0.financialyear
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
  AND t0.revenuenet IS NOT NULL
ORDER BY DATE(t0.financialyear, t0.financialmonthnumber, 1) DESC, t0.revenuenet DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '01/11/2024', 'original_format': ""DATE '2024-11-01'"", 'context': 'used as a specific month_start_date filter in Query 1', 'suggested_fix': 'replace with Looker Studio date parameter (e.g., @start_date) or relative date function (e.g., DATE_TRUNC(CURRENT_DATE(), MONTH))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/12/2024', 'original_format': ""DATE '2024-12-01'"", 'context': 'used as a specific month_start_date filter in Query 1', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/01/2025', 'original_format': ""DATE '2025-01-01'"", 'context': 'used as a specific month_start_date filter in Query 1', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/02/2025', 'original_format': ""DATE '2025-02-01'"", 'context': 'used as a specific month_start_date filter in Query 1', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/03/2025', 'original_format': ""DATE '2025-03-01'"", 'context': 'used as a specific month_start_date filter in Query 1', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/04/2025', 'original_format': ""DATE '2025-04-01'"", 'context': 'used as a specific month_start_date filter in Query 1 (assuming typo for 2025-04-01)', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/05/2025', 'original_format': ""DATE '2025-05-01'"", 'context': 'used as a specific month_start_date filter in Query 1, 2, and 3', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/06/2025', 'original_format': ""DATE '2025-06-01'"", 'context': 'used as a specific month_start_date filter in Query 1', 'suggested_fix': 'replace with Looker Studio date parameter or relative date function', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'AdX'"", ""'AppNexus'"", ""'DFP'"", ""'Index Exchange'"", ""'InSkin'"", ""'Kargo'"", ""'Playground XYZ'"", ""'PubMatic'"", ""'Rubicon'"", ""'Tremor'""], 'context': 'source values filtered in Query 1', 'suggested_governance': 'join to a `dim_source` reference table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'DEAL'"", ""'UFR'"", ""'PG - CPD'"", ""'PG - CPM'"", ""'DIRECT'""], 'context': 'source_transaction_type values filtered across all queries', 'suggested_governance': 'join to a `dim_transaction_type` reference table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Smith Family *'"", ""'Kmart Corporation *'"", ""'Target Corporation *'"", ""'Myer *'""], 'context': 'advertiser names filtered in all queries', 'suggested_governance': 'join to a `dim_advertiser` master table with unique IDs', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'FY25 Q2'"", ""'FY25 Q3'"", ""'FY25 Q4'""], 'context': 'financial period labels filtered in all queries', 'suggested_governance': 'derive dynamically from a `dim_date` table or use a `dim_financial_period` table', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with Looker Studio date parameters or relative date functions (e.g., `_DS_START_DATE`, `_DS_END_DATE`).', 'Replace hardcoded lookup values (Source, Transaction Type, Advertiser) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., valid transaction types) instead of hardcoded logic in queries.']",7,783f341c-8660-4e90-bab8-9bc860119cf5
"-- This query consolidates the core metrics and dimensions from the 'Pacing Dashboard'.
-- It extracts financial month details, source-specific day counts, and calculated display strings.
-- The 'CurrentMonthFlag = 1' filter is applied to focus on current period data, as seen in the original queries.

WITH fin_month_data AS (
  SELECT
    t0.CurrentMonthFlag,
    t0.FinancialMonthNumber,
    t0.FinancialYear,
    t0.Source,
    t0.StaticDays,
    t0.NumDays,
    ((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS Financial_Month_ID
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
)
SELECT
  -- Core Dimensions
  fmd.FinancialYear,
  fmd.FinancialMonthNumber,
  fmd.Source,
  fmd.Financial_Month_ID,
  -- Metrics for Kargo (Current Month)
  CASE
    WHEN fmd.CurrentMonthFlag = 1 AND fmd.Source = 'Kargo' THEN fmd.StaticDays
    ELSE NULL
  END AS Kargo_StaticDays_CurrentMonth,
  -- Display string for Kargo (as seen in original query 1)
  CONCAT(SAFE_CAST(fmd.StaticDays AS STRING), ' (', SAFE_CAST(fmd.Financial_Month_ID AS STRING), ' )') AS Financial_Month_Display_Kargo,
  -- Metrics for Non-AdX (Current Month)
  CASE
    WHEN fmd.CurrentMonthFlag = 1 AND (fmd.Source NOT IN ('AdX') OR fmd.Source IS NULL) THEN fmd.NumDays
    ELSE NULL
  END AS NonAdX_NumDays_CurrentMonth,
  -- Display string for Non-AdX (as seen in original query 2)
  CONCAT(SAFE_CAST(fmd.NumDays AS STRING), ' (', SAFE_CAST(fmd.Financial_Month_ID AS STRING), ' )') AS Financial_Month_Display_NonAdX
FROM fin_month_data AS fmd
WHERE fmd.CurrentMonthFlag = 1 -- Filter for current month data, as per dashboard logic
ORDER BY fmd.FinancialYear DESC, fmd.FinancialMonthNumber DESC, fmd.Source
LIMIT 100;","-- This query provides an overview of the data structure and grain for the primary tables.
-- It helps understand the number of records, unique values for key dimensions, and date ranges.

SELECT
  'programmatic_fin_month' as table_name,
  COUNT(*) as total_records,
  COUNT(DISTINCT CurrentMonthFlag) as unique_current_month_flags,
  COUNT(DISTINCT FinancialMonthNumber) as unique_financial_month_numbers,
  COUNT(DISTINCT FinancialYear) as unique_financial_years,
  COUNT(DISTINCT Source) as unique_sources,
  MIN(FinancialYear * 100 + FinancialMonthNumber) as earliest_financial_month_id,
  MAX(FinancialYear * 100 + FinancialMonthNumber) as latest_financial_month_id,
  SUM(StaticDays) as total_static_days,
  SUM(NumDays) as total_num_days
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
UNION ALL
SELECT
  'programmatic_cal_month' as table_name,
  COUNT(*) as total_records,
  NULL, NULL, NULL, -- Not applicable for this table
  COUNT(DISTINCT ProductType) as unique_product_types,
  NULL, NULL, NULL, NULL
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`;","-- This query performs quick validation checks on the data to ensure basic integrity and freshness.
-- It verifies if key metrics are populated and if the data is up-to-date for the current month.

SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(CASE WHEN CurrentMonthFlag = 1 AND Source = 'Kargo' THEN StaticDays ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as kargo_static_days_check,
  CASE WHEN SUM(CASE WHEN CurrentMonthFlag = 1 AND (Source NOT IN ('AdX') OR Source IS NULL) THEN NumDays ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as non_adx_num_days_check,
  CASE WHEN MAX(FinancialYear * 100 + FinancialMonthNumber) >= ((EXTRACT(YEAR FROM CURRENT_DATE()) * 100) + EXTRACT(MONTH FROM CURRENT_DATE())) THEN 'PASS' ELSE 'FAIL' END as freshness_check
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE CurrentMonthFlag = 1
LIMIT 1;","-- This query validates key business logic and data quality assumptions identified from the dashboard queries.
-- It checks for consistency in CurrentMonthFlag and population of source-specific day metrics.

SELECT
  'Business Rule Validation' as validation_type,
  'CurrentMonthFlag Alignment' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN CurrentMonthFlag = 1 AND (FinancialYear * 100 + FinancialMonthNumber) = ((EXTRACT(YEAR FROM CURRENT_DATE()) * 100) + EXTRACT(MONTH FROM CURRENT_DATE())) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN CurrentMonthFlag = 1 AND (FinancialYear * 100 + FinancialMonthNumber) = ((EXTRACT(YEAR FROM CURRENT_DATE()) * 100) + EXTRACT(MONTH FROM CURRENT_DATE())) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE CurrentMonthFlag = 1
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Kargo StaticDays Populated' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN Source = 'Kargo' AND StaticDays IS NOT NULL THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN Source = 'Kargo' AND StaticDays IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE CurrentMonthFlag = 1 AND Source = 'Kargo'
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Non-AdX NumDays Populated' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (Source NOT IN ('AdX') OR Source IS NULL) AND NumDays IS NOT NULL THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (Source NOT IN ('AdX') OR Source IS NULL) AND NumDays IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE CurrentMonthFlag = 1 AND (Source NOT IN ('AdX') OR Source IS NULL);","-- This query retrieves a representative sample of the raw data for further detailed analysis.
-- It focuses on the 'programmatic_fin_month' table, which is central to the dashboard's metrics.

SELECT
  CurrentMonthFlag,
  FinancialMonthNumber,
  FinancialYear,
  Source,
  StaticDays,
  NumDays
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE CurrentMonthFlag = 1 -- Focus on current month data
ORDER BY FinancialYear DESC, FinancialMonthNumber DESC, Source
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['1'], 'context': 'CurrentMonthFlag is hardcoded to 1 to identify the current month.', 'suggested_governance': ""Replace with a dynamic date comparison (e.g., `FORMAT_DATE('%Y%m', CURRENT_DATE()) = FORMAT_DATE('%Y%m', DATE(FinancialYear, FinancialMonthNumber, 1))`) or a governed date dimension."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Kargo'"", ""'AdX'""], 'context': 'Specific source names are hardcoded in WHERE clauses for filtering.', 'suggested_governance': 'Manage source names in a dedicated lookup table and join to it, or use parameters for filtering.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded 'CurrentMonthFlag = 1' with a dynamic date parameter or relative date function (e.g., `WHERE FinancialYear = EXTRACT(YEAR FROM CURRENT_DATE()) AND FinancialMonthNumber = EXTRACT(MONTH FROM CURRENT_DATE())`)."", ""Replace hardcoded source values ('Kargo', 'AdX') with parameters or by joining to a governed 'Source' lookup table.""]",8,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
"WITH base_data AS (
  SELECT
    t0.classification_level_1_description AS classification_level_1_description,
    t0.classification_level_2_description AS classification_level_2_description,
    t0.delivery_medium_type AS delivery_medium_type,
    t0.gl_publication_code AS gl_publication_code,
    t0.masthead_code AS masthead_code,
    t0.subscriber_has_email_flag AS subscriber_has_email_flag,
    -- Assuming a subscription_id or similar unique identifier exists for counting
    t0.some_subscription_id_column AS subscription_id_placeholder, -- Placeholder for actual subscription ID
    -- Hardcoded date for week/day calculations (replace with dynamic date if needed)
    DATE(TIMESTAMP '2025-03-23 04:54:02.058726+00', 'Australia/Sydney') AS base_calc_date,
    DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-03-23 04:54:02.058726+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS week_diff_from_baseline
  FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  -- Add date filters here if the table has a date column, e.g., WHERE t0.event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  -- For demonstration, we'll assume Looker Studio handles the primary date filtering.
),

calculated_dimensions AS (
  SELECT
    base_data.*,
    -- Derived: email_bundle_flag (clmn85_ / clmn82_ / clmn84_ logic)
    CASE
      WHEN (subscriber_has_email_flag = 'subsnapfact') THEN 'Y'
      WHEN (classification_level_1_description = 'Standard Paid' AND delivery_medium_type = 'Bundle') THEN subscriber_has_email_flag
      ELSE 'Y'
    END AS email_bundle_flag,

    -- Derived: detailed_masthead_group (clmn86_ / clmn83_ / clmn85_ logic)
    CASE
      WHEN (gl_publication_code = '100' OR gl_publication_code = '101' OR masthead_code = 'TA') THEN 'The Australian'
      WHEN (gl_publication_code = '400' OR gl_publication_code = '401' OR gl_publication_code = '402' OR masthead_code = 'CM') THEN 'Courier Mail'
      WHEN (gl_publication_code = '110' OR gl_publication_code = '111' OR gl_publication_code = '116' OR masthead_code = 'DT') THEN 'Daily Telegraph'
      WHEN (gl_publication_code = '301' OR gl_publication_code = '302' OR gl_publication_code = '303' OR gl_publication_code = '304' OR masthead_code = 'HS') THEN 'Herald Sun'
      WHEN (gl_publication_code = '500' OR gl_publication_code = '501' OR gl_publication_code = '560' OR gl_publication_code = '72') THEN 'The Advertiser'
      WHEN (gl_publication_code = '450' OR gl_publication_code = '460' OR gl_publication_code = '76') THEN 'Cairns Post'
      WHEN (gl_publication_code = '350' OR gl_publication_code = '351' OR masthead_code = 'GA') THEN 'Geelong'
      WHEN (gl_publication_code = '670' OR gl_publication_code = '685' OR masthead_code = 'GC') THEN 'Gold Coast'
      WHEN (gl_publication_code = '961' OR gl_publication_code = '962' OR gl_publication_code = '963' OR masthead_code = 'NT') THEN 'NT News'
      WHEN (gl_publication_code = '850' OR gl_publication_code = '851' OR gl_publication_code = '852' OR masthead_code = 'TM') THEN 'The Mercury'
      WHEN (gl_publication_code = '5053' OR gl_publication_code = '5253' OR masthead_code = 'TC') THEN 'Toowoomba'
      WHEN (gl_publication_code = '475' OR gl_publication_code = '490' OR masthead_code = 'TB') THEN 'Townsville'
      WHEN (gl_publication_code = '305' OR gl_publication_code = '307' OR masthead_code = 'WT') THEN 'Weekly Times'
      WHEN (gl_publication_code = '9001' OR gl_publication_code = '78') THEN 'Code'
      WHEN (gl_publication_code = '8821' OR gl_publication_code = '8822' OR masthead_code = 'PU') THEN 'Punters'
      WHEN (gl_publication_code = '8822' OR gl_publication_code = 'Racenet' OR masthead_code = 'RN') THEN 'Racenet'
      WHEN (gl_publication_code = '9653' OR masthead_code = 'SC') THEN 'Supercoach Plus'
      WHEN (gl_publication_code = '9600' OR gl_publication_code = '70') THEN 'Taste Online'
      WHEN (gl_publication_code = '9003' OR masthead_code = 'AP') THEN 'Apple Podcast: Crime X'
      WHEN (gl_publication_code = '103' OR classification_level_2_description = 'The Oz') THEN 'The Oz'
      WHEN (gl_publication_code = '9000' OR masthead_code = 'NW') THEN 'news.com.au'
      WHEN (gl_publication_code = '121') THEN 'Others'
      WHEN (gl_publication_code = '9002' OR masthead_code = 'BG') THEN 'Brain Games'
      WHEN (gl_publication_code = '9504' OR gl_publication_code = '9514' OR gl_publication_code = '9556' OR gl_publication_code = '9558' OR gl_publication_code = '9603' OR gl_publication_code = '9623' OR gl_publication_code = '9560') THEN 'Others'
      WHEN (gl_publication_code = '9644') THEN 'Suddenly'
      WHEN (gl_publication_code = '9903') THEN 'News Corporate'
      WHEN (gl_publication_code = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
      ELSE NULL
    END AS detailed_masthead_group,

    -- Derived: recognition_type (clmn88_ / clmn84_ / clmn86_ logic)
    CASE
      WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition'
      WHEN (CASE WHEN (subscriber_has_email_flag = 'subsnapfact') THEN 'Y' WHEN (classification_level_1_description = 'Standard Paid' AND delivery_medium_type = 'Bundle') THEN subscriber_has_email_flag ELSE 'Y' END = 'N') THEN 'Print Recognition'
      ELSE 'Digital Recognition'
    END AS recognition_type,

    -- Derived: day_of_week (clmn7_ logic)
    (EXTRACT(DAYOFWEEK FROM TIMESTAMP(base_calc_date)) - 1) AS day_of_week,

    -- Derived: week_number_adjusted (clmn87_ / clmn126_ logic)
    CASE WHEN ((EXTRACT(DAYOFWEEK FROM TIMESTAMP(base_calc_date)) - 1) <= 2) THEN (week_diff_from_baseline - 1) ELSE week_diff_from_baseline END AS week_number_adjusted
),

final_dimensions AS (
  SELECT
    calculated_dimensions.*,
    -- Derived: masthead_group_broad (clmn127_ / clmn103_ / clmn105_ logic)
    CASE
      WHEN (detailed_masthead_group = 'The Australian') THEN 'The Australian'
      WHEN (detailed_masthead_group IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
      WHEN (detailed_masthead_group IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville')) THEN 'Regionals'
      WHEN (detailed_masthead_group = 'Weekly Times') THEN 'Others'
      WHEN (detailed_masthead_group IN ('Supercoach Plus', 'Code', 'Apple Podcast: Crime X', 'Taste Online', 'Racenet', 'Punters', 'Brain Games')) THEN 'Deep Niche Publications'
      ELSE 'Discontinued'
    END AS masthead_group_broad,

    -- Derived: masthead_group_broader (clmn128_ logic - using detailed_masthead_group and raw codes)
    CASE
      WHEN (detailed_masthead_group = 'The Australian' OR gl_publication_code = '9556' OR gl_publication_code = '9560') THEN 'The Australian and Prestige'
      WHEN (detailed_masthead_group IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville', 'Weekly Times', 'Supercoach Plus', 'Code', 'Apple Podcast: Crime X') OR gl_publication_code = '121' OR gl_publication_code = '9504') THEN 'States & Community'
      WHEN (detailed_masthead_group IN ('Racenet', 'Punters')) THEN 'Commercial Content'
      WHEN (detailed_masthead_group IN ('Taste Online') OR gl_publication_code = '9514') THEN 'Free & Lifestyle'
      ELSE 'Discontinued'
    END AS masthead_group_broader,

    -- Derived: custom_fiscal_month_number (clmn129_ logic)
    CASE
      WHEN (week_number_adjusted <= 4) THEN 1
      WHEN (week_number_adjusted <= 9) THEN 2
      WHEN (week_number_adjusted <= 13) THEN 3
      WHEN (week_number_adjusted <= 17) THEN 4
      WHEN (week_number_adjusted <= 22) THEN 5
      WHEN (week_number_adjusted <= 26) THEN 6
      WHEN (week_number_adjusted <= 30) THEN 7
      WHEN (week_number_adjusted <= 35) THEN 8
      WHEN (week_number_adjusted <= 39) THEN 9
      WHEN (week_number_adjusted <= 43) THEN 10
      WHEN (week_number_adjusted <= 48) THEN 11
      WHEN (week_number_adjusted <= 53) THEN 12
      ELSE NULL
    END AS custom_fiscal_month_number
)

SELECT
  final_output.fiscal_week_month_string,
  final_output.recognition_type,
  final_output.masthead_group_broad,
  final_output.masthead_group_detailed,
  final_output.masthead_group_broader,
  final_output.email_bundle_flag,
  'FCT' AS report_type_fct, -- Hardcoded from Q2
  'Gross Cancellations' AS cancellation_type, -- Hardcoded from Q3
  'Gross Acquisitions' AS acquisition_type, -- Hardcoded from Q3
  -- Placeholder for actual subscription count metric
  COUNT(DISTINCT final_output.subscription_id_placeholder) AS digital_subscription_count
FROM (
  SELECT
    final_dimensions.*,
    -- Derived: month_name (clmn131_ logic)
    CASE
      WHEN (custom_fiscal_month_number = 1) THEN 'July'
      WHEN (custom_fiscal_month_number = 2) THEN 'August'
      WHEN (custom_fiscal_month_number = 3) THEN 'September'
      WHEN (custom_fiscal_month_number = 4) THEN 'October'
      WHEN (custom_fiscal_month_number = 5) THEN 'November'
      WHEN (custom_fiscal_month_number = 6) THEN 'December'
      WHEN (custom_fiscal_month_number = 7) THEN 'January'
      WHEN (custom_fiscal_month_number = 8) THEN 'February'
      WHEN (custom_fiscal_month_number = 9) THEN 'March'
      WHEN (custom_fiscal_month_number = 10) THEN 'April'
      WHEN (custom_fiscal_month_number = 11) THEN 'May'
      WHEN (custom_fiscal_month_number = 12) THEN 'June'
      ELSE NULL
    END AS month_name,
    -- Derived: fiscal_week_month_string (clmn132_ / clmn133_ logic)
    CONCAT('FY ', '2025', ' Week ', SAFE_CAST(week_number_adjusted AS STRING), ' (', CASE
      WHEN (custom_fiscal_month_number = 1) THEN 'July'
      WHEN (custom_fiscal_month_number = 2) THEN 'August'
      WHEN (custom_fiscal_month_number = 3) THEN 'September'
      WHEN (custom_fiscal_month_number = 4) THEN 'October'
      WHEN (custom_fiscal_month_number = 5) THEN 'November'
      WHEN (custom_fiscal_month_number = 6) THEN 'December'
      WHEN (custom_fiscal_month_number = 7) THEN 'January'
      WHEN (custom_fiscal_month_number = 8) THEN 'February'
      WHEN (custom_fiscal_month_number = 9) THEN 'March'
      WHEN (custom_fiscal_month_number = 10) THEN 'April'
      WHEN (custom_fiscal_month_number = 11) THEN 'May'
      WHEN (custom_fiscal_month_number = 12) THEN 'June'
      ELSE NULL
    END, ')') AS fiscal_week_month_string
  FROM final_dimensions
) AS final_output
WHERE
  final_output.recognition_type = 'Digital Recognition' AND
  final_output.masthead_group_broad != 'Discontinued'
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9
LIMIT 1000","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.classification_level_1_description) AS unique_classification_level_1_descriptions,
  COUNT(DISTINCT t0.classification_level_2_description) AS unique_classification_level_2_descriptions,
  COUNT(DISTINCT t0.delivery_medium_type) AS unique_delivery_medium_types,
  COUNT(DISTINCT t0.gl_publication_code) AS unique_gl_publication_codes,
  COUNT(DISTINCT t0.masthead_code) AS unique_masthead_codes,
  COUNT(DISTINCT t0.subscriber_has_email_flag) AS unique_subscriber_has_email_flags,
  MIN(t0.some_date_column) AS earliest_record_date, -- Placeholder for actual date column
  MAX(t0.some_date_column) AS latest_record_date -- Placeholder for actual date column
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1000","SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_count_test,
  CASE WHEN SUM(CASE WHEN t0.delivery_medium_type = 'Digital' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS digital_records_test,
  CASE WHEN SUM(CASE WHEN t0.gl_publication_code IS NULL THEN 1 ELSE 0 END) = 0 THEN 'PASS' ELSE 'FAIL' END AS gl_publication_code_not_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE 1=1 -- Add date filter if a date column exists, e.g., t0.event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1","SELECT
  'Business Rule Validation' AS validation_type,
  'Digital Recognition Filter' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE
    WHEN (t0.delivery_medium_type != 'Print' AND NOT (t0.subscriber_has_email_flag = 'N')) THEN 1
    ELSE 0
  END) AS records_matching_digital_recognition_logic,
  SAFE_DIVIDE(SUM(CASE
    WHEN (t0.delivery_medium_type != 'Print' AND NOT (t0.subscriber_has_email_flag = 'N')) THEN 1
    ELSE 0
  END), COUNT(*)) * 100 AS digital_recognition_match_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE 1=1 -- Add date filter if a date column exists, e.g., t0.event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1000","SELECT
  t0.classification_level_1_description,
  t0.classification_level_2_description,
  t0.delivery_medium_type,
  t0.gl_publication_code,
  t0.masthead_code,
  t0.subscriber_has_email_flag,
  t0.some_subscription_id_column -- Placeholder for actual subscription ID
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE 1=1 -- Add date filter if a date column exists, e.g., t0.event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
LIMIT 500","{'hardcoded_dates': [{'date_value': '23/03/2025', 'original_format': '2025-03-23 04:54:02.058726+00', 'context': 'Used as the base date for calculating day of week and week difference. This date is in the future relative to current date (assuming current date is before March 2025).', 'suggested_fix': 'Replace with CURRENT_DATE() or a Looker Studio date parameter to make calculations dynamic and relevant to the reporting period.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '03/07/2024', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as the baseline date for calculating week difference (fiscal week start).', 'suggested_fix': 'Replace with a configurable fiscal year start date parameter or a lookup from a fiscal calendar table.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025', 'original_format': '2025', 'context': ""Hardcoded fiscal year in the 'FY' string concatenation."", 'suggested_fix': 'Derive fiscal year dynamically from the reporting date or a fiscal calendar table.', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'100'"", ""'402'"", ""'301'"", ""'AP'"", ""'NT'"", ""'SC'""], 'context': ""Numerous `gl_publication_code` and `masthead_code` values are hardcoded within complex `CASE WHEN` statements to categorize mastheads (e.g., 'Metros', 'Regionals')."", 'suggested_governance': 'Create a `masthead_lookup` table with `gl_publication_code`, `masthead_code`, `detailed_masthead_group`, `masthead_group_broad`, and `masthead_group_broader` columns. Join to this table instead of using `CASE WHEN`.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Print Recognition'"", ""'Digital Recognition'"", ""'Discontinued'""], 'context': ""Categorization logic for 'Recognition Type' and 'Masthead Group Broad' is hardcoded."", 'suggested_governance': 'Define these categorizations in a business rule configuration table or a UDF for consistency and easier updates.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'July'"", ""'August'"", ""'FCT'"", ""'Gross Cancellations'"", ""'Gross Acquisitions'""], 'context': 'Fiscal month names and report/metric type labels are hardcoded strings.', 'suggested_governance': 'Fiscal month names should come from a fiscal calendar table. Report/metric type labels should be managed as parameters or metadata in Looker Studio, or derived from a configuration table if they represent different calculation paths.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'thresholds', 'hardcoded_values': ['4', '9', '13', '17', '22', '26', '30', '35', '39', '43', '48', '53'], 'context': 'Week number thresholds used to map weeks to custom fiscal months.', 'suggested_governance': 'Define fiscal week-to-month mapping in a fiscal calendar table.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates (e.g., '2025-03-23', '2024-07-03') with Looker Studio date parameters or `CURRENT_DATE()`/`DATE_TRUNC()` functions to enable dynamic reporting."", 'Implement a `masthead_dimension` table to centralize `gl_publication_code` and `masthead_code` mappings to `detailed_masthead_group`, `masthead_group_broad`, and `masthead_group_broader`. This will significantly reduce SQL complexity and maintenance.', 'Create a `fiscal_calendar` table to manage fiscal year, week, and month definitions, including the week-to-month mapping and fiscal year start dates.', ""Externalize hardcoded report/metric type labels (e.g., 'FCT', 'Gross Cancellations') into Looker Studio parameters or a small configuration table if they drive different data views or calculations.""]",9,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
"-- This is the main SQL to run, calculating all key metrics together.
-- Replaces hardcoded date with CURRENT_DATETIME for dynamic analysis.

WITH base_data AS (
  SELECT
    t0.DOW_Today,
    t0.advertiser_parent,
    t0.booking_line_created_date,
    t0.financial_quarter,
    t0.financial_short_month,
    t0.financial_year,
    t0.fix_date_lod,
    t0.gross_revenue_amount,
    t0.is_future_period_flag,
    t0.pipeline,
    t0.relative_fy_month_offset,
    t0.relative_fy_week_offset,
    t0.relative_fy_year_offset,
    t0.revenue_group_subtype,
    t0.revenue_type,
    t0.sales_segment_l_2_name_sync,
    t0.ss_lgb,
    t0.xtend_flag,
    DATE(CURRENT_DATETIME('Australia/Sydney')) AS current_ref_date -- Replaced hardcoded '2025-01-06' with current date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Add a relevant date filter for performance, e.g., last 2 financial years
  WHERE t0.financial_year IN (EXTRACT(YEAR FROM CURRENT_DATE()), EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)), EXTRACT(YEAR FROM DATE_ADD(CURRENT_DATE(), INTERVAL 1 YEAR)))
),
layer1_calcs AS (
  SELECT
    DOW_Today,
    advertiser_parent,
    booking_line_created_date,
    financial_quarter,
    financial_short_month,
    financial_year,
    fix_date_lod,
    gross_revenue_amount,
    is_future_period_flag,
    pipeline,
    relative_fy_month_offset,
    relative_fy_week_offset,
    relative_fy_year_offset,
    revenue_group_subtype,
    revenue_type,
    sales_segment_l_2_name_sync,
    ss_lgb,
    xtend_flag,
    current_ref_date,
    DATETIME_ADD(SAFE_CAST(current_ref_date AS DATETIME), INTERVAL -365 DAY) AS date_one_year_ago, -- clmn19_
    (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser, -- clmn20_
    PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS parsed_booking_date, -- clmn21_
    SAFE_CAST(financial_quarter AS INT64) AS financial_quarter_int, -- clmn22_
    CASE
      WHEN (financial_short_month = 'Jul') THEN '01.Jul'
      WHEN (financial_short_month = 'Aug') THEN '02.Aug'
      WHEN (financial_short_month = 'Sep') THEN '03.Sep'
      WHEN (financial_short_month = 'Oct') THEN '04.Oct'
      WHEN (financial_short_month = 'Nov') THEN '05.Nov'
      WHEN (financial_short_month = 'Dec') THEN '06.Dec'
      WHEN (financial_short_month = 'Jan') THEN '07.Jan'
      WHEN (financial_short_month = 'Feb') THEN '08.Feb'
      WHEN (financial_short_month = 'Mar') THEN '09.Mar'
      WHEN (financial_short_month = 'Apr') THEN '10.Apr'
      WHEN (financial_short_month = 'May') THEN '11.May'
      WHEN (financial_short_month = 'Jun') THEN '12.Jun'
      ELSE NULL
    END AS financial_short_month_sorted, -- clmn23_
    SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_k, -- clmn24_
    (is_future_period_flag = 'N') AS is_not_future_period, -- clmn25_
    (relative_fy_week_offset = 0) AS is_current_fy_week, -- clmn26_
    (relative_fy_week_offset < 0) AS is_past_fy_week, -- clmn27_
    CASE WHEN (relative_fy_year_offset = -1) THEN gross_revenue_amount ELSE 0 END AS prev_fy_gross_revenue_raw, -- clmn28_, clmn32_
    (relative_fy_year_offset = 0) AS is_current_fy, -- clmn29_
    (relative_fy_year_offset = -1) AS is_prev_fy, -- clmn30_
    CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue_raw, -- clmn31_, clmn33_
    (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_group_subtype, -- clmn34_
    (revenue_type = 'DIGITAL') AS is_digital_revenue_type, -- clmn35_
    (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment_flag, -- clmn36_
    SAFE_DIVIDE((ss_lgb * DOW_Today), 7) AS ss_lgb_adjusted, -- clmn37_
    SAFE_DIVIDE(ss_lgb, 1000) AS ss_lgb_k, -- clmn38_
    CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_xtend_adjusted -- clmn39_
  FROM base_data
),
layer2_calcs AS (
  SELECT
    * EXCEPT(prev_fy_gross_revenue_raw, current_fy_gross_revenue_raw, ss_lgb_adjusted, ss_lgb_k),
    prev_fy_gross_revenue_raw,
    current_fy_gross_revenue_raw,
    ss_lgb_adjusted,
    ss_lgb_k,
    CASE WHEN (is_current_fy) THEN gross_revenue_k ELSE 0 END AS current_fy_gross_revenue_k_calc, -- clmn40_, clmn42_
    CASE WHEN (relative_fy_year_offset = 1) THEN gross_revenue_k ELSE 0 END AS next_fy_gross_revenue_k_calc, -- clmn41_
    CASE WHEN (is_current_fy AND is_past_fy_week) THEN ss_lgb ELSE 0 END AS current_fy_past_week_lgb_calc, -- clmn43_
    CASE WHEN (is_current_fy AND is_not_future_period) THEN gross_revenue_amount ELSE 0 END AS current_fy_non_future_gross_revenue_raw, -- clmn44_
    CASE WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_sales_segment_flag AND is_not_doubleclick_advertiser) THEN fix_date_lod ELSE parsed_booking_date END AS effective_lod_date, -- clmn45_
    CASE WHEN (is_current_fy AND is_current_fy_week) THEN ss_lgb_adjusted ELSE 0 END AS current_fy_week_lgb_adjusted_calc, -- clmn46_
    CASE WHEN (is_current_fy) THEN ss_lgb_k ELSE 0 END AS current_fy_lgb_k_calc -- clmn47_, clmn48_
  FROM layer1_calcs
),
layer3_calcs AS (
  SELECT
    * EXCEPT(current_fy_non_future_gross_revenue_raw, effective_lod_date),
    current_fy_non_future_gross_revenue_raw,
    effective_lod_date,
    SAFE_DIVIDE(current_fy_non_future_gross_revenue_raw, 1000) AS current_fy_non_future_gross_revenue_k_calc, -- clmn49_
    (SAFE_CAST(effective_lod_date AS DATETIME) <= date_one_year_ago) AS is_lod_date_le_one_year_ago_flag -- clmn50_
  FROM layer2_calcs
),
layer4_calcs AS (
  SELECT
    * EXCEPT(gross_revenue_amount),
    gross_revenue_amount,
    CASE WHEN (is_prev_fy AND is_lod_date_le_one_year_ago_flag) THEN gross_revenue_amount ELSE 0 END AS prev_fy_gross_revenue_lod_date_le_1_year_ago_raw -- clmn51_, clmn52_
  FROM layer3_calcs
)
SELECT
  financial_short_month AS financial_short_month_dim,
  financial_year AS financial_year_dim,
  financial_short_month_sorted AS financial_short_month_sorted_dim,
  revenue_type_xtend_adjusted AS revenue_type_xtend_adjusted_dim,
  financial_quarter_int AS financial_quarter_dim,
  relative_fy_month_offset AS relative_fy_month_offset_dim,
  relative_fy_year_offset AS relative_fy_year_offset_dim,
  sales_segment_l_2_name_sync AS sales_segment_l_2_name_sync_dim,
  SUM(current_fy_week_lgb_adjusted_calc) AS current_fy_week_lgb_adjusted,
  MAX(is_digital_other_sales_segment_flag) AS is_digital_other_sales_segment,
  SUM(current_fy_gross_revenue_k_calc) AS current_fy_gross_revenue_k,
  SUM(current_fy_gross_revenue_raw) AS current_fy_gross_revenue,
  SUM(current_fy_non_future_gross_revenue_k_calc) AS current_fy_non_future_gross_revenue_k,
  SUM(pipeline) AS total_pipeline,
  SUM(current_fy_lgb_k_calc) AS current_fy_lgb_k,
  SUM(current_fy_past_week_lgb_calc) AS current_fy_past_week_lgb,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(prev_fy_gross_revenue_raw) AS previous_fy_gross_revenue,
  SUM(current_fy_gross_revenue_k_calc - current_fy_lgb_k_calc) AS current_fy_gross_revenue_k_minus_current_fy_lgb_k,
  SUM(prev_fy_gross_revenue_lod_date_le_1_year_ago_raw) AS previous_fy_gross_revenue_lod_date_le_1_year_ago,
  SUM(ss_lgb) AS total_lgb,
  SUM(SAFE_DIVIDE(prev_fy_gross_revenue_raw, 1000)) AS previous_fy_gross_revenue_k,
  SUM(next_fy_gross_revenue_k_calc) AS next_fy_gross_revenue_k
FROM layer4_calcs
GROUP BY
  financial_short_month,
  financial_year,
  financial_short_month_sorted,
  revenue_type_xtend_adjusted,
  financial_quarter_int,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync
ORDER BY financial_year DESC, financial_short_month_sorted ASC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT financial_quarter) as unique_financial_quarters,
  COUNT(DISTINCT financial_short_month) as unique_financial_months,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  COUNT(DISTINCT sales_segment_l_2_name_sync) as unique_sales_segments,
  MIN(booking_line_created_date) as earliest_booking_date,
  MAX(booking_line_created_date) as latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(financial_year, financial_quarter, financial_short_month, revenue_type, sales_segment_l_2_name_sync)) as approx_unique_combinations
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE PARSE_DATE('%Y-%m-%d', booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT financial_year) > 1 THEN 'PASS' ELSE 'FAIL' END as multi_year_data_test,
  CASE WHEN MAX(PARSE_DATE('%Y-%m-%d', booking_line_created_date)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE PARSE_DATE('%Y-%m-%d', booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Digital Revenue Type Consistency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' THEN 1 ELSE 0 END) as digital_revenue_match_count,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' THEN 1 ELSE 0 END), COUNT(*)) * 100 as digital_revenue_match_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE PARSE_DATE('%Y-%m-%d', booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Current FY Gross Revenue Logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN relative_fy_year_offset = 0 AND gross_revenue_amount > 0 THEN 1 ELSE 0 END) as current_fy_revenue_records,
  SAFE_DIVIDE(SUM(CASE WHEN relative_fy_year_offset = 0 AND gross_revenue_amount > 0 THEN 1 ELSE 0 END), COUNT(*)) * 100 as current_fy_revenue_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE PARSE_DATE('%Y-%m-%d', booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR);","SELECT
  financial_year,
  financial_quarter,
  financial_short_month,
  revenue_type,
  sales_segment_l_2_name_sync,
  gross_revenue_amount,
  pipeline,
  ss_lgb,
  relative_fy_year_offset,
  relative_fy_month_offset,
  relative_fy_week_offset,
  booking_line_created_date,
  is_future_period_flag,
  xtend_flag
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE PARSE_DATE('%Y-%m-%d', booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
ORDER BY booking_line_created_date DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '06/01/2025', 'original_format': ""DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney')"", 'context': ""Used as the base date (clmn0_) from which 'date_one_year_ago' (clmn19_) is derived. This anchors FY calculations to a specific future date."", 'suggested_fix': ""Replace with `CURRENT_DATETIME('Australia/Sydney')` or a dashboard parameter for the 'as-of' date."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'"", ""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'""], 'context': 'Month names hardcoded in a CASE statement to create a sorted financial month dimension.', 'suggested_governance': 'Create a `dim_financial_month` lookup table with month name and sort order.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'"", ""'DIGITAL'"", ""'Digital Other'"", ""'N'"", ""'Y'"", ""'XTEND'""], 'context': 'Specific string values used for filtering and transforming `advertiser_parent`, `is_future_period_flag`, `revenue_group_subtype`, `revenue_type`, `sales_segment_l_2_name_sync`, `xtend_flag`.', 'suggested_governance': 'Implement reference tables for these categorical dimensions to ensure consistency and allow for easier updates.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['-1', '0', '1'], 'context': ""Integer offsets for `relative_fy_year_offset` and `relative_fy_week_offset` used to define 'previous FY', 'current FY', 'next FY', 'current week', 'past week'."", 'suggested_governance': 'Define these offsets and their meanings in a configuration table or as named constants in a view layer.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['1000', '7'], 'context': ""Divisors for converting amounts to 'K' (thousands) and for adjusting LGB by DOW_Today."", 'suggested_governance': 'Standardize these constants (e.g., `K_FACTOR = 1000`, `DAYS_IN_WEEK = 7`) in a central place or as UDFs.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`).', 'Replace hardcoded lookup values (e.g., month names, revenue types) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., financial year/week offsets, digital definitions) instead of hardcoded logic within SQL queries.']",10,4d8074b2-17a8-48ba-babe-c536359b1f64
"WITH SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  CTE2 AS (
    SELECT
      unified_publication_name,
      unified_publication_gl_code,
      fy_year_month_number,
      financial_year,
      financial_quarter,
      financial_month,
      financial_short_month,
      financial_week,
      revenue_transaction_status,
      is_print_digital_flag,
      current_financial_month,
      current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE()) AS DOW_Today,
      sales_segment_l_1_name,
      sales_segment_l_2_name,
      sales_segment_l_1_name_sync,
      sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      advertiser_group,
      advertiser_parent,
      SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
      sales_segment_gm_name,
      CASE
        WHEN upper(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW', 'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
        ELSE sales_segment_gm_name_sync
      END AS sales_segment_gm_name_sync,
      revenue_group_level_1_name,
      revenue_group_level_2_name,
      SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
      SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
      SUM(IFNULL(pipeline, 0)) AS pipeline,
      SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
      UPPER(revenue_type) AS revenue_type,
      UPPER(revenue_group_subtype) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      portfolio_group_name_sync,
      portfolio_group_name_current,
      portfolio_parent_group_name_sync,
      nca_industry_pillar,
      publishing_division_group,
      publishing_division_parent,
      is_future_period_flag,
      ly_is_future_period_flag,
      ny_is_future_period_flag,
      cost_model_type,
      CASE
        WHEN source_system_code = 'PLUTO' THEN NULL
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      portfolio_conformed_name_sync,
      publishing_division,
      booking_line_created_week,
      booking_line_created_month,
      booking_line_created_short_month,
      booking_line_created_quarter,
      booking_line_created_year,
      agency_parent,
      agency_group,
      agency_name,
      agency_number,
      calendar_month_name,
      calendar_year,
      classification_name,
      SUM(IFNULL(target, 0)) AS target,
      IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD
    FROM
      `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
    GROUP BY ALL
  ),
  base_data AS (
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  )
SELECT
  -- Dimensions
  base_data.Sales_Group AS sales_group_dimension,
  CASE WHEN UPPER(base_data.fin_adtype_name) = 'XTEND' THEN 'XTEND' ELSE UPPER(base_data.revenue_type) END AS fin_adtype_revenue_type_group_dimension,
  base_data.advertiser_parent AS advertiser_parent_dimension,
  base_data.financial_year AS financial_year_dim,
  base_data.revenue_type AS revenue_type_dim,
  base_data.revenue_group_subtype AS revenue_group_subtype_dim,
  base_data.sales_segment_l_2_name_sync AS sales_segment_l_2_name_sync_dim,
  base_data.advertiser_group AS advertiser_group_dim,
  base_data.advertiser_name AS advertiser_name_dim,
  base_data.GSD AS gsd_dim,
  base_data.relative_fy_year_offset AS relative_fy_year_offset_dim,
  base_data.revenue_transaction_status AS revenue_transaction_status_dim,
  base_data.style_name AS style_name_dim,
  base_data.source_publishing_division AS source_publishing_division_dim,
  base_data.unified_publication_name AS publication_name_dim,
  base_data.fix_date_lod AS fix_date_lod_dim,
  base_data.booking_line_created_date AS booking_line_created_date_dim,

  -- Measures
  SUM(base_data.gross_revenue_amount) AS gross_revenue_amount_base,
  SUM(base_data.adjustment_amount) AS adjustment_amount_base,
  SUM(base_data.pub_lgb) AS pub_lgb_base,
  SUM(base_data.ss_lgb) AS ss_lgb_base,
  SUM(base_data.pipeline) AS pipeline_base,
  SUM(base_data.target) AS target_base,
  SUM(CASE WHEN base_data.relative_fy_year_offset = -1 THEN base_data.gross_revenue_amount ELSE 0 END) AS last_fy_gross_revenue,
  SUM(CASE WHEN base_data.relative_fy_year_offset = 0 THEN base_data.gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue,
  SUM(
    CASE
      WHEN base_data.relative_fy_year_offset = -1
      AND (
        CASE
          WHEN (
            UPPER(base_data.revenue_type) = 'DIGITAL'
            AND UPPER(base_data.revenue_group_subtype) = 'DIGITAL'
            AND base_data.sales_segment_l_2_name_sync = 'Digital Other'
            AND base_data.advertiser_parent != 'DOUBLECLICK'
          ) THEN base_data.fix_date_lod
          ELSE PARSE_DATE('%Y-%m-%d', base_data.booking_line_created_date)
        END <= DATE_ADD(CURRENT_DATE(), INTERVAL -365 DAY)
      ) THEN base_data.gross_revenue_amount
      ELSE 0
    END
  ) AS last_fy_digital_revenue_conditional,
  MAX(CASE WHEN base_data.relative_fy_year_offset = -1 THEN base_data.gross_revenue_amount ELSE 0 END) AS max_last_fy_gross_revenue
FROM
  base_data
WHERE
  base_data.Sales_Group = 'Client'
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17
ORDER BY
  financial_year_dim DESC, sales_group_dimension, advertiser_parent_dimension
LIMIT 10000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT unified_publication_name) as unique_publications,
  COUNT(DISTINCT advertiser_parent) as unique_advertiser_parents,
  COUNT(DISTINCT sales_segment_l_2_name_sync) as unique_sales_segments,
  MIN(financial_year) as earliest_financial_year,
  MAX(financial_year) as latest_financial_year,
  MIN(booking_line_created_date) as earliest_booking_date,
  MAX(booking_line_created_date) as latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(financial_year, unified_publication_name, advertiser_parent, sales_segment_l_2_name_sync, revenue_type)) as approx_unique_grain_combinations
FROM
  `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_parent) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_parent_test,
  CASE WHEN MAX(financial_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) - CASE WHEN EXTRACT(MONTH FROM CURRENT_DATE()) >= 7 THEN 0 ELSE 1 END THEN 'PASS' ELSE 'FAIL' END as financial_year_freshness_test,
  CASE WHEN MAX(booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as booking_date_freshness_test
FROM
  `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Sales Group Derivation Accuracy' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (sales_segment_l_2_name_sync = 'MRCA' AND (CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END) = 'MRCA') OR (sales_segment_l_2_name_sync <> 'MRCA' AND (CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END) = 'Client') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (sales_segment_l_2_name_sync = 'MRCA' AND (CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END) = 'MRCA') OR (sales_segment_l_2_name_sync <> 'MRCA' AND (CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END) = 'Client') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
LIMIT 10000;","SELECT
  financial_year,
  financial_quarter,
  financial_month,
  financial_week,
  booking_line_created_date,
  advertiser_parent,
  advertiser_group,
  advertiser_name,
  sales_segment_l_2_name_sync,
  revenue_type,
  revenue_group_subtype,
  gross_revenue_amount,
  adjustment_amount,
  pub_lgb,
  ss_lgb,
  pipeline,
  target,
  relative_fy_year_offset,
  revenue_transaction_status,
  style_name,
  source_system_code,
  current_portfolio_group_owner_sync,
  unified_publication_name,
  account_number,
  fin_adtype_name
FROM
  `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
ORDER BY
  financial_year DESC, booking_line_created_date DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '02/01/2025', 'original_format': '2025-01-02 01:26:03.721975+00', 'context': 'Used as a fixed reference date for calculating a conditional revenue metric (last_fy_digital_revenue_conditional). A date 365 days prior (2024-01-02) is used as a cutoff.', 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter to ensure dynamic and relevant date filtering.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'$'"", ""'$\\'000'""], 'context': ""These string comparisons are used in CASE statements to conditionally apply a division by 1000. The condition `'$' = '$'` (always true) prevents division by 1000 in Query 1's final metrics. The condition `'$\\'000' = '$'` (always false) *enables* division by 1000 in Query 3's final metrics. This leads to inconsistent scaling (some metrics are raw, some are /1000) within the same dashboard, which is a significant data accuracy and user experience issue."", 'suggested_governance': 'Standardize the display of monetary values across the dashboard (either always raw or always in thousands). Remove the misleading conditional logic and apply the scaling consistently, or remove the scaling logic if raw values are intended. This should be driven by business requirements and user expectations.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'"", ""'XTEND'"", ""'BILLED'"", ""'BOOKED'"", ""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'"", ""'SUDDENLY%'"", ""'DIGITAL'"", ""'Digital Other'"", ""'MRCA'"", ""'PLUTO'""], 'context': 'Various categorical values used for filtering or deriving new dimensions (e.g., advertiser_parent, fin_adtype_name, revenue_transaction_status, style_name, source_publishing_division, revenue_type, sales_segment_l_2_name_sync, source_system_code).', 'suggested_governance': 'These values should ideally be managed in a central reference or dimension table (e.g., `dim_advertiser_type`, `dim_revenue_status`, `dim_product_style`). This allows for easier updates, consistency across dashboards, and better data governance.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Client'"", ""account_number IN ('17114', '29172', '52809')"", ""sales_segment_l_2_name_sync IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW', 'INDEPENDENT AGENCIES NSW', 'PRESTIGE')"", ""'Ian Paterson'""], 'context': ""Specific business rules for categorizing sales groups, handling publication names, and assigning sales GMs. For example, 'Client' is derived from 'MRCA', and 'Ian Paterson' is hardcoded for specific sales segments."", 'suggested_governance': 'These business rules should be externalized. For sales groups and GM assignments, consider a `dim_sales_segment` table with `sales_segment_l_2_name_sync`, `sales_group_derived`, and `sales_gm_derived` columns. For publication name exceptions, a `dim_publication_exceptions` table could be used.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['-1', '0', '1'], 'context': 'Used for filtering `relative_fy_year_offset` to include last, current, and next financial years.', 'suggested_governance': ""While these are common relative offsets, consider if they should be dynamic based on user selection (e.g., a parameter for 'number of past years to include')."", 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded date '2025-01-02' with a dashboard date parameter or `CURRENT_DATE()` for dynamic date calculations."", 'Implement a parameter for the financial year offset range (e.g., `fy_offset_start`, `fy_offset_end`) instead of hardcoding `(-1, 0, 1)`.', 'Externalize lookup values (e.g., revenue transaction statuses, style names, advertiser types) into dedicated reference tables and join to them instead of using hardcoded string comparisons.', 'Externalize complex business rules (e.g., sales group derivation, GM assignment, publication exceptions) into configuration tables or views to improve maintainability and transparency.']",11,1a5f7b4e-ea3a-46e4-8b77-b428f4178510
"WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.publication_name,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.advertiser_name,
    t0.calendar_month,
    t0.calendar_year,
    t0.revenue_group_subtype,
    t0.advertiser_group,
    t0.booking_number,
    t0.gross_revenue_amount,
    t0.revenue_type,
    t0.source_unified_publication_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    AND t0.financial_year IS NOT NULL
    -- Broad date range for analysis, replace hardcoded years with dynamic ones
    AND t0.calendar_year >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 3 AS STRING)
    AND t0.calendar_year <= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) + 1 AS STRING)
)
SELECT
  financial_year,
  calendar_year,
  calendar_month,
  publication_name,
  advertiser_name,
  advertiser_group,
  booking_number,
  revenue_type,
  source_unified_publication_name,
  revenue_transaction_status,
  source_publishing_division,
  revenue_group_subtype,
  SAFE_CAST(calendar_month AS FLOAT64) AS calendar_month_float, -- From Q2
  SUM(gross_revenue_amount) AS total_gross_revenue_amount -- From Q3
FROM base_data
GROUP BY
  financial_year,
  calendar_year,
  calendar_month,
  publication_name,
  advertiser_name,
  advertiser_group,
  booking_number,
  revenue_type,
  source_unified_publication_name,
  revenue_transaction_status,
  source_publishing_division,
  revenue_group_subtype
ORDER BY
  calendar_year DESC, calendar_month DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.financial_year) as unique_financial_years,
  COUNT(DISTINCT t0.calendar_year) as unique_calendar_years,
  COUNT(DISTINCT t0.calendar_month) as unique_calendar_months,
  COUNT(DISTINCT t0.publication_name) as unique_publications,
  COUNT(DISTINCT t0.advertiser_name) as unique_advertisers,
  COUNT(DISTINCT t0.booking_number) as unique_bookings,
  MIN(t0.calendar_year) as earliest_calendar_year,
  MAX(t0.calendar_year) as latest_calendar_year,
  MIN(t0.financial_year) as earliest_financial_year,
  MAX(t0.financial_year) as latest_financial_year,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_amount_count
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.calendar_year >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 5 AS STRING)
  AND t0.calendar_year <= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) + 1 AS STRING)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(t0.gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_advertiser_test,
  CASE WHEN MAX(t0.calendar_year) >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS STRING) THEN 'PASS' ELSE 'FAIL' END as freshness_test_calendar_year,
  CASE WHEN MAX(t0.financial_year) >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS STRING) THEN 'PASS' ELSE 'FAIL' END as freshness_test_financial_year
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.calendar_year >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 1 AS STRING)
  AND t0.revenue_transaction_status IN ('Billed', 'Booked')
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Exclude Medium Rare Content Agency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.calendar_year >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 1 AS STRING)
  AND t0.revenue_transaction_status IN ('Billed', 'Booked')
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Include Billed/Booked Status' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.calendar_year >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 1 AS STRING)
LIMIT 1;","SELECT
  t0.financial_year,
  t0.publication_name,
  t0.revenue_transaction_status,
  t0.source_publishing_division,
  t0.advertiser_name,
  t0.calendar_month,
  t0.calendar_year,
  t0.revenue_group_subtype,
  t0.advertiser_group,
  t0.booking_number,
  t0.gross_revenue_amount,
  t0.revenue_type,
  t0.source_unified_publication_name
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.calendar_year >= CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 1 AS STRING)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY t0.calendar_year DESC, t0.calendar_month DESC, t0.gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '202', 'original_format': '202', 'context': 'financial_year filter in Query 1', 'suggested_fix': 'replace with parameter or relative financial year calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or a financial year lookup)', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2022', 'original_format': '2022', 'context': 'calendar_year exclusion filter in Query 2', 'suggested_fix': 'replace with parameter or relative calendar year calculation', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '2024', 'original_format': '2024', 'context': 'calendar_year inclusion filter in Query 3', 'suggested_fix': 'replace with parameter or relative calendar year calculation', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025', 'original_format': '2025', 'context': 'calendar_year inclusion filter in Query 3', 'suggested_fix': 'replace with parameter or relative calendar year calculation', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'source_publishing_division exclusion filter (all queries)', 'suggested_governance': 'use a configuration table for excluded divisions or a parameter', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Billed'"", ""'Booked'""], 'context': 'revenue_transaction_status inclusion filter (all queries)', 'suggested_governance': 'use a reference table for transaction statuses or a parameter', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Digital'"", ""'Print'""], 'context': 'revenue_group_subtype inclusion filter (Query 2, Query 3)', 'suggested_governance': 'use a reference table for revenue subtypes or a parameter', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'INTERNAL PUIG Oceania'"", ""'PUIG Oceania'""], 'context': 'advertiser_name inclusion filter (Query 2)', 'suggested_governance': 'use an advertiser master table or a parameter', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Greyhound Racing Victoria'""], 'context': 'advertiser_name inclusion filter (Query 3)', 'suggested_governance': 'use an advertiser master table or a parameter', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates (financial_year, calendar_year) with date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`)', ""Replace hardcoded lookup values (e.g., 'Medium Rare Content Agency', 'Billed', 'Booked', 'Digital', 'Print', specific advertiser names) with joins to governed reference tables or user-selectable parameters"", 'Use configuration tables for business rules instead of hardcoded logic for exclusions/inclusions']",12,c560ed20-040d-4c6a-9c3f-ec8bce27d132
"DECLARE current_report_date DATE DEFAULT DATE(TIMESTAMP '2025-03-26 03:31:44.896010+00', 'Australia/Sydney');
DECLARE baseline_date DATETIME DEFAULT DATETIME '2024-07-03T00:00:00';

WITH
  date_calculations AS (
    SELECT
      EXTRACT(DAYOFWEEK FROM TIMESTAMP(current_report_date)) - 1 AS day_of_week_num,
      DATETIME_DIFF(SAFE_CAST(current_report_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) AS weeks_diff_from_baseline,
      EXTRACT(YEAR FROM current_report_date) AS current_fy_year_dynamic
  ),
  calculated_week_num AS (
    SELECT
      dc.current_fy_year_dynamic,
      CASE
        WHEN dc.day_of_week_num <= 2 THEN dc.weeks_diff_from_baseline - 1
        ELSE dc.weeks_diff_from_baseline
      END AS current_fy_week_calculated
    FROM date_calculations dc
  ),
  base_data AS (
    SELECT
      t0.BudgetEarnedAmount,
      t0.ClosingBase,
      t0.EarnedAmount,
      t0.ForecastBudgetEarnedAmount,
      t0.NFEarnedAmount,
      t0.NYBudgetEarnedAmount,
      t0.OpeningBase,
      t0.finance_recognition,
      t0.fy_month_of_year,
      t0.fy_quarter_of_year,
      t0.fy_week_of_year,
      t0.fy_year,
      t0.masthead_group
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
    WHERE
      t0.masthead_group != 'Discontinued'
      AND t0.finance_recognition = 'Digital Recognition'
  )
SELECT
  bd.masthead_group,
  SUM(
    CASE
      WHEN bd.fy_year = (SELECT current_fy_year_dynamic FROM calculated_week_num) AND bd.fy_week_of_year = (SELECT current_fy_week_calculated FROM calculated_week_num) THEN bd.BudgetEarnedAmount
      ELSE 0
    END
  ) AS budget_earned_amount_current_fy_week,
  SUM(
    CASE
      WHEN bd.fy_year = (SELECT current_fy_year_dynamic FROM calculated_week_num) AND bd.fy_week_of_year = (SELECT current_fy_week_calculated FROM calculated_week_num) THEN bd.EarnedAmount
      ELSE 0
    END
  ) AS earned_amount_current_fy_week,
  SUM(
    CASE
      WHEN bd.fy_year = (SELECT current_fy_year_dynamic FROM calculated_week_num) AND bd.fy_week_of_year = (SELECT current_fy_week_calculated FROM calculated_week_num) THEN bd.ClosingBase
      ELSE 0
    END
  ) AS closing_base_current_fy_week,
  SUM(
    CASE
      WHEN bd.fy_year = (SELECT current_fy_year_dynamic FROM calculated_week_num) AND bd.fy_week_of_year = (SELECT current_fy_week_calculated FROM calculated_week_num) THEN bd.OpeningBase
      ELSE 0
    END
  ) AS opening_base_current_fy_week,
  MAX(1) AS record_presence_flag,
  'Week to Date & Budget View' AS view_type_dimension,
  COUNT(DISTINCT 'Week to Date & Budget View') AS distinct_view_type_count
FROM
  base_data bd
GROUP BY
  bd.masthead_group
ORDER BY
  bd.masthead_group
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT fy_year) as unique_fiscal_years,
  COUNT(DISTINCT fy_week_of_year) as unique_fiscal_weeks,
  COUNT(DISTINCT masthead_group) as unique_masthead_groups,
  MIN(fy_year) as earliest_fiscal_year,
  MAX(fy_year) as latest_fiscal_year,
  APPROX_COUNT_DISTINCT(CONCAT(CAST(fy_year AS STRING), '-', CAST(fy_week_of_year AS STRING), '-', masthead_group)) as approx_unique_records_at_week_masthead_grain
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(BudgetEarnedAmount) > 0 THEN 'PASS' ELSE 'FAIL' END as budget_earned_amount_test,
  CASE WHEN SUM(EarnedAmount) > 0 THEN 'PASS' ELSE 'FAIL' END as earned_amount_test,
  CASE WHEN COUNT(DISTINCT masthead_group) > 0 THEN 'PASS' ELSE 'FAIL' END as masthead_group_test,
  CASE WHEN MAX(fy_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE finance_recognition = 'Digital Recognition'
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Digital Recognition Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN finance_recognition = 'Digital Recognition' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN finance_recognition = 'Digital Recognition' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year = EXTRACT(YEAR FROM CURRENT_DATE()) 
  AND masthead_group != 'Discontinued'
LIMIT 1;","SELECT 
  BudgetEarnedAmount,
  ClosingBase,
  EarnedAmount,
  ForecastBudgetEarnedAmount,
  NFEarnedAmount,
  NYBudgetEarnedAmount,
  OpeningBase,
  finance_recognition,
  fy_month_of_year,
  fy_quarter_of_year,
  fy_week_of_year,
  fy_year,
  masthead_group
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
  AND finance_recognition = 'Digital Recognition'
ORDER BY fy_year DESC, fy_week_of_year DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '26/03/2025', 'original_format': '2025-03-26 03:31:44.896010+00', 'context': ""Used as the primary 'current' date for calculating the fiscal week in Query 1."", 'suggested_fix': 'Replace with CURRENT_DATE() or a Looker Studio date parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '25/03/2025', 'original_format': '2025-03-25 23:59:29.736172+00', 'context': ""Used as the primary 'current' date for calculating the fiscal week in Query 2."", 'suggested_fix': ""Replace with CURRENT_DATE() or a Looker Studio date parameter, and ensure consistency with other 'current' date definitions."", 'impact': 'high', 'urgency': 'high'}, {'date_value': '03/07/2024', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a fixed baseline date for DATETIME_DIFF to calculate week numbers.', 'suggested_fix': 'If this is a fixed fiscal year start, it should be documented and potentially stored in a configuration table. Otherwise, consider a dynamic baseline (e.g., start of current fiscal year).', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Discontinued'"", ""'Digital Recognition'""], 'context': 'Filters applied to `masthead_group` and `finance_recognition` columns.', 'suggested_governance': 'These values should be managed in a reference table (e.g., `dim_masthead_status`, `dim_finance_recognition_type`) and joined to the main table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['2025'], 'context': 'Fiscal year `2025` is hardcoded for filtering current year data.', 'suggested_governance': 'Replace with `EXTRACT(YEAR FROM CURRENT_DATE())` or a Looker Studio parameter for the fiscal year.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': ['1', '2', '3', '4', '5', '10', '14', '18', '23', '27', '31', '36', '40', '44', '49', '13', '26', '39', '53'], 'context': 'Numeric values used in `CASE` statements to map week numbers to fiscal months and quarters.', 'suggested_governance': 'These fiscal calendar mappings should be stored in a dedicated `dim_fiscal_calendar` table, allowing for flexible and auditable fiscal period definitions.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Week to Date & Budget View'"", ""'Week to Date & Forecast View'"", ""'Week to Date & Year on Year View'"", ""'Week to Date & NY Budget View'"", ""'Month to Date & Budget View'"", ""'Month to Date & Forecast View'"", ""'Month to Date & NY Budget View'"", ""'Quarter to Date & Budget View'"", ""'Quarter to Date & Forecast View'"", ""'Quarter to Date & Year on Year View'"", ""'Quarter to Date & NY Budget View'"", ""'Year to Date & Budget View'"", ""'Year to Date & Forecast View'"", ""'Year to Date & Year on Year View'"", ""'Year to Date & NY Budget View'""], 'context': ""String literals defining 'view types' in Query 3."", 'suggested_governance': 'These view types should be defined in a configuration table or as Looker Studio parameters/fields, rather than hardcoded in SQL.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates (e.g., '2025-03-26', '2024-07-03') with Looker Studio date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`)."", 'Replace hardcoded fiscal year (e.g., `2025`) with a dynamic calculation (`EXTRACT(YEAR FROM CURRENT_DATE())`) or a Looker Studio parameter.', 'Externalize fiscal calendar mappings (week to month/quarter) into a dedicated dimension table (`dim_fiscal_calendar`) to allow for flexible and auditable fiscal period definitions.', ""Manage business rule values (e.g., 'Discontinued', 'Digital Recognition') and view type strings in governed reference tables or Looker Studio field definitions, rather than hardcoding them in SQL.""]",13,bb49fa78-5abe-4e68-a9c1-8172a832e724
"-- THIS IS THE MAIN SQL TO RUN FOR UNIFIED ANALYSIS
-- This query provides the base data with all derived dimensions and the core measure,
-- allowing for flexible aggregation in the dashboard to reproduce the original metrics.
WITH base_data AS (
  SELECT
    t0.ProductType,
    t0.RevenueNet,
    t0.TransactionType,
    -- Derived TransactionCategory based on business rules
    CASE
      WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
      WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
      WHEN (t0.TransactionType = 'RTB' OR t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
      ELSE SAFE_CAST(t0.TransactionType AS STRING) -- Fallback for unmapped values
    END AS TransactionCategory
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
  -- The 'programmatic_60_day_view' implies a rolling 60-day window.
  -- If the view does not implicitly filter by date, a date column (e.g., `event_date` or `_PARTITIONTIME`) would be needed here.
  -- Example: WHERE t0.event_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)
)
SELECT
  ProductType,
  TransactionCategory,
  SUM(RevenueNet) AS total_revenue_net
FROM base_data
GROUP BY
  ProductType,
  TransactionCategory
ORDER BY
  total_revenue_net DESC
LIMIT 1000; -- Sample limit for analysis and cost optimization","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT ProductType) as unique_product_types,
  COUNT(DISTINCT TransactionType) as unique_transaction_types,
  SUM(RevenueNet) as total_revenue_net_sum
  -- Add MIN/MAX date if a date column exists in the view, e.g., MIN(event_date) as earliest_date, MAX(event_date) as latest_date
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
LIMIT 1;","-- Quick validation that all metric calculations work syntactically and data exists
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(RevenueNet) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(DISTINCT ProductType) > 0 THEN 'PASS' ELSE 'FAIL' END as product_type_exists_test,
  CASE WHEN COUNT(DISTINCT TransactionType) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_type_exists_test
  -- Add date freshness check if a date column is available, e.g., CASE WHEN MAX(event_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
LIMIT 1;","-- Query to validate key business logic, filters, and data quality for TransactionType categorization
WITH transaction_mapping AS (
  SELECT
    TransactionType,
    CASE
      WHEN (TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD') THEN 'Guaranteed'
      WHEN (TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR') THEN 'Deal'
      WHEN (TransactionType = 'RTB' OR TransactionType = 'Open Auction' OR TransactionType = 'Unknown') THEN 'Open Auction'
      ELSE SAFE_CAST(TransactionType AS STRING)
    END AS TransactionCategory
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
)
SELECT
  'Business Rule Validation' as validation_type,
  'TransactionType Categorization' as rule_name,
  COUNT(*) as total_records,
  SUM(CASE WHEN TransactionCategory IN ('Guaranteed', 'Deal', 'Open Auction') THEN 1 ELSE 0 END) as records_mapped_to_known_category,
  SUM(CASE WHEN TransactionCategory NOT IN ('Guaranteed', 'Deal', 'Open Auction') THEN 1 ELSE 0 END) as records_mapped_to_other_category,
  SAFE_DIVIDE(SUM(CASE WHEN TransactionCategory IN ('Guaranteed', 'Deal', 'Open Auction') THEN 1 ELSE 0 END), COUNT(*)) * 100 as mapped_percentage
FROM transaction_mapping
LIMIT 1;","-- Query to get representative sample data for further analysis
SELECT
  ProductType,
  RevenueNet,
  TransactionType,
  -- Include derived TransactionCategory for context
  CASE
    WHEN (TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR') THEN 'Deal'
    WHEN (TransactionType = 'RTB' OR TransactionType = 'Open Auction' OR TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(TransactionType AS STRING)
  END AS TransactionCategory
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
WHERE RevenueNet IS NOT NULL -- Filter out null revenue for meaningful samples
ORDER BY RevenueNet DESC -- Order by revenue to see high-value transactions
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Deal'"", ""'pmp'"", ""'PG - CPM'"", ""'AG'"", ""'PMP_DEAL'"", ""'RTB'"", ""'PG - CPD'"", ""'Open Auction'"", ""'Unknown'"", ""'UFR'"", ""'Guaranteed'"", ""'Deal'"", ""'Open Auction'""], 'context': 'TransactionType values are hardcoded in a CASE statement to derive TransactionCategory.', 'suggested_governance': 'Create a `transaction_type_lookup` table with `original_transaction_type` and `mapped_category` columns. Join to this table instead of hardcoding.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded lookup values for TransactionType categorization with joins to a governed reference table.', 'If the `programmatic_60_day_view` does not inherently manage the date range, introduce a date parameter for the rolling window (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL @days_back DAY)`).']",14,b15d856f-e3ce-4991-bf2a-92395390524f
"-- This query calculates key ad sales performance metrics based on inferred schema from 'adsales_performance' table.
-- It includes the dimensions identified in the provided Looker Studio filter queries.
-- Replace placeholder metrics (e.g., total_revenue, total_impressions) with actual column names from your table.

WITH AdSalesData AS (
  SELECT
    t0.financial_week,
    t0.advertiser_group,
    t0.fin_adtype_name,
    t0.product_group,
    -- Assuming these are common metrics in an ad sales performance table
    SAFE_CAST(t0.revenue AS NUMERIC) AS total_revenue,
    SAFE_CAST(t0.impressions AS INT64) AS total_impressions,
    SAFE_CAST(t0.clicks AS INT64) AS total_clicks,
    SAFE_CAST(t0.cost AS NUMERIC) AS total_cost
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE
    -- Apply common dashboard filters for product_group
    t0.product_group IN (
      'Commercial Content',
      'Free News & Lifestyle',
      'State & Communities',
      'The Australian & Prestige',
      '' -- Includes the empty string filter from query 3
    )
    AND (t0.product_group NOT IN ('Unknown') OR t0.product_group IS NULL) -- From query 2
    -- Add a typical date filter for performance dashboards (e.g., last 12 financial weeks)
    AND t0.financial_week >= (SELECT MAX(financial_week) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`) - 12
)
SELECT
  financial_week,
  advertiser_group,
  fin_adtype_name,
  product_group,
  SUM(total_revenue) AS sum_total_revenue,
  SUM(total_impressions) AS sum_total_impressions,
  SUM(total_clicks) AS sum_total_clicks,
  SUM(total_cost) AS sum_total_cost,
  SAFE_DIVIDE(SUM(total_revenue), SUM(total_impressions)) AS revenue_per_impression,
  SAFE_DIVIDE(SUM(total_clicks), SUM(total_impressions)) AS click_through_rate
FROM AdSalesData
GROUP BY
  financial_week,
  advertiser_group,
  fin_adtype_name,
  product_group
ORDER BY
  financial_week DESC,
  advertiser_group,
  fin_adtype_name,
  product_group
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_week) as unique_financial_weeks,
  COUNT(DISTINCT advertiser_group) as unique_advertiser_groups,
  COUNT(DISTINCT fin_adtype_name) as unique_fin_adtype_names,
  COUNT(DISTINCT product_group) as unique_product_groups,
  MIN(financial_week) as earliest_financial_week,
  MAX(financial_week) as latest_financial_week,
  APPROX_COUNT_DISTINCT(CONCAT(financial_week, '-', advertiser_group, '-', fin_adtype_name, '-', product_group)) as approx_unique_combinations
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_week >= (SELECT MAX(financial_week) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`) - 52;","-- Quick validation that all metric calculations work syntactically and data exists
SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_existence_test,
  CASE WHEN MAX(financial_week) >= (SELECT MAX(financial_week) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`) - 4 THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN SUM(CASE WHEN product_group IS NULL THEN 1 ELSE 0 END) = 0 THEN 'PASS' ELSE 'FAIL' END as product_group_not_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_week >= (SELECT MAX(financial_week) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`) - 4
LIMIT 1;","-- Query to validate key business logic, filters, and data quality for product_group
SELECT
  'Business Rule Validation' as validation_type,
  'Product Group Filtering' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN product_group IN ('Commercial Content', 'Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige', '') THEN 1 ELSE 0 END) as records_matching_filter_set_1,
  SUM(CASE WHEN product_group NOT IN ('Unknown') OR product_group IS NULL THEN 1 ELSE 0 END) as records_matching_filter_set_2,
  SUM(CASE WHEN product_group = 'Unknown' THEN 1 ELSE 0 END) as records_with_unknown_product_group,
  SUM(CASE WHEN product_group = '' THEN 1 ELSE 0 END) as records_with_empty_product_group
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_week >= (SELECT MAX(financial_week) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`) - 12;","-- Query to get representative sample data for further analysis
SELECT
  financial_week,
  advertiser_group,
  fin_adtype_name,
  product_group,
  -- Assuming these are actual columns in your table
  revenue,
  impressions,
  clicks,
  cost
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_week >= (SELECT MAX(financial_week) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`) - 4
ORDER BY financial_week DESC, revenue DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Commercial Content'"", ""'Free News & Lifestyle'"", ""'State & Communities'"", ""'The Australian & Prestige'""], 'context': 'Used in WHERE clause to filter `product_group` for `advertiser_group` dimension lookup.', 'suggested_governance': 'These product group names should be stored in a `product_group_master` reference table and joined to the `adsales_performance` table, or used as parameters.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Unknown'""], 'context': 'Used in WHERE clause to exclude `product_group` values for `fin_adtype_name` dimension lookup.', 'suggested_governance': ""The 'Unknown' category should be handled consistently, potentially by defining it in a reference table or using a standard `COALESCE` or `IFNULL` pattern if it represents missing data."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""''""], 'context': 'Used in WHERE clause to filter `product_group` for `financial_week` dimension lookup.', 'suggested_governance': 'Empty string values for `product_group` should be addressed. Either they represent a valid category that should be named, or they indicate missing/invalid data that should be cleaned or excluded explicitly.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded product group names with parameters in Looker Studio, allowing users to select from a dynamic list.', 'Implement a `product_group_master` reference table in BigQuery and join to it for filtering and categorisation, ensuring data consistency and easier maintenance.', 'Consider using a date parameter for the `financial_week` filter (e.g., `_DS_FINANCIAL_WEEK_START_` or `_DS_FINANCIAL_WEEK_END_`) instead of relative `MAX(financial_week) - N` logic, if Looker Studio supports financial week parameters.']",15,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
"-- This is the main SQL to run for business analysis based on the provided queries.
-- Note: The metric 'sum_of_fiscal_month_numbers' is unusual for a reconciliation report.
-- It sums the fiscal month number itself, not a financial amount. It might indicate a misconfigured calculation.
SELECT
  t0.month_name AS month_name_dimension,
  COUNT(t0.fy_month_num) AS record_count_by_month,
  SUM(t0.fy_month_num) AS sum_of_fiscal_month_numbers
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
-- No date filter was present in the original query. For practical analysis, you would typically add a date filter here, e.g.:
-- WHERE t0.transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH) -- Assuming 'transaction_date' exists in the table
GROUP BY
  t0.month_name
ORDER BY
  t0.month_name -- Order by month_name (alphabetical) or by fy_month_num if available as a dimension for proper chronological sorting
LIMIT 100;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT fy_month_num) as unique_fiscal_months,
  COUNT(DISTINCT month_name) as unique_month_names,
  MIN(fy_month_num) as earliest_fiscal_month_num,
  MAX(fy_month_num) as latest_fiscal_month_num,
  -- Assuming a 'transaction_date' column for typical GL data, adjust if column name differs
  MIN(transaction_date) as earliest_transaction_date,
  MAX(transaction_date) as latest_transaction_date,
  APPROX_COUNT_DISTINCT(transaction_id) as approx_unique_transactions -- Assuming a 'transaction_id' column
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation`
WHERE transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY); -- Sample recent data for structure analysis","SELECT 
  'Validation Check' as test_type,
  CASE WHEN COUNT(fy_month_num) > 0 THEN 'PASS' ELSE 'FAIL' END as record_count_test,
  CASE WHEN SUM(fy_month_num) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as sum_metric_test,
  CASE WHEN COUNT(DISTINCT month_name) > 0 THEN 'PASS' ELSE 'FAIL' END as month_name_dimension_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation`
WHERE transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) -- Assuming 'transaction_date' exists
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Non-zero fy_month_num check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN fy_month_num > 0 THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN fy_month_num > 0 THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation`
WHERE transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY); -- Assuming 'transaction_date' exists","SELECT 
  fy_month_num,
  month_name,
  -- Include other relevant columns for GL reconciliation if they exist (e.g., transaction_id, account_id, debit_amount, credit_amount, transaction_date, description)
  -- For example, assuming these columns exist:
  transaction_id,
  account_id,
  debit_amount,
  credit_amount,
  transaction_date,
  description
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation`
WHERE transaction_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) -- Sample recent data
ORDER BY transaction_date DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': []}","[""Implement date parameters in Looker Studio to allow users to select custom date ranges instead of relying on 'All Time' data or implicit date filtering."", ""If 'fy_month_num' was mistakenly used for summation instead of a financial amount, update the Looker Studio field definition to use the correct column (e.g., 'debit_amount', 'credit_amount', or 'transaction_amount').""]",16,f353b933-30eb-4853-9976-d35371db7d7
"-- This query consolidates key metrics from the 'v_adsales_revenue_client' table, which appears to be the primary focus of the 'Adsales Adhoc Analysis' dashboard. Metrics from 'finance_operating_statement' are not included here as they originate from a different dataset with no apparent join key.
WITH AdSalesData AS (
  SELECT
    t0.financial_year,
    t0.financial_week,
    t0.gross_revenue_amount,
    t0.invoice_number,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.data_load_datetime,
    t0.unified_publication_gl_code
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
)
SELECT
  financial_year AS financial_year_dimension,
  financial_week AS financial_week_dimension,
  source_system_code AS source_system_code_dimension,
  DATETIME_TRUNC(data_load_datetime, SECOND) AS data_load_datetime_truncated,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(SAFE_CAST(financial_week AS INT64)) AS sum_financial_week_int
FROM AdSalesData
WHERE
  revenue_transaction_status IN ('Booked', 'Billed')
  AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL)
  AND invoice_number = '-1'
  AND source_system_code IN ('PLUTO', 'CPQ', 'ADPT')
  AND financial_year = '2025' -- Hardcoded: Consider replacing with a parameter (e.g., @financial_year) or relative date logic (e.g., EXTRACT(YEAR FROM CURRENT_DATE()) + 1)
  AND unified_publication_gl_code IN ('9707', '9655', '9658') -- Hardcoded: Consider joining to a 'unified_publication_gl_code_master' reference table
GROUP BY
  financial_year,
  financial_week,
  source_system_code,
  DATETIME_TRUNC(data_load_datetime, SECOND)
ORDER BY
  financial_year DESC, total_gross_revenue_amount DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT financial_week) as unique_financial_weeks,
  COUNT(DISTINCT source_system_code) as unique_source_systems,
  COUNT(DISTINCT revenue_transaction_status) as unique_transaction_statuses,
  COUNT(DISTINCT unified_publication_gl_code) as unique_gl_codes,
  MIN(financial_year) as earliest_financial_year,
  MAX(financial_year) as latest_financial_year,
  MIN(data_load_datetime) as earliest_data_load_datetime,
  MAX(data_load_datetime) as latest_data_load_datetime
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Sample for the relevant year
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_test,
  CASE WHEN COUNT(DISTINCT financial_year) = 1 AND MAX(financial_year) = '2025' THEN 'PASS' ELSE 'FAIL' END as financial_year_filter_test,
  CASE WHEN COUNTIF(revenue_transaction_status IN ('Booked', 'Billed')) = COUNT(*) THEN 'PASS' ELSE 'FAIL' END as transaction_status_filter_test,
  CASE WHEN MAX(data_load_datetime) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as data_freshness_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  financial_year = '2025'
  AND revenue_transaction_status IN ('Booked', 'Billed')
  AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL)
  AND invoice_number = '-1'
  AND source_system_code IN ('PLUTO', 'CPQ', 'ADPT')
  AND unified_publication_gl_code IN ('9707', '9655', '9658')
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Focus on the relevant year for the dashboard
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Source Publishing Division Exclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025'
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Invoice Number -1 Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN invoice_number = '-1' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN invoice_number = '-1' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025'
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Source System Code Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN source_system_code IN ('PLUTO', 'CPQ', 'ADPT') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN source_system_code IN ('PLUTO', 'CPQ', 'ADPT') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025'
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Unified Publication GL Code Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN unified_publication_gl_code IN ('9707', '9655', '9658') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN unified_publication_gl_code IN ('9707', '9655', '9658') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025';","SELECT 
  financial_year,
  financial_week,
  gross_revenue_amount,
  invoice_number,
  revenue_transaction_status,
  source_publishing_division,
  source_system_code,
  data_load_datetime,
  unified_publication_gl_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  financial_year = '2025' -- Sample for the relevant year
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  data_load_datetime DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'financial_year filter in ad sales revenue queries', 'suggested_fix': 'replace with a parameter or relative date function (e.g., CURRENT_FINANCIAL_YEAR())', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202548', 'original_format': '202548', 'context': 'fiscal_week_id filter in finance operating statement query', 'suggested_fix': 'replace with a parameter or derive from a date dimension table', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202549', 'original_format': '202549', 'context': 'fiscal_week_id filter in finance operating statement query', 'suggested_fix': 'replace with a parameter or derive from a date dimension table', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202550', 'original_format': '202550', 'context': 'fiscal_week_id filter in finance operating statement query', 'suggested_fix': 'replace with a parameter or derive from a date dimension table', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202551', 'original_format': '202551', 'context': 'fiscal_week_id filter in finance operating statement query', 'suggested_fix': 'replace with a parameter or derive from a date dimension table', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'revenue_transaction_status filter', 'suggested_governance': ""join to a 'revenue_transaction_status_master' reference table"", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'exclusion filter for source_publishing_division', 'suggested_governance': 'manage excluded divisions in a configuration table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'-1'""], 'context': 'invoice_number filter (likely for specific transaction types)', 'suggested_governance': ""clarify business meaning of '-1' and manage via a lookup or configuration table if it represents a specific category"", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'"", ""'CPQ'"", ""'ADPT'""], 'context': 'source_system_code filter', 'suggested_governance': ""join to a 'source_system_master' reference table"", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'9707'"", ""'9655'"", ""'9658'""], 'context': 'unified_publication_gl_code filter', 'suggested_governance': ""join to a 'gl_code_master' reference table"", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded financial years and fiscal week IDs with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`).', 'Replace hardcoded lookup values (e.g., transaction statuses, source systems, GL codes) with joins to governed reference tables or configuration tables.', 'Externalize business rules (e.g., excluded publishing divisions, special invoice numbers) into configuration tables for easier maintenance and transparency.']",17,77c68c35-20ce-477a-b216-0c781d43a8ca
"WITH OSandFACT_Base AS (
  SELECT
    os.source_system_name,
    os.sub_source_system_name,
    CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
    os.gl_publication_code,
    os.day_of_week,
    os.state,
    os.os_level_1,
    os.os_level_2,
    os.os_level_3,
    os.os_level_4,
    os.os_level_5,
    os.os_level_6,
    os.os_level_7,
    os.os_level_8,
    os.os_level_9,
    os.os_level_10,
    os.os_level_11,
    os.os_level_12,
    os.Estimate,
    os.True_Up_Adjustment,
    os.Actual_Amount,
    os.volume,
    os.Last_Year_Actual_Amount,
    os.Last_Year_volume,
    os.Budget_Draft_Amount,
    os.Budget_Draft_Volume,
    os.Budget_Amount,
    os.Budget_Volume,
    os.Forecast_Amount,
    os.Forecast_Volume,
    os.Budget_Jan_Amount,
    os.Budget_Jan_Volume,
    os.Budget_Feb_Amount,
    os.Budget_Feb_Volume,
    os.Budget_Mar_Amount,
    os.Budget_Mar_Volume,
    os.Budget_Apr_Amount,
    os.Budget_Apr_Volume,
    os.Budget_May_Amount,
    os.Budget_May_Volume,
    os.Budget_Jun_Amount,
    os.Budget_Jun_Volume,
    os.Budget_Jul_Amount,
    os.Budget_Jul_Volume,
    os.Budget_Aug_Amount,
    os.Budget_Aug_Volume,
    os.Budget_Sep_Amount,
    os.Budget_Sep_Volume,
    os.Budget_Oct_Amount,
    os.Budget_Oct_Volume,
    os.Budget_Nov_Amount,
    os.Budget_Nov_Volume,
    os.Budget_Dec_Amount,
    os.Budget_Dec_Volume,
    os.Forecast_Q1F_Amount,
    os.Forecast_Q1F_Volume,
    os.Forecast_Q2F_Amount,
    os.Forecast_Q2F_Volume,
    os.Forecast_Q3F_Amount,
    os.Forecast_Q3F_Volume,
    os.Forecast_Q4F_Amount,
    os.Forecast_Q4F_Volume,
    os.Forecast_Q5F_Amount,
    os.Forecast_Q5F_Volume,
    pub.publication_name,
    pub.l04_publication_code,
    pub.l06_publication_code,
    pub.gl_hierarchy_code,
    calendar.fy_week_of_year,
    calendar.fy_year_week_number,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.fy_month_of_year,
    calendar.fy_year_month_number,
    calendar.relative_fisc_year_number,
    calendar.relative_fisc_week_number,
    calendar.fy_quarter_of_year,
    calendar.fy_year
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON control.source_week_number = calendar.fy_year_week_number AND control.period_name IN ('CP', 'PY')
    LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND pub.l04_publication_code <> 'Free News & Lifestyle'
    AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
    AND pub.gl_hierarchy_code = 'FY2025'
),
transformed_data AS (
  SELECT
    *,
    -- Derived publication name
    CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END AS publication_name_derived,

    -- Standardized publication name
    CASE
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'The Australian') THEN 'The Australian'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'The Sportsman') THEN 'The Sportsman'
      ELSE NULL
    END AS publication_name_standardized,

    -- State/Region
    CASE
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'The Daily Telegraph') THEN ' NSW'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Herald Sun', 'Geelong Advertiser', 'Weekly Times')) THEN '  VIC'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'The Advertiser') THEN '   SA'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Cairns Post', 'GCB', 'Townsville Bulletin', 'The Chronicle', 'Daily Mercury', 'Sunshine Coast')) THEN '     QLD'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Northern Territory News') THEN '      NT'
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mercury') THEN '    TAS'
      ELSE NULL
    END AS publication_state_region,

    -- Sales Channel Group
    CASE
      WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels'
      WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations'
      WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies'
      WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions'
      WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets'
      ELSE 'Unspec Channel'
    END AS sales_channel_group,

    -- Day of Week Category
    CASE
      WHEN (day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN 'M-F'
      WHEN (day_of_week = 'Sat') THEN 'SAT'
      WHEN (day_of_week = 'Sun') THEN 'Sun'
      ELSE NULL
    END AS day_of_week_category,

    -- Publication Group
    CASE
      WHEN (publication_name_derived IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs'
      WHEN (publication_name_derived IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas'
      WHEN (publication_name_derived IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian'
      WHEN (publication_name_derived IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other'
      WHEN (publication_name_derived IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (publication_name_derived IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail'
      WHEN (publication_name_derived IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (publication_name_derived IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      ELSE publication_name_derived
    END AS publication_group,

    -- Budget Volume for Past Weeks
    CASE WHEN (relative_fisc_week_number < 0) THEN Budget_Volume ELSE NULL END AS budget_volume_past_weeks,

    -- YTD Actual Amount (simplified, original uses hardcoded dates and complex week logic)
    -- This assumes 'current week' is derived dynamically from CURRENT_DATE()
    CASE WHEN (fy_week_of_year <= (SELECT fy_week_of_year FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` WHERE CURRENT_DATE() BETWEEN fy_first_day_of_week AND fy_last_day_of_week LIMIT 1)) THEN Actual_Amount ELSE 0 END AS ytd_actual_amount_calc,

    -- Budget Amount for Current Period (simplified, original logic was problematic)
    -- This assumes 'current week' is derived dynamically from CURRENT_DATE()
    CASE WHEN (fy_week_of_year = (SELECT fy_week_of_year FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` WHERE CURRENT_DATE() BETWEEN fy_first_day_of_week AND fy_last_day_of_week LIMIT 1)) THEN Budget_Amount ELSE 0 END AS budget_amount_current_period,

    -- Calculated Daily Average Volume (simplified from original complex logic)
    CASE
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN SAFE_DIVIDE(volume, 6)
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'PNG') THEN 0
      ELSE SAFE_DIVIDE(volume, 7)
    END AS calculated_daily_avg_volume,

    -- Calculated Daily Average Volume (Forecast/Budget) (simplified from original complex logic)
    CASE
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN SAFE_DIVIDE(Budget_Volume, 6)
      WHEN (CASE WHEN (gl_publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'PNG') THEN 0
      ELSE SAFE_DIVIDE(Budget_Volume, 7)
    END AS calculated_daily_avg_volume_forecast_budget

  FROM OSandFACT_Base
  WHERE
    os_level_8 != 'DTI Free Copies'
    AND publication_name_standardized IS NOT NULL
    AND sales_channel_group = 'Retail'
),
final_data AS (
SELECT
  fy_quarter_of_year,
  publication_state_region,
  publication_name_standardized,
  os_level_8,
  sales_channel_group,
  day_of_week_category,
  publication_group,
  'YTD' AS period_type_label,

  -- Metrics from Query 1
  SUM(budget_volume_past_weeks) AS total_budget_volume_past_weeks,
  SUM(volume - budget_volume_past_weeks) AS volume_vs_budget_variance,
  SUM(volume) AS total_actual_volume,

  -- Metrics from Query 2
  SUM(Budget_Volume) AS total_budget_volume_q2,
  SUM(Actual_Amount) AS total_actual_amount_q2,
  SUM(CASE WHEN os_level_7 = 'ALL SALES CHANNELS' THEN Actual_Amount ELSE 0 END) AS total_actual_amount_all_sales_channels,
  SUM(ytd_actual_amount_calc) AS total_ytd_actual_amount,
  SUM(calculated_daily_avg_volume) AS total_calculated_daily_avg_volume,
  SUM(calculated_daily_avg_volume_forecast_budget) AS total_calculated_daily_avg_volume_forecast_budget,
  SUM(budget_amount_current_period) AS total_budget_amount_current_period

FROM transformed_data
GROUP BY
  fy_quarter_of_year,
  publication_state_region,
  publication_name_standardized,
  os_level_8,
  sales_channel_group,
  day_of_week_category,
  publication_group
)
SELECT *
FROM final_data
ORDER BY
  fy_quarter_of_year DESC,
  publication_state_region,
  publication_name_standardized
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT fiscal_week_id) as unique_fiscal_weeks,
  COUNT(DISTINCT gl_publication_code) as unique_publication_codes,
  COUNT(DISTINCT os_level_8) as unique_os_level_8_values,
  COUNT(DISTINCT os_level_10) as unique_sales_channels,
  MIN(fiscal_week_id) as earliest_fiscal_week_id,
  MAX(fiscal_week_id) as latest_fiscal_week_id,
  MIN(fy_first_day_of_week) as earliest_date,
  MAX(fy_last_day_of_week) as latest_date,
  APPROX_COUNT_DISTINCT(CONCAT(fiscal_week_id, gl_publication_code, os_level_8, os_level_10)) as approx_unique_grain_records
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND os.gl_hierarchy_code = 'FY2025'
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_test,
  CASE WHEN SUM(Budget_Volume) > 0 THEN 'PASS' ELSE 'FAIL' END as budget_volume_test,
  CASE WHEN COUNT(DISTINCT gl_publication_code) > 0 THEN 'PASS' ELSE 'FAIL' END as publication_test,
  CASE WHEN MAX(calendar.fy_last_day_of_week) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND os.gl_hierarchy_code = 'FY2025'
  AND calendar.fy_last_day_of_week >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Circulation Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN upper(os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN upper(os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  gl_hierarchy_code = 'FY2025'
  AND fiscal_week_id = (SELECT MAX(fiscal_week_id) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` WHERE gl_hierarchy_code = 'FY2025');","SELECT
  os.fiscal_week_id,
  os.gl_publication_code,
  pub.publication_name,
  os.day_of_week,
  os.os_level_8,
  os.os_level_10,
  os.Actual_Amount,
  os.volume,
  os.Budget_Amount,
  os.Budget_Volume,
  os.Forecast_Amount,
  os.Forecast_Volume,
  os.Last_Year_Actual_Amount,
  os.Last_Year_volume,
  calendar.fy_quarter_of_year,
  calendar.relative_fisc_week_number
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND pub.gl_hierarchy_code = 'FY2025'
ORDER BY
  os.fiscal_week_id DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '15/04/2025', 'original_format': '2025-04-15 04:14:20.297382+00', 'context': 'Used as a reference date for calculating week differences and current date in Query 2.', 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '03/07/2024', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a fixed baseline date in DATETIME_DIFF calculation for week number in Query 2.', 'suggested_fix': 'Replace with a dynamic start date (e.g., start of fiscal year) or a parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'1'"", ""'2'"", ""'3'""], 'context': 'Numeric literals used in CASE statements to select different metric calculation paths (e.g., current, forecast, last year). These likely correspond to Looker Studio parameter values.', 'suggested_governance': 'Use a Looker Studio parameter that directly maps to column names or a more explicit conditional logic, or pre-calculate these periods in the underlying data model.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Daily Telegraph'"", ""'The Herald Sun'"", ""'The Advertiser'"", ""'Courier Mail'"", ""'Cairns Post'"", ""'GCB'"", ""'Townsville Bulletin'"", ""'The Chronicle'"", ""'Daily Mercury'"", ""'Sunshine Coast'"", ""'Northern Territory News'"", ""'Mercury'"", ""'Weekly Times'"", ""'Geelong Advertiser'"", ""'The Australian'"", ""'The Sportsman'"", ""'PNG'"", ""'6 Day Pubs'"", ""'Mercury and Sunday Tas'"", ""'NT News & Sunday Territorian'"", ""'Other'"", ""'Retail'"", ""'Subscriptions'"", ""'Alternative Channels'"", ""'M-F'"", ""'SAT'"", ""'Sun'"", ""'ALL SALES CHANNELS'"", ""'FY2025'"", ""'CIRCULATION'"", ""'DTI Free Copies'""], 'context': 'Various string literals used for publication names, sales channels, day categories, and filtering criteria within CASE statements and WHERE clauses.', 'suggested_governance': 'Create and join to governed dimension tables (e.g., `dim_publication`, `dim_sales_channel`, `dim_calendar`) for consistent categorization and filtering. Parameterize the fiscal year.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded dates (e.g., '2025-04-15', '2024-07-03') with Looker Studio date range parameters or `CURRENT_DATE()` for dynamic reporting."", ""Parameterize the fiscal year filter ('FY2025') to allow for easy year-over-year analysis without modifying SQL."", 'Implement Looker Studio controls for publication groups, sales channels, and day categories, which then map to values from governed lookup tables, rather than hardcoding in SQL.', ""Refactor the complex 'period selection' logic (using '1', '2', '3') into a more explicit parameter-driven approach, potentially using a `UNION ALL` structure or a configuration table.""]",18,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"WITH OSandFACT AS (
    SELECT
      os.*,
      pub.publication_name,
      pub.publication_code,
      pub.l04_publication_code,
      pub.l06_publication_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
          CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
          CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
            ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
        WHERE 1 = 1
      ) AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
        ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND pub.l04_publication_code <> 'Free News & Lifestyle'
      AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
      AND os.gl_hierarchy_code = 'FY2025'
  ),
  transformed_data AS (
    SELECT
      *,
      -- Publication Category Level 1 (from Query 2/3 logic)
      CASE
        WHEN publication_code = 'Post Courier' THEN 'PNG'
        WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'Northern Territory'
        WHEN publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Others'
        WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
        WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
        WHEN publication_name IN ('Sunday Tasmanian', 'Mercury') THEN 'Mercury'
        WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
        WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
        WHEN publication_name = 'The Australian' THEN 'The Australian'
        WHEN publication_name = 'The Sportsman' THEN 'The Sportsman'
        WHEN publication_name = 'Weekly Times' THEN 'Weekly Times'
        ELSE publication_name
      END AS publication_category_level_1,
      -- Publication Type (from Query 3 logic)
      CASE
        WHEN publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin') THEN '6 Day Pubs'
        WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury and Sunday Tas'
        WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'NT News & Sunday Territorian'
        WHEN publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Other'
        WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
        WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
        WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
        WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
        ELSE publication_name
      END AS publication_type,
      -- Day of Week Category (from Query 3 logic)
      CASE
        WHEN day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry') THEN 'M-F'
        WHEN day_of_week = 'Sat' THEN 'SAT'
        WHEN day_of_week = 'Sun' THEN 'Sun'
        ELSE NULL
      END AS day_of_week_category,
      -- Derived Fiscal Month Number for calculations (assuming 48 was fy_month_of_year)
      CASE WHEN fy_month_of_year = 0 THEN 1 ELSE fy_month_of_year END AS calculated_fy_month_for_div,
      -- Derived Fiscal Week Number for calculations (assuming 48 was fy_year_week_number)
      CASE WHEN fy_year_week_number = 0 THEN 1 ELSE fy_year_week_number END AS calculated_fy_week_for_div
    FROM OSandFACT
  )
SELECT
  -- Dimensions
  td.publication_name,
  td.os_level_7 AS sales_channel,
  td.fy_year_week_number,
  td.fy_month_of_year,
  td.day_of_week,
  td.fy_year,
  td.publication_category_level_1,
  td.publication_type,
  td.day_of_week_category,
  -- Base Metrics
  SUM(td.Actual_Amount) AS total_actual_amount,
  SUM(td.volume) AS total_volume,
  SUM(td.Last_Year_Actual_Amount) AS total_last_year_actual_amount,
  SUM(td.Last_Year_volume) AS total_last_year_volume,
  SUM(td.Budget_Amount) AS total_budget_amount,
  SUM(td.Budget_Volume) AS total_budget_volume,
  SUM(td.Forecast_Amount) AS total_forecast_amount,
  SUM(td.Forecast_Volume) AS total_forecast_volume,
  -- Calculated Metrics (Adjusted Volume)
  SUM(
    CASE
      WHEN td.publication_type = 'PNG' THEN 0
      WHEN td.publication_type = '6 Day Pubs' THEN SAFE_DIVIDE(
        CASE
          WHEN (td.publication_name = 'The Australian' OR td.publication_name = 'The Courier Mail') THEN CASE WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(td.volume, (td.calculated_fy_month_for_div * 5)) * 5) ELSE SAFE_DIVIDE(td.volume, td.calculated_fy_month_for_div) END
          WHEN td.publication_name = 'The Sportsman' THEN (SAFE_DIVIDE(td.volume, (td.calculated_fy_month_for_div * 2)) * 5)
          WHEN td.publication_name = 'Weekly Times' THEN (SAFE_DIVIDE(td.volume, td.calculated_fy_month_for_div) * 5)
          WHEN td.publication_type = 'PNG' THEN 0
          WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(td.volume, (td.calculated_fy_month_for_div * 5)) * 5)
          ELSE SAFE_DIVIDE(td.volume, td.calculated_fy_month_for_div)
        END, 6
      )
      ELSE SAFE_DIVIDE(
        CASE
          WHEN (td.publication_name = 'The Australian' OR td.publication_name = 'The Courier Mail') THEN CASE WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(td.volume, (td.calculated_fy_month_for_div * 5)) * 5) ELSE SAFE_DIVIDE(td.volume, td.calculated_fy_month_for_div) END
          WHEN td.publication_name = 'The Sportsman' THEN (SAFE_DIVIDE(td.volume, (td.calculated_fy_month_for_div * 2)) * 5)
          WHEN td.publication_name = 'Weekly Times' THEN (SAFE_DIVIDE(td.volume, td.calculated_fy_month_for_div) * 5)
          WHEN td.publication_type = 'PNG' THEN 0
          WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(td.volume, (td.calculated_fy_month_for_div * 5)) * 5)
          ELSE SAFE_DIVIDE(td.volume, td.calculated_fy_month_for_div)
        END, 7
      )
    END
  ) AS adjusted_actual_volume,
  SUM(
    CASE
      WHEN td.publication_type = 'PNG' THEN 0
      WHEN td.publication_type = '6 Day Pubs' THEN SAFE_DIVIDE(
        CASE
          WHEN (td.publication_name = 'The Australian' OR td.publication_name = 'The Courier Mail') THEN CASE WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, (td.calculated_fy_month_for_div * 5)
          ) * 5) ELSE SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, td.calculated_fy_month_for_div
          ) END
          WHEN td.publication_name = 'The Sportsman' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, (td.calculated_fy_month_for_div * 2)
          ) * 5)
          WHEN td.publication_name = 'Weekly Times' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, td.calculated_fy_month_for_div
          ) * 5)
          WHEN td.publication_type = 'PNG' THEN 0
          WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, (td.calculated_fy_month_for_div * 5)
          ) * 5)
          ELSE SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, td.calculated_fy_month_for_div
          )
        END, 6
      )
      ELSE SAFE_DIVIDE(
        CASE
          WHEN (td.publication_name = 'The Australian' OR td.publication_name = 'The Courier Mail') THEN CASE WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, (td.calculated_fy_month_for_div * 5)
          ) * 5) ELSE SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, td.calculated_fy_month_for_div
          ) END
          WHEN td.publication_name = 'The Sportsman' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, (td.calculated_fy_month_for_div * 2)
          ) * 5)
          WHEN td.publication_name = 'Weekly Times' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, td.calculated_fy_month_for_div
          ) * 5)
          WHEN td.publication_type = 'PNG' THEN 0
          WHEN td.day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, (td.calculated_fy_month_for_div * 5)
          ) * 5)
          ELSE SAFE_DIVIDE(
            CASE
              WHEN td.calculated_fy_week_for_div < 4 THEN td.volume
              WHEN td.calculated_fy_week_for_div < 6 THEN (CASE WHEN td.fy_month_of_year < 4 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 6 THEN (CASE WHEN td.fy_month_of_year < 6 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div < 9 THEN (CASE WHEN td.fy_month_of_year < 7 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.calculated_fy_week_for_div = 9 THEN (CASE WHEN td.fy_month_of_year < 9 THEN td.volume ELSE td.Forecast_Volume END)
              WHEN td.fy_month_of_year < 10 THEN td.volume
              ELSE td.Forecast_Volume
            END, td.calculated_fy_month_for_div
          )
        END, 7
      )
    END
  ) AS adjusted_target_forecast_py_volume
FROM transformed_data td
WHERE
  td.os_level_7 = 'All Sales Channels'
  AND td.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND td.publication_category_level_1 IN ('Geelong Advertiser', 'Mercury', 'Sunday Tasmanian', 'Sunshine Coast', 'Sydney Suburbans', 'The Australian', 'The Daily Telegraph', 'The Herald Sun', 'Toowoomba', 'Townsville Bulletin', 'Weekly Times')
  AND td.fy_year = 2025
  AND td.fy_year_week_number <= (SELECT MAX(fy_year_week_number) FROM transformed_data WHERE DATE(CURRENT_TIMESTAMP(), 'Australia/Sydney') BETWEEN fy_first_day_of_week AND fy_last_day_of_week)
GROUP BY
  td.publication_name,
  td.os_level_7,
  td.fy_year_week_number,
  td.fy_month_of_year,
  td.day_of_week,
  td.fy_year,
  td.publication_category_level_1,
  td.publication_type,
  td.day_of_week_category
ORDER BY
  td.fy_year_week_number DESC
LIMIT 1000;
","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT os.fiscal_week_id) AS unique_fiscal_weeks,
  COUNT(DISTINCT os.gl_publication_code) AS unique_publications,
  COUNT(DISTINCT os.os_level_7) AS unique_sales_channels,
  MIN(calendar.fy_first_day_of_week) AS earliest_fiscal_week_start_date,
  MAX(calendar.fy_last_day_of_week) AS latest_fiscal_week_end_date,
  APPROX_COUNT_DISTINCT(CONCAT(os.fiscal_week_id, os.gl_publication_code, os.day_of_week, os.os_level_7)) AS approx_unique_data_grain_records
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND os.gl_hierarchy_code = 'FY2025'
  AND calendar.fy_year = EXTRACT(YEAR FROM CURRENT_DATE()) -- Filter for current year data for structure analysis
LIMIT 1000;","WITH OSandFACT AS (
    SELECT
      os.*,
      pub.publication_name,
      pub.publication_code,
      pub.l04_publication_code,
      pub.l06_publication_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
            ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
        ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND pub.l04_publication_code <> 'Free News & Lifestyle'
      AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
      AND os.gl_hierarchy_code = 'FY2025'
  )
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_test,
  CASE WHEN SUM(volume) > 0 THEN 'PASS' ELSE 'FAIL' END AS volume_test,
  CASE WHEN COUNT(DISTINCT publication_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS publication_test,
  CASE WHEN MAX(fy_last_day_of_week) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test
FROM OSandFACT
WHERE
  fy_year = EXTRACT(YEAR FROM CURRENT_DATE()) AND fy_year_week_number = (SELECT MAX(fy_year_week_number) FROM OSandFACT WHERE fy_year = EXTRACT(YEAR FROM CURRENT_DATE()))
LIMIT 1;","WITH OSandFACT AS (
    SELECT
      os.*,
      pub.publication_name,
      pub.publication_code,
      pub.l04_publication_code,
      pub.l06_publication_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
            ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
        ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND pub.l04_publication_code <> 'Free News & Lifestyle'
      AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
      AND os.gl_hierarchy_code = 'FY2025'
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'Circulation Data Filtered Correctly' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN upper(os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END) AS records_passing_circulation_filter,
  SUM(CASE WHEN l04_publication_code <> 'Free News & Lifestyle' THEN 1 ELSE 0 END) AS records_passing_free_news_filter,
  SUM(CASE WHEN l06_publication_code NOT IN ('Food', 'Prestige') THEN 1 ELSE 0 END) AS records_passing_food_prestige_filter,
  SUM(CASE WHEN gl_hierarchy_code = 'FY2025' THEN 1 ELSE 0 END) AS records_passing_fy2025_filter,
  SUM(CASE WHEN os_level_7 = 'All Sales Channels' THEN 1 ELSE 0 END) AS records_passing_all_sales_channels_filter
FROM OSandFACT
WHERE
  fy_year = EXTRACT(YEAR FROM CURRENT_DATE()) AND fy_year_week_number = (SELECT MAX(fy_year_week_number) FROM OSandFACT WHERE fy_year = EXTRACT(YEAR FROM CURRENT_DATE()))
LIMIT 1;","WITH OSandFACT AS (
    SELECT
      os.*,
      pub.publication_name,
      pub.publication_code,
      pub.l04_publication_code,
      pub.l06_publication_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
            ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
        ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND pub.l04_publication_code <> 'Free News & Lifestyle'
      AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
      AND os.gl_hierarchy_code = 'FY2025'
  )
SELECT
  fiscal_week_id,
  gl_publication_code,
  publication_name,
  day_of_week,
  os_level_7,
  Actual_Amount,
  volume,
  Last_Year_Actual_Amount,
  Last_Year_volume,
  Budget_Amount,
  Budget_Volume,
  Forecast_Amount,
  Forecast_Volume,
  fy_year_week_number,
  fy_month_of_year,
  fy_year
FROM OSandFACT
WHERE
  fy_year = EXTRACT(YEAR FROM CURRENT_DATE()) AND fy_year_week_number = (SELECT MAX(fy_year_week_number) FROM OSandFACT WHERE fy_year = EXTRACT(YEAR FROM CURRENT_DATE()))
ORDER BY
  fiscal_week_id DESC, publication_name
LIMIT 500;","{'hardcoded_dates': [{'date_value': '03/07/2024', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a baseline date for calculating week differences (DATETIME_DIFF) in Query 1.', 'suggested_fix': 'Replace with a dynamic fiscal year start date from a calendar dimension table or a parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '23/06/2025', 'original_format': '2025-06-23 04:08:01.229999+00', 'context': 'Used to derive a specific fiscal week number (202549) for filtering in Query 1. This hardcodes the report to a single week.', 'suggested_fix': 'Replace with CURRENT_DATE() or a date parameter to allow dynamic reporting for the current or selected week.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '04/06/2025', 'original_format': '2025-06-04 07:28:59.451817+00', 'context': ""Used to derive a fiscal week number for a 'year-to-date' or 'current period' filter in Query 3."", 'suggested_fix': 'Replace with CURRENT_DATE() or a date parameter to allow dynamic reporting for the current period.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'CIRCULATION'""], 'context': ""Primary filter for os_level_6, defining the dashboard's scope."", 'suggested_governance': 'Consider if this should be configurable or derived from a business unit dimension.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'FY2025'""], 'context': 'Fiscal year filter applied to the base data. This will make the dashboard stale after FY2025.', 'suggested_governance': 'Replace with a dynamic fiscal year (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or a parameter) or derive from a period control table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Free News & Lifestyle'"", ""'Food'"", ""'Prestige'""], 'context': 'Exclusion filters for publication codes (l04_publication_code, l06_publication_code).', 'suggested_governance': ""Manage these exclusions in a configuration table or a publication dimension with a 'is_excluded' flag."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Weekly Times'"", ""'Sunshine Coast'"", ""'Mackay'""], 'context': 'Exclusion filters for publication names.', 'suggested_governance': ""Manage these exclusions in a configuration table or a publication dimension with a 'is_excluded' flag."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'All Sales Channels'""], 'context': 'Filter for os_level_7 (Sales Channel).', 'suggested_governance': 'Manage sales channel categories in a dimension table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'NT News'"", ""'Sunday Territorian'"", ""'Advertiser'"", ""'Post Courier'"", ""'PNG'"", ""'The Daily Telegraph'"", ""'The Sunday Telegraph'"", ""'Herald Sun'"", ""'Sunday Herald Sun'"", ""'Sunday Tasmanian'"", ""'Mercury'"", ""'The Sportsman'"", ""'The Courier Mail'"", ""'The Australian'"", ""'6 Day Pubs'"", ""'Mercury and Sunday Tas'"", ""'NT News & Sunday Territorian'"", ""'Other'"", ""'The Advertiser'"", ""'The Courier Mail'"", ""'The Daily Telegraph'"", ""'The Herald Sun'"", ""'Geelong Advertiser'"", ""'Sydney Suburbans'"", ""'Toowoomba'"", ""'Townsville Bulletin'""], 'context': 'Extensive hardcoded lists for publication categorization (e.g., publication_category_level_1, publication_type).', 'suggested_governance': 'Create a `DIM_publication_category` table to manage these mappings and join to it. This will centralize business logic and reduce query complexity.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['48'], 'context': ""Magic number '48' used in calculations for `clmn38_` (divisor for volume) and `clmn45_` (week to month mapping). This is highly ambiguous and likely a bug or placeholder."", 'suggested_governance': ""Clarify the intent of this number. If it's a fiscal week/month, use the actual `fy_year_week_number` or `fy_month_of_year` column. If it's a fixed constant, parameterize it with a clear name."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'2'""], 'context': ""Magic string '2' used in `CASE WHEN ('2' = '1') THEN ...` to select a specific volume type (always `clmn51_`). This implies a hardcoded selection of 'Actual' or 'Forecast' based on other conditions."", 'suggested_governance': 'Replace with a clear parameter (e.g., `selected_volume_type`) or a more explicit `CASE WHEN` that directly references the desired volume column based on business logic.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters (e.g., `start_date`, `end_date`) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 WEEK)`).', 'Replace hardcoded fiscal year (`FY2025`) with a dynamic parameter or a derived value from a fiscal calendar table.', 'Externalize publication categorization logic into a dedicated dimension table (`DIM_publication_category`) to avoid complex, repetitive `CASE WHEN` statements in queries.', ""Parameterize key filters like `os_level_6` ('CIRCULATION') if the dashboard needs to support other business areas."", ""Clarify and parameterize the 'magic numbers' (e.g., `48`) and 'magic strings' (e.g., `'2'`) used in calculations to improve readability and maintainability.""]",19,2104a3f5-9424-4087-a928-e67fecae789a
"-- This is the main SQL to run for comprehensive portfolio performance analysis.
-- It calculates all key metrics and dimensions identified from the dashboard queries.
-- Parameters:
--   @reporting_mth: Integer, 0 for current/previous FY month, or specific financial month (e.g., 7 for July). Default to 0.
--   @customer_retention_type: String, '1' to force 'All' customer status, or any other value for detailed status. Default to '0'.
--   @gsd_filter: String, comma-separated list of GSD names (e.g., 'DESIREE DURRANT', 'CHRIS JEFFS'). Set to '%' for all. Default to '%'.
--   @revenue_type_exclude_filter: String, comma-separated list of revenue types to exclude (e.g., 'PRINT'). Set to '%' for none. Default to '%'.

WITH
  base_data AS (
    SELECT
      t0.GSD,
      t0.gross_revenue_amount,
      t0.relative_fy_quarter_offset,
      t0.relative_fy_year_offset,
      t0.target,
      t0.financial_month,
      t0.financial_quarter,
      t0.relative_fy_month_offset,
      t0.advertiser_group,
      t0.portfolio_conformed_name_sync,
      t0.fin_adtype_name,
      t0.product_group,
      t0.revenue_type,
      t0.sales_segment_gm_name_sync,
      -- Derived fields from original CTE
      CASE
        WHEN COALESCE(@reporting_mth, 0) = 0 THEN
          CASE
            WHEN t0.relative_fy_month_offset = 0 OR t0.relative_fy_month_offset = -12 THEN CAST(t0.financial_month AS INT)
          END
        ELSE COALESCE(@reporting_mth, 0)
      END AS filter_reporting_month,
      SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) OVER (PARTITION BY t0.advertiser_group) AS fix_ly_lgr,
      SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) OVER (PARTITION BY t0.advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance AS t0
    WHERE
      -- Apply a reasonable date filter for performance and cost optimization
      -- Assuming 'relative_fy_year_offset' covers relevant periods
      t0.relative_fy_year_offset IN (0, -1) -- Current and Previous Fiscal Year
  ),
  calculated_metrics AS (
    SELECT
      GSD,
      gross_revenue_amount,
      relative_fy_quarter_offset,
      relative_fy_year_offset,
      target,
      financial_month,
      financial_quarter,
      relative_fy_month_offset,
      advertiser_group,
      portfolio_conformed_name_sync,
      fin_adtype_name,
      product_group,
      revenue_type,
      sales_segment_gm_name_sync,
      filter_reporting_month,
      fix_ly_lgr,
      fix_ty_lgr,
      -- Derived dimensions/metrics
      MAX(
        CASE
          WHEN filter_reporting_month = CAST(financial_month AS INT) THEN financial_quarter
          WHEN COALESCE(@reporting_mth, 0) = 0 THEN `IF`(relative_fy_quarter_offset = 0, financial_quarter, null)
          ELSE NULL
        END) OVER (PARTITION BY filter_reporting_month) AS report_quarter,
      CASE
        WHEN COALESCE(@customer_retention_type, '0') = '1' THEN 'All'
        ELSE
          CASE
            WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
            WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
            WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
            WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
            ELSE 'Other'
          END
      END AS customer_status_full,
      SUM(gross_revenue_amount / 1000) OVER (PARTITION BY portfolio_conformed_name_sync) AS portfolio_gross_revenue_000s,
      SUM(IF(relative_fy_year_offset = 0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) AS portfolio_current_fy_target,
      SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_amount_000s,
      SAFE_DIVIDE(target, 1000) AS target_amount_000s,
      CASE WHEN (relative_fy_year_offset = 0 AND relative_fy_quarter_offset = 0) THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE NULL END AS current_fy_qtr_gross_revenue_000s_detail,
      CASE WHEN (relative_fy_year_offset = -1 AND relative_fy_quarter_offset = -4) THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE NULL END AS previous_fy_qtr_gross_revenue_000s_detail,
      CASE WHEN (relative_fy_quarter_offset = 0) THEN SAFE_DIVIDE(target, 1000) ELSE NULL END AS current_fy_qtr_target_000s_detail,
      CASE
        WHEN product_group = 'The Australian & Prestige' THEN 1
        WHEN product_group = 'State & Communities' THEN 2
        WHEN product_group = 'Free News & Lifestyle' THEN 3
        WHEN product_group = 'Client' THEN 4
        WHEN product_group = 'Commercial Content' THEN 5
        WHEN product_group = 'Group Functions' THEN 6
        WHEN product_group = 'Others' THEN 7
        WHEN product_group = 'Unknown' THEN 8
        ELSE 9
      END AS product_group_order,
      CASE WHEN fin_adtype_name = 'XTEND' THEN 'XTEND' ELSE revenue_type END AS revenue_type_category
    FROM
      base_data
  )
SELECT
  GSD,
  financial_month,
  financial_quarter,
  relative_fy_quarter_offset,
  relative_fy_year_offset,
  advertiser_group,
  portfolio_conformed_name_sync,
  fin_adtype_name,
  product_group,
  revenue_type,
  sales_segment_gm_name_sync,
  filter_reporting_month,
  report_quarter,
  customer_status_full,
  CASE
    WHEN portfolio_gross_revenue_000s > 0.01 OR portfolio_gross_revenue_000s < -0.01 OR portfolio_current_fy_target != 0 THEN 'include'
    ELSE 'exclude'
  END AS blank_portfolio_flag,
  product_group_order,
  revenue_type_category,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(target) AS total_target_amount,
  SUM(gross_revenue_amount_000s) AS total_gross_revenue_amount_000s,
  SUM(target_amount_000s) AS total_target_amount_000s,
  SUM(current_fy_qtr_gross_revenue_000s_detail) AS current_fy_qtr_gross_revenue_000s_sum,
  SUM(previous_fy_qtr_gross_revenue_000s_detail) AS previous_fy_qtr_gross_revenue_000s_sum,
  SUM(current_fy_qtr_target_000s_detail) AS current_fy_qtr_target_000s_sum,
  COUNT(product_group_order) AS product_group_count,
  SUM(product_group_order) AS product_group_sum_order
FROM
  calculated_metrics
WHERE
  (COALESCE(@gsd_filter, '%') = '%' OR GSD IN UNNEST(SPLIT(COALESCE(@gsd_filter, '%'), ',')))
  AND (COALESCE(@revenue_type_exclude_filter, '%') = '%' OR revenue_type_category NOT IN UNNEST(SPLIT(COALESCE(@revenue_type_exclude_filter, '%'), ',')))
GROUP BY
  GSD,
  financial_month,
  financial_quarter,
  relative_fy_quarter_offset,
  relative_fy_year_offset,
  advertiser_group,
  portfolio_conformed_name_sync,
  fin_adtype_name,
  product_group,
  revenue_type,
  sales_segment_gm_name_sync,
  filter_reporting_month,
  report_quarter,
  customer_status_full,
  blank_portfolio_flag,
  product_group_order,
  revenue_type_category
LIMIT 1000; -- Add a limit for sampling","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_month) as unique_financial_months,
  COUNT(DISTINCT financial_quarter) as unique_financial_quarters,
  COUNT(DISTINCT relative_fy_year_offset) as unique_fy_year_offsets,
  COUNT(DISTINCT GSD) as unique_gsds,
  COUNT(DISTINCT advertiser_group) as unique_advertiser_groups,
  COUNT(DISTINCT portfolio_conformed_name_sync) as unique_portfolios,
  MIN(relative_fy_year_offset) as earliest_fy_year_offset,
  MAX(relative_fy_year_offset) as latest_fy_year_offset,
  MIN(financial_month) as earliest_financial_month,
  MAX(financial_month) as latest_financial_month,
  SUM(gross_revenue_amount) as total_gross_revenue_sample
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  relative_fy_year_offset IN (0, -1) -- Focus on recent fiscal years
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_group) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_group_test,
  CASE WHEN MAX(relative_fy_year_offset) = 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_data_freshness_test,
  CASE WHEN MIN(relative_fy_year_offset) <= -1 THEN 'PASS' ELSE 'FAIL' END as historical_fy_data_presence_test
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  relative_fy_year_offset IN (0, -1) -- Check current and previous FY
LIMIT 1;","-- Validate customer status full logic
WITH
  base_data AS (
    SELECT
      advertiser_group,
      SUM(CASE WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount ELSE 0 END) AS fix_ly_lgr,
      SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
    WHERE
      relative_fy_year_offset IN (0, -1)
    GROUP BY
      advertiser_group
  )
SELECT
  'Customer Status Full Validation' as validation_type,
  'NEW BUSINESS Rule' as rule_name,
  COUNT(*) as total_advertisers,
  SUM(CASE WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 1 ELSE 0 END) as new_business_count,
  SAFE_DIVIDE(SUM(CASE WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 1 ELSE 0 END), COUNT(*)) * 100 as new_business_percentage
FROM
  base_data
UNION ALL
SELECT
  'Customer Status Full Validation' as validation_type,
  'RETAINED Rule' as rule_name,
  COUNT(*) as total_advertisers,
  SUM(CASE WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 1 ELSE 0 END) as retained_count,
  SAFE_DIVIDE(SUM(CASE WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 1 ELSE 0 END), COUNT(*)) * 100 as retained_percentage
FROM
  base_data
UNION ALL
SELECT
  'Customer Status Full Validation' as validation_type,
  'INACTIVE Rule' as rule_name,
  COUNT(*) as total_advertisers,
  SUM(CASE WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 1 ELSE 0 END) as inactive_count,
  SAFE_DIVIDE(SUM(CASE WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 1 ELSE 0 END), COUNT(*)) * 100 as inactive_percentage
FROM
  base_data
UNION ALL
SELECT
  'Customer Status Full Validation' as validation_type,
  'LAPSED Rule' as rule_name,
  COUNT(*) as total_advertisers,
  SUM(CASE WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 1 ELSE 0 END) as lapsed_count,
  SAFE_DIVIDE(SUM(CASE WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 1 ELSE 0 END), COUNT(*)) * 100 as lapsed_percentage
FROM
  base_data;","SELECT 
  GSD,
  gross_revenue_amount,
  target,
  relative_fy_quarter_offset,
  relative_fy_year_offset,
  financial_month,
  financial_quarter,
  relative_fy_month_offset,
  advertiser_group,
  portfolio_conformed_name_sync,
  fin_adtype_name,
  product_group,
  revenue_type,
  sales_segment_gm_name_sync
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  relative_fy_year_offset IN (0, -1) -- Current and Previous Fiscal Year
ORDER BY
  gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'$\\'000' = '$'""], 'context': ""Conditional logic for revenue/target formatting, which is always false due to string comparison. This makes the 'THEN' branch unreachable."", 'suggested_governance': 'Remove dead code or parameterize formatting preference if dynamic formatting is truly needed.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'thresholds', 'hardcoded_values': ['0.01', '-0.01', '0'], 'context': ""Thresholds used to determine 'blank_portfolio_flag' based on scaled gross revenue and target."", 'suggested_governance': 'Parameterize these thresholds for flexibility and easier adjustment by business users.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'NEW BUSINESS'"", ""'RETAINED'"", ""'INACTIVE'"", ""'LAPSED'"", ""'Other'"", ""'All'""], 'context': 'Customer status categories derived from revenue performance (fix_ly_lgr, fix_ty_lgr).', 'suggested_governance': 'Store these categories and their definitions (including thresholds) in a governed reference table to centralize business logic.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'The Australian & Prestige'"", ""'State & Communities'"", ""'Free News & Lifestyle'"", ""'Client'"", ""'Commercial Content'"", ""'Group Functions'"", ""'Others'"", ""'Unknown'""], 'context': 'Product group categories and their hardcoded numerical ordering.', 'suggested_governance': 'Store product group definitions and their display order in a reference table, allowing for easier updates and consistent application.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'XTEND'""], 'context': ""Specific ad type used for categorization within 'revenue_type_category'."", 'suggested_governance': ""If 'XTEND' is a specific type, it should be part of a `fin_adtype_name` lookup table to ensure consistency and manageability."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PRINT'""], 'context': 'Specific revenue type used for filtering in one of the queries.', 'suggested_governance': ""If 'PRINT' is a specific type, it should be part of a `revenue_type` lookup table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '-1', '-12', '-4'], 'context': 'Relative fiscal year/month/quarter offsets used for current/previous period calculations. These define the reporting window.', 'suggested_governance': 'Use dynamic date logic (e.g., `CURRENT_DATE()`, `DATE_TRUNC`) or parameterize fiscal period definitions to make the dashboard adaptable to different reporting periods.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DESIREE DURRANT'"", ""'CHRIS JEFFS'""], 'context': 'Specific GSD names used for filtering data in individual queries.', 'suggested_governance': 'Parameterize GSD names for filtering or use a GSD dimension table for dynamic selection, avoiding hardcoded lists.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'parameters', 'hardcoded_values': [""'1'""], 'context': ""Hardcoded value for `@customer_retention_type` parameter, which forces 'All' customer status, overriding detailed logic."", 'suggested_governance': ""Ensure parameter is correctly configured in Looker Studio to allow user selection, or remove the hardcoded default if it's not intended to force 'All'."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['1000'], 'context': ""Scaling factor used to convert amounts to '000s."", 'suggested_governance': 'Parameterize the scaling factor if it might change or if different scales are needed.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded relative fiscal period offsets with dynamic date parameters (e.g., `reporting_fiscal_month`, `reporting_fiscal_year`) or relative date functions based on `CURRENT_DATE()`.', 'Replace hardcoded lookup values (customer status, product groups, revenue types, GSD names) with joins to governed reference tables.', 'Use configuration tables or Looker Studio parameters for business rule thresholds (e.g., `blank_portfolio_flag_threshold`, `customer_retention_revenue_threshold`).']",20,155c4518-72bf-4309-a0e9-240dd564f421
"WITH base_adsales AS (
  SELECT
    t0.financial_year,
    t0.financial_short_month,
    t0.cost_model_type,
    t0.advertiser_name,
    t0.gross_revenue_amount,
    t0.revenue_group_subtype,
    t0.revenue_type_level2,
    t0.source_system_code,
    t0.source_publishing_division,
    t0.revenue_transaction_status
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    -- Parameterize financial_year instead of hardcoding '2025'
    AND t0.financial_year = '2025' -- Example: Use a parameter like @financial_year
)
SELECT
  base.financial_year,
  base.financial_short_month,
  base.cost_model_type,
  base.advertiser_name,
  base.revenue_group_subtype,
  base.revenue_type_level2,
  base.source_system_code,
  SUM(CASE
    WHEN base.revenue_type_level2 = 'Programmatic'
    AND base.revenue_group_subtype IN ('Programmatic Source', 'Digital')
    AND base.advertiser_name = 'Foxtel Management Pty Ltd'
    AND base.source_system_code = 'PLUTO'
    THEN base.gross_revenue_amount
    ELSE 0
  END) AS programmatic_gross_revenue,
  SUM(base.gross_revenue_amount) AS total_gross_revenue_for_filtered_data
FROM base_adsales AS base
GROUP BY
  base.financial_year,
  base.financial_short_month,
  base.cost_model_type,
  base.advertiser_name,
  base.revenue_group_subtype,
  base.revenue_type_level2,
  base.source_system_code
ORDER BY
  base.financial_year DESC,
  base.financial_short_month DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.financial_year) as unique_financial_years,
  COUNT(DISTINCT t0.financial_short_month) as unique_financial_months,
  COUNT(DISTINCT t0.advertiser_name) as unique_advertisers,
  COUNT(DISTINCT t0.source_publishing_division) as unique_publishing_divisions,
  COUNT(DISTINCT t0.revenue_transaction_status) as unique_transaction_statuses,
  COUNT(DISTINCT t0.cost_model_type) as unique_cost_model_types,
  MIN(t0.data_load_datetime) as earliest_data_load_datetime,
  MAX(t0.data_load_datetime) as latest_data_load_datetime,
  APPROX_COUNT_DISTINCT(t0.data_load_datetime) as approx_unique_data_load_datetimes,
  APPROX_COUNT_DISTINCT(t0.gross_revenue_amount) as approx_unique_gross_revenue_amounts
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.financial_year = '2025'
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(t0.gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_count_test,
  CASE WHEN MAX(t0.data_load_datetime) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNTIF(t0.financial_year = '2025') > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_2025_data_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.financial_year = '2025'
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Exclude Medium Rare Content Agency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.financial_year = '2025'
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Billed/Booked' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.financial_year = '2025'
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'Programmatic Revenue Type Level 2' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.revenue_type_level2 = 'Programmatic' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_type_level2 = 'Programmatic' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE t0.financial_year = '2025' AND t0.revenue_type_level2 IS NOT NULL;","SELECT 
  t0.data_load_datetime,
  t0.financial_short_month,
  t0.financial_year,
  t0.revenue_transaction_status,
  t0.source_publishing_division,
  t0.cost_model_type,
  t0.advertiser_name,
  t0.gross_revenue_amount,
  t0.revenue_group_subtype,
  t0.revenue_type_level2,
  t0.source_system_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  t0.financial_year = '2025'
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY t0.data_load_datetime DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'financial_year filter across all queries', 'suggested_fix': 'replace with CURRENT_DATE() based year or parameter', 'impact': 'high', 'urgency': 'high'}, {'date_value': 'Oct', 'original_format': 'Oct', 'context': 'financial_short_month filter in one query', 'suggested_fix': 'replace with CURRENT_DATE() based month or parameter', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'exclusion filter for source_publishing_division', 'suggested_governance': 'use a configurable exclusion list or join to a reference table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Billed'"", ""'Booked'""], 'context': 'inclusion filter for revenue_transaction_status', 'suggested_governance': 'join to a reference table for transaction statuses', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic'""], 'context': 'inclusion filter for revenue_type_level2', 'suggested_governance': 'join to a reference table for revenue types', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic Source'"", ""'Digital'""], 'context': 'inclusion filter for revenue_group_subtype', 'suggested_governance': 'join to a reference table for revenue group subtypes', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Foxtel Management Pty Ltd'""], 'context': 'inclusion filter for advertiser_name', 'suggested_governance': 'parameterize or join to a reference table for advertisers', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'""], 'context': 'inclusion filter for source_system_code', 'suggested_governance': 'join to a reference table for source systems', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded financial year and month with date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`).', ""Replace hardcoded lookup values (e.g., 'Medium Rare Content Agency', 'Foxtel Management Pty Ltd', 'Programmatic') with joins to governed reference tables or dashboard parameters."", 'Consider using configuration tables for business rules (e.g., exclusion lists) instead of hardcoded logic in queries.']",22,705edcb5-737a-4600-b1a7-11870177f97a
"-- THIS IS THE MAIN SQL TO RUN for unified dimension analysis
-- This query combines the logic from the provided SQLs to show all relevant dimensions and derived categories.
-- Note: The provided SQLs primarily extract distinct dimension values for filters/lists, not aggregate business metrics (e.g., revenue).
-- If actual performance metrics are needed, they would need to be added from the 'adsales_performance' table.
WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    t0.revenue_type,
    t0.xtend_flag,
    t0.dw_asl_load_timestamp,
    -- Intermediate derived revenue type (clmn4_ equivalent from Query 2)
    CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END AS derived_revenue_type_intermediate,
    -- Final calculated revenue type (clmn5_ equivalent from Query 2)
    CASE
      WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)'
      WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'PRINT') THEN 'PRINT'
      WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'XTEND') THEN 'XTEND ONLY'
      ELSE NULL
    END AS calculated_revenue_type
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Apply common financial year filter from both queries
  WHERE t0.financial_year IN ('2024', '2025')
)
SELECT
  financial_year,
  unified_publication_name,
  revenue_group_subtype,
  revenue_type,
  xtend_flag,
  derived_revenue_type_intermediate,
  calculated_revenue_type,
  COUNT(*) AS record_count, -- Count of records for these dimension combinations
  MIN(dw_asl_load_timestamp) AS earliest_load_timestamp -- Minimum load timestamp for data freshness
FROM base_data
WHERE
  -- Apply specific filters from Query 1 and Query 2, combined with OR as they are for different outputs
  (revenue_group_subtype IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE')
  OR calculated_revenue_type IN ('digital')) -- Note: 'digital' is lowercase in the original filter
GROUP BY
  financial_year,
  unified_publication_name,
  revenue_group_subtype,
  revenue_type,
  xtend_flag,
  derived_revenue_type_intermediate,
  calculated_revenue_type
ORDER BY
  financial_year DESC, unified_publication_name ASC
LIMIT 100;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT financial_year) AS unique_financial_years,
  COUNT(DISTINCT unified_publication_name) AS unique_publications,
  COUNT(DISTINCT revenue_group_subtype) AS unique_revenue_subtypes,
  COUNT(DISTINCT revenue_type) AS unique_revenue_types,
  MIN(financial_year) AS earliest_financial_year,
  MAX(financial_year) AS latest_financial_year,
  MIN(dw_asl_load_timestamp) AS earliest_load_timestamp,
  MAX(dw_asl_load_timestamp) AS latest_load_timestamp
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_year >= '2023' -- Sample recent data
LIMIT 1;","-- Quick validation that all metric calculations work syntactically and return expected values
WITH validation_data AS (
  SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    t0.revenue_type,
    t0.xtend_flag,
    t0.dw_asl_load_timestamp,
    CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END AS derived_revenue_type_intermediate,
    CASE
      WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)'
      WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'PRINT') THEN 'PRINT'
      WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'XTEND') THEN 'XTEND ONLY'
      ELSE NULL
    END AS calculated_revenue_type
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE t0.financial_year IN ('2024', '2025')
)
SELECT
  'Validation Check' AS test_type,
  COUNT(*) AS total_records_processed,
  COUNT(DISTINCT unified_publication_name) AS distinct_publications_count,
  COUNT(DISTINCT revenue_group_subtype) AS distinct_revenue_subtypes_count,
  COUNT(DISTINCT calculated_revenue_type) AS distinct_calculated_revenue_types_count,
  MIN(dw_asl_load_timestamp) AS min_load_timestamp_check,
  MAX(dw_asl_load_timestamp) AS max_load_timestamp_check,
  SUM(CASE WHEN calculated_revenue_type IS NULL THEN 1 ELSE 0 END) AS null_calculated_revenue_types
FROM validation_data
WHERE (revenue_group_subtype IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE') OR calculated_revenue_type IN ('digital'))
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' AS validation_type,
  'XTEND Flag Logic' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN xtend_flag = 'Y' AND (CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END) = 'XTEND' THEN 1 ELSE 0 END) AS records_matching_xtend_logic,
  SUM(CASE WHEN xtend_flag != 'Y' AND (CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END) = revenue_type THEN 1 ELSE 0 END) AS records_matching_non_xtend_logic,
  SUM(CASE WHEN calculated_revenue_type = 'DIGITAL (excl.XTEND)' AND (CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END) = 'DIGITAL' THEN 1 ELSE 0 END) AS digital_excl_xtend_matches,
  SUM(CASE WHEN calculated_revenue_type = 'XTEND ONLY' AND (CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END) = 'XTEND' THEN 1 ELSE 0 END) AS xtend_only_matches,
  SUM(CASE WHEN calculated_revenue_type = 'PRINT' AND (CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END) = 'PRINT' THEN 1 ELSE 0 END) AS print_matches,
  SUM(CASE WHEN calculated_revenue_type IS NULL THEN 1 ELSE 0 END) AS null_calculated_types_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_year IN ('2024', '2025')
LIMIT 1;","-- Query to get representative sample data for further analysis
SELECT
  financial_year,
  revenue_group_subtype,
  unified_publication_name,
  revenue_type,
  xtend_flag,
  dw_asl_load_timestamp,
  CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS derived_revenue_type_intermediate,
  CASE
    WHEN (CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)'
    WHEN (CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END = 'PRINT') THEN 'PRINT'
    WHEN (CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END = 'XTEND') THEN 'XTEND ONLY'
    ELSE NULL
  END AS calculated_revenue_type
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_year IN ('2024', '2025')
ORDER BY dw_asl_load_timestamp DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2024', 'original_format': '2024', 'context': 'financial_year filter in multiple queries', 'suggested_fix': 'replace with parameter or relative date logic (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`)', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025', 'original_format': '2025', 'context': 'financial_year filter in multiple queries', 'suggested_fix': 'replace with parameter or relative date logic (e.g., `EXTRACT(YEAR FROM CURRENT_DATE()) + 1`)', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'DIGITAL'"", ""'PROGRAMMATIC EXCHANGE'"", ""'PROGRAMMATIC SOURCE'""], 'context': 'revenue_group_subtype filter in Query 1', 'suggested_governance': 'join to a `revenue_group_subtype_lookup` table or use a parameter list', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Y'""], 'context': 'xtend_flag check in derived revenue type calculation', 'suggested_governance': 'define XTEND flag values in a configuration table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'XTEND'"", ""'DIGITAL'"", ""'PRINT'"", ""'DIGITAL (excl.XTEND)'"", ""'XTEND ONLY'""], 'context': 'derived and calculated revenue type categories in CASE statements', 'suggested_governance': 'use a `revenue_category_mapping` lookup table or externalize this logic', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'digital'""], 'context': ""filter value for calculated_revenue_type in Query 2 (note case mismatch with 'DIGITAL')"", 'suggested_governance': 'ensure consistent casing or use `LOWER()`/`UPPER()` for comparison; use a lookup table for filter values', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded financial years ('2024', '2025') with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`)."", 'Replace hardcoded lookup values for `revenue_group_subtype` and derived revenue categories with joins to governed reference tables.', 'Externalize complex `CASE` statement logic for revenue categorization into a UDF or a configuration table for easier maintenance and consistency.']",23,61f1feb4-fc3e-4bee-b987-84c86cfe6425
"-- This is the main SQL to run for the core account mapping data.
-- The 'Last Update Time' is a separate metadata query and not combined here.
SELECT
  t0.Adpoint_Account,
  t0.Genera_Booking_Account,
  t0.Medium_Rare_Debtor_Account,
  t0.National_Debtor_Account
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0
WHERE
  -- This filter was hardcoded in one of the original queries.
  -- It should be replaced with a Looker Studio parameter (e.g., @adpoint_account_param)
  -- Example: (t0.Adpoint_Account = @adpoint_account_param OR @adpoint_account_param IS NULL)
  (t0.Adpoint_Account = '56694' OR '56694' IS NULL) -- Placeholder for parameterization
GROUP BY
  t0.Adpoint_Account,
  t0.Genera_Booking_Account,
  t0.Medium_Rare_Debtor_Account,
  t0.National_Debtor_Account
ORDER BY
  t0.Adpoint_Account ASC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT Adpoint_Account) as unique_adpoint_accounts,
  COUNT(DISTINCT Genera_Booking_Account) as unique_genera_accounts,
  COUNT(DISTINCT Medium_Rare_Debtor_Account) as unique_mr_debtor_accounts,
  COUNT(DISTINCT National_Debtor_Account) as unique_national_debtor_accounts
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as record_count_test,
  CASE WHEN COUNT(DISTINCT Adpoint_Account) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_adpoint_account_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Adpoint Account 56694 Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN Adpoint_Account = '56694' THEN 1 ELSE 0 END) as records_matching_filter,
  SAFE_DIVIDE(SUM(CASE WHEN Adpoint_Account = '56694' THEN 1 ELSE 0 END), COUNT(*)) * 100 as match_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1000;","SELECT
  Adpoint_Account,
  Genera_Booking_Account,
  Medium_Rare_Debtor_Account,
  National_Debtor_Account
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'date_value': None, 'original_format': None, 'variable_type': 'lookup_codes', 'hardcoded_values': [""'56694'""], 'context': 'Adpoint_Account filter value in WHERE clause', 'suggested_governance': 'replace with Looker Studio parameter for user selection', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'date_value': None, 'original_format': None, 'variable_type': 'other', 'hardcoded_values': ['""Australia/Sydney""'], 'context': 'Timezone for last_update_time calculation', 'suggested_governance': 'Consider if this should be configurable or derived from a central configuration, but often fixed for reporting.', 'impact': 'low', 'maintenance_risk': 'low'}, {'date_value': None, 'original_format': None, 'variable_type': 'other', 'hardcoded_values': ['""gbaba_act_xref""'], 'context': 'Table ID filter in BigQuery metadata query for last_update_time', 'suggested_governance': ""This is specific to the metadata query's purpose; generally not a governance issue for business logic."", 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded Adpoint_Account filter value ('56694') with a Looker Studio parameter to allow dynamic filtering by users.""]",24,258a722d-9b6e-45df-ba00-1b9954ec36b2
"WITH base_data AS (
  SELECT
    t0.gross_revenue_amount,
    t0.product_group,
    t0.relative_fy_year_offset,
    t0.revenue_type,
    t0.unified_publication_name,
    t0.dw_asl_load_timestamp
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  LIMIT 100000 -- Sample for analysis
),
aggregated_metrics AS (
  SELECT
    product_group,
    revenue_type,
    unified_publication_name,
    CASE
      WHEN unified_publication_name IN (
        'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
        'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
        'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au',
        'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin',
        'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times',
        'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
      ) THEN 'Sundry Pubs'
      ELSE 'Non Sundry Pubs'
    END AS publication_category,
    SUM(CASE WHEN relative_fy_year_offset = 0 AND product_group = 'The Australian & Prestige' THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE 0 END) AS current_fy_gross_revenue_k_aud,
    SUM(CASE WHEN relative_fy_year_offset = 1 AND product_group = 'The Australian & Prestige' THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE 0 END) AS previous_fy_gross_revenue_k_aud
  FROM base_data
  GROUP BY
    product_group,
    revenue_type,
    unified_publication_name
),
global_metrics AS (
  SELECT
    MIN(DATETIME_TRUNC(dw_asl_load_timestamp, SECOND)) AS earliest_data_load_timestamp
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
)
SELECT
  am.product_group,
  am.revenue_type,
  am.unified_publication_name,
  am.publication_category,
  am.current_fy_gross_revenue_k_aud,
  am.previous_fy_gross_revenue_k_aud,
  gm.earliest_data_load_timestamp
FROM aggregated_metrics am
CROSS JOIN global_metrics gm
WHERE am.product_group IN ('The Australian & Prestige')
ORDER BY am.product_group, am.revenue_type, am.unified_publication_name
LIMIT 100;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT product_group) as unique_product_groups,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  COUNT(DISTINCT unified_publication_name) as unique_publication_names,
  COUNT(DISTINCT relative_fy_year_offset) as unique_fy_offsets,
  MIN(dw_asl_load_timestamp) as earliest_load_timestamp,
  MAX(dw_asl_load_timestamp) as latest_load_timestamp
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE dw_asl_load_timestamp >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 90 DAY)
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT product_group) > 0 THEN 'PASS' ELSE 'FAIL' END as product_group_test,
  CASE WHEN MAX(dw_asl_load_timestamp) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE dw_asl_load_timestamp >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Sundry Pubs Categorization' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN unified_publication_name IN (
        'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
        'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
        'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au',
        'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin',
        'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times',
        'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
      ) THEN 1 ELSE 0 END) as records_categorized_as_sundry,
  SAFE_DIVIDE(SUM(CASE WHEN unified_publication_name IN (
        'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
        'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
        'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au',
        'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin',
        'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times',
        'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
      ) THEN 1 ELSE 0 END), COUNT(*)) * 100 as sundry_category_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE dw_asl_load_timestamp >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 90 DAY)
LIMIT 1000;","SELECT 
  gross_revenue_amount,
  product_group,
  relative_fy_year_offset,
  revenue_type,
  unified_publication_name,
  dw_asl_load_timestamp
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE dw_asl_load_timestamp >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 14 DAY)
ORDER BY dw_asl_load_timestamp DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['0', '1'], 'context': 'relative_fy_year_offset values used to identify current and previous fiscal years.', 'suggested_governance': 'Define fiscal year logic in a date dimension table or use parameters for dynamic FY selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['1000'], 'context': 'Scaling factor for gross revenue amount (converting to thousands).', 'suggested_governance': 'Parameterize the scaling factor or store in a configuration table if it might change.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Australian & Prestige'"", ""'PRINT'"", ""'GQ Mag'""], 'context': 'Specific product group, revenue type, and unified publication name used as filters.', 'suggested_governance': 'Parameterize these filter values in Looker Studio or use a lookup table for product/publication details.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Admin.ADV'"", ""'Admin.DTM'"", ""'Admin.HWT'"", ""'Admin.International'"", ""'Admin.Sales'"", ""'Admin.Sport'"", ""'Admin.TCM'"", ""'Bestrecipes.Admin'"", ""'Bodyandsoul.Admin'"", ""'CODE'"", ""'CodeBet'"", ""'Delicious.admin'"", ""'Escape.Admin'"", ""'GQ.Admin'"", ""'Kidspot.Admin'"", ""'National Sundry'"", ""'National Tabloid PrePrint'"", ""'News.Admin'"", ""'odds.com.au'"", ""'Punters.com.au'"", ""'Qantas Travel Insider'"", ""'RACENET'"", ""'Shortlyster Managed Service'"", ""'Sky News'"", ""'SKYNEWS.ADMIN'"", ""'Stellar.Admin'"", ""'Stockhead'"", ""'SUDDENLY.CW'"", ""'SUDDENLY.NORTH'"", ""'SUDDENLY.TGG'"", ""'Taste.Admin'"", ""'TAUS.ADMIN'"", ""'The Sunday Times'"", ""'TOOWOOMBACUSTOM'"", ""'Vogue.Admin'"", ""'Vogueliving.Admin'""], 'context': ""Extensive list of unified_publication_name values used to categorize 'Sundry Pubs'."", 'suggested_governance': 'Create a `publication_master` or `publication_category_lookup` table with `unified_publication_name` and `publication_category` columns, then join to this table.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded relative fiscal year offsets (0, 1) with dynamic calculations based on current date and fiscal year definitions, or Looker Studio parameters.', 'Replace hardcoded scaling factors (1000) with Looker Studio parameters or a configuration table.', 'Replace hardcoded filter values for product_group, revenue_type, and unified_publication_name with Looker Studio parameters.', ""Replace hardcoded lists for categorization (e.g., 'Sundry Pubs') with joins to governed reference tables.""]",25,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
"WITH base_data AS (
  SELECT
    t0.Advertiser,
    t0.TransactionType,
    t0.Source,
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS month_start_date,
    t0.PaidImpressions,
    t0.RevenueGross
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
  WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH)
)
SELECT
  Advertiser,
  TransactionType,
  Source,
  month_start_date,
  SUM(PaidImpressions) AS total_paid_impressions,
  SUM(RevenueGross) AS total_gross_revenue
FROM base_data
GROUP BY
  Advertiser,
  TransactionType,
  Source,
  month_start_date
ORDER BY
  month_start_date DESC, Advertiser, TransactionType, Source
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.Advertiser) as unique_advertisers,
  COUNT(DISTINCT t0.TransactionType) as unique_transaction_types,
  COUNT(DISTINCT t0.Source) as unique_sources,
  COUNT(DISTINCT SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE)) as unique_month_start_dates,
  MIN(SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE)) as earliest_month_start_date,
  MAX(SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE)) as latest_month_start_date,
  SUM(CASE WHEN t0.PaidImpressions IS NULL THEN 1 ELSE 0 END) as null_paid_impressions_count,
  SUM(CASE WHEN t0.RevenueGross IS NULL THEN 1 ELSE 0 END) as null_revenue_gross_count
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(t0.RevenueGross) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN SUM(t0.PaidImpressions) > 0 THEN 'PASS' ELSE 'FAIL' END as impressions_positive_test,
  CASE WHEN COUNT(DISTINCT t0.Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_present_test,
  CASE WHEN MAX(SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Guaranteed Transaction Type Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.TransactionType = 'Guaranteed' THEN 1 ELSE 0 END) as records_matching_guaranteed,
  SAFE_DIVIDE(SUM(CASE WHEN t0.TransactionType = 'Guaranteed' THEN 1 ELSE 0 END), COUNT(*)) * 100 as guaranteed_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1;","SELECT
  t0.Advertiser,
  t0.TransactionType,
  t0.Source,
  t0.CalendarMonth,
  t0.CalendarYear,
  SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS month_start_date,
  t0.PaidImpressions,
  t0.RevenueGross
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
  AND t0.PaidImpressions IS NOT NULL
  AND t0.RevenueGross IS NOT NULL
ORDER BY month_start_date DESC, t0.Advertiser
LIMIT 500;","{'hardcoded_dates': [{'date_value': '01/06/2025', 'original_format': ""DATE '2025-06-01'"", 'context': 'used as a specific filter for Month Start Date', 'suggested_fix': 'replace with a Looker Studio date parameter or relative date function (e.g., DATE_TRUNC(CURRENT_DATE(), MONTH))', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Guaranteed'""], 'context': 'TransactionType filter', 'suggested_governance': 'Use a Looker Studio parameter for TransactionType or join to a transaction_type_lookup table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Chemist Warehouse *'""], 'context': 'Advertiser filter', 'suggested_governance': 'Use a Looker Studio parameter for Advertiser or join to an advertiser_master table.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions', 'Replace hardcoded lookup values for TransactionType with a parameter or join to a governed reference table', 'Replace hardcoded lookup values for Advertiser with a parameter or join to a governed reference table']",26,87651b69-c43e-471f-9c4b-98df1208a844
"WITH adex_data AS (
  SELECT *
  FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
),
adex_date_fact AS (
  SELECT
    Media_Type,
    portfolio_parent_group_name,
    date,
    DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
    DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
  FROM (
    SELECT DISTINCT
      Media_Type,
      portfolio_parent_group_name
    FROM
      adex_data
  )
  CROSS JOIN
  UNNEST(GENERATE_DATE_ARRAY((
      SELECT
        MIN(date)
      FROM
        adex_data
    ), (
      SELECT
        MAX(date)
      FROM
        adex_data
    ), INTERVAL 1 MONTH)) AS date
),
adex_full_date AS (
  SELECT
    adf.*,
    financial_year,
    Major_Category,
    Advertiser_Group___Advertiser,
    Advertiser,
    Media_Network,
    Media_Group,
    Ad_Type,
    Brand,
    Product,
    Category,
    Sub_Category,
    Spend,
    sales_segment_gm_name
  FROM
    adex_date_fact AS adf
    LEFT JOIN
    adex_data
    ON adf.date = adex_data.date
    AND adf.Media_Type = adex_data.Media_Type
    AND adf.portfolio_parent_group_name = adex_data.portfolio_parent_group_name
),
base_data AS (
  SELECT
    afd.*,
    FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
    CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
    SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
    (SELECT MAX(date) FROM adex_full_date) AS latest_date
  FROM
    adex_full_date AS afd
),
-- Define dynamic date ranges based on a reference date (e.g., latest_date or CURRENT_DATE())
-- For this analysis, we'll use the hardcoded values found to replicate the dashboard's current logic,
-- but note that these should be parameterized.
date_ranges AS (
  SELECT
    PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(SAFE.RIGHT('Aug 23', 2) AS STRING), '-',
      CASE SAFE.LEFT('Aug 23', 3) WHEN 'Jan' THEN 1 WHEN 'Feb' THEN 2 WHEN 'Mar' THEN 3 WHEN 'Apr' THEN 4 WHEN 'May' THEN 5 WHEN 'Jun' THEN 6 WHEN 'Jul' THEN 7 WHEN 'Aug' THEN 8 WHEN 'Sep' THEN 9 WHEN 'Oct' THEN 10 WHEN 'Nov' THEN 11 WHEN 'Dec' THEN 12 ELSE NULL END, '-1')) AS current_period_start_date,
    PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(SAFE.RIGHT('Jun 24', 2) AS STRING), '-',
      CASE SAFE.LEFT('Jun 24', 3) WHEN 'Jan' THEN 1 WHEN 'Feb' THEN 2 WHEN 'Mar' THEN 3 WHEN 'Apr' THEN 4 WHEN 'May' THEN 5 WHEN 'Jun' THEN 6 WHEN 'Jul' THEN 7 WHEN 'Aug' THEN 8 WHEN 'Sep' THEN 9 WHEN 'Oct' THEN 10 WHEN 'Nov' THEN 11 WHEN 'Dec' THEN 12 ELSE NULL END, '-1')) AS current_period_end_date
),
final_data AS (
  SELECT
    b.*,
    dr.current_period_start_date,
    dr.current_period_end_date,
    DATE_ADD(dr.current_period_start_date, INTERVAL -12 MONTH) AS previous_period_start_date,
    DATE_ADD(dr.current_period_end_date, INTERVAL -12 MONTH) AS previous_period_end_date
  FROM
    base_data b
    CROSS JOIN date_ranges dr
)
SELECT
  date AS date_monthly,
  Major_Category,
  Media_Network,
  Media_Group,
  Media_Type,
  CASE WHEN date >= current_period_start_date AND date <= current_period_end_date THEN TRUE ELSE FALSE END AS is_current_period_flag,
  CASE WHEN date >= previous_period_start_date AND date <= previous_period_end_date THEN TRUE ELSE FALSE END AS is_previous_year_period_flag,
  SUM(Spend) AS total_spend,
  SUM(CASE WHEN date >= current_period_start_date AND date <= current_period_end_date THEN Spend ELSE 0 END) AS spend_current_period,
  SUM(CASE WHEN date >= previous_period_start_date AND date <= previous_period_end_date THEN Spend ELSE 0 END) AS spend_previous_year_period,
  SUM(CASE WHEN date >= current_period_start_date AND date <= current_period_end_date AND Media_Network = 'NEWS CORP' THEN Spend ELSE 0 END) AS news_corp_spend_current_period,
  SUM(CASE WHEN date >= previous_period_start_date AND date <= previous_period_end_date AND Media_Network = 'NEWS CORP' THEN Spend ELSE 0 END) AS news_corp_spend_previous_year_period,
  SUM(CASE WHEN date >= current_period_start_date AND date <= current_period_end_date AND Major_Category = 'Retail' THEN Spend ELSE 0 END) AS retail_spend_current_period
FROM
  final_data
GROUP BY
  date,
  Major_Category,
  Media_Network,
  Media_Group,
  Media_Type,
  is_current_period_flag,
  is_previous_year_period_flag
ORDER BY
  date DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT date) as unique_dates,
  MIN(date) as earliest_date,
  MAX(date) as latest_date,
  COUNT(DISTINCT Major_Category) as unique_major_categories,
  COUNT(DISTINCT Media_Network) as unique_media_networks,
  COUNT(DISTINCT Media_Group) as unique_media_groups,
  COUNT(DISTINCT Media_Type) as unique_media_types,
  SUM(Spend) as total_spend_sum,
  AVG(Spend) as average_spend
FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH)
LIMIT 1;","WITH adex_data AS (
  SELECT *
  FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
)
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(Spend) > 0 THEN 'PASS' ELSE 'FAIL' END as total_spend_test,
  CASE WHEN COUNT(DISTINCT date) > 0 THEN 'PASS' ELSE 'FAIL' END as date_data_test,
  CASE WHEN MAX(date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(DISTINCT Media_Type) > 0 THEN 'PASS' ELSE 'FAIL' END as media_type_test
FROM
  adex_data
WHERE
  date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","WITH adex_data AS (
  SELECT *
  FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
)
SELECT
  'Business Rule Validation' as validation_type,
  'News Corp Spend Calculation' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN Media_Network = 'NEWS CORP' AND Spend IS NOT NULL THEN 1 ELSE 0 END) as news_corp_spend_records,
  SAFE_DIVIDE(SUM(CASE WHEN Media_Network = 'NEWS CORP' AND Spend IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as news_corp_spend_percentage
FROM
  adex_data
WHERE
  date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Retail Category Spend Calculation' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN Major_Category = 'Retail' AND Spend IS NOT NULL THEN 1 ELSE 0 END) as retail_spend_records,
  SAFE_DIVIDE(SUM(CASE WHEN Major_Category = 'Retail' AND Spend IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as retail_spend_percentage
FROM
  adex_data
WHERE
  date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","WITH adex_data AS (
  SELECT *
  FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
),
adex_date_fact AS (
  SELECT
    Media_Type,
    portfolio_parent_group_name,
    date,
    DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
    DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
  FROM (
    SELECT DISTINCT
      Media_Type,
      portfolio_parent_group_name
    FROM
      adex_data
  )
  CROSS JOIN
  UNNEST(GENERATE_DATE_ARRAY((
      SELECT
        MIN(date)
      FROM
        adex_data
    ), (
      SELECT
        MAX(date)
      FROM
        adex_data
    ), INTERVAL 1 MONTH)) AS date
),
adex_full_date AS (
  SELECT
    adf.*,
    financial_year,
    Major_Category,
    Advertiser_Group___Advertiser,
    Advertiser,
    Media_Network,
    Media_Group,
    Ad_Type,
    Brand,
    Product,
    Category,
    Sub_Category,
    account_number,
    portfolio_group_name,
    portfolio_conformed_name,
    Spend,
    sales_segment_gm_name
  FROM
    adex_date_fact AS adf
    LEFT JOIN
    adex_data
    ON adf.date = adex_data.date
    AND adf.Media_Type = adex_data.Media_Type
    AND adf.portfolio_parent_group_name = adex_data.portfolio_parent_group_name
)
SELECT
  afd.date,
  afd.Major_Category,
  afd.Media_Network,
  afd.Media_Group,
  afd.Media_Type,
  afd.Spend,
  afd.financial_year,
  afd.Advertiser,
  afd.Brand,
  afd.Product
FROM
  adex_full_date afd
WHERE
  afd.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
  AND afd.Spend IS NOT NULL
ORDER BY
  afd.date DESC,
  afd.Spend DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '01/08/2023', 'original_format': ""'Aug 23'"", 'context': ""Used to derive the start date of the 'current period' for spend calculations (e.g., `clmn13_` in Q1, `clmn12_` in Q2)."", 'suggested_fix': 'Replace with a dashboard parameter or a relative date function (e.g., `DATE_TRUNC(CURRENT_DATE(), MONTH)` or `DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)`).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/06/2024', 'original_format': ""'Jun 24'"", 'context': ""Used to derive the end date of the 'current period' for spend calculations (e.g., `clmn14_` in Q1, `clmn13_` in Q2)."", 'suggested_fix': 'Replace with a dashboard parameter or a relative date function (e.g., `CURRENT_DATE()` or `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '01/08/2022', 'original_format': ""Derived from 'Aug 23' minus 12 months"", 'context': ""Used to derive the start date of the 'previous year period' for spend calculations (e.g., `clmn15_` in Q1, `clmn14_` in Q2)."", 'suggested_fix': ""This date is derived from the 'current period' start date. Ensure the base date parameterization handles this derivation."", 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '01/06/2023', 'original_format': ""Derived from 'Jun 24' minus 12 months"", 'context': ""Used to derive the end date of the 'previous year period' for spend calculations (e.g., `clmn17_` in Q1, `clmn16_` in Q2)."", 'suggested_fix': ""This date is derived from the 'current period' end date. Ensure the base date parameterization handles this derivation."", 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'""], 'context': 'Month abbreviations are hardcoded in CASE statements to convert string month names to numeric month values for date parsing.', 'suggested_governance': ""Use standard SQL date functions like `EXTRACT(MONTH FROM PARSE_DATE('%b %y', month_year_string))` or a dedicated date dimension table for month name lookups."", 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'NEWS CORP'""], 'context': 'Used to filter `Media_Network` for specific spend calculations (e.g., `NewsCorp_Spend_Current_Period`).', 'suggested_governance': 'If this value is subject to change or part of a larger set of media networks, it should be managed via a configuration table or a dashboard parameter.', 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Retail'""], 'context': 'Used to filter `Major_Category` for specific spend calculations (e.g., `Retail_Spend_Current_Period`).', 'suggested_governance': 'If this value is subject to change or part of a larger set of major categories, it should be managed via a configuration table or a dashboard parameter.', 'impact': 'low', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates ('Aug 23', 'Jun 24') with date parameters (e.g., `p_current_period_start_month_year`, `p_current_period_end_month_year`) or relative date functions (e.g., `DATE_TRUNC(CURRENT_DATE(), MONTH)`)."", ""Replace hardcoded month name parsing (CASE statements for 'Jan', 'Feb', etc.) with standard date functions or a robust date dimension table."", ""Consider externalizing specific filter values like 'NEWS CORP' and 'Retail' into a configuration table or dashboard parameters if they are dynamic business rules.""]",27,e9d8a216-4950-4d30-b344-5011776edbdf
"WITH OSandFACT AS (
  SELECT
    os.Actual_Amount,
    os.Budget_Amount,
    os.Forecast_Amount,
    calendar.fy_week_of_year,
    calendar.fy_year,
    os.gl_hierarchy_code,
    os.is_print_digital_flag,
    pub.l03_publication_code,
    pub.l12_publication_code,
    os.os_level_4,
    os.os_level_5,
    os.os_level_6,
    os.os_level_7,
    os.os_level_9,
    pub.publication_name
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
    LEFT JOIN (
      SELECT DISTINCT
        CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
        CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
        CAST(c.fy_year AS int) AS fy_year
      FROM
        `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
        JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      WHERE
        1 = 1
    ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
)
SELECT
  fy_year,
  fy_week_of_year,
  gl_hierarchy_code,
  is_print_digital_flag,
  l03_publication_code,
  l12_publication_code,
  os_level_4,
  os_level_5,
  os_level_6,
  os_level_7,
  os_level_9,
  publication_name,
  SUM(Actual_Amount) AS total_actual_amount,
  SUM(Budget_Amount) AS total_budget_amount,
  SUM(Forecast_Amount) AS total_forecast_amount
FROM
  OSandFACT
WHERE
  gl_hierarchy_code = 'FY2025' -- Hardcoded fiscal year, consider parameterizing
  AND fy_week_of_year = 40 -- Hardcoded fiscal week, consider parameterizing
  AND os_level_4 IN ('Total Revenue', 'Total Expenses') -- Hardcoded OS levels, consider parameterizing
  -- Additional filters from specific queries (e.g., l03_publication_code, os_level_9) can be added here as optional parameters
GROUP BY
  fy_year,
  fy_week_of_year,
  gl_hierarchy_code,
  is_print_digital_flag,
  l03_publication_code,
  l12_publication_code,
  os_level_4,
  os_level_5,
  os_level_6,
  os_level_7,
  os_level_9,
  publication_name
LIMIT 100000; -- Reduced limit for general analysis, original was 2000001","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT os.fiscal_week_id) AS unique_fiscal_weeks,
  COUNT(DISTINCT calendar.fy_year) AS unique_fiscal_years,
  COUNT(DISTINCT os.gl_publication_code) AS unique_gl_publications,
  COUNT(DISTINCT os.os_level_4) AS unique_os_level_4s,
  MIN(calendar.fy_first_day_of_week) AS earliest_fiscal_week_start_date,
  MAX(calendar.fy_last_day_of_week) AS latest_fiscal_week_end_date
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  calendar.fy_year = 2025 -- Focusing on the relevant fiscal year for structure analysis
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(t0.Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_test,
  CASE WHEN SUM(t0.Budget_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS budget_amount_test,
  CASE WHEN SUM(t0.Forecast_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS forecast_amount_test,
  CASE WHEN COUNT(DISTINCT t0.gl_hierarchy_code) > 0 THEN 'PASS' ELSE 'FAIL' END AS gl_hierarchy_code_test,
  CASE WHEN COUNT(DISTINCT t0.fy_week_of_year) > 0 THEN 'PASS' ELSE 'FAIL' END AS fy_week_of_year_test
FROM (
  WITH OSandFACT AS (
    SELECT
      os.Actual_Amount,
      os.Budget_Amount,
      os.Forecast_Amount,
      calendar.fy_week_of_year,
      calendar.fy_year,
      os.gl_hierarchy_code
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
            ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
        ON os.os_level_12 = dep.department_code
  )
  SELECT
    *
  FROM
    OSandFACT
) AS t0
WHERE
  t0.gl_hierarchy_code = 'FY2025' -- Hardcoded fiscal year
  AND t0.fy_week_of_year = 40 -- Hardcoded fiscal week
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'FY2025 and Week 40 Filter Coverage' AS rule_name,
  COUNT(*) AS total_records_in_scope,
  SUM(CASE WHEN gl_hierarchy_code = 'FY2025' AND fy_week_of_year = 40 THEN 1 ELSE 0 END) AS records_matching_dashboard_filters,
  SAFE_DIVIDE(SUM(CASE WHEN gl_hierarchy_code = 'FY2025' AND fy_week_of_year = 40 THEN 1 ELSE 0 END), COUNT(*)) * 100 AS percentage_matching_filters,
  COUNT(DISTINCT os_level_4) AS distinct_os_level_4_values,
  COUNT(DISTINCT l03_publication_code) AS distinct_l03_publication_codes,
  COUNT(DISTINCT os_level_9) AS distinct_os_level_9_values
FROM (
  SELECT
    os.gl_hierarchy_code,
    calendar.fy_week_of_year,
    os.os_level_4,
    pub.l03_publication_code,
    os.os_level_9
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
    LEFT JOIN (
      SELECT DISTINCT
        CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
        CAST(c.fy_year_week_number AS int) AS fy_year_week_number
      FROM
        `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
        JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
    ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
) AS sub
WHERE
  gl_hierarchy_code = 'FY2025' -- Filter to the relevant fiscal year for this validation
LIMIT 1;","SELECT
  os.source_system_name,
  os.sub_source_system_name,
  os.fiscal_week_id,
  os.gl_publication_code,
  os.day_of_week,
  os.state,
  os.os_level_1,
  os.os_level_2,
  os.os_level_3,
  os.os_level_4,
  os.os_level_5,
  os.os_level_6,
  os.os_level_7,
  os.os_level_8,
  os.os_level_9,
  os.os_level_10,
  os.os_level_11,
  os.os_level_12,
  os.Estimate,
  os.True_Up_Adjustment,
  os.Actual_Amount,
  os.volume,
  os.Last_Year_Actual_Amount,
  os.Last_Year_volume,
  os.Budget_Draft_Amount,
  os.Budget_Draft_Volume,
  os.Budget_Amount,
  os.Budget_Volume,
  os.Forecast_Amount,
  os.Forecast_Volume,
  calendar.fy_week_of_year,
  calendar.fy_year,
  calendar.fy_first_day_of_week,
  calendar.fy_last_day_of_week,
  calendar.month_end_flag,
  pub.publication_name,
  pub.l03_publication_code,
  pub.l12_publication_code,
  dep.department_name
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
  LEFT JOIN (
    SELECT DISTINCT
      CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
      CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
      CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
      CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
      CASE
        WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
        ELSE 'N'
      END AS month_end_flag,
      CAST(c.fy_year AS int) AS fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
      JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
        ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
  ) AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
    ON os.os_level_12 = dep.department_code
WHERE
  calendar.fy_year = 2025 -- Sample data for the relevant fiscal year
  AND calendar.fy_week_of_year = 40 -- Sample data for the relevant fiscal week
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'FY2025'""], 'context': 'Fiscal year filter applied to gl_hierarchy_code. This makes the dashboard static for a specific year.', 'suggested_governance': 'Replace with a dashboard parameter for fiscal year or use relative fiscal year calculations.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['40'], 'context': 'Fiscal week filter applied to fy_week_of_year. This makes the dashboard static for a specific week.', 'suggested_governance': 'Replace with a dashboard parameter for fiscal week or use relative fiscal week calculations (e.g., current week, previous week).', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Total Revenue'"", ""'Total Expenses'""], 'context': 'OS Level 4 filter. These are specific categories of financial data.', 'suggested_governance': 'Use a multi-select dashboard parameter for os_level_4 or join to a reference table for OS levels if they are dynamic.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'News Media Publishing'""], 'context': 'L03 Publication Code filter. This is a specific publication hierarchy level.', 'suggested_governance': 'Use a dashboard parameter for l03_publication_code or ensure this value is managed in the `v_asl_DIM_os_publication_hierachy` table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Circulation'"", ""'Subscription'"", ""'Content Licensing'""], 'context': 'OS Level 9 filter. These are specific sub-categories of financial data.', 'suggested_governance': 'Use a multi-select dashboard parameter for os_level_9 or join to a reference table for OS levels.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': ""Period names used in the join to `v_asl_DIM_period_control` within the calendar subquery. These define which periods are considered 'current' or 'previous year'."", 'suggested_governance': 'If these period names can change or need to be dynamic, consider making them configurable via a lookup table or parameter.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded fiscal year ('FY2025') with a dashboard parameter (e.g., `{{Fiscal Year}}`) or a relative fiscal year calculation (e.g., `CURRENT_FISCAL_YEAR()`)."", 'Replace hardcoded fiscal week (40) with a dashboard parameter (e.g., `{{Fiscal Week}}`) or a relative fiscal week calculation.', ""Replace hardcoded OS level values ('Total Revenue', 'Total Expenses', 'Circulation', 'Subscription', 'Content Licensing') with multi-select dashboard parameters or dynamic lookups from a configuration table."", ""Replace hardcoded publication codes ('News Media Publishing') with a dashboard parameter or dynamic lookups."", ""Review the `calender_table` CTE definition in the original queries. It is defined but not used in the `OSandFACT` CTE or the final `SELECT * FROM OSandFACT` statement. This indicates potential dead code or an incomplete query structure. If it's intended for use, integrate it; otherwise, remove it for clarity and efficiency.""]",28,b1c5901f-a535-42eb-870d-05cc025f7c27
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters
WITH
  ContraSheetAccounts AS (
    SELECT DISTINCT
      NMBS_T_Number
    FROM
      `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data`
  ),
  RevenueBase AS (
    SELECT
      financial_year,
      CAST(financial_month AS int) AS financial_month_no,
      financial_short_month,
      calendar_year_month,
      sales_segment_gm_name,
      portfolio_conformed_name_current,
      IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      advertiser_name,
      adpoint_account_number,
      revenue_type,
      gross_revenue_amount,
      CASE
        WHEN adpoint_account_number IN (
          SELECT
            NMBS_T_Number
          FROM
            ContraSheetAccounts
        ) THEN 'Y'
        ELSE 'N'
      END AS sheet_account_flag,
      CASE
        WHEN adpoint_account_number IN ('13019', '52246', '18387') THEN 'ctr1'
        ELSE adpoint_account_number
      END AS adpoint_account_number_categorized,
      CASE
        WHEN (
          CASE
            WHEN adpoint_account_number IN ('13019', '52246', '18387') THEN 'ctr1'
            ELSE adpoint_account_number
          END
        ) = 'ctr1' THEN 'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'
        ELSE advertiser_name
      END AS advertiser_name_categorized
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
    WHERE
      lower(`left`(advertiser_name, 3)) = 'ctr'
      AND (
        NOT (
          cost_model_type = 'Guaranteed'
          AND revenue_group_name = 'Exchange'
        )
      )
      AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
      AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
      AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
      AND (
        UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%'
        OR (
          UPPER(publication_name) LIKE 'SUDDENLY%'
          AND (
            account_number IN ('17114', '29172', '52809')
            OR adtype_name = '-'
          )
        )
      )
  ),
  DetailsBase AS (
    SELECT
      account_number,
      adpoint_account_number,
      advertiser_name,
      current_portfolio_conformed_owner_full,
      nca_industry_pillar,
      sales_segment_gm_name
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
  ),
  AggregatedRevenue AS (
    SELECT
      financial_year,
      financial_month_no,
      financial_short_month,
      calendar_year_month,
      sales_segment_gm_name,
      portfolio_conformed_name_current,
      current_portfolio_conformed_owner_full,
      advertiser_name_categorized,
      adpoint_account_number_categorized,
      revenue_type,
      sheet_account_flag,
      SUM(gross_revenue_amount) AS total_gross_revenue_amount
    FROM
      RevenueBase
    GROUP BY
      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
  ),
  AggregatedDetails AS (
    SELECT
      adpoint_account_number,
      advertiser_name,
      COUNT(1) AS record_count_for_advertisers,
      MAX(CASE WHEN nca_industry_pillar = 'Contra' AND sales_segment_gm_name IN ('Renee Sycamore') THEN current_portfolio_conformed_owner_full END) AS filtered_owner_full_name,
      MAX(CASE WHEN nca_industry_pillar = 'Contra' AND sales_segment_gm_name IN ('Renee Sycamore') THEN nca_industry_pillar END) AS filtered_nca_industry_pillar,
      MAX(CASE WHEN nca_industry_pillar = 'Contra' AND sales_segment_gm_name IN ('Renee Sycamore') THEN sales_segment_gm_name END) AS filtered_sales_segment_gm_name
    FROM
      DetailsBase
    WHERE
      nca_industry_pillar = 'Contra' AND sales_segment_gm_name IN ('Renee Sycamore') -- Q1 filter
      OR advertiser_name IN ('CTR_2023_AFL SPORT', 'CTR_2023_GWS GIANTS', 'CTR_2023_SYDNEY SWANS', 'CTR_2025_Greater Western Sydney Giants', 'CTR_2025_Raising Literacy Australia') -- Q3 filter
    GROUP BY
      1, 2
  )
SELECT
  ar.financial_year,
  ar.financial_month_no,
  ar.financial_short_month,
  ar.calendar_year_month,
  ar.sales_segment_gm_name,
  ar.portfolio_conformed_name_current,
  ar.current_portfolio_conformed_owner_full,
  ar.advertiser_name_categorized,
  ar.adpoint_account_number_categorized,
  ar.revenue_type,
  ar.sheet_account_flag,
  ar.total_gross_revenue_amount,
  ad.record_count_for_advertisers,
  ad.filtered_owner_full_name,
  ad.filtered_nca_industry_pillar,
  ad.filtered_sales_segment_gm_name
FROM
  AggregatedRevenue AS ar
  LEFT JOIN AggregatedDetails AS ad ON ar.adpoint_account_number_categorized = ad.adpoint_account_number
  AND ar.advertiser_name_categorized = ad.advertiser_name
WHERE
  ar.financial_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Example date filter for last 2 years
ORDER BY
  ar.financial_year DESC, ar.financial_month_no DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`) AS total_revenue_records,
  (SELECT COUNT(DISTINCT adpoint_account_number) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`) AS unique_revenue_accounts,
  (SELECT COUNT(DISTINCT advertiser_name) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`) AS unique_revenue_advertisers,
  (SELECT MIN(CONCAT(financial_year, '-', LPAD(CAST(financial_month AS STRING), 2, '0'))) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`) AS earliest_revenue_month,
  (SELECT MAX(CONCAT(financial_year, '-', LPAD(CAST(financial_month AS STRING), 2, '0'))) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`) AS latest_revenue_month,
  (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`) AS total_details_records,
  (SELECT COUNT(DISTINCT adpoint_account_number) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`) AS unique_details_accounts,
  (SELECT COUNT(DISTINCT advertiser_name) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`) AS unique_details_advertisers
FROM
  DUAL;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_positive_test,
  CASE WHEN COUNT(DISTINCT adpoint_account_number) > 0 THEN 'PASS' ELSE 'FAIL' END AS unique_accounts_test,
  CASE WHEN MAX(financial_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END AS freshness_test_revenue,
  (SELECT CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE advertiser_name LIKE 'CTR_%' LIMIT 1) AS contra_advertiser_presence_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  financial_year = EXTRACT(YEAR FROM CURRENT_DATE());","SELECT
  'Business Rule Validation' AS validation_type,
  'Contra Advertiser Naming Convention' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN lower(left(advertiser_name, 3)) = 'ctr' THEN 1 ELSE 0 END) AS records_matching_ctr_prefix,
  SAFE_DIVIDE(SUM(CASE WHEN lower(left(advertiser_name, 3)) = 'ctr' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS ctr_prefix_match_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  financial_year = EXTRACT(YEAR FROM CURRENT_DATE()) -- Focus on recent data
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'Billed/Booked Revenue Status' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) AS records_billed_or_booked,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS billed_booked_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  financial_year = EXTRACT(YEAR FROM CURRENT_DATE());","SELECT
  financial_year,
  calendar_year_month,
  advertiser_name,
  adpoint_account_number,
  gross_revenue_amount,
  revenue_type,
  sales_segment_gm_name,
  current_portfolio_conformed_owner_full_name_current,
  cost_model_type,
  revenue_group_name,
  revenue_transaction_status,
  publication_name
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  financial_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Last 1 year of data
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  financial_year DESC, calendar_year_month DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Contra'"", ""'Renee Sycamore'"", ""'13019'"", ""'52246'"", ""'18387'"", ""'ctr'"", ""'Guaranteed'"", ""'Exchange'"", ""'BILLED'"", ""'BOOKED'"", ""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'"", ""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'"", ""'-'"", ""'CTR_2023_AFL SPORT'"", ""'CTR_2023_GWS GIANTS'"", ""'CTR_2023_SYDNEY SWANS'"", ""'CTR_2025_Greater Western Sydney Giants'"", ""'CTR_2025_Raising Literacy Australia'""], 'context': 'Used in WHERE clauses for filtering dimensions (industry pillar, sales GM, advertiser name, account number, revenue attributes) and in CASE statements for re-categorization.', 'suggested_governance': 'These values should be managed in governed reference tables (e.g., `dim_contra_accounts`, `dim_advertiser_categories`, `dim_revenue_rules`).', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'VACANT'"", ""'Y'"", ""'N'"", ""'XXX'"", ""'ctr1'"", ""'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'""], 'context': 'Default values for IFNULL, flags for derived categories, and specific re-categorized advertiser names.', 'suggested_governance': 'Derived categories and flags should be defined in a business rule configuration table or a dedicated dimension table.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X YEAR)`).', 'Replace hardcoded lookup values (e.g., specific account numbers, advertiser names, status codes) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., `cost_model_type`, `revenue_group_name` exclusions, `publication_name` exceptions) instead of hardcoded logic in SQL.']",29,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"-- This is the SQL you will run for business analysis
WITH base_data AS (
  SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2,
    t0.offer_category_group_name,
    t0.offer_category_name
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
transformed_data AS (
  SELECT
    fy_year,
    fy_week_of_year,
    masthead,
    offer_category_group_name,
    offer_category_name,
    table_nm,

    -- Derived Dimension: delivery_medium_type_transformed (clmn6_ in Q1)
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_type_transformed,

    -- Derived Dimension: publication_type (clmn7_ in Q1, clmn8_ in Q2, clmn11_ in Q3)
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS publication_type,

    -- Derived Dimension: publication_group (clmn8_ in Q1, clmn9_ in Q2, clmn12_ in Q3)
    CASE
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
      WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
      WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
      WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
      ELSE 'Exclude'
    END AS publication_group,

    -- Derived Dimension: subscription_type (clmn13_/clmn14_ in Q1, clmn15_/clmn16_ in Q2, clmn18_/clmn19_ in Q3)
    CASE
      WHEN (CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_type,

    -- Derived Dimension: business_type (clmn13_ in Q2, clmn16_ in Q3)
    CASE
      WHEN (classification_level_2 IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
      WHEN (classification_level_2 IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
      ELSE 'Others'
    END AS business_type,

    -- Derived Dimension: source_channel (clmn15_ in Q1, clmn17_ in Q2, clmn20_/clmn21_ in Q3)
    CASE
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_AB') > 0) THEN 'Above the Fold'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_BB') > 0) THEN 'Blackbook'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_CF') > 0) THEN 'Community Form'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_CS') > 0) THEN 'Closing Speed'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_FA') > 0) THEN 'Free Articles'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_FF') > 0) THEN 'Form Finder'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_NA') > 0) THEN 'News Articles'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_PC') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_PE') > 0) THEN 'Punters Edge'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_SL') > 0) THEN 'Shortlist'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_SS') > 0) THEN 'Setting Speed'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_TE') > 0) THEN 'Tippers Edge'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_TH') > 0) THEN 'Todays Headlines'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_TO') > 0) THEN 'The Oz'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), '_WS') > 0) THEN 'Why Subscribe'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 4), 'PRED') > 0) THEN 'Predictor'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'AMP') > 0) THEN 'Google AMP'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'GGL') > 0) THEN 'Google'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'GGN') > 0) THEN 'Google News'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'NEW') > 0) THEN 'news.com.au'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'NWL') > 0) THEN 'Newsletter'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'POD') > 0) THEN 'Podcasts'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'POR') > 0) THEN 'Newsletter Sports'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'SCP') > 0) THEN 'Supercoach Plus'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'SEC') > 0) THEN 'Sectionals'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'TCA') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'TMP') > 0) THEN 'Tips Mrket Place'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'TWA') > 0) THEN 'The Weekend Aus'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'TWT') > 0) THEN 'Twitter'
      WHEN (STRPOS(SAFE.RIGHT(sold_in_source_code, 3), 'WID') > 0) THEN 'Widget'
      WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
      WHEN (STRPOS(sold_in_source_code, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
      ELSE NULL
    END AS source_channel
  FROM base_data
)
SELECT
  fy_year,
  fy_week_of_year,
  masthead,
  publication_type,
  publication_group,
  delivery_medium_type_transformed,
  subscription_type,
  source_channel,
  business_type,
  offer_category_group_name,
  offer_category_name,
  COUNT(1) AS total_acquisitions_movements
FROM transformed_data
WHERE
  fy_year = 2025 -- Hardcoded year
  AND table_nm != 'op'
  AND publication_type != 'Exclude'
  AND publication_group = 'The Australian and Prestige'
  AND subscription_type = 'Digital Subscriptions'
  AND source_channel IS NOT NULL
  AND business_type IN ('B2C', '') -- From Q3, Q2 only had 'B2C'. Keeping both for completeness.
GROUP BY
  fy_year,
  fy_week_of_year,
  masthead,
  publication_type,
  publication_group,
  delivery_medium_type_transformed,
  subscription_type,
  source_channel,
  business_type,
  offer_category_group_name,
  offer_category_name
ORDER BY
  fy_year DESC, fy_week_of_year DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT fy_year) as unique_fy_years,
  COUNT(DISTINCT fy_week_of_year) as unique_fy_weeks,
  COUNT(DISTINCT masthead) as unique_mastheads,
  COUNT(DISTINCT sold_in_source_code) as unique_source_codes,
  COUNT(DISTINCT classification_level_2) as unique_classification_levels,
  MIN(fy_year) as earliest_fy_year,
  MAX(fy_year) as latest_fy_year,
  APPROX_COUNT_DISTINCT(CONCAT(fy_year, '-', fy_week_of_year, '-', masthead, '-', sold_in_source_code)) as approx_unique_records_at_grain
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN COUNT(1) > 0 THEN 'PASS' ELSE 'FAIL' END as records_exist_test,
  CASE WHEN SUM(CASE WHEN fy_year = 2025 THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as fy2025_data_test,
  CASE WHEN SUM(CASE WHEN masthead IS NULL THEN 1 ELSE 0 END) = 0 THEN 'PASS' ELSE 'FAIL' END as masthead_not_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
WHERE fy_year = 2025
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Digital Subscriptions Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
WHERE fy_year = 2025 AND table_nm != 'op' AND masthead = 'TA' -- Example specific filters to narrow down
LIMIT 1000;","SELECT 
  fy_year,
  fy_week_of_year,
  masthead,
  sold_in_source_code,
  delivery_medium_type,
  subscriber_has_email_flag,
  classification_level_2,
  offer_category_group_name,
  offer_category_name,
  table_nm
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
WHERE fy_year = 2025
ORDER BY RAND()
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'Fiscal Year filter in WHERE clause', 'suggested_fix': 'replace with a parameter or relative fiscal year (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or `CURRENT_FY_YEAR()`)', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'op'""], 'context': 'Exclusion filter for `table_nm`', 'suggested_governance': 'Define valid `table_nm` values in a reference table or configuration.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Digital Y'"", ""'Digital N'"", ""'Bundle Y'"", ""'Not Available Y'""], 'context': 'Logic for `subscription_type` derivation', 'suggested_governance': 'Create a `subscription_type_lookup` table or a governed view that defines these mappings.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'TA'"", ""'CM'"", ""'DT'"", ""'HS'"", ""'AA'"", ""'CP'"", ""'GA'"", ""'GC'"", ""'NT'"", ""'TM'"", ""'TB'"", ""'TC'"", ""'WT'"", ""'SC'"", ""'CS'"", ""'TS'"", ""'AP'"", ""'RN'"", ""'PU'""], 'context': 'Masthead codes used in `publication_type` and `publication_group` derivations', 'suggested_governance': 'Create a `masthead_lookup` table with `masthead_code`, `publication_type`, `publication_group` columns and join to it.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Exclude'"", ""'The Australian and Prestige'""], 'context': 'Specific values used for filtering `publication_type` and `publication_group`', 'suggested_governance': 'These derived values should be consistent with the `masthead_lookup` table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'_AB'"", ""'_BB'"", ""'_CF'"", ""'_CS'"", ""'_FA'"", ""'_FF'"", ""'_NA'"", ""'_PC'"", ""'_PE'"", ""'_SL'"", ""'_SS'"", ""'_TE'"", ""'_TH'"", ""'_TO'"", ""'_WS'"", ""'PRED'"", ""'AMP'"", ""'FBK'"", ""'FMB'"", ""'GGL'"", ""'GGN'"", ""'INS'"", ""'LIN'"", ""'NEW'"", ""'NWL'"", ""'POD'"", ""'POR'"", ""'RED'"", ""'SCP'"", ""'SEC'"", ""'TCA'"", ""'TMP'"", ""'TWA'"", ""'TWT'"", ""'WID'"", ""'_FBK'"", ""'_GGL'"", ""'_LIN'"", ""'_RED'"", ""'_TWT'""], 'context': 'Source codes/patterns used in `source_channel` derivation', 'suggested_governance': ""Create a `source_channel_lookup` table with `source_code_pattern`, `channel_name`, and potentially `pattern_type` (e.g., 'RIGHT_3', 'RIGHT_4', 'FULL_STRPOS') and join to it."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Consumer'"", ""'Gift Receiver'"", ""'Campus'"", ""'Corporate'"", ""'Corporate excluding IP'"", ""'Corporate IP'"", ""'IP Access'"", ""'SMB'"", ""'Others'"", ""'B2C'"", ""'B2B'"", ""''""], 'context': 'Logic for `business_type` derivation and filtering', 'suggested_governance': 'Create a `business_type_lookup` table for `classification_level_2` to `business_type` mapping.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., for fiscal year).', 'Replace hardcoded lookup values (e.g., masthead codes, source codes, classification levels) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., subscription type mapping) instead of hardcoded logic in CASE statements.']",30,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
"-- This is the main SQL to run for business analysis, calculating all key metrics together.
-- The hardcoded date '2025-06-18' has been retained as per original query logic but flagged for parameterization.
WITH
  base_data AS (
    SELECT
      t0.cost_model_type,
      t0.financial_month,
      t0.financial_quarter,
      t0.financial_short_month,
      t0.gross_revenue_amount,
      t0.relative_fy_month_offset,
      t0.relative_fy_year_offset,
      t0.reporting_date,
      t0.revenue_group_subtype,
      t0.unified_publication_name,
      t0.portfolio_conformed_name_sync -- Added from second query for completeness
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
  ),
  derived_flags_and_dims AS (
    SELECT
      cost_model_type,
      financial_month,
      financial_quarter,
      financial_short_month,
      gross_revenue_amount,
      relative_fy_month_offset,
      relative_fy_year_offset,
      reporting_date,
      revenue_group_subtype,
      unified_publication_name,
      portfolio_conformed_name_sync,
      -- Hardcoded date from original query, consider replacing with CURRENT_DATE() or a parameter for dynamic reporting
      DATE(TIMESTAMP '2025-06-18 03:06:41.434326+00', 'Australia/Sydney') AS dashboard_snapshot_date,
      UPPER(cost_model_type) AS cost_model_type_upper,
      SAFE_CAST(financial_month AS INT64) AS financial_month_int,
      SAFE_CAST(financial_quarter AS INT64) AS financial_quarter_int,
      (relative_fy_year_offset = 0) AS is_current_fy,
      (reporting_date < DATE(TIMESTAMP '2025-06-18 03:06:41.434326+00', 'Australia/Sydney')) AS is_reporting_date_before_dashboard_date,
      UPPER(revenue_group_subtype) AS revenue_group_subtype_upper,
      (unified_publication_name = 'TUBI') AS is_tubi_publication,
      (unified_publication_name = 'Run of Audience Extension') AS is_run_of_audience_extension,
      CASE
        WHEN (unified_publication_name = 'TUBI') THEN 'TUBI'
        WHEN (UPPER(cost_model_type) = 'GUARANTEED') THEN 'PG'
        WHEN (UPPER(cost_model_type) = 'NON-GUARANTEED') THEN 'OMP'
        WHEN (UPPER(cost_model_type) = 'PMP') THEN 'PMP'
        WHEN (unified_publication_name = 'Run of Audience Extension') THEN 'PERFORMANCE'
        ELSE NULL
      END AS revenue_category_dim
    FROM
      base_data
  ),
  intermediate_revenue_calcs AS (
    SELECT
      *,
      CASE WHEN (revenue_group_subtype_upper = 'PROGRAMMATIC SOURCE') THEN gross_revenue_amount ELSE NULL END AS programmatic_source_revenue,
      CASE WHEN (is_tubi_publication AND is_current_fy) THEN gross_revenue_amount ELSE 0 END AS tubi_current_fy_revenue_raw,
      CASE WHEN (is_tubi_publication AND is_current_fy AND is_reporting_date_before_dashboard_date) THEN gross_revenue_amount ELSE 0 END AS tubi_current_fy_past_dashboard_date_revenue_raw,
      CASE WHEN (is_run_of_audience_extension AND is_current_fy) THEN gross_revenue_amount ELSE NULL END AS performance_current_fy_revenue_raw,
      CASE WHEN (is_run_of_audience_extension AND is_current_fy AND is_reporting_date_before_dashboard_date) THEN gross_revenue_amount ELSE NULL END AS performance_current_fy_past_dashboard_date_revenue_raw
    FROM
      derived_flags_and_dims
  ),
  final_revenue_bases AS (
    SELECT
      *,
      CASE
        WHEN (revenue_category_dim IN ('TUBI', 'PERFORMANCE')) THEN gross_revenue_amount
        ELSE programmatic_source_revenue
      END AS tubi_performance_or_programmatic_revenue_base
    FROM
      intermediate_revenue_calcs
  )
SELECT
  financial_short_month,
  financial_quarter_int AS financial_quarter,
  revenue_category_dim AS revenue_category,
  financial_month_int AS financial_month,
  relative_fy_month_offset,
  SUM(CASE WHEN cost_model_type = 'PMP' THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS pmp_current_fy_revenue_total,
  SUM(performance_current_fy_past_dashboard_date_revenue_raw) AS performance_current_fy_past_dashboard_date_revenue_total,
  SUM(CASE WHEN cost_model_type = 'Non-Guaranteed' THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS non_guaranteed_current_fy_revenue_total,
  SUM(tubi_performance_or_programmatic_revenue_base) AS current_fy_tubi_performance_programmatic_revenue_total,
  SUM(CASE WHEN is_reporting_date_before_dashboard_date THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS current_fy_past_dashboard_date_tubi_performance_programmatic_revenue_total,
  SUM(CASE WHEN cost_model_type = 'Non-Guaranteed' AND is_reporting_date_before_dashboard_date THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS non_guaranteed_past_dashboard_date_revenue_total,
  SUM(tubi_current_fy_past_dashboard_date_revenue_raw) AS tubi_current_fy_past_dashboard_date_revenue_total,
  SUM(CASE WHEN cost_model_type = 'Guaranteed' AND is_reporting_date_before_dashboard_date THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS guaranteed_past_dashboard_date_revenue_total,
  SUM(performance_current_fy_revenue_raw) AS performance_current_fy_revenue_total,
  SUM(CASE WHEN cost_model_type = 'Guaranteed' THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS guaranteed_current_fy_revenue_total,
  SUM(tubi_current_fy_revenue_raw) AS tubi_current_fy_revenue_total,
  SUM(CASE WHEN cost_model_type = 'PMP' AND is_reporting_date_before_dashboard_date THEN tubi_performance_or_programmatic_revenue_base ELSE NULL END) AS pmp_past_dashboard_date_revenue_total
FROM
  final_revenue_bases
WHERE
  is_current_fy = TRUE -- Filter for current financial year
GROUP BY
  financial_short_month,
  financial_quarter_int,
  revenue_category_dim,
  financial_month_int,
  relative_fy_month_offset
ORDER BY
  financial_month_int DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT reporting_date) as unique_reporting_dates,
  COUNT(DISTINCT financial_month) as unique_financial_months,
  COUNT(DISTINCT financial_quarter) as unique_financial_quarters,
  COUNT(DISTINCT cost_model_type) as unique_cost_models,
  COUNT(DISTINCT unified_publication_name) as unique_publications,
  MIN(reporting_date) as earliest_reporting_date,
  MAX(reporting_date) as latest_reporting_date,
  MIN(financial_month) as earliest_financial_month,
  MAX(financial_month) as latest_financial_month
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY);","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_positive_test,
  CASE WHEN COUNT(DISTINCT unified_publication_name) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_publications_test,
  CASE WHEN MAX(reporting_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN SUM(CASE WHEN relative_fy_year_offset = 0 THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_data_exists_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` 
WHERE reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Current FY Filter (relative_fy_year_offset = 0)' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN 1 ELSE 0 END) as records_in_current_fy,
  SAFE_DIVIDE(SUM(CASE WHEN relative_fy_year_offset = 0 THEN 1 ELSE 0 END), COUNT(*)) * 100 as current_fy_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'Reporting Date Before Dashboard Date (2025-06-18)' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN reporting_date < DATE('2025-06-18') THEN 1 ELSE 0 END) as records_before_dashboard_date,
  SAFE_DIVIDE(SUM(CASE WHEN reporting_date < DATE('2025-06-18') THEN 1 ELSE 0 END), COUNT(*)) * 100 as before_dashboard_date_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE relative_fy_year_offset = 0;","SELECT 
  reporting_date,
  financial_short_month,
  financial_quarter,
  financial_month,
  cost_model_type,
  unified_publication_name,
  revenue_group_subtype,
  portfolio_conformed_name_sync,
  gross_revenue_amount,
  relative_fy_month_offset,
  relative_fy_year_offset
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
ORDER BY reporting_date DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '18/06/2025', 'original_format': '2025-06-18 03:06:41.434326+00', 'context': ""Used as a fixed snapshot date (clmn0_) to determine 'past dashboard date' calculations (clmn15_, clmn30_, clmn34_)."", 'suggested_fix': ""Replace with `CURRENT_DATE()` for dynamic 'as of today' reporting, or parameterize if a specific historical snapshot date is intended."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Guaranteed'"", ""'PMP'"", ""'Non-Guaranteed'""], 'context': 'Cost model types used in CASE statements for revenue segmentation (clmn1_, clmn11_).', 'suggested_governance': 'These values should be sourced from a `cost_model_type_lookup` reference table to ensure consistency and allow for future changes without code modification.', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'TUBI'"", ""'PERFORMANCE'"", ""'PROGRAMMATIC SOURCE'"", ""'Run of Audience Extension'""], 'context': 'Unified publication names and revenue group subtypes used for classification and filtering (clmn10_, clmn16_, clmn17_, clmn18_, clmn23_).', 'suggested_governance': 'These should be managed in a `publication_name_lookup` or `revenue_group_lookup` table. This allows for centralized management of business categories.', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PG'"", ""'OMP'""], 'context': 'Derived revenue category codes (clmn23_).', 'suggested_governance': 'These are internal codes derived from other hardcoded values. If these codes are used elsewhere, they should be part of a governed `revenue_category_lookup` table.', 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Y'"", ""'N'""], 'context': 'Boolean flags derived from `unified_publication_name` (clmn18_, clmn22_).', 'suggested_governance': ""While simple, using boolean (TRUE/FALSE) directly is often cleaner than 'Y'/'N' strings. If 'Y'/'N' is a standard, ensure it's documented."", 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates (e.g., '2025-06-18') with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`)."", ""Replace hardcoded lookup values (e.g., 'Guaranteed', 'TUBI', 'PROGRAMMATIC SOURCE') with joins to governed reference tables for maintainability and consistency."", 'Consider externalizing complex CASE WHEN logic for revenue categorization into a configuration table or a UDF if it becomes more complex or needs frequent updates.']",31,5491badf-5ec0-4b4f-a427-b12a3a3395dd
"-- This is the SQL you will run for business analysis
WITH SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  base_data AS (
    SELECT
      unified_publication_name,
      unified_publication_gl_code,
      fy_year_month_number,
      financial_year,
      financial_quarter,
      financial_month,
      financial_short_month,
      financial_week,
      revenue_transaction_status,
      is_print_digital_flag,
      current_financial_month,
      current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE()) AS DOW_Today,
      sales_segment_l_1_name,
      nca_industry_anzsic_pillar_group,
      sales_segment_l_2_name,
      sales_segment_l_1_name_sync,
      sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      advertiser_group,
      advertiser_parent,
      SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
      sales_segment_gm_name,
      CASE
        WHEN upper(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW', 'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
        ELSE sales_segment_gm_name_sync
      END AS sales_segment_gm_name_sync_derived,
      revenue_group_level_1_name,
      revenue_group_level_2_name,
      SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
      SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
      SUM(IFNULL(pipeline, 0)) AS pipeline,
      SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
      UPPER(revenue_type) AS revenue_type,
      UPPER(revenue_group_subtype) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      portfolio_group_name_sync,
      portfolio_group_name_current,
      portfolio_parent_group_name_sync,
      nca_industry_pillar,
      publishing_division_group,
      publishing_division_parent,
      is_future_period_flag,
      ly_is_future_period_flag,
      xtend_flag,
      ny_is_future_period_flag,
      cost_model_type,
      CASE
        WHEN source_system_code = 'PLUTO' THEN NULL
        ELSE booking_line_created_date
      END AS booking_line_created_date_derived,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      portfolio_conformed_name_sync,
      publishing_division,
      booking_line_created_week,
      booking_line_created_month,
      booking_line_created_short_month,
      booking_line_created_quarter,
      booking_line_created_year,
      agency_parent,
      agency_group,
      agency_name,
      agency_number,
      calendar_month_name,
      calendar_year,
      classification_name,
      product_group,
      SUM(IFNULL(target, 0)) AS target,
      IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD_Name,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      IFNULL(GSD_JOIN_CURR.full_name, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(GSD_JOIN_CONFORM.full_name, 'VACANT') AS current_portfolio_conformed_owner_full
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
      LEFT JOIN
      SFCE_USER AS GSD_JOIN_CURR
      ON UPPER(current_portfolio_group_owner_current) = GSD_JOIN_CURR.login_name
      LEFT JOIN
      SFCE_USER AS GSD_JOIN_CONFORM
      ON UPPER(current_portfolio_conformed_owner_current) = GSD_JOIN_CONFORM.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
    GROUP BY ALL -- Group by all non-aggregated columns
  )
SELECT
  financial_year,
  financial_month,
  financial_short_month,
  financial_quarter,
  sales_segment_l_2_name_sync,
  portfolio_group_name_sync,
  GSD_Name,
  CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END AS Revenue_Type_or_XTEND,
  SAFE_CAST(financial_quarter AS FLOAT64) AS Financial_Quarter_Float,
  SUM(gross_revenue_amount) AS Total_Gross_Revenue_Amount,
  SUM(pipeline) AS Total_Pipeline_Amount,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS Current_FY_Gross_Revenue,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN pipeline ELSE 0 END) AS Current_FY_Pipeline,
  MAX(sales_segment_l_2_name_sync = 'Digital Other') AS Is_Digital_Other_Sales_Segment_Flag,
  SUM(adjustment_amount) AS Total_Adjustment_Amount,
  SUM(pub_lgb) AS Total_Pub_LGB,
  SUM(ss_lgb) AS Total_SS_LGB,
  SUM(target) AS Total_Target,
  Sales_Group,
  sales_segment_gm_name_sync_derived,
  DOW_Today
FROM
  base_data
GROUP BY
  financial_year,
  financial_month,
  financial_short_month,
  financial_quarter,
  sales_segment_l_2_name_sync,
  portfolio_group_name_sync,
  GSD_Name,
  Revenue_Type_or_XTEND,
  Financial_Quarter_Float,
  Sales_Group,
  sales_segment_gm_name_sync_derived,
  DOW_Today
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT financial_month) as unique_financial_months,
  COUNT(DISTINCT financial_week) as unique_financial_weeks,
  COUNT(DISTINCT sales_segment_l_2_name_sync) as unique_sales_segments,
  COUNT(DISTINCT portfolio_group_name_sync) as unique_portfolio_groups,
  MIN(financial_year) as earliest_financial_year,
  MAX(financial_year) as latest_financial_year,
  MIN(financial_month) as earliest_financial_month,
  MAX(financial_month) as latest_financial_month,
  APPROX_COUNT_DISTINCT(CONCAT(financial_year, '-', financial_month, '-', financial_week, '-', sales_segment_l_2_name_sync, '-', portfolio_group_name_sync)) as approx_unique_grain_combinations
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'));","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_check,
  CASE WHEN SUM(pipeline) > 0 THEN 'PASS' ELSE 'FAIL' END as total_pipeline_check,
  CASE WHEN MAX(financial_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as freshness_check,
  CASE WHEN COUNT(DISTINCT GSD_Name) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_gsd_check
FROM (
  WITH SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  )
  SELECT
    SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
    SUM(IFNULL(pipeline, 0)) AS pipeline,
    financial_year,
    IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD_Name
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
    LEFT JOIN SFCE_USER AS GSD_JOIN ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
  WHERE
    relative_fy_year_offset IN (-1, 0, 1)
    AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
    AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
    AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
    AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
  GROUP BY
    financial_year, GSD_Name
)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Relative FY Year Offset Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN relative_fy_year_offset IN (-1, 0, 1) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN relative_fy_year_offset IN (-1, 0, 1) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  financial_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Look at a broader range to validate filter
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  financial_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Publication Name Exclusion Logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  financial_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2;","SELECT 
  financial_year,
  financial_month,
  financial_week,
  sales_segment_l_2_name_sync,
  portfolio_group_name_sync,
  revenue_type,
  xtend_flag,
  gross_revenue_amount,
  pipeline,
  relative_fy_year_offset,
  revenue_transaction_status,
  style_name,
  source_publishing_division,
  publication_name,
  account_number,
  current_portfolio_group_owner_sync,
  current_portfolio_conformed_owner_sync,
  current_portfolio_group_owner_current,
  current_portfolio_conformed_owner_current,
  sales_segment_gm_name_sync
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  financial_year DESC, financial_month DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['-1', '0', '1'], 'context': 'relative_fy_year_offset filter for fiscal years', 'suggested_governance': 'Use a date dimension table with relative fiscal year flags or parameterize the offset.', 'impact': 'high', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'BILLED'"", ""'BOOKED'""], 'context': 'revenue_transaction_status filter', 'suggested_governance': 'Join to a `revenue_transaction_status_lookup` table.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'ROP COMPOSITE'""], 'context': 'style_name exclusion filter', 'suggested_governance': 'Manage excluded style names in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'MEDIUM RARE CONTENT AGENCY'""], 'context': 'source_publishing_division exclusion filter', 'suggested_governance': 'Manage excluded publishing divisions in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'""], 'context': 'Complex publication_name and account_number logic', 'suggested_governance': 'Externalize this logic into a configuration table or a dedicated view.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Digital Other'""], 'context': ""sales_segment_l_2_name_sync for 'Is Digital Other Sales Segment' metric"", 'suggested_governance': 'Use a sales segment dimension table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'Y'"", ""'XTEND'""], 'context': ""xtend_flag for 'Revenue Type or XTEND' metric"", 'suggested_governance': 'Define XTEND flag values in a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'MRCA'"", ""'Client'""], 'context': ""sales_segment_l_2_name_sync for 'Sales Group' derivation"", 'suggested_governance': 'Define sales group mappings in a configuration table.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM NSW'"", ""'KEY ACCOUNTS NSW RETAIL'"", ""'DIRECT NSW'"", ""'INDEPENDENT AGENCIES NSW'"", ""'PRESTIGE'"", ""'Ian Paterson'""], 'context': ""sales_segment_l_2_name_sync for 'sales_segment_gm_name_sync_derived' derivation"", 'suggested_governance': 'Define GM assignments in a configuration table or a dedicated mapping table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'""], 'context': 'source_system_code for booking_line_created_date derivation', 'suggested_governance': 'Manage source system codes in a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'thresholds', 'hardcoded_values': [""'VACANT'""], 'context': 'Default value for GSD names when null', 'suggested_governance': 'Standardize default values in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'other', 'hardcoded_values': [""'XXX'""], 'context': 'Default value for IFNULL checks in WHERE clauses', 'suggested_governance': 'This is a common pattern for `IFNULL` in BigQuery, but consider if `COALESCE` with a more meaningful default or direct `IS NULL` checks are better.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded relative fiscal year offsets with dynamic date calculations or parameters.', ""Replace hardcoded lookup values (e.g., 'BILLED', 'Digital Other', 'MRCA', 'Ian Paterson') with joins to governed reference tables or configuration tables."", 'Use configuration tables for complex business rules like publication name exclusions and sales segment GM assignments instead of hardcoded logic in SQL.']",32,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
"-- This query attempts to consolidate metrics from both primary data sources.
-- Note: Dimensions from different sources may not fully align, leading to NULLs for non-applicable metrics.
-- The 'Product_L3' dimension is used as a common join key where possible.

WITH
  exclude_lod_data AS (
    SELECT
      t0.Margin_Level AS margin_level,
      CASE
        WHEN ('Category' = 'Category')
        THEN t0.Category
        WHEN ('Category' = 'Product_Name')
        THEN t0.Product_Name
        WHEN ('Category' = 'Product_L1')
        THEN t0.Product_L1
        WHEN ('Category' = 'Product_L2')
        THEN t0.Product_L2
        WHEN ('Category' = 'Product_L3')
        THEN t0.Product_L3
        WHEN ('Category' = 'Product_L4')
        THEN t0.Product_L4
        ELSE t0.Category
      END AS selected_category_dimension,
      t0.Product_L1 AS product_l1,
      t0.Product_L2 AS product_l2,
      t0.Product_L3 AS product_l3,
      t0.Product_L4 AS product_l4,
      t0.Product_Name AS product_name,
      SUM(t0.Product_Revenue) AS total_product_revenue_exclude_lod,
      SUM(t0.Product_Revenue_Merged_OneRow) AS total_merged_product_revenue_exclude_lod
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
    GROUP BY
      1, 2, 3, 4, 5, 6, 7
  ),
  pacman_data AS (
    SELECT
      t0.Fiscal_Year AS fiscal_year,
      t0.Product_L3 AS product_l3,
      SUM(t0.Product_Revenue) AS total_pacman_product_revenue,
      SUM(t0.Fiscal_Year) AS total_fiscal_year_volume_pacman -- Note: Summing Fiscal_Year is unusual, interpreted literally.
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
    WHERE
      t0.Fiscal_Year = 2025 -- Hardcoded year, should be parameterized
    GROUP BY
      1, 2
  )
SELECT
  COALESCE(eld.product_l3, pd.product_l3) AS product_l3,
  eld.margin_level,
  eld.selected_category_dimension,
  eld.product_l1,
  eld.product_l2,
  eld.product_l4,
  eld.product_name,
  pd.fiscal_year,
  eld.total_product_revenue_exclude_lod,
  eld.total_merged_product_revenue_exclude_lod,
  pd.total_pacman_product_revenue,
  pd.total_fiscal_year_volume_pacman
FROM
  exclude_lod_data AS eld
FULL OUTER JOIN
  pacman_data AS pd
  ON eld.product_l3 = pd.product_l3
ORDER BY
  product_l3, fiscal_year
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'dv_exclude_product_l3_and_l4' AS table_name,
  COUNT(*) AS total_records,
  COUNT(DISTINCT Margin_Level) AS unique_margin_levels,
  COUNT(DISTINCT Category) AS unique_categories,
  COUNT(DISTINCT Product_L1) AS unique_product_l1s,
  COUNT(DISTINCT Product_L2) AS unique_product_l2s,
  COUNT(DISTINCT Product_L3) AS unique_product_l3s,
  COUNT(DISTINCT Product_L4) AS unique_product_l4s,
  COUNT(DISTINCT Product_Name) AS unique_product_names,
  MIN(Product_Revenue) AS min_product_revenue,
  MAX(Product_Revenue) AS max_product_revenue
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4`
UNION ALL
SELECT
  'dv_pacman_running_expense' AS table_name,
  COUNT(*) AS total_records,
  NULL AS unique_margin_levels,
  NULL AS unique_categories,
  NULL AS unique_product_l1s,
  NULL AS unique_product_l2s,
  COUNT(DISTINCT Product_L3) AS unique_product_l3s,
  NULL AS unique_product_l4s,
  NULL AS unique_product_names,
  MIN(Product_Revenue) AS min_product_revenue,
  MAX(Product_Revenue) AS max_product_revenue
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense`
LIMIT 100;","-- Quick validation that all metric calculations work syntactically and data exists
SELECT
  'Validation Check' AS test_type,
  CASE
    WHEN SUM(t0.Product_Revenue) > 0
    THEN 'PASS'
    ELSE 'FAIL'
  END AS exclude_lod_revenue_test,
  CASE
    WHEN SUM(t0.Product_Revenue_Merged_OneRow) > 0
    THEN 'PASS'
    ELSE 'FAIL'
  END AS exclude_lod_merged_revenue_test
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
UNION ALL
SELECT
  'Validation Check' AS test_type,
  CASE
    WHEN SUM(t0.Product_Revenue) > 0
    THEN 'PASS'
    ELSE 'FAIL'
  END AS pacman_revenue_test,
  CASE
    WHEN SUM(t0.Fiscal_Year) > 0
    THEN 'PASS'
    ELSE 'FAIL'
  END AS pacman_fiscal_year_sum_test
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE
  t0.Fiscal_Year = 2025
LIMIT 10;","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' AS validation_type,
  'Hardcoded Fiscal Year 2025 Filter' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(
    CASE
      WHEN Fiscal_Year = 2025
      THEN 1
      ELSE 0
    END
  ) AS records_passing_rule,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN Fiscal_Year = 2025
        THEN 1
        ELSE 0
      END
    ),
    COUNT(*)
  ) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense`
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'Dynamic Dimension Selection Logic (Hardcoded to Category)' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(
    CASE
      WHEN (
        CASE
          WHEN ('Category' = 'Category')
          THEN Category
          WHEN ('Category' = 'Product_Name')
          THEN Product_Name
          WHEN ('Category' = 'Product_L1')
          THEN Product_L1
          WHEN ('Category' = 'Product_L2')
          THEN Product_L2
          WHEN ('Category' = 'Product_L3')
          THEN Product_L3
          WHEN ('Category' = 'Product_L4')
          THEN Product_L4
          ELSE Category
        END
      ) IS NOT NULL
      THEN 1
      ELSE 0
    END
  ) AS records_passing_rule,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN (
          CASE
            WHEN ('Category' = 'Category')
            THEN Category
            WHEN ('Category' = 'Product_Name')
            THEN Product_Name
            WHEN ('Category' = 'Product_L1')
            THEN Product_L1
            WHEN ('Category' = 'Product_L2')
            THEN Product_L2
            WHEN ('Category' = 'Product_L3')
            THEN Product_L3
            WHEN ('Category' = 'Product_L4')
            THEN Product_L4
            ELSE Category
          END
        )
        IS NOT NULL
      THEN 1
      ELSE 0
    END
  ),
  COUNT(*)
  ) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4`
LIMIT 10;","-- Query to get representative sample data for further analysis
SELECT
  'dv_exclude_product_l3_and_l4' AS source_table,
  Margin_Level,
  Category,
  Product_L1,
  Product_L2,
  Product_L3,
  Product_L4,
  Product_Name,
  Product_Revenue,
  Product_Revenue_Merged_OneRow,
  NULL AS Fiscal_Year
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4`
WHERE
  Product_Revenue IS NOT NULL
LIMIT 50
UNION ALL
SELECT
  'dv_pacman_running_expense' AS source_table,
  NULL AS Margin_Level,
  NULL AS Category,
  NULL AS Product_L1,
  NULL AS Product_L2,
  Product_L3,
  NULL AS Product_L4,
  NULL AS Product_Name,
  Product_Revenue,
  NULL AS Product_Revenue_Merged_OneRow,
  Fiscal_Year
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense`
WHERE
  Fiscal_Year = 2025 -- Sample for the hardcoded year
  AND Product_Revenue IS NOT NULL
LIMIT 50;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'used as a filter for Fiscal_Year in dv_pacman_running_expense queries', 'suggested_fix': 'replace with a Looker Studio date parameter or CURRENT_DATE() + INTERVAL X YEAR for future-proofing', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Category'"", ""'Product_Name'"", ""'Product_L1'"", ""'Product_L2'"", ""'Product_L3'"", ""'Product_L4'""], 'context': ""string literals used in CASE statement to select a dimension. The condition `('Category' = 'Category')` is always true, making the dynamic selection static in this query."", 'suggested_governance': ""Ensure Looker Studio's parameterization correctly injects the selected dimension name, rather than relying on a hardcoded comparison that defaults to one option. If dynamic dimension selection is intended, the SQL should reflect the parameter's value directly."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded fiscal year '2025' with a Looker Studio date parameter (e.g., `_DS_FISCAL_YEAR`) to allow dynamic year selection."", 'Review the dynamic dimension selection logic in `dv_exclude_product_l3_and_l4` to ensure it correctly uses Looker Studio parameters for dimension switching, rather than the current static `CASE` statement.']",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"WITH base_data AS (
  SELECT
    t0.fin_adtype_name,
    t0.revenue_transaction_status,
    t0.sales_segment_l_2_name_sync,
    t0.source_publishing_division,
    t0.booking_number,
    t0.financial_year,
    t0.adsize_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    -- Common filters from Q1 & Q3
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    -- Union of all financial years and adtype names used across queries to ensure all relevant rows are considered
    AND (
        t0.financial_year IN ('2025', '2026')
        OR t0.fin_adtype_name IN (
            'Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)',
            'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)',
            'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)',
            'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)'
        )
    )
)
SELECT
  -- Key dimensions for grouping and analysis
  financial_year,
  fin_adtype_name,
  revenue_transaction_status,
  source_publishing_division,
  -- Conditional counts for each 'metric' based on their original query filters
  COUNT(DISTINCT CASE
    WHEN
      fin_adtype_name IN (
        'Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)',
        'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)',
        'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)'
      )
    THEN sales_segment_l_2_name_sync
    ELSE NULL
  END) AS distinct_sales_segments_l2_count,
  COUNT(DISTINCT CASE
    WHEN
      fin_adtype_name IN (
        'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)'
      )
      AND financial_year IN ('2026', '2025')
    THEN booking_number
    ELSE NULL
  END) AS distinct_booking_numbers_count,
  COUNT(DISTINCT CASE
    WHEN
      fin_adtype_name IN (
        'Audio (Non-Targeted)', 'Audio (Targeted)', 'Events (Non-Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)',
        'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Non-Targeted)', 'Social Display (Targeted)',
        'Standard Display (Non-Targeted)', 'Standard Display (Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)'
      )
      AND financial_year IN ('2025')
    THEN adsize_name
    ELSE NULL
  END) AS distinct_ad_sizes_count
FROM base_data
GROUP BY
  financial_year,
  fin_adtype_name,
  revenue_transaction_status,
  source_publishing_division
ORDER BY
  financial_year DESC, fin_adtype_name
LIMIT 100;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT booking_number) as unique_booking_numbers,
  COUNT(DISTINCT sales_segment_l_2_name_sync) as unique_sales_segments,
  COUNT(DISTINCT adsize_name) as unique_ad_sizes,
  MIN(financial_year) as earliest_financial_year,
  MAX(financial_year) as latest_financial_year
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year IN ('2025', '2026') -- Focus on relevant years
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_presence_test,
  CASE WHEN COUNT(DISTINCT revenue_transaction_status) >= 2 THEN 'PASS' ELSE 'FAIL' END as status_diversity_test,
  CASE WHEN MAX(financial_year) >= '2025' THEN 'PASS' ELSE 'FAIL' END as financial_year_freshness_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year IN ('2025', '2026')
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'revenue_status_filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_revenue_status
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year IN ('2025', '2026')
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'source_publishing_division_exclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_division_exclusion
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year IN ('2025', '2026');","SELECT 
  financial_year,
  fin_adtype_name,
  revenue_transaction_status,
  sales_segment_l_2_name_sync,
  source_publishing_division,
  booking_number,
  adsize_name
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year IN ('2025', '2026')
ORDER BY financial_year DESC, booking_number
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'financial year filter in multiple queries', 'suggested_fix': 'replace with dynamic financial year calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or `CURRENT_FINANCIAL_YEAR()`) or a parameter', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '2026', 'original_format': '2026', 'context': 'financial year filter in query 2', 'suggested_fix': 'replace with dynamic financial year calculation or a parameter', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'revenue transaction status filter', 'suggested_governance': 'join to a `revenue_transaction_status_lookup` table', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'source publishing division exclusion filter', 'suggested_governance': 'use a configuration table for excluded `source_publishing_division` values', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Audio (Targeted)'"", ""'Audio (Non-Targeted)'"", ""'Events (Non-Targeted)'"", ""'Events (Targeted)'"", ""'Rich Media (Non-Targeted)'"", ""'Rich Media (Targeted)'"", ""'Social Display (Targeted)'"", ""'Social Display (Non-Targeted)'"", ""'Standard Display (Targeted)'"", ""'Standard Display (Non-Targeted)'"", ""'TTIV (Targeted)'"", ""'TTIV (Non-Targeted)'"", ""'Content Discovery (Non-Targeted)'"", ""'Content Discovery (Targeted)'"", ""'Native (Non-Targeted)'"", ""'Native (Targeted)'""], 'context': 'fin_adtype_name filters across all queries', 'suggested_governance': 'join to a `fin_adtype_name_lookup` table or use a parameter for ad type categories', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded financial years with date parameters or relative date functions (e.g., `CURRENT_FINANCIAL_YEAR()`).', 'Replace hardcoded `fin_adtype_name` values with joins to a governed reference table or allow multi-select parameters for ad type categories.', 'Replace hardcoded `revenue_transaction_status` and `source_publishing_division` values with joins to governed reference tables.']",34,f65a9149-93b4-4aa9-aef6-d12002853222
"WITH base_data AS (
  SELECT
    t0.account_number,
    t0.advertiser_name,
    t0.advertiser_parent,
    SAFE_CAST(t0.financial_month AS FLOAT64) AS financial_month,
    t0.financial_year,
    t0.gross_revenue_amount,
    t0.gross_revenue_ex_adj_amount,
    t0.invoice_number,
    t0.rebate_3_amount,
    t0.adjustment_amount,
    t0.revenue_group_subtype,
    t0.revenue_transaction_status,
    t0.revenue_type,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.unified_publication_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND t0.financial_year IS NOT NULL
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.revenue_type IN ('Print', 'Digital')
    AND t0.revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital')
    -- Apply common date/period filters, using parameters for flexibility
    AND t0.financial_year = '2025' -- Example: Replace with {{financial_year_param}}
    AND SAFE_CAST(t0.financial_month AS FLOAT64) = 10.000000 -- Example: Replace with {{financial_month_param}}
    -- Specific filters from original queries that might need to be handled at dashboard level or as conditional metrics:
    -- AND t0.rebate_3_amount != 0.000000
    -- AND t0.account_number = '4039072'
)
SELECT
  account_number,
  advertiser_name,
  advertiser_parent,
  financial_month,
  financial_year,
  invoice_number,
  revenue_type,
  source_publishing_division,
  source_system_code,
  unified_publication_name,
  revenue_group_subtype,
  revenue_transaction_status,
  SUM(gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj,
  SUM(rebate_3_amount) AS total_rebate_3_amount,
  SUM(adjustment_amount) AS total_adjustment_amount,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount
FROM base_data
GROUP BY
  account_number,
  advertiser_name,
  advertiser_parent,
  financial_month,
  financial_year,
  invoice_number,
  revenue_type,
  source_publishing_division,
  source_system_code,
  unified_publication_name,
  revenue_group_subtype,
  revenue_transaction_status
ORDER BY financial_year DESC, financial_month DESC, advertiser_name ASC
LIMIT 10000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT account_number) as unique_accounts,
  COUNT(DISTINCT advertiser_name) as unique_advertisers,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT financial_month) as unique_financial_months,
  MIN(financial_year) as earliest_financial_year,
  MAX(financial_year) as latest_financial_year,
  MIN(SAFE_CAST(financial_month AS FLOAT64)) as earliest_financial_month,
  MAX(SAFE_CAST(financial_month AS FLOAT64)) as latest_financial_month,
  APPROX_COUNT_DISTINCT(CONCAT(account_number, '-', invoice_number)) as approx_unique_transactions
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Adjust for relevant period
  AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 -- Adjust for relevant period
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN SUM(rebate_3_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as rebate_amount_test,
  CASE WHEN COUNT(DISTINCT account_number) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_account_test,
  CASE WHEN MAX(financial_year) = '2025' THEN 'PASS' ELSE 'FAIL' END as financial_year_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE revenue_transaction_status IN ('Booked', 'Billed')
  AND financial_year = '2025'
  AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Adjust for relevant period
  AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 -- Adjust for relevant period
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Source Publishing Division Exclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Adjust for relevant period
  AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000; -- Adjust for relevant period","SELECT
  account_number,
  advertiser_name,
  financial_year,
  financial_month,
  gross_revenue_amount,
  gross_revenue_ex_adj_amount,
  rebate_3_amount,
  adjustment_amount,
  revenue_type,
  revenue_group_subtype,
  revenue_transaction_status,
  source_publishing_division,
  invoice_number
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Adjust for relevant period
  AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 -- Adjust for relevant period
  AND revenue_transaction_status IN ('Booked', 'Billed')
ORDER BY gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'financial_year filter', 'suggested_fix': 'replace with parameter or relative financial year function', 'impact': 'high', 'urgency': 'high'}, {'date_value': '10', 'original_format': '10.000000', 'context': 'financial_month filter (October)', 'suggested_fix': 'replace with parameter or relative financial month function', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'revenue_transaction_status filter', 'suggested_governance': 'join to a transaction_status_lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'source_publishing_division exclusion filter', 'suggested_governance': 'manage excluded divisions in a configuration table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Print'"", ""'Digital'""], 'context': 'revenue_type filter', 'suggested_governance': 'join to a revenue_type_lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic Source'"", ""'Print'"", ""'Digital'""], 'context': 'revenue_group_subtype filter', 'suggested_governance': 'join to a revenue_group_subtype_lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'4039072'""], 'context': 'account_number filter', 'suggested_governance': 'replace with parameter or lookup from a customer/account master table', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded financial year and month with dashboard parameters (e.g., `{{financial_year_param}}`, `{{financial_month_param}}`) or relative date functions.', 'Replace hardcoded lookup values for `revenue_transaction_status`, `revenue_type`, `revenue_group_subtype` with joins to governed reference tables.', 'Manage excluded `source_publishing_division` values in a configuration table instead of hardcoded logic.', 'Parameterize specific `account_number` filters for dynamic analysis.']",35,a17622e2-ad43-49cc-b3c5-19c95036fd14
"-- This query attempts to consolidate key metrics from both data sources into a single view.
-- Note: Direct joining of 'ia' and 'revenue_movement' tables is assumed to be possible on 'agency_parent' and financial period dimensions.
-- If the underlying data grains or join keys are not perfectly aligned, this query might need further refinement (e.g., separate CTEs with UNION ALL or more complex joins).

WITH
  current_date_sydney AS (
    SELECT
      DATE(CURRENT_TIMESTAMP(), 'Australia/Sydney') AS current_report_date
  ),
  ia_metrics AS (
    SELECT
      t0.agency_parent,
      t0.booking_line_created_date,
      t0.gross_revenue_amount,
      t0.relative_cal_month_offset,
      t0.relative_cal_year_offset,
      t0.relative_fy_month_offset,
      t0.relative_fy_year_offset,
      t0.revenue_group_subtype,
      -- Derived financial period dimensions for joining
      CASE WHEN t0.relative_fy_year_offset = 0 THEN 'Current FY' WHEN t0.relative_fy_year_offset = -1 THEN 'Prior FY' ELSE 'Other FY' END AS financial_year_label,
      CASE WHEN t0.financial_quarter IS NOT NULL THEN SAFE_CAST(t0.financial_quarter AS STRING) ELSE NULL END AS financial_quarter_label,
      CASE WHEN t0.financial_month IS NOT NULL THEN SAFE_CAST(t0.financial_month AS STRING) ELSE NULL END AS financial_month_label,
      -- Adjusted Financial Month (from Q2 logic)
      CASE WHEN t0.financial_month > 6 THEN t0.financial_month - 6 ELSE t0.financial_month + 6 END AS adjusted_financial_month_calc
    FROM
      `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
    WHERE
      t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL
  ),
  revenue_movement_metrics AS (
    SELECT
      t0.account_number,
      t0.agency_parent,
      t0.movement_date,
      t0.GROSS_AMOUNT_DIFF,
      t0.financial_month,
      t0.financial_year,
      t0.relative_fy_year_offset,
      t0.financial_short_month,
      t0.movement_financial_week,
      t0.max_week,
      t0.min_week,
      -- Derived financial period dimensions for joining
      CASE WHEN t0.relative_fy_year_offset = 0 THEN 'Current FY' WHEN t0.relative_fy_year_offset = -1 THEN 'Prior FY' ELSE 'Other FY' END AS financial_year_label,
      CASE WHEN t0.financial_quarter IS NOT NULL THEN SAFE_CAST(t0.financial_quarter AS STRING) ELSE NULL END AS financial_quarter_label,
      CASE WHEN t0.financial_month IS NOT NULL THEN SAFE_CAST(t0.financial_month AS STRING) ELSE NULL END AS financial_month_label,
      -- Financial Quarter (from Q3 logic)
      CASE
        WHEN (t0.financial_month IN (1, 2, 3)) THEN 'Q1'
        WHEN (t0.financial_month IN (4, 5, 6)) THEN 'Q2'
        WHEN (t0.financial_month IN (7, 8, 9)) THEN 'Q3'
        WHEN (t0.financial_month IN (10, 11, 12)) THEN 'Q4'
        ELSE NULL
      END AS financial_quarter_derived_q3,
      -- Movement Financial Week Formatted (from Q3 logic)
      CASE WHEN t0.movement_financial_week = t0.max_week THEN 'Current Week' ELSE CONCAT(' Week ', SAFE_CAST(t0.movement_financial_week AS STRING)) END AS movement_financial_week_formatted,
      -- Is Current Week Filter (from Q3 logic)
      (t0.movement_financial_week = t0.min_week) AS is_current_week_filter
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
  )
SELECT
  COALESCE(ia.agency_parent, rm.agency_parent) AS agency_parent,
  COALESCE(ia.financial_year_label, rm.financial_year_label) AS financial_year_label,
  COALESCE(ia.financial_quarter_label, rm.financial_quarter_label, rm.financial_quarter_derived_q3) AS financial_quarter_label,
  COALESCE(ia.financial_month_label, rm.financial_month_label) AS financial_month_label,
  ia.adjusted_financial_month_calc AS adjusted_financial_month,
  rm.account_number,
  rm.movement_date,
  rm.financial_short_month,
  rm.movement_financial_week_formatted,
  SUM(CASE WHEN ia.relative_fy_year_offset = 0 THEN ia.gross_revenue_amount ELSE 0 END) AS current_year_gross_revenue,
  SUM(CASE WHEN ia.relative_fy_year_offset = -1 THEN ia.gross_revenue_amount ELSE 0 END) AS prior_year_gross_revenue,
  SUM(
    CASE
      WHEN ia.relative_fy_month_offset < -12 THEN (CASE WHEN ia.relative_fy_year_offset = -1 THEN ia.gross_revenue_amount ELSE 0 END)
      ELSE (CASE WHEN ia.relative_fy_year_offset = -1 AND ia.booking_line_created_date <= DATE_SUB(current_date_sydney.current_report_date, INTERVAL 365 DAY) THEN ia.gross_revenue_amount ELSE 0 END)
    END
  ) AS prior_year_gross_revenue_ytd_or_full,
  SUM(CASE WHEN rm.is_current_week_filter != TRUE THEN rm.GROSS_AMOUNT_DIFF ELSE 0 END) AS gross_amount_difference
FROM
  ia_metrics ia
FULL OUTER JOIN
  revenue_movement_metrics rm
  ON ia.agency_parent = rm.agency_parent
  AND ia.financial_year_label = rm.financial_year_label
  AND COALESCE(ia.financial_quarter_label, ia.adjusted_financial_month_calc) = COALESCE(rm.financial_quarter_label, rm.financial_quarter_derived_q3, rm.financial_month_label)
  -- More sophisticated date/period joining might be needed based on exact business logic
CROSS JOIN
  current_date_sydney
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8, 9
ORDER BY
  agency_parent, financial_year_label, financial_quarter_label, financial_month_label
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.sbx_dcp.ia`) AS total_records_ia,
  (SELECT COUNT(DISTINCT agency_parent) FROM `ncau-data-newsquery-prd.sbx_dcp.ia`) AS unique_agency_parents_ia,
  (SELECT MIN(booking_line_created_date) FROM `ncau-data-newsquery-prd.sbx_dcp.ia`) AS earliest_date_ia,
  (SELECT MAX(booking_line_created_date) FROM `ncau-data-newsquery-prd.sbx_dcp.ia`) AS latest_date_ia,
  (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`) AS total_records_revenue_movement,
  (SELECT COUNT(DISTINCT account_number) FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`) AS unique_account_numbers_revenue_movement,
  (SELECT MIN(movement_date) FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`) AS earliest_date_revenue_movement,
  (SELECT MAX(movement_date) FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`) AS latest_date_revenue_movement
FROM
  DUMMY_TABLE -- Or any existing table to run a single query
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  (SELECT SUM(gross_revenue_amount) FROM `ncau-data-newsquery-prd.sbx_dcp.ia` WHERE booking_line_created_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND (revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR revenue_group_subtype IS NULL)) AS recent_ia_revenue,
  (SELECT SUM(GROSS_AMOUNT_DIFF) FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` WHERE movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND (movement_financial_week != min_week)) AS recent_revenue_movement_diff,
  CASE WHEN (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.sbx_dcp.ia` WHERE booking_line_created_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) > 0 THEN 'PASS' ELSE 'FAIL' END AS ia_freshness_test,
  CASE WHEN (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` WHERE movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_movement_freshness_test
FROM
  DUMMY_TABLE -- Or any existing table to run a single query
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Exclude Programmatic Exchange Revenue' AS rule_name,
  COUNT(*) AS total_ia_records,
  SUM(CASE WHEN revenue_group_subtype = 'PROGRAMMATIC EXCHANGE' THEN 1 ELSE 0 END) AS programmatic_exchange_records,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_group_subtype = 'PROGRAMMATIC EXCHANGE' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS programmatic_exchange_percentage
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia`
WHERE
  booking_line_created_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'Exclude Current Week Revenue Movement' AS rule_name,
  COUNT(*) AS total_revenue_movement_records,
  SUM(CASE WHEN movement_financial_week = min_week THEN 1 ELSE 0 END) AS current_week_movement_records,
  SAFE_DIVIDE(SUM(CASE WHEN movement_financial_week = min_week THEN 1 ELSE 0 END), COUNT(*)) * 100 AS current_week_movement_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE
  movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'sbx_dcp.ia' AS source_table,
  agency_parent,
  booking_line_created_date,
  gross_revenue_amount,
  relative_fy_year_offset,
  relative_fy_month_offset,
  revenue_group_subtype,
  NULL AS account_number,
  NULL AS movement_date,
  NULL AS GROSS_AMOUNT_DIFF,
  NULL AS financial_month,
  NULL AS financial_year,
  NULL AS financial_short_month,
  NULL AS movement_financial_week,
  NULL AS max_week,
  NULL AS min_week
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia`
WHERE
  booking_line_created_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 100
UNION ALL
SELECT
  'asl_finance_derived.revenue_movement' AS source_table,
  agency_parent,
  NULL AS booking_line_created_date,
  NULL AS gross_revenue_amount,
  relative_fy_year_offset,
  NULL AS relative_fy_month_offset,
  NULL AS revenue_group_subtype,
  account_number,
  movement_date,
  GROSS_AMOUNT_DIFF,
  financial_month,
  financial_year,
  financial_short_month,
  movement_financial_week,
  max_week,
  min_week
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE
  movement_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 100;","{'hardcoded_dates': [{'date_value': '23/05/2025', 'original_format': '2025-05-23 01:19:32.916346+00', 'context': ""Used as a fixed 'current date' for YTD calculations in Query 1."", 'suggested_fix': ""Replace with `CURRENT_DATE('Australia/Sydney')` or a dashboard date parameter."", 'impact': 'high', 'urgency': 'high'}, {'date_value': '22/06/2025', 'original_format': '2025-06-22 22:46:58.786738+00', 'context': ""Used as a fixed 'current date' for YTD calculations in Query 2."", 'suggested_fix': ""Replace with `CURRENT_DATE('Australia/Sydney')` or a dashboard date parameter."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'FY'""], 'context': ""Used in `CASE WHEN ('FY' = 'FY')` which is always true, making the conditional logic redundant."", 'suggested_governance': 'Remove redundant `CASE` statements.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'thresholds', 'hardcoded_values': ['-12'], 'context': ""Threshold for `relative_fy_month_offset` to determine if a period is 'more than a year ago' for YTD calculation."", 'suggested_governance': 'Consider externalizing such thresholds if they are subject to change or vary by business unit.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['6'], 'context': 'Threshold for `financial_month` to adjust month numbers (e.g., `financial_month - 6` or `+ 6`).', 'suggested_governance': 'Externalize this adjustment logic to a configuration table if the financial year start is variable.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'PROGRAMMATIC EXCHANGE'""], 'context': 'Used to filter out specific revenue subtypes.', 'suggested_governance': 'Manage excluded revenue types in a reference table or parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'""], 'context': 'Mapping month short names to month numbers.', 'suggested_governance': 'Use a date dimension table or built-in date functions for month number extraction.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Q1'"", ""'Q2'"", ""'Q3'"", ""'Q4'""], 'context': 'Mapping financial months to financial quarters.', 'suggested_governance': 'Manage financial quarter definitions in a date dimension or configuration table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Current Week'""], 'context': 'Label for the current financial week.', 'suggested_governance': ""Can be kept as a display label, but the underlying logic for 'current week' should be dynamic."", 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', 'Replace hardcoded lookup values for month/quarter mapping with joins to governed reference tables or more robust date functions.', 'Use configuration tables for business rules (e.g., `PROGRAMMATIC EXCHANGE` exclusion list, financial month adjustment logic) instead of hardcoded logic within queries.']",36,fed70b12-c274-4cde-9920-592ca4c4dab0
"WITH base_data AS (
  SELECT
    t0.advertiser_parent,
    t0.financial_quarter,
    t0.financial_short_month,
    t0.booking_line_created_date,
    t0.fix_date_lod,
    t0.gross_revenue_amount,
    t0.relative_fy_year_offset,
    t0.revenue_group_subtype,
    t0.revenue_type,
    t0.sales_segment_l_2_name,
    t0.sales_segment_l_2_name_sync,
    t0.unified_publication_name,
    DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS report_as_of_date_hardcoded
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
),
derived_dimensions AS (
  SELECT
    advertiser_parent,
    financial_quarter,
    financial_short_month,
    sales_segment_l_2_name,
    unified_publication_name,
    revenue_group_subtype,
    revenue_type,
    relative_fy_year_offset,
    booking_line_created_date,
    fix_date_lod,
    gross_revenue_amount,
    report_as_of_date_hardcoded,
    DATETIME_ADD(SAFE_CAST(report_as_of_date_hardcoded AS DATETIME), INTERVAL -365 DAY) AS report_date_minus_1_year,
    SAFE_CAST(financial_quarter AS INT64) AS financial_quarter_int,
    CONCAT('Q', SAFE_CAST(financial_quarter AS STRING)) AS quarter_string,
    CASE
      WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1'
      WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2'
      ELSE SAFE_CAST(financial_quarter AS STRING)
    END AS half_year,
    CONCAT(SAFE_CAST(financial_short_month AS STRING), ' ', CONCAT('Q',SAFE_CAST(financial_quarter AS STRING)), ' ', CASE WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1' WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2' ELSE SAFE_CAST(financial_quarter AS STRING) END) AS composite_quarter_half_year,
    (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
    PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS booking_date_parsed,
    (relative_fy_year_offset = 0) AS is_current_fy,
    (relative_fy_year_offset = 1) AS is_previous_fy,
    (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_group_subtype,
    (revenue_type = 'DIGITAL') AS is_digital_revenue_type,
    (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment,
    UPPER(SAFE_CAST(unified_publication_name AS STRING)) AS unified_publication_name_upper,
    (UPPER(SAFE_CAST(unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) AS is_specific_publication_type
  FROM base_data
),
calculated_metrics AS (
  SELECT
    advertiser_parent,
    financial_quarter,
    financial_short_month,
    sales_segment_l_2_name,
    unified_publication_name,
    revenue_group_subtype,
    revenue_type,
    relative_fy_year_offset,
    booking_line_created_date,
    fix_date_lod,
    gross_revenue_amount,
    report_as_of_date_hardcoded,
    report_date_minus_1_year,
    financial_quarter_int,
    quarter_string,
    half_year,
    composite_quarter_half_year,
    is_not_doubleclick_advertiser,
    booking_date_parsed,
    is_current_fy,
    is_previous_fy,
    is_digital_revenue_group_subtype,
    is_digital_revenue_type,
    is_digital_other_sales_segment,
    unified_publication_name_upper,
    is_specific_publication_type,
    CASE WHEN is_current_fy THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue,
    CASE WHEN is_previous_fy THEN gross_revenue_amount ELSE 0 END AS previous_fy_gross_revenue,
    CASE
      WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_sales_segment AND is_not_doubleclick_advertiser)
      THEN fix_date_lod
      ELSE booking_date_parsed
    END AS digital_revenue_condition_date,
    CASE
      WHEN (is_current_fy AND is_specific_publication_type) THEN gross_revenue_amount
      WHEN (is_current_fy AND (SAFE_CAST(CASE WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_sales_segment AND is_not_doubleclick_advertiser) THEN fix_date_lod ELSE booking_date_parsed END AS DATETIME) <= SAFE_CAST(report_date_minus_1_year AS DATETIME))) THEN gross_revenue_amount
      ELSE NULL
    END AS revenue_based_on_fy_pub_date_logic
  FROM derived_dimensions
)
SELECT
  advertiser_parent,
  financial_quarter,
  financial_short_month,
  sales_segment_l_2_name,
  unified_publication_name,
  revenue_group_subtype,
  revenue_type,
  relative_fy_year_offset,
  booking_line_created_date,
  fix_date_lod,
  financial_quarter_int,
  quarter_string,
  half_year,
  composite_quarter_half_year,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(current_fy_gross_revenue) AS sum_current_fy_gross_revenue,
  SUM(previous_fy_gross_revenue) AS sum_previous_fy_gross_revenue,
  SUM(SAFE_DIVIDE(current_fy_gross_revenue, 1000)) AS sum_current_fy_gross_revenue_k,
  SUM(SAFE_DIVIDE(previous_fy_gross_revenue, 1000)) AS sum_previous_fy_gross_revenue_k,
  SUM(COALESCE(revenue_based_on_fy_pub_date_logic, 0)) AS sum_final_revenue_metric_raw,
  SUM(SAFE_DIVIDE(COALESCE(revenue_based_on_fy_pub_date_logic, 0), 1000)) AS sum_final_revenue_metric_k
FROM calculated_metrics
WHERE
  composite_quarter_half_year IN ('Jul Q1 H1')
  AND sales_segment_l_2_name IN ('Consortium QLD')
GROUP BY
  advertiser_parent,
  financial_quarter,
  financial_short_month,
  sales_segment_l_2_name,
  unified_publication_name,
  revenue_group_subtype,
  revenue_type,
  relative_fy_year_offset,
  booking_line_created_date,
  fix_date_lod,
  financial_quarter_int,
  quarter_string,
  half_year,
  composite_quarter_half_year
ORDER BY
  advertiser_parent ASC
LIMIT 100;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.advertiser_parent) as unique_advertiser_parents,
  COUNT(DISTINCT t0.financial_quarter) as unique_financial_quarters,
  COUNT(DISTINCT t0.financial_short_month) as unique_financial_months,
  COUNT(DISTINCT t0.sales_segment_l_2_name) as unique_sales_segments,
  COUNT(DISTINCT t0.unified_publication_name) as unique_publications,
  MIN(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date)) as earliest_booking_date,
  MAX(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date)) as latest_booking_date,
  MIN(t0.fix_date_lod) as earliest_fix_date_lod,
  MAX(t0.fix_date_lod) as latest_fix_date_lod,
  APPROX_COUNT_DISTINCT(CONCAT(t0.advertiser_parent, t0.booking_line_created_date, t0.gross_revenue_amount)) as approx_unique_transactions
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(t0.gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_parent) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_count_test,
  CASE WHEN MAX(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNTIF(t0.relative_fy_year_offset = 0) > 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_data_test,
  CASE WHEN COUNTIF(t0.relative_fy_year_offset = 1) > 0 THEN 'PASS' ELSE 'FAIL' END as previous_fy_data_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Digital Revenue Type Consistency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.revenue_group_subtype = 'DIGITAL' AND t0.revenue_type = 'DIGITAL' THEN 1 ELSE 0 END) as digital_revenue_consistent_records,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_group_subtype = 'DIGITAL' AND t0.revenue_type = 'DIGITAL' THEN 1 ELSE 0 END), COUNT(*)) * 100 as consistency_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'FY Offset Logic Check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.relative_fy_year_offset IN (0, 1) THEN 1 ELSE 0 END) as valid_fy_offset_records,
  SAFE_DIVIDE(SUM(CASE WHEN t0.relative_fy_year_offset IN (0, 1) THEN 1 ELSE 0 END), COUNT(*)) * 100 as valid_fy_offset_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR);","SELECT 
  t0.advertiser_parent,
  t0.financial_quarter,
  t0.financial_short_month,
  t0.booking_line_created_date,
  t0.fix_date_lod,
  t0.gross_revenue_amount,
  t0.relative_fy_year_offset,
  t0.revenue_group_subtype,
  t0.revenue_type,
  t0.sales_segment_l_2_name,
  t0.sales_segment_l_2_name_sync,
  t0.unified_publication_name
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
ORDER BY t0.booking_line_created_date DESC, t0.gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '23/06/2025', 'original_format': '2025-06-23 10:00:32.354880+00', 'context': ""Used as a fixed 'report as of' date (clmn0_) and then for calculating a date 365 days prior (clmn11_) for revenue logic. This date is in the future relative to current date, but likely represents a specific FY end or reporting period for FY25."", 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard parameter (e.g., @report_date) to make the dashboard dynamic and relevant to the current financial period.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jul Q1 H1'""], 'context': 'Filter for a specific composite quarter/half-year string (clmn11_).', 'suggested_governance': 'Use date parameters to derive the current quarter/half-year dynamically, or join to a date dimension table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'""], 'context': ""Exclusion filter for advertiser_parent (clmn1_ != 'DOUBLECLICK')."", 'suggested_governance': 'Manage excluded advertisers in a configuration table or parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '1'], 'context': 'Used for `relative_fy_year_offset` to identify current (0) and previous (1) financial years.', 'suggested_governance': 'These are likely standard, but could be mapped to descriptive labels in a lookup table if needed for clarity or future changes.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DIGITAL'""], 'context': 'Filters for `revenue_group_subtype` and `revenue_type`.', 'suggested_governance': 'Manage revenue types/subtypes in a governed reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Digital Other'""], 'context': 'Filter for `sales_segment_l_2_name_sync`.', 'suggested_governance': 'Manage sales segments in a governed reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'OUTSTREAM'"", ""'XTEND'"", ""'EDMEDIA'"", ""'ECOMMERCE'""], 'context': 'Specific `unified_publication_name` types used in revenue calculation logic.', 'suggested_governance': 'Manage publication types in a governed reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Consortium QLD'""], 'context': 'Filter for `sales_segment_l_2_name`.', 'suggested_governance': 'Manage sales segments in a governed reference table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'$'"", ""'$\\'000'""], 'context': 'Conditional logic to determine if revenue should be displayed in thousands or as raw values. This is a display concern embedded in the calculation.', 'suggested_governance': 'This logic should be handled at the presentation layer (Looker Studio field settings) or via a dashboard parameter, not hardcoded in the SQL query.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`).', ""Replace hardcoded lookup values (e.g., 'Jul Q1 H1', 'Consortium QLD', publication types, revenue types) with joins to governed reference tables or dashboard parameters."", 'Use configuration tables for business rules (e.g., specific publication types, advertiser exclusions) instead of hardcoded logic within the query.', ""Implement a dashboard parameter for currency display (e.g., 'display_in_thousands' boolean) to control the division by 1000, rather than hardcoding the '$' vs '$\\'000' string comparison.""]",37,9269e9c6-1ad0-4415-96c3-aca8a710ba01
"-- This SQL calculates key sales performance metrics, inferring common metrics (sales_amount, deal_id) that would typically be present in an 'adsales_performance' table for a 'Team Sales Performance' dashboard.
-- The original queries provided were primarily for populating filter dropdowns (dimensions).

WITH base_sales_data AS (
  SELECT
    t0.advertiser_name,
    t0.portfolio_conformed_name_sync,
    t0.sales_segment_l_2_name_sync,
    -- Inferred metrics based on dashboard name 'Team Sales Performance'
    -- Replace 'sales_amount_column' and 'deal_id_column' with actual column names if known.
    COALESCE(t0.sales_amount_column, 0) AS sales_amount, -- Assuming a sales amount column
    t0.deal_id_column AS deal_id, -- Assuming a deal identifier column
    t0.transaction_date_column AS transaction_date -- Assuming a date column for filtering
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Add a date filter for performance dashboards, assuming a 'transaction_date_column'
  WHERE t0.transaction_date_column >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Example: last 90 days
)
SELECT
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync,
  COUNT(DISTINCT deal_id) AS number_of_deals,
  SUM(sales_amount) AS total_sales_amount,
  SAFE_DIVIDE(SUM(sales_amount), COUNT(DISTINCT deal_id)) AS average_deal_value,
  COUNT(*) AS record_count_for_group
FROM base_sales_data
GROUP BY
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync
ORDER BY
  total_sales_amount DESC
LIMIT 1000;","-- This SQL helps understand the data structure, grain, and key dimensions of the primary data source.
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT portfolio_conformed_name_sync) AS unique_portfolios,
  COUNT(DISTINCT sales_segment_l_2_name_sync) AS unique_sales_segments,
  MIN(transaction_date_column) AS earliest_transaction_date, -- Assuming a transaction_date_column
  MAX(transaction_date_column) AS latest_transaction_date, -- Assuming a transaction_date_column
  APPROX_COUNT_DISTINCT(deal_id_column) AS approx_unique_deals -- Assuming a deal_id_column
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE transaction_date_column >= DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY) -- Sample for recent data
LIMIT 1;","-- This SQL provides a quick validation of data presence and basic metric calculations.
SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_presence_test,
  CASE WHEN COUNT(DISTINCT advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_distinct_test,
  CASE WHEN SUM(sales_amount_column) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS sales_amount_not_null_test, -- Assuming sales_amount_column
  CASE WHEN MAX(transaction_date_column) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test -- Assuming transaction_date_column
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE transaction_date_column >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) -- Check recent data
LIMIT 1;","-- This SQL validates a common business rule: ensuring key dimensions are not null.
SELECT
  'Business Rule Validation' AS validation_type,
  'Non-Null Key Dimensions' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN advertiser_name IS NOT NULL AND portfolio_conformed_name_sync IS NOT NULL AND sales_segment_l_2_name_sync IS NOT NULL THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN advertiser_name IS NOT NULL AND portfolio_conformed_name_sync IS NOT NULL AND sales_segment_l_2_name_sync IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE transaction_date_column >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Focus on recent data
LIMIT 1;","-- This SQL retrieves a representative sample of raw data for further analysis.
SELECT
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync,
  sales_amount_column AS sales_amount, -- Inferred sales amount
  deal_id_column AS deal_id, -- Inferred deal ID
  transaction_date_column AS transaction_date, -- Inferred transaction date
  -- Add any other relevant columns from the table
  *
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE transaction_date_column >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) -- Sample from recent data
ORDER BY transaction_date_column DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'GAD RAM A1'"", ""'HBT RAM A1'"", ""'VIC DIRECT A7'"", ""'VIC DIRECT A8'"", ""'VIC DIRECT A9'""], 'context': ""Used in a WHERE IN clause to filter 'portfolio_conformed_name_sync'. This is likely for a specific filter selection in the dashboard."", 'suggested_governance': 'These values should ideally be managed in a reference table (e.g., `dim_portfolio`) and joined, or passed as a parameter from the dashboard UI.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded portfolio names with a join to a governed reference table (e.g., `dim_portfolio`) or use a Looker Studio parameter for dynamic filtering.', 'Introduce date parameters (e.g., `start_date`, `end_date`) for all date filters instead of hardcoded relative dates (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)`).']",38,80ca81f3-0671-40ef-a0a9-825a1580ca1b
"-- This query attempts to unify metrics from both subscription and circulation data sources.
-- Note: A direct join between these two tables on common business keys (e.g., state, publication, fiscal_week_id) 
-- is not explicitly evident from the provided SQL queries. 
-- This query assumes a conceptual join on 'state' and 'fiscal_week_id' for demonstration purposes, 
-- but actual join keys might differ in the underlying data model.

WITH SubscriptionsData AS (
  SELECT
    t0.fiscal_week_id,
    t0.category_name,
    t0.gl_publication_code,
    t0.add_volume,
    t0.closing_base,
    t0.earned_amount,
    t0.opening_base,
    t0.red_volume,
    t0.transfer_in,
    t0.transfer_out
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
  WHERE t0.fiscal_week_id = 202535 -- Example filter, replace with parameter or date range
),
CirculationData AS (
  SELECT
    -- Assuming a fiscal_week_id can be derived or joined for circulation data
    -- For this example, we'll use a placeholder or derive from a date column if available.
    -- If no time dimension exists, this data might be static or aggregated differently.
    CAST(NULL AS INT64) AS fiscal_week_id, -- Placeholder, replace with actual fiscal_week_id if available
    t0.state,
    t0.channel,
    t0.home_del_charge,
    t0.returns_credit_amount,
    t0.rev_adjust
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` AS t0
)
SELECT
  COALESCE(s.fiscal_week_id, c.fiscal_week_id) AS fiscal_week_id,
  s.category_name,
  s.gl_publication_code,
  c.state,
  c.channel,
  SUM(s.add_volume) AS total_add_volume,
  SUM(s.closing_base) AS total_closing_base,
  SUM(s.earned_amount) AS total_earned_amount,
  SUM(s.opening_base) AS total_opening_base,
  SUM(s.red_volume) AS total_red_volume,
  SUM(s.transfer_in) AS total_transfer_in,
  SUM(s.transfer_out) AS total_transfer_out,
  SUM(c.home_del_charge) AS total_home_del_charge,
  SUM(c.returns_credit_amount) AS total_returns_credit_amount,
  SUM(c.rev_adjust) AS total_rev_adjust
FROM SubscriptionsData s
FULL OUTER JOIN CirculationData c
  ON s.fiscal_week_id = c.fiscal_week_id -- Conceptual join on fiscal week
  -- AND s.state = c.state -- Add if state is available in subscriptions data
GROUP BY 1, 2, 3, 4, 5
ORDER BY 1 DESC
LIMIT 1000;
","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'dv_tm1_pbf_subscriptions' AS table_name,
  COUNT(*) AS total_records,
  COUNT(DISTINCT fiscal_week_id) AS unique_fiscal_weeks,
  COUNT(DISTINCT category_name) AS unique_categories,
  COUNT(DISTINCT gl_publication_code) AS unique_publications,
  MIN(fiscal_week_id) AS earliest_fiscal_week,
  MAX(fiscal_week_id) AS latest_fiscal_week,
  APPROX_COUNT_DISTINCT(CONCAT(CAST(fiscal_week_id AS STRING), category_name, gl_publication_code)) AS approx_unique_grain
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE fiscal_week_id >= 202401 -- Example filter for recent data
UNION ALL
SELECT
  'dv_tm1_pbf_circulation_actuals' AS table_name,
  COUNT(*) AS total_records,
  NULL AS unique_fiscal_weeks, -- No explicit fiscal_week_id in this table from provided SQL
  NULL AS unique_categories,
  NULL AS unique_publications,
  NULL AS earliest_fiscal_week,
  NULL AS latest_fiscal_week,
  APPROX_COUNT_DISTINCT(CONCAT(channel, state)) AS approx_unique_grain
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`;
","-- Quick validation that all metric calculations work syntactically and data exists
SELECT
  'Validation Check - Subscriptions' AS test_type,
  CASE WHEN SUM(earned_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS earned_amount_test,
  CASE WHEN COUNT(DISTINCT fiscal_week_id) > 0 THEN 'PASS' ELSE 'FAIL' END AS fiscal_week_freshness_test,
  MAX(fiscal_week_id) AS latest_fiscal_week_in_data
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE fiscal_week_id >= 202401 -- Example filter for recent data
LIMIT 1
UNION ALL
SELECT
  'Validation Check - Circulation' AS test_type,
  CASE WHEN SUM(home_del_charge) > 0 THEN 'PASS' ELSE 'FAIL' END AS home_del_charge_test,
  CASE WHEN COUNT(DISTINCT state) > 0 THEN 'PASS' ELSE 'FAIL' END AS state_data_test,
  NULL AS latest_fiscal_week_in_data -- No explicit time dimension
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`
LIMIT 1;
","-- Query to validate key business logic, filters, and data quality
-- Example: Check for negative volumes or amounts where they shouldn't exist
SELECT
  'Business Rule Validation - Subscriptions' AS validation_type,
  'Negative Volumes/Amounts Check' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN add_volume < 0 OR closing_base < 0 OR earned_amount < 0 OR opening_base < 0 OR red_volume < 0 OR transfer_in < 0 OR transfer_out < 0 THEN 1 ELSE 0 END) AS records_failing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN add_volume < 0 OR closing_base < 0 OR earned_amount < 0 OR opening_base < 0 OR red_volume < 0 OR transfer_in < 0 OR transfer_out < 0 THEN 1 ELSE 0 END), COUNT(*)) * 100 AS fail_rate_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE fiscal_week_id = 202535 -- Specific week from query
UNION ALL
SELECT
  'Business Rule Validation - Circulation' AS validation_type,
  'Negative Charges/Adjustments Check' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN home_del_charge < 0 OR returns_credit_amount < 0 OR rev_adjust < 0 THEN 1 ELSE 0 END) AS records_failing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN home_del_charge < 0 OR returns_credit_amount < 0 OR rev_adjust < 0 THEN 1 ELSE 0 END), COUNT(*)) * 100 AS fail_rate_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`;
","-- Query to get representative sample data for further analysis
SELECT
  'dv_tm1_pbf_subscriptions' AS source_table,
  fiscal_week_id,
  category_name,
  gl_publication_code,
  add_volume,
  closing_base,
  earned_amount,
  opening_base,
  red_volume,
  transfer_in,
  transfer_out,
  NULL AS channel,
  NULL AS state,
  NULL AS home_del_charge,
  NULL AS returns_credit_amount,
  NULL AS rev_adjust
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE fiscal_week_id = 202535 -- Specific week from query
ORDER BY earned_amount DESC
LIMIT 250
UNION ALL
SELECT
  'dv_tm1_pbf_circulation_actuals' AS source_table,
  NULL AS fiscal_week_id,
  NULL AS category_name,
  NULL AS gl_publication_code,
  NULL AS add_volume,
  NULL AS closing_base,
  NULL AS earned_amount,
  NULL AS opening_base,
  NULL AS red_volume,
  NULL AS transfer_in,
  NULL AS transfer_out,
  channel,
  state,
  home_del_charge,
  returns_credit_amount,
  rev_adjust
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`
ORDER BY home_del_charge DESC
LIMIT 250;
","{'hardcoded_dates': [{'date_value': '202535', 'original_format': 'Integer (Fiscal Week ID)', 'context': 'used as a specific fiscal week filter in dv_tm1_pbf_subscriptions query', 'suggested_fix': 'replace with a Looker Studio date parameter or relative fiscal week calculation (e.g., CURRENT_FISCAL_WEEK_ID())', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': []}","['Replace hardcoded fiscal week IDs with date parameters or relative fiscal week functions to allow dynamic reporting.', ""If 'state' or 'channel' are common dimensions across both datasets, consider creating a governed dimension table for consistent filtering and joining.""]",39,23c8b213-a9f0-4158-b8fa-bff14425abb5
"-- This query shows the distinct combinations of key dimensions under the most comprehensive filter conditions observed in the provided SQL samples. The original queries primarily extract dimension values for dashboard filters, not aggregate measures. Actual pacing metrics (e.g., revenue, volume) are not present in the provided SQL samples.
WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.financial_week,
    t0.revenue_group_subtype
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
)
SELECT
  financial_year,
  financial_week,
  revenue_group_subtype,
  COUNT(*) AS record_count_for_combination
FROM base_data
WHERE
  financial_year IN ('2024', '2025') -- Most comprehensive year filter
  AND (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR financial_week IS NULL) -- Most comprehensive week filter
GROUP BY
  financial_year,
  financial_week,
  revenue_group_subtype
ORDER BY
  financial_year DESC, financial_week DESC
LIMIT 100;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.financial_year) as unique_financial_years,
  COUNT(DISTINCT t0.financial_week) as unique_financial_weeks,
  COUNT(DISTINCT t0.revenue_group_subtype) as unique_revenue_subtypes,
  MIN(t0.financial_year) as earliest_financial_year,
  MAX(t0.financial_year) as latest_financial_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN COUNT(DISTINCT financial_year) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_test,
  CASE WHEN COUNT(DISTINCT revenue_group_subtype) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_subtype_test,
  CASE WHEN COUNT(DISTINCT financial_week) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_week_test,
  CASE WHEN SUM(CASE WHEN financial_year = '2025' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as has_2025_data_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_year IN ('2024', '2025')
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Exclude Year-End Financial Weeks' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR financial_week IS NULL) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR financial_week IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE financial_year IN ('2024', '2025')
LIMIT 100;","SELECT 
  t0.financial_year,
  t0.financial_week,
  t0.revenue_group_subtype
  -- The provided SQL queries only expose these three dimensions. 
  -- If the 'adsales_performance' table contains measures like revenue, impressions, etc., they would be added here.
  -- Example placeholder for potential measures:
  -- , t0.revenue
  -- , t0.impressions
  -- , t0.clicks
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE t0.financial_year IN ('2024', '2025')
ORDER BY t0.financial_year DESC, t0.financial_week DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'2025'"", ""'2024'""], 'context': 'Financial years used for filtering data in multiple queries.', 'suggested_governance': 'Replace with Looker Studio date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` and `EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))`) to ensure dynamic updates and reduce maintenance.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'SUNDRY ADSALES OVERLAY'""], 'context': 'Specific revenue group subtype used for filtering in one query.', 'suggested_governance': 'Store revenue group subtypes in a governed reference table and join to it, or use a Looker Studio parameter for user selection to allow dynamic filtering and maintain data consistency.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['47', '48', '49', '50', '51', '52'], 'context': 'Specific financial weeks excluded from analysis in one query, likely representing year-end or holiday periods.', 'suggested_governance': 'Manage excluded weeks in a dedicated calendar or configuration table, allowing for easier updates, transparency of business rules, and consistency across reports.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded financial years with Looker Studio date parameters (e.g., 'Start Year', 'End Year') or relative date functions."", 'Replace hardcoded revenue group subtypes with a Looker Studio parameter that allows users to select from available values, or join to a governed reference table.', 'Replace hardcoded financial week exclusions with a configuration table that defines holiday/excluded periods, or derive from a comprehensive calendar dimension table.']",40,3ee20092-1897-49b7-8bcd-4157d5f816eb
"-- This is the main SQL to run for consolidated analysis of key dimensions and potential metrics.
-- Assumes 'revenue' and 'volume' are common metrics in an adsales dashboard, even if not explicitly in provided queries.
SELECT
  t0.publication_date,
  t0.advertiser_name,
  t0.employee_name,
  t0.agency_group,
  t0.unified_publication_name,
  CASE WHEN (TRUE) THEN t0.financial_year ELSE t0.calendar_year END AS financial_year_selected, -- Replace TRUE with Looker Studio parameter
  CASE WHEN (TRUE) THEN t0.financial_short_month ELSE t0.calendar_month_short_name END AS financial_month_selected, -- Replace TRUE with Looker Studio parameter
  CASE WHEN (TRUE) THEN t0.portfolio_conformed_name_current ELSE t0.portfolio_conformed_name_sync END AS portfolio_name_selected, -- Replace TRUE with Looker Studio parameter
  CASE WHEN (t0.dow = 'Monday') THEN 'Monday' WHEN (t0.dow = 'Tuesday') THEN ' Tuesday' WHEN (t0.dow = 'Wednesday') THEN '  Wednesday' WHEN (t0.dow = 'Thursday') THEN '   Thursday' WHEN (t0.dow = 'Friday') THEN '    Friday' WHEN (t0.dow = 'Saturday') THEN '     Saturday' WHEN (t0.dow = 'Sunday') THEN '      Sunday' ELSE NULL END AS day_of_week_formatted,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.advertiser_name) AS unique_advertisers
  -- Add other relevant measures if available in the source table, e.g.:
  -- SUM(t0.revenue_column) AS total_revenue,
  -- SUM(t0.impressions_column) AS total_impressions,
  -- COUNT(DISTINCT t0.campaign_id) AS unique_campaigns
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.publication_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) -- Example: Last 1 year, replace with parameter
  AND t0.financial_year IN (CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS STRING), CAST(EXTRACT(YEAR FROM CURRENT_DATE()) + 1 AS STRING)) -- Example: Current and next financial year, replace with parameter
  -- Add other common filters here, e.g., t0.advertiser_name IN (...) or t0.employee_name IN (...)
GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9
ORDER BY t0.publication_date DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.publication_date) AS unique_publication_dates,
  COUNT(DISTINCT t0.advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT t0.employee_name) AS unique_employees,
  COUNT(DISTINCT t0.agency_group) AS unique_agency_groups,
  MIN(t0.publication_date) AS earliest_publication_date,
  MAX(t0.publication_date) AS latest_publication_date,
  APPROX_COUNT_DISTINCT(t0.transaction_id) AS approx_unique_transactions -- Assuming a transaction_id exists
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.publication_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_presence_test,
  CASE WHEN MAX(t0.publication_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(DISTINCT t0.financial_year) > 0 THEN 'PASS' ELSE 'FAIL' END AS financial_year_data_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.publication_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Financial vs Calendar Year Logic' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN (t0.financial_year IS NOT NULL AND t0.calendar_year IS NOT NULL AND t0.financial_year != t0.calendar_year) THEN 1 ELSE 0 END) AS records_with_diff_years,
  SUM(CASE WHEN (t0.financial_short_month IS NOT NULL AND t0.calendar_month_short_name IS NOT NULL AND t0.financial_short_month != t0.calendar_month_short_name) THEN 1 ELSE 0 END) AS records_with_diff_months,
  SUM(CASE WHEN (t0.portfolio_conformed_name_current IS NOT NULL AND t0.portfolio_conformed_name_sync IS NOT NULL AND t0.portfolio_conformed_name_current != t0.portfolio_conformed_name_sync) THEN 1 ELSE 0 END) AS records_with_diff_portfolios
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.publication_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY);","SELECT
  t0.publication_date,
  t0.advertiser_name,
  t0.employee_name,
  t0.agency_group,
  t0.unified_publication_name,
  t0.calendar_month_short_name,
  t0.calendar_year,
  t0.financial_short_month,
  t0.financial_year,
  t0.portfolio_conformed_name_current,
  t0.portfolio_conformed_name_sync,
  t0.dow
  -- Add any other relevant raw columns for detailed analysis
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.publication_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY
  t0.publication_date DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""'2025'"", 'context': 'used as a filter for financial year', 'suggested_fix': 'replace with Looker Studio parameter or relative year (e.g., EXTRACT(YEAR FROM CURRENT_DATE()) + 1)', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024', 'original_format': ""'2024'"", 'context': 'used as an exclusion filter for financial year', 'suggested_fix': 'replace with Looker Studio parameter or relative year (e.g., EXTRACT(YEAR FROM CURRENT_DATE()))', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'""], 'context': 'financial month filters', 'suggested_governance': 'use Looker Studio dropdown parameter for month selection', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'NSW IA C3'""], 'context': 'portfolio name filter', 'suggested_governance': 'use Looker Studio dropdown parameter for portfolio selection', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Marley-Kale Kentia'""], 'context': 'employee name filter', 'suggested_governance': 'use Looker Studio dropdown parameter for employee selection', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Australian Meat Processor Corporation'"", ""'Australian Pork'"", ""'CMC Markets'"", ""'Coco Republic'"", ""'Dry July Limited'"", ""'Fred Hollows Foundation'"", ""'LGT Crestone'""], 'context': 'advertiser name filter', 'suggested_governance': 'use Looker Studio dropdown parameter for advertiser selection', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Vogue Australia'""], 'context': 'unified publication name filter', 'suggested_governance': 'use Looker Studio dropdown parameter for publication selection', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Fin'"", ""'Curr'""], 'context': ""static conditions in CASE WHEN for dynamic dimension selection (e.g., 'Fin' vs 'Calendar' year/month, 'Current' vs 'Sync' portfolio)"", 'suggested_governance': 'replace with Looker Studio parameters to allow user selection of financial/calendar or current/sync views', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates (years) with date parameters or relative date functions (e.g., CURRENT_DATE(), EXTRACT(YEAR FROM CURRENT_DATE())).', 'Replace hardcoded lookup values (months, portfolio names, employee names, advertiser names, publication names) with Looker Studio dropdown parameters or filters.', ""Implement Looker Studio parameters to control the 'Financial' vs 'Calendar' and 'Current' vs 'Sync' dimension selection logic, replacing the hardcoded 'Fin' and 'Curr' conditions.""]",41,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters
WITH base_data AS (
  SELECT
    t0.masthead,
    CASE
      WHEN (t0.masthead = 'TA') THEN 'The Australian'
      WHEN (t0.masthead = 'DT') THEN 'Daily Telegraph'
      WHEN (t0.masthead = 'HS') THEN 'Herald Sun'
      WHEN (t0.masthead = 'WT') THEN 'Weekly Times'
      WHEN (t0.masthead = 'GA') THEN 'Geelong Advertiser'
      WHEN (t0.masthead = 'CM') THEN 'Courier Mail'
      WHEN (t0.masthead = 'CP') THEN 'Cairns Post'
      WHEN (t0.masthead = 'TB') THEN 'Townsville Bulletin'
      WHEN (t0.masthead = 'TC') THEN 'Toowoomba Chronicles'
      WHEN (t0.masthead = 'GC') THEN 'Gold Coast'
      WHEN (t0.masthead = 'TM') THEN 'The Mercury'
      WHEN (t0.masthead = 'NT') THEN 'NT News'
      WHEN (t0.masthead = 'AA') THEN 'The Advertiser'
      ELSE NULL
    END AS masthead_display_name,
    CASE
      WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'States and Community'
      WHEN (t0.masthead = 'TA') THEN 'The Australian and Prestige'
      ELSE NULL
    END AS masthead_group_states_community,
    CASE
      WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'Regionals'
      ELSE NULL
    END AS masthead_group_metro_regionals,
    t0.fy_year,
    t0.fy_week_of_year,
    -- Parameters for dynamic date calculations (replace hardcoded values)
    -- DECLARE report_date DATE DEFAULT DATE('2025-03-30');
    -- DECLARE fiscal_year_start_date DATETIME DEFAULT DATETIME '2024-07-03T00:00:00';
    EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE('2025-03-30'))) - 1 AS current_report_day_of_week,
    DATETIME_DIFF(SAFE_CAST(DATE('2025-03-30') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS current_report_week_from_base,

    t0.Always_on_Digital_Sales_V,
    t0.Breach_Sales_V,
    t0.Closing_Base_3rd_Party_V,
    t0.Essentials_V,
    t0.General_Offer_Sales_V,
    t0.Net_Cancels_V,
    t0.Net_Growth_3rd_Party_V,
    t0.Net_Growth_Consumer_V,
    t0.Net_Growth_incl_3rd_Party_V,
    t0.Other_Sales_V,
    t0.Revenue_3rd_Party_V,
    t0.Revenue_Campus_V,
    t0.Revenue_Consumer_V,
    t0.Revenue_Corp_V,
    t0.Revenue_Other_V,
    t0.Switches_V,
    t0.Total_Cancels_excluding_3rd_Party_V,
    t0.Total_Cancels_including_3rd_Party_V,
    t0.Total_Closing_Base_V,
    t0.Total_Revenue_V,
    t0.Total_Weekly_Sales_V,

    t0.Always_on_Digital_Sales,
    t0.Breach_Sales,
    t0.Closing_Base_3rd_Party,
    t0.Closing_Base_3rd_Party_APLS,
    t0.Closing_Base_3rd_Party_GPLA,
    t0.Closing_Base_Consumer,
    t0.Essentials,
    t0.Failed_Payment_Volume,
    t0.General_Offer_Sales,
    t0.Net_Cancels,
    t0.Net_Growth_3rd_Party,
    t0.Net_Growth_3rd_Party_APLS,
    t0.Net_Growth_3rd_Party_GPLA,
    t0.Net_Growth_Consumer,
    t0.Net_Growth_incl_3rd_Party,
    t0.Other_Sales,
    t0.Revenue_3rd_Party,
    t0.Revenue_3rd_Party_APLS,
    t0.Revenue_3rd_Party_GPLA,
    t0.Revenue_Campus,
    t0.Revenue_Consumer,
    t0.Revenue_Corp,
    t0.Revenue_Other,
    t0.Switches,
    t0.Total_Cancels_excluding_3rd_Party,
    t0.Total_Cancels_including_3rd_Party,
    t0.Total_Closing_Base,
    t0.Total_Revenue,
    t0.Total_Weekly_Sales,

    t0.Always_on_Digital_Sales_6W,
    t0.Breach_Sales_6W,
    t0.Closing_Base_3rd_Party_6W,
    t0.Closing_Base_3rd_Party_APLS_6W,
    t0.Closing_Base_3rd_Party_GPLA_6W,
    t0.Essentials_6W,
    t0.Failed_Payment_Volume_6W,
    t0.General_Offer_Sales_6W,
    t0.Net_Cancels_6W,
    t0.Net_Growth_3rd_Party_6W,
    t0.Net_Growth_Consumer_6W,
    t0.Net_Growth_incl_3rd_party_6W,
    t0.Other_Sales_6W,
    t0.Revenue_3rd_Party_6W,
    t0.Revenue_3rd_Party_APLS_6W,
    t0.Revenue_3rd_Party_GPLA_6W,
    t0.Revenue_Campus_6W,
    t0.Revenue_Consumer_6W,
    t0.Revenue_Corp_6W,
    t0.Revenue_Other_6W,
    t0.Switches_6W,
    t0.Total_Cancels_excluding_3rd_Party_6W,
    t0.Total_Cancels_including_3rd_Party_6W,
    t0.Total_Closing_Base_6W,
    t0.Total_Revenue_6W,
    t0.Total_Weekly_Sales_6W
  FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
  WHERE t0.fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Example: filter for last 2 fiscal years
)
SELECT
  masthead,
  masthead_display_name,
  masthead_group_states_community,
  masthead_group_metro_regionals,
  fy_year,
  fy_week_of_year,
  -- Current Week Metrics (from Q1/Q2)
  SUM(Always_on_Digital_Sales) AS current_always_on_digital_sales,
  SUM(Breach_Sales) AS current_breach_sales,
  SUM(Closing_Base_3rd_Party) AS current_closing_base_3rd_party,
  SUM(Closing_Base_3rd_Party_APLS) AS current_closing_base_3rd_party_apls,
  SUM(Closing_Base_3rd_Party_GPLA) AS current_closing_base_3rd_party_gpla,
  SUM(Closing_Base_Consumer) AS current_closing_base_consumer,
  SUM(Essentials) AS current_essentials,
  SUM(Failed_Payment_Volume) AS current_failed_payment_volume,
  SUM(General_Offer_Sales) AS current_general_offer_sales,
  SUM(Net_Cancels) AS current_net_cancels,
  SUM(Net_Growth_3rd_Party) AS current_net_growth_3rd_party,
  SUM(Net_Growth_3rd_Party_APLS) AS current_net_growth_3rd_party_apls,
  SUM(Net_Growth_3rd_Party_GPLA) AS current_net_growth_3rd_party_gpla,
  SUM(Net_Growth_Consumer) AS current_net_growth_consumer,
  SUM(Net_Growth_incl_3rd_Party) AS current_net_growth_incl_3rd_party,
  SUM(Other_Sales) AS current_other_sales,
  SUM(Revenue_3rd_Party) AS current_revenue_3rd_party,
  SUM(Revenue_3rd_Party_APLS) AS current_revenue_3rd_party_apls,
  SUM(Revenue_3rd_Party_GPLA) AS current_revenue_3rd_party_gpla,
  SUM(Revenue_Campus) AS current_revenue_campus,
  SUM(Revenue_Consumer) AS current_revenue_consumer,
  SUM(Revenue_Corp) AS current_revenue_corp,
  SUM(Revenue_Other) AS current_revenue_other,
  SUM(Switches) AS current_switches,
  SUM(Total_Cancels_excluding_3rd_Party) AS current_total_cancels_excluding_3rd_party,
  SUM(Total_Cancels_including_3rd_Party) AS current_total_cancels_including_3rd_party,
  SUM(Total_Closing_Base) AS current_total_closing_base,
  SUM(Total_Revenue) AS current_total_revenue,
  SUM(Total_Weekly_Sales) AS current_total_weekly_sales,

  -- Versioned Metrics (from Q1)
  SUM(Always_on_Digital_Sales_V) AS versioned_always_on_digital_sales,
  SUM(Breach_Sales_V) AS versioned_breach_sales,
  SUM(Closing_Base_3rd_Party_V) AS versioned_closing_base_3rd_party,
  SUM(Essentials_V) AS versioned_essentials,
  SUM(General_Offer_Sales_V) AS versioned_general_offer_sales,
  SUM(Net_Cancels_V) AS versioned_net_cancels,
  SUM(Net_Growth_3rd_Party_V) AS versioned_net_growth_3rd_party,
  SUM(Net_Growth_Consumer_V) AS versioned_net_growth_consumer,
  SUM(Net_Growth_incl_3rd_Party_V) AS versioned_net_growth_incl_3rd_party,
  SUM(Other_Sales_V) AS versioned_other_sales,
  SUM(Revenue_3rd_Party_V) AS versioned_revenue_3rd_party,
  SUM(Revenue_Campus_V) AS versioned_revenue_campus,
  SUM(Revenue_Consumer_V) AS versioned_revenue_consumer,
  SUM(Revenue_Corp_V) AS versioned_revenue_corp,
  SUM(Revenue_Other_V) AS versioned_revenue_other,
  SUM(Switches_V) AS versioned_switches,
  SUM(Total_Cancels_excluding_3rd_Party_V) AS versioned_total_cancels_excluding_3rd_party,
  SUM(Total_Cancels_including_3rd_Party_V) AS versioned_total_cancels_including_3rd_party,
  SUM(Total_Closing_Base_V) AS versioned_total_closing_base,
  SUM(Total_Revenue_V) AS versioned_total_revenue,
  SUM(Total_Weekly_Sales_V) AS versioned_total_weekly_sales,

  -- 6-Week Metrics (from Q3)
  SUM(Always_on_Digital_Sales_6W) AS six_week_always_on_digital_sales,
  SUM(Breach_Sales_6W) AS six_week_breach_sales,
  SUM(Closing_Base_3rd_Party_6W) AS six_week_closing_base_3rd_party,
  SUM(Closing_Base_3rd_Party_APLS_6W) AS six_week_closing_base_3rd_party_apls,
  SUM(Closing_Base_3rd_Party_GPLA_6W) AS six_week_closing_base_3rd_party_gpla,
  SUM(Essentials_6W) AS six_week_essentials,
  SUM(Failed_Payment_Volume_6W) AS six_week_failed_payment_volume,
  SUM(General_Offer_Sales_6W) AS six_week_general_offer_sales,
  SUM(Net_Cancels_6W) AS six_week_net_cancels,
  SUM(Net_Growth_3rd_Party_6W) AS six_week_net_growth_3rd_party,
  SUM(Net_Growth_Consumer_6W) AS six_week_net_growth_consumer,
  SUM(Net_Growth_incl_3rd_party_6W) AS six_week_net_growth_incl_3rd_party,
  SUM(Other_Sales_6W) AS six_week_other_sales,
  SUM(Revenue_3rd_Party_6W) AS six_week_revenue_3rd_party,
  SUM(Revenue_3rd_Party_APLS_6W) AS six_week_revenue_3rd_party_apls,
  SUM(Revenue_3rd_Party_GPLA_6W) AS six_week_revenue_3rd_party_gpla,
  SUM(Revenue_Campus_6W) AS six_week_revenue_campus,
  SUM(Revenue_Consumer_6W) AS six_week_revenue_consumer,
  SUM(Revenue_Corp_6W) AS six_week_revenue_corp,
  SUM(Revenue_Other_6W) AS six_week_revenue_other,
  SUM(Switches_6W) AS six_week_switches,
  SUM(Total_Cancels_excluding_3rd_Party_6W) AS six_week_total_cancels_excluding_3rd_party,
  SUM(Total_Cancels_including_3rd_Party_6W) AS six_week_total_cancels_including_3rd_party,
  SUM(Total_Closing_Base_6W) AS six_week_total_closing_base,
  SUM(Total_Revenue_6W) AS six_week_total_revenue,
  SUM(Total_Weekly_Sales_6W) AS six_week_total_weekly_sales
FROM base_data
WHERE
  fy_year = 2025 -- This should be a parameter or relative to CURRENT_DATE()
  AND (
    (fy_week_of_year = 37) -- For current week metrics (Q1/Q2 logic, based on 2025-03-30 report date)
    OR
    (fy_week_of_year BETWEEN 26 AND 31) -- For 6-week metrics (Q3 logic, based on 2025-02-10 report date)
  )
  -- The 'All Mastheads' filter is implicitly handled by not filtering on masthead_display_name
  -- If a specific masthead filter was applied, it would be added here.
GROUP BY
  masthead,
  masthead_display_name,
  masthead_group_states_community,
  masthead_group_metro_regionals,
  fy_year,
  fy_week_of_year
ORDER BY
  fy_year DESC, fy_week_of_year DESC, masthead
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT fy_year) as unique_fiscal_years,
  COUNT(DISTINCT fy_week_of_year) as unique_fiscal_weeks,
  COUNT(DISTINCT masthead) as unique_mastheads,
  MIN(fy_year) as earliest_fiscal_year,
  MAX(fy_year) as latest_fiscal_year,
  MIN(fy_week_of_year) as earliest_fiscal_week,
  MAX(fy_week_of_year) as latest_fiscal_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Sample recent data","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(Total_Revenue) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_test,
  CASE WHEN COUNT(DISTINCT masthead) > 0 THEN 'PASS' ELSE 'FAIL' END as masthead_count_test,
  CASE WHEN MAX(fy_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year = 2025 AND fy_week_of_year = 37
LIMIT 1","SELECT 
  'Business Rule Validation' as validation_type,
  'Masthead Grouping - Metro' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN masthead IN ('CM', 'DT', 'HS', 'AA') THEN 1 ELSE 0 END) as records_matching_metro_group,
  SAFE_DIVIDE(SUM(CASE WHEN masthead IN ('CM', 'DT', 'HS', 'AA') THEN 1 ELSE 0 END), COUNT(*)) * 100 as metro_group_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year = 2025 AND fy_week_of_year = 37
UNION ALL
SELECT 
  'Business Rule Validation' as validation_type,
  'Fiscal Year 2025 Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN fy_year = 2025 THEN 1 ELSE 0 END) as records_matching_fy2025,
  SAFE_DIVIDE(SUM(CASE WHEN fy_year = 2025 THEN 1 ELSE 0 END), COUNT(*)) * 100 as fy2025_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1","SELECT 
  masthead,
  fy_year,
  fy_week_of_year,
  Total_Revenue,
  Total_Weekly_Sales,
  Net_Growth_Consumer,
  Revenue_Consumer,
  Closing_Base_Consumer,
  Failed_Payment_Volume
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year = 2025 AND fy_week_of_year BETWEEN 26 AND 37
ORDER BY fy_year DESC, fy_week_of_year DESC, masthead
LIMIT 500","{'hardcoded_dates': [{'date_value': '03/07/2024', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as baseline date in DATETIME_DIFF calculation for week number. This is likely the start of the fiscal year.', 'suggested_fix': 'Replace with a parameter (e.g., @fiscal_year_start_date) or a dynamic calculation based on CURRENT_DATE() and fiscal year rules.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '30/03/2025', 'original_format': '2025-03-30 22:32:24.807251+00', 'context': ""Used as the 'current' report date for week number calculations in Query 1 and 2. This is a future date."", 'suggested_fix': 'Replace with CURRENT_DATE() or a parameter (e.g., @report_date) to reflect the actual reporting period.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '10/02/2025', 'original_format': '2025-02-10 00:11:05.853262+00', 'context': ""Used as the 'current' report date for week number calculations in Query 3. This is a future date."", 'suggested_fix': 'Replace with CURRENT_DATE() or a parameter (e.g., @report_date) to reflect the actual reporting period.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'TA'"", ""'DT'"", ""'HS'"", ""'WT'"", ""'GA'"", ""'CM'"", ""'CP'"", ""'TB'"", ""'TC'"", ""'GC'"", ""'TM'"", ""'NT'"", ""'AA'""], 'context': 'Masthead codes hardcoded in CASE statements for display names and groupings.', 'suggested_governance': 'Join to a `masthead_lookup` or `dim_masthead` table that contains codes, display names, and group classifications.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['2025', '2024'], 'context': 'Fiscal year filters (e.g., `fy_year = 2025`, `fy_year = 2024`) are hardcoded.', 'suggested_governance': 'Use dynamic fiscal year calculations (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or a fiscal calendar dimension) or parameters.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '1', '2', '3', '4', '5', '48', '49', '50', '51', '52'], 'context': 'Specific week numbers (e.g., `fy_week_of_year = 37`, `fy_week_of_year BETWEEN 26 AND 31`, `fy_week_of_year >= 48`) and day of week thresholds (`<= 2`, `<= 5`) are hardcoded.', 'suggested_governance': 'Use parameters for week ranges or dynamic calculations based on the report date and fiscal calendar rules.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'States and Community'"", ""'The Australian and Prestige'"", ""'Metro'"", ""'Regionals'""], 'context': 'Masthead group names are hardcoded in CASE statements.', 'suggested_governance': 'Manage these categories in a lookup table associated with mastheads.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': ['(0 = 1)', '(0 = 2)', '(0 = 3)', '(0 = 4)', '(0 = 5)'], 'context': ""Boolean conditions that are always false, likely placeholders for dynamic week filters that are currently inactive or set to 'All'."", 'suggested_governance': ""Implement dynamic filter logic using parameters or conditional SQL that omits the filter when 'All' is selected, rather than using always-false conditions."", 'impact': 'low', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters (e.g., `@report_date`, `@fiscal_year_start_date`) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB`).', 'Replace hardcoded lookup values (masthead codes, group names) with joins to governed reference tables (e.g., `dim_masthead`).', 'Use configuration tables or dynamic logic for business rules (e.g., fiscal year/week calculations, specific week filters) instead of hardcoded values in queries.']",42,57d87efe-c112-4d42-be1b-045f0c8ca73e
"-- This query calculates the core business metrics (amount and volume, total and for specific revenue types) by fiscal year week number.
-- It also includes the latest data load time as a separate, non-aggregated metric.

WITH CirculationMetrics AS (
  SELECT
    t0.fy_year_week_number AS fy_year_week_number,
    SUM(t0.amount) AS total_amount,
    SUM(t0.volume) AS total_volume,
    SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.amount ELSE 0 END) AS amount_revenue_type_03,
    SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.volume ELSE 0 END) AS volume_revenue_type_03
  FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
  GROUP BY 1
),
LatestLoadTime AS (
  SELECT
    MIN(snap_load_time) AS latest_snapshot_load_time
  FROM (
    SELECT
      datetime(max(dw_prstn_load_timestamp), 'Australia/Sydney') AS snap_load_time
    FROM
      `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
    WHERE
      source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
    UNION ALL
    SELECT
      datetime(max(dw_bdm_load_timestamp), 'Australia/Sydney') AS snap_load_time
    FROM
      `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`
  ) AS load_time
)
SELECT
  cm.fy_year_week_number,
  cm.total_amount,
  cm.total_volume,
  cm.amount_revenue_type_03,
  cm.volume_revenue_type_03,
  (SELECT latest_snapshot_load_time FROM LatestLoadTime) AS latest_data_load_time
FROM CirculationMetrics cm
ORDER BY cm.fy_year_week_number DESC
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling for asl_finance.v_asl_circulation_dq_check
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT fy_year_week_number) as unique_fy_week_numbers,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  MIN(fy_year_week_number) as earliest_fy_week_number,
  MAX(fy_year_week_number) as latest_fy_week_number,
  APPROX_COUNT_DISTINCT(CONCAT(fy_year_week_number, '-', revenue_type, '-', amount, '-', volume)) as approx_unique_rows_at_grain
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check`
WHERE fy_year_week_number IS NOT NULL
LIMIT 1000;

-- Query to understand data structure for snapshot tables
SELECT
  'Snapshot Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records_finance_operating_statement,
  COUNT(DISTINCT dw_prstn_load_timestamp) as unique_load_timestamps_finance_operating_statement,
  MIN(dw_prstn_load_timestamp) as earliest_load_timestamp_finance_operating_statement,
  MAX(dw_prstn_load_timestamp) as latest_load_timestamp_finance_operating_statement
FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
WHERE source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
LIMIT 1000;

SELECT
  'Snapshot Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records_circulation_snapshot_fct,
  COUNT(DISTINCT dw_bdm_load_timestamp) as unique_load_timestamps_circulation_snapshot_fct,
  MIN(dw_bdm_load_timestamp) as earliest_load_timestamp_circulation_snapshot_fct,
  MAX(dw_bdm_load_timestamp) as latest_load_timestamp_circulation_snapshot_fct
FROM `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`
LIMIT 1000;","-- Quick syntax and logic validation for core metrics
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(amount) > 0 THEN 'PASS' ELSE 'FAIL' END as total_amount_test,
  CASE WHEN SUM(volume) > 0 THEN 'PASS' ELSE 'FAIL' END as total_volume_test,
  CASE WHEN SUM(CASE WHEN SAFE.LEFT(revenue_type, 2) = '03' THEN amount ELSE 0 END) >= 0 THEN 'PASS' ELSE 'FAIL' END as amount_revenue_type_03_test
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check`
WHERE fy_year_week_number IS NOT NULL
LIMIT 1;

-- Quick syntax and logic validation for latest snapshot load time
SELECT
  'Validation Check' as test_type,
  CASE WHEN MIN(snap_load_time) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as latest_load_time_test
FROM (
    SELECT
      datetime(max(dw_prstn_load_timestamp), 'Australia/Sydney') AS snap_load_time
    FROM
      `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
    WHERE
      source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
    UNION ALL
    SELECT
      datetime(max(dw_bdm_load_timestamp), 'Australia/Sydney') AS snap_load_time
    FROM
      `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`
  ) AS load_time
LIMIT 1;","-- Validate business logic for revenue type '03' filtering
SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Type 03 Filtering' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN SAFE.LEFT(revenue_type, 2) = '03' THEN 1 ELSE 0 END) as records_matching_03_prefix,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE.LEFT(revenue_type, 2) = '03' THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_with_03_prefix
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check`
WHERE fy_year_week_number IS NOT NULL
LIMIT 1000;

-- Validate business logic for snapshot filters
SELECT
  'Business Rule Validation' as validation_type,
  'Snapshot Filters' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI') THEN 1 ELSE 0 END) as records_matching_filters,
  SAFE_DIVIDE(SUM(CASE WHEN source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI') THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_matching_filters
FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
LIMIT 1000;","-- Get representative sample data for asl_finance.v_asl_circulation_dq_check
SELECT
  fy_year_week_number,
  revenue_type,
  amount,
  volume
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check`
WHERE fy_year_week_number IS NOT NULL
ORDER BY fy_year_week_number DESC, amount DESC
LIMIT 500;

-- Get representative sample data for snapshot tables
SELECT
  dw_prstn_load_timestamp,
  source_system_name,
  scenario,
  sub_source_system_name
FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
WHERE source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
ORDER BY dw_prstn_load_timestamp DESC
LIMIT 100;

SELECT
  dw_bdm_load_timestamp
FROM `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`
ORDER BY dw_bdm_load_timestamp DESC
LIMIT 100;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'03'""], 'context': ""Used to filter and conditionally aggregate 'amount' and 'volume' based on the first two characters of 'revenue_type'."", 'suggested_governance': ""Replace with a join to a 'revenue_type_master' table that defines revenue type categories."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Circulation'"", ""'Estimate'"", ""'RCTI'"", ""'THINK'"", ""'DTI'""], 'context': ""Used as filters for 'source_system_name', 'scenario', and 'sub_source_system_name' in the 'finance_operating_statement' table to determine the latest snapshot time."", 'suggested_governance': 'Define these filter values in a configuration table or a governed lookup table for system parameters.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'other', 'hardcoded_values': [""'Australia/Sydney'""], 'context': 'Timezone specification for DATETIME conversion of load timestamps.', 'suggested_governance': 'Parameterize the timezone or use a system-wide default configuration.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded lookup values (e.g., '03' for revenue type, system names) with joins to governed reference tables or configuration tables."", ""Parameterize the timezone ('Australia/Sydney') for date/time conversions to allow for regional flexibility.""]",43,f7a9efeb-df3c-45c9-899d-0bcada701572
"-- This is the main SQL to run for consolidated analysis of Circulation Insights
WITH base_data AS (
  SELECT
    ci.charge_date,
    ci.fiscal_week_id,
    cal.day_short_name AS day_of_week,
    ci.charge_type,
    ci.route_volume,
    ci.charge_amount,
    ci.gl_publication_code,
    ci.sales_channel_l4
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
    LEFT JOIN
    `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
    ON ci.charge_date = cal.calendar_date
  WHERE
    -- Parameterize the fiscal year instead of hardcoding '2025'
    CAST(LEFT(CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- To match original dashboard scope
    -- OR CAST(LEFT(CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = EXTRACT(YEAR FROM CURRENT_DATE()) -- Example: Current year
),
calculated_metrics AS (
  SELECT
    charge_date,
    fiscal_week_id,
    day_of_week,
    charge_type,
    route_volume,
    charge_amount,
    gl_publication_code,
    sales_channel_l4,
    -- Derived Metrics from Query 1
    CASE WHEN charge_type = 'DRAW' THEN route_volume ELSE 0 END AS draw_volume,
    CASE WHEN charge_type = 'RETURNS' THEN route_volume ELSE 0 END AS returns_volume,
    CASE WHEN charge_type = 'ADJUSTMENT' THEN route_volume ELSE 0 END AS adjustment_volume,
    -- Derived Dimension from Query 2 (should ideally come from a lookup table)
    CASE
      WHEN gl_publication_code IN ('500', '560') THEN 'ADV'
      WHEN gl_publication_code = '100' THEN 'AUS'
      WHEN gl_publication_code IN ('400', '402') THEN 'CM'
      WHEN gl_publication_code = '9504' THEN 'Delicious'
      WHEN gl_publication_code = '9505' THEN 'Delicious Specials'
      WHEN gl_publication_code IN ('110', '116') THEN 'DT'
      WHEN gl_publication_code = '350' THEN 'GAD'
      WHEN gl_publication_code = '670' THEN 'GCB'
      WHEN gl_publication_code = '180' THEN 'Group Shared Services'
      WHEN gl_publication_code = '156' THEN 'Hobart Print Services'
      WHEN gl_publication_code IN ('301', '303') THEN 'HS'
      WHEN gl_publication_code = '5003' THEN 'MDM'
      WHEN gl_publication_code IN ('850', '852') THEN 'MERCURY'
      WHEN gl_publication_code IN ('961', '963') THEN 'NTN'
      WHEN gl_publication_code = '158' THEN 'Perth Print Services'
      WHEN gl_publication_code = 'Post Courier' THEN 'Post Courier'
      WHEN gl_publication_code = '5024' THEN 'SC'
      WHEN gl_publication_code IN ('9514', '9515') THEN 'Taste'
      WHEN gl_publication_code = '5053' THEN 'TCHRN'
      WHEN gl_publication_code = '450' THEN 'TCP'
      WHEN gl_publication_code = '475' THEN 'TVB'
      WHEN gl_publication_code = '9560' THEN 'Vogue'
      WHEN gl_publication_code = '9556' THEN 'Vogue Living'
      WHEN gl_publication_code = '305' THEN 'WT'
      ELSE 'Other'
    END AS derived_publication_type
  FROM
    base_data
)
SELECT
  fiscal_week_id,
  day_of_week,
  sales_channel_l4,
  derived_publication_type,
  SUM(draw_volume) AS total_draw_volume,
  SUM(returns_volume) AS total_returns_volume,
  SUM(adjustment_volume) AS total_adjustment_volume,
  SUM(draw_volume + adjustment_volume + returns_volume) AS total_circulation_volume,
  SUM(charge_amount) AS total_charge_amount
FROM
  calculated_metrics
WHERE
  -- Example filters to replicate original dashboard views, can be parameterized or removed for broader analysis
  (day_of_week = 'Sun' AND fiscal_week_id IN (202541, 202542, 202543, 202544, 202545))
  OR
  (fiscal_week_id IN (202533, 202534, 202535, 202536, 202537, 202538, 202539, 202540) AND sales_channel_l4 = 'Subscriptions' AND derived_publication_type = 'DT')
GROUP BY
  fiscal_week_id,
  day_of_week,
  sales_channel_l4,
  derived_publication_type
ORDER BY
  fiscal_week_id DESC, day_of_week
LIMIT 1000;
","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT ci.charge_date) AS unique_charge_dates,
  COUNT(DISTINCT ci.fiscal_week_id) AS unique_fiscal_weeks,
  COUNT(DISTINCT cal.day_short_name) AS unique_days_of_week,
  COUNT(DISTINCT ci.charge_type) AS unique_charge_types,
  COUNT(DISTINCT ci.gl_publication_code) AS unique_publication_codes,
  COUNT(DISTINCT ci.sales_channel_l4) AS unique_sales_channels,
  MIN(ci.charge_date) AS earliest_charge_date,
  MAX(ci.charge_date) AS latest_charge_date
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Sample recent data
LIMIT 1;
","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(ci.route_volume) > 0 THEN 'PASS' ELSE 'FAIL' END AS route_volume_test,
  CASE WHEN SUM(ci.charge_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS charge_amount_test,
  CASE WHEN MAX(ci.charge_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(DISTINCT ci.fiscal_week_id) > 0 THEN 'PASS' ELSE 'FAIL' END AS fiscal_week_id_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
WHERE
  ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;
","SELECT
  'Business Rule Validation' AS validation_type,
  'GL Publication Code Mapping Coverage' AS rule_name,
  COUNT(DISTINCT gl_publication_code) AS total_distinct_codes,
  COUNT(DISTINCT CASE
    WHEN gl_publication_code IN ('500', '560') THEN 'ADV'
    WHEN gl_publication_code = '100' THEN 'AUS'
    WHEN gl_publication_code IN ('400', '402') THEN 'CM'
    WHEN gl_publication_code = '9504' THEN 'Delicious'
    WHEN gl_publication_code = '9505' THEN 'Delicious Specials'
    WHEN gl_publication_code IN ('110', '116') THEN 'DT'
    WHEN gl_publication_code = '350' THEN 'GAD'
    WHEN gl_publication_code = '670' THEN 'GCB'
    WHEN gl_publication_code = '180' THEN 'Group Shared Services'
    WHEN gl_publication_code = '156' THEN 'Hobart Print Services'
    WHEN gl_publication_code IN ('301', '303') THEN 'HS'
    WHEN gl_publication_code = '5003' THEN 'MDM'
    WHEN gl_publication_code IN ('850', '852') THEN 'MERCURY'
    WHEN gl_publication_code IN ('961', '963') THEN 'NTN'
    WHEN gl_publication_code = '158' THEN 'Perth Print Services'
    WHEN gl_publication_code = 'Post Courier' THEN 'Post Courier'
    WHEN gl_publication_code = '5024' THEN 'SC'
    WHEN gl_publication_code IN ('9514', '9515') THEN 'Taste'
    WHEN gl_publication_code = '5053' THEN 'TCHRN'
    WHEN gl_publication_code = '450' THEN 'TCP'
    WHEN gl_publication_code = '475' THEN 'TVB'
    WHEN gl_publication_code = '9560' THEN 'Vogue'
    WHEN gl_publication_code = '9556' THEN 'Vogue Living'
    WHEN gl_publication_code = '305' THEN 'WT'
    ELSE 'Other'
  END) AS distinct_mapped_categories,
  SUM(CASE WHEN
    gl_publication_code IN ('500', '560', '100', '400', '402', '9504', '9505', '110', '116', '350', '670', '180', '156', '301', '303', '5003', '850', '852', '961', '963', '158', 'Post Courier', '5024', '9514', '9515', '5053', '450', '475', '9560', '9556', '305')
    THEN 1 ELSE 0 END) AS records_with_mapped_codes,
  SUM(CASE WHEN
    gl_publication_code NOT IN ('500', '560', '100', '400', '402', '9504', '9505', '110', '116', '350', '670', '180', '156', '301', '303', '5003', '850', '852', '961', '963', '158', 'Post Courier', '5024', '9514', '9515', '5053', '450', '475', '9560', '9556', '305')
    THEN 1 ELSE 0 END) AS records_mapped_to_other
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights`
WHERE
  charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);
","SELECT
  ci.charge_date,
  ci.fiscal_week_id,
  cal.day_short_name AS day_of_week,
  ci.charge_type,
  ci.route_volume,
  ci.charge_amount,
  ci.gl_publication_code,
  ci.sales_channel_l4
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY
  ci.charge_date DESC
LIMIT 500;
","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""string '2025'"", 'context': ""Used to filter fiscal year in all queries: `LEFT(CAST(fiscal_week_id AS string), 4) IN ('2025')`"", 'suggested_fix': 'Replace with `EXTRACT(YEAR FROM CURRENT_DATE())` or a date parameter for fiscal year selection.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202541, 202542, 202543, 202544, 202545', 'original_format': 'integer list', 'context': ""Specific fiscal week IDs used in Query 1's WHERE clause."", 'suggested_fix': 'Replace with a date range parameter (e.g., start_date, end_date) and derive fiscal weeks dynamically, or use a multi-select parameter in Looker Studio.', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '202533, 202534, 202535, 202536, 202537, 202538, 202539, 202540', 'original_format': 'integer list', 'context': ""Specific fiscal week IDs used in Query 2's WHERE clause."", 'suggested_fix': 'Replace with a date range parameter (e.g., start_date, end_date) and derive fiscal weeks dynamically, or use a multi-select parameter in Looker Studio.', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Sun'""], 'context': ""Specific day of week filter in Query 1's WHERE clause."", 'suggested_governance': 'Use a parameter for day of week selection.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'DRAW'"", ""'RETURNS'"", ""'ADJUSTMENT'""], 'context': 'Charge types used in CASE statements for volume calculations in Query 1.', 'suggested_governance': 'These seem like valid business categories, but if they change frequently, they could be managed in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'500'"", ""'560'"", ""'100'"", ""'400'"", ""'402'"", ""'9504'"", ""'9505'"", ""'110'"", ""'116'"", ""'350'"", ""'670'"", ""'180'"", ""'156'"", ""'301'"", ""'303'"", ""'5003'"", ""'850'"", ""'852'"", ""'961'"", ""'963'"", ""'158'"", ""'Post Courier'"", ""'5024'"", ""'9514'"", ""'9515'"", ""'5053'"", ""'450'"", ""'475'"", ""'9560'"", ""'9556'"", ""'305'""], 'context': ""GL Publication Codes mapped to `derived_publication_type` in Query 2's CASE statement."", 'suggested_governance': 'Create and join to a `gl_publication_lookup` table containing `gl_publication_code` and `derived_publication_type`.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'ADV'"", ""'AUS'"", ""'CM'"", ""'Delicious'"", ""'Delicious Specials'"", ""'DT'"", ""'GAD'"", ""'GCB'"", ""'Group Shared Services'"", ""'Hobart Print Services'"", ""'HS'"", ""'MDM'"", ""'MERCURY'"", ""'NTN'"", ""'Perth Print Services'"", ""'Post Courier'"", ""'SC'"", ""'Taste'"", ""'TCHRN'"", ""'TCP'"", ""'TVB'"", ""'Vogue'"", ""'Vogue Living'"", ""'WT'"", ""'Other'""], 'context': ""Derived publication type categories in Query 2's CASE statement."", 'suggested_governance': 'These are the target values of the `gl_publication_code` lookup; they should be defined in the `gl_publication_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Subscriptions'""], 'context': ""Sales channel filter in Query 2's WHERE clause."", 'suggested_governance': 'Use a parameter for sales channel selection or manage valid sales channels in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'DT'""], 'context': ""Derived publication type filter in Query 2's WHERE clause."", 'suggested_governance': 'Use a parameter for derived publication type selection.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded fiscal years and weeks with date range parameters (e.g., `start_date`, `end_date`) or relative date functions (e.g., `CURRENT_DATE()`, `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'Replace hardcoded GL publication code mappings with a join to a governed `gl_publication_lookup` table.', 'Replace hardcoded filter values for `day_of_week`, `sales_channel_l4`, and `derived_publication_type` with Looker Studio parameters for user selection.']",44,c441950c-1e3f-432c-9838-847d1d315b9e
"-- This is the main SQL to run for SuperCoach Subscriptions dashboard metrics
WITH base_data AS (
  SELECT
    SAFE_CAST(DATETIME_TRUNC(movement_datetime, SECOND) AS DATE) AS movement_date,
    masthead,
    subscription_movement_count_type,
    sold_in_rate_plan_code,
    SUBSTR(sold_in_source_code, 1, 2) AS source_masthead,
    subscriber_id_src,
    subscription_id_src
  FROM
    `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
  WHERE
    movement_datetime >= DATE '2024-07-01' AND movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
    AND masthead = 'SC'
    AND subscription_movement_count_type = 'acquisition'
)
SELECT
  movement_date,
  source_masthead,
  COUNT(DISTINCT subscription_id_src) AS supercoach_unique_acquisitions_total,
  COUNT(DISTINCT CASE WHEN source_masthead = 'CS' THEN subscription_id_src END) AS supercoach_unique_acquisitions_cs_source,
  COUNT(DISTINCT CASE WHEN sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12') AND subscriber_id_src = 2452260 AND source_masthead = 'CS' THEN subscription_id_src END) AS supercoach_specific_rate_plan_subscriber_acquisitions
FROM
  base_data
GROUP BY
  movement_date,
  source_masthead
ORDER BY
  movement_date DESC, source_masthead
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(DATETIME_TRUNC(movement_datetime, SECOND) AS DATE)) as unique_dates,
  COUNT(DISTINCT subscriber_id_src) as unique_subscribers,
  COUNT(DISTINCT subscription_id_src) as unique_subscriptions,
  COUNT(DISTINCT masthead) as unique_mastheads,
  COUNT(DISTINCT subscription_movement_count_type) as unique_movement_types,
  MIN(movement_datetime) as earliest_movement_datetime,
  MAX(movement_datetime) as latest_movement_datetime,
  APPROX_COUNT_DISTINCT(CONCAT(CAST(subscriber_id_src AS STRING), '-', CAST(subscription_id_src AS STRING), '-', CAST(movement_datetime AS STRING))) as approx_unique_movements
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  movement_datetime >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(DISTINCT subscription_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_subscriptions_test,
  CASE WHEN COUNT(DISTINCT subscriber_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_subscribers_test,
  CASE WHEN MAX(movement_datetime) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as supercoach_acquisition_data_test
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  movement_datetime >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'SuperCoach Acquisition Masthead Rule' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END) as supercoach_acquisition_records,
  SAFE_DIVIDE(SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END), COUNT(*)) * 100 as supercoach_acquisition_rate_percentage
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  movement_datetime >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY);","SELECT
  movement_datetime,
  masthead,
  subscription_movement_count_type,
  sold_in_rate_plan_code,
  sold_in_source_code,
  subscriber_id_src,
  subscription_id_src,
  is_paying_flag
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  movement_datetime >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND masthead = 'SC'
  AND subscription_movement_count_type = 'acquisition'
ORDER BY
  movement_datetime DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '01/07/2024', 'original_format': ""DATE '2024-07-01'"", 'context': 'start date for subscription movement analysis', 'suggested_fix': 'replace with a dashboard date parameter or relative date function (e.g., DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '19/08/2024', 'original_format': ""DATE '2024-08-19'"", 'context': 'end date (exclusive) for subscription movement analysis', 'suggested_fix': 'replace with a dashboard date parameter or relative date function (e.g., CURRENT_DATE())', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'SC'""], 'context': 'masthead filter for SuperCoach', 'suggested_governance': ""if 'SC' is a dynamic value, it should be a parameter; otherwise, ensure it's documented as a fixed business rule."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'acquisition'""], 'context': 'subscription movement type filter', 'suggested_governance': 'if other movement types are relevant, this should be a parameter; otherwise, document as a fixed business rule.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'SC_SDO_AP24AM12'"", ""'SC_SDO_AP20AM12'""], 'context': 'specific rate plan codes for filtering', 'suggested_governance': 'these should ideally be managed in a reference table (e.g., `rate_plan_master`) or be configurable parameters if they change frequently.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['2452260'], 'context': 'specific subscriber ID filter', 'suggested_governance': 'this is highly specific; if it represents a test user or a specific case, it should be clearly documented. For general analysis, this should be a parameter or removed.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CS'""], 'context': 'source masthead filter (SUBSTR(sold_in_source_code, 1, 2))', 'suggested_governance': ""if 'CS' is a specific source, it should be managed in a reference table or be a configurable parameter."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`).', 'Replace hardcoded lookup values (masthead, movement type, rate plans, source masthead) with joins to governed reference tables or dashboard parameters.', 'Parameterize specific IDs like `subscriber_id_src` if the analysis needs to be dynamic for different subscribers.']",45,6e8b534b-485a-48dd-842d-13dc6bebb01a
