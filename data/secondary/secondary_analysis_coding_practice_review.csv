metric_id,issue_type,description,code_snippet,recommendation,response_id,dashboard_id
total_revenue_net_by_month_source_filtered_advertiser_fy_q,Hardcoded Logic,"The SQL for this metric contains a redundant `source` filter. It first filters for a broad list of 10 sources and then immediately applies a narrower filter for only 3 of those sources. The broader filter is effectively overridden and serves no functional purpose, adding unnecessary complexity and potential confusion.","t0.source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor')
  AND t0.source IN ('DFP', 'Index Exchange', 'Rubicon')","Remove the redundant broader `t0.source IN (...)` clause. Only include the specific, intended `source` filter: `t0.source IN ('DFP', 'Index Exchange', 'Rubicon')`.",0,783f341c-8660-4e90-bab8-9bc860119cf5
total_revenue_net_by_month_source_filtered_transaction_type_wide_date,Anti-Pattern,"This metric uses an extensive, hardcoded `IN` clause for date filtering, listing 25 specific `DATE` values. This approach is highly inflexible, requires manual updates for each reporting period, and is prone to errors. It makes the metric difficult to maintain and scale for dynamic date ranges.","SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) IN (DATE '2023-04-01', DATE '2023-05-01', DATE '2023-06-01', DATE '2023-07-01', DATE '2023-08-01', DATE '2023-09-01', DATE '2023-10-01', DATE '2023-11-01', DATE '2023-12-01', DATE '2024-01-01', DATE '2024-02-01', DATE '2024-03-01', DATE '2024-04-01', DATE '2024-05-01', DATE '2024-06-01', DATE '2024-07-01', DATE '2024-08-01', DATE '2024-09-01', DATE '2024-10-01', DATE '2024-11-01', DATE '2024-12-01', DATE '2025-01-01', DATE '2025-02-01', DATE '2025-03-01', DATE '2025-04-01')","Replace the hardcoded date list with dynamic date range filtering. For example, use `BETWEEN` with calculated start/end dates based on `CURRENT_DATE()` or leverage Looker Studio's native date range controls. Consider creating a dedicated date dimension table that includes financial year/quarter/month mappings to simplify date filtering logic.",0,783f341c-8660-4e90-bab8-9bc860119cf5
buyer_list_filtered_advertiser_fy_q_month,Anti-Pattern,"This metric and 'Buyer List (Filtered by Advertiser including Myer, FY/Q, Month)' are almost identical, differing only by the inclusion of one additional advertiser ('Myer *'). This duplication of logic for minor variations is an anti-pattern that leads to metric sprawl, increased maintenance, and potential inconsistencies if logic changes are not applied uniformly.","t0.advertiser IN ('Kmart Corporation *', 'Target Corporation *')","Consolidate these two 'Buyer List' metrics into a single, more flexible metric. Utilize Looker Studio's dashboard-level filters or parameters to allow users to dynamically select the desired advertisers, including predefined groups or individual advertisers, rather than hardcoding them into separate metric definitions.",0,783f341c-8660-4e90-bab8-9bc860119cf5
buyer_list_filtered_advertiser_myer_fy_q_month,Anti-Pattern,"This metric is a near-duplicate of 'Buyer List (Filtered by Advertiser, FY/Q, Month)', with the only difference being the inclusion of 'Myer *' in the advertiser filter. This pattern of creating new metrics for slight filter variations is unsustainable and indicates a lack of parameterization or flexible dashboard design.","t0.advertiser IN ('Kmart Corporation *', 'Myer *', 'Target Corporation *')","Consolidate these two 'Buyer List' metrics into a single, more flexible metric. Utilize Looker Studio's dashboard-level filters or parameters to allow users to dynamically select the desired advertisers, including predefined groups or individual advertisers, rather than hardcoding them into separate metric definitions.",0,783f341c-8660-4e90-bab8-9bc860119cf5
all_metrics,Hardcoded Logic,"All metrics extensively hardcode lists of dimension values (e.g., `source`, `source_transactiontype`, `advertiser`) directly within their SQL `WHERE` clauses. The `structure_sql` indicates a much larger set of unique values for these dimensions (e.g., 4266 unique advertisers, 27 unique sources, 17 unique transaction types) than are used in the filters. This rigidity makes the dashboard inflexible, difficult to update, and prone to missing data if new values emerge or business definitions change.","t0.source IN ('AdX', 'AppNexus', 'DFP', ...)
UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', ...)
t0.advertiser IN ('The Smith Family *')","For `source` and `source_transactiontype`, consider creating governed lookup tables or views in BigQuery. This centralizes definitions, improves consistency across dashboards, and simplifies updates. For `advertiser` and other high-cardinality dimensions, leverage Looker Studio's interactive filter controls to allow users to select values dynamically, reducing the need for hardcoding within metric SQL.",0,783f341c-8660-4e90-bab8-9bc860119cf5
multiple_metrics,Hardcoded Logic,"Almost all metrics (Budget, Actuals, Current Period, 6-Week Rolling) explicitly filter by `fy_year = 2025` and specific `fy_week_of_year` values (e.g., 31, 38, or a range like 26-31). This hardcoding prevents the dashboard from dynamically updating to the current fiscal week/year without manual modification of each metric's SQL. The `sql_execution_summary` confirms data exists for `fiscal_week_of_year: 52` in `fy_year: 2025`, indicating the dashboard is not displaying the latest available data for 'current period' or 'actuals' as implied by their names.","WHERE t0.fy_year = 2025 AND t0.fy_week_of_year = 31 (or 38, or BETWEEN 26 AND 31)","Implement dynamic date parameters (e.g., Looker Studio parameters, BigQuery scripting, or a dedicated date dimension table with `is_current_week` flags) to allow the dashboard to automatically display data for the current fiscal period. This would significantly reduce manual updates and improve data freshness.",1,57d87efe-c112-4d42-be1b-045f0c8ca73e
failed_payment_volume_6w_rolling,Data Mismatch,"There's an inconsistency in how '6-Week Rolling' metrics are implemented, specifically highlighted by the 'Failed Payment Volume' metrics. The `failed_payment_volume_6w_rolling` metric's description explicitly notes 'The underlying column is not suffixed with '_6W'', yet its SQL uses `SUM(t0.Failed_Payment_Volume)` with a date range. In contrast, `failed_payment_volume_6w_rolling_suffixed` uses `SUM(t0.Failed_Payment_Volume_6W)`. This indicates either a data model inconsistency (some rolling metrics are pre-calculated, others are not, or are inconsistently named) or a lack of clarity in metric definition, leading to potential confusion and incorrect data usage.",SELECT SUM(t0.Failed_Payment_Volume) FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0 WHERE t0.fy_year = 2025 AND t0.fy_week_of_year BETWEEN 26 AND 31,"Standardize the data model and metric definitions for rolling periods. Either consistently pre-calculate rolling metrics into appropriately suffixed columns (e.g., `_6W`) or consistently calculate them dynamically within Looker Studio using date functions. Remove redundant or inconsistently defined metrics to ensure a single source of truth.",1,57d87efe-c112-4d42-be1b-045f0c8ca73e
all_metrics,Anti-Pattern,"The dashboard contains 130 metrics, many of which are repetitive variations of the same base metric (e.g., 'Always-on Digital Sales', 'Breach Sales', 'Revenue Consumer') for different time periods (Budget, Actuals, Current Period, 6-Week Rolling, Aggregated) and value types (e.g., `_B`, `_V`, no suffix, `_6W`). This highly granular and repetitive metric definition approach leads to a massive number of individual SQL queries, making the dashboard extremely difficult to maintain, scale, and ensure consistency across similar metrics. This is a direct contributor to the high complexity and consolidation scores.",Example: SELECT SUM(t0.Always_on_Digital_Sales_B) FROM ... WHERE t0.fy_year = 2025 AND t0.fy_week_of_year = 31; SELECT SUM(t0.Always_on_Digital_Sales_V) FROM ... WHERE t0.fy_year = 2025 AND t0.fy_week_of_year = 38;,"Refactor the underlying data model to include columns for 'metric_name' (e.g., 'Always-on Digital Sales'), 'metric_type' (e.g., 'Budget', 'Actuals', 'Current Period', '6-Week Rolling'), and 'fiscal_period_type'. This would allow a single, more flexible SQL query to power multiple visualizations, significantly reducing the number of distinct metrics and improving maintainability. Leverage Looker Studio's data blending, parameters, and calculated fields to create dynamic views from fewer, more generic base metrics.",1,57d87efe-c112-4d42-be1b-045f0c8ca73e
total_subscriptions_digital_all_mastheads,Anti-Pattern,"The metric's SQL logic includes complex, multi-conditional `CASE` statements to categorize mastheads and recognition types. This exact logic is extensively duplicated across many other metrics within the dashboard, indicating a lack of a centralized, governed definition for these fundamental dimensions. This leads to maintenance overhead and potential inconsistencies.",WHERE (CASE WHEN (t0.gl_publication_code = '101' OR t0.masthead_code = 'TA' OR t0.gl_publication_code = '100') THEN 'The Australian' WHEN (t0.gl_publication_code = '400' OR t0.gl_publication_code = '402' OR t0.gl_publication_code = '111' OR t0.masthead_code = 'CM') THEN 'Metros' WHEN (t0.gl_publication_code = '450' OR t0.gl_publication_code = '351' OR t0.gl_publication_code = '670' OR t0.gl_publication_code = '961' OR t0.masthead_code = 'CP') THEN 'Regionals' WHEN (t0.gl_publication_code = '305' OR t0.gl_publication_code = '307' OR t0.gl_publication_code = '303' OR t0.gl_publication_code = '302' OR t0.masthead_code = 'WT') THEN 'Others' ELSE 'Discontinued' END) != 'Discontinued' AND (CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END) = 'Digital Recognition',"Refactor the underlying data model (`asl_finance_derived.digital_subscriptions` or `sbx_fda_corefin.dt_digital_subscriptions`) to include pre-calculated `masthead_group` and `recognition_type` columns, possibly via a view or a dedicated dimension table. This would centralize the business logic, simplify metric SQL, and improve query performance and maintainability.",2,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
fiscal_week_month_label_2025,Hardcoded Logic,"The metric's SQL logic calculates the fiscal week and month based on a fixed date (`2025-03-23`). This hardcoded date means the metric will always return the same string, making it static and unable to adapt to current periods or user-selected date ranges. The use of `MIN` on a single, fixed string is also redundant.","SELECT MIN(CONCAT('FY ','2025',' Week ',SAFE_CAST(DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-03-23 04:54:02.058726+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS STRING),' (',CASE WHEN (DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-03-23 04:54:02.058726+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 4) THEN 'July' ... END,')')","Replace the fixed date with a dynamic date parameter or a function that returns the current fiscal period. Ideally, a dedicated fiscal calendar dimension table should be created in the data warehouse to manage fiscal years, weeks, and months, allowing for flexible and accurate date-based analysis.",2,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
comparison_type_budget,Hardcoded Logic,"This metric, along with `comparison_type_forecast`, `gross_cancellations_label`, and `gross_acquisitions_label`, uses a `CASE` statement with a condition that is always true (e.g., `1 = 1` or `2 = 2`), effectively hardcoding the output to a single, constant string value. This means these metrics function purely as static labels rather than dynamic dimensions that could be used for filtering or comparison.",SELECT MIN(CASE WHEN (1 = 1) THEN 'BUD' WHEN (1 = 2) THEN 'FCT' WHEN (1 = 3) THEN 'YOY' WHEN (1 = 4) THEN 'BUD NY' ELSE NULL END),"If these are intended to be static labels, they should be defined as simple string literals or parameters directly within Looker Studio, rather than complex SQL queries. If they are meant to represent dynamic scenarios or types, their values should be derived from actual data columns or a lookup table.",2,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
closing_base_fy2025_bmasnap_close_metros,Hardcoded Logic,"The metric's SQL hardcodes specific `table_union_source` values (`'bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS'`) within its `WHERE` clause. This makes the query inflexible and brittle, as any changes to source names or the addition of new sources would require manual updates to this and potentially other similar metrics.","t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')","Centralize the definition of valid `table_union_source` values, possibly in a configuration table or a view. For dashboard interactivity, consider implementing a Looker Studio parameter or filter control for `table_union_source` to allow users to dynamically select sources.",2,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
earned_amount_nf_or_base_conditional_metros,Anti-Pattern,"This metric, and `closing_base_or_forecast_by_week_fy2025_metros`, uses complex `CASE` statements within `SUM` to conditionally aggregate different columns (e.g., `NFEarnedAmount` vs `EarnedAmount`, `ClosingBase` vs `ForecastClosingBase`) based on `fy_year`, `fy_week_of_year`, and `table_union_source`. While functional, this indicates a potentially un-normalized or overly complex data model for financial reporting, making the logic difficult to read, maintain, and scale.",SUM(CASE WHEN ((t0.fy_year <= 2024 AND t0.table_union_source = 'nfmanualhist') OR (t0.fy_year > 2024 AND t0.table_union_source = 'subsnapfact')) THEN t0.NFEarnedAmount WHEN ((t0.fy_year <= 2024 AND t0.table_union_source = 'nfmanualhist') OR (t0.fy_year > 2024 AND t0.table_union_source = 'subsnapfact')) THEN t0.EarnedAmount ELSE NULL END),"Review the underlying data model (`dt_digital_subscriptions`) to determine if these different 'types' of earned amounts or closing bases can be unified into a single column with an accompanying 'type' dimension. Alternatively, create separate, clearly defined metrics at the data source level to simplify dashboard-level calculations and improve clarity and performance.",2,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
revenue_net_by_transaction_type_grouped,Hardcoded Logic,"The 'Total Revenue Net by Transaction Type Group' metric uses a hardcoded CASE statement to categorize transaction types into 'Guaranteed', 'Deal', or 'Open Auction'. While the `structure_sql` indicates there are currently 9 unique transaction types in the source data, and the `CASE` statement explicitly attempts to map 10 distinct values, this approach is prone to errors if new transaction types emerge or existing ones change their definitions. It also makes updates cumbersome as they require direct SQL modification within the dashboard.","SELECT
  CASE
    WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
    WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(t0.TransactionType AS STRING)
  END AS TransactionType_Grouped,
  SUM(t0.RevenueNet) AS Total_Revenue_Net
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
GROUP BY TransactionType_Grouped
LIMIT 100","Replace the hardcoded CASE statement with a join to a dedicated, governed lookup table for transaction type groupings. This would centralize mapping logic, improve maintainability, and allow for easier updates to business rules without modifying dashboard SQL directly. The lookup table should include all current and future transaction types and their corresponding grouped categories.",3,b15d856f-e3ce-4991-bf2a-92395390524f
gross_revenue_booked_billed_adpt_fy2025_excl_mrca_excl_near_zero_invoice_minus_1,Hardcoded Logic/Anti-Pattern,"This metric, and its counterpart `gross_revenue_booked_billed_multi_source_fy2025_excl_mrca_invoice_minus_1`, hardcode numerous filter values including `source_system_code` ('ADPT' vs. 'PLUTO', 'CPQ', 'ADPT'), `revenue_transaction_status` ('Booked', 'Billed'), `invoice_number` ('-1'), `financial_year` ('2025'), and `source_publishing_division` ('Medium Rare Content Agency'). Additionally, a hardcoded range for excluding near-zero `gross_revenue_amount` is present. This redundancy necessitates creating distinct metrics for minor variations, increasing maintenance overhead and reducing reusability. The `business_rules_sql` confirms the existence of 'Booked' and 'Cancelled' statuses, validating the filter values but not the hardcoding practice.","t0.revenue_transaction_status IN ('Booked', 'Billed') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) AND t0.source_system_code IN ('ADPT') AND t0.invoice_number = '-1' AND NOT(t0.gross_revenue_amount BETWEEN -1.000000 AND 1.000000) AND t0.financial_year IN ('2025')","Consolidate similar gross revenue metrics into a single, parameterized metric. Utilize Looker Studio parameters for `source_system_code`, `financial_year`, `invoice_number`, and `revenue_transaction_status`. Define exclusions like 'Medium Rare Content Agency' and 'near-zero amounts' as governed parameters or derived fields if they are subject to change, improving flexibility and reducing metric proliferation.",4,77c68c35-20ce-477a-b216-0c781d43a8ca
sum_financial_week_booked_billed_multi_source_fy2025_excl_mrca_invoice_minus_1,Anti-Pattern/Unusual Aggregation,"The business description explicitly notes that 'Summing week numbers is an unusual aggregation.' While it directly reflects the source query, summing an ordinal value like `financial_week` typically does not yield meaningful business insight. This suggests a potential misunderstanding of the data's appropriate use or a highly specific, non-standard business requirement that warrants further investigation and clear documentation.",SELECT SUM(SAFE_CAST(t0.financial_week AS INT64)),"Engage with business users to clarify the exact intent behind summing financial week numbers. If the goal is to count distinct weeks, use `COUNT(DISTINCT financial_week)`. If it's to identify a specific week, `MIN()` or `MAX()` might be more appropriate. Ensure the business logic is robustly documented and understood, and consider if a different metric or visualization approach would better serve the user's need.",4,77c68c35-20ce-477a-b216-0c781d43a8ca
record_count_finance_os_fiscal_week_202548_51,Hardcoded Logic,"This metric hardcodes specific `fiscal_week_id` values ('202548', '202549', '202550', '202551'). While suitable for a one-off ad-hoc analysis, this approach limits reusability and requires manual updates for future periods, which is inefficient for recurring reports.","t0.fiscal_week_id IN ('202548', '202549', '202550', '202551')","If this metric is part of a recurring report, implement dynamic date filtering using Looker Studio date parameters (e.g., start/end fiscal week) or relative date functions to automatically adjust for current or rolling periods. This would make the metric more robust and reduce maintenance.",4,77c68c35-20ce-477a-b216-0c781d43a8ca
distinct_data_load_datetime_non_digital,Hardcoded Logic/Anti-Pattern,"Similar to other metrics, this dimension hardcodes the `revenue_type` filter ('Digital'). A separate metric (`distinct_data_load_datetime_gl_code_9707_9655_9658`) also hardcodes GL codes. This pattern of creating distinct metrics for minor filter variations on a common dimension (`data_load_datetime`) leads to redundancy.",t0.revenue_type NOT IN ('Digital') OR t0.revenue_type IS NULL,"Create a single 'Distinct Data Load Datetime' dimension. Allow users to apply filters on `revenue_type` or `unified_publication_gl_code` directly on the dashboard using filter controls. If specific filter combinations are frequently used, consider creating calculated fields that encapsulate these common filters rather than separate metrics.",4,77c68c35-20ce-477a-b216-0c781d43a8ca
sum_ss_lgb_cw_media_suddenly_publications,Hardcoded Logic,"This metric hardcodes specific `advertiser_name` ('CW Media Pty Ltd') and `unified_publication_name` ('SUDDENLY.CW', 'SUDDENLY.NORTH'). This makes the metric highly specific to a single advertiser and a predefined set of publications, limiting its general applicability. The `primary_analysis_sql` sample data shows `total_ss_lgb` as `0.0`, which might indicate a lack of data for these specific filters or that the column is often zero.","t0.advertiser_name IN ('CW Media Pty Ltd') AND t0.unified_publication_name IN ('SUDDENLY.CW', 'SUDDENLY.NORTH')","If reporting on specific advertisers or publications is a common requirement, consider using parameters for `advertiser_name` and `unified_publication_name`. Alternatively, if these are part of a defined business group, create a lookup table for 'Key Advertisers' or 'Key Publications' that can be joined or referenced in a more generic metric.",4,77c68c35-20ce-477a-b216-0c781d43a8ca
"fiscal_week_id_dimension, returns_route_volume, draw_route_volume, adjustment_route_volume, total_route_volume_draw_adj_returns, total_charge_amount",Hardcoded Logic,"Multiple core metrics and dimensions within the dashboard are hardcoded to filter data specifically for the fiscal year '2025'. This design choice makes the dashboard static and requires manual updates for each new fiscal year, significantly reducing its reusability and increasing maintenance overhead. The live data confirms that data for '202552' (fiscal week 52 of 2025) is being retrieved, but this hardcoded filter prevents dynamic year selection.","WHERE SAFE_CAST(LEFT(SAFE_CAST(fiscal_week_id AS STRING), 4) AS INT64) = 2025","Implement a dynamic fiscal year parameter (e.g., a Looker Studio control or a BigQuery parameter) that allows users to select the desired fiscal year. Alternatively, integrate a robust calendar dimension that can automatically filter for the current fiscal year or a user-defined period, ensuring the dashboard remains relevant and low-maintenance across fiscal cycles.",5,c441950c-1e3f-432c-9838-847d1d315b9e
publication_name_dimension,Anti-Pattern,"The 'Publication Name' dimension is derived using an extensive and complex `CASE WHEN` statement that maps `gl_publication_code` to human-readable names. This approach is difficult to maintain, prone to errors, and does not scale well as new publications are added or existing codes change. The presence of a string literal ('Post Courier') within a mapping that otherwise uses numeric codes also suggests potential data inconsistencies or an oversight in the mapping logic.","SELECT CASE WHEN SAFE_CAST(ci.gl_publication_code AS STRING) IN ('500', '560') THEN 'ADV' ... WHEN SAFE_CAST(ci.gl_publication_code AS STRING) = 'Post Courier' THEN 'Post Courier' ... ELSE 'Other' END AS publication_name","Create and utilize a dedicated lookup table (e.g., `dim_publication`) in BigQuery that stores `gl_publication_code` and `publication_name` mappings. This dimension table should then be joined to the `v_asl_circualtion_insights` view to retrieve the publication name. This approach centralizes mapping logic, improves data governance, simplifies maintenance, and enhances query performance. Further investigation into the 'Post Courier' string literal is recommended to clarify data type consistency.",5,c441950c-1e3f-432c-9838-847d1d315b9e
total_route_volume_draw_adj_returns,Anti-Pattern,"This key performance indicator (KPI) calculates the total route volume by summing three separate `CASE WHEN` statements for 'DRAW', 'ADJUSTMENT', and 'RETURNS' charge types. This approach is less efficient as it redundantly scans and evaluates the `charge_type` column multiple times within a single aggregation. If the individual route volumes are already calculated or needed elsewhere, this method leads to duplicated logic.",SUM(CASE WHEN ci.charge_type = 'DRAW' THEN ci.route_volume ELSE 0 END + CASE WHEN ci.charge_type = 'ADJUSTMENT' THEN ci.route_volume ELSE 0 END + CASE WHEN ci.charge_type = 'RETURNS' THEN ci.route_volume ELSE 0 END),"Refactor the SQL for this metric. If `draw_route_volume`, `adjustment_route_volume`, and `returns_route_volume` are already defined as separate measures or can be easily aggregated, sum those pre-calculated values. Alternatively, for a single query, use a more concise and efficient `SUM` with a `WHERE IN` clause: `SUM(ci.route_volume) WHERE ci.charge_type IN ('DRAW', 'ADJUSTMENT', 'RETURNS')`. This improves readability and potentially query performance.",5,c441950c-1e3f-432c-9838-847d1d315b9e
"spend_ty_rolling12m, spend_ly_rolling12m, spend_ty_calendar_year, spend_ly_calendar_year, spend_ty_financial_year, spend_ly_financial_year, news_corp_spend_ty_rolling12m, min_date_ly_rolling12m, max_date_ly_rolling12m, min_date_ty_rolling12m, max_date_ty_rolling12m",Anti-Pattern,"Almost all time-based metrics independently calculate the `MAX(date)` from the source table using a `CROSS JOIN` subquery. This leads to redundant computations, increased query complexity, and potential performance bottlenecks, especially as the dataset grows. This pattern is repeated across 11 out of 12 metrics.","CROSS JOIN
  (SELECT MAX(date) AS latest_date FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource WHERE source = 'Adex') AS max_date_cte","Centralize the determination of the `latest_date` into a single, shared view, a dedicated Looker model parameter, or a pre-calculated value. This would eliminate redundant subqueries, improve query performance, and simplify metric definitions across the dashboard.",6,601ed0d2-e944-4189-8170-d593c8e72026
news_corp_spend_ty_rolling12m,Hardcoded Logic,"The 'NEWS CORP Spend' metric specifically filters for 'NEWS CORP' using a hardcoded string within an `IF` statement. The `structure_sql` reveals there are 17 unique media networks in the dataset. This hardcoding is a clear anti-pattern that will lead to metric sprawl and difficult maintenance if similar spend metrics are required for other specific media networks, or if the 'NEWS CORP' string ever changes.","SUM(IF(t.Media_Network = 'NEWS CORP', SAFE_DIVIDE(t.Spend, 1000), 0)) AS news_corp_spend_ty_rolling12m","Parameterize the `Media_Network` filter or create a dimension that allows dynamic filtering by media network. This enables users to select any media network without requiring a new hardcoded metric for each, significantly improving reusability and reducing the total metric count.",6,601ed0d2-e944-4189-8170-d593c8e72026
"spend_ty_calendar_year, spend_ly_calendar_year, spend_ty_financial_year, spend_ly_financial_year, spend_ty_rolling12m, spend_ly_rolling12m",Anti-Pattern,"The date filtering logic for various timeframes (rolling 12 months, calendar year, financial year) is complex and duplicated across multiple spend metrics. This includes repeated use of `DATE_DIFF`, `PARSE_DATE`, `CONCAT`, and `EXTRACT(YEAR)`. This duplication increases the risk of inconsistencies in date definitions and makes it challenging to update or debug time-based calculations.","t.date <= max_date_cte.latest_date AND t.date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM max_date_cte.latest_date) AS STRING),'-1-1'))","Implement a comprehensive date dimension table that pre-calculates and stores various date attributes (e.g., `is_current_rolling_12m`, `is_last_rolling_12m`, `is_current_calendar_year`, `is_current_financial_year`, `financial_year_start_date`, etc.). This would simplify metric SQL to simple `WHERE` clauses on these pre-calculated flags or attributes, ensuring consistency, improving readability, and easing maintenance.",6,601ed0d2-e944-4189-8170-d593c8e72026
adpoint_account_dimension,Anti-Pattern,"The SQL logic for the 'Adpoint Account' dimension uses `LIMIT 1`. This anti-pattern restricts the metric to returning only a single, arbitrary account ID, preventing the dashboard from displaying a comprehensive list of Adpoint accounts or their mappings. This directly contradicts the dashboard's purpose of 'Debtor to Account Mapping'. Live data from `structure_sql` confirms there are 62,966 unique Adpoint accounts, none of which can be fully explored with the current metric definition.",SELECT t0.Adpoint_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1,"Remove `LIMIT 1` from the SQL logic. If the intent is to show distinct accounts, use `SELECT DISTINCT t0.Adpoint_Account`. The dashboard design should then be updated to display these accounts in a table or similar visualization that supports multiple records.",7,258a722d-9b6e-45df-ba00-1b9954ec36b2
genera_booking_account_dimension,Anti-Pattern,"Similar to other account dimensions, the 'Genera Booking Account' metric uses `LIMIT 1`. This severely limits its utility, as it will only ever show one Genera Booking Account, even though `structure_sql` indicates 41,427 unique Genera accounts exist. The `primary_analysis_sql` sample data even shows `null` for this field, which is a direct consequence of `LIMIT 1` picking a row without a value, further demonstrating the metric's current ineffectiveness.",SELECT t0.Genera_Booking_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1,"Remove `LIMIT 1` from the SQL logic. If the intent is to show distinct accounts, use `SELECT DISTINCT t0.Genera_Booking_Account`. The dashboard design should be updated to display these accounts in a table or similar visualization that supports multiple records.",7,258a722d-9b6e-45df-ba00-1b9954ec36b2
medium_rare_debtor_account_dimension,Anti-Pattern,"The 'Medium Rare Debtor Account' metric also suffers from the `LIMIT 1` anti-pattern, preventing a comprehensive view of these accounts. Despite `structure_sql` showing 2,773 unique Medium Rare accounts, the dashboard can only ever display one. The `primary_analysis_sql` sample data showing `null` for this field reinforces the problem of arbitrary sampling due to `LIMIT 1`.",SELECT t0.Medium_Rare_Debtor_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1,"Remove `LIMIT 1` from the SQL logic. If the intent is to show distinct accounts, use `SELECT DISTINCT t0.Medium_Rare_Debtor_Account`. The dashboard design should be updated to display these accounts in a table or similar visualization that supports multiple records.",7,258a722d-9b6e-45df-ba00-1b9954ec36b2
national_debtor_account_dimension,Anti-Pattern,"The 'National Debtor Account' metric, crucial for debtor mapping, is similarly flawed by the `LIMIT 1` clause. This prevents the dashboard from showing the full scope of national debtor accounts (54,011 unique accounts according to `structure_sql`) or their relationships to other account types. This limitation directly impedes the dashboard's ability to fulfill its 'mapping' objective.",SELECT t0.National_Debtor_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1,"Remove `LIMIT 1` from the SQL logic. If the intent is to show distinct accounts, use `SELECT DISTINCT t0.National_Debtor_Account`. The dashboard design should be updated to display these accounts in a table or similar visualization that supports multiple records.",7,258a722d-9b6e-45df-ba00-1b9954ec36b2
total_gross_revenue_video_fy2025,Hardcoded Logic|Anti-Pattern,"The 'Total Gross Revenue for Video Ad Types (FY2025)' metric relies on an extremely long and hardcoded `NOT IN` list for `publication_name` to exclude internal/admin publications. This list is duplicated or very similar in other high-criticality metrics across the dashboard, making it brittle, difficult to maintain, and prone to inconsistencies if the list of excluded publications changes.","t0.publication_name NOT IN ('Vogueliving.Admin', 'Vogue.Admin', 'ADMIN.ADV', 'ADMIN.DTM', 'ADMIN.HWT', 'ADMIN.SALES', 'ADMIN.SPORT', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'Taste.Admin', 'TAUS.ADMIN', 'TASTE.ADMIN', 'STELLAR.ADMIN', 'ADMIN.TCM', 'NEWS.ADMIN', 'SKYNEWS.ADMIN', 'National Tabloid Preprint', 'News.Admin', 'Admin.DTM', 'Admin.International', 'BODYANDSOUL.ADMIN', 'Bestrecipes.Admin', 'ESCAPE.ADMIN', 'Admin.Sales', 'Admin.TCM', 'Kidspot.Admin', 'BESTRECIPES.ADMIN', 'Bodyandsoul.Admin', 'Delicious.admin', 'KIDSPOT.ADMIN', 'DELICIOUS.ADMIN', 'GQ.Admin', 'GQ.ADMIN', 'Escape.Admin', 'CODE', 'CODEBET', 'punters.com.au', 'odds.com.au', 'ODDS', 'RACENET', 'RACENET_FORMGUIDE', 'Racenet App', 'racenet.com.au', 'Sky News', 'Sky News App', 'SkyNews', 'Stockhead', 'SUDDENLY.TGG', 'SUDDENLY.SOUTH', 'SUDDENLY.QLD', 'SUDDENLY.OTHER', 'SUDDENLY.NSW', 'SUDDENLY.NORTH', 'SUDDENLY.CW', 'TABOOLA', 'Taboola', 'EdMedia', 'EDMEDIA', 'eCommerce', 'ECOMMERCEPARTNERS', 'ECOMMERCE.VOGUELIVING', 'ECOMMERCE.VOGUE', 'ECOMMERCE', 'ECOMMERCE.BODYANDSOUL', 'ECOMMERCE.TCM', 'ECOMMERCE.TASTE', 'ECOMMERCE.NEWS', 'ECOMMERCE.KIDSPOT', 'ECOMMERCE.GQ', 'ECOMMERCE.ESCAPE', 'ECOMMERCE.DELICIOUS')","Implement a `dim_publication` or `dim_publication_classification` table in the data warehouse. This dimension should include a flag (e.g., `is_internal_admin_publication BOOLEAN`) or a `publication_type` column. Metrics can then join to this dimension and filter based on the flag/type, centralizing the exclusion logic and improving maintainability.",8,f65a9149-93b4-4aa9-aef6-d12002853222
total_gross_revenue_digital_fy2024_2025_nov,Hardcoded Logic|Anti-Pattern|Redundancy,"The 'Total Gross Revenue for Digital (FY2024-2025, November)' metric exhibits significant redundancy by using two distinct, yet largely overlapping, hardcoded `NOT IN` lists for `unified_publication_name` and `publication_name`. This doubles the maintenance effort for publication exclusions and introduces potential for discrepancies between the two lists.","t0.unified_publication_name NOT IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Punters.com.au', 'odds.com.au', 'RACENET', 'Racenet App', 'SKYNEWS.ADMIN', 'SUDDENLY.CW', 'SUDDENLY.OTHER', 'SUDDENLY.TGG', 'SUPERCOACH', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin') AND t0.publication_name NOT IN ('Vogueliving.Admin', 'Vogue.Admin', 'ADMIN.ADV', 'ADMIN.DTM', 'ADMIN.HWT', 'ADMIN.SALES', 'ADMIN.SPORT', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'Taste.Admin', 'TAUS.ADMIN', 'TASTE.ADMIN', 'STELLAR.ADMIN', 'ADMIN.TCM', 'NEWS.ADMIN', 'SKYNEWS.ADMIN', 'National Tabloid Preprint', 'News.Admin', 'Admin.DTM', 'Admin.International', 'BODYANDSOUL.ADMIN', 'Bestrecipes.Admin', 'ESCAPE.ADMIN', 'Admin.Sales', 'Admin.TCM', 'Kidspot.Admin', 'BESTRECIPES.ADMIN', 'Bodyandsoul.Admin', 'Delicious.admin', 'KIDSPOT.ADMIN', 'DELICIOUS.ADMIN', 'GQ.Admin', 'GQ.ADMIN', 'Escape.Admin', 'CODE', 'CODEBET', 'punters.com.au', 'odds.com.au', 'ODDS', 'RACENET', 'RACENET_FORMGUIDE', 'Racenet App', 'Sky News', 'Sky News App', 'SkyNews', 'Stockhead', 'SUDDENLY.TGG', 'SUDDENLY.SOUTH', 'SUDDENLY.QLD', 'SUDDENLY.OTHER', 'SUDDENLY.NSW', 'SUDDENLY.NORTH', 'SUDDENLY.CW', 'TABOOLA', 'Taboola', 'EdMedia', 'EDMEDIA', 'eCommerce', 'ECOMMERCEPARTNERS', 'ECOMMERCE.VOGUELIVING', 'ECOMMERCE.VOGUE', 'ECOMMERCE', 'ECOMMERCE.BODYANDSOUL', 'ECOMMERCE.TCM', 'ECOMMERCE.TASTE', 'ECOMMERCE.NEWS', 'ECOMMERCE.KIDSPOT', 'ECOMMERCE.GQ', 'ECOMMERCE.ESCAPE', 'ECOMMERCE.DELICIOUS')","Consolidate the publication exclusion logic into a single, governed lookup table or a derived field within the data model. Clearly define the relationship and purpose of `unified_publication_name` and `publication_name` to avoid redundant filtering. If both are necessary, the lookup table should account for both fields and their respective exclusion criteria.",8,f65a9149-93b4-4aa9-aef6-d12002853222
multiple_metrics_fin_adtype_name,Hardcoded Logic|Anti-Pattern,"Several dimension metrics (e.g., 'Sales Segment L2 Name by Filtered Ad Types', 'Booking Number for Content/Native Ad Types', 'Sort Caption for Content/Native/Integration Ad Types', 'Ad Size Name by Filtered Ad Types') define groups of `fin_adtype_name` values using repeated hardcoded `IN` lists. This pattern for classifying ad types into specific categories (Video, Audio, Content/Native, etc.) is scattered across multiple metric definitions, leading to inconsistency and difficulty in managing ad type classifications centrally.","t0.fin_adtype_name IN ('Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)', 'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)', 'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)')","Introduce a `dim_ad_type` table or a derived field in the data model that classifies `fin_adtype_name` into broader, governed categories (e.g., `ad_type_group`, `ad_type_category`). This would allow metrics to filter on these standardized groups/categories rather than individual ad type names, simplifying metric definitions, improving consistency, and enabling easier updates when new ad types are introduced or classifications change.",8,f65a9149-93b4-4aa9-aef6-d12002853222
day_of_week_formatted,Anti-Pattern,"The 'Day of Week (Formatted)' metric uses a hardcoded `CASE` statement to prepend leading spaces to day names for specific sorting or display purposes. This embeds presentation logic directly into the data source SQL, making it inflexible and difficult to maintain if sorting or display requirements change. It also duplicates functionality that could be handled more efficiently within the visualization tool (Looker Studio's sorting options). The `business_rules_sql` confirms this logic is active and producing values like '      Sunday'.",SELECT DISTINCT CASE WHEN SAFE_CAST(dow AS STRING) = 'Monday' THEN 'Monday' WHEN SAFE_CAST(dow AS STRING) = 'Tuesday' THEN ' Tuesday' WHEN SAFE_CAST(dow AS STRING) = 'Wednesday' THEN '  Wednesday' WHEN SAFE_CAST(dow AS STRING) = 'Thursday' THEN '   Thursday' WHEN SAFE_CAST(dow AS STRING) = 'Friday' THEN '    Friday' WHEN SAFE_CAST(dow AS STRING) = 'Saturday' THEN '     Saturday' WHEN SAFE_CAST(dow AS STRING) = 'Sunday' THEN '      Sunday' ELSE NULL END FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` LIMIT 1000,"Remove the hardcoded spacing logic from the SQL. Instead, leverage Looker Studio's native sorting capabilities. If a custom sort order is essential, define a numeric sort key column in the underlying data model that can be used for sorting without altering the displayed day name.",9,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
revenue_type_xtend,Hardcoded Logic,"The 'Revenue Type (with XTEND)' metric uses a `CASE` statement to conditionally assign 'XTEND' based on an `xtend_flag`. While this is a valid application of a business rule for a simple binary condition, relying on hardcoded `CASE` statements for categorization can become unwieldy and less maintainable if the number of special conditions or categories grows significantly. It's a pattern to monitor for potential future complexity.",SELECT DISTINCT CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` LIMIT 1000,"For simple binary flags, this approach is acceptable. However, if more complex categorization or multiple `revenue_type` transformations are anticipated, consider centralizing this logic in a dedicated lookup table or a transformation layer (e.g., dbt model) to improve maintainability and reusability across dashboards.",9,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
financial_year_selected,Anti-Pattern,"The dashboard defines multiple 'selected' metrics (e.g., 'Financial Year (Selected)', 'Calendar Year (Selected)', 'Portfolio Group Name (Current)', 'Portfolio Group Name (Sync)'). This pattern, while functional for parameter-driven selections, leads to metric proliferation. It creates redundant metrics that essentially point to different underlying columns based on a parameter's state (implied by 'Fin' and 'Curr' in descriptions), increasing the total metric count and potentially complicating data source management and user understanding.",SELECT DISTINCT SAFE_CAST(financial_year AS STRING) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` LIMIT 1000,"Consolidate these into a single, more dynamic metric using a Looker Studio parameter. For example, a single 'Year' metric could use a parameter to dynamically select either `financial_year` or `calendar_year` in the underlying SQL. Similarly, a single 'Portfolio Group Name' metric could switch between `portfolio_group_name_current` and `portfolio_group_name_sync`. This reduces the total number of distinct metrics and simplifies the data source.",9,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
actual_amount_by_publication_group_current_week,Hardcoded Logic|Anti-Pattern,"Complex `CASE` statements defining `publication_group` are extensively repeated across multiple metrics (e.g., 'Actual Amount', 'Budget Amount'). This hardcoded logic is difficult to maintain, prone to inconsistencies, and lacks scalability as new publications or grouping rules emerge. The inconsistent string formatting (e.g., varying spaces before group names) also indicates a lack of standardization.","  CASE
    WHEN publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times') THEN '      Regionals'
    WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN '     The Advertiser'
    WHEN publication_name IN ('The Australian') THEN ' The Australian'
    WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN '    The Courier Mail'
    WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN '   The Daily Telegraph'
    WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN '  The Herald Sun'
    ELSE '        Other'
  END AS publication_group,","Centralize publication grouping logic into a dedicated dimension table or a shared BigQuery view (`v_asl_DIM_publication_groups`) that maps `publication_name` to `publication_group`. This would allow all metrics to join to this single source, improving maintainability, consistency, and performance.",10,2104a3f5-9424-4087-a928-e67fecae789a
actual_amount_current_week_all_sales_channels,Hardcoded Logic,"The current fiscal week (`fy_year_week_number`) is calculated using hardcoded dates (`DATE('2025-06-23')`, `DATETIME '2024-07-03T00:00:00'`). This means the dashboard will not dynamically update to the 'current week' and will quickly become stale, requiring manual updates to each metric's SQL.","  fy_year_week_number = (2025 * 100) + DATETIME_DIFF(SAFE_CAST(DATE('2025-06-23') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)","Implement a dynamic fiscal week calculation using `CURRENT_DATE()` and the `v_asl_DIM_calendar` table to determine the current fiscal week. Alternatively, parameterize the 'current week' in Looker Studio to allow users to select the week, or define it as a dashboard-level parameter.",10,2104a3f5-9424-4087-a928-e67fecae789a
budget_volume_7day_avg_by_pub_group_subscriptions_alt_calc,Anti-Pattern|Redundancy,"Multiple metrics (e.g., `budget_volume_7day_avg_by_pub_group_subscriptions`, `_alt_calc`, `_alt_calc_2`) have nearly identical SQL logic for calculating budget volume averages. This redundancy increases dashboard complexity, makes debugging difficult, and suggests a lack of clear definition or an incomplete refactoring process.","SELECT
  SUM(CASE
    WHEN CASE
      WHEN publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin') THEN '6 Day Pubs'
      WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury and Sunday Tas'
      WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'NT News & Sunday Territorian'
      WHEN publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Other'
      WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
      WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
      WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
      WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
      ELSE publication_name
    END = 'PNG' THEN 0
    WHEN CASE
      WHEN publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin') THEN '6 Day Pubs'
      WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury and Sunday Tas'
      WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'NT News & Sunday Territorian'
      WHEN publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Other'
      WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
      WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
      WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
      WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
      ELSE publication_name
    END = '6 Day Pubs' THEN SAFE_DIVIDE(Budget_Volume, 6)
    ELSE SAFE_DIVIDE(Budget_Volume, 7)
  END) AS total_budget_volume_7day_avg_alt","Consolidate these redundant metrics into a single, well-defined metric. If there are truly different calculation methodologies, clearly name them and document the distinctions. If not, remove the duplicates to simplify the dashboard and improve performance.",10,2104a3f5-9424-4087-a928-e67fecae789a
budget_amount_by_publication_group_current_week,Hardcoded Logic|Inconsistency,"The filtering logic for publication names (e.g., `publication_name NOT IN (...)` and complex `CASE` statements within `WHERE` clauses) is highly repetitive and inconsistent across metrics. For example, the `publication_group` definition for 'Weekly Times' and 'PNG' differs between 'Actual Amount by Publication Group' and 'Budget Amount by Publication Group'. This leads to potential data discrepancies and makes it difficult to understand the exact scope of each metric.","  AND CASE
    WHEN publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG') THEN '      Regionals'
    WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN '     The Advertiser'
    WHEN publication_name IN ('The Australian') THEN ' The Australian'
    WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN '    The Courier Mail'
    WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN '   The Daily Telegraph'
    WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN '  The Herald Sun'
    WHEN publication_name IN ('Weekly Times') THEN '       Weekly Times'
    ELSE '        Other'
  END != '        Other'
  AND CASE
    WHEN publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG') THEN '      Regionals'
    WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN '     The Advertiser'
    WHEN publication_name IN ('The Australian') THEN ' The Australian'
    WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN '    The Courier Mail'
    WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN '   The Daily Telegraph'
    WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN '  The Herald Sun'
    WHEN publication_name IN ('Weekly Times') THEN '       Weekly Times'
    ELSE '        Other'
  END != '       Weekly Times'
  AND CASE
    WHEN publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG') THEN '      Regionals'
    WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN '     The Advertiser'
    WHEN publication_name IN ('The Australian') THEN ' The Australian'
    WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN '    The Courier Mail'
    WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN '   The Daily Telegraph'
    WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN '  The Herald Sun'
    WHEN publication_name IN ('Weekly Times') THEN '       Weekly Times'
    ELSE '        Other'
  END != '      Regionals'","Define and manage publication exclusion/inclusion rules and grouping in a centralized dimension table or view. This would replace complex, repeated `CASE` statements and `NOT IN` clauses with simpler, more consistent joins and filters. This is crucial for data governance and accuracy.",10,2104a3f5-9424-4087-a928-e67fecae789a
"source_system_record_count_by_source_system,total_actual_amount_by_year_and_source,total_actual_amount_by_source",Anti-Pattern|Hardcoded Logic,"All three metrics on this dashboard (`Record Count by Source System`, `Total Actual Amount by Fiscal Year and Source System`, `Total Actual Amount by Source System`) contain an almost identical nested subquery named `OSandFACT`. This subquery performs common joins (e.g., with `v_asl_DIM_os_publication_hierachy`, `v_asl_DIM_calendar`, `v_asl_DIM_gl_department`) and applies a hardcoded filter (`control.period_name IN ('CP', 'PY')`) to define 'active fiscal periods'. This repeated SQL logic violates the DRY (Don't Repeat Yourself) principle, leading to redundancy, increased complexity, and potential inconsistencies if the base logic or period definitions need to change across multiple metrics.","WITH OSandFACT AS (
    SELECT
      os.source_system_name,
      CAST(os.fiscal_week_id AS INT) AS fiscal_week_id,
      os.gl_publication_code,
      os.os_level_12
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_year_week_number AS INT) AS fy_year_week_number
        FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
        JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep ON os.os_level_12 = dep.department_code
  )","To improve maintainability and enforce consistency, encapsulate this common join and filtering logic into a dedicated BigQuery view (e.g., `v_asl_FCT_finance_os_aggregated_active_periods`). All metrics can then query this consolidated view, reducing redundancy and simplifying future updates. If using LookerML, define a base view or explore that includes these joins and filters, allowing metrics to be built on top of this consolidated definition.",11,d7412673-0af1-4efe-8374-ca475b001fb6
multiple,Hardcoded Logic / Anti-Pattern,"The dashboard heavily relies on hardcoded values within the SQL logic for multiple key filters, including fiscal year ('FY2025'), fiscal week ('40'), OS Level 4 ('Total Revenue', 'Total Expenses'), and L03 Publication Code ('News Media Publishing'). This pattern is repeated across all Actual, Budget, and Forecast metrics, leading to significant code duplication and making the dashboard inflexible for analyzing different periods or business segments without manual SQL modifications. For instance, if the business needs to view data for FY2026 or Week 41, every single relevant metric's SQL would need to be updated.","WHERE
  SAFE_CAST(dep.gl_hierarchy_code AS STRING) = 'FY2025'
  AND SAFE_CAST(os.os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses')
  AND SAFE_CAST(pub.l03_publication_code AS STRING) = 'News Media Publishing'
  AND SAFE_CAST(calendar.fy_week_of_year AS INT) = 40","Parameterize these common filters (Fiscal Year, Fiscal Week, OS Level 4, L03 Publication Code) at the Looker Studio dashboard level. This would allow users to dynamically select these values, making the dashboard reusable across different periods and business contexts without requiring changes to the underlying metric SQL. Consider creating a single base metric for 'Amount' and applying filters via Looker Studio controls.",12,b1c5901f-a535-42eb-870d-05cc025f7c27
"actual_amount_fy25_total_rev_exp_news_media_wk40_circ_sub_cont_lic_by_dims, budget_amount_fy25_total_rev_exp_news_media_wk40_circ_sub_cont_lic_by_dims, forecast_amount_fy25_total_rev_exp_news_media_wk40_circ_sub_cont_lic_by_dims",Hardcoded Logic / Anti-Pattern,"Specific metrics are created to include additional hardcoded filters on `os_level_6` (e.g., 'Circulation', 'Subscription', 'Content Licensing'). This further fragments the data model and creates highly specific, less reusable metrics. If other `os_level_6` categories need to be analyzed, or if the combination changes, new metrics would be required.","AND SAFE_CAST(os.os_level_6 AS STRING) IN ('Circulation', 'Subscription', 'Content Licensing')","Instead of hardcoding `os_level_6` filters into separate metrics, expose `os_level_6` as a dimension in the dashboard. Users can then apply filters or create custom tables/charts to analyze specific categories or combinations of `os_level_6` values using a single, more generalized base metric.",12,b1c5901f-a535-42eb-870d-05cc025f7c27
"fiscal_year_wk40_41_dimension, fiscal_year_wk40_dimension",Redundancy / Anti-Pattern,"Two distinct dimension metrics exist for 'Fiscal Year', differing only by the specific fiscal week filter (Week 40 vs. Weeks 40 or 41). This is an unnecessary duplication of logic for a dimension that could be handled more flexibly.","fiscal_year_wk40_41_dimension: WHERE SAFE_CAST(calendar.fy_week_of_year AS INT) IN (40, 41)
fiscal_year_wk40_dimension: WHERE SAFE_CAST(calendar.fy_week_of_year AS INT) = 40","Create a single, general 'Fiscal Year' dimension without specific week filters. Allow users to select fiscal weeks using a filter control in Looker Studio. This provides greater flexibility and reduces metric clutter.",12,b1c5901f-a535-42eb-870d-05cc025f7c27
multiple,Data Type Inconsistency (Minor Anti-Pattern),"Frequent use of `SAFE_CAST` for dimension columns (e.g., `fy_week_of_year AS INT`, `is_print_digital_flag AS STRING`, `os_level_6 AS STRING`) suggests potential inconsistencies in the underlying view data types or a design choice that might not be optimal. While `SAFE_CAST` prevents errors, it can mask upstream data quality issues or lead to less efficient queries if the casting is not truly necessary.","SAFE_CAST(calendar.fy_week_of_year AS INT) AS fy_week_of_year,
SAFE_CAST(pub.is_print_digital_flag AS STRING) AS is_print_digital_flag,
SAFE_CAST(os.os_level_6 AS STRING) AS os_level_6","Review the data types defined in the source views (`v_asl_FCT_finance_os_aggregated`, `v_asl_DIM_os_publication_hierachy`, `v_asl_DIM_calendar`, `v_asl_DIM_gl_department`). Ensure that columns are stored with their most appropriate data types (e.g., `INT` for `fy_week_of_year`, `BOOLEAN` or `STRING` if `is_print_digital_flag` is truly a flag). This can improve query performance and data integrity by reducing unnecessary casting at the query level.",12,b1c5901f-a535-42eb-870d-05cc025f7c27
"All measure metrics (e.g., total_records_digital_b2c_aus_2025) and dimension metrics (e.g., delivery_medium_type_category, masthead_group_level1, masthead_group_level2, sold_in_source_code_category, business_segment_category)",Hardcoded Logic|Anti-Pattern,"Identical, complex `CASE` statements are repeatedly embedded within the CTEs of all five measure metrics and also defined as standalone dimension metrics. This duplication for `subscription_type_category`, `masthead_category_level1`, `masthead_category_level2`, `acquisition_source_category`, and `business_segment_category` creates a significant maintenance burden and increases the risk of inconsistencies if logic needs to be updated.","WITH pre_calculated_dims AS (
    SELECT
        t0.fy_year,
        t0.table_nm,
        t0.masthead,
        t0.sold_in_source_code,
        t0.delivery_medium_type,
        t0.subscriber_has_email_flag,
        t0.classification_level_2,
        -- Subscription Type Category
        CASE WHEN (CONCAT(SAFE_CAST(t0.delivery_medium_type AS STRING),' ',SAFE_CAST(t0.subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END AS subscription_type_category,
        -- Masthead Category Level 1
        CASE
            WHEN t0.masthead = 'TA' THEN 'The Australian'
            WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro'
            -- ... (rest of masthead_category_level1 logic) ...
        END AS masthead_category_level1,
        -- Masthead Category Level 2
        CASE
            WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC') THEN 'States and Community'
            -- ... (rest of masthead_category_level2 logic) ...
        END AS masthead_category_level2,
        -- Acquisition Source Category
        CASE
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(t0.sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
            -- ... (many more WHEN clauses) ...
            ELSE NULL
        END AS acquisition_source_category,
        -- Business Segment Category
        CASE
            WHEN t0.classification_level_2 IN ('Consumer', 'Gift Receiver') THEN 'B2C'
            -- ... (rest of business_segment_category logic) ...
        END AS business_segment_category
    FROM
        `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
)","Extract these common dimension categorizations into a dedicated BigQuery view or a centralized Looker Studio data source. This promotes reusability, simplifies maintenance, and ensures consistency across all dependent metrics. Ideally, these categorizations should be managed as a dimension table in the underlying data warehouse.",13,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
"All measure metrics (e.g., total_records_digital_b2c_aus_2025) and sold_in_source_code_category",Data Mismatch|Data Exclusion|Hardcoded Logic,"The `acquisition_source_category` `CASE` statement attempts to categorize `sold_in_source_code` values. However, the `structure_sql` indicates there are 5845 unique `sold_in_source_code` values, while the `CASE` statement only explicitly covers a very small, hardcoded subset. Any `sold_in_source_code` not matching these specific patterns defaults to `NULL`. Crucially, the `WHERE` clause for all measure metrics then filters out `pre_calculated_dims.acquisition_source_category IS NOT NULL`, leading to the exclusion of a vast majority of records from the dashboard's calculations. This results in an incomplete and potentially misleading representation of acquisition data.","        -- Acquisition Source Category
        CASE
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(t0.sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(t0.sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
            -- ... (many more WHEN clauses) ...
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(t0.sold_in_source_code AS STRING))), '_TWT') > 0) THEN 'Twitter'
            ELSE NULL
        END AS acquisition_source_category
...
WHERE
    pre_calculated_dims.acquisition_source_category IS NOT NULL",Develop a comprehensive lookup table in the data warehouse that maps all relevant `sold_in_source_code` values to their respective `acquisition_source_category`. This table should be joined to the `acquisitions_cancellations_movements` table. Re-evaluate the necessity and impact of the `acquisition_source_category IS NOT NULL` filter to ensure all relevant data is included or explicitly handled.,13,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
product_group_category,Anti-Pattern|Hardcoded Logic|Complexity,"The `product_group_category` metric's SQL logic is excessively complex, featuring deeply nested `CASE` statements and reliance on an intermediate, derived `clmn30_value`. This makes the logic extremely difficult to read, understand, debug, and maintain. The `ELSE 'Check for New Products'` clause indicates an incomplete mapping, requiring manual intervention for new product types.","SELECT
    CASE
        WHEN (
            (clmn30_value = 'Bundle 7 Day') OR (clmn30_value = 'Bundle 7 day and Other') OR (clmn30_value = 'Bundle Only') OR (clmn30_value = 'Bundle Weekend') OR (clmn30_value = 'Bundle Weekend Only') OR (clmn30_value = 'Digital') OR (clmn30_value = 'Digital Only') OR (clmn30_value = 'Essentials') OR (clmn30_value = 'Print 7 Day') OR (clmn30_value = 'Print 7 day and Other') OR (clmn30_value = 'Print Weekend') OR (clmn30_value = 'Print Weekend Only') OR (clmn30_value = '3rd Party and Others') OR (clmn30_value = '3rd Party and Other')
        ) THEN 'Core Consumer'
        -- ... (rest of the complex logic) ...
        ELSE 'Check for New Products'
    END AS product_group_category
FROM (
    SELECT
        t0.budfor_product,
        -- ... (intermediate clmn30_value calculation) ...
    FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
)","Refactor this complex product categorization logic. The ideal solution is to pre-calculate and store these product groups in the data warehouse, potentially using a dedicated product dimension table. If this is not feasible, break down the logic into multiple, simpler, and more manageable custom fields or views within Looker Studio to improve readability and maintainability.",13,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
N/A (applies to all metrics),Anti-Pattern,"All 6 metrics on the dashboard repeat the same base filtering logic (`financial_year IS NOT NULL`, `source_publishing_division != 'Medium Rare Content Agency'`, `revenue_transaction_status IN ('Billed', 'Booked')`). This creates significant redundancy, increases the risk of errors, and makes global filter changes difficult across the dashboard.","t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked')","Encapsulate these common filters in a base view or a Looker Studio data source filter. Alternatively, define these as reusable parameters or calculated fields at the data source level to ensure consistency and ease of maintenance.",14,705edcb5-737a-4600-b1a7-11870177f97a
"advertiser_name_2024_calendar_year, data_load_datetime_2025_oct_financial, programmatic_gross_revenue_by_cost_model_fy_fm, cost_model_type_2025_fy, programmatic_gross_revenue_foxtel_2025_fy",Hardcoded Logic,"Multiple metrics hardcode specific financial years (e.g., '2025') or calendar years (e.g., '2024'). This makes the dashboard static and requires manual updates annually, leading to high maintenance overhead and potential for outdated data if not regularly updated.",t0.calendar_year IN ('2024') (for advertiser_name_2024_calendar_year); t0.financial_year IN ('2025') (for others),"Implement dynamic date filtering using Looker Studio parameters or BigQuery's date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` for current year, or relative date logic) to ensure metrics automatically update for the current period.",14,705edcb5-737a-4600-b1a7-11870177f97a
"programmatic_gross_revenue_by_cost_model_fy_fm, programmatic_gross_revenue_foxtel_2025_fy",Hardcoded Logic,"High-criticality revenue metrics hardcode specific values for `revenue_type_level2`, `revenue_group_subtype`, `source_system_code`, `cost_model_type`, and even a specific `advertiser_name`. This limits the reusability of these metrics and makes it difficult to analyze performance across different segments without creating new, redundant metrics.","t0.revenue_type_level2 = 'Programmatic' AND t0.revenue_group_subtype IN ('Programmatic Source', 'Digital') AND t0.source_system_code = 'PLUTO' (common to both); t0.cost_model_type IN ('PMP', 'Non-Guaranteed') (for programmatic_gross_revenue_by_cost_model_fy_fm); t0.advertiser_name = 'Foxtel Management Pty Ltd' (for programmatic_gross_revenue_foxtel_2025_fy)","Define these business rules as reusable calculated fields or parameters in the Looker Studio data source. For complex categorizations, consider creating a lookup table in BigQuery and joining to it, or a dedicated view that pre-classifies these attributes, allowing for dynamic filtering via dashboard controls.",14,705edcb5-737a-4600-b1a7-11870177f97a
programmatic_gross_revenue_by_cost_model_fy_fm,Anti-Pattern,"The `financial_month` column is cast to `FLOAT64` using `SAFE_CAST`. This is an unusual data type for a month and might indicate underlying data quality issues or an attempt to handle mixed types. Casting to `INT64` would typically be more appropriate for numerical month representation, or keeping it as a string if it represents month names.",SAFE_CAST(t0.financial_month AS FLOAT64) AS financial_month_float,"Investigate the actual data type and values of `t0.financial_month` in the `v_adsales_revenue_client` table. If it contains non-numeric values, consider data cleansing or a more robust conversion strategy. If it's numeric, `CAST(t0.financial_month AS INT64)` or keeping it as a string for grouping might be more suitable.",14,705edcb5-737a-4600-b1a7-11870177f97a
meas_gross_revenue_amount_previous_fy_date_condition,Hardcoded Logic,"This critical revenue metric uses a hardcoded `TIMESTAMP '2025-01-06...'` to define a date condition. This makes the metric static and quickly outdated, severely impacting the dashboard's relevance for current financial analysis and historical comparisons. The dashboard name 'FY25' further highlights this as a critical oversight for a 'Final_Draft' dashboard intended for ongoing use.","DATETIME_ADD(DATE(TIMESTAMP '2025-01-06 02:37:12.747676+00', 'UTC'), INTERVAL -365 DAY)","Replace the hardcoded timestamp with a dynamic date reference (e.g., `CURRENT_TIMESTAMP()`, `CURRENT_DATE()`, or a configurable Looker Studio parameter) to ensure the metric always reflects the current period's context. This is crucial for the dashboard's ongoing utility.",15,4d8074b2-17a8-48ba-babe-c536359b1f64
meas_gross_revenue_amount_previous_fy_date_condition_k,Hardcoded Logic,"Similar to its non-K counterpart, this critical revenue metric also uses a hardcoded `TIMESTAMP '2025-01-06...'` for its date condition, leading to the same issues of static and outdated data.","DATETIME_ADD(DATE(TIMESTAMP '2025-01-06 02:37:12.747676+00', 'UTC'), INTERVAL -365 DAY)","Implement dynamic date referencing (e.g., `CURRENT_TIMESTAMP()`, `CURRENT_DATE()`, or a Looker Studio parameter) to ensure the metric remains current and accurate for financial reporting.",15,4d8074b2-17a8-48ba-babe-c536359b1f64
dim_financial_short_month_mapped,Anti-Pattern,"The financial month mapping uses a lengthy and hardcoded `CASE` statement to assign sortable prefixes (e.g., '1.Jul', '2.Aug'). While functional, this approach is inflexible and prone to errors if the financial year start changes or new month naming conventions are introduced, requiring manual updates across all instances.",CASE WHEN t0.financial_short_month = 'Jul' THEN '1.Jul' WHEN t0.financial_short_month = 'Aug' THEN '2.Aug' WHEN t0.financial_short_month = 'Sep' THEN '3.Sep' WHEN t0.financial_short_month = 'Oct' THEN '4.Oct' WHEN t0.financial_short_month = 'Nov' THEN '5.Nov' WHEN t0.financial_short_month = 'Dec' THEN '6.Dec' WHEN t0.financial_short_month = 'Jan' THEN '7.Jan' WHEN t0.financial_short_month = 'Feb' THEN '8.Feb' WHEN t0.financial_short_month = 'Mar' THEN '9.Mar' WHEN t0.financial_short_month = 'Apr' THEN '10.Apr' WHEN t0.financial_short_month = 'May' THEN '11.May' WHEN t0.financial_short_month = 'Jun' THEN '12.Jun' ELSE NULL END,"Consider using a dedicated date dimension table that includes financial year, quarter, and month mappings. This centralizes the logic and improves maintainability. Alternatively, explore more dynamic SQL functions (e.g., a UDF or a more complex `FORMAT_DATE` with `MOD` logic) if the financial year start is fixed and consistent.",15,4d8074b2-17a8-48ba-babe-c536359b1f64
meas_gross_revenue_amount_previous_fy_date_condition,Anti-Pattern,"Within the date condition, a complex nested `CASE` statement selects between `t0.fix_date_lod` and `t0.booking_line_created_date` based on multiple specific conditions (`revenue_type`, `revenue_group_subtype`, `sales_segment_l_2_name_sync`, `advertiser_parent`). This makes the logic difficult to understand, debug, and maintain, and obscures the business rule it represents.","CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END","Encapsulate this complex date selection logic into a dedicated view or a calculated column in the underlying `adsales_performance` table, named descriptively (e.g., `effective_booking_date`). This would centralize the logic, improve readability, and simplify metric definitions.",15,4d8074b2-17a8-48ba-babe-c536359b1f64
meas_ss_lgb_current_fy_zero_week_offset_derived,Data Model Ambiguity,"The metric's calculation `(t0.ss_lgb * t0.DOW_Today) / 7` relies on a column named `t0.DOW_Today`. The naming 'DOW_Today' suggests a dynamic 'Day of Week Today' value, which could lead to inconsistent results depending on when the query is executed or if dashboard caching is in effect. If it's a static column representing the day of week for the record's date, the naming is misleading.","SAFE_DIVIDE((t0.ss_lgb * t0.DOW_Today), 7)","Clarify the definition and update mechanism of `t0.DOW_Today`. If it's intended to be dynamic, ensure caching strategies in Looker Studio are understood, or consider calculating this dynamically within the dashboard using Looker Studio's date functions. If it's a static attribute, rename it for clarity (e.g., `record_day_of_week`) to avoid confusion and ensure predictable behavior.",15,4d8074b2-17a8-48ba-babe-c536359b1f64
gross_revenue_programmatic_tubi_total_current_fy,Hardcoded Logic|Anti-Pattern,"Multiple metrics, including 'Programmatic/Tubi Gross Revenue', rely on an identical, repeated `CASE` statement within their SQL logic to define 'revenue_category'. This `CASE` statement explicitly maps 'TUBI', 'PG', 'OMP', 'PMP', and 'PERFORMANCE' based on 'unified_publication_name' and 'cost_model_type'. However, the `business_rules_sql` sample data shows a 'revenue_category' of 'Other' accounting for over 5 million records (a majority of the dataset). Since the `CASE` statement uses `ELSE NULL`, these 'Other' records are effectively assigned a `NULL` 'revenue_category' by the metric's SQL, leading to their exclusion from category-specific aggregations or misrepresentation. This indicates the hardcoded logic is incomplete and not aligned with the full spectrum of revenue categories present in the underlying data.","WITH base_data AS (
    SELECT
        t0.gross_revenue_amount,
        t0.relative_fy_year_offset,
        t0.revenue_group_subtype,
        t0.unified_publication_name,
        CASE
            WHEN (t0.unified_publication_name = 'TUBI') THEN 'TUBI'
            WHEN (UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED') THEN 'PG'
            WHEN (UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED') THEN 'OMP'
            WHEN (UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP') THEN 'PMP'
            WHEN (t0.unified_publication_name = 'Run of Audience Extension') THEN 'PERFORMANCE'
            ELSE NULL
        END AS revenue_category
    FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
)
SELECT SUM(gross_revenue_amount) FROM base_data WHERE relative_fy_year_offset = 0 AND (revenue_category IN ('TUBI', 'PERFORMANCE') OR revenue_group_subtype = 'PROGRAMMATIC SOURCE')","Replace the hardcoded `CASE` statement with a join to a centralized, governed lookup table for 'revenue_category'. This table should comprehensively map all possible combinations of 'unified_publication_name' and 'cost_model_type' to their correct revenue categories, including the 'Other' category identified. Alternatively, create a persistent derived table or view in BigQuery that pre-calculates and stores the 'revenue_category' to ensure consistency and simplify metric definitions across the dashboard.",16,5491badf-5ec0-4b4f-a427-b12a3a3395dd
gross_revenue_pmp_current_fy,Hardcoded Logic|Anti-Pattern,"Similar to other category-specific metrics, 'PMP Gross Revenue' uses the same hardcoded `CASE` statement to define 'revenue_category'. The `business_rules_sql` indicates a large volume of data (over 5 million records) falls into an 'Other' category, which the `CASE` statement assigns as `NULL`. This means that PMP revenue might be understated if any PMP-related transactions are being miscategorized or falling into the 'Other' bucket due to the incomplete `CASE` logic. The current implementation risks excluding relevant data from PMP calculations.","WITH base_data AS (
    SELECT
        t0.gross_revenue_amount,
        t0.relative_fy_year_offset,
        t0.unified_publication_name,
        CASE
            WHEN (t0.unified_publication_name = 'TUBI') THEN 'TUBI'
            WHEN (UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED') THEN 'PG'
            WHEN (UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED') THEN 'OMP'
            WHEN (UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP') THEN 'PMP'
            WHEN (t0.unified_publication_name = 'Run of Audience Extension') THEN 'PERFORMANCE'
            ELSE NULL
        END AS revenue_category
    FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
)
SELECT SUM(gross_revenue_amount) FROM base_data WHERE relative_fy_year_offset = 0 AND revenue_category = 'PMP'","Implement a centralized 'revenue_category' definition, ideally as a lookup table or a pre-calculated field in the base data model. This will ensure all revenue categories are consistently and accurately assigned, preventing data loss or miscategorization for PMP and other specific revenue types. Review the 'Other' category to determine if any of its components should be reclassified into existing or new specific revenue categories.",16,5491badf-5ec0-4b4f-a427-b12a3a3395dd
all_metrics,Anti-Pattern,"The `SFCE_USER` Common Table Expression (CTE) is duplicated across all five metrics in the dashboard. This leads to redundant code, increased maintenance overhead, and potential performance inefficiencies as the same subquery is executed multiple times for each metric.","WITH
  SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  )","Extract the `SFCE_USER` CTE into a dedicated, governed view (e.g., `prstn_advertising_views.v_sfce_user_dim`) or a shared dimension table. This view can then be joined by all metrics, promoting reusability, consistency, and potentially improving query performance through caching or optimized execution plans.",17,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
all_metrics,Hardcoded Logic,"All metrics share an identical and complex `WHERE` clause containing multiple hardcoded filters (`relative_fy_year_offset`, `revenue_transaction_status`, `style_name`, `source_publishing_division`, `publication_name` with specific account numbers). This extensive duplication makes updates difficult, error-prone, and obscures the core business logic of each metric, violating the DRY (Don't Repeat Yourself) principle.","WHERE
  t0.relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(t0.style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(t0.source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(t0.publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(t0.publication_name) LIKE 'SUDDENLY%' AND t0.account_number IN ('17114', '29172', '52809')))","Create a base view (e.g., `v_adsales_revenue_client_weekly_filtered`) that encapsulates these common filtering conditions. All dashboard metrics should then query this base view, ensuring consistency, simplifying metric definitions, and centralizing filter logic for easier maintenance and auditing. This also improves performance by applying filters once.",17,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
current_fy_actual_gross_revenue_k,Data Mismatch,"The metric's SQL logic defines a sum of gross revenue for the current financial year, excluding future periods. However, the `primary_analysis_sql` sample data shows 'current_fy_actual_gross_revenue' as '0.0', indicating a significant discrepancy between the intended calculation and the actual queried result. This suggests either no data matches the criteria, or there's an underlying issue preventing the calculation from yielding expected values.","SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.is_future_period_flag = 'N' AND t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0;","Investigate the underlying data for `is_future_period_flag`, `relative_fy_year_offset`, and `gross_revenue_amount` to understand why the sum is zero. Verify data freshness and completeness for the current financial year.",18,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
current_fy_gross_revenue_k,Data Mismatch,"Similar to 'current_fy_actual_gross_revenue_k', this metric's SQL logic calculates total gross revenue for the current financial year. However, the `primary_analysis_sql` sample data shows 'current_fy_gross_revenue' as 'null'. This is a critical failure for a primary revenue metric, indicating either a data absence or a calculation error.","SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0;",Thoroughly debug the SQL query execution. Check for data availability in `adsales_performance` for the current financial year (`relative_fy_year_offset = 0`). Ensure `gross_revenue_amount` is correctly populated and not null in the source.,18,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
stly_gross_revenue_k,Data Mismatch,"The 'STLY Gross Revenue (k)' metric, intended to show 'Same Time Last Year' revenue, returns '0.0' in the `primary_analysis_sql` sample. This suggests that no data matches the criteria for the previous financial year and 'STLY' flag, or the calculation is failing.","SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = -1 AND t0.stly_flag = 'Y') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0;",Verify the presence and correctness of `relative_fy_year_offset = -1` and `stly_flag = 'Y'` data in the `adsales_performance` table. Confirm that the `gross_revenue_amount` is non-zero for these records.,18,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
current_fy_past_weeks_pub_lgb,Data Mismatch,"This metric, designed to show past weeks' Publisher LGB for the current FY, also returns '0.0' in the `primary_analysis_sql` sample. This indicates a potential lack of data or an issue with the filtering logic for `relative_fy_week_offset < 0`.",SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.relative_fy_week_offset < 0) THEN t0.pub_lgb ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0;,Examine the `adsales_performance` table for records matching `relative_fy_year_offset = 0` and `relative_fy_week_offset < 0` with non-zero `pub_lgb` values. Confirm the data is as expected for 'past weeks'.,18,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
all_measures,Anti-Pattern,"Multiple financial metrics (`current_fy_actual_gross_revenue_k`, `current_fy_gross_revenue_k`, `stly_gross_revenue_k`, `current_fy_past_weeks_pub_lgb`, `current_fy_current_week_prorated_pub_lgb`) rely on hardcoded `CASE WHEN` statements to define time periods using `relative_fy_year_offset`, `relative_fy_week_offset`, `is_future_period_flag`, and `stly_flag`. This pattern is repeated and makes the dashboard's logic rigid and difficult to maintain. Any change to the definition of 'current FY', 'STLY', or 'future period' requires modifying multiple metric definitions.",Example from 'current_fy_actual_gross_revenue_k': CASE WHEN (t0.is_future_period_flag = 'N' AND t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END,"Centralize time-based logic. Consider creating a dedicated date dimension table with pre-calculated flags (e.g., `is_current_fy`, `is_stly`, `is_past_week_current_fy`) or using a Looker Studio parameter for the current financial year/week offset, allowing for more dynamic and maintainable calculations. Alternatively, define these period flags as calculated fields in the Looker Studio data source layer if the underlying table cannot be modified.",18,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
all_dimensions,Anti-Pattern,"All dimension metrics (`advertiser_group_dimension`, `product_group_dimension`, `fin_adtype_name_dimension`, `unified_publication_name_dimension`, `financial_week_dimension`) use `LIMIT 10` in their `SELECT DISTINCT` queries. While this is common for populating dropdowns, it can hide the full range of available distinct values if there are more than 10, potentially misleading users or obscuring data quality issues (e.g., unexpected values beyond the top 10).",SELECT DISTINCT advertiser_group FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` LIMIT 10;,"Remove `LIMIT 10` for dimension queries if the intent is to show all distinct values for filtering or analysis. If performance is a concern, implement appropriate caching strategies or consider pre-aggregating distinct values in a separate lookup table. For display purposes, ensure users are aware that only a subset of values is shown.",18,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
all_metrics_from_v_adsales_revenue_client_daily/weekly,Anti-Pattern,"A highly complex and identical `WHERE` clause, defining 'Contra' advertiser logic and exclusion criteria, is repeated verbatim across almost all metrics sourcing from `v_adsales_revenue_client_daily` and `v_adsales_revenue_client_weekly`. This leads to significant code duplication, makes maintenance difficult, and increases the risk of inconsistencies if the business logic for 'Contra' advertisers changes.","WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-')))","Centralize this common filtering logic into a dedicated BigQuery view or a common CTE that all dependent metrics can reference. This would drastically improve maintainability, readability, and potentially query performance by reducing redundant processing.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"gross_revenue_current_fy_minus_1, gross_revenue_current_fy_minus_2_or_less, gross_revenue_current_fy, gross_revenue_current_fy_plus_1_or_more, gross_revenue_total_fy_past, gross_revenue_digital, gross_revenue_current_fy_minus_1_open_accounts, gross_revenue_current_fy_minus_2_or_less_open_accounts, gross_revenue_current_fy_open_accounts, gross_revenue_current_fy_plus_1_or_more_open_accounts, gross_revenue_total_fy_past_open_accounts, gross_revenue_digital_open_accounts",Anti-Pattern / Code Duplication,"Twelve different 'Gross Revenue' metrics (5 for FY offsets, 1 for Digital, and their 'Open Accounts' counterparts) use almost identical, large nested subqueries (`FROM (SELECT ... GROUP BY ALL) AS t0`). The only difference between the two groups of metrics is the presence of an additional filter for `sales_segment_gm_name = 'Lou Barrett'`. This is highly inefficient, difficult to maintain, and indicates a lack of reusable data sources or proper parameterization.","FROM ( SELECT financial_year, CAST(financial_month AS int) AS financial_month_no, financial_short_month, calendar_year_month, sales_segment_gm_name, portfolio_conformed_name_current, IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full, advertiser_name, adpoint_account_number, revenue_type, relative_fy_year_offset, CASE WHEN adpoint_account_number IN (SELECT DISTINCT NMBS_T_Number FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data`) THEN 'Y' ELSE 'N' END AS sheet_account_flag, CASE WHEN adpoint_account_number IN (SELECT DISTINCT NMBS_T_Number FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data` WHERE SAFE_CAST(Status AS STRING) = 'Closed') THEN 'Closed' ELSE 'Open' END AS status_asl, sum(gross_revenue_amount) AS gross_revenue_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND SAFE_CAST(adpoint_account_number AS STRING) != '20696' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) GROUP BY ALL ) AS t0","Refactor these metrics to leverage a common, parameterized data source (e.g., a BigQuery view or a Looker Studio blended data source/parameter) that allows filtering by `relative_fy_year_offset`, `revenue_type`, `status_asl`, and `sales_segment_gm_name` at the dashboard level. This would significantly reduce SQL complexity and improve maintainability.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
gross_revenue_by_account_group_and_dimensions,Hardcoded Logic / Anti-Pattern,"The `account_group` dimension is defined using a complex, nested `CASE` statement that hardcodes specific `adpoint_account_number`s to a very long, specific string value ('CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'). This makes the logic brittle and difficult to manage if account groupings change or new accounts need to be added. It suggests a lack of proper dimension modeling.","CASE WHEN (CASE WHEN (SAFE_CAST(t0.adpoint_account_number AS STRING) IN ('13019', '52246', '18387')) THEN 'ctr1' ELSE SAFE_CAST(t0.adpoint_account_number AS STRING) END = 'ctr1') THEN 'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants' ELSE SAFE_CAST(t0.advertiser_name AS STRING) END AS account_group","Externalize this grouping logic into a lookup table (e.g., `account_group_mapping`) in BigQuery. This table would map `adpoint_account_number` to its corresponding `account_group` name, allowing for easier updates and better data governance. The long concatenated string should also be reviewed for better presentation or separate dimensions.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"dim_portfolio_owner_filtered_by_industry_gm, gross_revenue_current_fy_minus_1, gross_revenue_current_fy_minus_2_or_less, gross_revenue_current_fy, gross_revenue_current_fy_plus_1_or_more, gross_revenue_total_fy_past, gross_revenue_digital",Hardcoded Logic,"Specific General Manager names ('Renee Sycamore', 'Lou Barrett') are hardcoded directly into the SQL queries. This makes the dashboard inflexible and requires manual updates if these individuals change roles or if the business needs to analyze other GMs.",SAFE_CAST(sales_segment_gm_name AS STRING) IN ('Renee Sycamore'),"If these filters are dynamic, consider using Looker Studio parameters or a dedicated dimension for GM names that users can select from. If they represent fixed business segments, ensure they are managed centrally, perhaps in a lookup table.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
count_of_accounts_by_advertiser_name,Hardcoded Logic,"The metric explicitly filters for a hardcoded list of advertiser names. This is inflexible and prone to errors if the list of relevant advertisers changes frequently, requiring manual SQL modifications for each update.","SAFE_CAST(advertiser_name AS STRING) IN ('CTR_2023_AFL SPORT', 'CTR_2023_GWS GIANTS', 'CTR_2023_SYDNEY SWANS', 'CTR_2025_Greater Western Sydney Giants', 'CTR_2025_Raising Literacy Australia')","Manage this list in a BigQuery lookup table or as a configurable parameter in Looker Studio, allowing for easier updates without modifying the metric SQL.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
dim_account_status_asl,Anti-Pattern / Potential Performance,"The `status_asl` dimension is calculated using a subquery that selects distinct `NMBS_T_Number` from `contra_sheet_data`. While functional, this pattern can be inefficient if the `contra_sheet_data` table is very large and the subquery is executed repeatedly for each query involving this dimension.",CASE WHEN adpoint_account_number IN (SELECT DISTINCT NMBS_T_Number FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data` WHERE SAFE_CAST(Status AS STRING) = 'Closed') THEN 'Closed' ELSE 'Open' END,"Consider pre-joining `contra_sheet_data` to `v_adsales_revenue_client_daily` in a materialized view or a more optimized data model if performance becomes an issue, or if `status_asl` is a frequently used dimension.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"dim_current_portfolio_owner, dim_portfolio_owner_filtered_by_industry_gm, gross_revenue_by_account_group_and_dimensions, dim_account_status_asl, count_of_accounts_by_advertiser_name",Data Limitation,"Several dimension-based metrics and one aggregation metric (`gross_revenue_by_account_group_and_dimensions`) include a `LIMIT 10` clause. This restricts the number of distinct values returned, which might be acceptable for specific 'top N' visualizations but is problematic if the dashboard intends to display all possible values or if the metric is used in a filter control, potentially leading to incomplete data representation.",LIMIT 10;,"Review the intended use of these metrics. If they are meant to be comprehensive dimensions or for full data display, remove the `LIMIT` clause. If they are for specific 'top N' visualizations, ensure this is clearly documented and that a full dimension is available for other use cases.",19,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
all_metrics,Hardcoded Logic / Anti-Pattern,"Almost all metrics (22 out of 22) share an identical, large block of common filtering criteria (e.g., `revenue_transaction_status`, `financial_year IS NOT NULL`, `source_publishing_division` exclusion, `revenue_type`, `revenue_group_subtype`). This leads to highly repetitive SQL code across the dashboard, making it difficult to maintain, update, and ensure consistency. Any change to these common criteria would require modifying every single metric.","WHERE (revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital')","Encapsulate these common filtering rules within a base view or a logical model (e.g., using LookML, dbt, or a BigQuery view). This allows individual metrics to simply query the pre-filtered base, significantly reducing code duplication and improving maintainability. Alternatively, leverage Looker Studio's data source filters or report-level filters for these common criteria.",20,a17622e2-ad43-49cc-b3c5-19c95036fd14
all_metrics_financial_year,Hardcoded Logic / Data Mismatch,"All metrics are hardcoded to `financial_year IN ('2025')`. This is a critical issue as the `structure_sql` indicates data availability from 2024 to 2028, and the `validation_sql` explicitly reports `latest_year_check: ""FAIL""`. This means the dashboard is not displaying current or complete financial data, rendering it potentially irrelevant for present-day business decisions.",AND financial_year IN ('2025'),"Replace the hardcoded financial year with a dynamic parameter or a Looker Studio date control. This will allow users to select the relevant financial year (e.g., current year, previous year) or view a range of years, ensuring the dashboard always displays up-to-date and relevant information. A default to the current financial year should be implemented.",20,a17622e2-ad43-49cc-b3c5-19c95036fd14
"gross_revenue_excl_adj_rebate3_oct_2025, gross_revenue_excl_adj_rebate3_sep_2025, rebate_3_amount_oct_2025, rebate_3_amount_sep_2025, adjustment_amount_rebate3_oct_2025, adjustment_amount_rebate3_sep_2025, gross_revenue_rebate3_oct_2025, gross_revenue_rebate3_sep_2025",Hardcoded Logic,"Multiple metrics are created by hardcoding specific months (e.g., October, September) using `SAFE_CAST(financial_month AS FLOAT64) = 10.000000`. This leads to metric sprawl, where a new metric is needed for each month, making the dashboard inflexible and cumbersome to manage for time-series analysis.",AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000,"Implement a dynamic month filter or date range control in the Looker Studio dashboard. This allows users to select any month or period, eliminating the need for separate, hardcoded monthly metrics and significantly improving dashboard flexibility and scalability.",20,a17622e2-ad43-49cc-b3c5-19c95036fd14
"gross_revenue_excl_adj_account_filtered, adjustment_amount_account_filtered, gross_revenue_account_filtered",Hardcoded Logic,"Metrics are hardcoded to a specific account number (`account_number = '4039072'`). This limits the dashboard's utility to a single account, requiring the creation of new metrics for every other account that needs analysis, leading to unnecessary metric duplication.",AND account_number = '4039072',"Introduce an account number parameter or filter in the Looker Studio dashboard. This enables users to dynamically select and analyze data for any account, consolidating multiple account-specific metrics into a single, flexible component.",20,a17622e2-ad43-49cc-b3c5-19c95036fd14
"gross_revenue_excl_adj_rebate3_filtered, gross_revenue_excl_adj_rebate2_filtered, rebate_3_amount_total, adjustment_amount_rebate3_filtered, adjustment_amount_rebate2_filtered, gross_revenue_rebate3_filtered, gross_revenue_rebate2_filtered, rebate_2_amount_total",Anti-Pattern,"The conditions `rebate_3_amount != 0.000000` and `rebate_2_amount != 0.000000` are repeatedly applied across various metrics. While functionally correct, this repetition indicates a potential for abstraction if 'has rebate' is a common business concept or filter.",AND rebate_3_amount != 0.000000,"If 'transactions with rebate' is a frequently used filter, consider adding a boolean flag (e.g., `has_rebate_3`, `has_rebate_2`) to the underlying `v_adsales_revenue_client` view or a derived layer. This would simplify the SQL logic in the metrics and improve readability.",20,a17622e2-ad43-49cc-b3c5-19c95036fd14
gross_revenue_amount_nova_entertainment_2025,Anti-Pattern,"The metric uses a lengthy `CASE` statement to convert `financial_short_month` (e.g., 'Jul', 'Aug') into numerical month values. This approach is brittle, prone to errors if month naming conventions change, and makes the SQL less readable and maintainable compared to leveraging a dedicated date dimension or built-in date functions.",(CASE WHEN financial_short_month = 'Jul' THEN 1 WHEN financial_short_month = 'Aug' THEN 2 WHEN financial_short_month = 'Sep' THEN 3 WHEN financial_short_month = 'Oct' THEN 4 WHEN financial_short_month = 'Nov' THEN 5 WHEN financial_short_month = 'Dec' THEN 6 WHEN financial_short_month = 'Jan' THEN 7 WHEN financial_short_month = 'Feb' THEN 8 WHEN financial_short_month = 'Mar' THEN 9 WHEN financial_short_month = 'Apr' THEN 10 WHEN financial_short_month = 'May' THEN 11 WHEN financial_short_month = 'Jun' THEN 12 ELSE NULL END) AS financial_month_num,"Leverage a date dimension table that includes both short month names and numerical month values, or explore BigQuery's date parsing functions (e.g., `PARSE_DATE` with appropriate format strings) to ensure robust and maintainable month conversion.",21,3ee20092-1897-49b7-8bcd-4157d5f816eb
gross_revenue_amount_digital_filtered_weeks,Anti-Pattern,"The SQL contains an extremely long `NOT IN` clause for `unified_publication_name` (over 20 distinct values). This extensive hardcoded list makes the query difficult to read, manage, and update. Any changes to the list of excluded publications require direct modification of the SQL, increasing the risk of errors and maintenance overhead.","unified_publication_name NOT IN ('Admin.Sales', 'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Qantas Travel Insider', 'RACENET', 'SKYNEWS.ADMIN', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin', 'TOOWOOMBACUSTOM', 'odds.com.au', 'Shortlyster Managed Service NWN', 'Shortlyster Managed Service', 'Shortlyster Managed Service NQN', 'Shortlyster Managed Service GAD', 'SUDDENLY.TGG', 'SUDDENLY.CW', 'SUDDENLY.NORTH')","Create a dedicated lookup table (e.g., `excluded_publications`) in the data warehouse that stores these publication names. The metric SQL can then perform a `LEFT JOIN` and filter where the join key is `NULL`, or use a subquery with `NOT IN (SELECT publication_name FROM excluded_publications)`. This centralizes the business rule and improves maintainability.",21,3ee20092-1897-49b7-8bcd-4157d5f816eb
multiple_metrics,Hardcoded Logic,"Multiple metrics (`gross_revenue_amount_nova_entertainment_2025`, `gross_revenue_amount_digital_filtered_weeks`, `revenue_group_subtype_2025`, `financial_week_digital_2024`, `revenue_group_subtype_filtered_weeks`) hardcode specific financial years (e.g., '2024', '2025') in their `WHERE` clauses. The `structure_sql` indicates that data is available up to FY2027, meaning these metrics will become obsolete or require annual manual updates, which is unsustainable for a pacing report.","financial_year = '2025' OR financial_year IN ('2025', '2024')","Implement dynamic financial year selection. This could involve using a Looker Studio parameter for year selection, or defining a 'current financial year' in a configuration table, or using relative date logic (e.g., `financial_year = (SELECT MAX(financial_year) FROM adsales_performance)` or `financial_year = EXTRACT(YEAR FROM CURRENT_DATE())` adjusted for fiscal year start).",21,3ee20092-1897-49b7-8bcd-4157d5f816eb
multiple_metrics,Anti-Pattern,"The logic to exclude financial weeks 47-52 (and NULL weeks) is duplicated across `gross_revenue_amount_digital_filtered_weeks` and `revenue_group_subtype_filtered_weeks`. This indicates a common business rule that is not centralized, increasing the risk of inconsistencies if the exclusion criteria change.","(SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR financial_week IS NULL)","Encapsulate this common filtering logic. This could be achieved by creating a BigQuery view that pre-filters the `adsales_performance` table, or by defining a reusable calculated field or filter in Looker Studio that can be applied consistently across relevant charts and metrics.",21,3ee20092-1897-49b7-8bcd-4157d5f816eb
gross_revenue_current_cal_q4_ms_not_other_xtend_n,Hardcoded Logic|Anti-Pattern,"Multiple metrics, including this one, rely on hardcoded string values for `Managed_Service_Fl` ('Other', 'Not Other') and `xtend_flag` ('N', 'Y') within their SQL logic. This pattern is repeated across several segmented gross revenue metrics, making it cumbersome to update if business definitions for these flags change or new categories are introduced. It also reduces reusability of the underlying logic.",t0.Managed_Service_Fl != 'Other' AND t0.xtend_flag = 'N',"Define these segmentations as separate, governed dimensions or attributes in the underlying data model. Alternatively, if these are truly static, consider creating a centralized view or UDF that encapsulates these filtering conditions, promoting DRY (Don't Repeat Yourself) principles and improving maintainability.",22,fed70b12-c274-4cde-9920-592ca4c4dab0
gross_revenue_prev_fy_q1_ms_other_xtend_n,Hardcoded Logic|Anti-Pattern,"Similar to other segmented metrics, this metric uses hardcoded string values for `Managed_Service_Fl` and `xtend_flag`. This creates redundant logic and increases the effort required for any future modifications to these categorical filters.",t0.Managed_Service_Fl = 'Other' AND t0.xtend_flag = 'N',"Implement a more dynamic or centralized approach for managing these categorical filters, such as a lookup table for `Managed_Service_Fl` and `xtend_flag` values, or pre-defined flags in the data model, to ensure consistency and ease of updates across all relevant metrics.",22,fed70b12-c274-4cde-9920-592ca4c4dab0
gross_revenue_current_cal_xtend_y,Hardcoded Logic|Anti-Pattern,"This metric also hardcodes the `xtend_flag` value ('Y'). While simple, the repetition across multiple metrics for different `xtend_flag` values ('N', 'Y') indicates a pattern that could be consolidated.",t0.xtend_flag = 'Y',"Consolidate `xtend_flag` logic. If `xtend_flag` is a common dimension, it should ideally be used directly as a filter in the dashboard or derived in the data model, rather than hardcoded into each metric's SQL.",22,fed70b12-c274-4cde-9920-592ca4c4dab0
gross_revenue_previous_fy_conditional_month_offset,Anti-Pattern|Complex Logic,"The SQL logic for this metric features a deeply nested `CASE` statement that conditionally switches between two different revenue calculation methods based on `relative_fy_month_offset`. This complexity makes the SQL difficult to read, understand, debug, and maintain, increasing the likelihood of errors during future modifications.",SUM(CASE WHEN SAFE_CAST(t0.relative_fy_month_offset AS INT64) < -12 THEN (CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = -1 THEN t0.gross_revenue_amount ELSE 0 END) ELSE (CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = -1 AND SAFE_CAST(t0.booking_line_created_date AS DATE) <= (CURRENT_DATE('Australia/Sydney') - INTERVAL 365 DAY) THEN t0.gross_revenue_amount ELSE 0 END) END),"Refactor this complex logic. Consider pre-calculating the 'total previous FY revenue' and 'previous FY same period revenue' as separate, simpler metrics or flags in the data model. The conditional logic can then be applied at a higher level (e.g., in a dashboard calculated field) or by combining these simpler pre-calculated values, significantly improving readability and maintainability.",22,fed70b12-c274-4cde-9920-592ca4c4dab0
gross_revenue_current_cal_q4_ms_not_other_xtend_n,Hardcoded Logic,"This metric, along with others, hardcodes specific calendar or financial quarter numbers (e.g., `calendar_quarter = 4`). While quarter definitions are generally stable, hardcoding them directly into each metric's SQL can be inflexible if reporting periods ever need to be dynamic or if different quarter definitions are introduced.",SAFE_CAST(t0.calendar_quarter AS INT64) = 4,"For static quarter definitions, this is less critical. However, for future flexibility and consistency, consider defining quarter logic within a centralized date dimension table or a view, allowing for easier updates or parameterization if quarter definitions or fiscal year start dates were to change.",22,fed70b12-c274-4cde-9920-592ca4c4dab0
scenario_dimension,Anti-Pattern,"The `scenario_dimension` metric includes a `LIMIT 1000` clause in its SQL logic. While the `structure_sql`'s `unique_scenarios` field confirms only 5 distinct scenarios currently exist (well within the limit), this hardcoded limit is a fragile pattern for a dimension query. If the number of distinct scenarios in the `digital_subscriptions` table were to grow beyond 1000 in the future, this query would silently truncate the list of available scenarios, leading to incomplete or misleading dimension data.",SELECT DISTINCT SAFE_CAST(scenario AS STRING) AS scenario FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` LIMIT 1000;,"Remove the `LIMIT 1000` clause from the `scenario_dimension` SQL. For dimension queries intended to retrieve all distinct values, it is best practice to avoid arbitrary limits unless there's a specific, performance-driven reason to sample or paginate, which should be explicitly documented and managed.",23,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
all_gross_revenue_metrics_qld_digital_police_union,Hardcoded Logic|Anti-Pattern,"The metrics for 'QLD Digital Police Union' (Current FY, Previous FY, and their 'k' versions) are near-duplicates. They share identical `WHERE` clauses for `portfolio_conformed_name_current`, `revenue_group_subtype`, and `advertiser_group`. The only differences are the `relative_fy_year_offset` (0 for current, 1 for previous) and a simple division by 1000 for the 'k' metrics. This pattern is repeated across 4 metrics, indicating a lack of reusable metric definitions or parameterized queries.","WHERE t0.portfolio_conformed_name_current IN ('QLD CON A1', 'QLD DIRECT A1') AND (CASE WHEN ((t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (t0.revenue_group_subtype = 'DIGITAL')) THEN 'PROGRAMMATIC' ELSE t0.revenue_group_subtype END) IN ('DIGITAL') AND t0.advertiser_group IN ('QLDGOVT QUEENSLAND POLICE UNION')","Define a base `gross_revenue` metric. Use parameters or a Looker dimension for `relative_fy_year_offset` (e.g., 'Current FY', 'Previous FY'). Parameterize the `WHERE` clause filters (e.g., `portfolio_conformed_name_current`, `advertiser_group`) to allow for dynamic selection or creation of derived metrics. Create a single 'k' derived metric by applying a `/ 1000` transformation to the base gross revenue.",24,9269e9c6-1ad0-4415-96c3-aca8a710ba01
all_gross_revenue_metrics_consortium_qld,Hardcoded Logic|Anti-Pattern,"Similar to the 'QLD Digital Police Union' metrics, the 'Consortium QLD' metrics (Current FY, Previous FY, and their 'k' versions) are also near-duplicates. They share an identical `WHERE` clause for `sales_segment_l_2_name`. The only differences are the `relative_fy_year_offset` and division by 1000. This is another instance of highly repetitive SQL logic.",WHERE t0.sales_segment_l_2_name IN ('Consortium QLD'),"As above, define a base `gross_revenue` metric. Parameterize the `sales_segment_l_2_name` filter and `relative_fy_year_offset`. This would allow a single, flexible metric to serve multiple sales segments and financial periods, significantly reducing code duplication.",24,9269e9c6-1ad0-4415-96c3-aca8a710ba01
filtered_current_fy_gross_revenue_qld_digital_police_union,Hardcoded Logic|Anti-Pattern|Data Mismatch,"This metric contains extremely complex and nested `CASE WHEN` statements for filtering, including hardcoded `TIMESTAMP` values (`'2025-06-20 01:24:50.169003+00'`). This hardcoded date will quickly become stale and requires manual updates, which is error-prone. The logic also includes a `SAFE_CAST` to `DATETIME` on a `booking_line_created_date` which is `PARSE_DATE('%Y-%m-%d', ...)` - this conversion might be redundant or indicative of mixed date formats.","CASE WHEN ((t0.relative_fy_year_offset = 0) AND (SAFE_CAST(CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-06-20 01:24:50.169003+00', 'Australia/Sydney'), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE NULL END","Replace hardcoded `TIMESTAMP` values with dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`) to ensure the filter remains current. Consider abstracting this complex filtering logic into a separate view or a more modular Looker calculation to improve readability and maintainability. Investigate the need for `SAFE_CAST` and `PARSE_DATE` on `booking_line_created_date` to ensure consistent date handling.",24,9269e9c6-1ad0-4415-96c3-aca8a710ba01
filtered_current_fy_gross_revenue_consortium_qld,Hardcoded Logic|Anti-Pattern|Data Mismatch,"This metric exhibits the same complex and nested `CASE WHEN` filtering as its 'QLD Digital Police Union' counterpart, but with a *different* hardcoded `TIMESTAMP` value (`'2025-06-23 10:00:32.354880+00'`). The inconsistency in hardcoded dates between two otherwise similar 'filtered' metrics is a strong indicator of manual duplication and a high risk of data discrepancies or errors if not meticulously maintained.","CASE WHEN ((t0.relative_fy_year_offset = 0) AND (SAFE_CAST(CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney'), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE NULL END","Standardize the dynamic date logic across all 'filtered' metrics using relative date functions. Consolidate the complex filtering logic into a single, reusable component (e.g., a view or a Looker field) that can be applied consistently across different segments. This will reduce maintenance overhead and ensure consistency.",24,9269e9c6-1ad0-4415-96c3-aca8a710ba01
derived_revenue_category,Anti-Pattern,"The 'Revenue Category' metric uses a deeply nested and repeated `CASE` statement to derive its value, recalculating the 'Adjusted Revenue Type' logic multiple times. This is inefficient, increases query complexity, and makes maintenance difficult. Any change to the 'Adjusted Revenue Type' logic would require updates in multiple places within this single metric's definition.",CASE WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END,"Refactor this logic. Ideally, 'Adjusted Revenue Type' should be a pre-calculated field in the underlying data model or a separate, reusable calculated field in Looker Studio. Then, 'Revenue Category' can simply reference 'Adjusted Revenue Type' directly. Consider using a lookup table for `revenue_type` to `revenue_category` mapping if these categorizations are stable and used across multiple dashboards.",25,61f1feb4-fc3e-4bee-b987-84c86cfe6425
unified_publication_name_filtered_digital_programmatic,Hardcoded Logic,"This dimension hardcodes financial years '2024' and '2025' in its filter. The `structure_sql` indicates that data is available up to '2027', meaning this filter will become outdated and exclude relevant data as time progresses.","SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')","Replace hardcoded financial years with dynamic logic, such as `financial_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1` or by referencing a global parameter for the current financial year. If '2024' is intentionally included for historical context, ensure '2026' and '2027' are also included or that the range is dynamic.",25,61f1feb4-fc3e-4bee-b987-84c86cfe6425
revenue_group_subtype_filtered_digital_excl_xtend,Anti-Pattern,"This dimension suffers from both hardcoded financial years ('2024', '2025') and a repetition of the entire 'derived_revenue_category' logic within its `WHERE` clause. This is highly inefficient and creates significant technical debt, as any change to the revenue categorization logic would need to be replicated here.","WHERE (SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND (CASE WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) IN ('DIGITAL (excl.XTEND)'))","As with other metrics, use dynamic financial year filtering. Crucially, if 'Revenue Category' is already a defined calculated field in Looker Studio, it should be referenced directly here instead of repeating its complex `CASE` logic. Ideally, 'Revenue Category' should be a pre-calculated field in the data model.",25,61f1feb4-fc3e-4bee-b987-84c86cfe6425
revenue_group_subtype_filtered_digital_case_insensitive,Data Mismatch,"This dimension has a critical logic flaw. It attempts to filter by `LOWER(derived_revenue_category) IN ('digital')`. However, the `derived_revenue_category` logic produces values like 'DIGITAL (excl.XTEND)', 'PRINT', or 'XTEND ONLY'. When converted to lowercase, 'DIGITAL (excl.XTEND)' becomes 'digital (excl.xtend)', which will not match the literal string 'digital'. This metric is highly likely to return no data or incorrect data due to this mismatch.",LOWER(CASE WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) IN ('digital'),"Correct the comparison logic. If the intent is to include categories that *contain* 'digital' (case-insensitive), use `LOWER(...) LIKE '%digital%'`. If the intent is to match the 'DIGITAL (excl.XTEND)' category case-insensitively, the comparison should be `LOWER(...) = 'digital (excl.xtend)'` or simply `... IN ('DIGITAL (excl.XTEND)')` if case-insensitivity is handled elsewhere or not strictly needed for the exact match.",25,61f1feb4-fc3e-4bee-b987-84c86cfe6425
fin_adtype_name_filtered_non_print,Anti-Pattern,"Similar to other metrics, this dimension hardcodes financial years ('2024', '2025') and repeats the 'derived_adjusted_revenue_type' logic within its `WHERE` clause. This creates redundancy and maintenance overhead.","WHERE (SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END NOT IN ('PRINT') OR CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END IS NULL))","Implement dynamic financial year filtering. Reference the 'Adjusted Revenue Type' calculated field directly if possible, or ensure it's a pre-calculated field in the data model to avoid repeating its logic.",25,61f1feb4-fc3e-4bee-b987-84c86cfe6425
amount_revenue_type_03_by_fy_week,Hardcoded Logic / Anti-Pattern,"This metric, along with 'volume_revenue_type_03_by_fy_week', uses a hardcoded `CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03'` to filter for a specific revenue type prefix. The `structure_sql` indicates 12 unique `revenue_type` values, and `business_rules_sql` shows substantial amounts for other prefixes (e.g., '02'). This approach is not scalable or maintainable; if similar metrics are needed for other revenue type prefixes, new calculated fields with identical logic (only changing the prefix) would be required, leading to redundancy and increased maintenance overhead.","SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.amount ELSE 0 END)","To improve maintainability and scalability, consider creating a derived dimension for 'revenue_type_prefix' in the underlying data model (view or table). This would allow for more flexible filtering and aggregation in Looker Studio, potentially via a parameter or a simple WHERE clause, eliminating the need for hardcoded CASE statements for each specific prefix. Alternatively, if these specific aggregations are frequently used, pre-aggregate them in the data source or use a lookup table for revenue types.",26,f7a9efeb-df3c-45c9-899d-0bcada701572
volume_revenue_type_03_by_fy_week,Hardcoded Logic / Anti-Pattern,"Similar to 'amount_revenue_type_03_by_fy_week', this metric also employs hardcoded logic to filter by 'revenue_type' prefix '03'. This creates redundancy and hinders the ability to easily extend the dashboard to analyze other revenue type prefixes without creating new, nearly identical calculated fields.","SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.volume ELSE 0 END)","Implement a 'revenue_type_prefix' dimension in the data model to enable dynamic filtering and aggregation. This would replace the need for hardcoded CASE statements and allow for a single, more generalized metric that can be filtered by different revenue type prefixes as needed.",26,f7a9efeb-df3c-45c9-899d-0bcada701572
conditional_current_fy_gross_revenue,Hardcoded Logic|Anti-Pattern,"The SQL logic for this metric contains a hardcoded absolute timestamp ('2025-06-17 07:12:26.397969+00') used to define a 'previous year's reference date'. This makes the metric static and will lead to inaccurate calculations for dynamic reporting across different financial years. For example, if the dashboard is currently showing FY27 data (as suggested by `primary_analysis_sql` sample), a condition based on a fixed 2025 date is outdated. Additionally, the complex, nested CASE statement for date logic and the hardcoded list of `unified_publication_name` values ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') are anti-patterns that make the metric difficult to read, maintain, and prone to errors if business rules or publication categories evolve.","DATETIME_ADD(DATE(TIMESTAMP '2025-06-17 07:12:26.397969+00', 'Australia/Sydney'), INTERVAL -365 DAY) AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')","1. Replace the hardcoded date with dynamic date logic (e.g., `CURRENT_DATE()` or a dashboard parameter for the reference date) to ensure the 'previous year's reference date' is always relative and current. 2. Refactor the complex nested CASE statement by either creating a derived field in the underlying data model (`adsales_performance`) for the complex date condition or by defining these conditions as more modular, reusable Looker Studio fields. 3. Consider externalizing the list of `unified_publication_name` values into a governed lookup table or a more manageable configuration if these represent evolving business groupings.",27,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
conditional_current_fy_gross_revenue_thousands,Anti-Pattern|Redundant Metric,"This metric is a direct duplication of 'conditional_current_fy_gross_revenue', differing only by a division by 1000 for display. This creates metric proliferation and increases maintenance overhead, as any changes to the underlying complex, hardcoded logic must be applied to both metrics.","SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN SAFE_CAST(t0.fix_date_lod AS DATETIME) ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(DATE(TIMESTAMP '2025-06-17 07:12:26.397969+00', 'Australia/Sydney'), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE NULL END, 1000)","Consolidate this metric with its raw counterpart. Utilize Looker Studio's formatting options (e.g., 'Compact numbers' or custom formatting) or a dashboard parameter to allow users to switch between raw and thousands display, thereby reducing the total number of distinct metrics and simplifying maintenance.",27,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
current_fy_gross_revenue_thousands,Anti-Pattern|Redundant Metric,"This metric is a direct duplication of 'Current FY Gross Revenue', differing only by a division by 1000 for display. This contributes to unnecessary metric proliferation and increases maintenance overhead.","SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END, 1000)","Consolidate this metric with 'Current FY Gross Revenue'. Use Looker Studio's formatting options or a dashboard parameter for display scaling, rather than creating a separate metric.",27,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
previous_fy_gross_revenue_thousands,Anti-Pattern|Redundant Metric,"This metric is a direct duplication of 'Previous FY Gross Revenue', differing only by a division by 1000 for display. This contributes to unnecessary metric proliferation and increases maintenance overhead.","SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)","Consolidate this metric with 'Previous FY Gross Revenue'. Use Looker Studio's formatting options or a dashboard parameter for display scaling, rather than creating a separate metric.",27,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
current_fy_gross_revenue_not_future_period_thousands,Anti-Pattern|Redundant Metric,"While the `is_future_period_flag` filter is a valid business rule, the 'in Thousands' scaling makes this metric redundant if a general scaling mechanism (raw vs. thousands) is implemented for all gross revenue metrics across the dashboard. This contributes to metric proliferation.","SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN t0.gross_revenue_amount ELSE 0 END, 1000)","If a dashboard-wide scaling mechanism (raw vs. thousands) is implemented, this metric could be simplified to its 'raw' form, and the scaling applied via UI formatting. This would reduce the number of distinct metrics while retaining the specific business logic.",27,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
all_metrics,Anti-Pattern,"All 15 metrics on the dashboard contain an identical, complex `CASE WHEN` statement to categorize publications based on `gl_publication_code` and `masthead_code`. This hardcoded logic is highly repetitive, difficult to maintain, and prone to errors if new publication codes or groupings are introduced. For example, adding a new 'Metro' publication would require updating this `CASE` statement in 15 different metric definitions.","CASE WHEN (t0.gl_publication_code = '101' OR t0.masthead_code = 'TA') THEN 'The Australian' WHEN (t0.gl_publication_code IN ('400', '402', '100', '111') OR t0.masthead_code IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metros' WHEN (t0.gl_publication_code IN ('450', '350', '670', '961', '850', '5053', '475', '305', '963', '851', '5253', '490', '351', '560') OR t0.masthead_code IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TC', 'TB', 'WT')) THEN 'Regionals' WHEN (t0.gl_publication_code = '121') THEN 'Others' WHEN (t0.gl_publication_code IN ('8822', '9001', '9653', '9003', '9600', '9002', '9603', '9558', '9556', '9623', '9514', '9504', '8821', '962') OR t0.masthead_code IN ('RN', 'CS', 'SC', 'AP', 'TS', 'BG', 'PU')) THEN 'Deep Niche Publications' ELSE 'Discontinued' END","Create a dedicated dimension table (e.g., `dim_publication_group`) that maps `gl_publication_code` and `masthead_code` to their respective 'masthead_group' (e.g., 'Metros', 'Regionals'). This table should be joined to the `digital_subscriptions` fact table. Alternatively, define this grouping logic as a persistent, governed column within the `digital_subscriptions` view or table.",28,d05b3d29-4437-4ee5-987a-e0109eb9590e
all_metrics,Anti-Pattern,All 15 metrics contain identical hardcoded `CASE WHEN` logic to determine 'Digital Recognition' based on `delivery_medium_type` and `subscriber_has_email_flag`. This repetitive logic should be centralized.,CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END,"Define 'recognition_type' as a derived column within the `digital_subscriptions` view or table, or create a small lookup table if the logic is expected to evolve.",28,d05b3d29-4437-4ee5-987a-e0109eb9590e
all_metrics,Anti-Pattern,"All 15 metrics contain identical hardcoded `CASE WHEN` logic to filter for specific billing systems and rate plans. This complex, repetitive logic is difficult to manage and update.","CASE WHEN (t0.dw_billing_system_code IN ('APLP', 'APLS', 'GPLA', 'SWG')) THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Apple Podcasts') THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Apple Store') THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Google Play') THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Subscribe with Google (SWG)') THEN true ELSE false END","Create a dimension table for billing system/rate plan categorization or define a boolean flag (e.g., `is_digital_billing_system`) as a derived column in the `digital_subscriptions` view or table to encapsulate this logic.",28,d05b3d29-4437-4ee5-987a-e0109eb9590e
net_change_fy2025_wk38,Data Mismatch,"The `Net Change` metric's SQL calculates `SUM(ClosingBase - OpeningBase)` from a single query with a `table_union_source` filter that includes sources for both closing and opening base (`'bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS', 'bmasnap_open'`). However, the individual `Closing Base` and `Opening Base` metrics are defined with distinct `table_union_source` filters. This approach to `Net Change` is logically inconsistent with its components and risks incorrect aggregation if `ClosingBase` and `OpeningBase` columns are not mutually exclusive or correctly populated within rows based on `table_union_source`.","SELECT SUM(SAFE_CAST(t0.ClosingBase AS BIGNUMERIC) - SAFE_CAST(t0.OpeningBase AS BIGNUMERIC)) FROM ... WHERE t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS', 'bmasnap_open')","Redefine `Net Change` as a calculated field at the dashboard level (or in a derived view) by subtracting the already defined `Closing Base (Fiscal Week 38, FY2025)` and `Opening Base (Fiscal Week 38, FY2025)` metrics. This ensures consistency and leverages the validated base metrics.",28,d05b3d29-4437-4ee5-987a-e0109eb9590e
earned_amount_fy2025,Hardcoded Logic,"The `Earned Amount` metric uses a `CASE WHEN` statement to select between `NFEarnedAmount` from `nfmanualhist` (for FY <= 2024) and `EarnedAmount` from `subsnapfact` (for FY > 2024) based on `fy_year` and `table_union_source`. While this handles historical data, it hardcodes the fiscal year transition logic within the metric.",SUM(CASE WHEN t0.fy_year <= 2024 AND t0.table_union_source = 'nfmanualhist' THEN SAFE_CAST(t0.NFEarnedAmount AS BIGNUMERIC) WHEN t0.fy_year > 2024 AND t0.table_union_source = 'subsnapfact' THEN SAFE_CAST(t0.EarnedAmount AS BIGNUMERIC) ELSE 0 END),"Consider consolidating `NFEarnedAmount` and `EarnedAmount` into a single, consistent `EarnedAmount` column in the `digital_subscriptions` table/view, abstracting the source logic at the ETL/data model layer. This would simplify the metric definition.",28,d05b3d29-4437-4ee5-987a-e0109eb9590e
estimated_actual_amount_jan_2025,Hardcoded Logic,"The 'Estimated Actual Amount (Jan 2025)' metric is hardcoded to a specific fiscal year (2025), month ('Jan'), and scenario ('Estimate'). The `structure_sql` indicates that the underlying data source (`dv_tableau_MER_budgets_forecasts`) contains data for multiple fiscal years (2024-2026), all 12 months, and various scenarios (e.g., 'Forecast Draft', 'Forecast'). This hardcoding prevents the dashboard from being dynamic and scalable, requiring the creation of new, redundant metrics for each desired period or scenario.",SELECT SUM(t0.Actual_Amount) AS estimated_actual_amount FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_MER_budgets_forecasts` AS t0 WHERE SAFE_CAST(t0.fiscal_year AS FLOAT64) = 2025.000000 AND t0.month_short_name = 'Jan' AND t0.scenario = 'Estimate',"Refactor this metric to accept dynamic inputs for fiscal year, month, and scenario, ideally through dashboard-level filters or parameters. This would allow a single 'Estimated Actual Amount' metric to serve multiple reporting needs, significantly improving reusability and reducing maintenance overhead. For the `SAFE_CAST`, if `fiscal_year` is an integer, remove the cast; if it's a string, cast to `INT64` for cleaner comparison (e.g., `CAST(t0.fiscal_year AS INT64) = 2025`).",29,f353b933-30eb-4853-9976-0d35371db7d7
digital_revenue_ly_filtered,Hardcoded Logic,The `digital_revenue_ly_filtered` metric's SQL logic includes a hardcoded future date (`2025-06-26`) within its `DATETIME_ADD` comparison. This makes the time-based filtering static and will become increasingly inaccurate or irrelevant as the current date approaches or surpasses this hardcoded value. This is a severe anti-pattern for dynamic reporting.,"SAFE_CAST(DATE(TIMESTAMP '2025-06-26 22:29:53.217363+00', 'Australia/Sydney') AS DATETIME)","Replace the hardcoded future date with a dynamic date reference (e.g., `CURRENT_DATETIME()`, `CURRENT_DATE()`, or a Looker Studio parameter) to ensure the filter remains relevant and accurate over time. Review the exact business requirement for this date filter.",30,155c4518-72bf-4309-a0e9-240dd564f421
digital_revenue_ly_filtered,Anti-Pattern,"The `digital_revenue_ly_filtered` metric uses a complex `CASE` statement to conditionally select between `t0.fix_date_lod` and `t0.booking_line_created_date` based on multiple business conditions (revenue type, group subtype, sales segment, advertiser). While functional, this logic is embedded directly in the metric's SQL, making it difficult to read, maintain, and prone to errors if the underlying data model or business rules evolve. It suggests a potential need for data harmonization or a more robust date selection mechanism.","CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN SAFE_CAST(t0.fix_date_lod AS DATETIME) ELSE SAFE_CAST(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) AS DATETIME) END","Consider creating a derived date column in the underlying `adsales_performance` table or a view that pre-processes this conditional date selection. This would simplify the metric's SQL, improve readability, and centralize complex business logic for easier maintenance and consistency across metrics.",30,155c4518-72bf-4309-a0e9-240dd564f421
gross_revenue_cy,Anti-Pattern,"Multiple high-criticality metrics (e.g., `gross_revenue_cy`, `gross_revenue_ly`, `target_cy`, `gross_revenue_cy_cq`, `gross_revenue_ly_cq`, `target_cq`) repeatedly use `CASE WHEN t0.relative_fy_year_offset = X` or `t0.relative_fy_quarter_offset = Y` to define time periods. While effective, this pattern duplicates logic across metrics. If the definition of 'current fiscal year' or 'current quarter' changes, or if new time offsets are needed, each metric's SQL would require individual updates.",SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END),"Implement a robust date dimension table or a semantic layer (e.g., LookML, dbt metrics) that pre-calculates and exposes these fiscal year/quarter offsets and time-relative flags. This would allow metrics to reference a single, governed source for time-based logic, improving reusability, consistency, and maintainability.",30,155c4518-72bf-4309-a0e9-240dd564f421
"budget_earned_amount_current_week, closing_base_current_week, opening_base_current_week, earned_amount_current_week, net_change_previous_year_current_week",Hardcoded Logic|Anti-Pattern,"Multiple high-criticality metrics (Budget Earned Amount, Closing Base, Opening Base, Earned Amount, Net Change) define their 'current week' context using a fixed, hardcoded date difference calculation (`DATETIME_DIFF(SAFE_CAST(DATE '2025-03-26' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03' AS DATETIME), WEEK)`). This directly contradicts the business description stating the 'current week' is 'dynamically calculated'. This pattern is repeated identically across five distinct metrics, making the dashboard highly susceptible to displaying outdated information unless the SQL is manually updated regularly. The `CASE WHEN` structure with a fixed year (2025 or 2024) further compounds the issue.","SAFE_CAST(t0.fy_year AS INT64) = 2025 AND SAFE_CAST(t0.fy_week_of_year AS INT64) = DATETIME_DIFF(SAFE_CAST(DATE '2025-03-26' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03' AS DATETIME), WEEK)","Implement truly dynamic date logic using BigQuery's `CURRENT_DATE()` or `CURRENT_DATETIME()` functions to derive the current fiscal week and year. Centralize this logic, potentially in a dedicated date dimension table or a Looker Studio parameter, to ensure consistency and maintainability across all 'current week' metrics. This would eliminate the need for manual SQL updates and ensure data freshness.",32,bb49fa78-5abe-4e68-a9c1-8172a832e724
cancellation_type_dimension,Hardcoded Logic|Anti-Pattern,"The 'Cancellation Type Filter' dimension is hardcoded to return only the string 'Gross Cancellations'. While described as a 'dimension used to filter or categorize data', this hardcoding prevents any dynamic filtering or analysis by other cancellation types present in the underlying data. This suggests it might be used as a static label or a placeholder, which is an inefficient use of a SQL query.",SELECT 'Gross Cancellations' AS cancellation_type FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued' GROUP BY 1 LIMIT 1,"If intended as a dynamic filter, replace the hardcoded value with a `SELECT DISTINCT` on the actual cancellation type column from the `dt_digital_subscriptions` table. Alternatively, leverage Looker Studio parameters or filter controls to allow users to select from available cancellation types. If it's purely a static label, consider if a SQL metric is necessary or if a text box in the dashboard would suffice.",32,bb49fa78-5abe-4e68-a9c1-8172a832e724
view_type_dimension,Hardcoded Logic|Anti-Pattern,"Similar to the cancellation type, the 'View Type Filter' dimension is hardcoded to 'BUD'. This severely restricts the dashboard's utility, as it cannot dynamically display data for other view types (e.g., Forecast, Year-over-Year, Budget Next Year) that are implied by the metric's name and business description.",SELECT 'BUD' AS view_type FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 GROUP BY 1 LIMIT 1,"As with `cancellation_type_dimension`, if this is meant to be a dynamic filter, it should select distinct values from the relevant view type column in the source table or be implemented as a Looker Studio parameter. If it's a static label, re-evaluate its necessity as a SQL metric.",32,bb49fa78-5abe-4e68-a9c1-8172a832e724
date_range_view_type_dimension,Hardcoded Logic|Anti-Pattern,"This dimension combines 'Date Range' and 'View Type' concepts into a single hardcoded string 'Week to Date & Budget View'. This further compounds the hardcoding issues, making it impossible to dynamically adjust either the date range or the view type independently, severely limiting the dashboard's analytical flexibility.",SELECT 'Week to Date & Budget View' AS date_range_view_type FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued' GROUP BY 1 LIMIT 1,"Deconstruct this combined dimension into separate, dynamic dimensions or parameters for 'Date Range Type' and 'View Type'. This will allow for independent filtering and provide a more robust and flexible dashboard experience. Avoid hardcoding composite concepts.",32,bb49fa78-5abe-4e68-a9c1-8172a832e724
fiscal_year_sum_exclude_lod,Anti-Pattern,The aggregation `SUM(Fiscal_Year)` is highly unusual and likely incorrect for a fiscal year dimension. It's improbable that the sum of year numbers provides a meaningful business insight. This typically indicates a misunderstanding of how to use a dimension or a misconfiguration. It might be intended to count distinct years or records per year.,SELECT SUM(t0.Fiscal_Year) AS fiscal_year_sum FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0,"Re-evaluate the business requirement for this metric. If the intent is to count records per year, use `COUNT(DISTINCT t0.Fiscal_Year)` or `COUNT(*)` grouped by `Fiscal_Year`. If it's to display the year as a dimension, simply select `t0.Fiscal_Year`.",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
fiscal_year_sum_exclude_lod_fy2025,Hardcoded Logic,"The fiscal year `2025` is hardcoded within the SQL logic. This makes the dashboard inflexible and requires manual updates for each new fiscal year, increasing maintenance overhead and risk of errors. This pattern is repeated across several metrics.",WHERE t0.Fiscal_Year IN (2025),"Implement a dashboard-level filter for Fiscal Year or create a dynamic fiscal year parameter in Looker Studio. For metrics that *must* be tied to a specific year for comparison, consider creating a dedicated metric for that purpose, but generally, dynamic filters are preferred for flexibility.",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
product_revenue_sum_pacman_fy2025,Hardcoded Logic,"The fiscal year `2025` is hardcoded within the SQL logic. This makes the dashboard inflexible and requires manual updates for each new fiscal year, increasing maintenance overhead and risk of errors. This pattern is repeated across several metrics.",WHERE t0.Fiscal_Year IN (2025),"Implement a dashboard-level filter for Fiscal Year or create a dynamic fiscal year parameter in Looker Studio. For metrics that *must* be tied to a specific year for comparison, consider creating a dedicated metric for that purpose, but generally, dynamic filters are preferred for flexibility.",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
running_expense_ml2_fy2025_advertising,Anti-Pattern / Hardcoded Logic,"The `CASE` statement logic for selecting `Running_Expense` based on `Category` is repeated verbatim across five different metrics (ML2 to ML6). This indicates a denormalized data model where `Running_Expense_CONSUMER_X` and `Running_Expense_ADVERTISING_X` are separate columns instead of a single `Running_Expense_Value` column with `Category` and `Margin_Level` as dimensions. This leads to verbose, hard-to-maintain SQL and duplicated logic.",MAX(CASE WHEN t0.Category = 'CONSUMER' THEN t0.Running_Expense_CONSUMER_2 WHEN t0.Category = 'ADVERTISING' THEN t0.Running_Expense_ADVERTISING_2 ELSE 0 END),"Refactor the underlying `dv_pacman_running_expense` table to a 'tall' format. Instead of `Running_Expense_CONSUMER_X` and `Running_Expense_ADVERTISING_X` columns, introduce `Margin_Level`, `Category_Type` (e.g., 'CONSUMER', 'ADVERTISING'), and `Running_Expense_Value` columns. This would allow a single, simpler metric definition that can be filtered by `Margin_Level` and `Category_Type` dimensions, significantly reducing code duplication.",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
running_expense_ml3_fy2025_advertising,Anti-Pattern / Hardcoded Logic,"Same issue as `running_expense_ml2_fy2025_advertising`: repeated `CASE` statement logic and hardcoded fiscal year/category filters, indicating a denormalized data model.",MAX(CASE WHEN t0.Category = 'CONSUMER' THEN t0.Running_Expense_CONSUMER_3 WHEN t0.Category = 'ADVERTISING' THEN t0.Running_Expense_ADVERTISING_3 ELSE 0 END),Refactor the underlying `dv_pacman_running_expense` table to a 'tall' format as described for `running_expense_ml2_fy2025_advertising`.,33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
running_expense_ml4_fy2025_advertising,Anti-Pattern / Hardcoded Logic,"Same issue as `running_expense_ml2_fy2025_advertising`: repeated `CASE` statement logic and hardcoded fiscal year/category filters, indicating a denormalized data model.",MAX(CASE WHEN t0.Category = 'CONSUMER' THEN t0.Running_Expense_CONSUMER_4 WHEN t0.Category = 'ADVERTISING' THEN t0.Running_Expense_ADVERTISING_4 ELSE 0 END),Refactor the underlying `dv_pacman_running_expense` table to a 'tall' format as described for `running_expense_ml2_fy2025_advertising`.,33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
running_expense_ml5_fy2025_advertising,Anti-Pattern / Hardcoded Logic,"Same issue as `running_expense_ml2_fy2025_advertising`: repeated `CASE` statement logic and hardcoded fiscal year/category filters, indicating a denormalized data model.",MAX(CASE WHEN t0.Category = 'CONSUMER' THEN t0.Running_Expense_CONSUMER_5 WHEN t0.Category = 'ADVERTISING' THEN t0.Running_Expense_ADVERTISING_5 ELSE 0 END),Refactor the underlying `dv_pacman_running_expense` table to a 'tall' format as described for `running_expense_ml2_fy2025_advertising`.,33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
running_expense_ml6_fy2025_advertising,Anti-Pattern / Hardcoded Logic,"Same issue as `running_expense_ml2_fy2025_advertising`: repeated `CASE` statement logic and hardcoded fiscal year/category filters, indicating a denormalized data model.",MAX(CASE WHEN t0.Category = 'CONSUMER' THEN t0.Running_Expense_CONSUMER_6 WHEN t0.Category = 'ADVERTISING' THEN t0.Running_Expense_ADVERTISING_6 ELSE 0 END),Refactor the underlying `dv_pacman_running_expense` table to a 'tall' format as described for `running_expense_ml2_fy2025_advertising`.,33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
product_revenue_sum_exclude_lod,Data Definition Ambiguity / Consolidation Opportunity,"Two distinct product revenue metrics (`Product_Revenue` and `Product_Revenue_Merged_OneRow`) are sourced from the same table (`dv_exclude_product_l3_and_l4`). While `Product_Revenue_Merged_OneRow` is described as 'consolidated or adjusted,' the existence of both without clear business context or a unified metric definition can lead to confusion and inconsistent reporting.",SELECT SUM(t0.Product_Revenue) AS product_revenue_sum FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0,"Clarify the precise business definition and use case for each of these revenue metrics with stakeholders. If `Product_Revenue_Merged_OneRow` is the authoritative consolidated figure, consider deprecating or clearly distinguishing `Product_Revenue`. Ideally, define these in a semantic layer to ensure consistent usage across all dashboards.",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
product_revenue_merged_one_row_sum_exclude_lod,Data Definition Ambiguity / Consolidation Opportunity,"Two distinct product revenue metrics (`Product_Revenue` and `Product_Revenue_Merged_OneRow`) are sourced from the same table (`dv_exclude_product_l3_and_l4`). While `Product_Revenue_Merged_OneRow` is described as 'consolidated or adjusted,' the existence of both without clear business context or a unified metric definition can lead to confusion and inconsistent reporting.",SELECT SUM(t0.Product_Revenue_Merged_OneRow) AS product_revenue_merged_one_row_sum FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0,"Clarify the precise business definition and use case for each of these revenue metrics with stakeholders. If `Product_Revenue_Merged_OneRow` is the authoritative consolidated figure, consider deprecating or clearly distinguishing `Product_Revenue`. Ideally, define these in a semantic layer to ensure consistent usage across all dashboards.",33,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
sc_acquisitions_specific_rate_plans_2025_q1,Hardcoded Logic,"This metric, along with several others, uses fixed date ranges (January 21, 2025, to June 30, 2025). This approach requires manual updates for each new reporting period, making the dashboard static and prone to errors if not consistently maintained.","movement_datetime >= DATE '2025-01-21'
    AND movement_datetime < DATETIME_ADD(DATE '2025-06-30', INTERVAL 1 DAY)","Implement dynamic date filters in Looker Studio (e.g., 'current quarter', 'last 30 days', or user-selectable date ranges) that pass parameters to the SQL queries. This will make the dashboard evergreen and reduce maintenance overhead.",34,6e8b534b-485a-48dd-842d-13dc6bebb01a
sc_acquisitions_by_source_masthead_2024_q3,Hardcoded Logic,"Multiple acquisition metrics hardcode specific rate plan codes ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12'). This limits the flexibility of analysis; if relevant rate plans change or new ones are introduced, multiple metrics would need modification.","sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12')","Define rate plans as a dimension in the data model or use a lookup table for rate plan categories. Allow users to select or filter by rate plans via dashboard controls, rather than hardcoding them into individual metrics.",34,6e8b534b-485a-48dd-842d-13dc6bebb01a
sc_acquisitions_detailed_subscriber_breakdown_2024_q3,Hardcoded Logic,"This metric, and 'sc_acquisitions_by_source_masthead_for_subscriber_2024_q3', are hardcoded to a single specific subscriber ID (2452260). This makes these metrics highly specific and not reusable for broader subscriber analysis.",subscriber_id_src = 2452260,"Parameterize the subscriber ID using Looker Studio controls if specific subscriber analysis is required. If the intent is general analysis, remove this specific filter. Consider if such a highly specific metric belongs on a general dashboard or a more specialized report.",34,6e8b534b-485a-48dd-842d-13dc6bebb01a
sc_acquisitions_detailed_subscriber_breakdown_2024_q3,Hardcoded Logic,"This metric hardcodes both the source masthead ('CS') and a specific sold-in source code ('CSWEB_WBN1332_f'). This severely restricts the scope of the analysis to very narrow channels, leading to metric duplication for different source requirements.","SUBSTR(sold_in_source_code, 1, 2) IN ('CS')
    AND sold_in_source_code IN ('CSWEB_WBN1332_f')",Leverage `SourceMasthead` and `sold_in_source_code` as dimensions for filtering or grouping within Looker Studio. Provide these as user-selectable filters to enable dynamic analysis across various source channels without creating new metrics.,34,6e8b534b-485a-48dd-842d-13dc6bebb01a
sc_acquisitions_total_2024_q3,Anti-Pattern,"The dashboard contains multiple distinct metrics for Q3 2024 acquisitions, differing only by specific filters (e.g., rate plans, subscriber ID, source code). This indicates a lack of dynamic filtering capabilities in the dashboard's design, leading to unnecessary metric sprawl and redundancy.","SELECT COUNT(DISTINCT subscription_id_src) AS sc_acquisitions_total_2024_q3
FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
    masthead = 'SC'
    AND subscription_movement_count_type = 'acquisition'
    AND movement_datetime >= DATE '2024-07-01'
    AND movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY);","Consolidate these into a single base metric (e.g., 'SuperCoach Acquisitions') and utilize Looker Studio's filtering, drill-down, and parameterization features for date ranges, rate plans, subscriber IDs, and source codes. This aligns with the existing `base_metric_id` of 'distinct_sc_acquisitions' and promotes a more scalable and maintainable dashboard.",34,6e8b534b-485a-48dd-842d-13dc6bebb01a
revenue_channel_type_dimension,Hardcoded Logic|Anti-Pattern,"The 'Revenue Channel Type' dimension is defined using a complex, multi-conditional `CASE` statement that hardcodes business logic for categorization. This logic combines conditions from `xtend_flag`, `revenue_sub_type`, and `portfolio_parent_group_name_sync`. While the `primary_analysis_sql` and `business_rules_sql` show that values like 'PROGRAMMATIC' and 'ADPT DIGITAL' are being correctly derived, any changes to business rules or the introduction of new revenue sub-types will necessitate manual modification of this Looker Studio calculated field, increasing the risk of errors and maintenance overhead.","SELECT DISTINCT CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' WHEN (SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO' OR (t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND t0.revenue_sub_type = 'DIGITAL')) THEN 'PROGRAMMATIC' WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL' WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY' ELSE t0.revenue_sub_type END AS revenue_channel_type FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 100;","Replace the complex, hardcoded `CASE` statement with a join to a governed dimension table for `revenue_channel_type`. This table should pre-define the mapping logic for `xtend_flag`, `revenue_sub_type`, and `portfolio_parent_group_name_sync` to the appropriate channel type. This approach centralizes business logic, improves maintainability, and ensures consistency across reports.",35,a1b901e6-c4fb-44bc-955a-3a7070c15829
advertiser_group_display_dimension,Hardcoded Logic,"The 'Advertiser Group Display' dimension uses a `CASE` statement to replace NULL `advertiser_group` values with the hardcoded string 'Nah'. While functional, this hardcoded default might not align with evolving business terminology or data quality standards. The `primary_analysis_sql` sample data shows 'PROGRAMMATIC ALLOCATION BUCKET' and 'JOYCE MAYNE' as examples of derived values, but the 'Nah' default is a fixed string.",SELECT DISTINCT CASE WHEN (t0.advertiser_group IS NULL) THEN 'Nah' ELSE t0.advertiser_group END AS advertiser_group_display FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 100;,"Evaluate if 'Nah' is a universally accepted and documented business term for unknown advertiser groups. If not, consider standardizing the default value to a more descriptive term (e.g., 'Unknown', 'N/A') or handling null values upstream in the data pipeline to ensure data consistency and clarity. If 'Nah' is a specific business requirement, ensure it is clearly documented.",35,a1b901e6-c4fb-44bc-955a-3a7070c15829
publication_name_202_financial_year,Hardcoded Logic|Data Mismatch,"The business description for 'Publication Name (202x FY)' indicates a focus on financial years '2020 or 2021'. However, the SQL logic uses `financial_year IN ('202')`. This is a string prefix match that, based on the `structure_sql` (min_financial_year: 2024, max_financial_year: 2028), will incorrectly include all available financial years (2024, 2025, 2026, 2027, 2028) that start with '202', leading to a significant discrepancy between the intended and actual data scope.",AND t0.financial_year IN ('202'),"Clarify the exact financial years required. If the intent is 2020 and 2021, update the SQL to `t0.financial_year IN ('2020', '2021')`. If it's meant to be a dynamic filter for the current decade, a more robust date function or parameterization should be used.",36,c560ed20-040d-4c6a-9c3f-ec8bce27d132
sum_of_calendar_month_values_all_years,Anti-Pattern|Misconfiguration,"The metric calculates the sum of numerical representations of calendar months. The business description explicitly states its utility is 'unclear' and 'may indicate a misconfiguration'. Summing month numbers (e.g., 1+2+3=6) rarely provides meaningful business insight and suggests a fundamental misunderstanding of the desired aggregation or data representation.",SELECT SUM(SAFE_CAST(t0.calendar_month AS FLOAT64)) AS sum_of_calendar_month_values,"Re-evaluate the business requirement for this metric. If the goal is to count distinct months, change the aggregation to `COUNT(DISTINCT t0.calendar_month)`. If it's intended as a dimension, remove the `SUM` aggregation. Document the specific business use case if this unusual aggregation is truly required.",36,c560ed20-040d-4c6a-9c3f-ec8bce27d132
total_gross_revenue_2024_2025_greyhound,Hardcoded Logic|Anti-Pattern,"This metric, along with several others (e.g., `financial_month_2024_2025`, `advertiser_name_greyhound_2024_2025`, `calendar_month_filtered_puig`), exhibits a pattern of hardcoding specific `calendar_year` or `financial_year` ranges and `advertiser_name` values directly into the SQL logic. This leads to metric proliferation, where a new metric must be created for every new year range or specific advertiser, making the dashboard difficult to maintain, update, and scale.","AND t0.calendar_year IN ('2024', '2025') AND t0.advertiser_name IN ('Greyhound Racing Victoria')","Promote the use of parameterized metrics or leverage Looker Studio's native filtering capabilities. Define base metrics and dimensions (e.g., 'Total Gross Revenue', 'Advertiser Name', 'Calendar Year') and allow dashboard users to apply filters for specific years or advertisers. For frequently used combinations, consider creating a more flexible data model or a semantic layer (e.g., LookML, dbt) that allows dynamic filtering without creating new physical metrics.",36,c560ed20-040d-4c6a-9c3f-ec8bce27d132
revenue_6m_prior_fy_equals_prior_year_current_month,Hardcoded Logic,"This high-criticality revenue metric, along with related pacing metrics, uses a hardcoded future timestamp ('2025-05-12') for its date calculations. This makes the metric static and requires manual modification to remain relevant as time progresses, severely hindering maintainability and accuracy for a 'Pacing Dashboard'.","DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC')","Replace the hardcoded timestamp with dynamic date functions (e.g., `CURRENT_TIMESTAMP()`, `CURRENT_DATE()`) or leverage Looker Studio's built-in date range parameters. For specific 'as of' reporting, consider implementing a user-configurable date parameter in the dashboard.",37,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
prorated_revenue_6m_prior_fy_equals_current_month,Hardcoded Logic,"Similar to other pacing metrics, this prorated revenue metric relies on a hardcoded future timestamp ('2025-05-12') for its date comparisons, making it static and requiring manual updates for ongoing use.","DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC')","Implement dynamic date logic using `CURRENT_TIMESTAMP()` or `CURRENT_DATE()`, or utilize dashboard-level date parameters to ensure the metric remains current without manual intervention.",37,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
revenue_6m_prior_fy_equals_prior_month_current_month,Hardcoded Logic,"This revenue pacing metric also incorporates a hardcoded future timestamp ('2025-05-12') into its SQL logic, which prevents it from dynamically updating with the current period and necessitates manual adjustments.","DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC')","Refactor the SQL to use dynamic date functions or Looker Studio's date range controls. Consider pre-calculating relative date columns (e.g., 'prior_month_start_date') in the underlying data model to simplify metric definitions.",37,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
financial_period_static_days_kargo,Anti-Pattern,"This dimension is highly specific, filtering for `Source IN ('Kargo')` and `CurrentMonthFlag = 1`. A similar dimension exists for 'Non-AdX' sources. This pattern of creating distinct dimensions for minor variations (source filter, specific day column) leads to metric proliferation and reduces reusability.",WHERE t0.CurrentMonthFlag = 1 AND t0.Source IN ('Kargo'),"Consolidate these into a single, more generalized 'Financial Period' dimension. Use dashboard filters or parameters for 'Source' selection, and potentially a calculated field to dynamically select 'StaticDays' or 'NumDays' based on user context or a source group attribute. This would reduce the total number of metrics and simplify maintenance.",37,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
financial_period_actual_days_non_adx,Anti-Pattern,"This dimension is highly specific, filtering for `t0.Source NOT IN ('AdX')` and `CurrentMonthFlag = 1`. It is very similar to the 'Kargo' specific financial period dimension, differing only in the source filter and the specific 'Days' column used. This creates redundant metrics.",WHERE t0.CurrentMonthFlag = 1 AND (t0.Source NOT IN ('AdX') OR t0.Source IS NULL),"Consolidate this with the 'Kargo' financial period dimension. A single, flexible financial period dimension combined with dashboard-level source filters or a 'Source Group' attribute in the underlying data model would be more efficient and maintainable.",37,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
buyer_dimension_kargo,Anti-Pattern,"This dimension specifically filters for `Source IN ('Kargo')`. While business-specific, creating a distinct dimension for each source filter leads to metric bloat. The `structure_sql` shows 27 distinct sources, indicating this pattern could be repeated extensively across the dashboard or other dashboards.",WHERE t0.Source IN ('Kargo'),"Create a single 'Buyer' dimension and allow users to filter by 'Source' at the dashboard level. If specific 'Source Groups' are frequently used, consider pre-defining these groups in a lookup table or as an attribute in the `programmatic_cal_month` table.",37,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
gross_revenue_smith_family,Hardcoded Logic,"The 'Gross Revenue - The Smith Family' metric contains a hardcoded filter for a single advertiser ('The Smith Family *'). While specific to this metric's purpose, this pattern is repeated across other metrics for different advertisers/campaigns, leading to a proliferation of similar metrics instead of a single, parameterized one. The live data confirms 4266 unique advertisers, highlighting the scalability issue of this approach.",WHERE t0.Advertiser IN ('The Smith Family *'),"Replace hardcoded advertiser values with a Looker Studio parameter or filter control, allowing users to dynamically select advertisers. Define a base 'Total Gross Revenue' metric and apply filters at the dashboard level for reusability.",38,87651b69-c43e-471f-9c4b-98df1208a844
paid_impressions_guaranteed_chemist_warehouse_202506,Hardcoded Logic,"This metric, along with 'Gross Revenue - Guaranteed, Chemist Warehouse, Jun 2025', 'Advertiser (Filtered)', and 'Calendar Month (Filtered)', uses highly specific hardcoded filters for `TransactionType` ('Guaranteed'), `Advertiser` ('Chemist Warehouse *'), and a precise `Date` ('2025-06-01'). This creates rigid, single-purpose metrics that are not adaptable to changes in reporting periods or target entities without creating entirely new metrics. The `structure_sql` confirms a wide date range (2023-07-01 to 2025-07-01) and numerous advertisers, making these hardcoded values an anti-pattern for dynamic reporting.","WHERE t0.TransactionType IN ('Guaranteed') AND t0.Advertiser IN ('Chemist Warehouse *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-06-01')","Implement Looker Studio date range controls, advertiser filters, and transaction type dropdowns to allow dynamic selection. Create base metrics for 'Total Paid Impressions' and 'Total Gross Revenue' and apply these filters at the dashboard visualization level. This significantly improves flexibility and reduces metric maintenance.",38,87651b69-c43e-471f-9c4b-98df1208a844
net_revenue_by_buyer_filtered_transaction_type,Hardcoded Logic,"The 'Net Revenue by Buyer (Filtered Transaction Type)' metric hardcodes a specific list of `TransactionType` values ('Deal', 'Direct', 'Guaranteed', 'Open Auction'). While the `business_rules_sql` validates the existence of some of these types, the `structure_sql` reports `unique_transaction_types: null`, preventing a full validation of the completeness or exhaustiveness of this hardcoded list against all available transaction types in the dataset.","WHERE t0.TransactionType IN ('Deal', 'Direct', 'Guaranteed', 'Open Auction')","Investigate why `unique_transaction_types` is null in the structure query to understand the full range of transaction types. If the list is dynamic or extensive, consider externalizing these values into a lookup table or using a Looker Studio filter control for transaction types to make the metric more adaptable.",38,87651b69-c43e-471f-9c4b-98df1208a844
all_metrics,Anti-Pattern,"All 7 metrics on this dashboard utilize an identical, large Common Table Expression (CTE) named `CTE2` which includes numerous derived columns and filters. This repetition is inefficient and creates a significant maintenance burden. Any change to the base logic (e.g., adding a new publication to 'Sundry Pubs' or adjusting a filter) would require updating all 7 metric definitions individually, increasing the risk of inconsistencies.","WITH CTE2 AS (
    SELECT
      ad_type_name AS adtype_name,
      is_xtend_flag AS xtend_flag,
      unified_publication_name,
      unified_publication_gl_code,
      CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag,
      ...
    FROM
      `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
    WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
          'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
      '-')))
    GROUP BY ALL
  )","Create a consolidated base view (e.g., `v_adsales_revenue_performance_base`) in the `asl_advertising` dataset that includes all common filters, derived columns (like `Sundry_Pubs_Flag`, `Sales_Group`), and pre-aggregated sums if applicable. All dashboard metrics should then query this single, well-defined view.",39,52c11c9c-052a-4e45-9cda-8fecd87d7964
all_metrics,Hardcoded Logic,"The `Sundry_Pubs_Flag` is determined by a very long, hardcoded `CASE` statement listing specific `unified_publication_name` values. The `business_rules_sql` confirms this logic is active and categorizing publications. This approach is prone to errors, difficult to update, and lacks scalability as new publications are added or definitions change.","CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag","Externalize the 'Sundry Pubs' classification into a dedicated lookup table (e.g., `dim_publication_classification`). This table would contain `unified_publication_name` and `Sundry_Pubs_Flag`. The base view (`v_adsales_revenue_performance_base`) would then join to this lookup table to derive the flag, making updates centralized and transparent.",39,52c11c9c-052a-4e45-9cda-8fecd87d7964
all_metrics,Hardcoded Logic,"The `WHERE` clause across all metrics contains several hardcoded values for filtering, including `revenue_transaction_status_code`, `style_name`, `source_publishing_division_name`, and a complex condition for `publication_name` and `advertiser_id_src`. These hardcoded filters embed business rules directly into the SQL, making them difficult to discover, manage, and modify without impacting multiple metrics.","WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
          'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
      '-')))","Define these filtering criteria as flags or attributes within the base view (`v_adsales_revenue_performance_base`). For example, `is_valid_transaction_status`, `is_excluded_style`, `is_excluded_division`, `is_suddenly_exception`. For `advertiser_id_src`, consider a lookup table for specific advertiser classifications. This centralizes the business rules and makes the metric SQL cleaner and more focused on aggregation.",39,52c11c9c-052a-4e45-9cda-8fecd87d7964
"current_fy_programmatic_digital_revenue_raw, current_fy_programmatic_digital_revenue_k_aud",Complex Logic / Data Mismatch Risk,"The calculation of 'Programmatic/Digital Revenue' introduces a `fix_date_lod` using a window function based on `advertiser_parent = ""DOUBLECLICK""`. This is a highly specific and potentially fragile business rule embedded directly in the metric's SQL. Its purpose and implications are not immediately clear from the code, and changes in source data or business definitions could easily break this logic.","CTE_Final AS (
    SELECT
        *,
        MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM CTE2
)
SELECT
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0 AND (UPPER(revenue_group_subtype) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') OR SAFE_CAST(booking_line_created_date AS DATETIME) <= fix_date_lod)
      THEN gross_revenue_amount
      ELSE 0
    END
  )","Thoroughly document the business rule behind `fix_date_lod`. If this is a critical and recurring calculation, it should be pre-calculated and stored as a column in the base view or a dedicated fact table. This would simplify the metric SQL and ensure consistency across any future metrics requiring this specific date logic.",39,52c11c9c-052a-4e45-9cda-8fecd87d7964
revenue_type_transaction_count,Anti-Pattern / Readability,"The `Revenue Type Transaction Count` metric uses nested `CASE` statements and repeated logic to categorize revenue types for counting. The logic `(CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND UPPER(revenue_group_subtype) = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE UPPER(revenue_group_subtype) END)` is repeated multiple times, making the SQL hard to read, debug, and maintain. The `THEN 1/2/3` in the `COUNT(CASE WHEN ... THEN X)` is unusual; `COUNT(CASE WHEN ... THEN 1)` would suffice for counting.","COUNT(
    CASE
      WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND UPPER(revenue_group_subtype) = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE UPPER(revenue_group_subtype) END) = 'PRINT' THEN 1
      WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND UPPER(revenue_group_subtype) = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE UPPER(revenue_group_subtype) END) = 'DIGITAL' THEN 2
      WHEN (CASE WHEN (UPPER(fin_adtype_name) = 'XTEND') THEN 'XTEND' ELSE UPPER(revenue_type) END) = 'XTEND' THEN 3
      ELSE NULL
    END
  )","Create a dedicated derived column (e.g., `derived_revenue_category`) within the base view (`v_adsales_revenue_performance_base`) that encapsulates this complex categorization logic. The metric would then simply `COUNT(CASE WHEN derived_revenue_category = 'PRINT' THEN 1 END)` or similar, significantly improving readability and maintainability. Consider a lookup table for these revenue type mappings if they are subject to frequent changes.",39,52c11c9c-052a-4e45-9cda-8fecd87d7964
gross_revenue_previous_fy_k_adjusted,Hardcoded Logic,"The business description explicitly states that the K-adjustment parameter ('$\'000' = '$') evaluates to FALSE, meaning the division by 1000 is always applied regardless of user intent. This indicates a parameter that is either misconfigured or hardcoded to a non-functional state, making the 'K Adjusted' suffix misleading if the adjustment cannot be toggled.","SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_previous_fy_k_adjusted","Implement a proper Looker Studio parameter or a more flexible SQL approach (e.g., using a variable or a conditional statement based on a user input) to control the K-adjustment. This allows users to choose whether to view values in thousands or raw, aligning with the metric's name and intended functionality.",40,80ca81f3-0671-40ef-a0a9-825a1580ca1b
gross_revenue_current_fy_k_adjusted,Hardcoded Logic,"Similar to the previous FY K-adjusted metric, the current FY K-adjusted metric also has a hardcoded parameter that forces the division by 1000, preventing dynamic adjustment based on user preference.","SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_current_fy_k_adjusted",Apply the same recommendation as for 'gross_revenue_previous_fy_k_adjusted' to ensure consistent and user-controlled K-adjustment functionality across all relevant metrics.,40,80ca81f3-0671-40ef-a0a9-825a1580ca1b
gross_revenue_specific_filtered_k_adjusted,Anti-Pattern / Hardcoded Logic,"This metric contains highly complex and specific filtering logic embedded directly within the SQL, including a hardcoded future date (`2025-04-02`) and multiple specific conditions for revenue type, subtype, sales segment, and advertiser. This makes the metric brittle, difficult to maintain, and not easily reusable. The fixed date will quickly become outdated, requiring manual updates.","CASE WHEN (t0.relative_fy_year_offset = -1 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(DATE(TIMESTAMP '2025-04-02 23:25:34.704992+00', 'Australia/Sydney'), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END","Refactor complex filtering logic into a dedicated view or a series of simpler, reusable dimensions/metrics. Replace the hardcoded date with a dynamic date function (e.g., `CURRENT_DATE()` or a Looker Studio date parameter) to ensure the metric remains relevant over time. Consider creating a separate dimension for 'Digital Other Revenue' classification if this filter combination is frequently used.",40,80ca81f3-0671-40ef-a0a9-825a1580ca1b
dynamic_dimension_publishing_division_group,Hardcoded Logic / Anti-Pattern,"Despite being named 'Dynamic Dimension', the SQL logic explicitly hardcodes the parameter value ('2' = '2'), forcing the dimension to always return `t0.publishing_division_group`. This completely negates the 'dynamic' nature and indicates a misunderstanding or misimplementation of dynamic dimension capabilities.",CASE WHEN ('2' = '1') THEN t0.publishing_division_parent WHEN ('2' = '2') THEN t0.publishing_division_group ... ELSE NULL END,"Implement a proper Looker Studio control parameter that dynamically alters the SQL query based on user selection, allowing the user to choose which publishing division field to display. Alternatively, if only `publishing_division_group` is ever needed, rename the metric to reflect its static nature and remove the redundant `CASE` statement.",40,80ca81f3-0671-40ef-a0a9-825a1580ca1b
revenue_classification,Anti-Pattern (Potential),"The `revenue_classification` metric uses a complex `CASE` statement with multiple `WHEN` clauses to categorize revenue. While functional (as validated by `business_rules_sql` showing counts for 'ADPT DIGITAL' and 'PROGRAMMATIC SOURCE'), such extensive in-line logic can become difficult to manage and scale if classification rules change frequently or become more numerous. This is a common pattern that often benefits from externalization.",CASE WHEN t0.fin_adtype_name = 'XTEND' THEN 'XTEND' WHEN (t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND t0.revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC - DIGITAL OTHER' ... ELSE t0.revenue_group_subtype END,"Consider externalizing these classification rules into a lookup table in the data warehouse or a dedicated data transformation layer (e.g., dbt model). This improves maintainability, reusability across different dashboards/reports, and allows business users to potentially manage classification rules with less reliance on SQL changes.",40,80ca81f3-0671-40ef-a0a9-825a1580ca1b
revenue_gross_independent_agencies_nsw_non_guaranteed,Hardcoded Logic,"Multiple metrics on this dashboard (e.g., 'Gross Revenue (Independent Agencies NSW, Non-Guaranteed)', 'Gross Revenue (VIC KA A2)', and the two FY2025 Q4 metrics) utilize hardcoded string values for filtering on high-cardinality dimensions such as `PortfolioParentGroup`, `PortfolioChildGroup`, `TransactionType`, and `Advertiser`. The `structure_sql` indicates 126 unique `PortfolioChildGroup` values, demonstrating that this approach is not scalable for future reporting requirements or dynamic filtering.",t0.PortfolioParentGroup IN ('INDEPENDENT AGENCIES NSW') AND (t0.TransactionType NOT IN ('Guaranteed') OR t0.TransactionType IS NULL),"Implement a parameterized approach for these filters within Looker Studio, allowing users to select values dynamically. Alternatively, define these groups/types in a separate lookup table or view that can be joined or referenced, promoting reusability and reducing maintenance overhead across metrics.",41,6f1c8731-02da-464f-b146-bf2947860735
revenue_gross_vic_ka_a2,Hardcoded Logic,"This metric, like others, hardcodes a specific `PortfolioChildGroup`. Given the `structure_sql` shows 126 unique `PortfolioChildGroup` values, creating a separate metric for each specific group is highly inefficient and leads to significant code duplication.",t0.PortfolioChildGroup IN ('VIC KA A2'),"Centralize the definition of 'PortfolioChildGroup' filters. Consider using Looker Studio parameters to allow dynamic selection of child groups, or create a more generalized metric that can be filtered by a dimension, rather than hardcoding each specific group into a new metric.",41,6f1c8731-02da-464f-b146-bf2947860735
unique_dsps_fy2025_q4_vic_nsw_amazon_may_2025_non_open_auction,Anti-Pattern / Hardcoded Logic,"The `sql_logic` for this metric (and its revenue counterpart) contains an extremely complex and hardcoded `CASE` statement to map `FinancialMonthNumber` to calendar months for date filtering. This logic is brittle, difficult to read, and hardcodes a specific date (`2025-05-01`), preventing dynamic date range selection by users. This indicates a lack of a proper date dimension table or a standardized date handling function.","SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.FinancialYear, (CASE WHEN (t0.FinancialMonthNumber = 1) THEN 7 WHEN (t0.FinancialMonthNumber = 2) THEN 8 WHEN (t0.FinancialMonthNumber = 3) THEN 9 WHEN (t0.FinancialMonthNumber = 4) THEN 10 WHEN (t0.FinancialMonthNumber = 5) THEN 11 WHEN (t0.FinancialMonthNumber = 6) THEN 12 WHEN (t0.FinancialMonthNumber = 7) THEN 1 WHEN (t0.FinancialMonthNumber = 8) THEN 2 WHEN (t0.FinancialMonthNumber = 9) THEN 3 WHEN (t0.FinancialMonthNumber = 10) THEN 4 WHEN (t0.FinancialMonthNumber = 11) THEN 5 WHEN (t0.FinancialMonthNumber = 12) THEN 6 ELSE NULL END), 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-05-01')","Create a dedicated date dimension table that includes pre-calculated mappings for financial year, quarter, and month to calendar dates. Alternatively, define a standard User-Defined Function (UDF) or a view to handle financial date conversions consistently, allowing for simpler and more flexible date filtering using Looker Studio's native date range controls and parameters.",41,6f1c8731-02da-464f-b146-bf2947860735
revenue_gross_fy2025_q4_vic_nsw_amazon_may_2025_non_open_auction,Anti-Pattern / Duplication,"The entire `WHERE` clause (filtering logic) is almost entirely duplicated between this metric and 'Unique DSPs (FY2025 Q4, VIC/NSW, Amazon, May 2025, Non-Open Auction)'. This leads to redundant code, increased query complexity, and significantly higher effort for maintenance or modification of the filtering criteria. Any change to the filtering logic would need to be applied in two places.","WHERE CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4') AND t0.PortfolioChildGroup IN ('VIC KA C1', 'NSW CON A2', 'NSW CON A1') AND (t0.TransactionType NOT IN ('Open Auction') OR t0.TransactionType IS NULL) AND t0.Advertiser IN ('Amazon.com *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.FinancialYear, (CASE WHEN (t0.FinancialMonthNumber = 1) THEN 7 WHEN (t0.FinancialMonthNumber = 2) THEN 8 WHEN (t0.FinancialMonthNumber = 3) THEN 9 WHEN (t0.FinancialMonthNumber = 4) THEN 10 WHEN (t0.FinancialMonthNumber = 5) THEN 11 WHEN (t0.FinancialMonthNumber = 6) THEN 12 WHEN (t0.FinancialMonthNumber = 7) THEN 1 WHEN (t0.FinancialMonthNumber = 8) THEN 2 WHEN (t0.FinancialMonthNumber = 9) THEN 3 WHEN (t0.FinancialMonthNumber = 10) THEN 4 WHEN (t0.FinancialMonthNumber = 11) THEN 5 WHEN (t0.FinancialMonthNumber = 12) THEN 6 ELSE NULL END), 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-05-01')","Consolidate the common filtering logic into a shared view or a more generalized metric definition that accepts parameters for the specific aggregation (SUM vs. COUNT DISTINCT). This would adhere to the DRY (Don't Repeat Yourself) principle, making the dashboard more maintainable and scalable.",41,6f1c8731-02da-464f-b146-bf2947860735
total_gross_revenue_amount,Data Mismatch / Anti-Pattern,"The `total_gross_revenue_amount` metric's SQL logic includes a redundant `LIMIT 1` for a scalar aggregate. More critically, the `primary_analysis_sql` sample data shows `total_gross_revenue` as `0.0` or `null` for some rows, which directly conflicts with the `validation_sql` reporting a 'PASS' for `gross_revenue_check`. This indicates a potential issue with data availability, filtering, or a misleading validation check.","SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE relative_fy_year_offset IN (-1, 0, 1) LIMIT 1",Investigate the discrepancy between the `primary_analysis_sql` sample data and the `validation_sql` result for gross revenue. Verify the actual aggregated value by running the SQL directly. Remove the redundant `LIMIT 1` as it serves no functional purpose for a scalar `SUM`.,42,e83da1de-4227-43e6-bcc6-73051c66914b
total_net_revenue_amount,Data Mismatch / Data Quality,"The `total_net_revenue_amount` metric, a high-criticality KPI, consistently appears as `null` in the `primary_analysis_sql` sample data. This suggests either a data quality issue in the source `net_revenue` column (e.g., all values are null for the sampled period) or an issue with the query's ability to retrieve valid data for this metric.","SELECT SUM(net_revenue) AS total_net_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE relative_fy_year_offset IN (-1, 0, 1) LIMIT 1",Investigate the underlying `net_revenue` column in `v_adsales_revenue_client` for null values or data type issues. Confirm that the `SUM` aggregation is expected to yield a non-null result for the specified filter range. Remove the redundant `LIMIT 1`.,42,e83da1de-4227-43e6-bcc6-73051c66914b
ad_type_classification_dimension,Hardcoded Logic / Anti-Pattern,"The `ad_type_classification` metric uses a hardcoded `CASE` statement with `REGEXP_CONTAINS` for classifying ad types ('Sponsorship', 'Production', 'Media'). This approach is brittle, difficult to maintain, and prone to errors if `adsize_name` values change or new types emerge. The sample data from `primary_analysis_sql` and `business_rules_sql` only shows 'Media' and 'Production', with 'Sponsorship' not observed, which could indicate a data gap or a regex issue.","CASE WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$')) THEN 'Sponsorship' WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$')) THEN 'Production' ELSE 'Media' END AS ad_type","Replace the hardcoded `CASE` statement with a join to a governed lookup table for `ad_type_classification`. This will centralize classification logic, improve maintainability, and ensure data consistency. Investigate if 'Sponsorship' data is expected and if the regex accurately captures all relevant `adsize_name` values.",42,e83da1de-4227-43e6-bcc6-73051c66914b
gross_revenue_by_ad_type,Hardcoded Logic / Anti-Pattern,"Similar to `ad_type_classification_dimension`, this metric also embeds the same hardcoded `CASE` statement for `ad_type` classification. This duplicates logic and reinforces the maintainability issue, making updates more complex and error-prone.","CASE WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$')) THEN 'Sponsorship' WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$')) THEN 'Production' ELSE 'Media' END AS ad_type","Refactor the `ad_type_classification` into a shared, governed dimension or a view that can be reused across all metrics requiring this classification. This will ensure consistency and simplify updates.",42,e83da1de-4227-43e6-bcc6-73051c66914b
All metrics,Anti-Pattern,"All seven metrics (e.g., 'Spend - Rolling 12 Months (Digital)', 'Spend - Current Period') contain identical, complex, and deeply nested CTEs (`adex_data`, `adex_date_fact`, `adex_full_date`) for preparing the base `adex_datasource`. This massive duplication of logic across every metric is a severe anti-pattern, making the dashboard highly inefficient to maintain, prone to errors if logic needs to change, and potentially impacting query performance due to repeated subquery execution.","WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), ((
          SELECT
            MAX(date)
          FROM
            adex_data
        )), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  )","Refactor the common data preparation logic into a single, governed BigQuery view (e.g., `adex_base_view` or `adex_full_date_view`). All metrics should then query this consolidated view, drastically simplifying their SQL, improving maintainability, and potentially leveraging BigQuery's query caching more effectively.",43,e9d8a216-4950-4d30-b344-5011776edbdf
"spend_rolling_12_months_digital, spend_news_corp_current_period, spend_news_corp_comparison_period, spend_retail_comparison_period",Hardcoded Logic,"Multiple metrics hardcode specific dimension values ('Digital' for `Media_Group`, 'NEWS CORP' for `Media_Network`, 'Retail' for `Major_Category`) directly in their WHERE clauses. The `structure_sql` reveals 12 unique `Media_Types`, 17 `Media_Networks`, and 41 `Major_Categories`. This hardcoding prevents reusability and leads to metric sprawl, requiring a new metric for each specific dimension value or combination needed on the dashboard.","AND t0.Media_Group = 'Digital' (from spend_rolling_12_months_digital)
AND t0.Media_Network = 'NEWS CORP' (from spend_news_corp_current_period)
AND t0.Major_Category = 'Retail' (from spend_retail_comparison_period)","Leverage Looker Studio's filtering capabilities by exposing these dimensions as filters on the dashboard. Alternatively, create a more flexible base metric that allows dynamic filtering by these dimensions, or use parameters within the SQL if the dashboard design requires specific pre-filtered views. This would reduce the number of distinct metrics and improve dashboard flexibility.",43,e9d8a216-4950-4d30-b344-5011776edbdf
All metrics,Anti-Pattern,"All metric SQL queries include an unnecessary `LIMIT 100` clause. For aggregate metrics (e.g., total spend for a period), this limit is redundant as the `SUM` aggregation should result in a single row. For metrics grouped by a dimension (e.g., `spend_by_media_type`), it arbitrarily caps the number of results, potentially hiding valid data if there are more than 100 distinct groups. This practice can lead to incorrect data representation or incomplete insights.",LIMIT 100,"Remove `LIMIT 100` from all metric SQL queries. If a limit is required for visualization purposes (e.g., top N values), it should be applied at the Looker Studio chart configuration level, not within the underlying metric SQL.",43,e9d8a216-4950-4d30-b344-5011776edbdf
multiple_metrics,Anti-Pattern,"Multiple metrics (`total_budget_volume`, `budget_volume_past_weeks`, `volume_vs_budget_variance_past_weeks`, `total_volume`, `budget_amount_past_weeks`, `budget_amount_past_weeks_all_sales_channels`, `actual_amount_ytd`, `total_actual_amount`, `volume_forecast_by_month`, `volume_forecast_by_month_all_sales_channels`, `average_daily_budget_volume`, `average_daily_actual_volume`) repeat the exact same set of filtering conditions (`os_level_6`, `l04_publication_code`, `l06_publication_code`, `gl_hierarchy_code`). Embedding these common dashboard criteria directly into each metric's SQL increases redundancy, makes global filter changes difficult, and violates the DRY (Don't Repeat Yourself) principle.","WHERE upper(os_level_6) = 'CIRCULATION' AND l04_publication_code <> 'Free News & Lifestyle' AND l06_publication_code NOT IN ('Food', 'Prestige') AND gl_hierarchy_code = 'FY2025'","Encapsulate these common filters in a dedicated base view or a Looker Studio data source filter. Alternatively, if using a semantic layer, define these as core dimensions/filters that can be applied consistently across all relevant metrics without duplication.",44,6a26c78f-0070-4fb3-88b8-691ee4a4485a
multiple_metrics,Hardcoded Logic,"The fiscal year `FY2025` is hardcoded across all metrics. As this dashboard is a 'Weekly Report', it implies ongoing usage. This hardcoding will require manual updates annually, leading to potential errors, maintenance overhead, and a lack of historical context or future-proofing.",gl_hierarchy_code = 'FY2025',"Replace the hardcoded fiscal year with a dynamic parameter (e.g., `CURRENT_FISCAL_YEAR`) or a lookup to a fiscal calendar table that identifies the current fiscal year based on the report run date. This would allow the dashboard to automatically roll over to new fiscal years.",44,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"budget_amount_past_weeks_all_sales_channels, volume_forecast_by_month_all_sales_channels",Hardcoded Logic,"Specific business logic for 'ALL SALES CHANNELS' is hardcoded directly into the metric SQL. If the definition of 'ALL SALES CHANNELS' changes or new sales channels are introduced, these metrics will need manual updates, increasing the risk of inconsistency and errors.",UPPER(SAFE_CAST(os_level_7 AS STRING)) = 'ALL SALES CHANNELS',"Externalize channel definitions into a lookup table or a dedicated dimension table. This allows for centralized management of business rules and avoids hardcoding in individual metrics, improving maintainability and scalability.",44,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"average_daily_budget_volume, average_daily_actual_volume",Anti-Pattern|Hardcoded Logic|Maintainability Risk,"These two metrics exhibit an extreme anti-pattern with deeply nested `CASE` statements. They hardcode specific publication names, fiscal week numbers (derived from static `DATETIME_DIFF` calculations using hardcoded timestamps like `2025-05-08` and `2024-07-03`), and complex day-of-week logic for calculating average daily volumes. This makes the logic opaque, incredibly difficult to debug, highly prone to errors, and impossible to scale or adapt without significant manual effort. The reliance on static dates for dynamic weekly reporting is a critical flaw.","SELECT SUM(CASE WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name = 'PNG') THEN 'PNG' ELSE 'Other' END) = '6 Day Pubs' THEN SAFE_DIVIDE( (CASE WHEN ((DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-05-08 23:49:20.601127+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) = 26 OR DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-05-08 23:49:20.601127+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) = 40) AND (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' ...","Refactor these metrics significantly. Create a dedicated dimension table for publication rules (e.g., daily publication frequency, special week rules, day-of-week multipliers) and join to it. Replace hardcoded dates and fiscal week numbers with dynamic date parameters or fiscal calendar lookups (e.g., `CURRENT_DATE()`, `CURRENT_FISCAL_WEEK()`). This will greatly improve readability, maintainability, and accuracy, making the metrics truly dynamic and sustainable.",44,6a26c78f-0070-4fb3-88b8-691ee4a4485a
