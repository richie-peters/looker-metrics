metric_id,issue_type,description,code_snippet,recommendation,response_id,dashboard_id
total_cost_by_service_and_day_filtered,Hardcoded Logic,"The 'Total Cost by Service and Day (Selected Services)' metric uses a hardcoded list of specific GCP services within its WHERE clause. This approach is inflexible; if the definition of 'key services' changes, the SQL logic must be manually updated, increasing maintenance overhead and the risk of outdated reporting. This also makes it difficult to dynamically adjust the selection without modifying the underlying data source.","service.description IN ('BigQuery Reservation API', 'BigQuery', 'Cloud Storage', 'Support', 'Cloud Dataflow', 'Cloud Composer', 'Cloud Run Functions', 'Compute Engine', 'Vertex AI', 'Cloud SQL')","Replace the hardcoded list with a reference to a governed lookup table (e.g., a BigQuery table or view) containing the 'Key GCP Services'. This allows for centralized management of the service list without modifying dashboard metrics. Alternatively, if the list is small and user-driven, consider using a Looker Studio parameter.",0,fbf4d483-b17a-4040-b18c-091481d62200
total_cost_by_project,Anti-Pattern,"The project name cleaning logic (`replace(project.name, 'ncau-data-newsquery-', '')`) is duplicated across multiple metrics (e.g., 'Total Cost by Project' and 'Total Cost by Cost Component, Project, and Service'). This redundancy violates the DRY (Don't Repeat Yourself) principle, making maintenance more complex and increasing the potential for inconsistencies if the cleaning rule needs to evolve.","`replace`(project.name, 'ncau-data-newsquery-', '')","Centralize the project name cleaning. This can be achieved by creating a calculated field directly in the Looker Studio data source, or ideally, by implementing this transformation in the underlying BigQuery view or a dedicated staging table. This ensures consistency and simplifies maintenance.",0,fbf4d483-b17a-4040-b18c-091481d62200
total_cost_by_component_project_service,Anti-Pattern,"The project name cleaning logic (`replace(project.name, 'ncau-data-newsquery-', '')`) is duplicated across multiple metrics (e.g., 'Total Cost by Project' and 'Total Cost by Cost Component, Project, and Service'). This redundancy violates the DRY (Don't Repeat Yourself) principle, making maintenance more complex and increasing the potential for inconsistencies if the cleaning rule needs to evolve.","`replace`(project.name, 'ncau-data-newsquery-', '')","Centralize the project name cleaning. This can be achieved by creating a calculated field directly in the Looker Studio data source, or ideally, by implementing this transformation in the underlying BigQuery view or a dedicated staging table. This ensures consistency and simplifies maintenance.",0,fbf4d483-b17a-4040-b18c-091481d62200
stly_revenue,Hardcoded Logic / Anti-Pattern,"The 'Same Time Last Year Revenue (STLY)' metric uses a highly complex and deeply nested `CASE` statement with multiple hardcoded string values (`""DIGITAL""`, `""Digital Other""`, `""DOUBLECLICK""`) and a subquery to determine the `booking_line_created_date`. This makes the logic extremely difficult to read, understand, maintain, and debug. Any change in business rules for digital revenue types or advertiser segments would require direct modification of this complex SQL, increasing the risk of errors and maintenance overhead.","SUM(CASE WHEN t1.relative_fy_year_offset = -1 AND DATE(CASE WHEN t1.revenue_type = ""DIGITAL"" AND t1.revenue_group_subtype = ""DIGITAL"" AND t1.sales_segment_l_2_name_sync = ""Digital Other"" AND t1.advertiser_parent != ""DOUBLECLICK"" THEN (SELECT MIN(t2.booking_line_created_date) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t2 WHERE t2.financial_year = t1.financial_year AND t2.advertiser_parent = ""DOUBLECLICK"") ELSE t1.booking_line_created_date END) <= CURRENT_DATE() THEN t1.gross_revenue_amount END)","Refactor this complex logic. Consider creating a dedicated view or a user-defined function (UDF) that encapsulates the STLY calculation, making it reusable and testable. For the hardcoded values, explore if these can be managed via a lookup table (e.g., `revenue_type_dimension`, `advertiser_segment_dimension`) that can be joined, allowing for easier updates and better data governance. The nested subquery should be evaluated for performance implications and potentially optimized by pre-calculating or joining to a derived table.",1,4e1253ba-efdf-459d-83de-d00b3d77cc29
revenue_2024_vs_2025_diff,Anti-Pattern / Redundant Logic,"This metric, along with `revenue_2025_vs_2024_diff`, represents a redundant calculation. Both metrics derive the difference between FY2024 and FY2025 revenue, simply reversing the order of subtraction. This duplication increases maintenance effort and the potential for inconsistencies if the underlying revenue calculation logic changes.",SUM(CASE WHEN financial_year = '2024' THEN gross_revenue_amount ELSE 0 END) - SUM(CASE WHEN financial_year = '2025' THEN gross_revenue_amount ELSE 0 END),"Consolidate these into a single, more flexible calculated field. Ideally, define `Revenue FY2024` and `Revenue FY2025` as base metrics, and then create a single calculated field in Looker Studio (or a similar reporting layer) that computes `Revenue FY2025 - Revenue FY2024`. The reverse difference can then be easily derived by multiplying by -1 or by simply reordering the display in the dashboard, reducing the number of distinct SQL queries and improving maintainability.",1,4e1253ba-efdf-459d-83de-d00b3d77cc29
revenue_2025_vs_2024_diff,Anti-Pattern / Redundant Logic,"This metric is a direct inverse of `revenue_2024_vs_2025_diff`, leading to redundant SQL definitions. This pattern suggests a lack of parameterization or a missed opportunity to leverage dashboard-level calculations.",SUM(CASE WHEN financial_year = '2025' THEN gross_revenue_amount ELSE 0 END) - SUM(CASE WHEN financial_year = '2024' THEN gross_revenue_amount ELSE 0 END),"See recommendation for `revenue_2024_vs_2025_diff`. Consolidate into a single, flexible calculation at the dashboard or semantic layer level.",1,4e1253ba-efdf-459d-83de-d00b3d77cc29
All metrics,Anti-Pattern,"The filter `SAFE_CAST(t0.portfolio_parent_group_name_sync AS STRING) = 'CONSORTIUM WA'` is hardcoded and repeated across all 8 metrics. This indicates a lack of centralized filtering, leading to redundant SQL and increased maintenance overhead if the 'CONSORTIUM WA' definition or its filtering logic needs to change.",WHERE SAFE_CAST(t0.portfolio_parent_group_name_sync AS STRING) = 'CONSORTIUM WA',"Implement this common filter at the Looker Studio dashboard level, or create a dedicated BigQuery view/materialized view that pre-filters the `adsales_performance` table for 'CONSORTIUM WA' data. This would simplify metric definitions and improve maintainability.",2,490533a1-5f98-468e-aa8a-2f245e8a2b90
"gross_revenue_current_fy, gross_revenue_previous_fy, gross_revenue_previous_fy_stly, gross_revenue_prev_fy_digital_as_of_date, prior_period_gross_revenue_complex",Anti-Pattern / Inconsistency,"The `Sales_Group = 'Client'` filter is repeated across most revenue metrics. However, it is notably absent from the `prior_period_gross_revenue_complex` metric. This inconsistency in filtering scope for 'Gross Revenue' metrics can lead to confusion and misinterpretation of data across the dashboard.",AND SAFE_CAST(t0.Sales_Group AS STRING) = 'Client',"Standardize the application of the `Sales_Group = 'Client'` filter. If it's intended for all primary revenue metrics, apply it consistently at the dashboard level. If `prior_period_gross_revenue_complex` is intentionally broader, its business description should explicitly state this difference, and consider renaming for clarity.",2,490533a1-5f98-468e-aa8a-2f245e8a2b90
gross_revenue_prev_fy_digital_as_of_date,Hardcoded Logic / Data Staleness,"The `gross_revenue_prev_fy_digital_as_of_date` metric uses a hardcoded future date (`2025-03-27`) within its `DATETIME_ADD` function for the 'as-of' date calculation. This will cause the metric to become static and eventually incorrect as time progresses, failing to reflect current or dynamic 'as-of' periods.","DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-03-27 01:56:58.653654+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY)","Replace the hardcoded date with a dynamic date function (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`) or parameterize it using a Looker Studio control. This will ensure the metric remains relevant and up-to-date without manual SQL modifications.",2,490533a1-5f98-468e-aa8a-2f245e8a2b90
"sales_group_dimension, advertiser_name_dimension, sales_segment_gm_name_sync_dimension",Data Integrity / Incomplete Data,"All dimension metrics (`Sales Group`, `Advertiser Name`, `Sales Segment GM Name`) include a `LIMIT 100` clause. This severely restricts the number of distinct values returned, meaning the dashboard will only display up to 100 unique entries for these dimensions. This can lead to incomplete filtering options, misrepresentation of the full dataset, and potentially misleading aggregations if users expect to see all available values.",LIMIT 100;,"Remove the `LIMIT 100` clause from all dimension queries. If performance is a concern for large distinct counts, investigate BigQuery indexing strategies, consider materializing these dimensions into a smaller lookup table, or implement more granular filtering at the dashboard level to reduce the data processed.",2,490533a1-5f98-468e-aa8a-2f245e8a2b90
prior_period_gross_revenue_complex,Anti-Pattern / Complex Logic,"The `prior_period_gross_revenue_complex` metric uses a nested `CASE` statement with `relative_fy_month_offset` and `relative_fy_year_offset` to determine which prior period revenue to sum. While functional, the logic is dense and could be difficult to understand, debug, or modify for future fiscal period definitions.",SUM(CASE WHEN SAFE_CAST(t0.relative_fy_month_offset AS INT64) < -12 THEN (CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = -1 THEN SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC) ELSE 0 END) ELSE (CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = -1 AND SAFE_CAST(t0.stly_flag AS STRING) = 'Y' THEN SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC) ELSE 0 END) END),"Consider refactoring this complex logic into a more readable format, potentially using a subquery or a CTE to define the conditions for each period type before the final SUM. Alternatively, if `relative_fy_month_offset` and `relative_fy_year_offset` are derived from a date dimension, explore joining to a well-modeled date dimension table to simplify date-based filtering.",2,490533a1-5f98-468e-aa8a-2f245e8a2b90
multiple_metrics,Anti-Pattern,"A significant number of measure metrics (e.g., Gross Revenue, Pages Count) are defined with nearly identical, extensive hardcoded `WHERE` clauses. These clauses filter by `revenue_transaction_status`, `source_publishing_division`, `source_system_code`, `revenue_type`, `unified_publication_name`, and `financial_year`. The only variation between these metrics is the specific `financial_month` or its absence (for FY totals). This approach leads to metric duplication, poor reusability, and high maintenance burden, directly contradicting the initial high consolidation score.","WHERE t0.revenue_transaction_status IN ('Booked', 'Billed') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) AND t0.source_system_code IN ('ADPT') AND t0.revenue_type IN ('Print') AND t0.unified_publication_name IN ('Vogue Living', 'Vogue Australia', 'GQ Mag') AND t0.financial_year IN ('2025')","Refactor these into a single, parameterized base metric (e.g., `gross_revenue_amount_filtered`, `pages_count_filtered`) in Looker Studio. This would allow users to dynamically select `financial_month`, `financial_year`, and other dimensions via dashboard filters, significantly reducing the number of individual metrics. The common exclusion of 'Medium Rare Content Agency' should be managed at a higher level, such as within the underlying `v_adsales_revenue_client` view or as a common dashboard filter, rather than hardcoded into each metric.",3,af5b3038-ea93-4cf0-9bf5-44a9b09b3766
multiple_dimension_metrics,Hardcoded Logic,"All dimension metrics (e.g., `advertiser_name`, `financial_month`, `adsize_name`) include a hardcoded `LIMIT 10` clause in their SQL logic. While this might be intended for performance or display in limited lists (like dropdowns), it means that only the first 10 distinct values are retrieved, potentially omitting important data and providing an incomplete view to the user.",LIMIT 10;,"Remove the `LIMIT 10` clause from dimension metrics unless there is a strict, justified business requirement for a truncated list. If performance is a concern for very large distinct sets, consider implementing search functionality or alternative data loading strategies within Looker Studio. Ensure users are aware if a list is intentionally truncated.",3,af5b3038-ea93-4cf0-9bf5-44a9b09b3766
financial_month_related_metrics,Data Type Inconsistency/Anti-Pattern,"The `financial_month` column is consistently `SAFE_CAST` to `FLOAT64` before comparison (e.g., `IN (11.000000)`). Month numbers are typically integers (1-12). While `SAFE_CAST` handles potential errors, casting an integer-like value to a float for comparison is unusual and could indicate an underlying data type mismatch in the source table or an unnecessary conversion, potentially leading to precision issues or unexpected behavior.",SAFE_CAST(t0.financial_month AS FLOAT64) IN (11.000000),"Investigate the native data type of the `financial_month` column in the `v_adsales_revenue_client` table. If it is an integer, remove the `SAFE_CAST` to `FLOAT64` and compare directly as an integer. If it is a string, consider casting to `INT64` or `BIGNUMERIC` for more appropriate numeric comparison.",3,af5b3038-ea93-4cf0-9bf5-44a9b09b3766
multiple,Anti-Pattern (Hardcoded Logic),"A pervasive anti-pattern exists where multiple metrics (e.g., 'Total Emails Sent (Lapse EDM)', 'Total Clicks (Newspass EDM)', 'Total Unique Opens (Cancel EDM)') use repeated `REGEXP_CONTAINS` clauses with hardcoded string patterns to filter `newsletter_send_email_name`. This approach is highly unscalable, difficult to maintain, and prone to inconsistencies or errors if campaign naming conventions evolve or new campaign types are introduced. It fragments the business logic for campaign categorization across numerous metric definitions.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'lapse|LAPSE|Lapse')
SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'Newspass|NewsPass|NEWSPASS|newspass|npass|NPASS')","Implement a centralized lookup table or a data transformation layer (e.g., a view or a dbt model) that maps `newsletter_send_email_name` to a standardized `campaign_type` dimension. This would allow metrics to simply filter on `WHERE campaign_type = 'Lapse'`, centralizing the complex regex logic and improving maintainability, scalability, and data governance.",4,71dfdbc0-a8d2-4131-bf4e-7e54ac7e6b5e
"total_send_winback_edm, total_click_winback_edm, unique_open_winback_edm",Data Mismatch/Typo,"The `REGEXP_CONTAINS` pattern used for 'Winback' EDM metrics contains a clear typo: 'Winbacl' instead of 'Winback'. This error will cause these metrics to incorrectly filter or completely miss relevant 'Winback' campaigns, leading to inaccurate and understated data for these critical marketing performance indicators.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'Winbacl|winbacl|WinBacl|WINBACK')",Immediately correct the typo in the `REGEXP_CONTAINS` pattern to `Winback|winback|WinBack|WINBACK` to ensure accurate capture of 'Winback' campaigns. This incident further underscores the fragility and error-proneness of hardcoded regex patterns for business logic.,4,71dfdbc0-a8d2-4131-bf4e-7e54ac7e6b5e
"weekly_send_date, newsletter_email_name",Anti-Pattern (Dimension Definition),"The dimension metrics `weekly_send_date` and `newsletter_email_name` are defined with a `LIMIT 1` clause. While this might be intended for specific display purposes (e.g., showing an example value), it is an unconventional and potentially misleading way to define a general dimension for a dashboard. Dimensions are typically used for grouping, filtering, or slicing data, where all distinct values are expected to be available, not just a single arbitrary one.","SELECT SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.newsletter_send_date AS DATETIME), ISOWEEK) AS DATE) AS weekly_send_date FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0 LIMIT 1","Review the intended use of these dimension metrics. If they are meant for general filtering or grouping within the dashboard, the `LIMIT 1` clause should be removed. If they serve a very specific, single-value display purpose, this should be clearly documented or re-evaluated for its utility and potential for misinterpretation.",4,71dfdbc0-a8d2-4131-bf4e-7e54ac7e6b5e
all_metrics,Hardcoded Logic|Anti-Pattern,"The 'masthead_group' mapping logic is hardcoded and repeated verbatim across all six metrics. This creates a significant maintenance burden, as any change to masthead classifications requires updating every single metric's SQL. Furthermore, the 'ELSE 'Exclude'' and 'WHEN (t0.masthead IS NULL) THEN 'check'' clauses suggest that the mapping might not be exhaustive, potentially silently filtering out unmapped or unexpected masthead values.","CASE
    WHEN (t0.masthead = 'TA') THEN 'The Australian'
    WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
    WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
    WHEN (t0.masthead = 'WT') THEN 'Other Publications'
    WHEN (t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
    WHEN (t0.masthead IS NULL) THEN 'check'
    ELSE 'Exclude'
END AS masthead_group","Centralize the 'masthead_group' mapping logic. This can be achieved by creating a dedicated lookup table for masthead classifications in the `asl_finance_derived` dataset, or by defining this logic within a BigQuery view that all metrics query. This approach ensures consistency, improves maintainability, and allows for easier updates to business rules.",5,1e9c7a29-2613-47b8-85d1-127e5b8c66ac
all_metrics,Hardcoded Logic|Anti-Pattern|Complex Logic,"The 'subscription_type' derivation logic is hardcoded and repeated verbatim across all six metrics. The use of `CONCAT(SAFE_CAST(...))` for classification is overly complex and brittle. It makes the logic difficult to read, understand, and maintain, and is highly susceptible to breakage if underlying data types or values in `delivery_medium_type` or `subscriber_has_email_flag` change.","CASE
    WHEN (CONCAT(SAFE_CAST(t0.delivery_medium_type AS STRING),' ',SAFE_CAST(t0.subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
    ELSE 'Print Subscriptions'
END AS subscription_type","Refactor the 'subscription_type' logic into a centralized, governed dimension. This could be a derived column in the base `acquisitions_cancellations_movements` table (if appropriate for the data model), or a dedicated view. Simplify the logic if possible, avoiding complex string concatenations for classification. This will improve readability, maintainability, and ensure consistent application of the business rule.",5,1e9c7a29-2613-47b8-85d1-127e5b8c66ac
"total_records_by_cleaned_delivery_type_digital_selected_mastheads, total_records_by_cleaned_delivery_type_digital_fy2026",Hardcoded Logic|Anti-Pattern,"The 'cleaned_delivery_medium_type' mapping, while simpler, is hardcoded and repeated in the two metrics that utilize it. This is another instance of duplicated logic that should be centralized.","CASE
    WHEN (t0.delivery_medium_type = 'Not Available') THEN 'Digital'
    ELSE t0.delivery_medium_type
END AS cleaned_delivery_medium_type",Define 'cleaned_delivery_medium_type' as a derived column in the base view/table or as a governed dimension within a semantic layer. This ensures the cleaning logic is applied consistently and maintained in a single location.,5,1e9c7a29-2613-47b8-85d1-127e5b8c66ac
all_metrics_common_filters,Anti-Pattern,"There is extensive duplication of common filtering conditions across nearly all metrics. Conditions such as `SAFE_CAST(t0.financial_year AS STRING) >= '2022'`, `t0.revenue_transaction_status IN ('Billed', 'Booked')`, `t0.record_type_code = 'STD'`, `t0.source_system_code = 'ADPT'`, `t0.revenue_type = 'Digital'`, and `NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.advertiser_name AS STRING), '^(^CTR_.*)$')` are repeated verbatim. This leads to high maintenance overhead, as any change to these core business rules would require updating multiple metric definitions, increasing the risk of inconsistencies.","Example from 'total_revenue_general': `WHERE SAFE_CAST(t0.financial_year AS STRING) >= '2022' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.record_type_code = 'STD' AND t0.source_system_code = 'ADPT' AND t0.revenue_type = 'Digital' AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.advertiser_name AS STRING), '^(^CTR_.*)$')`","Encapsulate these common filtering conditions into a base view (e.g., `v_adpoint_digital_billed_booked_fy2022_base`) or define them as reusable dimensions/filters within a LookML model. This establishes a single source of truth for these core business rules, significantly improving maintainability and consistency.",6,cb5ce22d-b196-49dc-9d7b-8db7ca1f1f4d
total_revenue_roa_extension,Hardcoded Logic,"Business-specific values such as 'Run Of Audience Extension', 'ECOMM', and 'Medium Rare Content Agency' are hardcoded directly into the SQL queries for various metrics. This makes it difficult to manage changes to these classifications or add new ones without modifying multiple metric definitions. For example, if 'Run Of Audience Extension' is renamed or split, all related metrics would need manual updates.",Example from 'total_revenue_roa_extension': `t0.publishing_division != 'Medium Rare Content Agency' AND t0.publication_name = 'Run Of Audience Extension'`,"Externalize these business rules into a dedicated lookup table (e.g., `dim_publication_types`, `dim_publishing_divisions`) or define them as LookML `case` statements or `tier` dimensions. This approach centralizes the management of these classifications, allowing for easier updates and better data governance without altering core SQL.",6,cb5ce22d-b196-49dc-9d7b-8db7ca1f1f4d
min_financial_month_2025_roa,Anti-Pattern,"Inconsistent and potentially redundant `SAFE_CAST` operations are observed. `financial_year` is cast to `STRING` for comparison (`>= '2022'`) in most metrics, but then `financial_month` is cast to `FLOAT64` for aggregation (`MIN(SAFE_CAST(t0.financial_month AS FLOAT64))`). Additionally, `advertiser_name` is repeatedly cast to `STRING` for `REGEXP_CONTAINS`. The regex pattern `^(^CTR_.*)$` is also redundant, as `^CTR_.*` achieves the same result.","Example from 'min_financial_month_2025_roa': `MIN(SAFE_CAST(t0.financial_month AS FLOAT64))` and `SAFE_CAST(t0.financial_year AS STRING) >= '2022'`. Example from 'total_revenue_general': `NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.advertiser_name AS STRING), '^(^CTR_.*)$')`","Review the underlying data types of `financial_year`, `financial_month`, and `advertiser_name` in the `v_adpoint_detail` table. If `financial_year` is an integer, use integer comparisons directly. If `financial_month` is an integer, cast to `NUMERIC` or `INT64` for aggregation. Simplify the regex for `advertiser_name` to `NOT SAFE.REGEXP_CONTAINS(t0.advertiser_name, '^CTR_.*')` if the column is reliably a string, or address the root cause of potential non-string values. Defining these as proper dimensions/measures in LookML with appropriate types would handle casting consistently.",6,cb5ce22d-b196-49dc-9d7b-8db7ca1f1f4d
page_view_events_by_user_detail,Hardcoded Logic,"The metric's SQL logic includes a hardcoded date range (2025-04-25 to 2025-04-27). This prevents the dashboard from displaying current or user-selected date ranges without manual SQL modification, severely limiting its dynamic analytical capabilities.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.event_date AS STRING)) >= DATE '2025-04-25'
  AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.event_date AS STRING)) <= DATE '2025-04-27'","Replace hardcoded dates with Looker Studio date parameters (e.g., `_PARTITIONTIME` or `{{_DS_START_DATE}}` and `{{_DS_END_DATE}}`) to allow dynamic date filtering by users.",7,a07c3b8c-9aac-4462-8d22-f3c662016f59
page_view_events_by_user_detail,Anti-Pattern,"The SQL query includes a `LIMIT 10` clause. This means the metric will only ever display a maximum of 10 rows of data, which is highly inappropriate for a dashboard metric intended to provide a comprehensive view of 'Page View Events by User Detail'. This will lead to incomplete and potentially misleading data presentation.",LIMIT 10;,"Remove the `LIMIT` clause to ensure all relevant data is returned for the dashboard visualization. If a limit is truly needed for performance, it should be applied at the visualization layer or through a more sophisticated sampling strategy, not directly in the core metric SQL.",7,a07c3b8c-9aac-4462-8d22-f3c662016f59
total_publication_group_target,Hardcoded Logic,"Similar to other metrics, this metric uses a hardcoded date range (2025-05-09 to 2025-05-11). This prevents the dashboard from being used for current or historical target analysis without manual SQL updates.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-05-09'
  AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-11'",Implement Looker Studio date parameters to enable dynamic date filtering for targets.,7,a07c3b8c-9aac-4462-8d22-f3c662016f59
total_publication_group_target,Hardcoded Logic,The metric's SQL hardcodes the `publication_group` filter to 'Business' using `REGEXP_CONTAINS`. This severely limits the metric's reusability and prevents the dashboard from analyzing targets for other publication groups without SQL modification.,"AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'Business')",Replace the hardcoded 'Business' filter with a Looker Studio control parameter or a join to a lookup table if multiple publication groups need to be dynamically selected or analyzed.,7,a07c3b8c-9aac-4462-8d22-f3c662016f59
total_publication_group_target,Anti-Pattern,"The SQL query includes a `LIMIT 1` clause. While this metric calculates a SUM, limiting it to 1 row is unusual unless it's specifically designed to show only one aggregated value. If the intention is to show the sum for the *entire* filtered period, the LIMIT is redundant and potentially misleading if the sum itself is not a single row result (e.g., if there were multiple sums per group and only one was desired).",LIMIT 1;,"Review the business requirement for this metric. If it's meant to be a single aggregated sum for the entire filtered period, the `LIMIT 1` is unnecessary and should be removed. If it's meant to pick only one specific row from a larger result set, the logic needs to be clarified and potentially refined with an `ORDER BY` clause.",7,a07c3b8c-9aac-4462-8d22-f3c662016f59
verity_user_reference_count,Anti-Pattern,"The SQL query includes a `LIMIT 10` clause. This means the metric will only ever display a maximum of 10 rows of user reference counts, which is highly inappropriate for a dashboard metric intended to provide a comprehensive overview of user configurations. This will lead to incomplete and potentially misleading data presentation.",LIMIT 10;,"Remove the `LIMIT` clause to ensure all relevant user reference data is returned for the dashboard visualization. If a limit is truly needed for performance, it should be applied at the visualization layer or through a more sophisticated sampling strategy, not directly in the core metric SQL.",7,a07c3b8c-9aac-4462-8d22-f3c662016f59
"All dimensions (e.g., date, account_id, campaign_name, etc.)",Anti-Pattern,"All dimension metrics include a `LIMIT 100` clause in their SQL logic. This severely restricts the number of distinct values returned for each dimension, leading to incomplete data being displayed in the dashboard. This can result in misleading analysis as users will not see the full range of available dimension values.",LIMIT 100,"Remove the `LIMIT 100` clause from all dimension SQL queries. If this was intended for development performance, it must be removed for production. If performance is a concern with high cardinality dimensions, explore Looker Studio's sampling options or optimize the underlying BigQuery table (e.g., clustering, partitioning).",8,88d635d0-512a-4ad8-b430-afcffbdb72bb
All metrics (dimensions and measures),Anti-Pattern / Hardcoded Logic,"An identical and complex `WHERE` clause (`WHERE campaign_name LIKE 'AOD%' AND SAFE_CAST(date AS DATE) >= '2023-07-03' AND masthead_group IN ('CON', 'FOD', 'NKB', 'PRE', 'TRV') AND fy_year = 'FY24'`) is hardcoded into the SQL logic of every single metric (41 times). This violates the 'Don't Repeat Yourself' (DRY) principle, significantly increases query verbosity, and makes maintenance extremely difficult. Any change to these core filters requires manual updates across all metric definitions.","WHERE campaign_name LIKE 'AOD%' AND SAFE_CAST(date AS DATE) >= '2023-07-03' AND masthead_group IN ('CON', 'FOD', 'NKB', 'PRE', 'TRV') AND fy_year = 'FY24'","Centralize this filtering logic. The most effective solution is to apply these filters at the Looker Studio data source level. Alternatively, create a pre-filtered BigQuery view (e.g., `campaign_performance_consol_fy24_aod`) that encapsulates this logic, allowing metrics to query a cleaner, pre-filtered dataset. This will simplify metric definitions, improve maintainability, and potentially optimize query performance.",8,88d635d0-512a-4ad8-b430-afcffbdb72bb
campaign_classification,Hardcoded Logic,"The `campaign_classification` metric uses a hardcoded `CASE` statement to categorize campaigns based on `source_system_name` and `campaign_type`. This logic is brittle; if new source systems or campaign types emerge, or if naming conventions change, this metric will require manual updates, leading to potential inconsistencies across reports.",CASE WHEN source_system_name LIKE '%Facebook%' THEN 'Meta' WHEN source_system_name LIKE '%LinkedIn%' THEN 'LinkedIn' WHEN source_system_name LIKE '%Trade Desk%' THEN 'Trade Desk' WHEN campaign_type LIKE '%SEARCH%' THEN 'Google Search' WHEN campaign_type LIKE '%PERFORMANCE_MAX%' THEN 'Google PMAX' ELSE 'Other' END,"Implement a governed lookup table or a dedicated dimension within the data model (e.g., a BigQuery view) that maps `source_system_name` and `campaign_type` to `campaign_classification`. This promotes data governance, reusability, and easier maintenance by centralizing business logic.",8,88d635d0-512a-4ad8-b430-afcffbdb72bb
"meta_subscriptions, linkedin_subscriptions, tradedesk_subscriptions, google_search_subscriptions, google_pmax_subscriptions",Hardcoded Logic / Anti-Pattern,"These source/type-specific subscription metrics (`Meta Subscriptions`, `LinkedIn Subscriptions`, etc.) all employ repeated `SUM(CASE WHEN ... THEN subscriptions ELSE 0 END)` logic. This is a direct consequence of the hardcoded `campaign_classification` logic and suffers from the same maintainability and scalability issues. Creating separate metrics for each category is inefficient.",SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN SAFE_CAST(subscriptions AS BIGNUMERIC) ELSE 0 END),"Once `campaign_classification` is externalized into a governed dimension, these specific metrics can be simplified or, ideally, replaced by allowing users to filter the `total_subscriptions` measure by the `campaign_classification` dimension directly. This reduces metric proliferation and improves dashboard flexibility.",8,88d635d0-512a-4ad8-b430-afcffbdb72bb
live_status,Potential Performance Issue,"The `live_status` metric uses a subquery `(SELECT MAX(SAFE_CAST(date AS DATE)) FROM ...)` within its `CASE` statement. While functionally correct, this subquery might be re-evaluated for every row in the main query, potentially leading to performance degradation, especially on large datasets.",CASE WHEN SAFE_CAST(date AS DATE) = (SELECT MAX(SAFE_CAST(date AS DATE)) FROM `ncau-data-newsquery-sit.qvr_consumer.campaign_performance_consol`) THEN 'Y' ELSE 'N' END,"If performance becomes an issue, consider pre-calculating the `MAX(date)` in a separate, materialized view or a daily batch process. Alternatively, explore if Looker Studio's data blending or parameter features could provide a more efficient way to determine the latest date for comparison.",8,88d635d0-512a-4ad8-b430-afcffbdb72bb
all_snapshot_metrics,Hardcoded Logic,"Almost all 'snapshot' metrics (50+ metrics) are hardcoded to display data for a single, specific fiscal week and year (FY2025, Week 37). This makes the dashboard static and requires manual SQL updates for each new reporting period, leading to high maintenance overhead and a high risk of errors. This anti-pattern is also present in key calculated fields intended for dynamic filtering.","WHERE t0.fy_week_of_year = (DATETIME_DIFF(SAFE_CAST(DATE '2025-03-30' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) AND t0.fy_year = 2025","Implement dynamic date filtering using Looker Studio parameters or BigQuery scripting to automatically update the fiscal week/year. A robust date dimension table with `is_current_week` or `is_current_month` flags, driven by `CURRENT_DATE()`, should be used to filter data dynamically. This would eliminate the need for hardcoded dates in individual metric SQL.",9,57d87efe-c112-4d42-be1b-045f0c8ca73e
all_v_suffixed_metrics,Anti-Pattern,"Numerous metrics exist in 'primary' and '_V' suffixed variations (e.g., 'Always-on Digital Sales' and 'Always-on Digital Sales V'). While the description states '_V' is 'likely from a Looker Studio view or specific column,' this pattern suggests potential redundancy, lack of clear metric definitions, or inconsistent data sources for what appears to be the same business concept. This can lead to user confusion and data discrepancies.",SELECT SUM(t0.Always_on_Digital_Sales) ... vs. SELECT SUM(t0.Always_on_Digital_Sales_V) ...,"Conduct a thorough review of all '_V' suffixed metrics. Clearly define the business purpose and data source for each. If they represent different versions (e.g., actual vs. forecast, or different calculation methodologies), ensure naming conventions explicitly reflect this. If they are redundant, consolidate them into a single, authoritative metric definition.",9,57d87efe-c112-4d42-be1b-045f0c8ca73e
is_last_5_fiscal_weeks_or_specific_conditions,Logical Error / Anti-Pattern,"The `is_last_5_fiscal_weeks_or_specific_conditions` calculated field contains a complex `CASE` statement with a logical flaw. The condition `((0 = 3) OR (0 = 1) OR (0 = 4) OR (0 = 5) OR (0 = 2))` will always evaluate to `FALSE`, meaning the `THEN TRUE ELSE NULL END` block within the first `WHEN` clause will always result in `NULL`. This indicates either a broken filter logic or an incomplete implementation, potentially leading to incorrect or missing data for certain fiscal week scenarios.","CASE WHEN ((DATETIME_DIFF(SAFE_CAST(DATE '2025-03-30' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) <= 5) THEN (CASE WHEN ((0 = 3) OR (0 = 1) OR (0 = 4) OR (0 = 5) OR (0 = 2)) THEN TRUE ELSE NULL END) ELSE ...","Immediately review and correct the logic within this calculated field. Ensure the `CASE` statement accurately reflects the intended filtering for the last 5 fiscal weeks and any other specific conditions. This logic should also be made dynamic, referencing the current fiscal week rather than hardcoded dates.",9,57d87efe-c112-4d42-be1b-045f0c8ca73e
"fiscal_week_of_year, fiscal_year, iso_week_start_date, current_fiscal_week_number, is_current_fiscal_week, is_last_5_fiscal_weeks_or_specific_conditions",Anti-Pattern,"Several dimension metrics from the `calendar_dim` table use `LIMIT 1` in their SQL logic. While this might be acceptable for displaying a single, arbitrary value, it is problematic if these dimensions are intended for filtering or joining with the main `consumer_masthead_scorecard` table. For boolean flags like `is_current_fiscal_week` or `is_last_5_fiscal_weeks_or_specific_conditions`, `LIMIT 1` prevents them from correctly evaluating for each row in the primary data source, leading to incorrect filtering behavior.",SELECT t0c0d2.fy_week_of_year FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` AS t0c0d2 LIMIT 1,"Re-evaluate the purpose and usage of these dimensions. If they are meant to be applied as filters or joins, remove the `LIMIT 1` clause and ensure the `calendar_dim` is correctly joined to the `consumer_masthead_scorecard` table on appropriate date keys. For dynamic filtering, consider using Looker Studio's built-in date range controls or parameters instead of complex calculated fields with `LIMIT 1`.",9,57d87efe-c112-4d42-be1b-045f0c8ca73e
unique_users_per_table_audit,Anti-Pattern,"The SQL for 'Unique Users Accessing Table' includes a `LIMIT 100` clause after a `GROUP BY tableId`. While this might be intended for display purposes, it means the metric is not providing a comprehensive count of unique users across all tables, or even a full list of tables, but rather a sample of up to 100 tables. This can be misleading if the user expects a complete overview.","SELECT COUNT(DISTINCT User_Name) AS unique_users, tableId FROM `ncau-data-newsquery-prd.operations.newsquery_table_audit` GROUP BY tableId LIMIT 100;","Clarify the metric's purpose in its name (e.g., 'Top 100 Tables by Unique Users') or remove the `LIMIT 100` if a complete dataset is required for analysis. If pagination or sampling is needed for performance, implement it at the dashboard rendering layer rather than in the core metric SQL.",11,8ae7916a-45c9-4713-8d46-e3470805c7f6
pii_data_access_events_filtered_by_user,Data Mismatch / Anti-Pattern,"The SQL for 'PII Data Access Events' includes a `LIMIT 1` clause on a `COUNT(*)` aggregation. This will result in the metric always returning either 0 or 1, regardless of the actual number of PII access events. This fundamentally misrepresents the 'count' that the metric name implies.","SELECT
  COUNT(*) AS pii_data_access_events_count
FROM
  `ncau-data-newsquery-prd.operations.pii_data` AS tables
  JOIN
  (
    SELECT
      protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.query.query AS query,
      protopayload_auditlog.authenticationInfo.principalEmail AS user_name,
      receiveTimestamp AS jobtime
    FROM
      `ncau-data-newsquery-prd.ops_prd_bq_logs.cloudaudit_googleapis_com_data_access_20230101` -- Example date
    WHERE
      protopayload_auditlog.authenticationInfo.principalEmail NOT LIKE ""%gserviceaccount.com%""
      AND protopayload_auditlog.authenticationInfo.principalEmail NOT LIKE ""svc%""
  ) AS logs
  ON logs.query LIKE CONCAT('%', tables.tableID, '%') AND logs.query LIKE CONCAT('%', tables.piiColumn, '%')
WHERE
  (STRPOS(logs.user_name, 'anupriya') <= 0 AND logs.user_name IN ('consumer-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com'))
LIMIT 1;","Remove the `LIMIT 1` clause to correctly calculate the total count of PII data access events. If the intention was to check for the *existence* of any events, the metric name and display should be adjusted to reflect a boolean (e.g., 'PII Access Events Detected').",11,8ae7916a-45c9-4713-8d46-e3470805c7f6
pii_data_access_events_filtered_by_user,Hardcoded Logic,"The SQL uses a hardcoded date `20230101` in the audit log table name (`cloudaudit_googleapis_com_data_access_20230101`). While commented as 'Example date', in a production dashboard, this would prevent the metric from showing current or dynamic data.",FROM `ncau-data-newsquery-prd.ops_prd_bq_logs.cloudaudit_googleapis_com_data_access_20230101` -- Example date,"Parameterize the date or use BigQuery's `_TABLE_SUFFIX` or `_TABLES` wildcard functions to query across a range of audit log tables (e.g., `cloudaudit_googleapis_com_data_access_*`) and apply date filters in the `WHERE` clause. This allows for dynamic date ranges based on user selection or predefined periods.",11,8ae7916a-45c9-4713-8d46-e3470805c7f6
pii_data_access_events_filtered_by_user,Hardcoded Logic / Anti-Pattern,"The filtering logic for `user_name` is complex and uses hardcoded values and a mix of exclusion (`STRPOS(logs.user_name, 'anupriya') <= 0`) and inclusion (`logs.user_name IN ('consumer-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com')`) criteria. This makes the logic difficult to read, maintain, and scale. The combination of `NOT LIKE ""%gserviceaccount.com%""` and `IN ('consumer-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com')` (which *is* a service account) also appears contradictory or redundant depending on the exact intent.","WHERE
  protopayload_auditlog.authenticationInfo.principalEmail NOT LIKE ""%gserviceaccount.com%""
  AND protopayload_auditlog.authenticationInfo.principalEmail NOT LIKE ""svc%""
...
WHERE
  (STRPOS(logs.user_name, 'anupriya') <= 0 AND logs.user_name IN ('consumer-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com'))",Refactor the user filtering logic. Create a dedicated lookup table for 'excluded users' and 'allowed user groups/service accounts'. Join against this table to manage inclusions/exclusions dynamically. Clarify the exact intent of the combined `NOT LIKE` and `IN` clauses to ensure logical consistency and avoid unintended filtering.,11,8ae7916a-45c9-4713-8d46-e3470805c7f6
"total_day_target_website_nsn_20250426, total_day_target_website_nsn_20250719",Hardcoded Logic,"Metrics for website targets (`Total Day Target Website`) use hardcoded specific dates (2025-04-26, 2025-07-19) within the `WHERE` clause. This approach limits the reusability of these metrics for different time periods and necessitates creating new metrics or manual SQL modifications for each new target date, indicating a lack of dynamic date filtering.","WHERE (PARSE_DATE('%Y%m%d', SAFE_CAST(t0c1d0.targetdate AS STRING)) >= DATE '2025-04-26' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0c1d0.targetdate AS STRING)) <= DATE '2025-04-26' AND t0c1d0.publication_group = 'National Sports Newsroom')",Implement Looker Studio date range parameters or BigQuery parameterized queries to allow dynamic date selection. Consider creating a view that exposes `day_target_website` by `targetdate` and `publication_group` for easier filtering and aggregation within the dashboard.,12,06bf534b-be32-4ebe-9013-fee9a581dcd6
"All newsletter-related metrics (total_newsletter_sends_sport_filtered, total_unique_opens_sport_filtered, total_clicks_sport_filtered, number_of_newsletters_sport_filtered, newsletter_score_sport_filtered, total_click_value_sport_filtered, total_open_value_sport_filtered)",Anti-Pattern,"The complex `CASE` statement defining `email_content_category` within the `derived_fields` CTE is duplicated verbatim across all seven newsletter-related metrics. This massive duplication makes the codebase difficult to maintain, as any change to the content categorization logic requires updating multiple, lengthy SQL queries, significantly increasing the risk of inconsistencies and errors.","derived_fields AS (
    SELECT
        *,
        CASE
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'BREAKING|LATESTNEWS_ALERT')) THEN 'Breaking'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'FRONT')) THEN 'Front page'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_subject, 'front page')) THEN 'Front page'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'PREM|EDITORS|AMEX')) THEN 'Subscriber only'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'LATESTNEWS|_WKD|TC_AM-PM|TWT_WEEKLY|THEOZ_DAILY|SN_DAILY|TA_DAILY')) THEN 'Latest news'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'CRIME')) THEN 'True Crime Australia'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'LIFESTYLE|SEALEDSEC|WINE')) THEN 'Lifestyle'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'BUSINESS|BIZ|FINANCE')) THEN 'Business/Finance'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'POLITICS')) THEN 'Politics'
            WHEN (is_sport_email_name AND is_not_marketing_email_name) THEN 'Sport'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'COSTOFLIVING|DT_New_CUR')) THEN 'Cost of living'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'ENTERTAINMENT|HOROSCOPE')) THEN 'Entertainment'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'EDUCATION')) THEN 'Education'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'PROPERTY|REAL-ESTATE')) THEN 'Property'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'TECH')) THEN 'Tech'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'MEDIA')) THEN 'Media'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'COMMONWEALTH')) THEN 'Commonwealth Games'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'FED-ELECTION')) THEN 'Federal election'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'RETENTION')) THEN 'Retention'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'NURTURE')) THEN 'Nurture'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'ONBOARDING')) THEN 'Onboarding'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'SpecialOffer')) THEN 'Special offer'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'EVENTS')) THEN 'Events'
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'Cashed Up')) THEN 'Cashed Up'
            ELSE 'Other'
        END AS email_content_category
    FROM base_data
)","Encapsulate the `email_content_category` logic in a BigQuery view or a common Looker Studio data source definition. This promotes a single source of truth, improves readability, and simplifies maintenance by centralizing the logic.",12,06bf534b-be32-4ebe-9013-fee9a581dcd6
All newsletter-related metrics,Hardcoded Logic,"Multiple `REGEXP_CONTAINS` clauses use long, hardcoded lists of patterns for filtering `newsletter_send_email_name` (e.g., exclusions for 'UAT', 'TEST', 'MARKETING' and inclusions for specific brands like 'TA_', 'HS_') and `newsletter_subject`. This makes the logic difficult to read, maintain, and extend, and is highly prone to errors if patterns change or new categories/exclusions are introduced.","AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name AS STRING), 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT_|MARKETING|Special Offer|EVENT|Not Available|_Suspend|_Failed|_Abandoned|_Lead_Nurture|Rewards_|_Wave|_Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Decommission|Switch|Modify|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM')
AND SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name AS STRING), 'TA_|HS_|DT_|CM_|ADV_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape|Delicious |Beauty EDM|Vogue Living Weekly')","Migrate these `REGEXP` patterns and their associated business rules into dedicated lookup tables in BigQuery. Join to these tables to apply filters and derive categories, making the logic data-driven, easily auditable, and updateable without modifying SQL code.",12,06bf534b-be32-4ebe-9013-fee9a581dcd6
newsletter_score_sport_filtered,Hardcoded Logic,"The `newsletter_score_base` calculation contains an extremely long `CASE` statement that hardcodes a massive list of specific `newsletter_send_email_name` values to assign a score of `0`. This is an extreme anti-pattern for maintainability and scalability, as it's impossible to manage effectively and prone to breakage with any change in email naming conventions.","CASE
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'ADV_CRIME_CUR_02|ADV_FRONT-PAGE_CUR_01|ADV_FRONT-PAGE_SAT-CUR_01|ADV_FRONT-PAGE_SUN-CUR_01|ADV_LATESTNEWS_PM_01|ADV_LATESTNEWS_SAT-AM_01|ADV_LATESTNEWS_SAT-PM_01|ADV_LATESTNEWS_SUN-AM_01|ADV_LATESTNEWS_SUN-PM_01|ADV_PREM-PM_CUR_01|CM_CRIME_CUR_03|CM_FRONT-PAGE_CUR_01|CM_FRONT-PAGE_SUN-CUR_01|CS_CRICKET_WEEKLY_01|CS_New_DAILY_01|CS_New_SUN_01|DT_CRIME_CUR_02|DT_FRONT-PAGE_CUR_01|DT_FRONT-PAGE_SAT-CUR_01|DT_FRONT-PAGE_SUN-CUR_01|DT_REAL-ESTATE_CUR_02|DT_SPORT_CUR_02|GAD_FRONT-PAGE_CUR_01|GCB_FRONT-PAGE_CUR_01|GCB_LATESTNEWS_AM_01|GCB_LATESTNEWS_PM_01|HS_CRIME_CUR_03|HS_FRONT-PAGE_CUR_01|HS_FRONT-PAGE_SUN-CUR_01|HS_SPORT_CUR_01|LDR_AFL_CUR_01|LDR-AWN_LATESTNEWS_CUR_02|LDR-BC_LATESTNEWS_CUR_02|LDR-BEN_LATESTNEWS_CUR_02|LDR-BL_LATESTNEWS_CUR_01|LDR-CRL_LATESTNEWS_CUR_01|LDR-FL_LATESTNEWS_CUR_01|LDR-GDL_LATESTNEWS_CUR_02|LDR-GVN_LATESTNEWS_CUR_02|LDR-MCN_LATESTNEWS_CUR_02|LDR-MDN_LATESTNEWS_CUR_02|LDR-MNE_LATESTNEWS_CUR_01|LDR-MON_LATESTNEWS_CUR_01|LDR-MPL_LATESTNEWS_CUR_01|LDR-MRE_LATESTNEWS_CUR_01|LDR-STO_LATESTNEWS_CUR_01|LDR-WHI_LATESTNEWS_CUR_01|LDR-WL_LATESTNEWS_CUR_01|LDR-WYN_LATESTNEWS_CUR_01|MERC_CRIME_CUR_01|MERC_FRONT-PAGE_CUR_01|MERC_FRONT-PAGE_SUN-CUR_01|MERC_LATESTNEWS_PM-CUR_01|MERC-LN_LATESTNEWS_CUR_03|MERC-NWC_LATESTNEWS_CUR_01|MSG_LATESTNEWS_CUR_011|MSG-BCG_LATESTNEWS_CUR_03|MSG-MSG_LATESTNEWS_CUR_02|MSG-PLN_LATESTNEWS_CUR_04|NL-BA_LATESTNEWS_CUR_02|NL-CCE_LATESTNEWS_CUR_01|NL-CS_LATESTNEWS_CUR_01|NL-DUB_LATESTNEWS_CUR_03|NL-HA_LATESTNEWS_CUR_01|NL-HST_LATESTNEWS_CUR_02|NL-IWC_LATESTNEWS_CUR_01|NL-MD_LATESTNEWS_CUR_01|NL-MNC_LATESTNEWS_CUR_02|NL-MOS_LATESTNEWS_CUR_01|NL-NN_LATESTNEWS_CUR_02|NL-NST_LATESTNEWS_CUR_01|NL-PA_LATESTNEWS_CUR_01|NL-SC_LATESTNEWS_CUR_02|NL-SGS_LATESTNEWS_CUR_01|NL-WC_LATESTNEWS_CUR_02|NSW-BSA_LATESTNEWS_CUR_01|NSW-BSN_LATESTNEWS_CUR_01|NSW-GDE_LATESTNEWS_CUR_01|NSW-TCCA_LATESTNEWS_CUR_01|NSW-TDN_LATESTNEWS_CUR_01|NSW-TNS_LATESTNEWS_CUR_01|NSW-TNS_LATESTNEWS_PM_01|QLD-CNBT_LATESTNEWS_CUR_01|QLD-CNMA_LATESTNEWS_CUR_01|QLD-CQN_LATESTNEWS_CUR_01|QLD-DH_LATESTNEWS_CUR_01|QLD-DM_LATESTNEWS_CUR_01|QLD-DM_LATESTNEWS_PM_01|QLD-FCC_LATESTNEWS_CUR_01|QLD-NM_LATESTNEWS_CUR_01|QLD-NN_LATESTNEWS_CUR_01|QLD-SBT_LATESTNEWS_CUR_01|QLD-SCD_LATESTNEWS_CUR_01|QLD-SCD_LATESTNEWS_PM_01|QLD-TGO_LATESTNEWS_CUR_01|QLD-TGT_LATESTNEWS_CUR_01|QLD-TMB_LATESTNEWS_CUR_01|QLD-TMB_LATESTNEWS_PM_01|QLD-TQT_LATESTNEWS_CUR_01|QLD-TQT_LATESTNEWS_PM_01|QLD-TSBP_LATESTNEWS_CUR_01|QLD-TWS_LATESTNEWS_CUR_01|QLD-WHT_LATESTNEWS_CUR_01|QST-BCH_LATESTNEWS_CUR_02|QST-BNR_LATESTNEWS_CUR_02|QST-LGN_LATESTNEWS_CUR_01|QST-MN_LATESTNEWS_CUR_03|QST-RBH_LATESTNEWS_CUR_02|QST-RC_LATESTNEWS_CUR_01|QST-SEN_LATESTNEWS_CUR_03|QST-SPN_LATESTNEWS_CUR_02|QST-SWN_LATESTNEWS_CUR_02|QST-WST_LATESTNEWS_CUR_02|QST-WYH_LATESTNEWS_CUR_02|SN_DAILY_PM_01|TC_AM-PM_MIX_02|TC_FRONT-PAGE_CUR_01|TCP_FRONT-PAGE_CUR_01|TCP_FRONT-PAGE_SAT-CUR_01|TWT_FRONT-PAGE_CUR_01')) THEN 0","This logic should be externalized into a lookup table (e.g., `newsletter_scoring_rules`) that maps email name patterns to scores. This allows for easy updates, auditing, and prevents the need for code changes when scoring rules evolve.",12,06bf534b-be32-4ebe-9013-fee9a581dcd6
"total_click_value_sport_filtered, total_open_value_sport_filtered",Anti-Pattern,"The `click_rate_multiplier` and `open_rate_multiplier` calculations redundantly re-embed the entire `email_content_category` `CASE` statement within their own `CASE` statements. This creates extremely verbose and inefficient SQL, making it difficult to read, debug, and maintain. The `email_content_category` should be calculated once and then referenced.","CASE
            WHEN (SAFE.REGEXP_CONTAINS(CASE
            WHEN (SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'BREAKING|LATESTNEWS_ALERT')) THEN 'Breaking'
            ...
            ELSE 'Other'
        END, 'Subscriber only|Front page')) THEN 0.160000
            ELSE 0.020000
        END AS click_rate_multiplier","Refactor the SQL to calculate `email_content_category` once in a preceding CTE or view. Then, reference this derived `email_content_category` column directly in the multiplier `CASE` statements. This significantly improves readability, performance, and maintainability.",12,06bf534b-be32-4ebe-9013-fee9a581dcd6
All metrics,Anti-Pattern,"The `LIMIT 1` clause is applied to all aggregate queries (SUM, COUNT). While it might not cause incorrect results for a single aggregate value, it is generally unnecessary for such queries and can sometimes mask issues if the aggregation unexpectedly returns multiple rows (e.g., due to a missing GROUP BY or unexpected data structure). It also suggests a copy-paste from non-aggregate query patterns.",LIMIT 1;,"Remove the `LIMIT 1` clause from aggregate queries unless there is a specific, well-understood, and documented reason for its presence. For single aggregate values, it is redundant.",12,06bf534b-be32-4ebe-9013-fee9a581dcd6
"page_events_by_user_name_param_20250608_20250613, page_events_by_user_name_param_20250710, page_events_by_user_name_param_20250318",Hardcoded Logic|Anti-Pattern,"Three distinct metrics (`page_events_by_user_name_param_20250608_20250613`, `page_events_by_user_name_param_20250710`, `page_events_by_user_name_param_20250318`) are defined with nearly identical SQL logic, differing only by hardcoded date ranges or single dates in their WHERE clauses. This indicates a lack of parameterization and leads to redundant metric definitions, making the dashboard less maintainable and scalable. The presence of a shared `base_metric_id` ('page_events_by_user_name_param') further highlights this as an opportunity for consolidation.","WHERE
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0.event_date AS STRING)) >= DATE '2025-06-08'
  AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.event_date AS STRING)) <= DATE '2025-06-13'
  AND t0_event_params.key = 'user_name'
  AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.event_name AS STRING), 'page')","Consolidate these into a single parameterized metric in Looker Studio. Utilize Looker Studio's date range parameters to allow users to select the desired date range dynamically, eliminating the need for multiple hardcoded metric definitions. This will improve maintainability, reduce dashboard complexity, and enhance reusability.",13,6c8affc5-3d5f-4481-a0ff-d3f6b4cec4a8
"daily_subscription_target_business_20250819, daily_subscription_target_business_20250626",Hardcoded Logic|Anti-Pattern,"Two distinct metrics (`daily_subscription_target_business_20250819`, `daily_subscription_target_business_20250626`) are defined with identical SQL logic, differing only by hardcoded single dates in their WHERE clauses. Similar to the page events metrics, this represents a significant anti-pattern due to redundant definitions and a missed opportunity for parameterization. The shared `base_metric_id` ('daily_subscription_target_business') reinforces the potential for consolidation.","WHERE
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-08-19'
  AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-08-19'
  AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'Business')","Consolidate these into a single parameterized metric. Implement a date parameter in Looker Studio to allow dynamic selection of the target date, thereby removing the need for separate hardcoded metrics. This will streamline the dashboard, improve data governance, and simplify future updates.",13,6c8affc5-3d5f-4481-a0ff-d3f6b4cec4a8
total_subscribers_hs_28d_weeks_daily,Hardcoded Logic,"The SQL logic for 'Total Subscribers (HS Masthead, 28-day active weeks context, Daily)' contains a hardcoded date range (2023-12-25 to 2024-03-19). This makes the metric static and irrelevant for current or future analysis, severely limiting the dashboard's utility for ongoing engagement tracking.",WHERE SAFE_CAST(t0c1d0.report_date AS DATE) >= DATE '2023-12-25' AND SAFE_CAST(t0c1d0.report_date AS DATE) <= DATE '2024-03-19',"Replace hardcoded dates with dynamic date functions (e.g., `CURRENT_DATE()` or `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`) to ensure the dashboard always displays current and relevant data. Consider using Looker Studio's date range controls for user flexibility.",14,bd697806-2124-441a-b991-fdf075461dbf
active_subscribers_hs_28d_weeks_daily,Hardcoded Logic,"Similar to its 'Total Subscribers' counterpart, the 'Active Subscribers (HS Masthead, 28-day active weeks, Daily)' metric also uses a hardcoded date range, making it static and non-dynamic for ongoing reporting.",WHERE SAFE_CAST(t0c1d0.report_date AS DATE) >= DATE '2023-12-25' AND SAFE_CAST(t0c1d0.report_date AS DATE) <= DATE '2024-03-19',Implement dynamic date filtering using `CURRENT_DATE()` or relative date functions to ensure the metric reflects the most recent 28-day active weeks. This is crucial for a dashboard tracking engagement.,14,bd697806-2124-441a-b991-fdf075461dbf
all_metrics,Anti-Pattern,"All metrics across different mastheads ('AA', 'HS', 'TA') and subscriber types ('Total', 'Active') contain highly repetitive SQL logic for filtering `member_type`, `combined_customer_type`, `combined_classification_level_2`, and `combined_masthead` using hardcoded string literals and `STRPOS`. This duplication increases maintenance overhead and the risk of inconsistencies if business rules change.","SAFE_CAST(t0.member_type AS STRING) = 'subscriber' AND STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0 AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0 AND SAFE_CAST(t0.combined_classification_level_2 AS STRING) != 'Print-only'","Centralize common filtering logic. Consider creating a base view or a parameterized custom query in Looker Studio that accepts masthead as a parameter. For the `STRPOS` filters, if exact matches are intended, use `=` for clarity and potential performance benefits. If partial matches are intended, ensure this is documented and necessary. Ideally, these categorical filters should reference a lookup table for maintainability and data governance.",14,bd697806-2124-441a-b991-fdf075461dbf
all_metrics,Anti-Pattern,"Extensive use of `SAFE_CAST(column AS STRING)` for columns that are then compared to string literals. While `SAFE_CAST` prevents errors, its pervasive use might indicate underlying data type inconsistencies in the source tables (`subscriber_base_agg`, `subscriber_daily_base_movement`) or a lack of confidence in the schema, potentially impacting query performance and data quality.",SAFE_CAST(t0.member_type AS STRING) = 'subscriber',"Review the schema of `subscriber_base_agg` and `subscriber_daily_base_movement` tables. Ensure columns like `member_type`, `combined_customer_type`, `combined_masthead`, and `combined_classification_level_2` are consistently defined with appropriate string data types (e.g., `STRING` or `VARCHAR`) to avoid unnecessary casting in queries. This improves readability and can optimize query execution.",14,bd697806-2124-441a-b991-fdf075461dbf
all_metrics_with_yearmonth_filter,Hardcoded Logic,"All core metrics within this dashboard are filtered by hardcoded `YearMonth` values (e.g., '2025-06', '2025-01', '2025-02'). This makes the dashboard static and unable to dynamically reflect 'Last 6 months' data without manual updates. The inconsistency in `YearMonth` values across different metrics (January, February, and June 2025) further exacerbates this issue, meaning different metrics are showing data from different, future months, leading to a fragmented and potentially misleading view.","WHERE t0.YearMonth = '2025-06' (or '2025-01', '2025-02')",Implement dynamic date filtering using Looker Studio's native date range controls or BigQuery's `CURRENT_DATE()` and `DATE_SUB` functions to ensure the dashboard always displays the most recent 'Last 6 months' data. Ensure consistent date ranges are applied across all relevant metrics for coherent reporting.,15,3da46266-c061-46a2-95df-5c4486efd89c
unique_subscribers_by_email_type,Anti-Pattern,"The metric uses a hardcoded `CASE` statement with a long `REGEXP_CONTAINS` pattern to categorize email types into 'Personal webmail' or 'Corporate, govt or other email'. This approach is brittle, difficult to maintain, and prone to missing new domains or miscategorizations. It also uses `DETERMINISTIC_DECRYPT` on `email`, which directly contradicts the dashboard's 'PII removed' claim, raising significant data governance and privacy concerns.","CASE WHEN (SAFE.REGEXP_CONTAINS(`ncau-data-newsquery-prd.ops_ncfr`.DETERMINISTIC_DECRYPT(t0.email), 'gmail|outlook|hotmail|bigpond|optusnet|yahoo|tpg|msn.com|live.com|iinet|internode|icloud|me.com|ozemail|primus|y7mail|mac.com|ymail|aol.com|aussiebb|westnet.com.au|adam.com.au|netspace.net.au|dodo.com.au')) THEN 'Personal webmail' ELSE 'Corporate, govt or other email' END","Create a governed lookup table for email domain categorization. This table can be maintained centrally and joined to the main data, making the logic more robust, scalable, and easier to update. A thorough review of the PII handling strategy is critical, given the use of `DETERMINISTIC_DECRYPT` on email addresses, to ensure compliance and accurate dashboard naming.",15,3da46266-c061-46a2-95df-5c4486efd89c
unique_subscribers_by_six_month_device_band,Anti-Pattern,"The metric uses a complex, hardcoded `CASE` statement to define device count bands (e.g., '27 to 50 devices in 6m', '51 to 100 devices in 6m'). This is inflexible; if business requirements for these bands change, every instance of this logic would need manual updating across the dashboard. The 'n/a' category for values outside the defined ranges might hide important data or indicate incomplete banding logic.",CASE WHEN (t0.SixMonthDeviceCount >= 27 AND t0.SixMonthDeviceCount <= 50) THEN '27 to 50 devices in 6m' WHEN (t0.SixMonthDeviceCount >= 51 AND t0.SixMonthDeviceCount <= 100) THEN '51 to 100 devices in 6m' WHEN (t0.SixMonthDeviceCount >= 101 AND t0.SixMonthDeviceCount <= 200) THEN '101 to 200 devices in 6m' WHEN (t0.SixMonthDeviceCount >= 201 AND t0.SixMonthDeviceCount <= 400) THEN '201 to 400 devices in 6m' WHEN (t0.SixMonthDeviceCount >= 401 AND t0.SixMonthDeviceCount <= 600) THEN '401 to 600 devices in 6m' WHEN (t0.SixMonthDeviceCount >= 601 AND t0.SixMonthDeviceCount <= 800) THEN '601 to 800 devices in 6m' WHEN (t0.SixMonthDeviceCount >= 801) THEN '810+ devices in 6m' ELSE 'n/a' END,"Define device count bands in a separate, governed lookup table. This allows for dynamic band definitions and easier maintenance. Alternatively, if Looker Studio supports it, define calculated fields for banding directly in the dashboard using parameters or a more flexible approach that can be updated centrally.",15,3da46266-c061-46a2-95df-5c4486efd89c
table_usage_status_sdm_count,Hardcoded Logic,"The high-criticality KPI 'Count of Tables by Usage/Load Status (SDM Data Layer)' uses a hardcoded future date (`2025-07-09`) within its `DATE_DIFF` calculations. This design flaw means the metric's categorization of tables ('loaded and used', 'loaded but not used', etc.) is fixed relative to this specific date, making it irrelevant for assessing current or evolving table statuses. The business description implies a dynamic assessment of table health, which is not supported by the static SQL implementation.","DATE_DIFF(DATE('2025-07-09'), DATE(SAFE_CAST(t0.last_modified_time AS DATETIME)), DAY)","Replace the hardcoded date `DATE('2025-07-09')` with a dynamic date function such as `CURRENT_DATE()` or `DATE(CURRENT_TIMESTAMP())`. This will ensure the metric provides up-to-date and relevant insights into table usage and load status. Additionally, consider refactoring the complex nested `CASE` statement for improved readability and maintainability, potentially by defining clear thresholds or using a more structured approach for status categorization.",16,47854b57-024a-4188-adec-cb2f68607208
table_usage_status_sdm_count,Anti-Pattern,"The expression `IFNULL(last_queried.last_accessed, null) AS accessed_on` is redundant. `IFNULL(X, NULL)` simply returns `X`. While not critical, it indicates a minor inefficiency in SQL expression construction.","IFNULL(last_queried.last_accessed, null) AS accessed_on","Simplify `IFNULL(last_queried.last_accessed, null)` to `last_queried.last_accessed` as the `IFNULL` function with a `NULL` replacement value is unnecessary.",16,47854b57-024a-4188-adec-cb2f68607208
active_subscriber_count_2025_05_01_consumer_paying_subscriber_by_classification,Hardcoded Logic / Anti-Pattern,"This metric, along with its counterpart for May 5th, 2025, explicitly hardcodes the `report_date`. This practice makes the dashboard static, requiring manual updates for each new reporting period, which is inefficient, prone to errors, and leads to metric duplication. It also limits the dashboard's utility for historical analysis or trend tracking without significant modification. Furthermore, the use of `SAFE.REGEXP_CONTAINS(SAFE_CAST(column AS STRING), 'Value')` for simple equality checks on `combined_customer_type` and `combined_is_paying_flag` is an anti-pattern; direct equality (`=`) would be more efficient and readable if these are exact string matches.","WHERE (report_date = DATE '2025-05-01' AND member_type = 'subscriber' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(combined_customer_type AS STRING), 'Consumer') AND SAFE.REGEXP_CONTAINS(SAFE_CAST(combined_is_paying_flag AS STRING), 'Y'))","Consolidate these two date-specific metrics into a single, parameterized metric. Implement a date parameter or filter in Looker Studio to allow users to dynamically select the `report_date`. For the filtering conditions on `combined_customer_type` and `combined_is_paying_flag`, if these are exact string matches, replace `SAFE.REGEXP_CONTAINS(SAFE_CAST(column AS STRING), 'Value')` with `column = 'Value'` for improved performance and clarity. If the columns are not strings, ensure proper casting or use appropriate comparison operators.",17,76614538-e13f-4fd7-b6f2-f23a1ce65e1b
active_subscriber_count_2025_05_05_consumer_paying_subscriber_by_classification,Hardcoded Logic / Anti-Pattern,"This metric is a near-duplicate of the May 1st metric, differing only by a hardcoded `report_date`. This redundancy indicates a lack of dynamic date filtering or parameterization, leading to increased maintenance overhead and a less flexible dashboard. The inefficient `SAFE.REGEXP_CONTAINS` pattern for simple equality checks is also present here.","WHERE (report_date = DATE '2025-05-05' AND member_type = 'subscriber' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(combined_customer_type AS STRING), 'Consumer') AND SAFE.REGEXP_CONTAINS(SAFE_CAST(combined_is_paying_flag AS STRING), 'Y'))","Refer to the recommendation for 'active_subscriber_count_2025_05_01_consumer_paying_subscriber_by_classification'. Consolidate into a single, parameterized metric to support dynamic date selection and reduce redundancy. Optimize filtering logic by replacing `SAFE.REGEXP_CONTAINS` with direct equality where applicable.",17,76614538-e13f-4fd7-b6f2-f23a1ce65e1b
total_acquisitions_excluding_the_australian,Hardcoded Logic,"The metric uses a hardcoded string literal ('The Australian') within a `STRPOS` function to filter out specific product descriptions. While functional, this approach is less robust and scalable. It relies on exact string matching, which can be brittle if product naming conventions change or if case sensitivity becomes an issue. If similar exclusion metrics are required for other products, this pattern would lead to redundant metric definitions.","WHERE STRPOS(t0.acquired_on_product_description, 'The Australian') <= 0","To improve robustness and maintainability, consider using a case-insensitive comparison (e.g., `LOWER(t0.acquired_on_product_description) NOT LIKE '%the australian%'` or `NOT CONTAINS_SUBSTR(LOWER(t0.acquired_on_product_description), 'the australian')`). For long-term scalability and consolidation, define product attributes (e.g., `is_australian_product` boolean flag) directly in the underlying data model or create a lookup table for product categories/exclusions. This would allow for more flexible filtering via dashboard controls rather than separate hardcoded metrics.",18,7888a780-7777-411b-b07b-398b87d2cfd0
traffic_target_variance_percentage,Hardcoded Logic,"The SQL logic for the 'Traffic Target Variance Percentage' metric contains a hardcoded date range (`2025-07-21` to `2025-07-27`). This prevents the dashboard from dynamically updating for subsequent weeks, rendering it static and requiring manual SQL modifications for each new reporting period. This is a critical anti-pattern for a 'Weekly Update' dashboard, severely impacting its utility and increasing maintenance overhead.","WHERE
    SAFE_CAST(t0.week_starting AS DATE) >= DATE '2025-07-21'
    AND SAFE_CAST(t0.week_starting AS DATE) <= DATE '2025-07-27'","Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls, BigQuery `CURRENT_DATE()` and `DATE_SUB()` functions, or a well-managed date dimension table) to ensure the dashboard automatically reflects the current week's data without manual intervention. This will significantly improve the dashboard's reusability and reduce maintenance burden.",19,3f48ba44-14ba-4a43-b02c-7700d0f49c0b
social_page_views,Hardcoded Logic,"Similar to the other metric, the 'Social Page Views' metric also utilizes a hardcoded date range (`2025-07-14` to `2025-07-20`) within its SQL definition. This makes the metric static and unsuitable for a 'Weekly Update' dashboard, as it will always display data for a specific past week unless manually updated. This design choice undermines the dashboard's purpose.","WHERE
    SAFE_CAST(t0.week_starting AS DATE) >= DATE '2025-07-14'
    AND SAFE_CAST(t0.week_starting AS DATE) <= DATE '2025-07-20'","Implement dynamic date filtering using Looker Studio date range controls or BigQuery functions (e.g., `DATE_TRUNC`, `DATE_SUB`) to allow the metric to automatically update for the relevant reporting period. This will ensure the dashboard remains current and valuable for ongoing analysis.",19,3f48ba44-14ba-4a43-b02c-7700d0f49c0b
total_subscribers_news_latestnews_specific_date,Hardcoded Logic,"All metrics on this dashboard are hardcoded to specific, static date ranges (e.g., 2025-04-14 to 2025-04-20 or 2025-03-30). This contradicts the 'Weekly' nature implied by the dashboard's name, making it a static snapshot rather than a dynamic reporting tool. Each week would require manual modification or creation of new metrics.",WHERE newsletter_send_date >= DATE '2025-04-14' AND newsletter_send_date <= DATE '2025-04-20',"Implement dynamic date range parameters within Looker Studio (e.g., 'Last 7 days', 'Current Week') or use SQL functions like `CURRENT_DATE()` and `DATE_SUB()` to define relative date ranges. This would allow the dashboard to automatically update for the current week without manual intervention.",20,bac3734e-7fa0-4c2e-aee2-5547277d21f3
total_subscribers_news_latestnews_specific_date,Anti-Pattern / Hardcoded Logic,"Metrics are duplicated with slight variations in hardcoded `newsletter_brand` and `newsletter_send_email_name` filters (e.g., 'News' and 'NEWS_LATESTNEWS_GAN-STYLE-PM_01' vs. 'All Brands/Emails'). This leads to repetitive SQL logic and creates multiple, non-reusable metrics where a single parameterized metric could suffice.",AND newsletter_brand IN ('News') AND newsletter_send_email_name IN ('NEWS_LATESTNEWS_GAN-STYLE-PM_01'),"Refactor the dashboard to use Looker Studio filters or parameters for `newsletter_brand` and `newsletter_send_email_name`. This would allow a single, consolidated 'Total Subscribers' metric (and similar for 'Unsubscribes' and 'Sends') to be filtered dynamically by users, significantly improving reusability and reducing maintenance.",20,bac3734e-7fa0-4c2e-aee2-5547277d21f3
total_click_news_breaking_filtered_specific_date,Anti-Pattern / Hardcoded Logic,"The 'Total Clicks' metric employs highly complex and extensive `REGEXP_CONTAINS` clauses for both `newsletter_send_email_name` and `newsletter_subject`. This hardcoded, regex-based filtering is extremely difficult to read, maintain, and prone to errors. It suggests the absence of a proper data classification or lookup table for email types (e.g., test, marketing, internal, valid content emails).","NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name AS STRING), 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT_|MARKETING|Special Offer|EVENT|Not Available|_Suspend|_Failed|_Abandoned|_Lead_Nurture|Rewards_|_Wave|_Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Decommission|Switch|Modify|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM') AND SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name AS STRING), 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape|Delicious |Beauty EDM|Vogue Living Weekly') AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_subject AS STRING), 'NAME_ALIAS')","Create a dedicated lookup table (or add columns to the `newsletter_activity` table) that classifies `newsletter_send_email_name` and `newsletter_subject` into meaningful categories (e.g., `email_type` (production, test, marketing), `is_valid_for_reporting`). This would replace the complex regex with simple, readable `WHERE` clauses (e.g., `WHERE email_type = 'production'`). This improves maintainability, performance, and data governance.",20,bac3734e-7fa0-4c2e-aee2-5547277d21f3
budget_amount_fy2025_week4_news_media_publishing_revenue_expenses,Hardcoded Logic,"This metric is defined with multiple hardcoded filters for specific fiscal year ('FY2025'), fiscal week (4), publication ('News Media Publishing'), and financial categories ('Total Revenue', 'Total Expenses'). This makes the metric highly specific and non-reusable for other periods or business units without creating entirely new metric definitions, leading to potential metric sprawl and maintenance overhead.","WHERE
  t0.gl_hierarchy_code = 'FY2025'
  AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses')
  AND t0.l03_publication_code = 'News Media Publishing'
  AND t0.fy_week_of_year IN (4);","Refactor into a more generic 'Budget Amount' metric that allows for dynamic filtering by fiscal year, week, publication, and financial category, ideally using Looker Studio parameters or dashboard filters. This promotes reusability and reduces the need for numerous specific metric definitions.",21,b1c5901f-a535-42eb-870d-05cc025f7c27
actual_amount_fy2025_week40_revenue_expenses,Hardcoded Logic,"Similar to the budget metric, this actuals metric is hardcoded for 'FY2025', fiscal week 40, and specific financial categories ('Total Revenue', 'Total Expenses'). This limits its reusability and necessitates the creation of new metrics for different periods or categories.","WHERE
  t0.gl_hierarchy_code = 'FY2025'
  AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses')
  AND t0.fy_week_of_year IN (40);","Refactor into a more generic 'Actual Amount' metric that can be dynamically filtered by fiscal year, week, and financial category. This aligns with best practices for scalable dashboard design.",21,b1c5901f-a535-42eb-870d-05cc025f7c27
budget_amount_fy2025_week4_news_media_publishing_revenue_expenses,Anti-Pattern,The complex subquery for `calendar` and `period_control` is duplicated across both 'Budget Amount' and 'Actual Amount' metrics. This redundancy makes the SQL less maintainable; any change to the calendar or period control logic would require updates in multiple places.,"LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number","Encapsulate this common calendar and period control logic into a dedicated, governed view or a common table expression (CTE) that can be referenced by all dependent metrics. This improves modularity and maintainability.",21,b1c5901f-a535-42eb-870d-05cc025f7c27
actual_amount_fy2025_week40_revenue_expenses,Anti-Pattern,The complex subquery for `calendar` and `period_control` is duplicated across both 'Budget Amount' and 'Actual Amount' metrics. This redundancy makes the SQL less maintainable; any change to the calendar or period control logic would require updates in multiple places.,"LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number","Encapsulate this common calendar and period control logic into a dedicated, governed view or a common table expression (CTE) that can be referenced by all dependent metrics. This improves modularity and maintainability.",21,b1c5901f-a535-42eb-870d-05cc025f7c27
fiscal_year_dimension,Data Mismatch,"The 'Fiscal Year' dimension includes a hardcoded filter `t0.fy_week_of_year IN (40)` with a comment indicating it's an 'Example filter from original query'. If this dimension is intended to provide a list of all available fiscal years for filtering, this hardcoded filter restricts its utility and may lead to incomplete data for other dashboard components.","WHERE
  t0.fy_week_of_year IN (40) -- Example filter from original query","Remove the hardcoded `fy_week_of_year` filter from the dimension definition to ensure it returns all relevant fiscal years. If a specific fiscal year list tied to a particular week is needed, consider creating a separate, clearly named dimension for that purpose.",21,b1c5901f-a535-42eb-870d-05cc025f7c27
"Multiple metrics (e.g., total_page_views_charter_hall_2022_2023, unique_articles_viewed_dfat_2024)",Hardcoded Logic,"Multiple metrics hardcode specific client names ('Charter Hall', 'DFAT') directly into their SQL queries. This creates a rigid dashboard structure where each client requires a dedicated metric, hindering scalability and maintainability. If new clients need to be monitored, new metrics or even new dashboards would be required, contradicting the spirit of a consolidated reporting solution.",WHERE SAFE_CAST(t0.Client AS STRING) = 'Charter Hall',Implement Looker Studio parameters for client selection or create a more generalized base metric that allows filtering by client at the dashboard level. Consider a client dimension table if client attributes are needed for filtering/grouping.,22,0f03691d-f6b8-4313-bfd9-a5fb1e6dedab
"All metrics (e.g., total_page_views_charter_hall_2022_2023, total_page_views_all_clients_2024)",Hardcoded Logic,"All metrics hardcode specific date ranges (e.g., '2022-2023', '2024') within their SQL. This design prevents dynamic time-series analysis or selection of arbitrary date periods by users, necessitating the creation of new metrics for each desired time frame. This significantly reduces the dashboard's flexibility and increases maintenance overhead, especially for a report intended for ongoing engagement analysis.","FORMAT_TIMESTAMP('%Y%m%d', t0.visit_timestamp) >= '20220704' AND FORMAT_TIMESTAMP('%Y%m%d', t0.visit_timestamp) <= '20231203'","Utilize Looker Studio's built-in date range controls and parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to allow users to dynamically select time periods, making metrics reusable across any date range.",22,0f03691d-f6b8-4313-bfd9-a5fb1e6dedab
"All metrics (e.g., total_page_views_charter_hall_2022_2023, unique_articles_viewed_dfat_2024)",Anti-Pattern,"Every metric's SQL query includes a `LIMIT 1` clause. While this might be intended to return a single aggregate value, it fundamentally prevents the dashboard from breaking down these metrics by any dimension (e.g., visit hour, client, industry, device type) as explicitly stated in the business descriptions. This makes the metrics unsuitable for detailed analysis and visualization beyond a single total number, severely limiting the dashboard's utility.",LIMIT 1,Remove the `LIMIT 1` clause from all metric SQL. Looker Studio will handle the aggregation and grouping based on the chart configuration and selected dimensions. This will enable the intended 'analysis by' dimensions and allow for richer visualizations.,22,0f03691d-f6b8-4313-bfd9-a5fb1e6dedab
unique_articles_viewed_dfat_excluding_brands_2024,Hardcoded Logic,"The metric for 'Unique Articles Viewed for DFAT (Excluding Specific Brands)' hardcodes a list of brands to exclude directly in the SQL query. If this list of excluded brands changes, the SQL query must be manually updated, which is prone to error and difficult to maintain. The inclusion of `OR t0.brand IS NULL` is a good defensive practice, but the list itself is static.","(SAFE_CAST(t0.brand AS STRING) NOT IN ('newscomau', 'fox sports', 'sky news') OR t0.brand IS NULL)","For dynamic exclusion lists, consider using a Looker Studio parameter that accepts multiple values, or if the list is extensive and stable, manage it in a separate lookup table that can be joined or referenced in the query.",22,0f03691d-f6b8-4313-bfd9-a5fb1e6dedab
video_ad_loaded_gam,Hardcoded Logic,"A significant anti-pattern is present across all seven 'gam' prefixed metrics (e.g., 'Video Ads Loaded', 'Video Starts', 'Video Completes', 'Video Completion Rate', 'Ad Load Success Rate'). Each of these metrics includes an identical, hardcoded `WHERE NOT` clause to exclude specific `ad_unit_level1_name` values. This approach is highly inefficient for maintenance; any change to the list of excluded ad units requires manual modification of seven distinct SQL queries. This increases the likelihood of human error, leads to inconsistent data if not all metrics are updated simultaneously, and obscures the business logic within the SQL itself rather than centralizing it.",WHERE NOT(ad_unit_level1_name = 'NewYorkPost.com' OR ad_unit_level1_name = 'Tubi.TV' OR ad_unit_level1_name = 'www.wsj.com' OR ad_unit_level1_name = 'Talksport.com' OR ad_unit_level1_name = 'news.co.uk'),"To improve maintainability and data governance, centralize the exclusion logic. This can be achieved by: 
1.  **Creating a dedicated lookup table:** Store the list of excluded `ad_unit_level1_name` values in a separate BigQuery table. Metrics can then perform an `ANTI JOIN` or `NOT IN` subquery against this table. 
2.  **Implementing a BigQuery View or UDF:** Encapsulate the exclusion logic within a shared view or user-defined function that all relevant metrics can reference. 
This approach ensures that changes to the exclusion list are made in one place, automatically propagating to all dependent metrics, thereby reducing maintenance effort and ensuring data consistency.",23,3c8903a2-8dab-445a-9965-8cc2dbeceb0b
all_metrics,Hardcoded Logic,"All metrics within the dashboard utilize hardcoded `report_date` values, with each metric referencing a different static date (e.g., '2025-07-14', '2025-05-11', '2025-06-24'). This prevents the dashboard from dynamically displaying current data or trends, making it static and quickly outdated. For a dashboard focused on engagement, dynamic date selection is crucial.",t0c1d0.report_date = DATE '2025-07-14',"Implement a dynamic date parameter (e.g., a Looker Studio date range control or a BigQuery `_PARTITIONTIME` filter) to allow users to select the report date, or configure the dashboard to always show the latest available data. This is fundamental for a dynamic and useful dashboard.",24,63f9fc08-acd1-4d1b-866e-5b2050b5093f
subscriber_count_by_28_day_active_days_DT_consumer,Data Definition Inconsistency,"This metric omits the filter `t0.combined_classification_level_2 != 'Print-only'`, which is present in four out of five other related metrics on the dashboard. This inconsistency means that 'subscribers' for this specific metric might include 'Print-only' subscribers, leading to a different definition of the subscriber base compared to other dashboard components (e.g., 'Total Subscriber Count' or 'Fully Active Subscribers').","WHERE (t0.report_date = DATE '2025-05-11' AND t0.member_type = 'subscriber' AND STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND t0.subscriber_last_28_days_active_days_count != 0 AND STRPOS(t0.combined_masthead, 'DT') > 0)","Align the filtering logic across all related subscriber metrics to ensure a consistent definition of 'subscriber'. If 'Print-only' subscribers should be excluded, add `AND t0.combined_classification_level_2 != 'Print-only'` to this metric's SQL. If they should be included for this specific metric, document the deviation clearly within the dashboard's metadata or descriptions.",24,63f9fc08-acd1-4d1b-866e-5b2050b5093f
"total_subscriber_count_CM_consumer_digital, active_subscribers_last_28_days_CM_consumer_digital",Hardcoded Logic / Scope Inconsistency,"While the dashboard name 'Genome - The Daily Telegraph engagement' suggests a primary focus on 'DT' (Daily Telegraph), two metrics specifically filter for 'CM' masthead data. This hardcoding limits the dashboard's ability to be generalized or extended to other mastheads without modifying the underlying SQL. If the intent is a multi-masthead dashboard, this approach is not scalable.","STRPOS(t0c1d0.combined_masthead, 'CM') > 0","If the dashboard's scope is intended to expand beyond specific mastheads, consider introducing a masthead parameter or filter in Looker Studio to allow dynamic selection. Alternatively, if 'CM' data is a permanent, distinct component, ensure its presence is clearly justified within the 'DT' focused dashboard context to avoid user confusion.",24,63f9fc08-acd1-4d1b-866e-5b2050b5093f
dim_masthead_description,Hardcoded Logic|Anti-Pattern,"This dimension uses a `CASE` statement to map masthead short codes to human-readable descriptions. This hardcodes business logic directly within the metric's SQL, making it difficult to maintain, update, or scale if new mastheads are added or descriptions change. The `LIMIT 10` clause is also concerning for a dimension, as it implies only a sample of mastheads might be returned, potentially leading to incomplete data in the dashboard.","SELECT
  CASE
    WHEN masthead = 'VO' THEN 'Vogue'
    WHEN masthead = 'GQ' THEN 'GQ'
    WHEN masthead = 'BD' THEN 'Body & Soul'
    WHEN masthead = 'KS' THEN 'Kidspot'
    WHEN masthead = 'ES' THEN 'Escape'
    WHEN masthead = 'DL' THEN 'Delicious'
    WHEN masthead = 'BR' THEN 'Australian Best Recipe'
    WHEN masthead = 'TS' THEN 'Taste'
    ELSE 'Others'
  END AS masthead_desc","Replace the `CASE` statement with a join to a dedicated, governed `dim_masthead` lookup table that contains masthead codes and their descriptions. This centralizes the mapping logic. Remove the `LIMIT 10` clause to ensure all masthead descriptions are available for the dimension.",25,8ef11f47-cddf-481d-aad5-5d643a5a6031
dim_brand_group,Hardcoded Logic|Anti-Pattern,"Similar to `dim_masthead_description`, this dimension uses a `CASE` statement to categorize mastheads into broader brand groups. This hardcodes critical business logic, making it prone to inconsistencies if not updated uniformly across all dependent metrics. The absence of an `ELSE` clause means any mastheads not explicitly listed will result in `NULL` for Brand_Group. The `LIMIT 10` clause is also concerning for a dimension.","SELECT
  CASE
    WHEN masthead IN ('TS', 'BR', 'DL') THEN 'Food Brands'
    WHEN masthead IN ('VO', 'GQ') THEN 'Prestige Brands'
    WHEN masthead IN ('BD', 'KS', 'ES') THEN 'Lifestyle Brands'
  END AS Brand_Group",Create a governed `dim_brand_group` lookup table that maps masthead codes to their respective brand groups. All metrics requiring brand grouping should join to this table. Ensure comprehensive coverage for all mastheads or explicitly handle 'Unknown' categories. Remove the `LIMIT 10` clause.,25,8ef11f47-cddf-481d-aad5-5d643a5a6031
measure_daily_user_base,Anti-Pattern|Repeated Complex Logic,"This metric, along with `measure_daily_new_registrations`, `agg_total_user_base_food_brands_as_of_date`, `agg_total_new_registrations_prestige_brands_date_range`, `dim_calendar_date_filtered_by_masthead_ES`, and `dim_masthead_description_filtered_by_food_lifestyle_brands`, contains a highly similar and complex base query structure involving multiple joins (`calendar_dim`, `v_subscription_base`, `v_subscription_movement`) and common filtering conditions. This repetition increases maintenance burden, risk of inconsistencies if changes are needed, and potential for redundant query execution overhead.","FROM
  `ncau-data-newsquery-prd.prstn_finance.calendar_dim` AS a
  JOIN
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base` AS b
  ON a.calendar_date BETWEEN date(b.dw_effective_start_datetime) AND least(date(b.dw_effective_end_datetime), `current_date`(""Australia/Sydney""))
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS c
  ON b.subscription_id_src = c.subscription_id_src
WHERE
  a.calendar_date = `current_date`(""Australia/Sydney"") AND
  b.subscriber_status = 'active' AND c.subscription_movement_count_type = 'acquisition' AND b.masthead IN
  ('VO', 'GQ', 'BD', 'KS', 'ES', 'DL', 'BR', 'TS')","Create a consolidated, governed base view or materialized view (e.g., `v_daily_subscription_snapshot`) that pre-calculates this common dataset. All metrics can then query this single, optimized source, reducing complexity, ensuring consistency, and improving query performance.",25,8ef11f47-cddf-481d-aad5-5d643a5a6031
agg_total_user_base_food_brands_as_of_date,Data Mismatch|Inconsistency,"The business description for this metric specifies 'Food Brands' as Taste, Australian Best Recipe, Delicious. However, the SQL logic for the aggregation includes 'BD' (Body & Soul) in its filter (`t0.masthead IN ('TS', 'BR', 'DL', 'BD')`). This directly contradicts the definition of 'Food Brands' provided in the `dim_brand_group` metric, where 'BD' is categorized as a 'Lifestyle Brand'. This inconsistency will lead to incorrect aggregation results for 'Food Brands'.","WHERE
  (t0.masthead IN ('TS', 'BR', 'DL', 'BD') AND t0.calendar_date = t0.data_as_of_date)","Align the masthead grouping logic across all metrics. If 'BD' should be part of 'Food Brands' for this specific aggregation, then the `dim_brand_group` definition and logic should be updated to reflect this, or a new, clearly defined brand group should be created. Ideally, leverage the proposed `dim_brand_group` lookup table to ensure consistent application of brand definitions.",25,8ef11f47-cddf-481d-aad5-5d643a5a6031
dim_calendar_date_filtered_by_masthead_ES,Hardcoded Logic,"This dimension explicitly filters for a hardcoded date range (`20240101` to `20240107`). This makes the dimension static and severely limits its utility for dynamic date filtering or trend analysis within a dashboard, as it will only ever show data for this specific week.","WHERE
    a.calendar_date BETWEEN PARSE_DATE('%Y%m%d', '20240101') AND PARSE_DATE('%Y%m%d', '20240107')","Remove the hardcoded date filter. Allow the dashboard's date range controls to dynamically filter this dimension. If a specific, limited date range is truly intended for a specific use case, it should be clearly documented and justified, but generally, dimensions should provide a full range of available values.",25,8ef11f47-cddf-481d-aad5-5d643a5a6031
dim_masthead_description_filtered_by_food_lifestyle_brands,Data Mismatch|Inconsistency|Hardcoded Logic,"The business description states this metric filters for 'Food Brands' (Taste, Australian Best Recipe, Delicious) and 'Lifestyle Brands' (Body & Soul, Kidspot, Escape). However, the SQL filter `(t0.masthead = 'TS' OR t0.masthead = 'BR' OR t0.masthead = 'DL' OR t0.masthead = 'BD')` only includes the Food Brands and 'BD' (Body & Soul). It *misses* 'KS' (Kidspot) and 'ES' (Escape) from the Lifestyle Brands, directly contradicting the stated business purpose. Additionally, it uses a hardcoded date range, similar to `dim_calendar_date_filtered_by_masthead_ES`.","WHERE
  (t0.masthead = 'TS' OR t0.masthead = 'BR' OR t0.masthead = 'DL' OR t0.masthead = 'BD')
...
WHERE
    a.calendar_date BETWEEN PARSE_DATE('%Y%m%d', '20240101') AND PARSE_DATE('%Y%m%d', '20240107')","Correct the SQL filter to accurately reflect the business description, ensuring all specified mastheads for 'Food Brands' and 'Lifestyle Brands' are included. Reconcile the definition of 'Food Brands' and 'Lifestyle Brands' across all metrics using a governed lookup table. Remove the hardcoded date filter to allow dynamic date selection.",25,8ef11f47-cddf-481d-aad5-5d643a5a6031
os_records_count_circulation_fiscal_week,Hardcoded Logic,"This metric is hardcoded to a specific load date ('2025-06-04'), fiscal week ('202548'), and source system ('Circulation'). The live data execution summary shows current data available for September 2025 and other source systems (e.g., 'Advertising'). This makes the metric static and unable to reflect recent or varied data load checks without manual SQL modification.","WHERE (t0.dw_prstn_load_datetime >= DATE '2025-06-04' AND t0.dw_prstn_load_datetime < DATETIME_ADD(DATE '2025-06-04', INTERVAL 1 DAY) AND t0.fiscal_week_id IN ('202548') AND t0.source_system_name IN ('Circulation'))","Replace hardcoded dates with dynamic date parameters (e.g., `CURRENT_DATE() - INTERVAL 1 DAY` or Looker Studio date range controls). Implement parameters for `fiscal_week_id` and `source_system_name` to allow users to select relevant periods and systems, making the metric reusable and dynamic.",26,2dfb1b58-42eb-44cb-b550-66469ae7df3c
jde_total_rows_by_table_schema,Hardcoded Logic,"The metric's SQL logic hardcodes the `partition_id` to a specific date ('2025-04-29'). While the grouping by `table_schema` is appropriate, the fixed date means the metric will always show data for that specific day, not the most recent or a user-selected period. The live data indicates recent activity in September 2025.","WHERE (PARSE_DATE('%Y%m%d', SAFE_CAST(t0.partition_id AS STRING)) >= DATE '2025-04-29' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.partition_id AS STRING)) <= DATE '2025-04-29')",Utilize dynamic date parameters in Looker Studio to allow users to select the `partition_id` range. This could involve using `CURRENT_DATE()` functions in the SQL or connecting to a date range control on the dashboard.,26,2dfb1b58-42eb-44cb-b550-66469ae7df3c
os_unique_scenarios_by_source_system,Hardcoded Logic,"Similar to other metrics, this metric hardcodes the `dw_prstn_load_datetime` to '2025-04-29'. This prevents the dashboard from displaying current unique scenario counts for data loads, as the live data shows more recent load dates (September 2025).","WHERE (t0.dw_prstn_load_datetime >= DATE '2025-04-29' AND t0.dw_prstn_load_datetime < DATETIME_ADD(DATE '2025-04-29', INTERVAL 1 DAY))","Implement dynamic date filtering using Looker Studio's built-in date range controls or by passing dynamic date parameters into the SQL query, ensuring the metric reflects the most recent or user-selected load dates.",26,2dfb1b58-42eb-44cb-b550-66469ae7df3c
multiple_metrics,Hardcoded Logic,"Multiple metrics (`distinct_cancellations_content_in_general`, `distinct_cancellations_not_subtype_cancellation`, `total_movements_specific_sold_in_source`, `total_cancellations_by_reason_and_classification`) use fixed, hardcoded date ranges (e.g., `DATE 'YYYY-MM-DD'`) instead of dynamic date parameters or relative date functions. This severely limits the dashboard's flexibility for time-series analysis or current period reporting, requiring manual updates.","SAFE_CAST(t0.movement_datetime AS DATE) >= DATE '2021-10-06'
    AND SAFE_CAST(t0.movement_datetime AS DATE) <= DATE '2025-04-10'",Replace hardcoded dates with Looker Studio date range controls or BigQuery's `CURRENT_DATE()` and `DATE_SUB` functions for relative date filtering. This allows users to dynamically select their desired reporting period.,27,5a9f9224-1cf1-48ec-a970-02bf9884b070
multiple_metrics,Hardcoded Logic,"Several metrics (`distinct_cancellations_content_in_general`, `distinct_cancellations_not_subtype_cancellation`, `total_movements_specific_sold_in_source`, `total_cancellations_by_reason_and_classification`) hardcode specific `sold_in_source_code` values (e.g., 'THINK300', '_STRK001|_HDBK001|_VOL001') and `classification_level_2` values ('Print-only|Bundle') directly within `REGEXP_CONTAINS` clauses. This makes the logic inflexible and difficult to update if these codes change or new ones are introduced.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.sold_in_source_code AS STRING), 'THINK300')",Externalize these specific values into a dedicated lookup table or a Looker Studio parameter/filter. This allows for easier maintenance and dynamic filtering without modifying the underlying SQL.,27,5a9f9224-1cf1-48ec-a970-02bf9884b070
total_cancellations_by_reason_and_classification,Anti-Pattern,"The `reason_description` filter contains an excessively long, hardcoded list of values within an `IN` clause. This is a significant anti-pattern that makes the query difficult to read, maintain, and highly prone to errors if the list of valid reasons changes or expands.","t0.reason_description IN ('system use only non payment', 'Change of subscription or offer type', 'price being deemed expensive', 'content in general', 'passing away', 'Sub Change Inv Overwrite', 'repeated missed deliveries', 'long term medical issues', 'account created in error', 'route stopped', 'moving to a nursing home', 'taking an extended 3months+', 'moving houses unservicable', 'customer service provided ', 'Subscribed to get intro offer', 'moving to a hospital ', 'preferring buy paper at store', 'recent pricerise', 'business closure', 'Financial Hardship')","Create a dedicated lookup table for `reason_description` values, or a governed dimension in Looker Studio, and join to it. This centralizes the definition of valid reasons and improves maintainability.",27,5a9f9224-1cf1-48ec-a970-02bf9884b070
total_active_paying_subscriptions_as_of_date,Data Mismatch,"The SQL uses `CURRENT_DATE()` for `data_as_of_date` but includes a comment 'Placeholder for dynamic date'. This creates ambiguity: is `CURRENT_DATE()` truly dynamic at query execution time in Looker Studio, or is it a placeholder that might resolve to a fixed date upon dashboard creation/refresh, leading to stale data? Without live execution data, this cannot be confirmed.",SAFE_CAST(t0c0d1.data_as_of_date AS DATE) = CURRENT_DATE() -- Placeholder for dynamic date,"Clarify the intended behavior of `CURRENT_DATE()` in the Looker Studio context. If historical 'as-of' reporting is needed, consider using a date parameter in Looker Studio that maps to the `data_as_of_date` column, allowing users to select any historical date.",27,5a9f9224-1cf1-48ec-a970-02bf9884b070
sum_active_subscribers_code_consumer_nonprint_specific_date,Hardcoded Logic,"The metric's SQL logic includes a hardcoded `report_date` of '2025-04-27'. This makes the dashboard static and only relevant for a single, future date, significantly reducing its value as a 'quick look' dashboard for current or historical analysis.",t0.report_date = DATE '2025-04-27',"Replace the hardcoded date with a dynamic date parameter (e.g., `_PARTITIONTIME` or a Looker Studio date control) to enable users to select the desired reporting period, making the dashboard flexible and reusable.",28,a96a5942-b538-4aba-83cb-d4f16db9a59d
sum_active_subscribers_code_consumer_nonprint_specific_date,Anti-Pattern,"The `REGEXP_CONTAINS` function hardcodes multiple variations ('Code|CODE|cs|CS') for identifying 'Code' related mastheads. This approach is brittle; new variations would require manual SQL updates, and it's prone to errors or omissions. It indicates a lack of a standardized lookup for masthead categorization.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.combined_masthead AS STRING), 'Code|CODE|cs|CS')","Establish a governed lookup table for masthead classifications. Join to this lookup table to filter `combined_masthead` based on a standardized 'Code App' identifier, improving maintainability, accuracy, and scalability.",28,a96a5942-b538-4aba-83cb-d4f16db9a59d
sum_active_subscribers_code_consumer_nonprint_specific_date,Hardcoded Logic,"The `STRPOS` function hardcodes 'Consumer' for filtering `combined_customer_type`. While functional, this is a hardcoded value that could be managed more robustly if 'customer_type' is a dimension that might evolve or be used in other contexts.","STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0","If `combined_customer_type` is a categorical dimension, consider using a direct equality check (`t0.combined_customer_type = 'Consumer'`) for clarity. For more complex scenarios or multiple customer types, an `IN` clause or a lookup table would offer better management.",28,a96a5942-b538-4aba-83cb-d4f16db9a59d
conditional_gross_revenue_full,Hardcoded Logic / Anti-Pattern,"The 'Conditional Gross Revenue' metric contains hardcoded lists of `unified_publication_name` values ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'). This approach is inflexible and requires manual updates if new publication names are introduced or existing ones change, leading to potential data omissions and increased maintenance overhead. It indicates a lack of a centralized, governed lookup for these categories.","UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')","Replace hardcoded lists with a reference to a governed lookup table or a configuration table for `unified_publication_name`. This centralizes management, improves data integrity, and allows for dynamic updates without modifying SQL logic.",29,9269e9c6-1ad0-4415-96c3-aca8a710ba01
conditional_gross_revenue_full,Hardcoded Logic / Anti-Pattern / Data Mismatch,"The 'Conditional Gross Revenue' metric uses a fixed timestamp (`TIMESTAMP '2025-06-23...'`) for date calculations, specifically for determining prior year's digital revenue. This hardcoded date makes the metric static and will not automatically update as time progresses, rendering the dashboard inaccurate for future analysis periods without manual intervention. This directly contradicts the 'FY26 (Interim)' nature of the dashboard name, which implies dynamic, current reporting.","DATETIME_ADD(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney'), INTERVAL -365 DAY)","Replace the fixed timestamp with dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`) or dashboard parameters that allow the dashboard to automatically adjust to the current reporting period. This ensures the dashboard remains accurate and relevant over time without manual SQL modifications.",29,9269e9c6-1ad0-4415-96c3-aca8a710ba01
conditional_gross_revenue_full,Hardcoded Logic / Anti-Pattern,"The 'Conditional Gross Revenue' metric includes hardcoded conditions for `sales_segment_l_2_name_sync = 'Digital Other'` and `advertiser_parent != 'DOUBLECLICK'`. Similar to publication names, these hardcoded values introduce rigidity and potential for errors if these categories change or new ones emerge, requiring manual SQL modifications. This also suggests a lack of a governed definition for these business rules.",(t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK'),"Parameterize these values or manage them via a lookup table if they represent business rules that might evolve. This enhances flexibility, reduces maintenance burden, and centralizes business rule definitions.",29,9269e9c6-1ad0-4415-96c3-aca8a710ba01
conditional_gross_revenue_full,Anti-Pattern / Complexity,"The overall SQL logic for 'Conditional Gross Revenue' is excessively complex, involving nested `CASE` statements, multiple `SAFE_CAST` operations, and intricate date logic within a single expression. This complexity significantly hinders readability, debugging, and future modifications, increasing the risk of introducing errors and making it difficult for new developers to understand or maintain.","SELECT SUM(CASE WHEN ((t0.relative_fy_year_offset = 0) AND (UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))) THEN t0.gross_revenue_amount WHEN ((t0.relative_fy_year_offset = 0) AND (SAFE_CAST( (CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney'), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE 0 END) AS conditional_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0","Refactor the complex `CASE` statement into a more modular and readable form. Consider creating a dedicated view or a series of CTEs (Common Table Expressions) to pre-process the data and encapsulate complex business rules, improving maintainability and testability. Explore if some of this logic can be pushed upstream into the data model or defined as separate, simpler metrics that can be combined.",29,9269e9c6-1ad0-4415-96c3-aca8a710ba01
all_metrics,Anti-Pattern / Functional Error,"All provided SQL queries for metrics and dimensions (e.g., `incident_creation_month_all_incidents`, `total_distinct_incidents`) include a `LIMIT 1` clause. This will severely restrict the data returned to Looker Studio, preventing proper aggregation, time-series analysis, or the display of multiple rows/dimensions. This fundamental flaw likely renders the dashboard non-functional for its stated analytical purposes, as it would only ever process a single record.","LIMIT 1 (present in all SQL queries, e.g., `SELECT SAFE_CAST(DATETIME_TRUNC(sys_created_on, MONTH) AS DATE) AS incident_creation_month FROM ... LIMIT 1`)",Remove `LIMIT 1` from all SQL queries unless a specific single-value result is genuinely intended for a particular metric. Ensure the queries return the full dataset required for Looker Studio's aggregations and visualizations to function correctly.,30,a474edd4-1aa9-4609-97ed-5d04f19dba9b
"total_distinct_incidents_by_priority, total_distinct_incidents_user_only_by_priority_and_month, incident_priority_dimension",Hardcoded Logic / Anti-Pattern,"The `CASE` statement for mapping numerical `priority` values (e.g., '4', '3', '2') to user-friendly labels ('P4', 'P3', 'P2', 'P1') is repeated across multiple metrics. This hardcoding can lead to inconsistencies if priority definitions change or if new priority levels are introduced. The `ELSE 'P1'` assumes any non-4,3,2 priority is P1, which might not always be accurate.","CASE WHEN priority = '4' THEN ""P4"" WHEN priority = '3' THEN ""P3"" WHEN priority = '2' THEN ""P2"" ELSE ""P1"" END","Create a dedicated dimension table or a centralized view (e.g., `dim_incident_priority`) in the data model to store and manage incident priority mappings. This centralizes the logic, improves maintainability, and ensures consistency across all metrics using priority.",30,a474edd4-1aa9-4609-97ed-5d04f19dba9b
"total_distinct_incidents_by_category, incident_category_dimension",Hardcoded Logic / Anti-Pattern,"The `CASE` statement for categorizing incidents as 'User' or 'Alerts' based on `lower(caller_id) LIKE ""%alerts%""` is repeated. This hardcoded string matching can be brittle and prone to errors if the 'alerts' string changes or if other system-generated caller IDs emerge. It also assumes a simple binary classification.","CASE WHEN lower(caller_id) LIKE ""%alerts%"" THEN 'Alerts' ELSE 'User' END","Consider creating a `dim_incident_caller_type` lookup table or a more robust classification logic if the `caller_id` field has more complex patterns or if additional categories are anticipated. For simple binary cases, a centralized view or user-defined function (UDF) could encapsulate this logic for reusability.",30,a474edd4-1aa9-4609-97ed-5d04f19dba9b
"incident_creation_month_categorized, incident_subject_category_dimension",Good Practice,"The use of a `LEFT JOIN` with an external lookup table (`ncau-data-newsquery-prd.sdm_snow.incident_category`) for categorizing incidents by subject is a good data modeling practice. It centralizes categorization logic, allows for easy updates to categories without modifying individual metric SQL, and handles unmatched cases gracefully with 'Other'.",LEFT JOIN `ncau-data-newsquery-prd`.sdm_snow.incident_category AS ic ON short_description LIKE ic.incident_subject,"Continue this pattern for other categorical dimensions where applicable (e.g., priority, caller type) to enhance data governance and maintainability.",30,a474edd4-1aa9-4609-97ed-5d04f19dba9b
gross_revenue_previous_fy_ytd_adjusted,Hardcoded Logic,"The SQL logic for the 'Previous FY YTD Gross Revenue (Adjusted)' metric, a high-criticality KPI, contains a hardcoded future date ('2025-05-23'). This makes the Year-To-Date (YTD) comparison static and incorrect as time progresses, as it will always compare against a fixed point in the past relative to that specific date, rather than dynamically adjusting to the current reporting period.","SAFE_CAST(t0.booking_line_created_date AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-05-23 01:19:32.916346+00', 'Australia/Sydney'), INTERVAL -365 DAY)",Replace the hardcoded date with a dynamic reference to the current reporting date or a user-selected date parameter. This typically involves using `CURRENT_DATE()` or a dashboard control parameter to ensure the YTD calculation is always relative to the actual 'today' or selected reporting end date.,31,fed70b12-c274-4cde-9920-592ca4c4dab0
financial_quarter_string_dim,Hardcoded Logic,"The 'Financial Quarter (String)' dimension uses a hardcoded CASE statement to map financial months (1-12) to quarters (Q1-Q4). While functional for a standard calendar year, this is an anti-pattern for financial reporting as fiscal year start dates can vary by organization or change over time. This approach lacks flexibility and requires manual updates if the financial calendar definition changes.","CASE WHEN SAFE_CAST(t0.financial_month AS INT64) IN (1, 2, 3) THEN 'Q1' WHEN SAFE_CAST(t0.financial_month AS INT64) IN (4, 5, 6) THEN 'Q2' WHEN SAFE_CAST(t0.financial_month AS INT64) IN (7, 8, 9) THEN 'Q3' WHEN SAFE_CAST(t0.financial_month AS INT64) IN (10, 11, 12) THEN 'Q4' ELSE NULL END","Implement a dedicated date dimension table that includes pre-calculated financial year, quarter, and month mappings based on the organization's defined fiscal calendar. Alternatively, use a more robust date function or a configuration table that allows for dynamic derivation of financial periods based on a configurable fiscal year start month.",31,fed70b12-c274-4cde-9920-592ca4c4dab0
multiple_metrics,Hardcoded Logic,"A pervasive anti-pattern is observed where multiple metrics are created by hardcoding specific date ranges (April, May, June 2025) and the 'rebranding' value ('mutti') directly into the SQL `WHERE` clauses. This leads to metric proliferation (e.g., 'Total Page Views for Mutti Recipes (May 2025)' vs. 'Total Page Views for Mutti Recipes (June 2025)') and makes the dashboard static, requiring manual updates for new periods or rebranding initiatives. This contradicts the spirit of a high consolidation score.",WHERE t0.Month >= DATE '2025-05-01' AND t0.Month <= DATE '2025-05-31' AND t0.rebranding = 'mutti',"Consolidate these metrics into a single, parameterized metric in Looker Studio. Utilize Looker Studio's built-in date range controls and filters for the 'rebranding' dimension. This would allow users to dynamically select periods and rebranding initiatives, significantly reducing the number of distinct metrics and improving maintainability.",32,abca77ac-e6e3-44ab-8cd9-64f1064d04fd
"sum_avg_time_per_page_view_mutti_may_2025, sum_avg_time_per_page_view_mutti_june_2025, count_avg_time_per_page_view_mutti_june_2025",Metric Definition Ambiguity / Anti-Pattern,"The metric 'Sum of Avg Time per Page View' calculates `SUM(SAFE_DIVIDE(total_time_spent, page_views))`. While the business description clarifies this as 'sum of individual recipe average times', this is an unusual aggregation for an 'average time' metric and can be misleading. Furthermore, for June 2025, there are two distinct metrics derived from this calculation: one using `SUM` and another using `COUNT`. This suggests a potential lack of clarity in the desired 'average time' metric or an incomplete understanding of how to properly aggregate averages. A true overall average would typically be `SUM(total_time_spent) / SUM(page_views)`.","SELECT SUM(SAFE_DIVIDE(SAFE_CAST(t0.total_time_spent AS NUMERIC), SAFE_CAST(t0.page_views AS NUMERIC))) FROM ...
SELECT COUNT(SAFE_DIVIDE(SAFE_CAST(t0.total_time_spent AS NUMERIC), SAFE_CAST(t0.page_views AS NUMERIC))) FROM ...","Review the business requirement for 'average time per page view'. If an overall average is needed, calculate `SUM(total_time_spent) / SUM(page_views)` to avoid summing pre-calculated averages. If the sum of individual averages is truly required, ensure its purpose is clearly documented and consider if the `COUNT` metric is necessary or if it's a step towards a different aggregate. Standardize the definition and calculation of 'average time' across all relevant metrics.",32,abca77ac-e6e3-44ab-8cd9-64f1064d04fd
"c_score_target_sum_current_week_20250721_20250727, c_score_target_sum_fiscal_year_20240701_20250629, c_score_target_sum_specific_week_20250609_20250615, day_target_website_sum_telegraph_fiscal_year_20240701_20250629",Hardcoded Logic,"All metrics within this dashboard utilize hardcoded date literals in their WHERE clauses (e.g., `DATE '2025-07-21'`). For a 'Weekly performance report', this design means the dashboard will become stale immediately after the specified week/fiscal year, requiring manual modification of each metric's SQL definition to reflect the current reporting period. This is a significant anti-pattern for maintainability and scalability.",WHERE t0.week_ending >= DATE '2025-07-21' AND t0.week_ending <= DATE '2025-07-27',"Refactor these metrics to use dynamic date filtering capabilities provided by Looker Studio (e.g., date range controls, parameters) or by leveraging BigQuery's date functions (e.g., `CURRENT_DATE()`, `DATE_SUB`, `EXTRACT(WEEK FROM date)`) in conjunction with a single, parameterized base metric. For fiscal year reporting, consider a date dimension table that includes fiscal period definitions.",33,3a820eee-f69e-403d-a972-29c4529ec582
day_target_website_sum_telegraph_fiscal_year_20240701_20250629,Anti-Pattern,"The metric uses `SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.website AS STRING), 'Telegraph')` for filtering the 'website' field. While `SAFE_CAST` might be necessary if `t0.website` is not a string type, `REGEXP_CONTAINS` is an inefficient and overly complex method for a simple exact string match. A direct equality check (`= 'Telegraph'`) would be more performant and clearer. This also suggests potential data type issues at the source if `website` is not stored as a `STRING`.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.website AS STRING), 'Telegraph')","If `t0.website` is intended to be a string, ensure it's stored as `STRING` in the source table to avoid the need for `SAFE_CAST`. For filtering, replace `REGEXP_CONTAINS` with a direct equality check: `SAFE_CAST(t0.website AS STRING) = 'Telegraph'` (if casting is unavoidable) or simply `t0.website = 'Telegraph'` (if `website` is already a string). For dashboards requiring multiple website targets, consider using a parameter or a lookup table for website names.",33,3a820eee-f69e-403d-a972-29c4529ec582
wealth_related_registrations_aus_global_syn_dow_jones_aug_first_week,Hardcoded Logic,"This metric uses hardcoded date ranges (Aug 4-10, 2025) and specific publication/source filters ('Australian|Global syn', 'Dow Jones') directly within its SQL query. It also hardcodes 'Wealth' categories. This prevents reusability and requires creating a new metric for each time period or filter combination.","WHERE (SubscriptionDateTime >= TIMESTAMP '2025-08-04' AND SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-08-10', INTERVAL 1 DAY) AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(PublicationGroup AS STRING), 'Australian|Global syn') OR ArticleRightsSource = 'Dow Jones') AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(categorytopic_path AS STRING), 'Wealth|wealth') OR SAFE.REGEXP_CONTAINS(SAFE_CAST(ArticleDominantSection1 AS STRING), 'Wealth|wealth')))","Parameterize the date range using Looker Studio date controls. Replace hardcoded publication groups, article rights sources, and wealth categories with a join to a governed lookup table or by using Looker Studio filter controls on the respective fields.",34,9c992f02-f13b-4c32-a400-90135fdff180
wealth_related_registrations_the_australian_jul_last_week,Hardcoded Logic,"Similar to the previous metric, this one hardcodes its date range (Jul 28-Aug 3, 2025), 'Wealth' categories, and a specific website ('The Australian'). This pattern of hardcoding dates and filter values for each metric instance is an anti-pattern for maintainability and scalability.","WHERE (SubscriptionDateTime >= TIMESTAMP '2025-07-28' AND SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-08-03', INTERVAL 1 DAY) AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(categorytopic_path AS STRING), 'Wealth|wealth') OR SAFE.REGEXP_CONTAINS(SAFE_CAST(ArticleDominantSection1 AS STRING), 'Wealth|wealth')) AND Website = 'The Australian')",Parameterize the date range. Replace hardcoded 'Wealth' categories and 'Website' filters with Looker Studio filter controls or a join to a governed lookup table for 'Website' values.,34,9c992f02-f13b-4c32-a400-90135fdff180
ta_wealth_subscription_targets_count_aug_11_17,Hardcoded Logic,"This metric hardcodes the date range (Aug 11-17, 2025) and the 'section_team' ('TA Wealth'). This creates a separate metric for each specific week, hindering dashboard flexibility and increasing maintenance overhead.",WHERE (targetdate >= DATE '2025-08-11' AND targetdate <= DATE '2025-08-17' AND section_team = 'TA Wealth'),"Parameterize the date range using Looker Studio date controls. The 'section_team' filter could be managed via a dashboard filter control, allowing users to select different teams without modifying the underlying metric.",34,9c992f02-f13b-4c32-a400-90135fdff180
ta_wealth_subscription_targets_count_aug_25_31,Hardcoded Logic,"This metric duplicates the hardcoding pattern seen in 'ta_wealth_subscription_targets_count_aug_11_17', differing only in its hardcoded date range (Aug 25-31, 2025). This is a clear anti-pattern for metric definition.",WHERE (targetdate >= DATE '2025-08-25' AND targetdate <= DATE '2025-08-31' AND section_team = 'TA Wealth'),"Consolidate this metric with 'ta_wealth_subscription_targets_count_aug_11_17' into a single, parameterized metric. Use Looker Studio date controls for the date range and a filter control for 'section_team'.",34,9c992f02-f13b-4c32-a400-90135fdff180
total_day_target_by_publication_group,Anti-Pattern,"Both metrics utilize deeply nested subqueries with generic `clmnX_` aliases for simple column selection and date parsing. This pattern, often indicative of auto-generated or poorly optimized SQL, significantly reduces readability, maintainability, and debugging efficiency. The date parsing logic (`PARSE_DATE('%Y%m%d', SAFE_CAST(clmn2_ AS STRING))`) is also unnecessarily complex.","SELECT
  SUM(clmn0_) AS total_day_target
FROM (
  SELECT
    PARSE_DATE('%Y%m%d', clmn3_) AS clmn4_,
    clmn0_,
    clmn1_,
    clmn2_
  FROM (
    SELECT
      SAFE_CAST(clmn2_ AS STRING) AS clmn3_,
      clmn0_,
      clmn1_,
      clmn2_
    FROM (
      SELECT
        t0.day_target_by_publication_group AS clmn0_,
        t0.publication_group AS clmn1_,
        t0.targetdate AS clmn2_
      FROM
        `ncau-data-newsquery-prd.cdm_reference_data.subscription_targets` AS t0
    )
  )
)","Refactor the SQL to simplify the query structure, directly selecting and aliasing columns from the base table. Implement date parsing closer to the source or within a view/semantic layer to improve efficiency and readability. Consider using a more robust data modeling approach to abstract away such complexities.",35,f8b92c6c-021f-47fc-b373-ad37503303c9
record_count_of_targets,Hardcoded Logic,"The `publication_group` filter (`clmn1_ = 'The Australian Business Network'`) is hardcoded within the SQL logic for both metrics. This limits the dashboard's flexibility, making it difficult to reuse the metrics for other publication groups or to analyze trends across different groups without modifying the underlying SQL. This is an anti-pattern for scalable dashboarding.","WHERE
  clmn1_ = 'The Australian Business Network'","Parameterize the `publication_group` filter in Looker Studio, allowing users to select different groups. Alternatively, if the dashboard is strictly for 'The Australian Business Network', consider creating a dedicated view in BigQuery that pre-filters this data, simplifying the dashboard's SQL.",35,f8b92c6c-021f-47fc-b373-ad37503303c9
record_count_of_targets,Data Mismatch,"The `record_count_of_targets` metric is filtered for a specific future date (`DATE '2025-07-15'`). This will almost certainly result in a zero count, rendering the metric uninformative for current or historical analysis. This suggests a potential misconfiguration or a misunderstanding of the metric's intended purpose.",AND clmn4_ = DATE '2025-07-15',"Review the business requirements for this metric. If it's intended to count current or historical records, the date filter should be dynamic (e.g., `CURRENT_DATE()`, `_LAST_DAY_OF_MONTH`) or a date range parameter. If it's genuinely for future targets, verify that the `subscription_targets` table is indeed populated with data for 2025.",35,f8b92c6c-021f-47fc-b373-ad37503303c9
total_dag_runs (and 8 other metrics),Anti-Pattern,"A highly complex and identical subquery, responsible for joining `dag` and `dag_run` tables, applying deduplication logic (`ROW_NUMBER()`) and filtering (`state NOT IN ('running', 'queued')`, `dag_id NOT IN ('airflow_monitoring')`, date range), is duplicated across 9 different metrics (`total_dag_runs`, `total_successful_dag_runs`, `total_failed_dag_runs`, `unique_composer_environments`, `dag_run_count_by_composer_env`, `dag_run_count_by_paused_status`, `total_successful_dag_runs_by_composer_env`, `total_failed_dag_runs_by_composer_env`, and partially `dag_run_count_by_dag_id`). This leads to significant maintenance overhead, potential for inconsistencies if the core logic needs to change, and inefficient query execution as the same complex operations are re-evaluated multiple times.","FROM
  (
    SELECT
      o.nq_composer_env AS composer_env,
      o.dag_id AS dag_id,
      o.is_paused AS paused
    FROM
      `ncau-data-newsquery-prd.sdm_airflow_logs.dag` AS o
      JOIN
      (
        SELECT
          nq_composer_env,
          dag_id,
          MAX(dw_ingest_time) AS dw_ingest_time
        FROM
          `ncau-data-newsquery-prd.sdm_airflow_logs.dag`
        WHERE
          dw_partition_date = DATE_SUB(`CURRENT_DATE`(""Australia/Sydney""), INTERVAL 1 DAY)
        GROUP BY nq_composer_env, dag_id
      ) AS l
      ON o.nq_composer_env = l.nq_composer_env AND o.dag_id = l.dag_id AND o.dw_ingest_time = l.dw_ingest_time
  ) AS d
  JOIN
  (
    SELECT
      nq_composer_env,
      dag_id,
      state,
      COUNT(*) AS execution_count,
      execution_date
    FROM
      (
        SELECT
          *,
          ROW_NUMBER() OVER (PARTITION BY updated_at, data_interval_start, data_interval_end, last_scheduling_decision,
            log_template_id, id, queued_at, execution_date, start_date, end_date, SAFE_CAST(creating_job_id AS STRING),
            external_trigger, conf, dag_id, state, run_id, run_type, dag_hash, nq_composer_env
            ORDER BY SAFE_CAST(dw_ingest_time AS STRING) DESC) AS row_qualifier
        FROM
          `ncau-data-newsquery-prd.sdm_airflow_logs.dag_run`
      )
    WHERE
      row_qualifier = 1 AND state NOT IN (""running"", ""queued"")
    GROUP BY nq_composer_env, dag_id, state, execution_date
  ) AS r
  ON d.dag_id = r.dag_id AND r.nq_composer_env = d.composer_env
WHERE
  EXTRACT(DATE FROM r.execution_date) BETWEEN PARSE_DATE('%Y%m%d', @DS_START_DATE) AND PARSE_DATE('%Y%m%d', @DS_END_DATE)
  AND d.dag_id NOT IN (""airflow_monitoring"")","Consolidate this complex subquery into a dedicated BigQuery view or a common table expression (CTE) that can be referenced by all dependent metrics. This would significantly improve maintainability, reduce query complexity, and potentially enhance performance through better query plan optimization. Consider creating a 'fact_airflow_dag_runs' or similar view that pre-calculates the necessary base data, including `total_dag_runs`, `total_successful_runs`, and `total_failed_runs` at the appropriate grain.",36,df9ff24e-bc0e-41ae-ae42-6b52502b3c25
dag_run_count_by_dag_id,Data Mismatch / Inconsistency,"The `dag_run_count_by_dag_id` metric uses `ORDER BY SAFE_CAST(execution_date AS STRING) DESC` within its `ROW_NUMBER()` deduplication logic, while all other complex metrics (e.g., `total_dag_runs`) use `ORDER BY SAFE_CAST(dw_ingest_time AS STRING) DESC`. Although the business description notes this difference, it represents a potential source of inconsistency in how 'latest' or 'unique' DAG runs are identified across the dashboard, which could lead to discrepancies in reported numbers.","-- From dag_run_count_by_dag_id:
ORDER BY SAFE_CAST(execution_date AS STRING) DESC) AS row_qualifier

-- From other metrics (e.g., total_dag_runs):
ORDER BY SAFE_CAST(dw_ingest_time AS STRING) DESC) AS row_qualifier","Review and standardize the deduplication logic across all metrics derived from `sdm_airflow_logs.dag_run`. If the `dag_run_count_by_dag_id` metric truly requires a different deduplication strategy, ensure this is clearly documented and justified from a business perspective. Ideally, a single, consistent approach to identifying the 'latest' or 'most relevant' DAG run record should be established and applied uniformly, possibly within a consolidated view.",36,df9ff24e-bc0e-41ae-ae42-6b52502b3c25
composer_environment (and other dimension metrics),Anti-Pattern / Potential Data Truncation,"Dimension metrics such as 'Composer Environment', 'DAG ID', 'DAG Paused Status', and 'DAG Run State' use `LIMIT 100` in their `SELECT DISTINCT` queries. While this might be intended for quick previews or to limit data returned for dropdowns, it means the dashboard might not display all available distinct values for these dimensions if there are more than 100. This can lead to incomplete filtering options or misrepresentation of the full data landscape.",SELECT DISTINCT nq_composer_env FROM `ncau-data-newsquery-prd.sdm_airflow_logs.dag_run` LIMIT 100,"Remove `LIMIT 100` from dimension queries unless there's a specific, well-understood performance or display constraint that necessitates it. If performance is an issue, consider optimizing the underlying table or pre-calculating distinct values in a separate lookup table. Ensure users are aware if the displayed dimension values are intentionally truncated.",36,df9ff24e-bc0e-41ae-ae42-6b52502b3c25
event_count_by_dimensions_2025_05_05_to_2025_05_11,Hardcoded Logic,"Multiple 'Events by Dimension' metrics (`event_count_by_dimensions_2025_05_05_to_2025_05_11`, `event_count_by_dimensions_2025_05_12_to_2025_05_18`, `event_count_by_dimensions_2025_02_24_to_2025_03_02`) are defined with hardcoded date ranges in their SQL logic. This creates redundant metrics for what should be a single, dynamically filterable component, significantly impacting dashboard maintainability, scalability, and contradicting the reported high consolidation score. Each new week or period would require a new metric definition.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0c1d1.event_date AS STRING)) >= DATE '2025-05-05' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0c1d1.event_date AS STRING)) <= DATE '2025-05-11'","Consolidate these into a single 'Events by Dimension' metric. Implement dynamic date filtering within Looker Studio (e.g., using a date range control or a parameter) instead of hardcoding dates directly in the SQL. This allows users to select any desired week/period without requiring new metric definitions, greatly improving reusability and reducing technical debt.",37,b7e81310-51c9-4095-a2d9-7b1ad2e25504
rea_news_com_au_traffic_visits,Hardcoded Logic,"This metric's SQL logic hardcodes specific string values ('traffic', 'rea', 'news.com.au') in its WHERE clause. This approach makes the metric rigid, difficult to adapt for other brands or referral types, and prone to breakage if underlying data values change. It also hinders reusability and central governance of these filter criteria.",WHERE SAFE_CAST(t0.data_type AS STRING) = 'traffic' AND SAFE_CAST(t0.rea_rca_brand AS STRING) = 'rea' AND SAFE_CAST(t0.ncau_brand AS STRING) = 'news.com.au',"Externalize filter values into a dedicated lookup table or a data modeling layer (e.g., a BigQuery view or dbt model) that defines these categories. This would allow for a more flexible and maintainable metric definition, potentially enabling a single parameterized metric for various brand/referral combinations.",38,858161fd-9f14-4882-b218-2190b7325229
rca_total_traffic_visits,Hardcoded Logic,"Similar to the 'REA News.com.au Traffic Visits' metric, this metric hardcodes multiple string values ('News Corp Australia - Total', 'traffic', 'rca_web', 'rca_app') in its WHERE clause, including an OR condition. This creates a tightly coupled dependency on specific string values, making it challenging to manage and update.",WHERE SAFE_CAST(t0.ncau_brand AS STRING) = 'News Corp Australia - Total' AND SAFE_CAST(t0.data_type AS STRING) = 'traffic' AND (SAFE_CAST(t0.rea_rca_brand AS STRING) = 'rca_web' OR SAFE_CAST(t0.rea_rca_brand AS STRING) = 'rca_app'),"Define 'RCA' referral types ('rca_web', 'rca_app') as a logical group within the data model (e.g., a derived column or a lookup table). Externalize the 'News Corp Australia - Total' brand filter. This promotes reusability and simplifies maintenance.",38,858161fd-9f14-4882-b218-2190b7325229
transformed_ncau_brand,Hardcoded Logic / Anti-Pattern,"This calculated field uses a hardcoded CASE statement to transform a specific brand name ('News Corp Australia - Total') for display purposes. While functional, if many such display transformations are required or if the mapping changes frequently, this approach becomes a maintenance burden and lacks centralized governance.",CASE WHEN SAFE_CAST(t0.ncau_brand AS STRING) = 'News Corp Australia - Total' THEN 'NCA - Total' ELSE SAFE_CAST(t0.ncau_brand AS STRING) END,"For display-specific transformations, consider implementing a dedicated lookup table for brand aliases or embedding this logic within a data modeling layer (e.g., a BigQuery view) rather than as a Looker Studio calculated field. This centralizes the transformation logic and improves consistency across reports.",38,858161fd-9f14-4882-b218-2190b7325229
data_type,Anti-Pattern,"The SQL logic for this dimension includes `LIMIT 10`. While this might be intended for previewing data in a UI, it is an anti-pattern for a production dimension definition as it does not represent the full set of possible values. This could lead to incomplete data exploration or misleading results if used directly in a report without further aggregation.",SELECT SAFE_CAST(t0.data_type AS STRING) AS data_type FROM `ncau-data-newsquery-prd.asl_rearca.rea_rca_monthly` AS t0 LIMIT 10,Remove `LIMIT 10` from dimension definitions. Dimensions should typically select all distinct values or be defined without arbitrary limits to ensure complete data representation and accurate filtering/grouping capabilities.,38,858161fd-9f14-4882-b218-2190b7325229
ncau_brand,Anti-Pattern,"Similar to 'data_type', this dimension's SQL logic includes `LIMIT 10`, which is inappropriate for a production dimension definition as it restricts the visible data and can lead to incomplete analysis.",SELECT SAFE_CAST(t0.ncau_brand AS STRING) AS ncau_brand FROM `ncau-data-newsquery-prd.asl_rearca.rea_rca_monthly` AS t0 LIMIT 10,Remove `LIMIT 10` from dimension definitions to ensure all relevant brand values are available for analysis.,38,858161fd-9f14-4882-b218-2190b7325229
rea_rca_brand,Anti-Pattern,"This dimension also includes `LIMIT 10` in its SQL, which is an anti-pattern for a comprehensive dimension definition.",SELECT SAFE_CAST(t0.rea_rca_brand AS STRING) AS rea_rca_brand FROM `ncau-data-newsquery-prd.asl_rearca.rea_rca_monthly` AS t0 LIMIT 10,Remove `LIMIT 10` from dimension definitions to ensure all relevant REA/RCA brand/referral types are available for analysis.,38,858161fd-9f14-4882-b218-2190b7325229
all_metrics,Anti-Pattern,"All 8 metrics on this dashboard (Total Cases, Cases by Pillar, Cases Delivered On Time (Count), Cases Delivered On Time (Percentage), Total Booking Cost, Cases by Australian Financial Year, Cases by Status, Cases by User) utilize an identical and complex `RankedCases` CTE. This pattern of repeating the same base query logic across multiple metrics is a significant anti-pattern. It leads to redundant computation, makes maintenance challenging (any change to the base logic requires updating 8 separate queries), and increases the likelihood of inconsistencies if updates are not applied uniformly.","WITH RankedCases AS (SELECT c.*, u.id AS user_id, u.name AS user_name, u.alias AS user_alias, b.id AS booking_id, b.name AS booking_name, b.ad_taker__c, b.booking_system_account_type__c, b.status__c AS booking_status, b.total_cost__c, fc.*, CASE WHEN SAFE_CAST(c.status AS STRING) IN ('Closed', 'Resolved') AND SAFE_CAST(c.due_date__c AS TIMESTAMP) <= SAFE_CAST(c.createddate AS TIMESTAMP) THEN 1 ELSE 0 END AS Delivered_on_time, ROW_NUMBER() OVER (PARTITION BY c.id ORDER BY SAFE_CAST(c.lastmodifieddate AS TIMESTAMP) DESC) AS rn FROM `ncau-data-newsquery-prd.cdm_sfnca_src_views.v_cdm_case` AS c JOIN `ncau-data-newsquery-prd.cdm_sfnca_src_views.v_cdm_booking__c` AS b ON c.booking__c = b.id JOIN `data-marts.admetrics.fiscal_calendar` AS fc ON TIMESTAMP_TRUNC(SAFE_CAST(c.createddate AS TIMESTAMP), DAY) = TIMESTAMP_TRUNC(fc.date, DAY) JOIN `ncau-data-newsquery-prd.cdm_sfnca_src_views.v_cdm_user` AS u ON u.id = c.ownerid WHERE SAFE_CAST(c.createddate AS TIMESTAMP) > TIMESTAMP('2024-07-01 00:00:00'))","Create a consolidated, governed base view or model (e.g., `v_cdm_case_latest_snapshot`) that encapsulates the `RankedCases` logic, including the `rn=1` filter and the `Delivered_on_time` calculation. All metrics should then query this single, optimized view. This improves maintainability, performance (due to BigQuery's caching and optimization capabilities on views), and ensures data consistency across all related metrics.",39,873c6df9-9e76-46fd-ac4d-c35588976095
all_metrics,Hardcoded Logic,"All metrics include a hardcoded date filter `WHERE SAFE_CAST(c.createddate AS TIMESTAMP) > TIMESTAMP('2024-07-01 00:00:00')`. This limits the data to a specific, fixed start date, which will become outdated over time and requires manual updates to extend the reporting window. This reduces the dashboard's flexibility and long-term utility without intervention.",WHERE SAFE_CAST(c.createddate AS TIMESTAMP) > TIMESTAMP('2024-07-01 00:00:00'),"Replace the hardcoded date with a dynamic date range filter in Looker Studio, allowing users to select their desired reporting period. If a fixed rolling window is required (e.g., 'last 12 months'), implement dynamic SQL logic (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`) within the proposed base view/model. For historical analysis, ensure the base view supports a full history and the dashboard applies appropriate filters.",39,873c6df9-9e76-46fd-ac4d-c35588976095
"cases_delivered_on_time_count, cases_delivered_on_time_percentage",Anti-Pattern,"The `Delivered_on_time` flag is calculated directly within the `RankedCases` CTE. While functional, this logic is specific to these metrics and could be more explicitly defined as a derived field in a centralized data model if it's a common business rule or needed by other reports. This is a minor anti-pattern compared to the overall CTE repetition.","CASE WHEN SAFE_CAST(c.status AS STRING) IN ('Closed', 'Resolved') AND SAFE_CAST(c.due_date__c AS TIMESTAMP) <= SAFE_CAST(c.createddate AS TIMESTAMP) THEN 1 ELSE 0 END AS Delivered_on_time","As part of the consolidation effort, ensure that the `Delivered_on_time` flag is a pre-calculated and clearly defined column within the proposed `v_cdm_case_latest_snapshot` base view. This makes the business logic explicit, reusable, and consistent across any future metrics that might depend on it.",39,873c6df9-9e76-46fd-ac4d-c35588976095
total_subscription_target_national_news_network_weekly,Hardcoded Logic,"The SQL query for 'Total Weekly Subscription Target (National News Network)' uses a hardcoded date range (June 16-22, 2025). This makes the metric static and not reflective of a 'Weekly' dashboard's dynamic nature, requiring manual updates for each reporting period.",t0.targetdate >= DATE '2025-06-16' AND t0.targetdate <= DATE '2025-06-22',"Replace hardcoded dates with dynamic date parameters (e.g., `CURRENT_DATE()`, `DATE_TRUNC`) or leverage Looker Studio's built-in date range controls to ensure the metric automatically updates for the current week.",40,f5afdb43-bb70-48be-a049-79cf77f7c6a6
total_c_score_target_by_publication_group_weekly,Hardcoded Logic,"The SQL query for 'Total Weekly C-Score Target by Publication Group' also contains a hardcoded date range (July 7-13, 2025). Similar to other metrics, this prevents the dashboard from being truly 'weekly' without manual intervention.",t0c1d0.week_ending >= DATE '2025-07-07' AND t0c1d0.week_ending <= DATE '2025-07-13',Implement dynamic date filtering using SQL functions or Looker Studio's date range parameters to automatically adjust the reporting period to the current week.,40,f5afdb43-bb70-48be-a049-79cf77f7c6a6
total_subscribers_filtered_daily,Hardcoded Logic,"The 'Total Subscribers (Filtered, Daily)' metric uses a hardcoded date range (July 1, 2024 - July 12, 2025). While a longer range, it still fixes the data window, limiting its utility for ongoing daily analysis.",t0.report_date >= DATE '2024-07-01' AND t0.report_date <= DATE '2025-07-12',"Utilize dynamic date filtering based on `CURRENT_DATE()` or Looker Studio's date range controls to ensure the metric always reflects the desired daily period (e.g., last 30 days, current month).",40,f5afdb43-bb70-48be-a049-79cf77f7c6a6
total_subscribers_filtered_daily,Anti-Pattern,"The use of `STRPOS` for filtering `combined_customer_type` and `combined_masthead` (e.g., 'Consumer', 'AA') can be less efficient and maintainable than direct equality checks (`=`) if these are exact values. If they are partial matches, `STRPOS` is appropriate, but it's worth verifying the intent and data structure.","STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0 AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0","If 'Consumer' and 'AA' represent exact categories, consider changing `STRPOS` to direct equality (`=`) for clarity and potential performance benefits. If they are partial matches, ensure this is the intended behavior. For better governance, consider using a lookup table for `combined_customer_type` and `combined_masthead` to standardize values and simplify filtering logic.",40,f5afdb43-bb70-48be-a049-79cf77f7c6a6
active_daily_subscribers_filtered_daily,Hardcoded Logic,"Similar to other metrics, 'Active Daily Subscribers (Filtered, Daily)' relies on a hardcoded date range (July 1, 2024 - July 12, 2025), which restricts its dynamic reporting capabilities.",t0.report_date >= DATE '2024-07-01' AND t0.report_date <= DATE '2025-07-12',Implement dynamic date filtering using SQL functions or Looker Studio's date range parameters to ensure the metric automatically adjusts to the current reporting period.,40,f5afdb43-bb70-48be-a049-79cf77f7c6a6
active_daily_subscribers_filtered_daily,Anti-Pattern,"The use of `STRPOS` for filtering `combined_customer_type` and `combined_masthead` (e.g., 'Consumer', 'AA') can be less efficient and maintainable than direct equality checks (`=`) if these are exact values. If they are partial matches, `STRPOS` is appropriate, but it's worth verifying the intent and data structure.","STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0 AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0","If 'Consumer' and 'AA' represent exact categories, consider changing `STRPOS` to direct equality (`=`) for clarity and potential performance benefits. If they are partial matches, ensure this is the intended behavior. For better governance, consider using a lookup table for `combined_customer_type` and `combined_masthead` to standardize values and simplify filtering logic.",40,f5afdb43-bb70-48be-a049-79cf77f7c6a6
advertiser_name_filtered_portfolio,Hardcoded Logic|Anti-Pattern,"The 'Advertiser Name (Filtered by Portfolio)' metric uses a hardcoded list of `portfolio_conformed_name_sync` values within its SQL logic. This approach is brittle and not scalable; any changes to the portfolio definitions (e.g., new portfolios, name changes) would require manual modification of the dashboard's metric definition, leading to maintenance overhead and potential data inconsistencies. This directly contradicts principles of robust data governance and reusability.","WHERE t0.portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9')","Replace the hardcoded `IN` clause with a join to a governed lookup table for `portfolio_conformed_name_sync` values. This would centralize portfolio definitions, improve maintainability, and allow for dynamic updates without modifying dashboard metrics. This also aligns with best practices for dimension management.",41,80ca81f3-0671-40ef-a0a9-825a1580ca1b
gross_revenue_current_fy_k,Hardcoded Logic,"The 'Gross Revenue (Current FY, in thousands)' metric uses a hardcoded `relative_fy_year_offset = 0` to identify the current fiscal year. While '0' is a common representation for the current period, this method limits flexibility. To analyze previous fiscal years (e.g., FY-1, FY-2), new, similar metrics with different hardcoded offsets would be required, leading to metric proliferation and reduced reusability for time-series analysis.",CASE WHEN (t0.relative_fy_year_offset = 0),"Consider implementing a more dynamic fiscal period definition, potentially through a dedicated date dimension table or a configuration table that can be joined. This would enable the creation of flexible time-based metrics (e.g., current FY, previous FY, FY-2) using a single base metric and dynamic filtering, improving overall dashboard flexibility and reducing metric redundancy.",41,80ca81f3-0671-40ef-a0a9-825a1580ca1b
"Across multiple metrics (e.g., activeview_viewable_percentage_daily_avg, video_ad_loaded_count)",Hardcoded Logic,"All metrics in the dashboard contain an identical hardcoded `WHERE NOT` clause to exclude specific `ad_unit_level1_name` values. This indicates a lack of centralized data governance for exclusions and creates a significant maintenance burden. Any change to this exclusion list requires updating every single metric's SQL logic, increasing the risk of inconsistencies and errors.",NOT(ad_unit_level1_name = 'NewYorkPost.com' OR ad_unit_level1_name = 'Tubi.TV' OR ad_unit_level1_name = 'www.wsj.com' OR ad_unit_level1_name = 'Talksport.com' OR ad_unit_level1_name = 'news.co.uk'),"Implement a centralized exclusion mechanism. This could involve creating a dedicated lookup table for `ad_unit_level1_name` values to exclude, which can then be joined into the base tables. Alternatively, define this exclusion once at a semantic layer (e.g., LookML view, dbt model) or a pre-filtered BigQuery view, ensuring all dependent metrics inherit the correct filtering logic.",42,eb93c6d9-ab5b-47bb-8acd-3cc0f3978a8b
"Across multiple metrics (e.g., video_ad_loaded_count, video_start_count, video_completion_rate)",Anti-Pattern,"Multiple metrics derive event counts (e.g., `video_ad_loaded`, `Start`, `Complete`, `VAST3%`) by repeatedly using `SUM(IF(action_name = '...', action_count, 0))` within subqueries. While functional, this pattern is extensively duplicated. If the `action_name` values change or new event types are introduced, each affected metric's SQL needs to be individually updated, which is inefficient and prone to errors.","SUM(IF(action_name = 'video_ad_loaded', action_count, 0)) AS video_ad_loaded","Consider pre-pivoting or pre-aggregating `action_count` by `action_name` in a dedicated view or materialized table (e.g., `gam_video_adplay_fct_pivoted`). This would allow metrics to simply `SUM(video_ad_loaded_count)` instead of re-calculating the `IF` statement every time, improving readability, centralizing the definition of these derived counts, and potentially enhancing query performance.",42,eb93c6d9-ab5b-47bb-8acd-3cc0f3978a8b
unique_subscriptions_federal_election_website,Anti-Pattern|Hardcoded Logic,"This metric's SQL uses a 'LIMIT 1' clause, which will prevent it from returning the actual count of unique subscriptions, instead returning at most '1' if any data exists. This renders the metric useless for quantitative analysis. Additionally, the query is hardcoded with a future date range (2025-01-01 to 2025-04-03) and a hardcoded list of specific websites, which is repeated across multiple metrics.","SELECT
    COUNT(DISTINCT t0.SubscriptionID) AS unique_subscriptions
FROM
    `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0
WHERE
    t0.SubscriptionDateTime >= TIMESTAMP '2025-01-01'
    AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-03', INTERVAL 1 DAY)
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')
LIMIT 1;","Remove the 'LIMIT 1' clause. Replace hardcoded future dates with dynamic date parameters (e.g., `CURRENT_DATE()` or dashboard date filters). Externalize the list of websites into a lookup table or a dashboard parameter to improve maintainability and reusability.",43,c4355ac4-14e3-42a0-ae17-f706fa774b3b
unique_subscriptions_federal_election_article_website,Anti-Pattern|Hardcoded Logic,"Similar to the previous metric, this query includes a 'LIMIT 1' clause, which will fundamentally break the aggregation, returning at most '1' instead of the true count of unique subscriptions. It also uses hardcoded future dates (2025-01-01 to 2025-04-11), a hardcoded list of websites (repeated), and a specific hardcoded ArticleID. Note the end date differs from other metrics.","SELECT
    COUNT(DISTINCT t0.SubscriptionID) AS unique_subscriptions
FROM
    `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0
WHERE
    t0.SubscriptionDateTime >= TIMESTAMP '2025-01-01'
    AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-11', INTERVAL 1 DAY)
    AND (
        SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.ArticleID AS STRING), '91cd5d859a97c0b2a3b3da2771bcadf4')
    )
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')
LIMIT 1;",Remove the 'LIMIT 1' clause. Replace hardcoded dates with dynamic date parameters. Externalize the list of websites and the ArticleID into lookup tables or dashboard parameters to enhance flexibility and reduce hardcoding.,43,c4355ac4-14e3-42a0-ae17-f706fa774b3b
subscription_date_federal_election_website,Anti-Pattern|Hardcoded Logic,"This dimension query includes a 'LIMIT 1' clause, meaning it will only ever return a single arbitrary subscription date, making it unusable for time-based analysis or grouping by date. It also uses hardcoded future dates (2025-01-01 to 2025-04-02) and a hardcoded list of websites (repeated). The end date differs from other metrics.","SELECT
    SAFE_CAST(DATETIME_TRUNC(t0.SubscriptionDateTime, SECOND) AS DATE) AS subscription_date
FROM
    `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0
WHERE
    t0.SubscriptionDateTime >= TIMESTAMP '2025-01-01'
    AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-02', INTERVAL 1 DAY)
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')
LIMIT 1;",Remove the 'LIMIT 1' clause. Replace hardcoded dates with dynamic date parameters. Externalize the list of websites into a lookup table or a dashboard parameter.,43,c4355ac4-14e3-42a0-ae17-f706fa774b3b
subscription_date_politics_australian_publication,Anti-Pattern|Hardcoded Logic,"This dimension query also contains a 'LIMIT 1' clause, which will restrict it to returning only a single arbitrary subscription date, making it ineffective for time-series analysis or date-based grouping. It uses hardcoded future dates (2025-01-01 to 2025-04-10) and a hardcoded publication group ('The Australian'). The end date differs from all other metrics.","SELECT
    SAFE_CAST(DATETIME_TRUNC(t0.SubscriptionDateTime, SECOND) AS DATE) AS subscription_date
FROM
    `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0
WHERE
    t0.SubscriptionDateTime >= TIMESTAMP '2025-01-01'
    AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-10', INTERVAL 1 DAY)
    AND t0.PublicationGroup = 'The Australian'
LIMIT 1;",Remove the 'LIMIT 1' clause. Replace hardcoded dates with dynamic date parameters. Consider externalizing 'The Australian' as a parameter or by joining to a publication lookup table.,43,c4355ac4-14e3-42a0-ae17-f706fa774b3b
website_federal_election_website,Anti-Pattern|Hardcoded Logic,"This dimension query includes a 'LIMIT 1' clause, which will only return a single arbitrary website, making it unusable for grouping or filtering by website. It also uses hardcoded future dates (2025-01-01 to 2025-04-03) and a hardcoded list of websites (repeated).","SELECT
    t0.Website
FROM
    `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0
WHERE
    t0.SubscriptionDateTime >= TIMESTAMP '2025-01-01'
    AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-03', INTERVAL 1 DAY)
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')
LIMIT 1;",Remove the 'LIMIT 1' clause. Replace hardcoded dates with dynamic date parameters. Externalize the list of websites into a lookup table or a dashboard parameter.,43,c4355ac4-14e3-42a0-ae17-f706fa774b3b
data_load_datetime_second_grain,Anti-Pattern,"The SQL for the 'Data Load Datetime (Second Grain)' dimension incorrectly includes `LIMIT 1`. This will cause the dimension to only ever return a single arbitrary timestamp, making it unusable for filtering, grouping, or displaying the range of data load times within the dashboard.","SELECT DATETIME_TRUNC(t0.data_load_datetime, SECOND) AS data_load_datetime_second FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 LIMIT 1","Remove `LIMIT 1` from the SQL query to allow all distinct data load datetimes to be returned. If the intent is to show the *latest* data load datetime, the SQL should be adjusted to `SELECT MAX(t0.data_load_datetime)`.",44,c560ed20-040d-4c6a-9c3f-ec8bce27d132
calendar_year_dimension,Anti-Pattern,"The SQL for the 'Calendar Year' dimension incorrectly includes `LIMIT 1`. This will cause the dimension to only ever return a single arbitrary year, making it unusable for filtering or grouping by year in the dashboard.",SELECT t0.calendar_year FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 LIMIT 1,Remove `LIMIT 1` from the SQL query to allow all distinct calendar years to be returned.,44,c560ed20-040d-4c6a-9c3f-ec8bce27d132
calendar_quarter_dimension,Anti-Pattern,"The SQL for the 'Calendar Quarter' dimension incorrectly includes `LIMIT 1`. This will cause the dimension to only ever return a single arbitrary quarter, making it unusable for filtering or grouping by quarter in the dashboard.",SELECT SAFE_CAST(t0.calendar_quarter AS INT64) AS calendar_quarter_int FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 LIMIT 1,Remove `LIMIT 1` from the SQL query to allow all distinct calendar quarters to be returned.,44,c560ed20-040d-4c6a-9c3f-ec8bce27d132
total_net_revenue_billed_booked_digital_print,Hardcoded Logic,"Both 'Total Net Revenue' and 'Total Gross Revenue' metrics share identical hardcoded filtering logic for `revenue_transaction_status`, `revenue_group_subtype`, and `source_publishing_division`. This duplication creates a maintenance burden and a risk of inconsistency if the business rules for 'Xtend Details' revenue change.","WHERE t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)","Centralize the definition of 'Xtend Details' revenue. This could be achieved by creating a dedicated view in the `asl_advertising` dataset that pre-filters the `v_adsales_revenue_client` table, or by defining a common flag/column in the source view (e.g., `is_xtend_revenue_eligible`) that encapsulates these business rules. This would simplify metric definitions and improve maintainability.",44,c560ed20-040d-4c6a-9c3f-ec8bce27d132
total_gross_revenue_billed_booked_digital_print,Hardcoded Logic,"Both 'Total Net Revenue' and 'Total Gross Revenue' metrics share identical hardcoded filtering logic for `revenue_transaction_status`, `revenue_group_subtype`, and `source_publishing_division`. This duplication creates a maintenance burden and a risk of inconsistency if the business rules for 'Xtend Details' revenue change.","WHERE t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)","Centralize the definition of 'Xtend Details' revenue. This could be achieved by creating a dedicated view in the `asl_advertising` dataset that pre-filters the `v_adsales_revenue_client` table, or by defining a common flag/column in the source view (e.g., `is_xtend_revenue_eligible`) that encapsulates these business rules. This would simplify metric definitions and improve maintainability.",44,c560ed20-040d-4c6a-9c3f-ec8bce27d132
total_adjusted_weekly_price_active_paying,Anti-Pattern,"Multiple metrics within this dashboard (Total Adjusted Weekly Price, Unique Subscriptions, Max Subscriber Tenure Days, Max Subscription Tenure Days) redundantly hardcode the identical filtering condition `t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active'` directly into their SQL definitions. This anti-pattern leads to code duplication, increases maintenance overhead, and introduces a risk of inconsistency if the definition of 'active, paying' subscribers needs to be updated in the future.",WHERE t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active',"To improve maintainability and consistency, consider centralizing this common filter. This could be achieved by creating a dedicated BigQuery view (e.g., `subscription_base_active_paying`) that pre-filters the base table, or by defining this common filter at the Looker Studio data source level, allowing all relevant metrics to inherit it without explicit SQL repetition.",45,d3723d73-7698-4fc2-b998-157308d5353f
unique_subscriptions_active_paying,Anti-Pattern,"Multiple metrics within this dashboard (Total Adjusted Weekly Price, Unique Subscriptions, Max Subscriber Tenure Days, Max Subscription Tenure Days) redundantly hardcode the identical filtering condition `t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active'` directly into their SQL definitions. This anti-pattern leads to code duplication, increases maintenance overhead, and introduces a risk of inconsistency if the definition of 'active, paying' subscribers needs to be updated in the future.",WHERE t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active',"To improve maintainability and consistency, consider centralizing this common filter. This could be achieved by creating a dedicated BigQuery view (e.g., `subscription_base_active_paying`) that pre-filters the base table, or by defining this common filter at the Looker Studio data source level, allowing all relevant metrics to inherit it without explicit SQL repetition.",45,d3723d73-7698-4fc2-b998-157308d5353f
max_subscriber_tenure_days_active_paying,Anti-Pattern,"Multiple metrics within this dashboard (Total Adjusted Weekly Price, Unique Subscriptions, Max Subscriber Tenure Days, Max Subscription Tenure Days) redundantly hardcode the identical filtering condition `t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active'` directly into their SQL definitions. This anti-pattern leads to code duplication, increases maintenance overhead, and introduces a risk of inconsistency if the definition of 'active, paying' subscribers needs to be updated in the future.",WHERE t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active',"To improve maintainability and consistency, consider centralizing this common filter. This could be achieved by creating a dedicated BigQuery view (e.g., `subscription_base_active_paying`) that pre-filters the base table, or by defining this common filter at the Looker Studio data source level, allowing all relevant metrics to inherit it without explicit SQL repetition.",45,d3723d73-7698-4fc2-b998-157308d5353f
max_subscription_tenure_days_active_paying,Anti-Pattern,"Multiple metrics within this dashboard (Total Adjusted Weekly Price, Unique Subscriptions, Max Subscriber Tenure Days, Max Subscription Tenure Days) redundantly hardcode the identical filtering condition `t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active'` directly into their SQL definitions. This anti-pattern leads to code duplication, increases maintenance overhead, and introduces a risk of inconsistency if the definition of 'active, paying' subscribers needs to be updated in the future.",WHERE t0.is_paying_flag = 'Y' AND t0.subscription_status_code = 'active',"To improve maintainability and consistency, consider centralizing this common filter. This could be achieved by creating a dedicated BigQuery view (e.g., `subscription_base_active_paying`) that pre-filters the base table, or by defining this common filter at the Looker Studio data source level, allowing all relevant metrics to inherit it without explicit SQL repetition.",45,d3723d73-7698-4fc2-b998-157308d5353f
sum_gross_revenue_booked_billed_filtered_2025,Hardcoded Logic,"This metric uses multiple hardcoded values for filtering, including specific transaction statuses ('Booked', 'Billed'), a specific publishing division ('Medium Rare Content Agency'), an unusual invoice number ('-1'), specific source systems ('PLUTO', 'CPQ', 'ADPT'), and a fixed financial year ('2025'). While some filters might be static business rules, the hardcoded financial year and specific lists of values reduce the metric's reusability and require manual updates for future periods or changes in business definitions.","WHERE revenue_transaction_status IN ('Booked', 'Billed') AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND invoice_number = '-1' AND source_system_code IN ('PLUTO', 'CPQ', 'ADPT') AND financial_year = '2025'","Consider externalizing frequently changing filters (like financial year) as dashboard parameters. For lists of values (e.g., source systems, transaction statuses), evaluate if these should be managed via a lookup table or a governed view to improve maintainability and consistency across metrics. Investigate the meaning of `invoice_number = '-1'`.",46,77c68c35-20ce-477a-b216-0c781d43a8ca
sum_financial_week_booked_billed_filtered_2025,Anti-Pattern,"This metric duplicates the exact same complex filtering logic as 'Sum of Gross Revenue (Booked/Billed, Filtered, FY2025)'. This violates the DRY (Don't Repeat Yourself) principle, making maintenance difficult. Any change to the filtering criteria would need to be applied in multiple places, increasing the risk of inconsistencies. Additionally, the aggregation `SUM(SAFE_CAST(financial_week AS INT64))` is highly unusual and potentially misleading. Summing identifiers like 'financial_week' rarely provides meaningful business insight and could indicate a misunderstanding of data types or intended use.","WHERE revenue_transaction_status IN ('Booked', 'Billed') AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND invoice_number = '-1' AND source_system_code IN ('PLUTO', 'CPQ', 'ADPT') AND financial_year = '2025'
SELECT SUM(SAFE_CAST(financial_week AS INT64))","Consolidate common filtering logic into a shared view or a more abstract data model layer. Immediately investigate the business purpose of summing `financial_week` IDs; if it's for indexing or sorting, a different approach (e.g., `MAX(financial_week)` or using it as a dimension) is likely more appropriate. If it's truly an index, ensure its purpose is clearly documented.",46,77c68c35-20ce-477a-b216-0c781d43a8ca
count_records_finance_os_by_os_level_5_specific_weeks,Hardcoded Logic,"The metric is hardcoded to a very specific, narrow range of fiscal weeks ('202548', '202549', '202550', '202551'). This makes the metric static and not reusable for analyzing other time periods without manual modification. If the dashboard is intended to be dynamic or used for ongoing analysis, this hardcoding limits its utility.","WHERE fiscal_week_id IN ('202548', '202549', '202550', '202551')","Implement dashboard parameters for fiscal week selection or derive the relevant weeks dynamically (e.g., 'last 4 weeks', 'current fiscal quarter') to make the metric more flexible and reusable.",46,77c68c35-20ce-477a-b216-0c781d43a8ca
count_distinct_portfolio_id_advertising_revenue_202601_by_gl_pub_code,Hardcoded Logic,This metric hardcodes both the `dw_publication_id` ('Advertising Revenu') and the `fiscal_week_id` (202601). The hardcoded fiscal week limits the metric's applicability to a single week in FY2026. There also appears to be a potential typo in 'Revenu' which should likely be 'Revenue'.,WHERE dw_publication_id = 'Advertising Revenu' AND fiscal_week_id = 202601,Correct the potential typo in 'Revenu' to 'Revenue'. Parameterize the `fiscal_week_id` to allow for dynamic selection of reporting periods. Consider if `dw_publication_id` should also be a parameter or derived from a lookup if it represents a category that might change or expand.,46,77c68c35-20ce-477a-b216-0c781d43a8ca
latest_data_load_datetime_by_unified_gl_code,Hardcoded Logic,"The metric uses a hardcoded list of `unified_publication_gl_code` values ('9707', '9655', '9658'). If this list represents a dynamic or evolving set of 'key' GL codes, hardcoding them in the SQL makes the metric less maintainable. Any changes to this list would require modifying the SQL directly.","WHERE unified_publication_gl_code IN ('9707', '9655', '9658')","If the list of GL codes is subject to change, consider managing them in a configuration table or a parameter to allow for easier updates without modifying the underlying SQL.",46,77c68c35-20ce-477a-b216-0c781d43a8ca
all_metrics_with_date_filters,Hardcoded Logic,"All metrics within this dashboard utilize hardcoded `dw_partition_date` ranges in their SQL logic. This design makes the dashboard static and specific to the defined periods (e.g., June 2025, July 2025, April 2025). To display data for a new period, each metric's SQL would require manual modification, leading to significant maintenance burden, potential for human error, and a lack of dynamic reporting capabilities.",WHERE SAFE_CAST(t0.dw_partition_date AS DATE) >= DATE 'YYYY-MM-DD' AND SAFE_CAST(t0.dw_partition_date AS DATE) <= DATE 'YYYY-MM-DD' (example from multiple metrics),"Implement dynamic date filtering using Looker Studio's built-in date range controls and parameters. This typically involves removing hardcoded dates from the SQL and allowing the dashboard's date picker to filter the underlying data. For BigQuery, consider leveraging `_PARTITIONTIME` pseudo-column for partition-aware filtering if applicable, or a dedicated date dimension table for more complex date logic.",47,be89856b-4177-42f1-8cb6-50cdde0d516c
unique_visits_by_source_july2025_alias_6ijonqubkd,Anti-Pattern,"The metric `unique_visits_by_source_july2025_alias_6ijonqubkd` is an exact duplicate of `unique_visits_by_source_july2025`. Both metrics have identical SQL logic, business descriptions, and names (except for the auto-generated alias in the ID). This indicates redundant metric definitions, which can lead to confusion, increased maintenance effort (if one is updated and the other is not), and unnecessary query execution.","SELECT SAFE_CAST(t0.SourceCode AS STRING) AS SourceCode, COUNT(DISTINCT SAFE_CAST(t0.visit_id AS STRING)) AS unique_visits FROM `ncau-data-newsquery-prd.prstn_consumer.clickstream_network_module` AS t0 WHERE SAFE_CAST(t0.dw_partition_date AS DATE) >= DATE '2025-07-04' AND SAFE_CAST(t0.dw_partition_date AS DATE) <= DATE '2025-07-10' GROUP BY SourceCode","Consolidate these two identical metrics into a single, canonical definition. If different display names or slight variations are needed for specific visualizations, these can often be managed at the Looker Studio visualization layer without duplicating the underlying metric logic.",47,be89856b-4177-42f1-8cb6-50cdde0d516c
unique_visits_by_device_date_april2025,Hardcoded Logic,"The `unique_visits_by_device_date_april2025` metric includes a hardcoded `IN` clause for `DeviceType` (`'Mobile', 'Tablet', 'Desktop'`). This makes the metric brittle; if new device types are introduced or existing ones are renamed in the source data, the metric will either miss data or require manual updates. It also limits the flexibility of the metric to analyze other device types without modifying the SQL.","AND SAFE_CAST(t0.DeviceType AS STRING) IN ('Mobile', 'Tablet', 'Desktop')","If the intent is to include all device types, remove the `IN` clause. If a specific subset of device types is consistently required, consider managing this list via a lookup table or a governed dimension, rather than hardcoding it directly in the metric SQL. This allows for centralized management and easier updates.",47,be89856b-4177-42f1-8cb6-50cdde0d516c
"table_total_count_adsales, table_success_count_adsales",Hardcoded Logic,"The metrics for 'Adsales' tables rely on a hardcoded list of table names (`'adsales_sundry_revenue'`) within the SQL. This approach lacks flexibility, requiring manual updates whenever the set of monitored tables changes, and makes it difficult to scale the monitoring solution.",WHERE table IN ('adsales_sundry_revenue'),"Replace the hardcoded table list with a dynamic mechanism. Consider creating a configuration table or a BigQuery view that lists all relevant 'adsales' tables, allowing the metric's SQL to join or filter against this centralized source. This promotes reusability and simplifies maintenance.",48,dcaf9349-5068-4b74-8073-0b6c1cb56435
"table_total_count_finance, table_success_count_finance","Hardcoded Logic, Anti-Pattern","The 'Finance' table metrics exhibit extensive hardcoding of table names and dataset references. The SQL contains a long, explicit list of table names in `WHERE` clauses and uses multiple `UNION ALL` statements to combine `INFORMATION_SCHEMA.PARTITIONS` from specific datasets (`prstn_finance_persisted`, `prstn_finance`, `bdm_finance`). This makes the queries extremely brittle, difficult to read, and highly prone to errors or omissions when the finance data landscape evolves.","WHERE table IN ('gl_party_dim', 'gl_business_unit_dim', 'gl_account_dim', 'gl_transaction_fct', ...) 
 UNION ALL(SELECT * FROM (SELECT *, CASE WHEN partition_id = max(partition_id) OVER (PARTITION BY table_name ORDER BY last_modified_time DESC, partition_id DESC) THEN partition_id END AS max_partition_id FROM `ncau-data-newsquery-prd.prstn_finance.INFORMATION_SCHEMA.PARTITIONS` WHERE partition_id NOT IN ('__NULL__')))","Centralize the management of finance tables and datasets. Create a metadata table or a BigQuery view that dynamically identifies all relevant finance tables across the necessary datasets. The metric SQL can then query this consolidated view, significantly reducing complexity and improving maintainability. Explore options for querying `INFORMATION_SCHEMA` across multiple datasets more dynamically if possible.",48,dcaf9349-5068-4b74-8073-0b6c1cb56435
"bq_job_creation_month, bq_distinct_users_by_account_type_month, bq_total_billed_bytes_gb_by_account_type, bq_cost, bq_num_queries, bq_avg_gb_per_query","Hardcoded Logic, Anti-Pattern","All BigQuery log-related metrics are hardcoded to query data only for January 2023 (`_TABLE_SUFFIX BETWEEN '20230101' AND '20230131'`). This renders the dashboard static and prevents it from reflecting current or recent BigQuery activity, significantly limiting its utility for operational monitoring.",WHERE _TABLE_SUFFIX BETWEEN '20230101' AND '20230131',"Implement dynamic date filtering. Utilize Looker Studio's date range controls or BigQuery's `_TABLE_SUFFIX` functions (e.g., `_TABLE_SUFFIX = FORMAT_DATE('%Y%m%d', CURRENT_DATE())` for daily or `_TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)) AND FORMAT_DATE('%Y%m%d', CURRENT_DATE())` for a rolling window) to ensure the data is always current and relevant.",48,dcaf9349-5068-4b74-8073-0b6c1cb56435
"table_total_count_adsales, table_success_count_adsales, table_total_count_finance, table_success_count_finance",Anti-Pattern,"The complex logic for determining `OVERALL_STATUS` (which includes data freshness, partition checks, and row count consistency) within the `WITH select_data AS (...)` CTE is largely duplicated across all 'Total Monitored Tables' and 'Successful Tables' metrics. This duplication creates significant maintenance overhead and increases the risk of inconsistencies if the data quality rules need to be updated.","WITH select_data AS (SELECT table_name AS TABLE, CASE WHEN length(partition_id) = 8 THEN PARSE_DATE(""%Y%m%d"", partition_id) ... END AS OVERALL_STATUS, ...)","Abstract the common data quality logic into a dedicated BigQuery view or a set of views. These views would pre-calculate the `OVERALL_STATUS` and other relevant data quality indicators for all monitored tables. The individual metrics can then simply query these standardized views, promoting reusability, consistency, and easier maintenance.",48,dcaf9349-5068-4b74-8073-0b6c1cb56435
"table_success_count_adsales, table_success_count_finance","Data Mismatch (Logical), Anti-Pattern","The 'Successful Tables' metrics define 'Success' not only by the explicit 'Success' string but also by an empty string (`' '`) in the `OVERALL_STATUS` field. For finance metrics, the `OVERALL_STATUS` is explicitly set to `' '` under certain conditions (e.g., for specific dimension tables if partition or modification date checks fail). This use of an empty string as a 'success' or 'acceptable' status is ambiguous, non-standard, and can mask underlying data quality issues or make the logic difficult to interpret.","COUNT(CASE WHEN (t0.OVERALL_STATUS IN ('Success', ' ')) THEN t0.TABLE ELSE NULL END)","Standardize status values. Each distinct status should have a clear, explicit, and meaningful label (e.g., 'Success', 'Failure', 'Warning', 'Not Applicable'). Avoid using empty strings or other ambiguous values for status indicators to ensure clarity and accurate reporting.",48,dcaf9349-5068-4b74-8073-0b6c1cb56435
all_metrics,Hardcoded Logic / Anti-Pattern,"A pervasive anti-pattern across nearly all metrics is the repetition of identical or very similar `WHERE` clauses with hardcoded values for `financial_year`, `financial_month`, `account_number`, `source_publishing_division`, `revenue_type`, `revenue_group_subtype`, and `rebate_3_amount` conditions. For example, metrics are created for '2025, Oct', '2025', and a specific 'Account 4039072', rather than using dynamic parameters or a more flexible data model. This approach leads to significant code duplication, making the dashboard brittle and difficult to maintain or extend for new time periods, accounts, or business rules.","Example common pattern:
`WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND financial_year = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 LIMIT 1`","Refactor metrics to leverage Looker Studio's parameterization capabilities (e.g., date range controls, dropdowns for year/month/account) to allow users to dynamically filter a single base metric. For common business rules (e.g., `revenue_transaction_status`, `source_publishing_division` exclusion, `revenue_type`/`revenue_group_subtype` inclusions), these should ideally be applied at the data source view level (`v_adsales_revenue_client`) or defined as reusable dimensions/filters within the Looker Studio data model. This will drastically reduce metric count, improve maintainability, and enhance dashboard flexibility. Also, remove the redundant `LIMIT 1` from `SUM` queries.",49,a17622e2-ad43-49cc-b3c5-19c95036fd14
other_bau_always_on_digital_count,Anti-Pattern,"This metric uses an extremely long and hardcoded `NOT IN` list for `sold_in_source_channel` values. This approach is highly unmaintainable, prone to errors (e.g., duplicate entries like 'Facebook' and 'Google - Content Amplification' are present), and makes it difficult to update or extend channel classifications. It strongly suggests the absence of a governed lookup table for channel dimensions.","sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Content Amplification', 'Not Available', 'Twitter - Creative', 'Google - Content Amplification', 'Facebook', 'Landing Page')","Replace the hardcoded `NOT IN` list with a join to a governed dimension table for `sold_in_source_channel`. This would centralize channel definitions, improve maintainability, and ensure consistency across metrics.",50,8187da8b-833b-4d26-b833-4d26-b88c-8fafddf4906a
google_search_subscriptions,Hardcoded Logic,"Multiple campaign-related metrics (e.g., `google_search_subscriptions`, `twitter_subscriptions`, `facebook_subscriptions`, `breaches_subscriptions`, `total_subscriptions`, `google_pmax_subscriptions`) use hardcoded `report_date` ranges (`2025-03-31` to `2025-04-06`). This makes the dashboard static and requires manual SQL updates to reflect current or dynamic reporting periods, severely limiting its utility for ongoing performance monitoring.",AND (report_date >= DATE '2025-03-31' AND report_date <= DATE '2025-04-06'),"Parameterize the date range using Looker Studio's date controls or BigQuery scripting variables. This would allow users to dynamically select reporting periods without modifying the underlying SQL, making the dashboard much more flexible and actionable.",50,8187da8b-833b-4d26-b833-4d26-b88c-8fafddf4906a
other_subscription_movement_count,Hardcoded Logic,"Several metrics derived from `v_subscription_movement` (e.g., `other_subscription_movement_count`, `bau_always_on_digital_subscription_movement`, `facebook_bau_always_on_digital_count`) rely on hardcoded `CASE` statements or `IN` clauses to define specific `sold_in_channel`, `sold_in_source_channel`, or `classification_level_1` values. This leads to repetitive SQL logic across metrics and makes it cumbersome to manage changes to business classifications.","WHEN sold_in_channel IN ('My Account Save', 'General Online', 'My Account Reactivate', 'My Account Modify', 'Other Breach') OR (sold_in_channel = 'Not Available' AND sold_in_source_code NOT LIKE '%THRD%')","Centralize common channel and classification definitions into governed lookup tables or views. Consider creating a base view for `v_subscription_movement` with common filters (`masthead`, `subscription_movement_count_sub_type`, `is_corporate_b2b_flag`, `fy_year`) to reduce repetition and improve consistency.",50,8187da8b-833b-4d26-b833-4d26-b88c-8fafddf4906a
breaches_subscriptions,Data Mismatch,"The use of `SAFE_CAST(breaches AS INT64)` and `SAFE_CAST(subscriptions AS INT64)` for `breaches_subscriptions` and `total_subscriptions` respectively, suggests that the `breaches` and `subscriptions` columns in `campaign_conversion_fct` might not consistently be numeric. This could indicate underlying data quality issues or mixed data types in the source.",SUM(SAFE_CAST(breaches AS INT64)),"Investigate the upstream data pipeline for the `campaign_conversion_fct` table to identify the cause of non-numeric values in `breaches` and `subscriptions`. Implement data validation and cleansing processes to ensure consistent data types, or document the expected non-numeric values and their handling.",50,8187da8b-833b-4d26-b833-4d26-b88c-8fafddf4906a
"cscore_target_by_publication_group_2023_2025_q2, cscore_target_by_publication_group_2023_2025_q1, cscore_target_by_publication_group_2023_2025_q1_early",Hardcoded Logic / Anti-Pattern,"Three separate metrics ('cscore_target_by_publication_group_2023_2025_q2', 'cscore_target_by_publication_group_2023_2025_q1', 'cscore_target_by_publication_group_2023_2025_q1_early') are defined for the same base metric ('total_cscore_target') and table, differing only by hardcoded `week_ending` date ranges. This indicates a lack of dynamic date filtering or parameterization within the dashboard, leading to metric sprawl and maintenance overhead.",WHERE (t0.week_ending >= DATE '2023-07-03' AND t0.week_ending <= DATE '2025-06-29'),"Consolidate these into a single 'Total C-Score Target' metric. Implement date range parameters or filters within Looker Studio to allow users to dynamically select the desired period, eliminating the need for multiple hardcoded metrics.",51,828d35dc-ea9f-4c01-b95f-9b64ae7500f1
"subscription_day_target_advertiser_2023_2025, social_interactions_account_count_advertiser_2025_q2, social_interactions_post_content_count_advertiser_2025_q3",Hardcoded Logic,"Multiple metrics hardcode the `publication_group` or `PublicationGroup` to 'The Advertiser'. This limits the reusability of these metrics for other publication groups and necessitates creating new metrics for each group, leading to redundancy.",t0.publication_group = 'The Advertiser',"Introduce a dashboard-level filter or parameter for 'Publication Group'. Modify the SQL logic of these metrics to reference this parameter, making them dynamic and reusable across different publication groups.",51,828d35dc-ea9f-4c01-b95f-9b64ae7500f1
subscription_day_target_advertiser_2023_2025,Anti-Pattern / Data Type Inefficiency,"The `targetdate` column in the `subscription_targets` table is being parsed from a string to a date using `PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))`. This suggests `targetdate` is not stored as a native date or timestamp type, which can lead to performance overhead and potential data conversion errors.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))","Investigate the `cdm_reference_data.subscription_targets` table schema. If `targetdate` is not a native date type, recommend a data pipeline transformation to store it as `DATE` or `TIMESTAMP` to improve query performance and data integrity.",51,828d35dc-ea9f-4c01-b95f-9b64ae7500f1
"count_encoded_revenue_types_q1, sum_encoded_revenue_types_q1",Hardcoded Logic / Anti-Pattern,"Multiple metrics use hardcoded `CASE` statements to encode `revenue_type` into numerical values (1 for Print, 2 for Digital, 3 for XTEND). This is an anti-pattern for categorization; new revenue types would require manual updates across all affected metrics, and the numerical encoding is arbitrary and not self-describing.",CASE WHEN (t0.revenue_type = 'PRINT') THEN 1 WHEN (t0.revenue_type = 'DIGITAL') THEN 2 WHEN (t0.revenue_type = 'XTEND') THEN 3 ELSE NULL END,"Create a governed lookup table for `revenue_type` to `revenue_type_id` mapping, or define these as named constants/dimensions in a semantic layer. For display, use the original `revenue_type` or a descriptive derived field.",52,e4388523-0bd5-4a21-9f68-b84d2dcd8ef6
ly_gross_revenue_digital_date_filter_q1,Hardcoded Logic / Stale Data Risk,"The metric uses a hardcoded static date (`2025-05-12`) for date comparison, which is then offset by -365 days. This date will become stale over time, leading to incorrect 'Last Year' comparisons as time progresses.","DATETIME_ADD(DATE(TIMESTAMP '2025-05-12 07:35:19.751824+00', 'Australia/Sydney'), INTERVAL -365 DAY)","Replace the hardcoded date with a dynamic date function (e.g., `CURRENT_DATE()` or a dashboard parameter) to ensure the 'Last Year' calculation is always relative to the current reporting period.",52,e4388523-0bd5-4a21-9f68-b84d2dcd8ef6
"ty_gross_revenue_q5, ly_gross_revenue_q5, count_encoded_sales_managers_q5, sum_encoded_sales_managers_q5, adtype_l1_categorized_dimension_q5, adtype_l1_intermediate_categorization_dimension_q5, total_dimension_q5",Anti-Pattern / Hardcoded Logic / Data Quality,"A highly complex and inconsistent `CASE` statement for `sales_segment_gm_name_sync` is repeated across multiple metrics. This statement attempts to categorize/map sales managers, but introduces inconsistent leading spaces (e.g., ' Ian Paterson', '  Natalie Grabbe', '   Kelly Healy', '    Belinda MacPherson', '     Lou Barrett', '      Vacant', '       null'). This indicates either a data quality issue in the source or a very poor attempt at custom ordering/categorization, making the logic fragile and difficult to read/maintain.",CASE WHEN (t0.sales_segment_gm_name_sync = 'Renee Sycamore') THEN 'Renee Sycamore' WHEN (t0.sales_segment_gm_name_sync = 'Ian Paterson') THEN ' Ian Paterson' WHEN (t0.sales_segment_gm_name_sync = 'Natalie Grabbe') THEN '  Natalie Grabbe' WHEN (t0.sales_segment_gm_name_sync = 'Kelly Healy') THEN '   Kelly Healy' WHEN ((t0.sales_segment_gm_name_sync = 'Vacant') AND (t0.sales_segment_l_2_name_sync = 'Cairns')) THEN '   Kelly Healy' WHEN (t0.sales_segment_gm_name_sync = 'Belinda MacPherson') THEN '    Belinda MacPherson' WHEN (t0.sales_segment_gm_name_sync = 'Lou Barrett') THEN '     Lou Barrett' WHEN (t0.sales_segment_gm_name_sync = 'Vacant') THEN '      Vacant' WHEN (t0.sales_segment_gm_name_sync = '') THEN '       null' ELSE NULL END,"Refactor this logic into a dedicated dimension or lookup table in the underlying data model. Ensure consistent naming conventions and remove arbitrary leading spaces. If ordering is required, use a separate ordering field. Investigate the source of the `Vacant` and empty string values for `sales_segment_gm_name_sync`.",52,e4388523-0bd5-4a21-9f68-b84d2dcd8ef6
"unified_publication_name_filtered_by_financial_period_q3, portfolio_group_name_filtered_q4, ty_gross_revenue_q5, ly_gross_revenue_q5, count_encoded_sales_managers_q5, sum_encoded_sales_managers_q5, adtype_l1_categorized_dimension_q5, adtype_l1_intermediate_categorization_dimension_q5, total_dimension_q5",Anti-Pattern / Repeated Complex Logic,"A complex `CONCAT` and `CASE` statement to construct a financial period string (e.g., 'Jul Q1 H1') is repeated verbatim across numerous metrics. This logic should be defined once as a derived field or dimension in the data model, rather than being duplicated in every query.","CONCAT(SAFE_CAST(t0.financial_short_month AS STRING),' ',CONCAT('Q',SAFE_CAST(t0.financial_quarter AS STRING)),' ',CASE WHEN (SAFE_CAST(t0.financial_quarter AS INT64) >= 1 AND SAFE_CAST(t0.financial_quarter AS INT64) <= 2) THEN 'H1' WHEN (SAFE_CAST(t0.financial_quarter AS INT64) >= 3 AND SAFE_CAST(t0.financial_quarter AS INT64) <= 4) THEN 'H2' ELSE SAFE_CAST(t0.financial_quarter AS STRING) END)","Define 'financial_period_string' as a calculated field or dimension directly in the `adsales_performance` data source or a semantic layer view. This promotes reusability, consistency, and simplifies metric definitions.",52,e4388523-0bd5-4a21-9f68-b84d2dcd8ef6
"adtype_l1_categorized_dimension_q5, adtype_l1_intermediate_categorization_dimension_q5",Hardcoded Logic / Anti-Pattern,"These dimensions use nested `CASE` statements to categorize `adtype_l1`. While `adtype_l1_intermediate_categorization_dimension_q5` simplifies to 'Other', `adtype_l1_categorized_dimension_q5` then re-categorizes these with inconsistent leading spaces (e.g., ' VIDEO', '  VIDEO GROWTH'). This indicates a multi-stage, hardcoded categorization process that is brittle and difficult to manage.","WHEN (CASE WHEN (t0.adtype_l1 IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.adtype_l1 ELSE 'Other' END) = 'Video' THEN ' VIDEO'","Implement a single, clear categorization logic for `adtype_l1` either in a lookup table or as a derived field in the data model. Avoid nested `CASE` statements for categorization and remove arbitrary leading spaces. If specific ordering is needed, use a separate ordering field.",52,e4388523-0bd5-4a21-9f68-b84d2dcd8ef6
All metrics,Hardcoded Filters,"Many metrics include hardcoded `WHERE` clauses for `t0.Sales_Group = 'Client'` and specific `sales_segment_gm_name_sync` values (e.g., 'Belinda MacPherson', 'Ian Paterson'). This limits the dashboard's flexibility and requires creating new metrics for each sales group or GM, leading to metric sprawl.",t0.Sales_Group = 'Client' AND t0.sales_segment_gm_name_sync IN ('Belinda MacPherson'),"Utilize dashboard filters or parameters for `Sales_Group` and `sales_segment_gm_name_sync` to allow users to dynamically select these dimensions, reducing the need for duplicate metrics.",52,e4388523-0bd5-4a21-9f68-b84d2dcd8ef6
total_unique_subscribers_by_active_days_bucket,Hardcoded Logic / Anti-Pattern,"This metric, along with 'Sum of Overall Z-Score by Active Days Bucket', uses an identical hardcoded `CASE` statement to define 'active_days_bucket'. This repetition of business logic within multiple SQL queries is an anti-pattern. Any change to the bucketing logic requires modifying each individual metric's SQL, increasing maintenance overhead and risk of inconsistency.",CASE WHEN (SAFE_CAST(active_days AS INT64) >= 10) THEN 'Heavy User (10+ days)' WHEN (SAFE_CAST(active_days AS INT64) >= 5) THEN 'Regular User (5-9 days)' WHEN (SAFE_CAST(active_days AS INT64) >= 2) THEN 'Light User (2-4 days)' ELSE 'Minimal User (1 day)' END AS active_days_bucket,"Define 'active_days_bucket' as a derived column in the underlying data model (e.g., a view or a dbt model) or within a semantic layer (e.g., LookML dimension). Alternatively, if dynamic, consider a lookup table for active day ranges and their corresponding bucket names, joined to the main table.",53,b6409a96-a733-4898-a32b-12372919adb7
sum_z_score_overall_by_active_days_bucket,Hardcoded Logic / Anti-Pattern,This metric duplicates the hardcoded `CASE` statement for 'active_days_bucket' found in 'Total Unique Subscribers by Active Days Bucket'. This reinforces the need for a centralized definition of this business logic.,CASE WHEN (SAFE_CAST(active_days AS INT64) >= 10) THEN 'Heavy User (10+ days)' WHEN (SAFE_CAST(active_days AS INT64) >= 5) THEN 'Regular User (5-9 days)' WHEN (SAFE_CAST(active_days AS INT64) >= 2) THEN 'Light User (2-4 days)' ELSE 'Minimal User (1 day)' END AS active_days_bucket,"As above, centralize the definition of 'active_days_bucket' in the data model or semantic layer to ensure consistency and ease of maintenance across all metrics that rely on this bucketing.",53,b6409a96-a733-4898-a32b-12372919adb7
sum_active_days_by_masthead_stddev,Hardcoded Logic / Anti-Pattern,"The `WHERE` clause hardcodes specific `active_days_stddev_by_masthead` values and `masthead` names. This makes the metric brittle; if these standard deviation values change (which they are likely to do over time) or new mastheads are introduced, the query will become outdated or incomplete without manual intervention. It also limits the reusability and flexibility of the metric.","WHERE SAFE_CAST(active_days_stddev_by_masthead AS FLOAT64) IN (4.777282, 4.836937, 4.983490, 4.814058) AND masthead IN ('HS', 'CM', 'DT', 'AA')","Remove hardcoded values. For `masthead`, leverage dashboard filters or parameters. For `active_days_stddev_by_masthead`, if these are thresholds, they should be dynamic (e.g., derived from a subquery, a configuration table, or a semantic layer parameter) rather than fixed numerical values. This metric's purpose seems to be to sum active days for specific mastheads with specific standard deviations, which is an unusual filtering criterion.",53,b6409a96-a733-4898-a32b-12372919adb7
sum_active_days_stddev_by_masthead,Data Interpretation / Statistical Misuse,"This metric, and 'Sum of Overall Active Days Standard Deviation', sums a column named `active_days_stddev_by_masthead`. If `active_days_stddev_by_masthead` represents the standard deviation of active days *for a given masthead*, then summing this value across all rows for that masthead is statistically incorrect and yields a meaningless result. Standard deviation is an aggregate measure of dispersion, not a value that should be summed across individual records.",SUM(SAFE_CAST(active_days_stddev_by_masthead AS FLOAT64)),"Investigate the source and meaning of the `active_days_stddev_by_masthead` column. If it's a pre-calculated standard deviation for a group (e.g., per masthead), the correct aggregation would likely be to simply select that value (if it's unique per group) or potentially average it if there are multiple entries for the same group (though this is also unusual). Summing it is almost certainly a misapplication of the statistic. Clarify the business question this metric aims to answer.",53,b6409a96-a733-4898-a32b-12372919adb7
sum_active_days_stddev_overall,Data Interpretation / Statistical Misuse,"Similar to 'Sum of Active Days Standard Deviation by Masthead', this metric sums `active_days_stddev_overall`. If `active_days_stddev_overall` is the overall standard deviation, summing it across all records is statistically invalid and produces a non-interpretable number.",SUM(SAFE_CAST(active_days_stddev_overall AS FLOAT64)),"As above, clarify the definition and intended use of `active_days_stddev_overall`. If it's a single overall standard deviation, it should likely be displayed as a single value, not summed across records. If it's a per-record value that *contributes* to an overall standard deviation, then the overall standard deviation should be calculated using `STDDEV()` on the raw `active_days` column, not by summing a pre-calculated `stddev` column.",53,b6409a96-a733-4898-a32b-12372919adb7
all_metrics,Hardcoded Logic,"All metrics within this dashboard utilize hardcoded `SubscriptionDateTime` values (e.g., '2025-07-31', '2025-07-02', '2025-07-01'). This makes the dashboard static and prevents it from functioning as a 'Daily Update' without manual SQL modifications. The inconsistency in hardcoded dates across different metrics (July 31st, July 2nd, July 1st) further indicates a lack of dynamic date handling.","t0.SubscriptionDateTime >= TIMESTAMP '2025-07-31' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-07-31', INTERVAL 1 DAY)","Implement dynamic date filtering using Looker Studio's built-in date range controls or BigQuery's `CURRENT_DATE()` function to ensure the dashboard automatically updates daily. For example, `t0.SubscriptionDateTime >= CURRENT_DATE() AND t0.SubscriptionDateTime < TIMESTAMP_ADD(CURRENT_DATE(), INTERVAL 1 DAY)`.",54,da75444c-ed16-43f1-accc-56326aa8ccb0
total_registrations_by_social_referrer_aus_global_syn_dow_jones,Anti-Pattern,"The `total_registrations_by_social_referrer` metric uses a hardcoded `CASE` statement to categorize `SubscriptionSourceCode` into social referrer categories. This approach is brittle; any new social sources or changes in naming conventions will require direct modification of the SQL logic. The `ELSE t0.SocialReferrer` clause suggests a fallback to another field, indicating potential data quality or standardization challenges.","CASE
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_INS')) THEN 'Instagram'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_BIN')) THEN 'Bing'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_PIN')) THEN 'Pinterest'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_TWT')) THEN 'X / Twitter'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_GSC')) THEN 'Google Showcase'
        ELSE t0.SocialReferrer
    END AS social_referrer_category","Refactor this logic by creating a governed lookup table (e.g., `dim_social_referrer_mapping`) that maps `SubscriptionSourceCode` values to standardized `social_referrer_category` names. This table can be joined to the `t_registration_details_snapshot_summary` table, centralizing business logic and improving maintainability. Investigate the relationship and data quality between `SubscriptionSourceCode` and `SocialReferrer` to ensure consistent categorization.",54,da75444c-ed16-43f1-accc-56326aa8ccb0
"total_registrations_aus_global_syn_dow_jones, total_registrations_by_paywall_breach_code_aus_global_syn_dow_jones, total_registrations_by_social_referrer_aus_global_syn_dow_jones",Anti-Pattern,"The filtering logic `(SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.PublicationGroup AS STRING), 'Australian|Global syn') OR t0.ArticleRightsSource = 'Dow Jones')` is repeated verbatim across three metrics. While consistent, this hardcoded business rule for 'Australian/Global Syn/Dow Jones' publications is not centralized. If the definition of this group changes, all three metrics would require manual updates.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.PublicationGroup AS STRING), 'Australian|Global syn') OR t0.ArticleRightsSource = 'Dow Jones'","Consider defining this common filtering logic in a shared view or a derived field within a data model (e.g., a Looker Studio data source calculated field, or a BigQuery view). This would encapsulate the business rule, making it easier to maintain and ensuring consistency across all dependent metrics.",54,da75444c-ed16-43f1-accc-56326aa8ccb0
All Metrics,Anti-Pattern,"All metrics on this dashboard contain identical, complex Common Table Expressions (CTEs) named `capi_data`, `artie_and_capi`, and `final`. This violates the DRY (Don't Repeat Yourself) principle, leading to redundant code, increased maintenance overhead, and potential for inconsistencies if logic needs to be updated. Any change to the base data preparation logic requires modification across all 8 metrics.","WITH capi_data AS ( SELECT DISTINCT content_id, ... ), artie_and_capi AS ( SELECT art.*, cap.* FROM `ncau-data-newsquery-sit.sdm_hq_uat.nca_analytics` AS art FULL JOIN capi_data AS cap ON art.internal_id = cap.source_ref_parentid WHERE 1 = 1 ), final AS ( SELECT c.*, `IF`(LOWER(event_type) IN ('accepted', 'applied'), c.internal_id, NULL) AS ai_accepted_article, ... )","Create a centralized BigQuery view (e.g., `sdm_hq_uat.ai_content_base_data_view`) that encapsulates the `capi_data`, `artie_and_capi`, and `final` CTE logic. All metrics should then query this single, governed view. This improves maintainability, ensures consistency, and potentially allows for query optimization at the view level.",55,df37a847-0ea1-4c69-a1a6-aeed166fa708
All Metrics,Hardcoded Logic,"The `capi_data` CTE, duplicated across all metrics, contains a large hardcoded `CASE` statement to derive `publication_category` from `ContentSeoOwner`. This approach is inflexible, difficult to maintain (e.g., adding new owners or categories), and prone to errors. It also makes it challenging to understand the full mapping without inspecting the SQL.",CASE ContentSeoOwner WHEN 'kidspot.com.au' THEN 'Lifestyle' WHEN 'news.com.au' THEN 'Newscomau' ... ELSE 'Other' END AS publication_category,"Replace the hardcoded `CASE` statement with a join to a dedicated lookup table (e.g., `dim_publication_category_mapping`) that stores the `ContentSeoOwner` to `publication_category` relationships. This lookup table should be managed centrally and joined within the recommended base data view. This promotes data governance, scalability, and ease of maintenance.",55,df37a847-0ea1-4c69-a1a6-aeed166fa708
All Metrics,Data Integrity / Logic Error,"All metrics include a date filter `date(contentpublisheddate) BETWEEN '2025-07-01' AND `current_date`()` within the `capi_data` CTE. As of the current date, '2025-07-01' is in the future. This filter will cause all queries to return zero or very minimal results, effectively making the dashboard display no meaningful data until July 2025. This is a critical error that prevents the dashboard from functioning as intended.",date(contentpublisheddate) BETWEEN '2025-07-01' AND `current_date`(),"Immediately correct the date filter to reflect the intended historical data range. For example, use `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)` for a rolling window, or a specific historical start date like `'2023-01-01'` if a fixed historical period is desired. This is a high-priority fix to ensure the dashboard displays relevant data.",55,df37a847-0ea1-4c69-a1a6-aeed166fa708
calc_subscription_type_category,Hardcoded Logic|Data Mismatch,"The `subscription_type_category` metric uses a hardcoded CASE statement that incorrectly categorizes 'Digital' delivery medium types as 'Print Subscriptions'. The live `primary_analysis_sql` sample data clearly shows `delivery_medium_type` as 'Digital' but the resulting `subscription_type_category` as 'Print Subscriptions', indicating the `IN` clause is incomplete or inaccurate for existing data values (e.g., 'Digital' without 'Y' or 'N'). This leads to misrepresentation of subscription types.","CASE WHEN (delivery_medium_type IN ('Digital Y', 'Digital N', 'Bundle Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END","Review all distinct values for `delivery_medium_type` in the `v_subscription_base_movement_agg` table. Update the CASE statement to accurately map all known delivery medium types to 'Digital Subscriptions' or 'Print Subscriptions'. For long-term maintainability and to prevent similar issues, consider creating a dedicated lookup table for `delivery_medium_type` to `subscription_type_category` mapping.",56,af85d56a-2b11-489a-a2fa-8c5c2565f456
calc_business_segment_category,Anti-Pattern|Hardcoded Logic,"This metric employs a deeply nested and highly complex CASE statement to categorize business segments. This approach is an anti-pattern for data architecture, making the logic extremely difficult to read, maintain, debug, and extend as new business segments or classification rules emerge. It centralizes complex business rules directly within a metric definition, violating principles of data governance and reusability.","SELECT DISTINCT CASE WHEN (clmn20_ IN ('3rd Party and Others', '3rd Party and Other', 'Bundle 7 Day', 'Bundle 7 day and Other', 'Bundle Only', 'Bundle Weekend', 'Bundle Weekend Only', 'Digital', 'Digital Only', 'Essentials', 'Print 7 Day', 'Print 7 day and Other', 'Print Weekend', 'Print Weekend Only')) THEN 'Core Consumer' WHEN (clmn20_ IN ('Campus', 'Corporate', 'Corporate IP', 'Corporate excluding IP', 'IP Access', 'SMB')) THEN 'B2B' ELSE 'Deep Niche Products' END AS business_segment_category FROM (SELECT CASE WHEN (t0.classification_level_2 = 'B2B') THEN t0.classification_level_1 WHEN (t0.offer_category_group_name = 'Deep Niche Publications') THEN t0.masthead WHEN (t0.dw_billing_system_code = 'WINE') THEN 'Wine Club' WHEN (t0.classification_level_1 = 'Offplatform - Paid') THEN '3rd Party and Other' WHEN (t0.classification_level_1 = 'Consumer') THEN CASE WHEN (t0.delivery_medium_type = 'Essentials') THEN 'Essentials' WHEN (t0.delivery_medium_type = 'Digital') THEN 'Digital' ELSE CONCAT(SAFE_CAST(t0.delivery_medium_type AS STRING),' ',SAFE_CAST(t0.delivery_schedule_group AS STRING)) END WHEN (t0.classification_level_1 = 'Education') THEN t0.classification_level_1 WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' WHEN (t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP' WHEN (t0.classification_level_2 = 'Free Staff') THEN 'Staff' WHEN (t0.classification_level_2 = 'IP Access') THEN 'Corporate IP' WHEN (t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education' ELSE NULL END AS clmn20_ FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base_movement_agg` AS t0 WHERE t0.local_publication_name = 'KTVSport') LIMIT 100;","Refactor this complex logic by creating a dedicated, governed lookup table for business segment classification. This table should contain the various classification levels, offer categories, billing system codes, and delivery medium types, along with their corresponding 'Business Segment Category'. The metric can then simply join to this lookup table, centralizing the business logic, improving readability, maintainability, and query performance.",56,af85d56a-2b11-489a-a2fa-8c5c2565f456
publication_category_dimension,Hardcoded Logic|Anti-Pattern,"The 'Publication Category (DPE/DE)' dimension is defined using a large, hardcoded CASE statement. This exact same logic is duplicated in the SQL for 'Total Unique Visitors' and 'Total Page Views' metrics. This repetition makes updates cumbersome, increases the risk of inconsistencies if the lists change, and violates the DRY (Don't Repeat Yourself) principle.","CASE WHEN (t0.publication IN ('Herald Sun', 'Courier Mail', 'The Advertiser', 'Daily Telegraph', 'The Australian', 'The Mercury', 'Geelong Advertiser', 'The Chronicle', 'NT News', 'Townsville Bulletin', 'Gold Coast Bulletin', 'Cairns Post', 'The Weekly Times', 'Wentworth Courier', 'North Shore Times', 'Mosman Daily', 'Mackay Daily Mercury DPE', 'Sunshine Coast Daily DPE')) THEN 'DPE' WHEN (t0.publication IN ('The Morning Bulletin (Rockhampton)', 'Daily Mercury (Mackay)', 'Fraser Coast Chronicle', 'NewsMail (Bundaberg)', 'Queensland Times (Ipswich)', 'Sunshine Coast Daily', 'The Observer (Gladstone)', 'The Gympie Times', 'The Daily Examiner (Grafton)', 'Northern Star (Lismore)', 'Warwick Daily News', 'Coffs Coast Advocate', 'Whitsunday Times', 'South Burnett Times', 'Noosa News', 'Tweed Daily News')) THEN 'DE' ELSE NULL END","Implement a dedicated lookup table in the data warehouse (e.g., `dim_publication_category`) that maps `publication` to `publication_category`. This table should be joined to the `dpe_monthly_traffic` table or the categorization should be pre-calculated as a derived column in the source table. This centralizes the logic, improves maintainability, and ensures consistency across all metrics.",57,362cc5e9-d421-48f2-bdf3-042b976176aa
publication_order_id_dimension,Hardcoded Logic|Data Mismatch|Anti-Pattern,"The 'Publication Order ID' dimension relies on an extremely long and complex hardcoded CASE statement to assign numerical order. This approach is highly unmaintainable. Furthermore, there are potential data integrity issues: some publications (e.g., 'Sunshine Coast Daily') appear with different suffixes and distinct IDs, while other distinct publications (e.g., 'Herald Sun' and 'The Morning Bulletin (Rockhampton)') are assigned the *same* order ID (1), suggesting a non-global or conflicting ordering scheme that needs clarification.",CASE WHEN (t0.publication = 'Herald Sun') THEN 1 WHEN (t0.publication = 'Courier Mail') THEN 2 ... WHEN (t0.publication = 'The Morning Bulletin (Rockhampton)') THEN 1 ... ELSE NULL END,"Create a dedicated lookup table (e.g., `dim_publication_order`) in the data warehouse to manage publication ordering. This table should clearly define the unique publication identifiers and their corresponding order IDs. Review the business logic for ordering, especially for publications with similar names or conflicting order assignments, to ensure data consistency and prevent misinterpretation.",57,362cc5e9-d421-48f2-bdf3-042b976176aa
source_type_dimension,Hardcoded Logic,"The 'Source Type (Web/App)' dimension uses a hardcoded CASE statement to categorize source codes. While currently simple, this pattern can become problematic if the number of source codes or categorization rules expands, leading to increased maintenance overhead.",CASE WHEN (t0.source_code = 'Adobe WEB') THEN 'web' WHEN (t0.source_code = 'Adobe APP') THEN 'app' ELSE NULL END,"Consider creating a small lookup table (e.g., `dim_source_type`) for `source_code` to `source_type` mapping. Alternatively, if the source codes are stable and limited, this can be managed as a derived column in the underlying data model. This provides a more scalable and maintainable solution for future changes.",57,362cc5e9-d421-48f2-bdf3-042b976176aa
All Metrics,Anti-Pattern (Critical Data Accuracy Issue),"Every single SQL query for every metric on this dashboard includes a `LIMIT 1` clause. This is a critical anti-pattern for aggregation queries (e.g., `SUM`), as it will cause the query to return the sum of only the *first row* that satisfies the `WHERE` clause, not the sum of all relevant rows. This will lead to severely understated and incorrect metric values across the entire dashboard, making the data unreliable.",SELECT SUM(...) FROM `...` WHERE ... LIMIT 1,Remove `LIMIT 1` from all aggregation queries. This is a fundamental and urgent fix required for the dashboard to display accurate data.,58,cba3081d-40b7-4d64-a9a2-a3316b192b8e
"subscriptions_facebook_conversion, subscriptions_google_search_conversion, subscriptions_google_pmax_conversion, subscriptions_microsoft_conversion, subscriptions_reddit_conversion, subscriptions_twitter_conversion, subscriptions_meta_performance, subscriptions_linkedin_performance, subscriptions_tradedesk_performance, subscriptions_reddit_performance, subscriptions_google_search_performance, subscriptions_microsoft_bing_performance, subscriptions_google_pmax_performance",Hardcoded Logic / Anti-Pattern (Channel Attribution),"Channel attribution is implemented using multiple `CASE WHEN LIKE '%ChannelName%' THEN ... ELSE 0 END` statements within the `SUM` function. This pattern is repeated across many metrics and relies on string matching on `site`, `source_system_name`, or `campaign_type` fields. This approach is prone to errors (e.g., typos, partial matches), difficult to maintain (new channels require SQL changes), and inefficient. It also makes it hard to get a comprehensive and consistent list of all channels being tracked.","SUM(CASE WHEN site LIKE '%Facebook%' THEN subscriptions ELSE 0 END)
SUM(CASE WHEN source_system_name LIKE '%LinkedIn%' THEN subscription_count ELSE 0 END)
SUM(CASE WHEN campaign_type LIKE '%SEARCH%' THEN subscription_count ELSE 0 END)","Create a governed `dim_channel` lookup table that maps raw `site`, `source_system_name`, or `campaign_type` values to standardized channel names. Join this dimension table to the fact tables (`campaign_conversion_fct`, `campaign_performance_fct`) and filter/group by the standardized channel. This improves data quality, consistency, and maintainability.",58,cba3081d-40b7-4d64-a9a2-a3316b192b8e
All Metrics,Hardcoded Logic (Campaign/Masthead Filtering),"Campaign and masthead filtering (`account_name LIKE '%Weekly Times%'`, `masthead_code IN ('WT')`, `campaign_name LIKE 'AOD%'`) are hardcoded directly into the `WHERE` clauses of all queries. This makes the dashboard inflexible for analyzing other campaigns or mastheads and requires manual SQL changes for any modifications to the target audience or campaign type.","WHERE account_name LIKE '%Weekly Times%'
WHERE masthead_code IN ('WT') AND campaign_name LIKE 'AOD%'","Introduce dashboard-level parameters or filters for `account_name`, `masthead_code`, and `campaign_name` to allow users to dynamically select these values. Alternatively, if these are fixed for this specific dashboard, consider creating a dedicated view or pre-aggregated table for 'Weekly Times AOD' data to simplify the queries and centralize the filtering logic.",58,cba3081d-40b7-4d64-a9a2-a3316b192b8e
"subscriptions_last_7_days, cost_last_7_days",Hardcoded Logic (Date Filtering),"The 'Last 7 Days' logic is hardcoded using `DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= 7`. While functional, this pattern is repeated and relies on `CURRENT_DATE()`, which might not always align with the desired reporting period if data freshness varies or if historical 'last 7 days' views are needed.","SUM(CASE WHEN DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= 7 THEN subscription_count ELSE 0 END)","Leverage Looker Studio's built-in date range controls for dynamic date filtering. If the logic must be embedded, ensure `CURRENT_DATE()` is appropriate for the data's time zone. For more complex or reusable date logic, consider a date dimension table with flags for common periods (e.g., `is_last_7_days`) for performance and consistency.",58,cba3081d-40b7-4d64-a9a2-a3316b192b8e
all_metrics,Hardcoded Logic,"All metrics within this dashboard utilize a hardcoded `SubscriptionDateTime` range (January 1-7, 2024). This makes the dashboard static and unable to display current or dynamic data without manual intervention, severely limiting its utility for ongoing business monitoring.","(t0.SubscriptionDateTime >= TIMESTAMP '2024-01-01' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2024-01-07', INTERVAL 1 DAY))","Implement dynamic date filtering. This can be achieved by using Looker Studio's built-in date range controls, or by modifying the SQL to use relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) in BigQuery to always show data for the last N days/weeks/months, or by passing date parameters from the dashboard.",59,c17f4598-1eb7-4947-8cbe-c7e09f9a9143
all_metrics,Anti-Pattern,"The filtering logic involving `PublicationGroup`, `ArticleRightsSource`, `categorytopic_path`, and `ArticleDominantSection1` is extensively repeated across all four metrics. While consistent, this duplication increases maintenance overhead and the risk of inconsistencies if the business rules for 'Health' or 'Wellness' content definitions change. The use of `REGEXP_CONTAINS` for multiple values, while functional, can become less efficient and harder to manage as the list of values grows.","(SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.PublicationGroup AS STRING), 'Australian|Global syn') OR t0.ArticleRightsSource = 'Dow Jones') AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'Health|health') OR t0.ArticleDominantSection1 = 'health')","Consider creating a common BigQuery view or a CTE (Common Table Expression) that encapsulates these shared filtering conditions. This would centralize the logic, improve maintainability, and potentially optimize query performance. For `REGEXP_CONTAINS` patterns, if the list of values is fixed and grows, consider a lookup table or an array of values for more explicit and potentially performant filtering.",59,c17f4598-1eb7-4947-8cbe-c7e09f9a9143
all_metrics_affected_by_common_where_clause,Hardcoded Logic|Anti-Pattern,"All metrics on this dashboard share identical, complex `WHERE` clauses that use `CASE` statements to categorize data based on `delivery_medium_type`, `subscriber_has_email_flag`, `gl_publication_code`, `masthead_code`, `dw_billing_system_code`, `table_union_source`, and `rate_plan_group_name`. This logic is repeated verbatim across every metric, making the dashboard highly brittle, difficult to maintain, and prone to inconsistencies if business rules for these categorizations change. This is a strong indicator that these categorizations should be defined once as derived dimensions in the underlying data model or as a separate lookup table.","WHERE (CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END) = 'Digital Recognition' AND (CASE WHEN (t0.gl_publication_code = '101' OR t0.masthead_code = 'TA' OR t0.gl_publication_code = '100') THEN 'The Australian' WHEN (t0.gl_publication_code IN ('402', '401', '114') OR t0.masthead_code IN ('CM', 'DT', 'AA')) THEN 'Metros' WHEN (t0.gl_publication_code IN ('460', '475', '851', '5253', '961', '111', '307', '9002', '303', '850', '685', '450', '500', '302', '351', '8821', '962', '490', '350', '560') OR t0.masthead_code IN ('CP', 'GC', 'TC', 'WT', 'HS', 'GA', 'TM', 'TB', 'NT', 'AP', 'SC', 'BG', 'TS', 'NW', 'PU', 'RN', 'CS')) THEN 'Regionals' WHEN (t0.gl_publication_code = '305') THEN 'Others' WHEN (t0.gl_publication_code IN ('963', '8822', '116', '9504', '9653', '103', '9003', '9000', '9603', '9558', '9556', '9623', '9600', '9514', '9001') OR t0.masthead_code IN ('AP', 'NT', 'SC', 'CM', 'DT', 'BG', 'TA', 'TS', 'NW', 'PU', 'TM', 'TB', 'CP', 'RN', 'CS', 'GC', 'TC', 'WT', 'HS', 'GA')) THEN 'Deep Niche Publications' ELSE 'Discontinued' END) != 'Discontinued' AND (CASE WHEN (t0.dw_billing_system_code IN ('APLP', 'APLS', 'GPLA', 'SWG')) THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Apple Podcasts') THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Apple Store') THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Google Play') THEN true WHEN (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name = 'Subscribe with Google (SWG)') THEN true ELSE false END) = true","Refactor the underlying `digital_subscriptions` table or create a view to pre-calculate these derived dimensions (e.g., `recognition_type`, `publication_category`, `billing_system_group`). Alternatively, define these as calculated fields at the data source level in Looker Studio, or ideally, create a governed lookup table in BigQuery and join to it.",60,d05b3d29-4437-4ee5-987a-e0109eb9590e
budget_opening_base_current_week,Hardcoded Logic,"The metric `Budget Opening Base (Current Week)` and several others (e.g., `Budget Earned Amount (Current Week)`, `Total Cancellation (Current Week, bmasnap_move source)`) hardcode the fiscal year (2025) and fiscal week (39) directly in their SQL logic. This makes the dashboard static and requires manual updates for each new reporting period, leading to high maintenance and potential for outdated data.",SUM(CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = 39) THEN t0.BudgetOpeningBase ELSE 0 END),"Implement dynamic date filtering using Looker Studio's date range controls or parameters. If the fiscal calendar is complex, consider creating a dedicated fiscal calendar table and joining to it, allowing for dynamic 'current week' or 'current year' calculations based on the report execution date.",60,d05b3d29-4437-4ee5-987a-e0109eb9590e
earned_amount_historical_current_year,Hardcoded Logic|Anti-Pattern,"The `Earned Amount (Historical/Current Year)` metric uses a hardcoded `CASE` statement to switch between `NFEarnedAmount` and `EarnedAmount` based on a specific fiscal year (2024/2025). This logic will become outdated annually and requires manual modification, which is an anti-pattern for maintainable dashboards.",SUM(CASE WHEN (t0.fy_year <= 2024) THEN t0.NFEarnedAmount WHEN (t0.fy_year > 2024) THEN t0.EarnedAmount ELSE NULL END),"Review the data model to understand why two different columns are used for earned amount based on the year. If this distinction is permanent, consider a more dynamic approach using a fiscal calendar table or a view that consolidates these fields based on the current fiscal year, rather than hardcoding the year in each metric.",60,d05b3d29-4437-4ee5-987a-e0109eb9590e
budget_earned_amount_current_week_thousands,Anti-Pattern,"The `Budget Earned Amount (Current Week, in Thousands)` metric performs a division by 1000 directly in the SQL (`SAFE_DIVIDE(..., 1000)`). This is a presentation-layer transformation that should ideally be handled at the visualization layer within Looker Studio (e.g., by setting the field's display units or creating a simple calculated field), rather than embedding it in the SQL for a base metric. This practice can lead to redundant metrics and makes the underlying data less reusable.","SUM(SAFE_DIVIDE(CASE WHEN (t0.fy_week_of_year = 39 AND t0.fy_year = 2025) THEN t0.BudgetEarnedAmount ELSE 0 END, 1000))","Define the base `Budget Earned Amount` metric without the division. Create a separate calculated field in Looker Studio for the 'in Thousands' version, or simply apply number formatting to the base metric in the dashboard's visualization settings.",60,d05b3d29-4437-4ee5-987a-e0109eb9590e
fiscal_week_id_sum_unusual,Misconfiguration,The metric `Fiscal Week ID Sum (Unusual Metric)` explicitly states in its business description that summing `fiscal_week_id` is unusual and might indicate a misconfiguration. Summing an identifier field typically does not provide meaningful business insight and suggests an incorrect aggregation method or an unintended purpose.,SELECT SUM(t0.fiscal_week_id),"Investigate the intended business purpose of this metric. If it's meant to count distinct fiscal weeks, change the aggregation to `COUNT(DISTINCT t0.fiscal_week_id)`. If it's for debugging or identifying the latest week, `MAX(t0.fiscal_week_id)` would be more appropriate. If it serves no clear business purpose, it should be removed to reduce dashboard clutter and potential confusion.",60,d05b3d29-4437-4ee5-987a-e0109eb9590e
All metrics,Anti-Pattern,"All five metrics (Unique Users by Division and Team (Daily), Total Unique Users Excluding CoPE Roles (Daily), Unique Users by Division, Role, Team, and Type (Daily), Unique Users by AI Usage, Date, and Team (Date Range), Unique Users by Division, AI Usage, Date, and Team (Daily)) utilize identical `all_users` and `final` Common Table Expressions (CTEs) to prepare the base user data and AI usage flag. This extensive code duplication leads to increased maintenance overhead, potential for inconsistent logic if updates are not applied uniformly, and inefficient query compilation.","WITH
  all_users AS (
    SELECT
      e.event_date AS rpt_date,
      'methode' AS src_system,
      e.event_user_id AS user_id,
      'Y' AS is_methode_login,
      coalesce(ss.type, 'Unknown') AS type,
      coalesce(ss.role, 'Unknown') AS role,
      coalesce(ss.division, 'Unknown') AS division,
      coalesce(ss.team, 'Unknown') AS team,
      coalesce(ss.staff_full_name, e.event_user_id, 'Unknown') AS staff_full_name
    FROM
      `bdm_editorial.editorial_object_event_fact` AS e
      LEFT JOIN
      `prstn_editorial_views.v_staff_section` AS ss
      ON lower(trim(e.event_user_id)) = lower(trim(ss.user_id1))
    WHERE
      1 = 1 AND dw_tgt_partition_date >= `current_date`(""Australia/Sydney"") - 1 AND event_date >= '2025-07-14'
    GROUP BY ALL
  ),
  final AS (
    SELECT
      e.*,
      CASE
        WHEN an.user_identifier IS NOT null THEN 'Y'
        ELSE 'N'
      END AS is_ai_used
    FROM
      all_users AS e
      LEFT JOIN
      `ncau-data-newsquery-sit.sdm_hq_uat.nca_analytics` AS an
      ON date(an.created_at) = e.rpt_date AND e.user_id = an.user_identifier AND property = 'nca-methode-prod' AND
        date(an.created_at) >= '2025-07-14'
    GROUP BY ALL
  )","Consolidate the `all_users` and `final` CTEs into a single, shared BigQuery view or a Looker Studio data source with parameterized date ranges. This centralizes the core logic, improves maintainability, and ensures consistent data definitions across all metrics.",61,f9ccd2b5-7e80-4e3f-a00a-770cd45b1441
All metrics,Hardcoded Logic,"The base CTEs (`all_users` and `final`) contain hardcoded future dates (`event_date >= '2025-07-14'` and `date(an.created_at) >= '2025-07-14'`). This critical issue means the dashboard will not display any current or historical data until July 14, 2025, rendering it non-functional for immediate use.","event_date >= '2025-07-14'
date(an.created_at) >= '2025-07-14'","Replace hardcoded future dates with dynamic date parameters (e.g., `_SD_START_DATE`, `_SD_END_DATE` in Looker Studio) or appropriate relative date functions (e.g., `CURRENT_DATE() - INTERVAL 30 DAY`) to ensure the dashboard displays relevant, up-to-date information based on user selection or current system date.",61,f9ccd2b5-7e80-4e3f-a00a-770cd45b1441
"unique_users_by_division_team_daily, total_unique_users_excluding_cope_roles_daily, unique_users_by_division_role_team_type_daily, unique_users_by_division_ai_usage_date_team_daily",Hardcoded Logic,"Most daily metrics use specific hardcoded dates in their final `WHERE` clauses (e.g., `rpt_date = DATE '2025-07-28'`). This design choice makes the dashboard static, as each metric will only ever show data for that single, fixed date, preventing analysis of current performance or trends over time.","rpt_date = DATE '2025-07-28'
rpt_date = DATE '2025-08-04'
rpt_date = DATE '2025-07-22'","Implement Looker Studio date range controls and link them to dynamic date parameters (e.g., `_SD_START_DATE`, `_SD_END_DATE`) in the SQL queries. This will allow users to select the desired reporting period, making the dashboard interactive and useful for daily monitoring and historical analysis.",61,f9ccd2b5-7e80-4e3f-a00a-770cd45b1441
total_unique_users_excluding_cope_roles_daily,Hardcoded Logic,"The exclusion of 'CoPE' roles is hardcoded as a `NOT IN` list within the SQL query. This approach is inflexible and prone to errors if the definition of 'CoPE' roles changes or new roles are introduced, requiring manual SQL updates and increasing the risk of data inconsistencies.","role NOT IN ('CoPE Producer', 'CoPE Management', 'CoPE Designer', 'CoPE Sport', 'CoPE Regional Sport', 'CoPE Features', 'CoPE Digital')","Create a dedicated lookup table or a governed dimension for 'CoPE' roles in the data model. Join to this table to filter roles dynamically, improving maintainability, data governance, and ensuring the exclusion logic remains accurate as business definitions evolve.",61,f9ccd2b5-7e80-4e3f-a00a-770cd45b1441
All metrics (13 metrics),Hardcoded Logic|Anti-Pattern,"All 13 metrics on this dashboard contain an identical, hardcoded `WHERE` clause. This includes filters for `reporting_date`, `record_type_code`, `source_system_code`, `financial_year` range, `revenue_transaction_status`, and `revenue_type`. This repetition violates the DRY (Don't Repeat Yourself) principle, making the dashboard highly brittle and difficult to maintain. Any change to these core business filters would require manual updates to every single metric, increasing the risk of inconsistencies and errors. This contradicts the initial AI's assessment of 'total_governance_issues: 0' as this is a significant governance and maintainability issue.","WHERE
    reporting_date >= '2022-01-01'
    AND record_type_code = 'STD'
    AND source_system_code = 'ADPT'
    AND SAFE_CAST(financial_year AS INT64) BETWEEN 2023 AND 2026
    AND revenue_transaction_status IN ('Billed', 'Booked')
    AND revenue_type = 'Digital'","Encapsulate this common filtering logic at a higher level. Options include:
1.  **Looker Studio Data Source Filter:** Apply these conditions directly to the `v_adsales_revenue_client` data source within Looker Studio.
2.  **BigQuery View/Materialized View:** Create a dedicated BigQuery view (e.g., `v_adsales_revenue_client_digital_billed_booked_fy23_26`) that pre-applies these filters. The Looker Studio data source would then query this view. This is the most robust solution for governance and performance.",62,5515c1c6-18fe-449d-b621-d47631023320
social_page_views_by_content_daily,Hardcoded Logic,"The metric 'Daily Social Page Views by Article and Content Name' explicitly filters `data_type = 'Social'`. While this is specific to the metric's stated purpose, it represents a hardcoded filter within the SQL logic. If the definition of 'Social' changes, or if similar analyses are required for other `data_type` values (e.g., 'Organic', 'Direct'), this hardcoded value would necessitate direct SQL modification for each new metric or a new metric definition. This reduces flexibility and increases maintenance overhead.",WHERE t0.visit_date = CURRENT_DATE() AND t0.data_type = 'Social',"Consider defining `data_type` as a dimension in a semantic layer (e.g., LookML, dbt, or a BigQuery view) to allow for more flexible filtering and analysis across different data types without modifying underlying SQL. This would enable users to select different data types dynamically, promoting reusability and reducing hardcoding.",64,0a4ccf98-dfe7-4bab-b2ed-e2a27ebd9588
filtered_page_views_by_pagename_evar16_date_v1,Hardcoded Logic,"This metric uses a long, hardcoded list of 'pagename' values in a `NOT IN` clause to exclude 'standard pages'. This approach is not scalable, difficult to maintain, and prone to errors if the definition of 'standard pages' changes or expands. The existence of a 'Version 2' with a different list further highlights this issue.","WHERE
  (t0.pagename NOT IN (
    'aa|home|index', 'aa|news|index|news', 'aa|news|index|racing', 'aa|news|index|opinion', 'aa|news|index|sport', 'aa|news|index|wrap', 'aa|news|index|world', 'aa|news|index|wnews', 'aa|news|index|classifieds', 'aa|news|index|puzzles', 'aa|news|index|business', 'aa|digitaledition|digitaleditions', 'aa|news|index|motoring', 'aa|digitaledition|digitaleditions|full edition', 'aa|news|index|lifestyle', 'aa|news|index|quiz', 'aa|news|index|shares', 'aa|news|index|weather', 'cm|news|index|sport', 'aa|news|index|back page', 'aa|news|index|television', 'aa|audio|index|home', 'aa|digitaledition|digitaleditions|insert', 'aa|home|breach_screen', 'aa|app|sport|index', 'aa|news|index', 'aa|news|south-australia|index', 'aa|menu|index', 'hs|news|breaking-news|index', 'aa|my news|index', 'hs|news|index', 'aa|audio|index|deep_linked', 'aa|app|index', 'aa|truecrimeaustralia|police-courts-sa|index', 'aa|games|4|quick crossword', 'cm|home|index', 'aa|messenger|index', 'aa|games|2|sudoku', 'aa|search|index', 'hs|my news|index', 'aa|audio|index', 'hs|home|index', 'aa|messenger|north-northeast|index', 'aa|news|world|index', 'aa|news|national|index', 'aa|truecrimeaustralia|comments', 'aa|entertainment|index', 'aa|entertainment|shark-quiz|index', 'dt|news|breaking-news|index', 'aa|news|breaking-news|index', 'aa|search|search flow', 'aa|news|index|wbusiness', 'aa|news|index|adliftout', 'cm|news|index', 'aa|games|index', 'aa|digitaledition|index', 'aa|digitaledition|breach_screen', 'aa|lifestyle|index'
  ) OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)","Replace the hardcoded `NOT IN` list with a join to a governed lookup table for 'standard_page_names'. This table should contain all page names to be excluded, allowing for centralized management and easier updates. The redundant `OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)` clause should be simplified to `t0.pagename IS NOT NULL` if that's the intent.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
filtered_page_views_by_pagename_evar16_date_v2,Hardcoded Logic,"Similar to v1, this metric also uses a hardcoded `NOT IN` list for 'pagename' exclusions, but with an expanded list. This duplication of logic and differing definitions for what constitutes a 'standard page' is a significant anti-pattern, leading to inconsistency and maintenance overhead.","WHERE
  (t0.pagename NOT IN (
    'aa|home|index', 'aa|news|index|news', 'aa|news|index|racing', 'aa|news|index|opinion', 'aa|news|index|sport', 'aa|news|index|wrap', 'aa|news|index|world', 'aa|news|index|wnews', 'aa|news|index|classifieds', 'aa|news|index|puzzles', 'aa|news|index|business', 'aa|digitaledition|digitaleditions', 'aa|news|index|motoring', 'aa|digitaledition|digitaleditions|full edition', 'aa|news|index|lifestyle', 'aa|news|index|quiz', 'aa|news|index|shares', 'aa|news|index|weather', 'cm|news|index|sport', 'aa|news|index|back page', 'aa|news|index|television', 'aa|audio|index|home', 'aa|digitaledition|digitaleditions|insert', 'aa|home|breach_screen', 'aa|app|sport|index', 'aa|news|index', 'aa|news|south-australia|index', 'aa|menu|index', 'hs|news|breaking-news|index', 'aa|my news|index', 'hs|news|index', 'aa|audio|index|deep_linked', 'aa|app|index', 'aa|truecrimeaustralia|police-courts-sa|index', 'aa|games|4|quick crossword', 'cm|home|index', 'aa|messenger|index', 'aa|games|2|sudoku', 'aa|search|index', 'hs|my news|index', 'aa|audio|index', 'hs|home|index', 'aa|messenger|north-northeast|index', 'aa|news|world|index', 'aa|news|national|index', 'aa|truecrimeaustralia|comments', 'aa|entertainment|index', 'aa|entertainment|shark-quiz|index', 'dt|news|breaking-news|index', 'aa|news|breaking-news|index', 'aa|search|search flow', 'aa|news|index|wbusiness', 'aa|news|index|adliftout', 'cm|news|index', 'aa|games|index', 'aa|digitaledition|index', 'aa|digitaledition|breach_screen', 'aa|lifestyle|index', 'aa|news|opinion|index', 'dt|my news|index', 'aa|truecrimeaustralia|index', 'aa|journalists|index', 'aa|messenger|east-hills|index', 'hs|news|south-australia|index', 'aa|audio|downloads', 'dt|news|breaking-news|breach_screen'
  ) OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)","Consolidate this metric with 'Version 1' by implementing a single, governed lookup table for 'standard_page_names'. The dashboard should then use a single 'Filtered Page Views' metric that references this lookup table, potentially with a parameter to select different exclusion sets if truly needed, but ideally, a single, comprehensive definition should exist. The redundant `OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)` clause should be simplified to `t0.pagename IS NOT NULL` if that's the intent.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
comments_page_views_by_pagename,Anti-Pattern,"The condition `SAFE_CAST(t0.post_page_event AS FLOAT64) = 0.0` suggests that `post_page_event` might not be stored as a numeric type, or its type is inconsistent. Casting to FLOAT64 for an equality check with 0.0 can introduce precision issues or hide underlying data type problems.",SAFE_CAST(t0.post_page_event AS FLOAT64) = 0.0,"Investigate the data type of `t0.post_page_event`. If it's intended to be an integer or boolean, cast it to the appropriate type (e.g., `SAFE_CAST(t0.post_page_event AS INT64) = 0`) or ensure the source data type is correct. If it's a string representing numbers, consider `SAFE_CAST(t0.post_page_event AS INT64)` for exact integer comparison.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
total_page_views_by_pagename_evar16_evar9_date,Anti-Pattern,"The date casting `SAFE_CAST(SAFE_CAST(t0.date_time AS DATETIME) AS DATE)` is redundant. If `t0.date_time` is already a valid datetime string, a single `SAFE_CAST(t0.date_time AS DATE)` should suffice. This indicates potential over-cautiousness or a misunderstanding of data types.",SAFE_CAST(SAFE_CAST(t0.date_time AS DATETIME) AS DATE),"Simplify the date casting to `SAFE_CAST(t0.date_time AS DATE)` if `t0.date_time` is consistently a datetime string. If `t0.date_time` can be in various formats, consider standardizing the source data type or using a more robust date parsing function.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
total_records,Anti-Pattern,"All metrics, including this one, include `LIMIT 2000001`. While this is a common default in Looker Studio, it can silently truncate results if the actual number of rows exceeds this limit, potentially leading to incomplete or misleading analysis, especially for a dashboard investigating 'inflated' page views where large volumes are expected.",LIMIT 2000001;,"Review the necessity of the `LIMIT 2000001` clause across all metrics. If the dashboard is intended to show comprehensive data, this limit should be removed or adjusted based on expected data volumes and Looker Studio's row limits. If the limit is intentional for performance, ensure users are aware of potential data truncation.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
filtered_page_views_by_pagename_evar16_date_v1,Anti-Pattern,"The `WHERE` clause contains `(t0.pagename NOT IN (...) OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)`. The `OR t0.pagename IS NULL` part is effectively negated by the subsequent `AND NOT(t0.pagename IS NULL)`, making the `OR` condition redundant and the logic unnecessarily complex.","(t0.pagename NOT IN (
    'aa|home|index', ...
  ) OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)","Simplify the `WHERE` clause. If the intent is to exclude NULL `pagename` values and those in the `NOT IN` list, the clause should be `t0.pagename IS NOT NULL AND t0.pagename NOT IN (...)`.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
filtered_page_views_by_pagename_evar16_date_v2,Anti-Pattern,"The `WHERE` clause contains `(t0.pagename NOT IN (...) OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)`. The `OR t0.pagename IS NULL` part is effectively negated by the subsequent `AND NOT(t0.pagename IS NULL)`, making the `OR` condition redundant and the logic unnecessarily complex.","(t0.pagename NOT IN (
    'aa|home|index', ...
  ) OR t0.pagename IS NULL) AND NOT(t0.pagename IS NULL)","Simplify the `WHERE` clause. If the intent is to exclude NULL `pagename` values and those in the `NOT IN` list, the clause should be `t0.pagename IS NOT NULL AND t0.pagename NOT IN (...)`.",65,404605d3-dac4-4af9-b43e-b7915ecd7125
multiple_metrics,Hardcoded Logic,"A significant majority of the dashboard's metrics (12 out of 15) contain hardcoded future dates (`2025-03-18` or `2025-05-05`) in their `WHERE` clauses. This includes critical metrics like 'Subscriber Status (Active/Inactive)', 'Subscriber Rewards Redeem Lifetime', and all dimensions derived from `subscriber_base_agg`. This will prevent the dashboard from displaying current or historical data, making it non-functional for any practical analysis or UAT.","WHERE dw_tgt_partition_date = DATE '2025-03-18' (example from subscriber_status_active_inactive)
WHERE report_date = DATE '2025-05-05' (example from subscriber_base_record_count)","Replace all hardcoded dates with dynamic date parameters. This can be achieved using Looker Studio's built-in date range filter variables, BigQuery's `CURRENT_DATE()` function, or `_PARTITIONTIME` for partitioned tables, to ensure the dashboard reflects current and relevant data.",66,d855425b-db68-413f-a814-a27139b0122d
subscriber_base_record_count,Anti-Pattern,"The 'Subscriber Base Record Count' metric uses a `COUNT(1)` with an excessively long `GROUP BY` clause that includes fields from an `UNNEST` operation. While syntactically valid, this approach for a 'record count' is highly inefficient and suggests the metric is counting unique combinations of many dimensions rather than a simple base record count. This can lead to performance bottlenecks and potentially misrepresent the intended 'record count' if the goal is simply a row count of the base table.","SELECT COUNT(1) AS subscriber_base_record_count FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` AS t0c0d1 LEFT JOIN UNNEST(t0c0d1.subscriber_top_5_brand_section_details) AS t0c0d1_subscriber_top_5_brand_section_details WHERE t0c0d1.report_date = DATE '2025-05-05' GROUP BY t0c0d1.combined_customer_type, t0c0d1.combined_is_paying_flag, t0c0d1.combined_rate_plan_code, t0c0d1.member_type, SAFE_CAST(t0c0d1.subscriber_id_src AS STRING), t0c0d1.subscriber_last_28_days_active_days_count, t0c0d1.subscriber_tenure_cohort_group, t0c0d1_subscriber_top_5_brand_section_details.brand_section","Re-evaluate the business requirement for this 'record count'. If it's truly a count of base records, simplify the SQL to `COUNT(DISTINCT primary_key)` or `COUNT(1)` on the base table without complex joins/groups. If it's a count of unique dimension combinations, rename the metric to accurately reflect this complexity and consider pre-aggregating these combinations in the data model for better performance.",66,d855425b-db68-413f-a814-a27139b0122d
subscriber_status_active_inactive,Anti-Pattern,"The 'Subscriber Status (Active/Inactive)' metric uses a `CASE` statement with multiple `OR` conditions checking specific `subscriber_days_active_prior_XX` fields (28, 56, 84 days, months 4, 5, 6). While functional, if these activity thresholds are dynamic or subject to frequent changes, hardcoding them directly into the SQL makes maintenance cumbersome and prone to errors.",CASE WHEN (subscriber_days_active_prior_28 > 0 OR subscriber_days_active_prior_56 > 0 OR subscriber_days_active_prior_84 > 0 OR subscriber_days_active_prior_month_4 > 0 OR subscriber_days_active_prior_month_5 > 0 OR subscriber_days_active_prior_month_6 > 0) THEN 'active' ELSE 'inactive' END,"Consider externalizing these activity thresholds if they are dynamic or frequently updated. This could involve a lookup table or configuration parameters, making the logic more flexible and maintainable without requiring direct SQL modifications for threshold adjustments.",66,d855425b-db68-413f-a814-a27139b0122d
incident_response_sla_rate_v1,Data Mismatch,"The 'Incident Response SLA Rate' metric sources its data from a backup table (`servicenow_bkp20250214`) and specifically queries the maximum partition date within that backup. This contrasts sharply with the other two metrics which use a current view (`v_servicenow`). This inconsistency introduces a high risk of data staleness, misrepresentation, and makes the dashboard's overall data reliability questionable. It also suggests a potential workaround that should be addressed with a permanent solution.","FROM `ncau-data-newsquery-prd`.cdm_snow.servicenow_bkp20250214
WHERE
  dw_partition_date = (SELECT max(dw_partition_date) FROM `ncau-data-newsquery-prd`.cdm_snow.servicenow_bkp20250214)","Consolidate data sources for all related ServiceNow metrics to a single, up-to-date, and governed production view or table (e.g., `v_servicenow`). Investigate the reason for using the `_bkp` table and `max(dw_partition_date)` subquery for this specific metric and migrate it to the appropriate live data source.",67,d7e97228-032f-4b2d-b5fd-ec2d822c00d0
incident_resolution_sla_rate_v1,Hardcoded Logic,"All three metrics rely on hardcoded `LIKE` clauses with multiple string variations (`%resolution%`, `%resolve%`, `%response%`) to identify different SLA types. This approach is fragile, prone to errors if naming conventions change, and difficult to maintain. It also introduces minor inconsistencies in case sensitivity handling (e.g., `lower(sla)` vs. `sla LIKE`).","AND (lower(sla) LIKE ""%resolution%"" OR lower(sla) LIKE ""%resolve%"")
-- Similar patterns in other metrics:
AND (lower(sla) LIKE ""%response%"")
AND (sla LIKE '%Resolve%' OR sla LIKE '%Resolution%' OR sla LIKE '%resolution%')","Implement a standardized `sla_type` column (e.g., 'Resolution', 'Response') in the upstream data model (e.g., `v_servicenow`) or create a lookup table for SLA classifications. This would allow for direct equality checks (e.g., `sla_type = 'Resolution'`), improving maintainability, accuracy, and performance.",67,d7e97228-032f-4b2d-b5fd-ec2d822c00d0
all_acquisition_metrics,Hardcoded Logic|Anti-Pattern,"A specific list of `sold_in_rate_plan_code` values is hardcoded and repeated verbatim across all acquisition-related metrics (Total Acquisitions, Acquisitions by Offer Category, Acquisitions by Fiscal Year and Source Channel, Count of Acquisition Records by Source Referrer, Filtered Report Date Dimension, Fiscal Year Dimension, Acquisitions by Source Channel). This creates a significant maintenance overhead, as any change to the definition of 'Mindgames' rate plans requires updating multiple SQL queries, increasing the risk of errors and inconsistencies.","sold_in_rate_plan_code IN (""TA_SDO_P04MG21AM01"", ""TA_FDO_P04MG21AM01"", ""TA_SDO_P04MG24AM03"", ""TA_SDO_P04MG21CM01"", ""TA_SDO_P04MG21BM01"", ""TA_SDO_P04MG21DM01"")","Define these 'Mindgames' rate plans in a dedicated, governed lookup table (e.g., `dim_mindgames_rate_plans`) or a BigQuery view. All acquisition metrics should then join to this lookup table to filter `v_subscription_movement`, centralizing the definition and improving maintainability. This also enhances discoverability and reusability of the rate plan definitions.",68,1184f09d-0506-4e10-aa79-b2cc9612feec
acquisitions_by_fy_channel_filtered,Hardcoded Logic,"This metric hardcodes specific fiscal years (2023-2026) and a fixed list of `sold_in_source_channel` values. This design severely limits the flexibility of the metric, making it unsuitable for analyzing other fiscal years or different channel groupings without manual SQL modification. It also prevents dynamic filtering by users in the dashboard.","AND fy_year IN (2023, 2024, 2025, 2026)
  AND sold_in_source_channel IN ('Premium Breach', 'Campaign Page', 'Landing Page', 'Sms', 'Editorial Link', 'Insert', 'Edm', 'Inbound Saves', 'General Online', 'Inbound')","Remove hardcoded filters from the metric's SQL. Instead, leverage Looker Studio's filtering capabilities, allowing users to select fiscal years and source channels dynamically. If specific channel groupings are required, define them in a lookup table and join to it, or use Looker Studio parameters for common selections.",68,1184f09d-0506-4e10-aa79-b2cc9612feec
filtered_report_date_dimension,Hardcoded Logic|Anti-Pattern,"The `report_date` dimension is hardcoded to a single year (2025) and explicitly excludes months 1 and 2. This makes the dimension highly specific and inflexible, severely limiting its utility for general date selection or analysis across different time periods within the dashboard. Dimensions should ideally be as generic as possible to maximize reusability.","AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(report_date AS DATETIME), YEAR) AS DATE) IN (DATE '2025-01-01')
  AND (EXTRACT(MONTH FROM SAFE_CAST(report_date AS DATETIME)) NOT IN (2, 1) OR EXTRACT(MONTH FROM SAFE_CAST(report_date AS DATETIME)) IS NULL)","Remove all hardcoded date filters from the `report_date` dimension's SQL. Allow the dimension to return all available dates. Implement any necessary date filtering (e.g., specific years, month exclusions) directly within the Looker Studio dashboard using date range controls or filter components, giving users full control and flexibility.",68,1184f09d-0506-4e10-aa79-b2cc9612feec
acquisition_record_count_by_referrer,Anti-Pattern,"The subquery within this metric uses ordinal positions (`GROUP BY 1, 2, ..., 16`) instead of explicit column names in its `GROUP BY` clause. While BigQuery supports this syntax, it makes the query less readable and more fragile. If the order of columns in the `SELECT` clause of the subquery changes, the `GROUP BY` clause will silently break or produce incorrect results.","GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16","Replace ordinal positions with explicit column names in the `GROUP BY` clause of the subquery. This improves readability, maintainability, and robustness against future schema or query modifications.",68,1184f09d-0506-4e10-aa79-b2cc9612feec
acquisitions_by_channel_filtered_weeks_years,Hardcoded Logic,"This metric hardcodes specific fiscal weeks (1, 2, 3) and explicitly excludes fiscal year 2023. Similar to other hardcoded filters, this limits the metric's applicability and requires manual SQL changes for any variations in reporting periods.","AND fy_week_of_year IN (2, 3, 1)
  AND (fy_year NOT IN (2023) OR fy_year IS NULL)","Remove hardcoded fiscal week and year filters from the metric's SQL. Implement these filters as dynamic controls or parameters within the Looker Studio dashboard, allowing users to select desired fiscal weeks and years.",68,1184f09d-0506-4e10-aa79-b2cc9612feec
"event_count_ga4_filtered_2025_04_14_to_2025_04_20, event_count_ga4_filtered_2025_04_28_to_2025_05_04, event_count_ga4_filtered_2025_annual, total_adds_standard_paid_digital_cp_2024_07_01_to_2025_03_23, total_cancels_standard_paid_digital_cp_2024_07_01_to_2025_03_23, net_adds_standard_paid_digital_cp_2024_07_01_to_2025_03_23, total_adds_standard_paid_digital_cp_2024_07_01_to_2025_05_19, total_cancels_standard_paid_digital_cp_2024_07_01_to_2025_05_19, net_adds_standard_paid_digital_cp_2024_07_01_to_2025_05_19",Hardcoded Logic,Multiple metrics for GA4 events and consumer subscriptions are defined with hardcoded date ranges directly within their SQL logic. This leads to a proliferation of similar metrics for different time periods instead of utilizing dynamic date range parameters available in Looker Studio. This significantly reduces the flexibility and maintainability of the dashboard.,"WHERE PARSE_DATE('%Y%m%d', t0c0d1.event_date) >= DATE '2025-04-14' AND PARSE_DATE('%Y%m%d', t0c0d1.event_date) <= DATE '2025-04-20'
WHERE t0.report_date >= DATE '2024-07-01' AND t0.report_date <= DATE '2025-03-23'","Implement Looker Studio's built-in date range controls or define a single, parameterized metric that accepts dynamic date inputs. This will eliminate the need for duplicate metrics for every desired time window, improving dashboard flexibility and reducing maintenance overhead.",69,7311af2c-89f8-4279-97b4-94ddb886964b
"total_adds_standard_paid_digital_cp_2024_07_01_to_2025_03_23, total_cancels_standard_paid_digital_cp_2024_07_01_to_2025_03_23, net_adds_standard_paid_digital_cp_2024_07_01_to_2025_03_23, total_adds_standard_paid_digital_cp_2024_07_01_to_2025_05_19, total_cancels_standard_paid_digital_cp_2024_07_01_to_2025_05_19, net_adds_standard_paid_digital_cp_2024_07_01_to_2025_05_19",Hardcoded Logic,"Subscription metrics (`adds`, `cancels`, `net_adds`) repeatedly apply the same hardcoded filters (`class_lvl_1 = 'Standard Paid'`, `delivery_medium != 'Print'`, `masthead = 'CP'`) directly within their SQL. While these might represent specific business requirements, embedding them in each metric's SQL makes them inflexible and difficult to manage if the criteria change or if other mastheads/classes need to be analyzed.",AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.masthead = 'CP',"Consider defining these common filters at the data source level within Looker Studio, or if they are truly fixed and universally applicable, encapsulate them in a base view or a more abstract metric definition. For dynamic filtering by users, utilize Looker Studio filter controls.",69,7311af2c-89f8-4279-97b4-94ddb886964b
"event_count_ga4_filtered_2025_04_14_to_2025_04_20, total_adds_standard_paid_digital_cp_2024_07_01_to_2025_03_23, total_cancels_standard_paid_digital_cp_2024_07_01_to_2025_03_23, net_adds_standard_paid_digital_cp_2024_07_01_to_2025_03_23, event_count_ga4_filtered_2025_04_28_to_2025_05_04, user_record_count_verity2, event_count_ga4_filtered_2025_annual, total_adds_standard_paid_digital_cp_2024_07_01_to_2025_05_19, total_cancels_standard_paid_digital_cp_2024_07_01_to_2025_05_19, net_adds_standard_paid_digital_cp_2024_07_01_to_2025_05_19",Anti-Pattern,"All provided SQL queries for the dashboard's metrics include a `LIMIT 10` clause. This will restrict the results to only 10 rows, which is highly unusual for dashboard metrics and will likely provide incomplete or misleading data unless these metrics are specifically designed for preview or sampling purposes. This contradicts the expectation of comprehensive dashboard reporting.",LIMIT 10;,"Verify the intent behind the `LIMIT 10` clause with the dashboard developer or owner. If it is not for sampling or a specific preview function, it should be removed to ensure the dashboard displays complete and accurate data. If it is for sampling, ensure this limitation is clearly communicated within the dashboard UI.",69,7311af2c-89f8-4279-97b4-94ddb886964b
all_metrics,Hardcoded Logic,"All three business-critical metrics ('Total Content Starts', 'Mobile Content Starts', 'Combined Page Views per Visit') are defined with hardcoded `visit_date` values in their SQL logic. For example, 'Total Content Starts' is fixed to '2025-05-19', 'Mobile Content Starts' to '2025-04-01', and 'Combined Page Views per Visit' to '2025-05-05'. This design choice directly contradicts the dashboard's 'Daily Update' name, as it prevents the dashboard from dynamically displaying current or user-selected daily data without manual modification of each metric's SQL or the creation of new metrics for every reporting day. This significantly increases maintenance burden, introduces potential for data staleness, and reduces the dashboard's scalability and utility.","WHERE t0.visit_date = DATE 'YYYY-MM-DD' (e.g., DATE '2025-05-19')","Refactor all date-filtered metrics to utilize dynamic date parameters provided by Looker Studio (e.g., a date range control) or BigQuery functions (e.g., `CURRENT_DATE()`, `_PARTITIONTIME` for partitioned tables). This will allow the dashboard to automatically update to the relevant reporting period, eliminating manual intervention and enabling true 'Daily Update' functionality. For example, replace `WHERE t0.visit_date = DATE '2025-05-19'` with `WHERE t0.visit_date = CURRENT_DATE()` or `WHERE t0.visit_date = @selected_date_parameter`.",70,1f134ccb-ed11-45d8-ac05-916f31640357
newsletter_brand_cleaned_dim,Hardcoded Logic|Anti-Pattern,"The `newsletter_brand_cleaned_dim` uses a lengthy and repetitive `CASE` statement to standardize brand names. This approach is brittle, difficult to maintain, prone to errors (e.g., 'HeraldSun' and 'Herald Sun' both mapped separately), and does not scale well as new brands or variations emerge. It indicates a lack of a centralized, governed lookup for brand names.",SELECT CASE WHEN (newsletter_brand = 'HeraldSun') THEN 'Herald Sun' WHEN (newsletter_brand = 'Herald Sun') THEN 'Herald Sun' ... ELSE newsletter_brand END AS newsletter_brand_cleaned,"Implement a dedicated lookup table (e.g., `dim_newsletter_brand`) in the data warehouse to store standardized brand names and their variations. This table can then be joined to the `newsletter_activity` table. Alternatively, perform this data cleaning upstream in an ETL/ELT process (e.g., dbt, Dataflow) to ensure data quality at the source.",71,1091b278-b70b-40d5-af7b-5750a63c662d
newsletter_brand_cleaned_dim,Anti-Pattern,"The `sql_logic` for `newsletter_brand_cleaned_dim` (and all other dimensions) includes `LIMIT 1`. If this `LIMIT 1` is literally applied when the dimension is used in the dashboard, it would severely restrict the dashboard's ability to display data for multiple brands, weeks, or email names, rendering the dimension largely useless for aggregation or filtering across the full dataset. This suggests the provided `sql_logic` might be a definition snippet rather than the full query used by Looker Studio to populate the dimension.",FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` LIMIT 1,"Clarify the intended use and interpretation of the `sql_logic` for dimensions. If this `LIMIT 1` is indeed part of the live query, it must be removed to allow the dashboard to function correctly and display all relevant dimension values. Dimensions should typically query the full dataset to enable proper grouping and filtering.",71,1091b278-b70b-40d5-af7b-5750a63c662d
newsletter_send_week_dim,Anti-Pattern,"Similar to the brand dimension, the `sql_logic` for `newsletter_send_week_dim` includes `LIMIT 1`. If this `LIMIT 1` is literally applied, the dashboard would only ever show data for a single week, which is highly problematic for time-series analysis or trend identification.",FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` LIMIT 1,Remove `LIMIT 1` from dimension SQLs to ensure the dashboard can display data across all relevant time periods. Verify how this dimension behaves in the live Looker Studio dashboard.,71,1091b278-b70b-40d5-af7b-5750a63c662d
newsletter_send_email_name_dim,Anti-Pattern,"The `sql_logic` for `newsletter_send_email_name_dim` also includes `LIMIT 1`. This would prevent the dashboard from showing performance across different email campaigns or newsletters, undermining its utility for 'Program Performance' analysis.",FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` LIMIT 1,Remove `LIMIT 1` from dimension SQLs to allow for comprehensive analysis across all email campaigns. Verify how this dimension behaves in the live Looker Studio dashboard.,71,1091b278-b70b-40d5-af7b-5750a63c662d
all_metrics_affected,Anti-Pattern,"All 10 metrics defined for this dashboard (e.g., 'Total Records by Use Case', 'Detailed Content ID') embed an identical, complex subquery that includes a `capi_data` CTE and a subsequent LEFT JOIN. This highly redundant SQL structure makes the dashboard difficult to maintain, update, and debug. Any change to the core data joining or filtering logic would require updating all 10 metric definitions individually, increasing the risk of inconsistencies and errors.","WITH
  capi_data AS (
    SELECT DISTINCT
      content_id,
      ...
    FROM
      `ncau-data-newsquery-prd.bdm_verity.content_dim`
    WHERE
      1 = 1 AND date(contentpublisheddate) BETWEEN '2025-07-01' AND `current_date`()
  )
SELECT
  art.*,
  cap.content_id,
  cap.ContentSeoOwner
FROM
  `ncau-data-newsquery-sit.sdm_hq_uat.nca_analytics` AS art
  LEFT JOIN
  capi_data AS cap
  ON art.internal_id = cap.source_ref_parentid","Refactor the common data preparation logic into a dedicated BigQuery view (e.g., `v_nca_analytics_with_content_dim`) or a common CTE defined at a higher level if the Looker Studio data source allows. All metrics should then query this single, consolidated view. This will drastically improve maintainability, ensure consistency across metrics, and potentially allow BigQuery to optimize query execution more effectively.",72,a7a1d3ee-3b79-471c-a04a-22383717538e
all_metrics_affected,Data Mismatch,"The `capi_data` CTE, which forms the basis for all metrics on this dashboard, includes a hardcoded date filter: `date(contentpublisheddate) BETWEEN '2025-07-01' AND `current_date`()`. As of the current date, the start date of this range ('2025-07-01') is in the future. This means the `capi_data` CTE will return no records (or only records published exactly on `current_date` if `current_date` happens to be after 2025-07-01, which is not the case now), effectively preventing the dashboard from displaying any meaningful or current data. This is a critical data correctness issue that renders the dashboard non-functional for its intended purpose.",date(contentpublisheddate) BETWEEN '2025-07-01' AND `current_date`(),"Correct the date filter to reflect the intended historical period for analysis. For example, to analyze data from the past year, use `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`. If the dashboard is meant to show data from a specific historical point, ensure the start date is in the past. Consider using Looker Studio's date range parameters to allow users to dynamically select the period of interest, rather than hardcoding dates.",72,a7a1d3ee-3b79-471c-a04a-22383717538e
all_metrics,Anti-Pattern,"All three metrics (`Total Monitored Tables`, `Tables with Success/Blank Status`, `Distinct Overall Statuses`) share an identical, highly complex SQL query. This leads to significant maintenance overhead, potential for inconsistencies if updates are not applied uniformly, and makes the dashboard less scalable.",The entire `sql_logic` block is duplicated across all three metrics.,"Consolidate the core data freshness logic into a single, dedicated BigQuery view or a Looker model. This view should pre-calculate `OVERALL_STATUS`, `RefreshRate`, and other relevant table metadata. Each dashboard metric can then simply query this consolidated source, promoting reusability and maintainability.",73,a318d7d9-e528-475f-8c17-9aefdfac4190
all_metrics,Hardcoded Logic,"The `OVERALL_STATUS` calculation within the `main_data` CTE is a deeply nested `CASE` statement that hardcodes specific refresh rules and time thresholds for individual tables (e.g., 'subscription_engagement_breadth', 'campaign_performance_fct', 'prestige_digi_top_contents'). This makes it difficult to modify or add new tables and their unique refresh logic.","CASE
        WHEN date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") AND
        table_name IN ('subscription_engagement_breadth', 'payment_revenue_fct', 'b2b_subscription_engagement', ...)
        THEN ...
        WHEN table_name IN ('prestige_digi_top_contents', 'prestige_digi_visits') AND partition_id = ... THEN 'Success'
        ...","Externalize table-specific refresh rules (e.g., expected update times, freshness thresholds, partition logic) into a dedicated metadata table. The `OVERALL_STATUS` calculation should then join to this metadata table, making the logic dynamic, scalable, and easier to manage without modifying the core SQL.",73,a318d7d9-e528-475f-8c17-9aefdfac4190
all_metrics,Hardcoded Logic,The `dd1` CTE hardcodes table names and their refresh rates using a long `UNION ALL` statement. This information duplicates the list of tables already hardcoded in the `main_data` CTE's `WHERE` clause and is not easily maintainable.,"dd1 AS (
    SELECT
      ""subscription_engagement_breadth"" AS TableName,
      ""Every 24 Hours"" AS RefreshRate
    UNION ALL
    SELECT
      ""payment_revenue_fct"",
      ""Every 24 Hours""
    UNION ALL
    ...",Integrate refresh rate metadata into the proposed central metadata table for table-specific rules. This eliminates the need for this hardcoded `UNION ALL` and ensures a single source of truth for table properties.,73,a318d7d9-e528-475f-8c17-9aefdfac4190
all_metrics,Anti-Pattern,"The list of monitored tables is hardcoded in multiple places within the SQL (e.g., `main_data` CTE's `WHERE` clause and the `dd1` CTE). This makes it cumbersome and error-prone to add or remove tables from monitoring.","WHERE
          partition_id NOT IN ('__NULL__') AND table_name IN ('subscription_engagement_breadth', 'payment_revenue_fct',
            'b2b_subscription_engagement', 'campaign_performance_fct', 'b2c_subscription_engagement', 'consumer_activity_daily_summary',
            'subscription_movement', 'subscription_base_movement_agg', 'subscription_base', 'prestige_digi_top_contents',
            'prestige_digi_visits', 'newsletter_activity', 'newsletter_clicks')","Manage the list of monitored tables within the central metadata table. The SQL should then dynamically select tables based on this source, rather than relying on hardcoded `IN` clauses.",73,a318d7d9-e528-475f-8c17-9aefdfac4190
all_metrics,Anti-Pattern,"The final `SELECT` statement includes a `CASE` condition `WHEN main_data.TABLE = 'demographic' THEN ' '`. However, the 'demographic' table is not included in the initial `WHERE` clause filter of the `main_data` CTE's subquery, meaning this condition will never be met. This is dead code.","CASE
        WHEN main_data.TABLE = 'demographic' THEN ' '
        ELSE main_data.overall_status
      END AS overall_status","Review and remove dead code. Ensure all tables referenced in `CASE` statements or other logic are actually included in the data source or are intended to be. If 'demographic' is meant to be monitored, it should be added to the `INFORMATION_SCHEMA.PARTITIONS` filter and the metadata definitions.",73,a318d7d9-e528-475f-8c17-9aefdfac4190
"total_subscriptions_all, total_subscriptions_print, total_subscriptions_bundle, total_subscriptions_bundle_specific_subscriber, subscriber_engagement_category_breakdown",Anti-Pattern,"All metrics include a `LIMIT 1` clause after a `GROUP BY` statement. For aggregation metrics (e.g., 'Total Subscriptions'), this means the dashboard will only ever display the count for a single arbitrary group, not the true total count across all records. For the 'Subscriber Engagement Category' (a dimension intended for breakdown), `LIMIT 1` means only one category will ever be returned, making it impossible to see a full breakdown. This renders the metrics fundamentally incorrect and misleading.",SELECT COUNT(1) AS total_subscriptions FROM `ncau-data-newsquery-prd.prstn_consumer.subscription_base` AS t0c0d1 ... GROUP BY ... LIMIT 1;,"Remove the `LIMIT 1` clause from all metric definitions. For 'total' metrics, if a true overall total is desired, remove the `GROUP BY` clause entirely. If counts per group are intended, ensure the dashboard visualization is designed to handle multiple rows returned by the query.",74,c6d33dfc-2694-44ce-85ae-8fed018197bb
"total_subscriptions_bundle, total_subscriptions_bundle_specific_subscriber, subscriber_engagement_category_breakdown",Hardcoded Logic,"Multiple metrics use hardcoded future dates (e.g., `DATE '2025-04-14'`, `DATE '2025-06-23'`, `DATE '2025-06-01'`, `DATE '2025-06-04'`) in their `WHERE` clauses. This makes the dashboard static and irrelevant as soon as these dates pass, requiring manual updates to the metric definitions.",WHERE (t0c0d1.data_as_of_date >= DATE '2025-04-14' AND t0c0d1.data_as_of_date <= DATE '2025-06-23' ...),"Replace hardcoded dates with dynamic date parameters or functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)`) to allow for relative date ranges or user-selectable date ranges via Looker Studio controls.",74,c6d33dfc-2694-44ce-85ae-8fed018197bb
total_subscriptions_bundle_specific_subscriber,Hardcoded Logic,"The metric 'Total Bundle Subscriptions for Specific Subscriber' hardcodes a specific subscriber ID (`'81255632'`) in its `WHERE` clause. This severely limits the reusability and general utility of the metric, making it only relevant for a single, predefined subscriber.",AND SAFE_CAST(t0c0d1.subscriber_id_src AS STRING) = '81255632',"Replace the hardcoded subscriber ID with a Looker Studio parameter or filter control, allowing users to dynamically select the subscriber they wish to analyze. Alternatively, if this is intended for a specific drill-down, ensure the context is clearly communicated.",74,c6d33dfc-2694-44ce-85ae-8fed018197bb
subscriber_engagement_category_breakdown,Anti-Pattern,"The 'Subscriber Engagement Category' metric uses a complex, hardcoded `CASE` statement to define engagement levels based on active days. This embeds business logic directly into the metric's SQL, making it difficult to maintain, update, and ensure consistency across different reports or dashboards if the categorization rules change.",SELECT CASE WHEN (SAFE_CAST(t0c0d1.subscriber_last_28_days_active_days_count AS INT64) >= 16 AND SAFE_CAST(t0c0d1.subscriber_last_28_days_active_days_count AS INT64) <= 29) THEN '1. SUPER ENGAGED (16+)' ... ELSE 'Other' END AS engagement_category,"Externalize the engagement categorization logic. This can be done by creating a dedicated lookup table in the data warehouse that maps active day ranges to engagement categories, or by defining this logic in a view that can be reused across metrics and dashboards. This improves maintainability, consistency, and data governance.",74,c6d33dfc-2694-44ce-85ae-8fed018197bb
"total_subscriptions_all, total_subscriptions_print, total_subscriptions_bundle, total_subscriptions_bundle_specific_subscriber",Anti-Pattern,"The 'Total Subscriptions' metrics include extensive `GROUP BY` clauses (e.g., by `dw_effective_end_datetime`, `subscriber_id_src`, `subscription_id_src`, `rate_plan_code`, etc.). While `GROUP BY` is necessary for aggregated counts per dimension, these metrics are named 'Total Subscriptions', implying an overall count. The combination of extensive `GROUP BY` and `LIMIT 1` (as noted above) indicates a fundamental misunderstanding of how to calculate and display overall totals versus granular counts.","GROUP BY DATETIME_TRUNC(t0c0d1.dw_effective_end_datetime, SECOND), SAFE_CAST(t0c0d1.subscriber_id_src AS STRING), SAFE_CAST(t0c0d1.subscription_id_src AS STRING), t0c0d1.rate_plan_code, t0c0d1.subscriber_has_email_flag, t0c0d1.subscription_status_code","Clarify the intent of these metrics. If they are truly meant to be overall totals, remove the `GROUP BY` clauses. If they are meant to be counts per specific dimensions, rename the metrics to reflect this granularity (e.g., 'Subscriptions by Rate Plan') and ensure the `LIMIT 1` is removed so all groups are returned.",74,c6d33dfc-2694-44ce-85ae-8fed018197bb
all_social_metrics_with_hardcoded_dates,Hardcoded Logic,"All 'Total Interactions' and 'Post Count' metrics across both `t_social_summary` and `t_social_interactions_summary` tables use hardcoded date ranges in their SQL queries. This makes the dashboard static and requires manual modification of each metric's SQL definition to update for new reporting periods, severely impacting maintainability and scalability. This contradicts best practices for dynamic reporting in Looker Studio.","Example from 'Total Interactions (Social Summary, May 2025)': WHERE t0.post_created_AEDT_AEST >= DATE '2025-05-16' AND t0.post_created_AEDT_AEST < DATETIME_ADD(DATE '2025-05-19', INTERVAL 1 DAY)
Example from 'Total Interactions (Social Interactions Summary, Aug 22-25, 2025)': WHERE DATETIME_TRUNC(...) >= DATETIME '2025-08-22T00:00:00' AND DATETIME_TRUNC(...) <= DATETIME '2025-08-25T23:59:59.999999'","Implement Looker Studio date range parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) within the data source definition or use a custom date range filter on the dashboard. This would allow a single metric definition to serve all date ranges dynamically.",75,eef984c7-b528-4716-a506-e8e8bcb7861f
total_interactions_and_post_count_dual_source,Anti-Pattern,"The dashboard calculates 'Total Interactions' and 'Post Count' from two distinct tables: `t_social_summary` and `t_social_interactions_summary`. While the `base_metric_id` indicates conceptual consolidation, the implementation uses separate data sources for what appear to be similar metrics. This could lead to data discrepancies if the tables are not perfectly aligned in their data collection or definitions, and creates unnecessary complexity in the data model.","Metrics like 'Total Interactions (Social Summary, May 2025)' query `t_social_summary`, while 'Total Interactions (Social Interactions Summary, Aug 22-25, 2025)' query `t_social_interactions_summary`.","Investigate the purpose and content of `t_social_summary` and `t_social_interactions_summary`. If they contain overlapping or redundant information, consider consolidating them into a single, comprehensive social media data model. If they serve distinct purposes (e.g., different levels of granularity), clearly define and document their use cases and ensure consistent naming conventions.",75,eef984c7-b528-4716-a506-e8e8bcb7861f
timezone_handling_inconsistency,Anti-Pattern,"Timezone handling differs between the two social media tables. `t_social_summary` uses `post_created_AEDT_AEST` which implies a pre-adjusted timezone, while `t_social_interactions_summary` explicitly applies a `DATETIME_ADD(..., INTERVAL 10 HOUR)` transformation. This inconsistency could lead to subtle data misalignments or misinterpretations if not clearly understood and documented.","From `t_social_summary` metrics: `t0.post_created_AEDT_AEST`
From `t_social_interactions_summary` metrics: `DATETIME_TRUNC(DATETIME_ADD(DATETIME_TRUNC(t0.post_created_time, SECOND), INTERVAL 10 HOUR), SECOND)`","Standardize timezone handling across all social media data sources. Ideally, store timestamps in UTC and apply timezone conversions consistently at the reporting layer or within a unified data model view, rather than hardcoding different approaches in individual metric queries.",75,eef984c7-b528-4716-a506-e8e8bcb7861f
dataset_naming_inconsistency,Anti-Pattern,"The dataset name for `t_subscription_details_snapshot_summary` is `PRSTN` (uppercase), while for social summary tables it's `prstn_verity` (lowercase with underscore). While BigQuery is case-insensitive for datasets, this inconsistency can indicate different naming conventions or data ownership, potentially hindering discoverability and governance.","From 'Article Authors (July 2025)': `ncau-data-newsquery-prd.PRSTN.t_subscription_details_snapshot_summary`
From social metrics: `ncau-data-newsquery-prd.prstn_verity.t_social_summary`",Establish and enforce consistent naming conventions for datasets and tables across the entire data platform to improve data governance and ease of use.,75,eef984c7-b528-4716-a506-e8e8bcb7861f
all_metrics,Anti-Pattern|Hardcoded Logic,"All four metrics (`gross_revenue_current_fy`, `pipeline_current_fy`, `total_pipeline_all_fys`, `has_digital_other_segment`) are built upon the same base table (`v_adsales_revenue_client_weekly`) and, critically, employ an identical, complex `WHERE` clause. This repetition is a significant anti-pattern, leading to: 
1.  **Maintenance Overhead:** Any change to the core filtering logic requires updating four separate metric definitions, increasing the risk of inconsistencies and errors.
2.  **Readability & Understanding:** The complex, hardcoded exclusions/inclusions (e.g., 'ROP COMPOSITE', 'MEDIUM RARE CONTENT AGENCY', and the specific 'SUDDENLY%' publication logic with account numbers) are embedded directly in each metric's SQL, making it difficult to understand the universal business rules applied across the dashboard.
3.  **Governance Risk:** The hardcoded values are not centrally managed, making it challenging to audit, update, or communicate changes to these business rules. This directly represents a governance issue, despite the initial analysis stating '0 governance issues'.","WHERE relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))","To improve maintainability, consistency, and governance, centralize this common filtering logic:
1.  **Create a Dedicated SQL View:** Define a BigQuery view (e.g., `v_adsales_revenue_client_weekly_governed`) that encapsulates this exact `WHERE` clause. All dashboard metrics should then query this new view instead of the base table. This ensures a single source of truth for these core filters.
2.  **Externalize Hardcoded Values:** For the exclusion lists (e.g., `style_name`, `source_publishing_division`, `publication_name` exceptions), consider moving these into a separate, small lookup table. This allows business users or data stewards to manage these exceptions without requiring code changes, enhancing data governance and agility.
3.  **Looker Model Refinement (if applicable):** If this dashboard is built on a Looker model, define this common filter as a `sql_always_where` or a derived table at the base view level, ensuring all dependent explores and metrics inherit the consistent filtering logic.",76,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
total_subscriber_count_daily,Hardcoded Logic,"The metric's SQL logic hardcodes a specific report date, '2025-04-22', making the dashboard static and requiring manual updates for daily reporting. This is an anti-pattern for a 'Daily' metric.",WHERE t0.report_date = DATE '2025-04-22',"Replace the hardcoded date with a dynamic date parameter (e.g., `CURRENT_DATE()`, `_DS_LAST_DATE`, or a Looker Studio date range control parameter) to ensure the dashboard reflects current data without manual intervention.",77,56ec5017-2440-42e1-a7dd-3791f557b283
total_acquisition_count_by_classification_level_2,Hardcoded Logic,"Similar to other metrics, this metric hardcodes the report date to '2025-04-22', limiting its utility for dynamic analysis.",WHERE t0.report_date = DATE '2025-04-22',Implement dynamic date filtering using Looker Studio parameters or `CURRENT_DATE()` in the SQL.,77,56ec5017-2440-42e1-a7dd-3791f557b283
total_cancellation_count_by_classification_level_2,Hardcoded Logic,"This metric also hardcodes the report date to '2025-04-22', hindering its ability to display up-to-date information.",WHERE t0.report_date = DATE '2025-04-22',Utilize dynamic date parameters for the report date filter.,77,56ec5017-2440-42e1-a7dd-3791f557b283
total_acquisition_count_by_offer_category_name,Hardcoded Logic,"The report date is hardcoded to '2025-04-22', making the metric non-dynamic.",WHERE t0.report_date = DATE '2025-04-22',Replace the hardcoded date with a dynamic date parameter.,77,56ec5017-2440-42e1-a7dd-3791f557b283
total_cancellation_count_by_offer_category_name,Hardcoded Logic,"The report date is hardcoded to '2025-04-22', limiting the dashboard's real-time applicability.",WHERE t0.report_date = DATE '2025-04-22',Implement dynamic date filtering for the report date.,77,56ec5017-2440-42e1-a7dd-3791f557b283
total_acquisition_count_by_subscriber_type,Hardcoded Logic|Anti-Pattern,"This metric uses a hardcoded report date ('2025-04-22') and defines 'subscriber_type' via a complex `CASE` statement with an 'ELSE 'Other'' clause. The 'Other' clause suggests unhandled or undefined categories, which could lead to data misrepresentation. This `CASE` logic is also duplicated in other metrics.","WHERE t0.report_date = DATE '2025-04-22'
CASE WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'N') THEN '1) New Subscriber' WHEN (t0.prior_paid_subscription_flag = 'Y' AND t0.prior_registration_flag IN ('N', 'Y')) THEN '2) Existing Subscriber' WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'Y') THEN '3) Registered to Paid' ELSE 'Other' END AS subscriber_type","1. Replace the hardcoded date with a dynamic parameter. 2. Define 'subscriber_type' in a centralized, governed view or a lookup table to ensure consistency, maintainability, and prevent 'Other' categories from appearing unexpectedly. If 'Other' is a valid category, its definition should be explicit.",77,56ec5017-2440-42e1-a7dd-3791f557b283
total_cancellation_count_by_subscriber_type,Hardcoded Logic|Anti-Pattern,"This metric suffers from the same issues as its acquisition counterpart: hardcoded report date ('2025-04-22') and duplicated, potentially incomplete `CASE` statement logic for 'subscriber_type'.","WHERE t0.report_date = DATE '2025-04-22'
CASE WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'N') THEN '1) New Subscriber' WHEN (t0.prior_paid_subscription_flag = 'Y' AND t0.prior_registration_flag IN ('N', 'Y')) THEN '2) Existing Subscriber' WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'Y') THEN '3) Registered to Paid' ELSE 'Other' END AS subscriber_type",1. Implement dynamic date filtering. 2. Centralize the 'subscriber_type' definition in a view or lookup table to avoid repetition and ensure consistency across metrics.,77,56ec5017-2440-42e1-a7dd-3791f557b283
total_subscriber_count_by_subscriber_type_and_date_range_filtered,Hardcoded Logic|Anti-Pattern,"This metric uses a hardcoded date range ('2024-04-15' AND '2025-04-20') and repeats the complex `CASE` statement for 'subscriber_type'. Additionally, it includes several hardcoded filters (`combined_customer_type`, `member_type`, `combined_classification_level_2`) directly within the SQL, limiting dashboard interactivity and reusability.","WHERE t0.report_date BETWEEN DATE '2024-04-15' AND DATE '2025-04-20' AND STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.member_type AS STRING), 'subscriber') AND t0.combined_classification_level_2 != 'Print-only' AND (CASE WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'N') THEN '1) New Subscriber' WHEN (t0.prior_paid_subscription_flag = 'Y' AND t0.prior_registration_flag IN ('N', 'Y')) THEN '2) Existing Subscriber' WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'Y') THEN '3) Registered to Paid' ELSE 'Other' END) IN ('1) New Subscriber', '2) Existing Subscriber', '3) Registered to Paid')
CASE WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'N') THEN '1) New Subscriber' WHEN (t0.prior_paid_subscription_flag = 'Y' AND t0.prior_registration_flag IN ('N', 'Y')) THEN '2) Existing Subscriber' WHEN (t0.prior_paid_subscription_flag = 'N' AND t0.prior_registration_flag = 'Y') THEN '3) Registered to Paid' ELSE 'Other' END AS subscriber_type",1. Replace the hardcoded date range with dynamic date range parameters. 2. Centralize the 'subscriber_type' logic. 3. Externalize the hardcoded filters into Looker Studio controls or a governed data model layer to allow users to interact with the data more flexibly and improve reusability.,77,56ec5017-2440-42e1-a7dd-3791f557b283
total_subscriber_count_by_masthead_filtered,Hardcoded Logic,"This metric hardcodes the report date ('2025-04-22') and includes several hardcoded filters (`member_type`, `combined_is_paying_flag`, `combined_customer_type`) directly in the SQL, limiting its flexibility.","WHERE t0.report_date = DATE '2025-04-22' AND t0.member_type = 'subscriber' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.combined_is_paying_flag AS STRING), 'Y') AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer')",1. Replace the hardcoded date with a dynamic parameter. 2. Externalize the hardcoded filters into Looker Studio controls or a governed data model layer to enhance interactivity and reusability.,77,56ec5017-2440-42e1-a7dd-3791f557b283
All subscriber and newsletter metrics,Hardcoded Logic,"All metrics within this dashboard hardcode specific `report_date` or `newsletter_send_date` ranges directly into their SQL queries. For example, subscriber metrics are tied to specific dates like '2025-03-03', and newsletter metrics to a fixed weekly range like '2025-05-23' to '2025-05-29'. This design renders the dashboard static, requiring manual modification and redeployment for each new reporting period, which is unsustainable and prone to errors.","t0c1d0.report_date = DATE '2025-03-03'
OR
t0.newsletter_send_date >= DATE '2025-05-23' AND t0.newsletter_send_date <= DATE '2025-05-29'","Implement dynamic date filtering. This can be achieved by using Looker Studio's date range controls linked to a single, parameterized metric definition, or by leveraging BigQuery's date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) within a view that the dashboard consumes. This allows for flexible reporting without constant SQL updates.",78,ac6844f3-d867-4726-a3b5-14eed55cb7cb
"All subscriber, newsletter, and net subscriber movement metrics",Anti-Pattern,"Multiple metrics employ `SAFE.REGEXP_CONTAINS` with long, pipe-separated lists of values to filter critical dimensions such as `combined_masthead`, `newsletter_send_email_name`, `newsletter_subject`, and `masthead`. This approach hardcodes business logic directly into the metric definition, making it opaque, difficult to update when business rules change, and highly susceptible to errors. The extensive regex for newsletter email names is particularly egregious.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c1d0.combined_masthead AS STRING), 'CS')
OR
NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'UAT_|_TEST_|_Test_|testSend|...')","Centralize and govern dimension logic. Create and utilize dedicated lookup tables (e.g., `dim_mastheads`, `dim_newsletter_types`) in BigQuery. These tables should contain the relevant dimension values along with flags or attributes that define their inclusion/exclusion criteria. Metrics can then join to these lookup tables and filter based on these attributes, significantly improving maintainability, readability, and data governance.",78,ac6844f3-d867-4726-a3b5-14eed55cb7cb
total_subscribers_* and active_daily_subscribers_*,Anti-Pattern,"The dashboard features numerous `total_subscribers` and `active_daily_subscribers` metrics (e.g., for CS, CM, TA mastheads across different dates) that are nearly identical in their SQL structure, differing only by the hardcoded `report_date` and `combined_masthead`. This represents a severe lack of metric consolidation and leads to redundant code, increased query complexity, and a bloated metric inventory.","SELECT SUM(t0c1d0.subscriber_count) AS total_subscribers FROM `...subscriber_daily_base_movement` AS t0c1d0 WHERE (t0c1d0.report_date = DATE '2025-03-03' AND ... AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c1d0.combined_masthead AS STRING), 'CS'))
(repeated for different dates/mastheads)","Consolidate these into a single, parameterized base metric (e.g., `subscriber_metrics`). This metric should accept `report_date` and `masthead` as parameters, allowing users to dynamically select these dimensions within Looker Studio. This approach drastically reduces the number of individual metrics, simplifies maintenance, and improves dashboard performance by leveraging fewer, more flexible queries.",78,ac6844f3-d867-4726-a3b5-14eed55cb7cb
portfolio_parent_group_name_fy26_sundry_adsales_account_29172,Hardcoded Logic|Anti-Pattern,"This metric hardcodes specific filter values for financial year ('2026'), revenue group subtype ('SUNDRY ADSALES OVERLAY'), and account number ('29172'). This creates a highly specific dimension that cannot be reused for other years, subtypes, or accounts without creating a new, nearly identical metric. This is an anti-pattern for flexible dashboards.",WHERE t0.financial_year = '2026' AND t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' AND t0.account_number = '29172',"Define a single 'Portfolio Parent Group Name' dimension without hardcoded filters. Utilize Looker Studio's built-in filter controls, parameters, or a data model view to apply these specific filters dynamically at the dashboard level. This promotes reusability and reduces metric sprawl.",79,1dff8d78-5d94-49fa-a2a5-086e3aaccd35
advertiser_group_fy26_sundry_adsales,Hardcoded Logic|Anti-Pattern,"Similar to the previous metric, this dimension hardcodes the financial year ('2026') and revenue group subtype ('SUNDRY ADSALES OVERLAY'). This limits its utility and forces the creation of duplicate metrics for different filter combinations.",WHERE t0.financial_year = '2026' AND t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY',"Create a generic 'Advertiser Group' dimension. Apply financial year and revenue group subtype filters using dashboard controls or parameters in Looker Studio, allowing users to select desired values without requiring new metric definitions.",79,1dff8d78-5d94-49fa-a2a5-086e3aaccd35
portfolio_conformed_name_current_filtered_adsize,Hardcoded Logic|Anti-Pattern,"This metric hardcodes specific 'adsize_name' values. While useful for a specific report, defining a new metric for each set of adsize filters is inefficient and prone to errors if the list of ad sizes changes or expands.","WHERE t0.adsize_name IN ('Newsletter Driver (pav)', 'daily newsletter (1 of 1) - medrec')","Define a base 'Portfolio Conformed Name' dimension. Implement adsize filtering via a Looker Studio filter control, allowing users to select from available ad sizes. For complex or frequently used adsize groupings, consider creating a lookup table or a view that categorizes ad sizes, which can then be joined or filtered upon.",79,1dff8d78-5d94-49fa-a2a5-086e3aaccd35
portfolio_group_name_current_fy25_sundry_adsales,Hardcoded Logic|Anti-Pattern,"This metric hardcodes the financial year ('2025') and revenue group subtype ('SUNDRY ADSALES OVERLAY'). This is a direct duplication of the anti-pattern seen in other metrics, leading to redundant definitions for different financial years.",WHERE t0.financial_year = '2025' AND t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY',"Consolidate into a single 'Portfolio Group Name' dimension. Leverage dashboard-level filters or parameters for financial year and revenue group subtype selection, enabling dynamic reporting without metric duplication.",79,1dff8d78-5d94-49fa-a2a5-086e3aaccd35
financial_short_month_name_excluding_fy24_with_min_month_num,Hardcoded Logic,"This metric explicitly excludes '2024' from the financial year. While this might be a specific business requirement, hardcoding exclusions within the metric definition reduces its flexibility and requires a new metric if other years need to be excluded or included.",WHERE (t0.financial_year NOT IN ('2024') OR t0.financial_year IS NULL),"For general month ordering, use the 'financial_short_month_name_with_min_month_num' metric. If specific year exclusions are frequently needed, implement them as dashboard-level filters or parameters. Alternatively, if the exclusion logic is complex and stable, consider a view in BigQuery that pre-filters data for specific reporting contexts.",79,1dff8d78-5d94-49fa-a2a5-086e3aaccd35
article_dominant_section_1_filtered,Anti-Pattern,"Three distinct dimension metrics (`Article Dominant Section 1 (Filtered)`, `Article ID (Filtered)`, `Category Topic Path (Filtered)`) apply the identical filtering logic (`categorytopic_path IS NOT NULL AND categorytopic_path != ''`) directly within their individual SQL definitions. This indicates a lack of a centralized, reusable data model or view for filtered data, leading to redundant code and potential inconsistencies if the filter logic needs to change.",WHERE NOT(t0.categorytopic_path IS NULL) AND t0.categorytopic_path != '',"Create a BigQuery view (e.g., `v_filtered_registration_details`) that applies this common filter, and then have these metrics select from that view. This improves maintainability, consistency, and potentially query performance by allowing for view materialization or optimization.",80,35de2eed-9c03-48a7-8cef-50e2ea1e1235
article_id_filtered,Anti-Pattern,"Three distinct dimension metrics (`Article Dominant Section 1 (Filtered)`, `Article ID (Filtered)`, `Category Topic Path (Filtered)`) apply the identical filtering logic (`categorytopic_path IS NOT NULL AND categorytopic_path != ''`) directly within their individual SQL definitions. This indicates a lack of a centralized, reusable data model or view for filtered data, leading to redundant code and potential inconsistencies if the filter logic needs to change.",WHERE NOT(t0.categorytopic_path IS NULL) AND t0.categorytopic_path != '',"Create a BigQuery view (e.g., `v_filtered_registration_details`) that applies this common filter, and then have these metrics select from that view. This improves maintainability, consistency, and potentially query performance by allowing for view materialization or optimization.",80,35de2eed-9c03-48a7-8cef-50e2ea1e1235
category_topic_path_filtered,Anti-Pattern,"Three distinct dimension metrics (`Article Dominant Section 1 (Filtered)`, `Article ID (Filtered)`, `Category Topic Path (Filtered)`) apply the identical filtering logic (`categorytopic_path IS NOT NULL AND categorytopic_path != ''`) directly within their individual SQL definitions. This indicates a lack of a centralized, reusable data model or view for filtered data, leading to redundant code and potential inconsistencies if the filter logic needs to change.",WHERE NOT(t0.categorytopic_path IS NULL) AND t0.categorytopic_path != '',"Create a BigQuery view (e.g., `v_filtered_registration_details`) that applies this common filter, and then have these metrics select from that view. This improves maintainability, consistency, and potentially query performance by allowing for view materialization or optimization.",80,35de2eed-9c03-48a7-8cef-50e2ea1e1235
total_registrations_federal_election_websites,Hardcoded Logic,"The `Total Registrations - Federal Election & Specific Websites` metric contains multiple hardcoded values and complex `REGEXP_CONTAINS` logic for filtering. The date range (`2025-01-01` to `2025-04-11`) is static, the 'federal-election' string is repeated across four different fields using verbose OR conditions, and the list of websites is hardcoded within a regex. This makes the metric inflexible for different time periods or content/website definitions, difficult to update, and prone to errors.","t0.SubscriptionDateTime >= TIMESTAMP '2025-01-01' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-11', INTERVAL 1 DAY) AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.ArticleDominantSection1 AS STRING), 'federal-election') OR SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.ArticleDominantSection2 AS STRING), 'federal-election') OR SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.ArticleDominantSection3 AS STRING), 'federal-election') OR SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'federal-election')) AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')","For the date range, utilize Looker Studio's native date range controls or parameters instead of hardcoding. For content and website filters, create and leverage lookup tables (e.g., `dim_election_topics`, `dim_news_websites`) in BigQuery and join to them. This centralizes the logic, makes it reusable across metrics, and significantly improves readability and maintainability. Alternatively, for the 'federal-election' filter, consider a derived field or view that flags `is_federal_election_content`.",80,35de2eed-9c03-48a7-8cef-50e2ea1e1235
all_metrics,Anti-Pattern,"All metrics and dimensions on this dashboard utilize an identical, complex `WITH base_data` Common Table Expression (CTE). This leads to redundant query execution for each component, increasing query costs and execution times. Any change to the base data logic requires updating multiple, separate SQL definitions, introducing a high risk of inconsistency and maintenance overhead.","WITH base_data AS (
  SELECT
    re.transaction_id
  FROM
    `ncau-data-newsquery-prd.prstn_finance.calendar_dim` AS a
  JOIN
    `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base` AS b
    ON a.calendar_date BETWEEN DATE(b.dw_effective_start_datetime) AND LEAST(DATE(b.dw_effective_end_datetime), CURRENT_DATE(""Australia/Sydney""))
    AND b.classification_level_2 <> 'Brand Registration'
  JOIN
    `ncau-data-newsquery-sit.qvr_consumer.Publication_codes_Rewards` AS rd
    ON rd.order_code = b.publication_code
  LEFT JOIN
    `ncau-data-newsquery-prd.sdm_rewards.plus_rewards` AS re
    ON re.newscorp_member_id = b.subscriber_id_src
  WHERE
    a.calendar_date BETWEEN '2022-07-04' AND CURRENT_DATE()
    AND b.dw_source_system_code = 'THINK'
    AND re.transaction_id IS NOT NULL
)","Refactor the common base data logic into a single, reusable Looker Studio custom query or a BigQuery view. This centralized approach will improve performance by allowing the data source to be queried once, reduce costs, and significantly enhance maintainability and consistency across the dashboard.",81,4218059f-a15e-4c99-90f5-75f7a1ef6792
total_transactions_filtered_date,Hardcoded Logic,"The 'Total Transactions (Selected Date Range)' metric contains a hardcoded date filter (`2025-02-25` to `2025-03-03`). This prevents the dashboard's date range control from dynamically filtering the data, rendering the 'Selected Date Range' description misleading and providing static, potentially outdated results.","WHERE
  transaction_datetime >= DATETIME '2025-02-25T00:00:00' AND transaction_datetime <= DATETIME '2025-03-03T23:59:59.999999'","Replace the hardcoded date filter with Looker Studio's built-in date range parameters (e.g., `@DS_START_DATE` and `@DS_END_DATE`) to allow dynamic filtering based on user selection. Ensure the `transaction_datetime` field is correctly recognized by Looker Studio as a date dimension.",81,4218059f-a15e-4c99-90f5-75f7a1ef6792
unique_members_rewards_filtered_date,Hardcoded Logic,"Similar to the transaction metric, 'Unique Members with Rewards Transactions (Selected Date Range)' also uses a hardcoded date filter (`2023-07-01`). This is problematic for the same reasons as above, and the use of a *different* hardcoded date range compared to `total_transactions_filtered_date` introduces inconsistency and potential data discrepancies between related metrics.","WHERE
  transaction_datetime >= DATETIME '2023-07-01T00:00:00'",Standardize date filtering across all 'Selected Date Range' metrics by using Looker Studio's dynamic date range parameters. This will ensure consistency and allow users to interactively analyze data for any desired period.,81,4218059f-a15e-4c99-90f5-75f7a1ef6792
offer_category_dimension,Hardcoded Logic,"The 'Offer Category' dimension query includes a hardcoded date filter (`2025-02-25` to `2025-03-03`). This means the list of available offer categories is limited to those present within this specific, fixed date range, potentially excluding categories that existed outside this period. Dimensions should typically reflect all possible values unless explicitly constrained by the dashboard's dynamic date filter.","WHERE
  calendar_date >= DATE '2025-02-25' AND calendar_date <= DATE '2025-03-03' AND offer_category IS NOT NULL","Remove the hardcoded date filter from dimension queries. Dimensions should generally provide a comprehensive list of values. If filtering by date is required, it should be applied dynamically via the dashboard's date range control, affecting the data displayed, not the dimension values themselves.",81,4218059f-a15e-4c99-90f5-75f7a1ef6792
offer_title_dimension,Hardcoded Logic,"The 'Offer Title' dimension query also contains a hardcoded date filter (`2025-02-25` to `2025-03-03`), mirroring the issue found in the 'Offer Category' dimension. This restricts the available offer titles to a fixed period, limiting the utility of the dimension for broader analysis.","WHERE
  transaction_datetime >= DATETIME '2025-02-25T00:00:00' AND transaction_datetime <= DATETIME '2025-03-03T23:59:59.999999' AND offer_title IS NOT NULL","Remove the hardcoded date filter from this dimension query for the same reasons as 'Offer Category'. Allow the dashboard's date range control to dynamically filter the data, not the dimension values.",81,4218059f-a15e-4c99-90f5-75f7a1ef6792
multiple_metrics,Anti-Pattern,"Several metrics (`total_transactions_filtered_date`, `unique_members_rewards_filtered_date`, `offer_title_dimension`) rely on parsing a string-based `re.transaction_date` column into a `DATETIME` type using `PARSE_DATETIME('%d/%m/%Y %I:%M%p', re.transaction_date)`. This repeated parsing is inefficient, adds computational overhead to each query, and is susceptible to errors if the source string format changes. It suggests that the `transaction_date` column in the `plus_rewards` table is not stored in an optimal data type.","PARSE_DATETIME('%d/%m/%Y %I:%M%p', re.transaction_date) AS transaction_datetime","Investigate the `plus_rewards` table schema. Ideally, `transaction_date` should be stored as a native `DATETIME` or `TIMESTAMP` type at the source. If direct modification of the source table is not feasible, consider creating a materialized view or a dedicated column in an intermediate layer that pre-parses and stores this date as a proper `DATETIME` type, which can then be directly referenced by all dashboard queries.",81,4218059f-a15e-4c99-90f5-75f7a1ef6792
"total_unique_opens_filtered_newsletters, total_unique_clicks_filtered_newsletters, total_newsletter_sends_count_filtered, max_total_sends_filtered_newsletters, total_clicks_filtered_newsletters",Anti-Pattern / Hardcoded Logic,"Multiple newsletter metrics utilize extremely long and complex `REGEXP_CONTAINS` statements for both including and excluding `newsletter_send_email_name` values. This approach is highly brittle, difficult to read, maintain, and prone to errors as newsletter types evolve. It violates the DRY (Don't Repeat Yourself) principle by embedding business logic directly into multiple metric definitions, making central management impossible.","SAFE.REGEXP_CONTAINS(t0c1d0.newsletter_send_email_name, 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape |Delicious |Beauty EDM|Vogue Living Weekly|BSL_|VA newsletter') AND NOT(SAFE.REGEXP_CONTAINS(t0c1d0.newsletter_send_email_name, 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT|MARKETING|Special Offer|Rewards|EVENT|Not Available|_Suspend|_Failed|Abandon|Reinforcement|System|Connect|_Lead_Nurture|Rewards_|_Wave|Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Delivery_Issue|Decommission|Switch|Modify|Cancellation|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause|Triggered|Journey|Winback|WINBACK|Newspass|NEWSPASS|Feature-led'))","Create a dedicated lookup table (e.g., `newsletter_email_type_mapping`) that categorizes `newsletter_send_email_name` into relevant business types (e.g., 'Promotional', 'Editorial', 'System', 'Test'). Join to this lookup table and filter on a clean, governed category column. This centralizes business logic, improves readability, and simplifies maintenance.",82,036fca1f-85fc-4041-a6b7-b917bd0d4f92
"total_additions_dt_consumer_budget, total_cancels_dt_consumer_budget, net_movement_dt_consumer_budget",Hardcoded Logic / Data Mismatch (Potential),"The SQL logic for planning metrics includes a hardcoded date (`2025-08-26`) for filtering by ISO week. This means the dashboard will consistently display data for the ISO week containing this specific date, regardless of the current date or any date filters applied by the user in Looker Studio. This severely limits the dashboard's utility for dynamic or current period analysis, contradicting the 'At-A-Glance' nature.","SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(TIMESTAMP '2025-08-26 02:10:41.682916+00', 'UTC') AS DATETIME), ISOWEEK) AS DATE) = SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.last_day_of_week AS DATETIME), ISOWEEK) AS DATE)","Replace the hardcoded date with a dynamic date parameter from Looker Studio (e.g., a date range filter or a specific date control). Ensure the underlying data source supports dynamic date filtering. If the intent is to show a specific 'budget' week, this should be clearly communicated to users and potentially managed via a dashboard parameter rather than being hardcoded in the SQL.",82,036fca1f-85fc-4041-a6b7-b917bd0d4f92
"All subscriber and push message metrics, and some newsletter metrics",Hardcoded Logic / Anti-Pattern,"Across various metric categories, there is a repeated pattern of using `STRPOS`, `IN` clauses, or direct equality checks with hardcoded string values for categorical filters such as `combined_masthead`, `publication_name`, `combined_customer_type`, `classification_level_2`, and `newsletter_brand`. This approach, while functional for a small, static set of values, becomes a maintenance burden and a source of inconsistency if these business categories change or expand, requiring manual updates across multiple SQL definitions.","STRPOS(t0.combined_masthead, 'DT') > 0; t0_subscription_detail.classification_level_2 IN ('Digital', 'Bundles', 'DPE only', 'Essentials'); t0.publication_name = 'The Daily Telegraph'; (t0c1d0.newsletter_brand = 'TheAdvertiser' OR t0c1d0.newsletter_brand = 'The Advertiser')","For frequently used and potentially evolving categorical filters, consider creating or leveraging governed dimension tables (lookup tables) for mastheads, classification levels, customer types, and newsletter brands. Join to these tables and filter by a more stable ID or a well-governed name. This centralizes business logic, improves readability, and allows for easier updates. For `newsletter_brand`, consider data cleaning at the source to standardize variations like 'TheAdvertiser' and 'The Advertiser'.",82,036fca1f-85fc-4041-a6b7-b917bd0d4f92
multiple_metrics,Anti-Pattern,"The same complex `WHERE` clause, including a `CASE` statement for masthead categorization and specific `classification_level` and `delivery_medium_type` filters, is duplicated across all five metrics. This indicates a lack of centralized data modeling or view creation, leading to high maintenance overhead and potential for inconsistencies if the business logic for these filters changes.","WHERE
    (CASE WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals' WHEN (t0.masthead = 'WT') THEN 'Other Publications' WHEN (t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications' WHEN (t0.masthead IS NULL) THEN 'check' ELSE 'Exclude' END) != 'Exclude'
    AND (t0.classification_level_1 IN ('Standard Paid', 'Other Paid') OR t0.table_nm = 'budfor_cancel')
    AND (t0.classification_level_2 IN ('Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Print-only') OR t0.table_nm = 'budfor_cancel')","Create a base view or a common CTE (Common Table Expression) in BigQuery that encapsulates these standard filtering and categorization rules. This view should be the primary source for all dashboard metrics, ensuring consistency, improving readability, and simplifying maintenance. This would significantly improve the true consolidation of the data layer.",83,564463c2-6eea-426b-9c38-73e8b0d563f4
masthead_group_digital_cs,Hardcoded Logic,"The `masthead_group_level_1` dimension uses a hardcoded `CASE` statement to categorize mastheads. While functional, this approach is brittle; any change to masthead groupings requires direct SQL modification in this metric and potentially others. The presence of 'Exclude' as a category also suggests potential data quality issues or incomplete mapping.","CASE WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community' WHEN (t0.masthead = 'TA') THEN 'The Australian and Prestige' WHEN (t0.masthead IN ('PU', 'RN')) THEN 'Commercial Content' WHEN (t0.masthead IN ('TS')) THEN 'Free & Lifestyle' ELSE 'Exclude' END","Externalize masthead categorization into a dedicated lookup table (e.g., `dim_masthead_groupings`) in BigQuery. This table would map `masthead` to `masthead_group_level_1`. The SQL would then use a `JOIN` to this lookup table, making updates easier, more governed, and preventing the need for SQL changes when business rules evolve.",83,564463c2-6eea-426b-9c38-73e8b0d563f4
earliest_fiscal_week_dt,Anti-Pattern,"The fiscal week calculation is excessively complex, deeply nested, and contains hardcoded fiscal year (`FY2025`) and specific date literals (`2025-06-25`, `2024-07-03`). This makes the metric non-reusable for other fiscal years, difficult to understand, and highly prone to errors. The `CONCAT(...) = 'a' THEN 'a' ELSE CONCAT(...)` pattern is also highly unusual and suggests potential issues in the original generation or intent.","MIN(
        CASE WHEN (CONCAT('FY','2025',' ','Week ',SAFE_CAST( (CASE WHEN ((EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney'))) - 1) <= 2) THEN (DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)-1) ELSE DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) AS STRING),' (',SAFE_CAST( (CASE WHEN (t0.fy_week_of_year = (CASE WHEN ((EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney'))) - 1) <= 2) THEN (DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)-1) ELSE DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END)) THEN (CASE WHEN (t0.fy_month_of_year = 7) THEN 'January' WHEN (t0.fy_month_of_year = 8) THEN 'February' WHEN (t0.fy_month_of_year = 9) THEN 'March' WHEN (t0.fy_month_of_year = 10) THEN 'April' WHEN (t0.fy_month_of_year = 11) THEN 'May' WHEN (t0.fy_month_of_year = 12) THEN 'June' WHEN (t0.fy_month_of_year = 1) THEN 'July' WHEN (t0.fy_month_of_year = 2) THEN 'August' WHEN (t0.fy_month_of_year = 3) THEN 'September' WHEN (t0.fy_month_of_year = 4) THEN 'October' WHEN (t0.fy_month_of_year = 5) THEN 'November' WHEN (t0.fy_month_of_year = 6) THEN 'December' ELSE NULL END) ELSE NULL END) AS STRING),')') = 'a') THEN 'a' ELSE CONCAT('FY','2025',' ','Week ',SAFE_CAST( (CASE WHEN ((EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney'))) - 1) <= 2) THEN (DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)-1) ELSE DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) AS STRING),' (',SAFE_CAST( (CASE WHEN (t0.fy_week_of_year = (CASE WHEN ((EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney'))) - 1) <= 2) THEN (DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)-1) ELSE DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-25 09:37:30.995996+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END)) THEN (CASE WHEN (t0.fy_month_of_year = 7) THEN 'January' WHEN (t0.fy_month_of_year = 8) THEN 'February' WHEN (t0.fy_month_of_year = 9) THEN 'March' WHEN (t0.fy_month_of_year = 10) THEN 'April' WHEN (t0.fy_month_of_year = 11) THEN 'May' WHEN (t0.fy_month_of_year = 12) THEN 'June' WHEN (t0.fy_month_of_year = 1) THEN 'July' WHEN (t0.fy_month_of_year = 2) THEN 'August' WHEN (t0.fy_month_of_year = 3) THEN 'September' WHEN (t0.fy_month_of_year = 4) THEN 'October' WHEN (t0.fy_month_of_year = 5) THEN 'November' WHEN (t0.fy_month_of_year = 6) THEN 'December' ELSE NULL END) ELSE NULL END) AS STRING),')') END)","Implement a robust and dynamic fiscal calendar dimension table (e.g., `dim_fiscal_calendar`) that pre-calculates fiscal year, week, and month strings based on a date column. The metric should then simply join to this dimension table and select the appropriate fiscal week string based on the relevant date column from `acquisitions_cancellations_movements`. This will make the logic reusable, maintainable, and less error-prone.",83,564463c2-6eea-426b-9c38-73e8b0d563f4
brand_group_other_publisher_national_basic_demographics,Hardcoded Logic,"The SQL logic for this metric includes a hardcoded `IN` clause for `Brands`, which is explicitly noted as a truncated list from a much longer original. This practice is a significant anti-pattern for data governance and maintainability. It makes the dashboard highly susceptible to displaying incomplete or inaccurate data if the list of relevant brands changes, and requires manual SQL updates for any modifications, increasing the risk of errors and maintenance overhead. This also indicates a lack of a centralized, governed source for brand definitions.","AND SAFE_CAST(t0.Brands AS STRING) IN ('Adelaide Advertiser - TOTAL (Print or Digital)', 'AFL Record* (Apr-Sep)', 'Agoda', 'Airbnb')","Replace the hardcoded `IN` clause with a join to a dedicated, governed lookup table for brands. This table should contain all relevant brand identifiers and their associated properties, managed centrally. Alternatively, if the list of brands is derived from specific business rules, consider a subquery that dynamically fetches these brands. This approach significantly improves maintainability, scalability, and data accuracy by decoupling business logic from the metric definition.",84,e0552be8-36bd-484d-aa60-b531621651c0
audience_segment_detail_national_filtered,Anti-Pattern,"The `CASE` statement used to construct the `audience_segment_detail` is highly repetitive. It applies the exact same `CONCAT(subcategory, ' - ', descriptiontext)` logic for multiple distinct `questioncode` values ('MEN-AGE', 'WOMEN-AGE', 'MARRIAGE', 'SEX', 'AGE', 'AUDIEN'). While functionally correct, this pattern is not scalable; adding new `questioncode` values requiring the same transformation would necessitate adding another identical `WHEN` clause, increasing code verbosity and maintenance effort. This indicates an opportunity for code simplification and improved readability.","CASE
        WHEN (SAFE_CAST(t0.questioncode AS STRING) = 'MEN-AGE') THEN CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))
        WHEN (SAFE_CAST(t0.questioncode AS STRING) = 'WOMEN-AGE') THEN CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))
        WHEN (SAFE_CAST(t0.questioncode AS STRING) = 'MARRIAGE') THEN CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))
        WHEN (SAFE_CAST(t0.questioncode AS STRING) = 'SEX') THEN CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))
        WHEN (SAFE_CAST(t0.questioncode AS STRING) = 'AGE') THEN CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))
        WHEN (SAFE_CAST(t0.questioncode AS STRING) = 'AUDIEN') THEN CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))
        ELSE NULL
    END","Refactor this repetitive `CASE` statement. If the concatenation logic is universally applied to a specific, finite set of `questioncode`s, consider filtering for these `questioncode`s in the `WHERE` clause using an `IN` operator, and then applying a single `CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING))` in the `SELECT` statement. This would make the code more concise, easier to read, and simpler to manage. For example: `SELECT CONCAT(SAFE_CAST(t0.subcategory AS STRING),' - ',SAFE_CAST(t0.descriptiontext AS STRING)) AS audience_segment_detail FROM ... WHERE SAFE_CAST(t0.questioncode AS STRING) IN ('MEN-AGE', 'WOMEN-AGE', 'MARRIAGE', 'SEX', 'AGE', 'AUDIEN')`.",84,e0552be8-36bd-484d-aa60-b531621651c0
distinct_job_count_audit_log_query_type_q1,Hardcoded Logic,"This metric employs multiple hardcoded, fixed date ranges ('2024-07-01' to '2025-01-10' and '2024-10-01' to '2025-01-01') within its WHERE clause. This approach makes the dashboard static, requiring manual updates to maintain data currency. The presence of overlapping and distinct fixed date ranges also introduces unnecessary complexity and potential for confusion regarding the actual data window being analyzed.","WHERE
  DATE(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime) BETWEEN ""2024-07-01"" AND ""2025-01-10""
  AND SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime AS TIMESTAMP) >= TIMESTAMP '2024-10-01'
  AND SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime AS TIMESTAMP) < TIMESTAMP_ADD(TIMESTAMP '2025-01-01', INTERVAL 1 DAY)","Replace fixed date ranges with dynamic relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to ensure the dashboard remains current without manual intervention. Alternatively, leverage Looker Studio's built-in date range controls. Ensure date filters are consistently applied and clearly defined.",85,e2bcf559-c73c-4b2b-beb7-4f69084103a2
distinct_job_count_info_schema_date_query_type_q2,Hardcoded Logic,"Similar to other metrics, this one uses a hardcoded, fixed date range ('2024-07-01' to '2025-01-10'), which will lead to data staleness. Additionally, the `WHERE` clause contains redundant logic: `(CASE WHEN total_bytes_billed > 0 THEN 'Billed' ELSE 'Unbilled' END) IN ('Unbilled', 'Billed')`. This condition will always evaluate to true and adds no effective filtering, unnecessarily complicating the query.","WHERE
  DATE(creation_time) BETWEEN ""2024-07-01"" AND ""2025-01-10""
  AND (CASE WHEN total_bytes_billed > 0 THEN 'Billed' ELSE 'Unbilled' END) IN ('Unbilled', 'Billed')","Implement dynamic relative date functions instead of fixed dates. Remove the redundant `IN ('Unbilled', 'Billed')` clause as it serves no functional purpose.",85,e2bcf559-c73c-4b2b-beb7-4f69084103a2
total_data_cost_audit_log_date_q3,Hardcoded Logic,"This metric calculates cost using 'magic numbers' (`6.25 * 1.5 / POW(2, 40)`) directly embedded in the SQL. These factors represent pricing assumptions that are not clearly defined or easily modifiable, making the calculation brittle if pricing changes. Furthermore, it suffers from multiple, inconsistent hardcoded date ranges ('2024-07-01' to '2025-01-25' and '2024-10-01' to '2025-01-12'), which are confusing and will lead to data staleness. This metric is also a near-duplicate of `q6`.","SUM(SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalBilledBytes AS BIGNUMERIC) * 6.25 * 1.5 / POW(2, 40)) AS total_data_cost
WHERE
  DATE(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime) BETWEEN ""2024-07-01"" AND ""2025-01-25""
  AND SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime AS TIMESTAMP) >= TIMESTAMP '2024-10-01'
  AND SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime AS TIMESTAMP) < TIMESTAMP_ADD(TIMESTAMP '2025-01-12', INTERVAL 1 DAY)","Externalize cost factors as named constants or parameters for better maintainability and clarity. Consolidate date filtering to a single, dynamic relative date range or leverage dashboard controls. This metric should be consolidated with `q6` to eliminate redundancy.",85,e2bcf559-c73c-4b2b-beb7-4f69084103a2
total_data_cost_audit_log_date_specific_range_q6,Anti-Pattern,"This metric is a near-duplicate of `total_data_cost_audit_log_date_q3`. Both calculate total data cost from audit logs using the same hardcoded query pattern and similar fixed date ranges. The primary difference is the absence of the additional timestamp filters found in `q3`. This redundancy creates unnecessary maintenance overhead, increases the risk of inconsistencies, and indicates a lack of proper metric consolidation.","SELECT
  SAFE_CAST(DATETIME_TRUNC(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime, SECOND) AS DATE) AS creation_date,
  SUM(SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalBilledBytes AS BIGNUMERIC) * 6.25 * 1.5 / POW(2, 40)) AS total_data_cost
FROM
  `ncau-data-newsquery-prd.ops_prd_bq_logs.cloudaudit_googleapis_com_data_access`
WHERE
  DATE(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime) BETWEEN ""2024-07-01"" AND ""2025-01-10""
  AND SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.query.query AS STRING) LIKE 'SELECT MAX(dw_partition_date) AS dw_partition_date FROM sdm_profisee.profisee_data %'","Consolidate `q3` and `q6` into a single, well-defined metric. If different date ranges or filtering criteria are genuinely required for distinct business questions, create separate metrics with clear, non-overlapping definitions and dynamic date logic.",85,e2bcf559-c73c-4b2b-beb7-4f69084103a2
all_metrics,Hardcoded Logic,"All metrics in this dashboard rely on a highly specific and hardcoded `LIKE` pattern for filtering BigQuery queries (`'SELECT MAX(dw_partition_date) AS dw_partition_date FROM sdm_profisee.profisee_data %'`). While this defines the current scope, any future change to this exact query pattern (e.g., minor syntax updates, schema changes, or different data sources for 'profisee_data') will simultaneously break all metrics, making the dashboard brittle and difficult to maintain.",AND SAFE_CAST(query AS STRING) LIKE 'SELECT MAX(dw_partition_date) AS dw_partition_date FROM sdm_profisee.profisee_data %',"Evaluate if this specific query pattern is the most robust way to identify the target jobs. Consider alternative, more resilient identification methods such as BigQuery job labels, a broader query pattern that accounts for variations, or a lookup table that maps job types to their identifying characteristics. This would decouple the dashboard from exact query string matching.",85,e2bcf559-c73c-4b2b-beb7-4f69084103a2
source_data_availability_status,Hardcoded Logic,"The metric uses a hardcoded `CASE` statement to define 'Green', 'Yellow', and 'Red' statuses based on fixed date intervals (2 and 3 days from `CURRENT_DATE()`). This approach makes the freshness thresholds inflexible and difficult to manage or update centrally without modifying the metric's SQL logic directly.","CASE WHEN MAX(COALESCE(CAST(b.date_start AS DATE), DATE('1900-01-01'))) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) THEN 'Green' WHEN MAX(COALESCE(CAST(b.date_start AS DATE), DATE('1900-01-01'))) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY) THEN 'Yellow' ELSE 'Red' END","Externalize freshness thresholds into a configuration table or a dedicated lookup table. This allows for dynamic updates and consistent application of rules across multiple metrics or dashboards, improving maintainability and governance.",86,9a4e088f-264b-4a51-a6fc-165ab8c1230a
data_ingestion_job_status,Logical Error|Hardcoded Logic|Anti-Pattern,"This metric contains a critical logical error. The condition `'Google Ads' = 'SA360'` will always evaluate to `FALSE`, effectively making the SA360-specific 'Green' rule unreachable. Additionally, the subsequent 'Green' condition (`>= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) is stricter than the 'Yellow' condition (`>= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY)`), meaning if the 'Green' condition is met, the 'Yellow' condition will never be reached, indicating a flaw in the `CASE` statement's logical order. The thresholds are also hardcoded.","CASE WHEN 'Google Ads' = 'SA360' AND MAX(COALESCE(dw_partition_date, DATE('1900-01-01'))) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) THEN 'Green' WHEN MAX(COALESCE(dw_partition_date, DATE('1900-01-01'))) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) THEN 'Green' WHEN MAX(COALESCE(dw_partition_date, DATE('1900-01-01'))) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) THEN 'Yellow' ELSE 'Red' END","1. Correct the `'Google Ads' = 'SA360'` comparison to dynamically identify the data source (e.g., via a source_id column or a join to a source metadata table). 2. Re-evaluate and reorder the `CASE WHEN` conditions to ensure correct logical flow and proper application of SA360-specific rules before general rules. 3. Externalize freshness thresholds into a configuration or lookup table for better maintainability and consistency across different data sources.",86,9a4e088f-264b-4a51-a6fc-165ab8c1230a
presentation_layer_availability_status,Hardcoded Logic,"Similar to other status metrics, this uses a hardcoded `CASE` statement for 'Green', 'L_Green', 'Yellow', and 'Red' statuses based on fixed date intervals (1, 2, and 3 days from `CURRENT_DATE()`). This approach limits flexibility and central management of freshness rules for the presentation layer.","CASE WHEN MAX(report_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) THEN 'Green' WHEN MAX(report_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) THEN 'L_Green' WHEN MAX(report_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 DAY) THEN 'Yellow' ELSE 'Red' END","Externalize freshness thresholds and status definitions into a configuration or lookup table. This would allow for easier modification of rules and promote consistency across reporting, especially if other presentation layer dashboards exist.",86,9a4e088f-264b-4a51-a6fc-165ab8c1230a
data_source_name,Hardcoded Logic|Anti-Pattern,"The data source name is hardcoded as 'Facebook'. Given that the dashboard's business description and other metrics (e.g., 'data_ingestion_job_status' querying `sdm_googleads`) imply a multi-source dashboard, this hardcoding prevents dynamic reporting of the actual source and significantly hinders consolidation efforts. If the dashboard is meant to consolidate multiple sources, this metric will always incorrectly display 'Facebook' for all sources.",SELECT DISTINCT 'Facebook' AS data_source FROM `ncau-data-newsquery-prd.sdm_facebook.ad_insights` LIMIT 1,"If this dashboard is intended to consolidate multiple sources, the data source name should be derived dynamically, perhaps from a source identifier column in the data or a metadata table that maps source IDs to human-readable names. If this specific metric is *only* for Facebook, it should be clearly named as such (e.g., 'Facebook Source Name') to avoid confusion in a consolidated view.",86,9a4e088f-264b-4a51-a6fc-165ab8c1230a
data_source_code,Hardcoded Logic|Anti-Pattern,"Similar to 'data_source_name', the data source code is hardcoded as 'FCBK'. This prevents dynamic reporting of the actual source code in a multi-source context and limits the dashboard's ability to consolidate information effectively across different advertising platforms.",SELECT DISTINCT 'FCBK' AS data_source_code FROM `ncau-data-newsquery-prd.sdm_facebook.ad_insights` LIMIT 1,"The data source code should be derived dynamically from the data or a metadata table if the dashboard aims to consolidate multiple sources. If this metric is specific to Facebook, its naming should reflect that to prevent misinterpretation.",86,9a4e088f-264b-4a51-a6fc-165ab8c1230a
all_metrics,Anti-Pattern,"The `engagement_data_txfm1` and `engagement_data_txfm2` Common Table Expressions (CTEs) are almost identical and are repeated verbatim across all seven metrics. This leads to redundant computation, increased query execution time, and significant maintenance overhead. Any change to the base data transformation requires updating every single metric's SQL.","WITH
  engagement_data_txfm1 AS (
    SELECT
      sef.pcs_id,
      sef.brand,
      sef.site_section,
      sef.article_id,
      sef.pcs_id AS subscriber_id_src,
      CASE
        WHEN sef.site_section IN ('digitalprintedition', 'digitalprinteditions', ""today's paper"") THEN 'digitaledition'
        WHEN sef.site_section IS null THEN 'no_section'
        ELSE sef.site_section
      END AS derived_site_section,
      count(1) OVER (PARTITION BY sef.pcs_id) AS total_records_by_pcsid,
      sef.total_page_views AS page_view_count,
      CASE
        WHEN sef.article_id IS NOT null AND sef.total_page_views > 0 THEN sef.total_page_views
        ELSE 0
      END AS article_view_count,
      CAST(sef.visit_timestamp AS date) AS au_activity_date,
      CAST(sef.visit_timestamp AS datetime) AS au_activity_datetime,
      sef.seconds_spent,
      CASE
        WHEN sef.seconds_spent = 0 THEN 0
        ELSE sef.total_page_views
      END AS page_view_with_time_on_page,
      coalesce(psb.subscriber_mosaic_title, 'Not Available') AS subscriber_mosaic_title
    FROM
      `ncau-data-newsquery-prd.bdm_consumer.subscriber_engagement_fct` AS sef
      LEFT JOIN
      (
        SELECT
          psb.subscriber_id_src,
          psb.subscriber_mosaic_title,
          psb.masthead
        FROM
          `ncau-data-newsquery-prd.prstn_consumer.subscription_base` AS psb
        WHERE
          1 = 1 AND psb.dw_tgt_partition_date = date_sub(`CURRENT_DATE`('Australia/Sydney'), INTERVAL 1 day) AND
          psb.masthead IN (""TA"", ""DT"", ""CM"", ""HS"", ""AA"")
        GROUP BY 1, 2, 3
      ) AS psb
      ON CAST(sef.pcs_id AS string) = CAST(psb.subscriber_id_src AS string)
    WHERE
      1 = 1 AND CAST(sef.dw_src_partition_date AS date) BETWEEN date_sub(date('2025-06-01'), INTERVAL 2 day) AND
      date_add(date_sub(`CURRENT_DATE`('Australia/Sydney'), INTERVAL 1 day), INTERVAL 2 day) AND CAST(sef.visit_timestamp AS date) BETWEEN date('2025-06-01') AND
      date_sub(`CURRENT_DATE`('Australia/Sydney'), INTERVAL 1 day) AND sef.pcs_id NOT IN ('')
  ),
  engagement_data_txfm2 AS (
    SELECT
      edx1.subscriber_id_src,
      edx1.subscriber_mosaic_title,
      edx1.brand,
      edx1.derived_site_section,
      edx1.article_id,
      edx1.au_activity_date,
      edx1.au_activity_datetime,
      format_date('%A', edx1.au_activity_date) AS day_of_week,
      EXTRACT(hour FROM edx1.au_activity_datetime) AS hour_of_day,
      sum(edx1.page_view_count) AS total_page_view_count,
      sum(edx1.article_view_count) AS total_article_view_count,
      sum(edx1.seconds_spent) AS seconds_spent,
      sum(edx1.page_view_with_time_on_page) AS total_page_view_with_time_on_page
    FROM
      engagement_data_txfm1 AS edx1
    WHERE
      1 = 1 AND brand IN (""the australian"", 'herald sun', 'the courier mail', 'daily telegraph', 'the advertiser')
    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9
  )","Materialize `engagement_data_txfm1` and `engagement_data_txfm2` into a shared, governed data model (e.g., a BigQuery view or table) that all metrics can query. This will centralize logic, improve performance, and simplify maintenance.",87,ab333ebb-1c3d-4a64-8872-facfa657e825
all_metrics,Hardcoded Logic,"The SQL queries contain hardcoded future dates (`2025-06-01`) in the `WHERE` clause for `dw_src_partition_date` and `visit_timestamp`. This will result in the dashboard displaying no data or incomplete data until that future date, or indicates a placeholder that was not updated, making the dashboard unusable for current analysis.","CAST(sef.dw_src_partition_date AS date) BETWEEN date_sub(date('2025-06-01'), INTERVAL 2 day) AND
      date_add(date_sub(`CURRENT_DATE`('Australia/Sydney'), INTERVAL 1 day), INTERVAL 2 day) AND CAST(sef.visit_timestamp AS date) BETWEEN date('2025-06-01') AND
      date_sub(`CURRENT_DATE`('Australia/Sydney'), INTERVAL 1 day)","Replace hardcoded future dates with dynamic date logic (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`) or parameterize them for dashboard users to select a date range. Immediately investigate why a future date was used.",87,ab333ebb-1c3d-4a64-8872-facfa657e825
"unique_subscribers_by_brand, total_views_for_top_articles_overall",Anti-Pattern / Hardcoded Logic,"The `article_content_with_refined_topics` CTE uses a very long and complex `CASE` statement with multiple `LIKE` clauses on `ArticleHeadlineDefault` to classify `article_topic`, `topic_priority`, and `topic_confidence`. This logic is brittle, difficult to scale, prone to misclassification, and duplicated. It indicates a missing lookup table or a need for a more sophisticated, externalized classification system.","CASE
        WHEN(upper(acs.ArticleHeadlineDefault) LIKE '%ALBANESE%' OR upper(acs.ArticleHeadlineDefault) LIKE '%DUTTON%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%PARLIAMENT%' OR upper(acs.ArticleHeadlineDefault) LIKE '%ELECTION%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%VOTE%' OR upper(acs.ArticleHeadlineDefault) LIKE '%LABOR%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%LIBERAL%' OR upper(acs.ArticleHeadlineDefault) LIKE '%GREENS%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%GOVERNMENT%' OR upper(acs.ArticleHeadlineDefault) LIKE '%MINISTER%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%POLICY%') THEN 'Politics & Government'
        WHEN(upper(acs.ArticleHeadlineDefault) LIKE '%ECONOMY%' OR upper(acs.ArticleHeadlineDefault) LIKE '%INFLATION%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%INTEREST RATE%' OR upper(acs.ArticleHeadlineDefault) LIKE '%RBA%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%MARKET%' OR upper(acs.ArticleHeadlineDefault) LIKE '%BANK%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%ASX%' OR upper(acs.ArticleHeadlineDefault) LIKE '%BUSINESS%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%COMPANY%' OR upper(acs.ArticleHeadlineDefault) LIKE '%FINANCE%' OR
        upper(acs.ArticleHeadlineDefault) LIKE '%ECONOMIC%') THEN 'Economics & Business'
        ...","Replace the complex `CASE` statement with a join to a governed lookup table for article topics, keywords, and their classifications. For more dynamic or nuanced classification, consider implementing a dedicated data pipeline for topic extraction (e.g., using NLP) that populates a separate dimension table.",87,ab333ebb-1c3d-4a64-8872-facfa657e825
total_engagement_records_by_brand,Data Mismatch,"The business description for 'Total Engagement Records by Brand' states: 'The total count of engagement records (rows) from the underlying data, grouped by brand.' However, the SQL logic joins with `top_3_article_ids` (which identifies the top 3 articles overall) and counts records *only* related to these top 3 articles. This means the metric does not represent the total engagement records for a brand, but rather a subset, leading to a significant misrepresentation of the data.","FROM
  top_3_article_ids AS t3
  INNER JOIN
  engagement_data_txfm2 AS edx2
  ON t3.article_id = edx2.article_id AND t3.brand = edx2.brand
GROUP BY
  t3.brand","Either correct the SQL logic to truly count all engagement records by brand (e.g., `SELECT brand, COUNT(1) FROM engagement_data_txfm2 GROUP BY brand;`) or update the business description to accurately reflect that the metric is limited to engagement with the top 3 overall articles.",87,ab333ebb-1c3d-4a64-8872-facfa657e825
all_metrics,Hardcoded Logic,"The list of brands (`""the australian"", 'herald sun', 'the courier mail', 'daily telegraph', 'the advertiser'`) is hardcoded in the `WHERE` clause of `engagement_data_txfm2` across all metrics. This makes it difficult to update or extend the list of brands without modifying every query, and limits the flexibility of the dashboard.","WHERE
      1 = 1 AND brand IN (""the australian"", 'herald sun', 'the courier mail', 'daily telegraph', 'the advertiser')","Parameterize this list of brands or manage it via a lookup table that can be joined or referenced. This allows for easier maintenance and flexibility, enabling dynamic filtering or expansion of brands without code changes.",87,ab333ebb-1c3d-4a64-8872-facfa657e825
"current_fy_gross_revenue_filtered, previous_fy_gross_revenue_filtered",Hardcoded Logic,"Both the 'Current FY Gross Revenue (Filtered)' and 'Previous FY Gross Revenue (Filtered)' metrics embed specific filter values ('Qantas' for publication, 'AUDI AUSTRALIA' for advertiser, 'Aug' for month) directly into their WHERE clauses. This makes these metrics highly specialized and non-reusable for other contexts without direct modification, undermining the principle of consolidated and flexible reporting.",WHERE unified_publication_name IN ('Qantas') AND advertiser_parent IN ('AUDI AUSTRALIA') AND financial_short_month IN ('Aug'),"Parameterize these filters using Looker Studio controls or define them as separate, reusable filter dimensions. For common filter combinations, consider creating a dedicated view or a parameterized custom query. If these filters are truly fixed for a specific report, consider if the metric name should explicitly reflect these constraints to avoid confusion.",88,35ec2da8-3e63-4f97-90fa-bf9686769718
previous_fy_conditional_revenue,Hardcoded Logic|Complex Conditional Logic,"The 'Previous FY Conditional Revenue' metric utilizes a complex CASE statement that hardcodes specific `unified_publication_name` values ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') and applies a conditional division by 1000. This logic is difficult to read, maintain, and extend. The hardcoded publication names are an anti-pattern, and the conditional division suggests a potential data modeling issue or a need for a separate, clearly defined 'normalized revenue' metric.","CASE WHEN (relative_fy_year_offset = -1 AND UPPER(SAFE_CAST(unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN SAFE_DIVIDE(gross_revenue_amount, 1000) WHEN (relative_fy_year_offset = -1 AND ly_is_future_period_flag = 'N') THEN gross_revenue_amount ELSE 0 END","Refactor this logic. For the hardcoded publication names, consider creating a lookup table for 'special publications' or a dimension that categorizes publications. The conditional division should ideally be handled at the data modeling layer if it's a standard business rule for these publication types, or as a separate, clearly named calculated field if it's an ad-hoc reporting requirement. Break down complex CASE statements into simpler, more manageable components or views to improve readability and maintainability.",88,35ec2da8-3e63-4f97-90fa-bf9686769718
All metrics,Anti-Pattern,"All provided `sql_logic` snippets for both dimensions and measures include `LIMIT 1`. This is highly unusual and problematic for dashboard metrics, which typically involve aggregations over large datasets. If these are the actual queries executed by Looker Studio, the dashboard would only ever display a single arbitrary row's data, rendering it useless for analytical purposes and leading to incorrect or incomplete insights.",SELECT t0.column_name AS column_name FROM `project.dataset.table` AS t0 LIMIT 1;,"Urgently investigate the source of these SQL snippets. If they are indeed the queries used by Looker Studio, they must be corrected to remove `LIMIT 1` and include appropriate `GROUP BY` clauses for dimensions and aggregation functions for measures (which are already present for measures, but `LIMIT 1` still invalidates them for aggregate views). Ensure the SQL accurately reflects how Looker Studio queries the data for the dashboard.",89,8479531e-aa8a-4701-a765-40a427a9deb0
"newsletter_activity_is_solus_welcome_journey_triggered, newsletter_activity_is_specific_campaign_type, newsletter_activity_is_weekday_weekend_edm, newsletter_activity_is_edm, newsletter_activity_is_test_marketing_system, newsletter_activity_is_not_solus_welcome_journey_triggered, newsletter_activity_is_not_edm, newsletter_activity_is_not_test_marketing_system",Hardcoded Logic / Anti-Pattern,"Multiple calculated fields rely on hardcoded `REGEXP_CONTAINS` patterns to classify email names. The patterns, especially for `is_specific_campaign_type` and `is_test_marketing_system`, are extremely long, complex, and case-sensitive (e.g., 'Solus|SOLUS|solus'), making them difficult to read, maintain, and update. Any change in naming conventions or addition of new campaign types/system emails would require manual updates to these metric definitions, increasing maintenance overhead and risk of errors.","SELECT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered')) AS is_solus_welcome_journey_triggered FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0 LIMIT 1;","Centralize email classification logic. Consider creating a dedicated lookup table (e.g., `email_type_mapping`) that maps `newsletter_send_email_name` patterns to standardized categories. Alternatively, implement this classification logic upstream in the data pipeline (e.g., dbt model, BigQuery view) to create a derived `email_type` column, making the Looker Studio metrics simpler and more robust.",89,8479531e-aa8a-4701-a765-40a427a9deb0
"newsletter_activity_is_taste_com_au, newsletter_activity_is_delicious, newsletter_activity_is_escape, newsletter_activity_is_australias_best_recipes",Hardcoded Logic / Anti-Pattern,"Individual boolean flags are created for specific `newsletter_brand` values using direct string comparisons. While simpler than the regex, this approach becomes cumbersome if the number of brands grows or if more complex brand groupings are needed. It duplicates logic across multiple metrics.",SELECT (t0.newsletter_brand = 'Taste.com.au') AS is_taste_com_au FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0 LIMIT 1;,"If brand categorization is needed, consider a lookup table for brands or a `CASE` statement that groups brands into broader categories if the number of distinct brands is manageable and static. For dynamic brand lists, a lookup table is preferred to centralize brand definitions.",89,8479531e-aa8a-4701-a765-40a427a9deb0
newsletter_activity_is_core_content_pillar,Anti-Pattern / Complexity,"This metric combines multiple hardcoded `REGEXP_CONTAINS` and direct string comparisons within a deeply nested `CASE WHEN` structure. This makes the underlying business logic opaque, extremely difficult to debug, and highly susceptible to errors if any of the numerous embedded rules change. It's a prime example of complex business logic being embedded directly into the presentation layer in an unmaintainable way.","SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TA_|HS_...')) THEN true WHEN ((t0.newsletter_brand = 'Taste.com.au') AND NOT(SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered'))) THEN true ... ELSE false END AS is_core_content_pillar FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0 LIMIT 1;","This complex logic should be pushed upstream into the data model. Create a dedicated `is_core_content_pillar` column in the `newsletter_activity` table (or a derived view) using a more structured and maintainable approach, potentially leveraging the suggested email type and brand lookup tables. This would simplify the Looker Studio metric to a direct column reference, improving performance and maintainability.",89,8479531e-aa8a-4701-a765-40a427a9deb0
"newsletter_activity_unique_click_rate_summed, newsletter_activity_unique_open_rate_summed",Data Interpretation / Misleading Calculation,"The business description explicitly warns that summing rates can be misleading and suggests the correct aggregate calculation (e.g., `SUM(unique_click) / SUM(unique_open)`). This indicates a potential for misinterpretation of data by dashboard users if they are not aware of this nuance, leading to incorrect conclusions about overall performance.",SELECT SUM(t0.unique_click_rate) AS unique_click_rate_summed FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0 LIMIT 1;,"Replace these summed rate metrics with correctly calculated aggregate rates (e.g., `SUM(unique_click) / SUM(unique_open)` or `SUM(unique_click) / SUM(total_delivered)`). If the per-row rate is needed for specific drill-downs, clearly label it and provide guidance on its use, but the primary dashboard view should use correctly aggregated rates to prevent misinterpretation.",89,8479531e-aa8a-4701-a765-40a427a9deb0
"c_score_target_sum_aug_2025_week, c_score_target_sum_may_2025_week",Hardcoded Logic,"The dashboard defines separate metrics for specific weekly date ranges by hardcoding the `week_ending` filter directly into the SQL logic. For example, 'Sum of C-Score Target (Week of Aug 4-10, 2025)' and 'Sum of C-Score Target (Week of May 19-25, 2025)' are distinct metrics solely due to their fixed date ranges. This practice leads to redundant metrics, makes the dashboard less dynamic, and requires manual updates for new time periods.",WHERE (t0.week_ending >= DATE '2025-08-04' AND t0.week_ending <= DATE '2025-08-10'),"Consolidate these specific weekly metrics into the base 'Sum of C-Score Target' metric. Leverage Looker Studio's built-in date range controls, parameters, or a date dimension table to allow users to dynamically select the desired week or period. This approach enhances dashboard flexibility, reduces maintenance overhead, and aligns with best practices for data visualization.",90,c22e86d8-835d-4a68-8c10-5d131e225e6b
total_registrations_july_2025_dt_ta,Anti-Pattern,"The core SQL logic, including complex nested subqueries for deriving audience segments and content categories, is duplicated verbatim across all six metrics on the dashboard. This redundancy makes the dashboard extremely difficult to maintain, as any change to the underlying business logic (e.g., how an audience segment is defined or a new content category is introduced) requires identical modifications in multiple places, increasing the risk of errors and inconsistencies.","FROM (
  SELECT
    CASE WHEN (clmn12_ OR clmn17_ OR clmn13_) THEN 'Older affluents' WHEN (clmn10_ OR clmn9_ OR clmn18_ OR clmn16_) THEN 'Young professionals' WHEN (clmn14_ OR clmn8_ OR clmn19_ OR clmn21_) THEN 'Middle income households' WHEN (clmn20_ OR clmn15_ OR clmn11_) THEN 'Low income households' ELSE 'Not available' END AS clmn23_,
    CASE WHEN (clmn12_ OR clmn17_ OR clmn13_) THEN 'Older affluents' WHEN (clmn10_ OR clmn9_ OR clmn18_ OR clmn16_) THEN 'Young professionals' WHEN (clmn14_ OR clmn8_ OR clmn19_ OR clmn21_) THEN 'Middle income households' WHEN (clmn20_ OR clmn15_ OR clmn11_) THEN 'Low income households' ELSE 'Not available' END AS clmn24_,
    clmn2_,
    clmn3_,
    clmn7_,
    clmn22_
  FROM (
    SELECT
      (clmn5_ = 'Mature Freedom') AS clmn8_,
      ...
    FROM (
      SELECT
        CASE WHEN (clmn1_ = 'A') THEN 'First Class Life' ... END AS clmn5_,
        ...
      FROM (
        SELECT
          t0.ArticleDominantSection1 AS clmn0_,
          t0.MosaicType AS clmn1_,
          t0.SubscriptionDateTime AS clmn2_,
          t0.Website AS clmn3_,
          t0.categorytopic_path AS clmn4_
        FROM
          `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0
      )
    )
  )
) WHERE (clmn2_ >= TIMESTAMP '2025-07-24' AND clmn2_ < TIMESTAMP_ADD(TIMESTAMP '2025-07-30', INTERVAL 1 DAY) AND clmn23_ != 'Not available' AND clmn3_ IN ('Daily Telegraph', 'The Australian'))","Consolidate the common SQL logic into a single, parameterized BigQuery view or a Looker Studio custom data source. This would allow the dashboard to use one underlying data source/metric, with filters applied dynamically for date ranges and websites, drastically reducing maintenance effort and improving consistency.",91,09a871a0-d37a-4851-bafc-8d63d2dc81f8
total_registrations_july_2025_dt_ta,Hardcoded Logic,"Audience segments are defined through a series of nested `CASE` statements that hardcode mappings from single-letter codes (`clmn1_`) to descriptive names (e.g., 'First Class Life') and then group these into broader categories (e.g., 'Older affluents'). This business logic is embedded directly within the SQL of every metric.","CASE WHEN (clmn1_ = 'A') THEN 'First Class Life' WHEN (clmn1_ = 'B') THEN 'Comfortable Foundations' WHEN (clmn1_ = 'C') THEN 'Striving for Status' WHEN (clmn1_ = 'D') THEN 'Secure Tranquility' WHEN (clmn1_ = 'E') THEN 'Family Fringes' WHEN (clmn1_ = 'F') THEN 'Establishing Roots' WHEN (clmn1_ = 'G') THEN 'Growing Independence' WHEN (clmn1_ = 'H') THEN 'Middle Blue-collars' WHEN (clmn1_ = 'I') THEN 'Traditional Pursuits' WHEN (clmn1_ = 'J') THEN 'True Grit' WHEN (clmn1_ = 'K') THEN 'Mature Freedom' WHEN (clmn1_ = 'L') THEN 'Hardship & Perseverance' WHEN (clmn1_ = 'M') THEN 'Graceful Ageing' WHEN (clmn1_ = 'N') THEN 'Rural Commitment' ELSE '' END AS clmn5_,
...
CASE WHEN (clmn12_ OR clmn17_ OR clmn13_) THEN 'Older affluents' WHEN (clmn10_ OR clmn9_ OR clmn18_ OR clmn16_) THEN 'Young professionals' WHEN (clmn14_ OR clmn8_ OR clmn19_ OR clmn21_) THEN 'Middle income households' WHEN (clmn20_ OR clmn15_ OR clmn11_) THEN 'Low income households' ELSE 'Not available' END AS clmn24_","Extract the audience segment mapping logic into a dedicated lookup table in BigQuery. This table would store the `MosaicType` codes and their corresponding descriptive and grouped audience segment names. The main query would then join to this lookup table, centralizing the business logic and making it easier to update and manage.",91,09a871a0-d37a-4851-bafc-8d63d2dc81f8
total_registrations_july_2025_dt_ta,Hardcoded Logic,"Content categories are determined by complex `REGEXP_CONTAINS` statements that hardcode patterns against various source columns (`ArticleDominantSection1`, `Website`, `categorytopic_path`). This logic is verbose, difficult to read, and duplicated across all metrics.","CASE WHEN (SAFE.REGEXP_CONTAINS(clmn0_, 'sport|afl|nrl|stream|netball|cricket|basketball|boxing|rugby-union|olympics|football|more-sports|gymnastics')) THEN 'Sport' WHEN (SAFE.REGEXP_CONTAINS(clmn3_, 'Code Sports|Racenet|Punters')) THEN 'Sport' WHEN (SAFE.REGEXP_CONTAINS(clmn0_, 'news|nation|world|national-affairs')) THEN 'News' ... ELSE 'other' END AS clmn7_","Consider externalizing content category mapping. For stable patterns, encapsulate this logic within a BigQuery view or a User Defined Function (UDF) to promote reusability. For more dynamic mappings, a lookup table with patterns or explicit mappings could be maintained, allowing for easier updates without modifying SQL.",91,09a871a0-d37a-4851-bafc-8d63d2dc81f8
total_registrations_july_2025_dt_ta,Anti-Pattern,"The SQL queries utilize generic and non-descriptive column aliases (e.g., `clmn0_`, `clmn1_`, `clmn2_`, `clmn24_`) within deeply nested subqueries. This practice severely hinders readability and maintainability, making it challenging for anyone reviewing the SQL to quickly understand the purpose or origin of each column.","t0.ArticleDominantSection1 AS clmn0_,
t0.MosaicType AS clmn1_,
t0.SubscriptionDateTime AS clmn2_,
t0.Website AS clmn3_,
t0.categorytopic_path AS clmn4_,
...
SAFE_CAST(DATETIME_TRUNC(clmn6_, SECOND) AS DATE) AS clmn22_,
clmn2_,
clmn3_,
clmn7_,
...
clmn24_ AS Audience_Segment,
clmn7_ AS Content_Category","Refactor the SQL to use meaningful and descriptive column aliases throughout all subqueries. For example, `clmn0_` could be `article_dominant_section`, `clmn1_` could be `mosaic_type`, and `clmn2_` could be `subscription_datetime`. This will significantly improve the clarity and debuggability of the queries.",91,09a871a0-d37a-4851-bafc-8d63d2dc81f8
"c_score_target_sum_2022_2025_q1, c_score_target_sum_2022_2023_q3, c_score_target_sum_2022_2025_q1_alt",Hardcoded Logic / Anti-Pattern,"Three distinct metrics are defined for 'Total C-Score Target' from the same source table (`cdm_reference_data.cscore_targets`), with the only difference being hardcoded date ranges in their WHERE clauses. This leads to redundant SQL definitions and makes the dashboard less flexible and harder to maintain. It directly contradicts the high consolidation score reported in the initial summary.","WHERE (clmn2_ >= DATE '2022-07-04' AND clmn2_ <= DATE '2025-03-31')
WHERE (clmn2_ >= DATE '2022-07-04' AND clmn2_ <= DATE '2023-07-02')
WHERE (clmn2_ >= DATE '2022-07-04' AND clmn2_ <= DATE '2025-03-26')","Consolidate these three metrics into a single, parameterized metric. Utilize Looker Studio's date range controls or custom parameters to allow users to dynamically select the desired date period. This would significantly reduce redundancy, improve maintainability, and enhance dashboard flexibility.",92,ee06d96e-a079-4304-ad4a-2c9a13d20ddf
day_target_website_sum_2022_2025_q1,Data Type Handling / Anti-Pattern,"The SQL logic for 'Total Daily Website Target' involves `PARSE_DATE('%Y%m%d', clmn4_)` and `SAFE_CAST(clmn2_ AS STRING)` on the `targetdate` column. This suggests that the `targetdate` column in the source table (`subscription_targets`) might not be stored as a native DATE type, or it's stored as a string that requires explicit parsing. This adds unnecessary complexity and potential for errors (e.g., if the string format changes) and can impact query performance.","PARSE_DATE('%Y%m%d', clmn4_) AS clmn5_, clmn0_, clmn1_, clmn2_, clmn3_ FROM (SELECT SAFE_CAST(clmn2_ AS STRING) AS clmn4_","Investigate the `targetdate` column in the `cdm_reference_data.subscription_targets` table. If it's not a DATE type, consider transforming and storing it as a proper DATE type at the data source level (e.g., in the ETL/ELT process) to simplify downstream queries, improve performance, and reduce potential parsing errors. If the source system cannot be changed, consider creating a materialized view or a derived table with the date column correctly cast.",92,ee06d96e-a079-4304-ad4a-2c9a13d20ddf
user_count_filtered_roles,Hardcoded Logic,"The 'User Count for Specific Roles by Masthead' metric utilizes a hardcoded `CASE` statement to map `VerityUsageMasthead` strings to numeric `masthead_id` values. This approach is brittle, prone to errors if masthead names change, and requires manual updates for new mastheads. Additionally, the `ADUserRole` filtering uses a series of hardcoded `OR` conditions, which is not scalable for managing role definitions.","CASE
        WHEN SAFE_CAST(t0.VerityUsageMasthead AS STRING) = 'The Advertiser' THEN 1
        ...
    END AS masthead_id,
WHERE
    (SAFE_CAST(t0.ADUserRole AS STRING) = 'Reporter'
    OR SAFE_CAST(t0.ADUserRole AS STRING) = 'COS, backbench, digital producer'
    OR SAFE_CAST(t0.ADUserRole AS STRING) = 'Section editor / team leader'
    OR SAFE_CAST(t0.ADUserRole AS STRING) = 'Homepage editor')","Replace the hardcoded `CASE` statement for `masthead_id` with a join to a centralized, governed `masthead_lookup` table. For `ADUserRole` filtering, consider defining roles and their categories in a lookup table or a more robust, standardized role classification system to avoid hardcoded `OR` conditions.",93,57957536-505f-4507-8062-c7cbe7c46ecf
net_adds_digital_paid_think_march2025,Hardcoded Logic|Data Mismatch,"This critical KPI metric suffers from multiple hardcoded elements: a `CASE` statement for `masthead` mapping, a `REGEXP_CONTAINS` filter for specific masthead codes, and a fixed date range (March 2025). The hardcoded date range directly conflicts with the `sql_execution_summary` which shows data being queried for September 2025, indicating a significant discrepancy between the metric's definition and its actual usage or the data being presented. This makes the metric non-dynamic and not reusable for ongoing performance monitoring.","CASE
        WHEN SAFE_CAST(t0.masthead AS STRING) = 'AA' THEN 'Advertiser'
        ...
    END AS mapped_masthead,
WHERE
    SAFE_CAST(t0.report_date AS DATE) >= DATE '2025-03-01'
    AND SAFE_CAST(t0.report_date AS DATE) <= DATE '2025-03-31'
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.masthead AS STRING), 'AA|TA|HS|DT|CM')","Replace the hardcoded `CASE` statement and `REGEXP_CONTAINS` for mastheads with a join to a centralized, governed `masthead_lookup` table. Parameterize the date range to allow for dynamic reporting (e.g., current month, last 30 days) instead of a fixed historical period, making the KPI reusable for continuous monitoring. This would align the metric's definition with the expectation of a dynamic dashboard.",93,57957536-505f-4507-8062-c7cbe7c46ecf
total_day_target_by_section_team_2022_2023,Hardcoded Logic,"This metric, along with 'total_day_target_by_section_team_2025_april', represents a common anti-pattern where a base metric is duplicated solely to accommodate different hardcoded date ranges. This approach is inflexible, requires manual updates for new periods, and inflates the number of metrics on the dashboard unnecessarily. It prevents users from dynamically selecting date ranges.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2022-07-04' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2023-07-02'","Consolidate both 'Total Daily Target by Section Team' metrics into a single, parameterized metric. Implement a date range parameter (e.g., using a Looker Studio date range control) that dynamically filters the `targetdate` column. This allows users to select any desired period without requiring new metrics to be created.",94,f04cf01a-a59d-4d08-a6a5-1f4a8a3540a9
total_day_target_by_section_team_2025_april,Hardcoded Logic,"This metric, identical in structure to 'total_day_target_by_section_team_2022_2023' save for its hardcoded date, exemplifies metric duplication. This practice leads to increased maintenance overhead and a less flexible dashboard experience, as new metrics are required for each specific date or date range.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-04-01' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-04-01'","As above, consolidate this metric with its counterpart into a single, parameterized metric. Utilize a date range parameter in the dashboard to allow dynamic filtering of the `targetdate` column, providing a more robust and user-friendly solution.",94,f04cf01a-a59d-4d08-a6a5-1f4a8a3540a9
gross_revenue_current_year_thousands_q2,Anti-Pattern,"This metric is a functional duplicate of 'Current Year Gross Revenue (Thousands)' (metric_id: `gross_revenue_current_year_thousands_q1`). While the SQL structure differs slightly (wrapping `SAFE_DIVIDE` around the `CASE` vs. inside), the logical outcome is identical. This creates unnecessary redundancy and maintenance overhead.","SELECT SUM(SAFE_DIVIDE(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 0 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS current_year_gross_revenue_thousands FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0",Remove this duplicate metric. Ensure all dashboard components referencing this metric are updated to use `gross_revenue_current_year_thousands_q1`.,95,bccf684d-1761-465f-9353-e26f5a499c26
gross_revenue_last_year_thousands_q2,Anti-Pattern,"This metric is a functional duplicate of 'Last Year Gross Revenue (Thousands)' (metric_id: `gross_revenue_last_year_thousands_q3`). Similar to the current year duplicates, this adds redundancy without functional benefit.","SELECT SUM(SAFE_DIVIDE(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS last_year_gross_revenue_thousands FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0",Remove this duplicate metric. Ensure all dashboard components referencing this metric are updated to use `gross_revenue_last_year_thousands_q3`.,95,bccf684d-1761-465f-9353-e26f5a499c26
gross_revenue_next_year_ly_future_flag_cy_revenue_thousands_q3_flawed,Logical Flaw,"This metric contains a logical contradiction in its SQL. It attempts to filter for `relative_fy_year_offset = -1` (next fiscal year) in the outer `CASE` statement, but then attempts to apply `relative_fy_year_offset = 0` (current fiscal year) within the inner `CASE` for the `gross_revenue_amount`. A single row cannot satisfy both conditions simultaneously, meaning this metric will always evaluate to 0.","SELECT SUM(SAFE_DIVIDE(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = -1 AND SAFE_CAST(t0.ly_is_future_period_flag AS STRING) = 'N' THEN (CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 0 THEN t0.gross_revenue_amount ELSE 0 END) ELSE NULL END, 1000)) AS next_year_gross_revenue_ly_future_flag_cy_revenue_thousands_flawed FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0","Review the business requirement for this metric. Correct the SQL logic to ensure consistent filtering conditions. If the intent is 'Next Year Revenue (excluding future periods)', the inner `CASE` condition `relative_fy_year_offset = 0` should be removed or changed to `-1`.",95,bccf684d-1761-465f-9353-e26f5a499c26
gross_revenue_last_year_cy_cm_conditions_thousands_q3_flawed,Logical Flaw,"Similar to the previous flawed metric, this one also has conflicting `relative_fy_year_offset` conditions. The outer `CASE` filters for `relative_fy_year_offset = 0` (current fiscal year), while the inner `CASE` attempts to sum `gross_revenue_amount` for `relative_fy_year_offset = 1` (last fiscal year). This contradiction ensures the metric will always return 0.","SELECT SUM(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 0 AND SAFE_CAST(t0.relative_fy_month_offset AS BIGNUMERIC) = 0 THEN (CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 1 THEN SAFE_DIVIDE(t0.gross_revenue_amount, 1000) ELSE 0 END) ELSE 0 END) AS last_year_gross_revenue_cy_cm_conditions_thousands_flawed FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0","Review the business requirement for this metric. Correct the SQL logic to ensure consistent filtering conditions. If the intent is 'Last Year Revenue (filtered by current month)', the outer `CASE` condition `relative_fy_year_offset = 0` should be changed to `1`.",95,bccf684d-1761-465f-9353-e26f5a499c26
gross_revenue_current_year_raw_q1,Hardcoded Logic,"Multiple metrics use hardcoded `CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = X` and similar for month/week offsets. This pattern is repeated across almost all metrics to define time periods. While functional, it makes the dashboard rigid and difficult to adapt to dynamic time period selections or different fiscal calendars without manual SQL edits for each metric. It also increases the risk of inconsistencies.",SELECT SUM(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 0 THEN t0.gross_revenue_amount ELSE 0 END) AS current_year_gross_revenue_raw FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0,"Consider leveraging Looker Studio's native date filtering capabilities or implementing a more dynamic date dimension table in BigQuery. If direct SQL is necessary, explore using BigQuery scripting or parameterized queries to reduce repetition. For a LookML model, this would be handled by `timeframes` and `filters`.",95,bccf684d-1761-465f-9353-e26f5a499c26
gross_revenue_last_year_non_future_thousands,Data Mismatch / Naming Inconsistency,The business description states 'Gross revenue for the last fiscal year (relative_fy_year_offset = 1) where 'ny_is_future_period_flag' is 'N''. The use of `ny_is_future_period_flag` (Next Year's future flag) in conjunction with 'last fiscal year' (`relative_fy_year_offset = 1`) is confusing and potentially incorrect. It suggests a possible misinterpretation of the flag's purpose or a naming inconsistency in the underlying data model.,"SELECT SUM(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = 1 AND SAFE_CAST(t0.ny_is_future_period_flag AS STRING) = 'N' THEN SAFE_DIVIDE(t0.gross_revenue_amount, 1000) ELSE 0 END) AS last_year_gross_revenue_non_future_thousands FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0","Investigate the definition and intended use of `ny_is_future_period_flag` and `ly_is_future_period_flag`. Ensure they are correctly applied to the relevant fiscal years. If the flag names are misleading, consider renaming them in the source table or creating clearer derived fields.",95,bccf684d-1761-465f-9353-e26f5a499c26
gross_revenue_next_year_non_future_thousands,Data Mismatch / Naming Inconsistency,"Similar to the previous point, this metric's business description states 'Gross revenue for the next fiscal year (relative_fy_year_offset = -1) where 'ly_is_future_period_flag' is 'N''. The use of `ly_is_future_period_flag` (Last Year's future flag) for 'next fiscal year' is confusing and potentially incorrect.","SELECT SUM(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS BIGNUMERIC) = -1 AND SAFE_CAST(t0.ly_is_future_period_flag AS STRING) = 'N' THEN SAFE_DIVIDE(t0.gross_revenue_amount, 1000) ELSE NULL END) AS next_year_gross_revenue_non_future_thousands FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0","Investigate the definition and intended use of `ny_is_future_period_flag` and `ly_is_future_period_flag`. Ensure they are correctly applied to the relevant fiscal years. If the flag names are misleading, consider renaming them in the source table or creating clearer derived fields.",95,bccf684d-1761-465f-9353-e26f5a499c26
c_score_target_sum_2025_03_17_to_2025_03_23,Hardcoded Logic / Anti-Pattern,"Multiple metrics are defined for the 'C-Score Target Sum' that are identical in logic, except for the specific hardcoded date range in the `WHERE` clause. This anti-pattern leads to redundant metric definitions, increased maintenance overhead (e.g., if the underlying calculation changes, all three metrics need updating), and limits the dashboard's ability to dynamically analyze different time periods without creating new metrics.",WHERE t0.week_ending >= DATE '2025-03-17' AND t0.week_ending <= DATE '2025-03-23',"Consolidate these into a single 'C-Score Target Sum' metric. Implement a date parameter or date range filter within Looker Studio that dynamically updates the `week_ending` filter in the SQL query. This would allow users to select any desired week for analysis without requiring new metric definitions, significantly improving dashboard flexibility and reducing technical debt.",96,ec783355-ff58-423e-a8df-83c75e9f77b3
multiple_metrics_gl_publication_code_mapping,Hardcoded Logic,"Numerous metrics (e.g., 'Closing Base Consumer (Budget)', 'Revenue Consumer (Budget)', 'Closing Base B2B (Budget)', etc.) use a complex `CASE WHEN gl_publication_code = 'XXX' THEN 'YYY'` statement to map numeric publication codes to masthead names. This logic is repeated identically across at least 10 different metrics, indicating a missing lookup table or a view that should pre-process this mapping.",CASE WHEN gl_publication_code = '101' THEN 'TA' WHEN gl_publication_code = '111' THEN 'DT' WHEN gl_publication_code = '302' THEN 'HS' WHEN gl_publication_code = '307' THEN 'WT' WHEN gl_publication_code = '351' THEN 'GA' WHEN gl_publication_code = '401' THEN 'CM' WHEN gl_publication_code = '460' THEN 'CP' WHEN gl_publication_code = '490' THEN 'TB' WHEN gl_publication_code = '501' THEN 'AA' WHEN gl_publication_code = '5253' THEN 'TC' WHEN gl_publication_code = '685' THEN 'GC' WHEN gl_publication_code = '851' THEN 'TM' WHEN gl_publication_code = '962' THEN 'NT' END AS masthead,"Create a dedicated `masthead_lookup` dimension table or a BigQuery view that maps `gl_publication_code` to `masthead` name. All dependent metrics should then join to this lookup table/view, centralizing the mapping logic and improving maintainability.",97,28082293-c836-46f0-83f8-b5ce909cd051
masthead_dimension_grouping,Hardcoded Logic,"The 'Masthead Grouping' dimension also uses a hardcoded `CASE WHEN masthead IN (...) THEN 'Group Name'` statement for categorizing mastheads. This is another instance of business logic embedded directly in the SQL, separate from the `gl_publication_code` mapping, creating potential for inconsistency and redundancy.","CASE WHEN masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT') THEN 'States and Community' WHEN masthead = 'TA' THEN 'The Australian and Prestige' ELSE NULL END AS masthead_group","Integrate masthead grouping into the proposed `masthead_lookup` table or a dedicated `masthead_grouping` dimension table. This would allow for a single source of truth for masthead attributes and their groupings, simplifying metric definitions and ensuring consistency.",97,28082293-c836-46f0-83f8-b5ce909cd051
multiple_metrics_hardcoded_channels_categories,Hardcoded Logic,"Many metrics, particularly 'Gross Adds (Budget)', 'Net Adds (Budget)', 'Gross Cancels (Budget)', 'Net Cancels (Budget)', and 'Cancels 3rd Party (Budget)', rely on hardcoded lists of `channel`, `transaction_type`, `package_type`, `scenario_name`, and `category_name` values within `IN` clauses or `CASE` statements. This makes it difficult to add new channels/categories or modify existing ones without updating numerous individual metric SQL definitions.","channel IN ('BAU ALWAYS ON DIGITAL', 'BAU GENERAL OFFER', 'BREACH', 'APLS', 'GPLA', 'OTHERS', 'PRES', 'PERFORMANCE MEDIA', 'MARKETING')","Externalize these lists into dedicated dimension tables (e.g., `channel_dim`, `transaction_type_dim`, `package_type_dim`, `category_dim`). Metrics should then join to these dimension tables, allowing for dynamic filtering and easier management of business classifications.",97,28082293-c836-46f0-83f8-b5ce909cd051
multiple_metrics_hardcoded_fiscal_year,Hardcoded Logic,"Almost all metrics explicitly filter for `fy_year = 2026` and/or hardcoded `dw_partition_date` values. This makes the dashboard static for a specific fiscal year and date range, requiring manual updates to the SQL for each new reporting period.",WHERE fy_year = 2026,Implement a Looker Studio date range control or a fiscal year parameter that can dynamically filter the `fy_year` and `dw_partition_date` in the underlying queries. This would make the dashboard reusable across different fiscal periods without modifying the SQL.,97,28082293-c836-46f0-83f8-b5ce909cd051
gross_adds_net_others_pres_and_similar,Anti-Pattern,"There are multiple 'Gross Adds' metrics (e.g., 'Gross Adds (Net, Others/PRES)', 'Gross Adds (Gross, Breach)') that use very simple `SELECT SUM(CASE WHEN ...)` queries directly from `v_consumer_acquisition_budget_forecast`. These are similar to the more complex 'Gross Adds (Budget)' metric which uses a CTE with `ROW_NUMBER()` for deduplication. The coexistence of simple and complex queries for related concepts from the same base table suggests potential for inconsistent data processing or an unclear data lineage, especially regarding deduplication.","SELECT SUM(CASE WHEN (transaction_type = 'NET ADDS' AND channel IN ('Others', 'PRES')) THEN bundle_qty ELSE NULL END) FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_consumer_acquisition_budget_forecast` WHERE year_id = 2026 AND scenario = 'BUDGET' LIMIT 1;","Review the data processing logic for `v_consumer_acquisition_budget_forecast`. If deduplication is required, it should be consistently applied at the view level or within a standardized CTE that all dependent metrics can leverage. This would ensure consistent results and simplify metric definitions.",97,28082293-c836-46f0-83f8-b5ce909cd051
multiple_metrics_scenario_filtering_inconsistency,Data Mismatch (Potential),"For metrics using `v_subscription_budget_forecast_fct`, the `CASE` statement for `SUM` often filters on `scenario_name = 'FY26 Budget F0 Final'`, but the outer `WHERE` clause includes `scenario_name IN ('FY 25 Budget Jul', 'FY26 Budget F0 Final')`. This inconsistency could lead to unexpected results if the `FY 25 Budget Jul` scenario contains data that is not explicitly handled by the `CASE` statement's aggregation logic.","ROUND(SUM(CASE WHEN scenario_name = 'FY26 Budget F0 Final' AND category_name IN ('Consumer', '3rd Party and Others') AND rate_plan_group_name NOT LIKE '%The Wine Club%' THEN closing_base_count ELSE 0 END), 0) AS Closing_Base_Consumer
... WHERE fy_year = 2026 AND scenario_version_code = 'P' AND scenario_name IN ('FY 25 Budget Jul', 'FY26 Budget F0 Final')","Ensure consistency in scenario filtering. If only 'FY26 Budget F0 Final' data is intended for the sum, then the `WHERE` clause should strictly filter for that scenario. If both scenarios are relevant, the `CASE` statement needs to explicitly handle both or the aggregation logic needs to be re-evaluated to correctly combine or differentiate them.",97,28082293-c836-46f0-83f8-b5ce909cd051
total_subscriber_count_aa_2024_2025,Hardcoded Logic,This metric hardcodes both the date range (May 2024 - Apr 2025) and the specific masthead ('AA'). This prevents the metric from being easily reused for different time periods or other mastheads without manual SQL modification.,"WHERE (t0.report_date >= DATE '2024-05-01' AND t0.report_date <= DATE '2025-04-29' ... STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0)",Parameterize the report_date range and the combined_masthead filter. Implement dashboard-level date range controls and a masthead filter to allow dynamic selection. Consider using a dimension table for mastheads if 'AA' is part of a larger set.,98,db5d30dd-1fbd-4ddf-9ce5-21d28b662ce6
total_subscriber_count_cm_2023_2024,Hardcoded Logic,"Similar to the 'AA' masthead metric, this metric hardcodes the date range (Jul 2023 - Jul 2024) and the specific masthead ('CM'). This creates a duplicate metric definition for a different masthead and time period, rather than a flexible, reusable one.","WHERE (t0.report_date >= DATE '2023-07-01' AND t0.report_date <= DATE '2024-07-28' ... STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CM') > 0)",Consolidate this with the 'AA' masthead metric by parameterizing the report_date range and the combined_masthead filter. This would allow a single metric definition to serve both purposes via user selections.,98,db5d30dd-1fbd-4ddf-9ce5-21d28b662ce6
active_daily_subscriber_count_aa_2024_2025,Hardcoded Logic,"This active subscriber metric also hardcodes the date range (May 2024 - Apr 2025) and the specific masthead ('AA'), mirroring the issues found in the total subscriber count metrics.","WHERE (t0.report_date >= DATE '2024-05-01' AND t0.report_date <= DATE '2025-04-29' ... STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0)",Parameterize the report_date range and the combined_masthead filter to enable dynamic reporting for different periods and mastheads. This will improve reusability and reduce maintenance overhead.,98,db5d30dd-1fbd-4ddf-9ce5-21d28b662ce6
active_daily_subscriber_count_cm_2023_2024,Hardcoded Logic,"This active subscriber metric hardcodes the date range (Jul 2023 - Jul 2024) and the specific masthead ('CM'), creating another instance of the hardcoding anti-pattern.","WHERE (t0.report_date >= DATE '2023-07-01' AND t0.report_date <= DATE '2024-07-28' ... STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CM') > 0)","Consolidate this with the 'AA' active subscriber metric by parameterizing the report_date range and the combined_masthead filter. A single, flexible metric is preferable to multiple hardcoded ones.",98,db5d30dd-1fbd-4ddf-9ce5-21d28b662ce6
daily_subscription_target_2025_03_11,Hardcoded Logic,"This target metric hardcodes a very specific single date (March 11, 2025) and a specific publication group ('National News Network'). This makes the metric useful only for that exact date and group, severely limiting its utility for trend analysis or other target groups.","WHERE (PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-03-11' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-03-11' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'National News Network'))","Parameterize the target date and the publication_group filter. This would allow users to view targets for different dates or groups, making the metric dynamic and much more valuable. Consider using a dimension table for publication groups.",98,db5d30dd-1fbd-4ddf-9ce5-21d28b662ce6
"c_score_target_sum_2023_07_03_to_2024_06_30, c_score_target_sum_2022_07_04_to_2024_06_30, c_score_target_sum_2025_05_12_to_2025_05_18, c_score_target_sum_2023_07_03_to_2025_07_07",Hardcoded Logic|Anti-Pattern,"Four out of five metrics on this dashboard are variations of the 'Total C-Score Target'. Each is defined as a separate metric in Looker Studio, but their underlying SQL logic is identical except for the hardcoded `week_ending` date range in the `WHERE` clause. This violates the DRY (Don't Repeat Yourself) principle, creating redundant metric definitions. This practice makes the dashboard brittle, difficult to maintain (e.g., if the calculation logic for c-score target changes, all four metrics need updating), and limits flexibility for ad-hoc analysis by users who might want to select custom date ranges.",WHERE t0.week_ending >= DATE 'YYYY-MM-DD' AND t0.week_ending <= DATE 'YYYY-MM-DD',"Consolidate these into a single 'Total C-Score Target' metric. Leverage Looker Studio's built-in date range controls or parameters at the dashboard level to allow users to dynamically select the desired reporting period. This approach significantly improves reusability, reduces maintenance overhead, and enhances dashboard flexibility.",99,4db22271-c915-4a3b-95f1-57f52f6beaf1
subscription_day_target_sum_2023_07_03_to_2025_03_30,Anti-Pattern|Data Type Conversion,"The `subscription_day_target_sum` metric uses `PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))` to convert the `targetdate` column to a DATE type for filtering. While `SAFE_CAST` handles errors gracefully, this indicates that the `targetdate` column is not stored as a native DATE type in the source table (`subscription_targets`). This conversion adds unnecessary computational overhead to every query and can potentially lead to performance issues or data interpretation errors if the `targetdate` format is inconsistent.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2023-07-03'","Investigate the `cdm_reference_data.subscription_targets` table. The `targetdate` column should ideally be stored as a native `DATE` type in BigQuery to optimize query performance and simplify SQL logic. If direct modification of the source table is not feasible, consider creating a materialized view or a logical view that pre-casts this column to a DATE type.",99,4db22271-c915-4a3b-95f1-57f52f6beaf1
total_exit_link_clicks_datalocal_adobe_web,Hardcoded Logic,"The SQL logic for metrics specifically targeting 'datalocal' exit links from 'Adobe WEB' sources uses hardcoded string literals for filtering (`STRPOS(t0.exit_link, 'datalocal') > 0` and `t0.source_code = 'Adobe WEB'`). This pattern is repeated across two high-criticality metrics. While functional for current requirements, this approach lacks flexibility. If 'datalocal' or 'Adobe WEB' were to change, or if additional specific sources/link types needed to be tracked, each metric's SQL would require manual modification, increasing maintenance overhead and potential for error.","WHERE STRPOS(t0.exit_link, 'datalocal') > 0 AND t0.source_code = 'Adobe WEB'","For `source_code`, consider creating a lookup table for known source codes, allowing for more dynamic filtering and easier management of new or changed sources. For `exit_link` patterns, if 'datalocal' represents a category, consider a similar lookup or a more robust categorization mechanism within the data model. If these values are truly static and singular, the current approach is acceptable, but the repetition across metrics suggests a potential for future scalability issues.",100,435b3177-8c9b-458c-9225-9c49bdbb9c98
total_cost_1_5x,Hardcoded Logic,"The cost calculation embeds a hardcoded multiplier (1.5x) and a hardcoded base cost per terabyte (6.25). This approach makes the dashboard inflexible to changes in BigQuery pricing models, regional costs, or specific discount tiers, requiring manual updates to the SQL for each affected metric.","((SUM(SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalBilledBytes AS BIGNUMERIC)) / POW(2, 40)) * 6.25) * 1.5","Externalize cost multipliers and base rates. These values should ideally be stored in a configuration table or managed via BigQuery parameters/UDFs. This allows for centralized management and dynamic updates without modifying the underlying SQL logic, significantly improving maintainability.",101,a00f4341-2de3-4d89-8f85-cca805fb10d7
total_cost_1_4x,Hardcoded Logic|Anti-Pattern,"This metric is almost a duplicate of 'total_cost_1_5x', differing only in its hardcoded multiplier (1.4x) and the notation for terabyte conversion (`POW(1024, 4)` vs `POW(2, 40)`). While mathematically equivalent, the inconsistent notation reduces readability. The duplication of logic for similar business concepts (different pricing tiers/regions) is an anti-pattern that hinders consolidation and increases maintenance burden.","((SUM(SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalBilledBytes AS BIGNUMERIC)) / POW(1024, 4)) * 6.25) * 1.4","Consolidate 'Total Cost' metrics. Instead of separate metrics for each multiplier, consider a single 'Total Cost' metric that incorporates a 'Pricing Model' or 'Region' dimension, allowing the multiplier to be dynamically applied based on this dimension. Standardize the TB conversion notation across all relevant metrics for consistency.",101,a00f4341-2de3-4d89-8f85-cca805fb10d7
avg_cost_per_query_1_4x,Anti-Pattern,"This ratio metric redundantly re-implements the entire cost calculation logic, including the hardcoded 1.4x multiplier and 6.25 cost per TB. This is an anti-pattern as it duplicates complex logic already defined in the 'Total Cost (1.4x Multiplier)' metric, increasing the risk of inconsistencies and making future updates more cumbersome.","(SUM(((SAFE_CAST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalBilledBytes AS BIGNUMERIC) / POW(1024, 4)) * 6.25) * 1.4)) / COUNT(1)","Promote reusability by referencing existing base metrics. This metric should ideally be calculated by dividing the 'Total Cost (1.4x Multiplier)' metric by the 'Total Number of Queries' metric, rather than re-calculating the numerator from scratch. This simplifies the SQL and ensures consistency.",101,a00f4341-2de3-4d89-8f85-cca805fb10d7
user_account_type_dimension,Hardcoded Logic,"The logic for categorizing user accounts as 'Service Account' or 'Regular Account' relies on hardcoded `LIKE` patterns (`%gserviceaccount%` or `svc_%`). This approach is brittle; if Google Cloud's naming conventions for service accounts change, or if new types of accounts emerge, this logic will break or become inaccurate without manual intervention.","`if`(protopayload_auditlog.authenticationInfo.principalEmail LIKE '%gserviceaccount%' OR protopayload_auditlog.authenticationInfo.principalEmail LIKE 'svc_%', ""Service Account"", ""Regular Account"")","Improve robustness of user classification. Consider using a more maintainable approach such as a lookup table for user types, or a more sophisticated UDF that can handle a broader range of classification rules. This would centralize the logic and make it more adaptable to future changes.",101,a00f4341-2de3-4d89-8f85-cca805fb10d7
active_subscriber_count_ta_consumer_digital,Hardcoded Logic,"The SQL logic for the 'Active Subscribers (TA, Consumer, Non-Print-Only)' metric contains a hardcoded `report_date` of '2025-03-27'. This makes the metric static and unusable for historical or real-time analysis, requiring manual updates for each new reporting period. This severely limits the dashboard's utility for trend analysis and current reporting.",t0.report_date = DATE '2025-03-27',"Replace the hardcoded date with a dynamic date parameter (e.g., `CURRENT_DATE()`, `_PARTITIONTIME`, or a Looker Studio date range filter) to ensure the metric reflects current data and is usable across different timeframes without manual intervention.",102,7ffe7054-679e-4e8f-bb3d-01c6e7799899
daily_movement_record_count_aa_consumer_digital_by_type,Anti-Pattern,"The SQL logic for 'Daily Movement Record Count' includes an extremely complex and repetitive `CASE` statement to map short masthead codes (e.g., 'GA', 'TB') to their full names, which is then used for filtering. This is a significant anti-pattern that makes the query difficult to read, maintain, and extend. Any new masthead or change in naming convention requires direct modification of the SQL, increasing the risk of errors and maintenance overhead.","(CASE WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'GA') > 0) THEN 'GA' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'TB') > 0) THEN 'TVB' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CP') > 0) THEN 'CP' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'GC') > 0) THEN 'GC' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'WT') > 0) THEN 'TWT' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'TM') > 0) THEN 'TM' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'TC') > 0) THEN 'TC' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'NT') > 0) THEN 'NT' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'TA') > 0) THEN 'TA' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'HS') > 0) THEN 'HS' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0) THEN 'AA' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CM') > 0) THEN 'CM' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'DT') > 0) THEN 'DT' WHEN (STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CS') > 0) THEN 'CS' ELSE 'other' END)","Create a dedicated lookup table for masthead codes and their corresponding names. Join this lookup table to the `subscriber_daily_base_movement` table to perform filtering and mapping, significantly improving readability, maintainability, and data governance. This centralizes business logic and simplifies SQL queries.",102,7ffe7054-679e-4e8f-bb3d-01c6e7799899
daily_movement_record_count_aa_consumer_digital_by_type,Anti-Pattern,"The `subscription_type_derived` dimension is created using a `CASE` statement based on `combined_classification_level_2`. While functional, this hardcoded logic can become brittle if new subscription types emerge or existing ones are renamed. It also duplicates business logic within the SQL, making it harder to manage changes consistently across multiple reports.","CASE WHEN (STRPOS(SAFE_CAST(t0.combined_classification_level_2 AS STRING), 'Digital') > 0) THEN 'Digital' WHEN (STRPOS(SAFE_CAST(t0.combined_classification_level_2 AS STRING), 'Bundle') > 0) THEN 'Bundle' WHEN (STRPOS(SAFE_CAST(t0.combined_classification_level_2 AS STRING), 'DPE') > 0) THEN 'DPE' WHEN (STRPOS(SAFE_CAST(t0.combined_classification_level_2 AS STRING), 'Essential') > 0) THEN 'Essential' ELSE 'Other' END","Consider externalizing subscription type mapping into a lookup table or a dedicated dimension table if the number of types is expected to grow or change frequently. This centralizes business logic, simplifies SQL queries, and promotes reusability.",102,7ffe7054-679e-4e8f-bb3d-01c6e7799899
total_day_target_may_2025_australian_business_network,Hardcoded Logic|Anti-Pattern,"This metric's SQL query contains hardcoded date ranges ('2025-05-01' to '2025-05-29') and a specific publication group ('The Australian Business Network'). This approach means that a new metric definition would be required for every new reporting period or for different publication groups, leading to metric sprawl and significant maintenance overhead. It prevents the dashboard from being dynamic or easily adaptable to changing business requirements without manual updates to the underlying metric definitions.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-05-01' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-29' AND t0.publication_group = 'The Australian Business Network'","Refactor this metric to utilize dynamic date parameters (e.g., Looker Studio date range controls) and publication group parameters. This would allow a single, generic 'Day Target' metric to serve multiple reporting periods and publication groups, significantly improving reusability and reducing maintenance.",103,5fa24f44-3883-4580-8930-bc4ca0bb7430
daily_day_target_july_aug_2025_australian_business_network,Hardcoded Logic|Anti-Pattern,"Similar to the other metric, this definition also hardcodes the date range ('2025-07-28' to '2025-08-03') and the publication group ('The Australian Business Network'). Although it uses `REGEXP_CONTAINS` for the publication group, which offers some flexibility in matching, the specific string is still hardcoded. This limits the metric's utility to a very specific context and prevents its reuse for other timeframes or publication groups without creating new, redundant metric definitions.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-07-28' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-08-03' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'The Australian Business Network')","Parameterize the date range and publication group filter. Consider using Looker Studio's built-in controls for date ranges and filters for publication groups. Additionally, investigate the `targetdate` column's data type; if it's stored as a string/integer, converting it to a native `DATE` type in the underlying table could simplify queries and improve performance by removing the need for `PARSE_DATE(SAFE_CAST(...))`.",103,5fa24f44-3883-4580-8930-bc4ca0bb7430
N/A (applies to all metrics),Anti-Pattern,"A common set of filtering conditions is repeatedly applied across all metrics defined for this dashboard. This includes filters for `relative_fy_year_offset`, `revenue_transaction_status`, and `allocation_method_code`. This duplication increases maintenance overhead and the risk of inconsistencies if the base filtering logic needs to change.","WHERE t0.relative_fy_year_offset >= -1 AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.allocation_method_code != 'Offset' AND t0.allocation_method_code != '-'","Implement a consolidated base view or a semantic layer (e.g., a dbt model or LookML view) that pre-applies these common filters. This would ensure consistency, improve maintainability, and potentially simplify the SQL for individual metrics.",104,5e8c40fc-c6c2-4e1c-a44b-b779ab9a72f9
"total_gross_revenue_gam_programmatic_punters_racenet_2026_fy, total_gross_revenue_ctr_2025_fy, total_gross_revenue_2026_cy, total_gross_revenue_2024_cy, source_publication_name_punters_racenet_filter",Hardcoded Logic,"Multiple metrics contain hardcoded business logic such as specific financial/calendar years ('2026', '2025', '2024'), GL publication names ('Punters', 'Racenet'), allocation buckets ('GAM Allocation', 'Programmatic'), and advertiser name prefixes ('CTR'). This approach limits the reusability of these metrics and requires manual SQL modifications for each new reporting period or change in business focus.","SAFE_CAST(t0.financial_year AS STRING) IN ('2026')
t0.gl_publication_name IN ('Punters', 'Racenet')
UPPER(SAFE.LEFT(t0.advertiser_name, 3)) = 'CTR'","Parameterize these values within the Looker Studio dashboard using controls (e.g., date range filters, dropdowns for publications/buckets). Alternatively, define these as flexible dimensions/filters within a semantic layer, allowing users to dynamically select criteria without altering the underlying SQL.",104,5e8c40fc-c6c2-4e1c-a44b-b779ab9a72f9
sum_c_score_target_by_publication_group,Hardcoded Logic,"The SQL query for the 'Sum of C-Score Target by Publication Group' metric explicitly filters data using a hardcoded date range (`WHERE SAFE_CAST(t0.week_ending AS DATE) >= DATE '2025-05-26' AND SAFE_CAST(t0.week_ending AS DATE) <= DATE '2025-06-01'`). This directly contradicts the metric's business description, which states that 'The date range is dynamically applied by the dashboard's controls.' This hardcoding prevents the dashboard from responding to user-selected date filters, leading to incorrect or empty results for most date selections, severely limiting the dashboard's functionality and accuracy.",WHERE SAFE_CAST(t0.week_ending AS DATE) >= DATE '2025-05-26' AND SAFE_CAST(t0.week_ending AS DATE) <= DATE '2025-06-01',"Replace the hardcoded date filter with a Looker Studio date parameter (e.g., `WHERE SAFE_CAST(t0.week_ending AS DATE) BETWEEN @DS_START_DATE AND @DS_END_DATE`) to enable dynamic date filtering as per the business requirement. This will ensure the metric accurately reflects the selected date range and aligns with the dashboard's intended interactive functionality.",105,3516a531-3188-4e5d-b49c-3150298ebdc7
all_ai_assisted_metrics_and_dimensions,Anti-Pattern,"The core logic for identifying 'AI-assisted' articles, including specific string patterns in `content_body`, a hardcoded list of `PublicationGroup` values, and a fixed start date, is duplicated across 12 metrics and dimensions. This violates the DRY (Don't Repeat Yourself) principle, making updates to the AI definition or publication groups extremely cumbersome and error-prone. The initial analysis's '0 governance issues' is contradicted by this widespread anti-pattern.","Example from `total_articles_ai_assisted` (similar logic in 11 other metrics/dimensions):
```sql
WHERE
  lower(d.PublicationGroup) IN (""gold coast bulletin"", ""nt news"", ""national sports newsroom"", ""geelong advertiser"") AND
  FORMAT_DATE('%Y%m%d', date(ArticleDateUpdated)) BETWEEN '20230101' AND FORMAT_DATE('%Y%m%d', CURRENT_DATE()) AND (content_body LIKE ""%created with the assistance of AI technology%"" OR content_body LIKE ""%FBOX%"" OR content_body LIKE ""%FACTBOX%"")
```","Centralize the 'AI-assisted' article identification logic into a dedicated BigQuery view or a UDF (User Defined Function). This view/UDF should encapsulate the `content_body` pattern matching, publication group filtering, and date range logic. All dependent metrics should then query this centralized object. Consider externalizing the list of publication groups into a lookup table or using Looker Studio parameters for dynamic filtering.",106,c03dec50-b74e-40c6-a5c8-50fad5ea3f0f
"total_articles_ai_assisted, total_page_views_ai_assisted, total_subscriber_page_views_ai_assisted, sum_article_engaged_time_per_pv_ai_assisted, total_c_score_ai_assisted",Anti-Pattern,The `image` CTE and its subsequent join are included in several aggregate metrics where the `ArticleThumbnailLink` column is not used in the final `SELECT` statement. This adds unnecessary complexity and potential performance overhead to queries that do not require image-related data.,"Example from `total_articles_ai_assisted`:
```sql
WITH
  image AS (
    SELECT
      content_id AS Articleid,
      concat(""https://content.api.news/v3/images/bin/"", id) AS ArticleThumbnailLink
    FROM
      (
        SELECT
          content_id,
          id,
          type,
          row_number() OVER (PARTITION BY content_id) AS rwn
        FROM
          `cdm_capi.capi_article`,
          UNNEST(contentreferences)
        WHERE
          1 = 1 AND date(dw_tgt_partition_date) BETWEEN ""2023-01-01"" AND CURRENT_DATE() AND type = ""image""
      )
    WHERE
      rwn = 1
  ),
  articles AS (...)
SELECT
  COUNT(DISTINCT a.content_id) AS total_articles_ai_assisted
FROM
  articles AS a
  JOIN
  image AS i
  ON a.content_id = i.Articleid
```",Remove the `image` CTE and its join from any metric SQL where `ArticleThumbnailLink` or other image-related fields are not directly utilized. This will simplify the queries and potentially improve performance.,106,c03dec50-b74e-40c6-a5c8-50fad5ea3f0f
all_measure_metrics,Anti-Pattern,"All aggregate (measure) metrics (`total_articles_ai_assisted`, `total_articles_non_ai`, `total_page_views_ai_assisted`, etc.) unnecessarily include `LIMIT 1;` at the end of their SQL queries. While benign for queries that already produce a single aggregated row, it is redundant and can indicate a copy-paste error or a misunderstanding of SQL aggregation, potentially leading to incorrect results if applied incorrectly in other contexts.","Example from `total_articles_ai_assisted`:
```sql
SELECT
  COUNT(DISTINCT a.content_id) AS total_articles_ai_assisted
FROM
  articles AS a
  JOIN
  image AS i
  ON a.content_id = i.Articleid
LIMIT 1;
```",Remove the `LIMIT 1;` clause from all aggregate metric queries. It serves no functional purpose here and can be misleading.,106,c03dec50-b74e-40c6-a5c8-50fad5ea3f0f
article_count_daily_the_daily_telegraph_filtered,Hardcoded Logic,"The SQL query uses a hardcoded date ('20250824') for filtering, making the 'Daily' report static and requiring manual updates for each day's data. This severely limits the dashboard's utility for dynamic daily reporting.","t0.articledateupdated >= PARSE_DATE('%Y%m%d', '20250824')
    AND t0.articledateupdated <= PARSE_DATE('%Y%m%d', '20250824')","Replace hardcoded dates with Looker Studio date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to enable dynamic date filtering based on user selection or dashboard refresh schedules.",107,39e47abe-f145-4ba6-9562-03fc4d6512d4
article_count_daily_the_daily_telegraph_filtered,Anti-Pattern,"The query contains a long, hardcoded `NOT IN` list for `publicationgroup` and multiple `section` exclusions. This logic is brittle, difficult to maintain, and prone to errors if new publication groups or sections are introduced or changed. It also duplicates filtering logic found in other metrics.","t0.publicationgroup NOT IN ('Fox Sports', 'News.com.au', 'Wires', 'Escape', 'Global syndication', 'Whimn Network', 'Kids News', 'Other', 'News Prestige Network', 'News Regional Media', 'PerthNow', 'Stellar')
    AND t0.section1 != 'real-estate'
    AND t0.section3 != 'hyperlocal'
    AND t0.section2 != 'hyperlocal'","Create a dedicated lookup table for publication group and section exclusions. Join to this table or use a subquery to dynamically filter, improving maintainability, scalability, and consistency across metrics.",107,39e47abe-f145-4ba6-9562-03fc4d6512d4
c_score_target_sum_weekly_by_publication_group,Hardcoded Logic,"The SQL query uses a hardcoded date range ('2025-04-14' to '2025-04-20') for filtering, making the 'Weekly' report static and requiring manual updates for each week's data. This undermines its purpose as a dynamic weekly tracker.","t0.week_ending >= DATE '2025-04-14'
    AND t0.week_ending <= DATE '2025-04-20'","Replace hardcoded dates with Looker Studio date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to enable dynamic date filtering based on user selection or dashboard refresh schedules.",107,39e47abe-f145-4ba6-9562-03fc4d6512d4
article_count_daily_the_daily_telegraph_scored_unscored,Hardcoded Logic,"Similar to the first metric, this SQL query uses a hardcoded date ('20250821') for filtering. This makes the 'Daily' report static and requires manual updates, duplicating the same critical issue found in the other article count metric.","clmn2_ >= PARSE_DATE('%Y%m%d', '20250821')
    AND clmn2_ <= PARSE_DATE('%Y%m%d', '20250821')","Replace hardcoded dates with Looker Studio date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to enable dynamic date filtering.",107,39e47abe-f145-4ba6-9562-03fc4d6512d4
article_count_daily_the_daily_telegraph_scored_unscored,Anti-Pattern,"The query contains a long, hardcoded `NOT IN` list for `publicationgroup` and multiple `section` exclusions, identical to the first article count metric. This duplication of brittle logic increases maintenance overhead and the risk of inconsistencies if the exclusion criteria change.","clmn5_ NOT IN ('Fox Sports', 'News.com.au', 'Wires', 'Escape', 'Global syndication', 'Whimn Network', 'Kids News', 'Other', 'News Prestige Network', 'News Regional Media', 'PerthNow', 'Stellar')
    AND clmn6_ != 'real-estate'
    AND clmn8_ != 'hyperlocal'
    AND clmn7_ != 'hyperlocal'","Consolidate this filtering logic into a shared view or a dbt model. Alternatively, create a dedicated lookup table for exclusions and join to it, ensuring consistency and ease of maintenance.",107,39e47abe-f145-4ba6-9562-03fc4d6512d4
article_count_daily_the_daily_telegraph_scored_unscored,Anti-Pattern,"The metric embeds a complex, multi-step business logic for calculating and categorizing article scores (`clmn13_` and `clmn22_`) directly within the SQL query. This makes the logic difficult to understand, test, reuse across other reports, and maintain. Any change to the scoring model requires modifying the dashboard's underlying SQL, which is not scalable.","(((SAFE_CAST(clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(clv_amount_from_pkg AS FLOAT64)) + (SubscriberPV * 0.16)) + (TotalPV * 0.02)) AS clmn13_
...
CASE
            WHEN (clmn13_ >= 10000) THEN '5'
            WHEN (clmn13_ < 10000 AND clmn13_ >= 7500) THEN '4'
            WHEN (clmn13_ < 7500 AND clmn13_ >= 5000) THEN '3'
            WHEN (clmn13_ < 5000 AND clmn13_ >= 2000) THEN '2'
            WHEN (clmn13_ < 2000 AND clmn13_ >= 400) THEN '1'
            ELSE '0'
        END AS clmn22_","Push this complex scoring logic upstream into a dedicated data model (e.g., a BigQuery view or dbt model). This would pre-calculate the score and category, allowing the dashboard to simply select and group by these pre-computed fields, improving performance, maintainability, and consistency across all data products that might use this scoring.",107,39e47abe-f145-4ba6-9562-03fc4d6512d4
total_subscribers_ta_consumer_non_print_20250325,Hardcoded Logic,"The 'Total Subscribers' metric is hardcoded to a specific future date ('2025-03-25') and specific categorical values ('TA' masthead, 'Consumer' type, excluding 'Print-only'). This makes the metric static and requires manual updates to view current or different historical data.","t0.report_date = DATE '2025-03-25' AND STRPOS(t0.combined_masthead, 'TA') > 0 AND STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND t0.combined_classification_level_2 != 'Print-only'","Replace hardcoded dates with a Looker Studio date parameter or dynamic date functions (e.g., `CURRENT_DATE()`). Parameterize categorical filters (masthead, customer type, classification) to allow user selection or dynamic filtering, potentially using a lookup table for `combined_classification_level_2` if 'Print-only' is a common exclusion.",108,736e39be-8b74-442d-bf5a-0b75971e3de0
total_additions_ta_consumer_budget_20250818,Hardcoded Logic,"The 'Total Additions' metric is hardcoded to a specific future date ('2025-08-18') and specific categorical values ('TA' masthead, 'Consumer' product category, 'Budget' scenario). The weekly alignment also uses a hardcoded timestamp, ensuring it always refers to the week of 2025-08-18.","t0.dw_tgt_partition_date = DATE '2025-08-18' AND DATETIME_TRUNC(DATE(TIMESTAMP '2025-08-18 22:54:26.063665+00', 'UTC'), ISOWEEK) = DATETIME_TRUNC(t0.last_day_of_week, ISOWEEK) AND t0.think_masthead = 'TA' AND t0.tm1_product_category = 'Consumer' AND t0.scenario_type = 'Budget'","Implement Looker Studio date parameters for `dw_tgt_partition_date` and replace the hardcoded timestamp in `DATETIME_TRUNC` with a dynamic function like `CURRENT_TIMESTAMP()` or a date parameter to enable current or selected week analysis. Parameterize `think_masthead`, `tm1_product_category`, and `scenario_type`.",108,736e39be-8b74-442d-bf5a-0b75971e3de0
total_cancels_ta_consumer_budget_20250818,Hardcoded Logic,"Similar to 'Total Additions', 'Total Cancels' is hardcoded to a specific future date ('2025-08-18') and specific categorical values ('TA' masthead, 'Consumer' product category, 'Budget' scenario). The weekly alignment also uses a hardcoded timestamp.","t0.dw_tgt_partition_date = DATE '2025-08-18' AND DATETIME_TRUNC(DATE(TIMESTAMP '2025-08-18 22:54:26.063665+00', 'UTC'), ISOWEEK) = DATETIME_TRUNC(t0.last_day_of_week, ISOWEEK) AND t0.think_masthead = 'TA' AND t0.tm1_product_category = 'Consumer' AND t0.scenario_type = 'Budget'",Apply the same recommendations as for 'Total Additions': use dynamic date parameters and parameterize categorical filters.,108,736e39be-8b74-442d-bf5a-0b75971e3de0
net_movement_ta_consumer_budget_20250818,Hardcoded Logic,"As a calculated field based on 'Total Additions' and 'Total Cancels', 'Net Movement' inherits the same hardcoded date ('2025-08-18') and categorical filters, including the static weekly alignment.","t0.dw_tgt_partition_date = DATE '2025-08-18' AND DATETIME_TRUNC(DATE(TIMESTAMP '2025-08-18 22:54:26.063665+00', 'UTC'), ISOWEEK) = DATETIME_TRUNC(t0.last_day_of_week, ISOWEEK) AND t0.think_masthead = 'TA' AND t0.tm1_product_category = 'Consumer' AND t0.scenario_type = 'Budget'","Ensure the underlying 'Total Additions' and 'Total Cancels' metrics are refactored to use dynamic dates and parameters, which will automatically resolve this for 'Net Movement'.",108,736e39be-8b74-442d-bf5a-0b75971e3de0
subscription_target_date_20250622,Hardcoded Logic,"This metric, defined as a 'dimension', is filtered to a single hardcoded date ('2025-06-22'). This effectively makes it a static value rather than a dynamic dimension that could be used for filtering or displaying different target dates.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-06-22'","If this is intended to be a selectable or dynamic target date, remove the hardcoded filter and allow Looker Studio to handle date selection. If it's truly a fixed reference for this dashboard, consider if it needs to be a 'dimension' or if a simpler text field would suffice.",108,736e39be-8b74-442d-bf5a-0b75971e3de0
total_subscribers_ta_consumer_non_print_20250325,Anti-Pattern,"The use of `STRPOS` for filtering `combined_customer_type` and `combined_masthead` implies partial string matching. If exact matches are intended (e.g., 'Consumer' means *only* 'Consumer'), this could lead to unintended inclusions (e.g., 'SuperConsumer' matching 'Consumer').","STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND STRPOS(t0.combined_masthead, 'TA') > 0","Clarify the exact matching requirements. If exact matches are needed, replace `STRPOS` with direct equality (`= 'Consumer'`) or `LIKE 'Value'` for more precise filtering. If partial matching is truly desired, ensure the data structure supports this without ambiguity.",108,736e39be-8b74-442d-bf5a-0b75971e3de0
total_day_target_education_key_pubs,Hardcoded Logic,"The metric explicitly lists specific `publication_group` values ('Herald Sun', 'The Daily Telegraph', 'The Advertiser', 'The Courier-Mail') and excludes 'The Australian' directly within the WHERE clause. This hardcoded list makes the query rigid; any change to the definition of 'Key Publications' would require manual SQL modification.","AND t0.publication_group != 'The Australian'
    AND (t0.publication_group = 'Herald Sun' OR t0.publication_group = 'The Daily Telegraph' OR t0.publication_group = 'The Advertiser' OR t0.publication_group = 'The Courier-Mail')","Define 'Key Publications' in a separate lookup table or configuration, allowing for dynamic management of publication groups without altering SQL logic. Alternatively, if Looker Studio parameters are used, ensure the list is driven by a controlled source.",109,33b41b56-aab7-4a76-bb96-0c891b4b0a1f
"total_day_target_education_key_pubs, total_day_target_education_section",Hardcoded Logic,"Both metrics use a hardcoded regular expression (`'education|Education'`) to filter the `section_team`. While `REGEXP_CONTAINS` handles case-insensitivity, this string is still hardcoded. If the 'Education' team name changes or if other related section teams need to be included, the SQL would require manual updates.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.section_team AS STRING), 'education|Education')",Consider defining section team categories in a lookup table or using a parameter if the 'Education' team name is subject to change or if the definition of 'Education section' might expand to include other related teams.,109,33b41b56-aab7-4a76-bb96-0c891b4b0a1f
total_subscriber_count_ta_consumer_fy25_q3_q4,Hardcoded Logic,"This metric, and others in the subscriber count group, hardcodes specific date ranges, masthead ('TA'), customer type ('Consumer'), and classification ('Print-only' exclusion) directly into the SQL query. This approach makes the metric inflexible, requiring manual modification for each new reporting period or any change in business definition, leading to potential errors and high maintenance overhead.","WHERE (t0c1d0.report_date >= DATE '2024-02-25' AND t0c1d0.report_date <= DATE '2024-05-20' AND t0c1d0.member_type = 'subscriber' AND STRPOS(t0c1d0.combined_customer_type, 'Consumer') > 0 AND t0c1d0.combined_classification_level_2 != 'Print-only' AND STRPOS(t0c1d0.combined_masthead, 'TA') > 0)","Implement dynamic date filtering using Looker Studio's date range controls or BigQuery's date functions (e.g., `CURRENT_DATE()`, `DATE_SUB`). For masthead, customer type, and classification, consider using Looker Studio parameters or creating a small dimension table to manage these attributes, allowing for more flexible and reusable filtering logic.",110,50fdfb08-6d82-4d1d-a41d-de3284ec00b7
active_weekly_subscriber_count_ta_consumer_fy25_q3_q4,Anti-Pattern,"The definition of 'weekly active' (4 out of the last 28 days) is hardcoded within a `CASE` statement. While functionally correct for the current definition, this makes the metric rigid. If the business definition of 'active' changes (e.g., to 3 weeks or 5 weeks), this specific SQL logic needs to be manually updated.",SUM(CASE WHEN (t0c1d0.subscriber_last_28_days_active_weeks_count = 4) THEN t0c1d0.subscriber_count ELSE 0 END),"If 'active' definitions are subject to frequent change or vary by context, consider externalizing this logic. This could involve a configuration table or a more abstract metric definition that allows the 'active threshold' to be a parameter, improving adaptability.",110,50fdfb08-6d82-4d1d-a41d-de3284ec00b7
sum_paid_subscribers_open_rate_newsletter_activity,Anti-Pattern,"This metric, along with all other newsletter activity metrics, relies on extremely verbose and complex hardcoded `REGEXP_CONTAINS` clauses for filtering `newsletter_brand`, `newsletter_send_email_name` (both inclusion and exclusion), and `newsletter_subject`. This exact, lengthy filtering logic is duplicated across four distinct metrics. This is a severe anti-pattern that drastically increases maintenance effort, introduces a high risk of inconsistencies if updates are not applied uniformly, and makes the SQL difficult to read and debug.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_brand AS STRING), 'HeraldSun|CourierMail|DailyTelegraph|TheAdvertiser|NTNews|CairnsPost|TownsvilleBulletin|TheChronicle|GoldCoastBulletin|GeelongAdvertiser|TheMercury|WeeklyTimesNow|CodeSports') AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT_|MARKETING|Special Offer|EVENT|Not Available|_Suspend|_Failed|_Abandoned|_Lead_Nurture|Rewards_|_Wave|_Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Decommission|Switch|Modify|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause') AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape|Delicious |Beauty EDM|Vogue Living Weekly') AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_subject AS STRING), 'NAME_ALIAS|%%=')","Create dedicated lookup tables (e.g., `dim_newsletter_brand_whitelist`, `dim_newsletter_email_patterns`, `dim_newsletter_subject_exclusions`) to centralize these complex filtering criteria. The SQL queries could then join to these lookup tables, significantly simplifying the `WHERE` clauses and ensuring consistency and ease of maintenance across all related metrics. This also allows for easier updates to the filtering logic without modifying multiple dashboard metrics.",110,50fdfb08-6d82-4d1d-a41d-de3284ec00b7
"movement_type_classification, total_subscriber_movements_filtered_no_switch_reactivation, total_subscriber_movements_detailed_no_switch_reactivation",Anti-Pattern,"The complex `CASE` statement defining 'Subscriber Movement Type Classification' is duplicated across three different metrics: `movement_type_classification` (as a calculated field), and within the `WHERE` clause of `total_subscriber_movements_filtered_no_switch_reactivation` and `total_subscriber_movements_detailed_no_switch_reactivation`. This redundancy creates a single point of failure for logic changes and significantly increases maintenance overhead. Any modification to the classification rules would require updating multiple, distinct SQL queries.","CASE
    WHEN (LOWER(SAFE_CAST(is_voluntary_cancellation_flag AS STRING)) = 'involuntary') THEN '1) Subscriber Involuntary Cancel'
    WHEN (subscriber_tenure_days <= 30) THEN '2) Trialist Cancel'
    WHEN ((is_switch_flag = 'N') AND (is_reactivation_flag = 'N') AND (is_cancel_flag = 'Y')) THEN '3) Subscriber Cancel'
    WHEN ((is_switch_flag = 'Y') AND (is_reactivation_flag = 'N') AND (is_cancel_flag = 'N')) THEN '4) Subscriber Switch'
    WHEN ((is_switch_flag = 'N') AND (is_reactivation_flag = 'Y') AND (is_cancel_flag = 'N')) THEN '5) Subscriber Reactivation'
    ELSE 'ERROR'
  END","Centralize the `movement_type_classification` logic. This can be achieved by: 
1.  **Data Model Layer:** Create a persistent derived table (PDT) or a view in BigQuery that pre-calculates and stores this classification as a dedicated column in the `subscriber_cancels` dataset. 
2.  **Looker ML/View Layer:** If using Looker, define this as a dimension in the Looker ML model, ensuring a single source of truth for the business logic. This would allow all dependent metrics to simply reference this pre-defined dimension.",111,5705039f-1f6f-4c93-aba9-8ce549025d5c
"total_subscriber_movements_filtered_no_switch_reactivation, total_subscriber_movements_by_classification_level_2, total_subscriber_movements_detailed_no_switch_reactivation, total_subscriber_movements_by_voluntary_cancellation_flag",Hardcoded Logic,"All aggregation metrics (`total_subscriber_movements_filtered_no_switch_reactivation`, `total_subscriber_movements_by_classification_level_2`, `total_subscriber_movements_detailed_no_switch_reactivation`, `total_subscriber_movements_by_voluntary_cancellation_flag`) use a hardcoded date range (`DATE '2024-12-01' AND DATE '2025-01-31'`). This severely limits the dashboard's utility, as it only displays data for a fixed, future period. To view current or historical data, manual updates to each metric's SQL logic would be required, making the dashboard static and non-dynamic.",subscriber_movement_date >= DATE '2024-12-01' AND subscriber_movement_date <= DATE '2025-01-31',"Implement dynamic date filtering. In Looker Studio, this typically involves using a date range control that passes parameters to the underlying BigQuery queries. In BigQuery, this can be achieved using `CURRENT_DATE()` and `DATE_SUB()` functions to define relative date ranges (e.g., last 30 days, current month), or by leveraging BigQuery's parameterized queries if the dashboard tool supports it.",111,5705039f-1f6f-4c93-aba9-8ce549025d5c
sum_article_body_words_count_for_content_id,Hardcoded Logic,"This metric's SQL logic contains a hardcoded 'example_content_id' in its WHERE clause. This makes the metric static and non-dynamic, rendering it unusable for general analysis across various content IDs within a live dashboard environment. It suggests the metric might be a placeholder or an incomplete definition.",SAFE_CAST(t0c0d1.content_id AS STRING) = 'example_content_id',Replace the hardcoded 'example_content_id' with a Looker Studio parameter or filter control to allow users to dynamically select the content ID. This will enable the metric to be truly functional and reusable.,112,d5fd8b83-22d8-478f-8e22-b9e83bda01f2
sum_video_time_spent_count_the_australian,Hardcoded Logic / Anti-Pattern,"This metric's SQL logic includes hardcoded date ranges (2025-01-01 to 2025-03-17) and a hardcoded publication group ('The Australian'). This severely limits the metric's flexibility and reusability, as it cannot be used for different time periods or other publication groups without manual modification. The future-dated range also suggests it might be a placeholder or a dashboard intended for future deployment.","FORMAT_TIMESTAMP('%Y%m%d', SAFE_CAST(t0.content_updated_date AS TIMESTAMP)) >= '20250101' AND FORMAT_TIMESTAMP('%Y%m%d', SAFE_CAST(t0.content_updated_date AS TIMESTAMP)) <= '20250317' AND SAFE_CAST(t0.PublicationGroup AS STRING) = 'The Australian'","Implement Looker Studio date range controls and a publication group filter. This will allow users to dynamically select the desired period and publication, making the metric versatile. Consider creating a base view or a common data source that handles date and publication filtering to avoid duplication.",112,d5fd8b83-22d8-478f-8e22-b9e83bda01f2
sum_video_time_spent_instance_count_the_australian,Hardcoded Logic / Anti-Pattern,"Similar to 'Total Video Time Spent (The Australian)', this metric also contains hardcoded date ranges (2025-01-01 to 2025-03-17) and a hardcoded publication group ('The Australian'). This represents duplicated logic, increasing maintenance overhead and the risk of inconsistencies if changes are required. The future-dated range is also present here.","FORMAT_TIMESTAMP('%Y%m%d', SAFE_CAST(t0.content_updated_date AS TIMESTAMP)) >= '20250101' AND FORMAT_TIMESTAMP('%Y%m%d', SAFE_CAST(t0.content_updated_date AS TIMESTAMP)) <= '20250317' AND SAFE_CAST(t0.PublicationGroup AS STRING) = 'The Australian'","As with the previous metric, utilize Looker Studio date range controls and a publication group filter. To address the duplication, consider defining a common data source or a calculated field that encapsulates the filtering logic for 'The Australian' and the dynamic date range, which can then be reused across both video metrics.",112,d5fd8b83-22d8-478f-8e22-b9e83bda01f2
total_day_target_website_weekly_nsn_code,Hardcoded Logic,"This metric's SQL logic hardcodes both the weekly date range (2025-06-23 to 2025-06-29) and specific publication groups ('National Sports Newsroom', 'Code') using a REGEXP_CONTAINS clause. This makes the metric static and requires manual modification for each new reporting week or if new publication groups need to be included. It violates the DRY (Don't Repeat Yourself) principle and hinders dynamic reporting and future consolidation.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-06-23' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-06-29' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'National Sports Newsroom|Code')","Parameterize the date range using Looker Studio date controls or BigQuery scripting variables to allow dynamic selection. For publication groups, consider using a lookup table for `publication_group` or a Looker Studio filter control based on a distinct list of publication groups from the source table, rather than hardcoding values within the query.",113,63911575-4b9d-45c4-830c-8726e98adb93
total_c_score_target_weekly,Hardcoded Logic,"Similar to other metrics in this dashboard, this metric hardcodes the weekly date range (2025-06-23 to 2025-06-29). This prevents the dashboard from dynamically updating for current or past weeks without manual SQL changes, leading to high maintenance overhead.",WHERE t0.week_ending >= DATE '2025-06-23' AND t0.week_ending <= DATE '2025-06-29',"Implement date parameters in Looker Studio to allow users to select the desired week, or use BigQuery scripting/Looker Studio data source parameters to dynamically calculate the current week's range (e.g., `CURRENT_DATE()` and `DATE_SUB()` functions).",113,63911575-4b9d-45c4-830c-8726e98adb93
total_c_score_target_historical,Hardcoded Logic,"This metric hardcodes a specific historical date range (2023-07-03 to 2025-07-06). While intended for historical context, hardcoding limits flexibility if the 'historical period' definition changes or needs to be extended dynamically. It also means the 'historical' period will become outdated over time without manual intervention.",WHERE t0.week_ending >= DATE '2023-07-03' AND t0.week_ending <= DATE '2025-07-06',"Consider defining the historical period dynamically (e.g., 'last 2 years from current date' using `CURRENT_DATE()` and `DATE_SUB()` functions) or providing parameters for users to define custom historical ranges, especially if the definition of 'historical' is subject to change.",113,63911575-4b9d-45c4-830c-8726e98adb93
impressions_mobile_free_news_lifestyle_australia,Hardcoded Logic,"The metric's SQL query uses a hardcoded date range in the future (March 2025), which will prevent it from displaying current or relevant historical data correctly.","t0.visit_date >= PARSE_DATE('%Y%m%d', '20250301') AND t0.visit_date <= PARSE_DATE('%Y%m%d', '20250331')","Replace hardcoded dates with dynamic date parameters (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)`) or leverage Looker Studio's built-in date range controls for user-defined periods.",114,f81b655d-53a4-47f8-a195-c230b57dd77c
impressions_mobile_free_news_lifestyle_australia,Anti-Pattern,"The SQL contains an extremely long and hardcoded `CASE` statement to map 3-letter country codes to full country names. This is highly inefficient, error-prone, and difficult to maintain or extend as new countries are added or mappings change.",(CASE WHEN t0.country = 'abw' THEN 'Aruba' WHEN t0.country = 'afg' THEN 'Afghanistan' ... WHEN t0.country = 'aus' THEN 'Australia' ... ELSE 'others' END),"Create a dedicated country lookup table (e.g., `dim_country`) with ISO codes and full names, and join to this table. This centralizes the mapping, improves query readability, and simplifies maintenance.",114,f81b655d-53a4-47f8-a195-c230b57dd77c
impressions_mobile_free_news_lifestyle_australia,Anti-Pattern,"The SQL uses a hardcoded `CASE` statement to categorize brands into business segments (e.g., 'Free News & Lifestyle'). This logic is duplicated across multiple metrics within the dashboard.",(CASE WHEN t0.brand = 'Australia\'s Best Recipes' THEN 'Free News & Lifestyle' WHEN t0.brand = 'Body+Soul' THEN 'Free News & Lifestyle' ... ELSE NULL END),"Define brand categories in a governed lookup table (e.g., `dim_brand_category`) and join to it. This ensures consistency, simplifies updates, and promotes true data consolidation and reusability across the data model.",114,f81b655d-53a4-47f8-a195-c230b57dd77c
discover_clicks_newscomau_global_free_news_lifestyle,Hardcoded Logic,"The metric's SQL query uses a hardcoded date range in the future (April-June 2025) and an additional, potentially conflicting, past date filter (`2024-06-20`). This will prevent it from displaying current or relevant historical data.",visit_date >= DATE '2025-04-01' AND visit_date <= DATE '2025-06-30' AND visit_date >= DATE '2024-06-20',Replace hardcoded dates with dynamic date parameters or Looker Studio date range controls. Ensure date filters are logically consistent and cover the desired reporting period without conflicts.,114,f81b655d-53a4-47f8-a195-c230b57dd77c
discover_clicks_newscomau_global_free_news_lifestyle,Anti-Pattern,"The SQL uses a hardcoded `CASE` statement to group countries into 'Global' or 'Domestic'. While simpler than the other country mapping, it's still a hardcoded business rule embedded directly in the metric SQL.",(CASE WHEN country = 'All' THEN 'Global' WHEN country = 'Australia' THEN 'Domestic' ELSE NULL END),"If 'Global' and 'Domestic' are common groupings, define them in a small lookup table or as a derived field in a semantic layer (e.g., LookML, dbt model) for reuse and centralized management.",114,f81b655d-53a4-47f8-a195-c230b57dd77c
discover_clicks_newscomau_global_free_news_lifestyle,Anti-Pattern,This metric duplicates the exact same extensive hardcoded `CASE` statement for brand categorization found in the 'Impressions' metric. This is a clear violation of the DRY (Don't Repeat Yourself) principle and indicates poor consolidation at the data definition layer.,(CASE WHEN brand = 'Australia\'s Best Recipes' THEN 'Free News & Lifestyle' WHEN brand = 'Body+Soul' THEN 'Free News & Lifestyle' ... ELSE NULL END),"As with the 'Impressions' metric, define brand categories in a governed lookup table (e.g., `dim_brand_category`) and join to it. This is crucial for true consolidation and maintainability across the dashboard and potentially other dashboards.",114,f81b655d-53a4-47f8-a195-c230b57dd77c
total_listens_by_device_type_20250806_20250812,Hardcoded Logic,"Multiple metrics on the dashboard, including this one, define their own specific, hardcoded date ranges (e.g., Aug 6-12, Aug 5-11, Aug 4-10, Aug 11). This makes the dashboard static, requires manual updates for each reporting period, and prevents dynamic filtering or historical analysis without modifying the underlying metrics. This is a significant anti-pattern for a production dashboard.",WHERE (SAFE_CAST(t0.report_date AS DATE) >= DATE '2025-08-06' AND SAFE_CAST(t0.report_date AS DATE) <= DATE '2025-08-12'),"Implement dynamic date filtering using Looker Studio's built-in date range controls or parameters. Define a single `report_date` dimension that can be filtered by users, allowing all relevant metrics to respond to a unified date selection. This would eliminate the need for multiple metrics with slightly different hardcoded date ranges.",115,811bb139-3da6-4fa5-8ddc-4b9f263cb1d5
total_listens_by_content_section_20250811,Hardcoded Logic,"This metric, like others, uses a hardcoded date range (a single day in this case). This approach is inflexible and requires constant manual updates to view current data, hindering the dashboard's utility for ongoing analysis.",WHERE (SAFE_CAST(t0.report_date AS DATE) >= DATE '2025-08-11' AND SAFE_CAST(t0.report_date AS DATE) <= DATE '2025-08-11'),"As with other date-bound metrics, leverage Looker Studio's dynamic date range capabilities. This allows users to select their desired reporting period without requiring changes to the underlying metric definition.",115,811bb139-3da6-4fa5-8ddc-4b9f263cb1d5
unique_articles_20250804_20250810,Hardcoded Logic,"The metric's SQL logic includes a hardcoded date range, which restricts its applicability to a fixed historical period. This design choice prevents the dashboard from being a dynamic tool for ongoing monitoring and analysis.",WHERE (SAFE_CAST(t0.report_date AS DATE) >= DATE '2025-08-04' AND SAFE_CAST(t0.report_date AS DATE) <= DATE '2025-08-10'),"Refactor the metric to utilize a flexible date dimension, enabling users to select any desired date range for analysis. This enhances the dashboard's reusability and reduces maintenance overhead.",115,811bb139-3da6-4fa5-8ddc-4b9f263cb1d5
total_listens_by_device_type_20250805_20250811,Hardcoded Logic,"This metric is functionally similar to 'Total Listens by Device Type (Aug 6-12, 2025)' but with a slightly different hardcoded date range. This duplication of logic with minor date variations is a strong anti-pattern, indicating poor reusability and increased maintenance burden. If the intent is to show different periods, this should be handled via dashboard-level date controls, not separate metrics.",WHERE (SAFE_CAST(t0.report_date AS DATE) >= DATE '2025-08-05' AND SAFE_CAST(t0.report_date AS DATE) <= DATE '2025-08-11'),"Consolidate these similar 'Total Listens by Device Type' metrics into a single, reusable metric definition. The date range should be controlled dynamically at the dashboard level, allowing users to compare different periods without needing multiple hardcoded metric definitions.",115,811bb139-3da6-4fa5-8ddc-4b9f263cb1d5
report_date_list_20250805_20250811,Hardcoded Logic,"Even a dimension used for date display or filtering is hardcoded to a specific date range. While its purpose is to list dates, hardcoding limits its utility to only that specific period, requiring manual updates for future use.",WHERE (SAFE_CAST(t0.report_date AS DATE) >= DATE '2025-08-05' AND SAFE_CAST(t0.report_date AS DATE) <= DATE '2025-08-11'),"Define a generic `report_date` dimension without hardcoded filters. This dimension can then be used in Looker Studio's date range controls, allowing it to dynamically display or filter dates based on user selection across any period available in the data.",115,811bb139-3da6-4fa5-8ddc-4b9f263cb1d5
total_unique_listeners_other_publication_group_20250805_20250811,Anti-Pattern|Hardcoded Logic,"This metric combines two significant anti-patterns: a hardcoded date range and a complex, hardcoded `CASE` statement for categorizing `source_article_publicationgroup`. The `CASE` statement is brittle; any changes to publication groups or categorization rules require direct SQL modification. It also only calculates for the 'Other' category, implying similar hardcoded metrics might exist for 'FNL', 'TAP', 'S&C', leading to significant duplication and maintenance burden.",(CASE WHEN (clmn1_ = 'True Crime Australia') THEN 'Other' WHEN (clmn1_ = 'Escape Australia') THEN 'FNL' WHEN (clmn1_ = 'news.com.au') THEN 'FNL' WHEN (clmn1_ = 'Vogue Australia') THEN 'TAP' WHEN (clmn1_ = 'Vogue Living') THEN 'TAP' WHEN (clmn1_ = 'The Australian') THEN 'TAP' WHEN (clmn1_ = 'CODE Sports') THEN 'S&C' WHEN (clmn1_ = 'Browny\'s Podcast') THEN 'Other' WHEN (clmn1_ = 'News Corp Australia') THEN 'FNL' WHEN (clmn1_ = 'Body+Soul') THEN 'FNL' WHEN (clmn1_ = 'The Daily Telegraph') THEN 'S&C' WHEN (clmn1_ = 'Herald Sun') THEN 'S&C' WHEN (clmn1_ = 'Kidspot') THEN 'FNL' WHEN (clmn1_ = 'Australia\'s Best Recipes') THEN 'FNL' WHEN (clmn1_ = 'The Advertiser') THEN 'S&C' WHEN (clmn1_ = 'The Newsroom Explains') THEN 'Other' WHEN (clmn1_ = 'delicious. Australia') THEN 'S&C' WHEN (clmn1_ = 'taste.com.au') THEN 'FNL' WHEN (clmn1_ = 'Courier Mail') THEN 'S&C' WHEN (clmn1_ = 'GQ Australia') THEN 'TAP' ELSE 'Other' END),"1. **Date Range:** Implement dynamic date filtering as recommended for other metrics. 2. **Categorization:** Create a dedicated lookup table (e.g., `publication_group_mapping`) in the data warehouse that maps `source_article_publicationgroup` to its corresponding consolidated category (e.g., 'Other', 'FNL', 'TAP', 'S&C'). Join this lookup table to the `article_voice_engagement_metrics` table. This centralizes business logic, improves maintainability, and allows for easier updates to categorization rules without modifying dashboard metrics. This also enables analysis across all categories, not just 'Other'.",115,811bb139-3da6-4fa5-8ddc-4b9f263cb1d5
social_platform_derived_dimension,Hardcoded Logic|Data Mismatch|Anti-Pattern,"The 'Social Platform' metric uses a hardcoded `CASE` statement with `REGEXP_CONTAINS` to categorize platforms (Instagram, Facebook, Tiktok). However, the `business_rules_sql` live data shows 'Other/Unknown' as a significant category (33,275 records), while 'Tiktok' is not explicitly present in the live data categories. This indicates that the `CASE` statement's logic for 'Tiktok' might be incomplete or incorrect, or there are other platforms not accounted for, leading to miscategorization or data loss.","CASE WHEN (SAFE.REGEXP_CONTAINS(t0.post_url, 'instagram.com')) THEN 'Instagram' WHEN (SAFE.REGEXP_CONTAINS(t0.post_url, 'facebook.com')) THEN 'Facebook' WHEN (SAFE.REGEXP_CONTAINS(t0.post_url, '.tiktok.com')) THEN 'Tiktok' ELSE NULL END","Investigate the 'Other/Unknown' category in the live data to identify its contents. Refine the `REGEXP_CONTAINS` pattern for 'Tiktok' if it's the source of the 'Other/Unknown' values. For better maintainability and scalability, consider replacing the hardcoded `CASE` statement with a join to a governed lookup table for `post_url` to `social_platform` mapping. This would allow for easier updates as new platforms emerge or URL patterns change.",116,d381c80a-e345-4120-8950-e85e976e50b6
"acquisition_count_q3, cancellation_count_q3, net_subscription_movement_q3, sunday_subscription_count_q4",Hardcoded Logic,"All metrics hardcode the fiscal year to `2025`. This prevents the dashboard from dynamically displaying current or historical data without manual updates to each metric's SQL, severely limiting its reusability and requiring ongoing maintenance.",t0.fy_year IN (2025),Replace the hardcoded fiscal year with a dynamic parameter or a dashboard-level date filter that can derive the current fiscal year or allow user selection. Consider a date dimension table for robust fiscal period management.,117,fb7ea77f-c0b0-490a-9cb2-eb49816cf8fa
"acquisition_count_q3, cancellation_count_q3, net_subscription_movement_q3, sunday_subscription_count_q4",Hardcoded Logic,"All metrics hardcode the `local_brand_name` to 'News Regional Media'. This restricts the dashboard's utility to a single brand, making it non-reusable for analyzing other brands without manual SQL modifications.",t0.local_brand_name IN ('News Regional Media'),"Implement a dashboard filter for `local_brand_name` to allow users to dynamically select one or more brands. If brand definitions are complex, consider a governed brand lookup table.",117,fb7ea77f-c0b0-490a-9cb2-eb49816cf8fa
"acquisition_count_q3, cancellation_count_q3, net_subscription_movement_q3, sunday_subscription_count_q4",Hardcoded Logic,"The `classification_level_1` and `classification_level_2` filters are hardcoded to specific values ('Standard Paid', 'Other Paid', 'Digital', 'Bundles'). This limits the analytical scope and flexibility of the dashboard.","t0.classification_level_1 IN ('Standard Paid', 'Other Paid') AND t0.classification_level_2 IN ('Digital', 'Bundles')","Convert these hardcoded lists into dashboard filters or parameters, enabling users to select relevant classification levels. For standardized business definitions, a governed lookup table for classification levels would improve maintainability.",117,fb7ea77f-c0b0-490a-9cb2-eb49816cf8fa
"acquisition_count_q3, cancellation_count_q3, net_subscription_movement_q3",Data Mismatch,"The `fy_week_of_year` filter (`NOT IN (45) OR IS NULL`) is applied to 'Acquisition Count', 'Cancellation Count', and 'Net Subscription Movement' but is conspicuously absent from 'Sunday Subscription Count'. This inconsistency means these metrics are operating on different data populations, which could lead to misleading comparisons or misinterpretations within the same dashboard.",(t0.fy_week_of_year NOT IN (45) OR t0.fy_week_of_year IS NULL),"Investigate the business requirement for this specific week exclusion. If it's intended to apply broadly, ensure consistency across all relevant metrics. If it's specific to certain metrics, clearly document the rationale. Consider making this a dashboard-level filter if it's a common exclusion.",117,fb7ea77f-c0b0-490a-9cb2-eb49816cf8fa
sunday_subscription_count_q4,Anti-Pattern,"The `sunday_subscription_count` metric uses a `CASE WHEN` statement to sum `subscription_count` only when `sunday_flag = 'Y'`. While functional, this pattern can be less efficient or harder to read than direct filtering if `sunday_flag` is a boolean or if the underlying data model could pre-calculate this sum.",SUM(CASE WHEN (t0.sunday_flag = 'Y') THEN t0.subscription_count ELSE 0 END),"If `sunday_flag` is a boolean, consider casting it to a boolean type in the underlying view. For performance, if the sum is *only* for 'Y' records, a `WHERE t0.sunday_flag = 'Y'` clause combined with `SUM(t0.subscription_count)` might be more direct. Alternatively, if this is a frequently used aggregation, consider creating a dedicated `sunday_subscription_count` column in the `v_subscription_base_movement_agg` view to simplify metric definitions and improve query performance.",117,fb7ea77f-c0b0-490a-9cb2-eb49816cf8fa
sdm_profisee_profisee_data_finc_circ_dti_revrec_vol_red_pct_load_status,Hardcoded Logic,"The SQL logic for checking data load status in `sdm_profisee.profisee_data` hardcodes the `source_entity_name` ('finc_circ_dti_revrec_vol_red_pct'). This requires a separate, nearly identical metric for each distinct entity within the `profisee_data` table, leading to redundancy and poor scalability.",SAFE_CAST(source_entity_name AS STRING) = 'finc_circ_dti_revrec_vol_red_pct',"Parameterize the `source_entity_name` or implement a generic data freshness check that can iterate over entities, potentially using a metadata table to define which entities to monitor. This would allow a single metric definition to cover multiple entities.",118,21263991-9738-454a-977b-1158587a1525
sdm_profisee_profisee_data_finc_circ_dti_revrec_unit_price_load_status,Hardcoded Logic,"Similar to the volume metric, the SQL logic for checking data load status in `sdm_profisee.profisee_data` hardcodes the `source_entity_name` ('finc_circ_dti_revrec_unit_price'). This is a repeated instance of the hardcoding anti-pattern.",SAFE_CAST(source_entity_name AS STRING) = 'finc_circ_dti_revrec_unit_price',"As above, parameterize the `source_entity_name` or use a generic, metadata-driven approach to monitor multiple entities within the `profisee_data` table.",118,21263991-9738-454a-977b-1158587a1525
cdm_newscycle_invoice_account_detail_load_status,Anti-Pattern,"The dashboard exhibits a strong anti-pattern of creating individual 'Load Status' and 'Most Recent Load Date' metrics for each table/entity. The SQL logic is highly repetitive, differing only by table name, partition column, and specific freshness criteria. This leads to significant duplication and makes maintenance cumbersome.",SELECT CASE WHEN(SELECT Count(*) FROM `ncau-data-newsquery-prd.cdm_newscycle.invoice_account_detail` WHERE SAFE_CAST(dw_partition_date AS DATE) = `CURRENT_DATE`() - 2) > 0 AND (SELECT Count(*) FROM `ncau-data-newsquery-prd.cdm_newscycle.invoice_account_detail` WHERE SAFE_CAST(dw_partition_date AS DATE) = `CURRENT_DATE`()) > 0 THEN 'Success' ELSE 'Fail' END AS load_status FROM (SELECT 1) LIMIT 1,"Implement a centralized data freshness monitoring solution. This could involve a dedicated BigQuery table that stores freshness rules for all critical tables, or a dbt package that generates these checks dynamically. Looker Studio could then query this centralized source, reducing the number of individual calculated fields and improving maintainability.",118,21263991-9738-454a-977b-1158587a1525
bdm_circulation_v_rcti_circulation_revenue_fct_load_status,Anti-Pattern,"Freshness criteria are inconsistently applied across different tables. For instance, this metric checks for data within the last 1 day on `dw_tgt_partition_date` AND within the last 7 days on `created_date`, while other metrics use different date ranges or single date columns. This lack of standardization complicates understanding and managing data freshness.",WHERE SAFE_CAST(dw_tgt_partition_date AS DATE) >= `CURRENT_DATE`() - 1) > 0 AND (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.bdm_circulation.v_rcti_circulation_revenue_fct` WHERE SAFE_CAST(created_date AS DATE) >= `CURRENT_DATE`() - 7,"Standardize freshness criteria where possible. For cases where different criteria are necessary, define and centralize these rules in a metadata layer or configuration table. This allows for easier updates and consistent application of rules across the data landscape, improving governance and clarity.",118,21263991-9738-454a-977b-1158587a1525
"registrations_by_article_id_health_australian, registrations_by_article_section_facebook_social, registrations_by_social_referrer",Hardcoded Logic,"All metrics on this dashboard contain hardcoded `SubscriptionDateTime` filters set to future dates (e.g., '2025-05-29' to '2025-06-04' for the first metric, '2025-02-01' to '2025-02-28' for the second, and '2025-06-13' to '2025-06-19' for the third). This configuration will prevent the dashboard from displaying any current or historical data, likely resulting in empty visualizations for users.","t0.SubscriptionDateTime >= TIMESTAMP '2025-05-29' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-06-04', INTERVAL 1 DAY)","Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)`) to ensure the dashboard displays relevant, up-to-date information based on the intended reporting period.",119,43bb6e05-d417-49e0-870f-e51fa1b31b59
"registrations_by_article_section_facebook_social, registrations_by_social_referrer",Anti-Pattern,"The logic for deriving `derived_social_referrer` using a `CASE` statement based on `t0.SubscriptionSourceCode` is duplicated across two different metrics. This repetition creates maintenance overhead, increases the risk of inconsistencies if the mapping rules change, and makes the queries less readable.","CASE
    WHEN SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_INS') THEN 'Instagram'
    WHEN SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_BIN') THEN 'Bing'
    WHEN SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_PIN') THEN 'Pinterest'
    WHEN SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_TWT') THEN 'X / Twitter'
    WHEN SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_GSC') THEN 'Google Showcase'
    ELSE t0.SocialReferrer
  END","Centralize the `derived_social_referrer` logic. This can be achieved by: 
1.  **Creating a logical view or materialized view** in BigQuery that pre-calculates this field, allowing all dashboards to reference a single, governed definition. 
2.  **Defining a custom field at the Looker Studio data source level** if the transformation is simple and doesn't require complex BigQuery processing. 
3.  If the mapping is complex and dynamic, consider creating a **lookup table** for `SubscriptionSourceCode` to `SocialReferrer` mapping and joining to it.",119,43bb6e05-d417-49e0-870f-e51fa1b31b59
all_metrics,Hardcoded Logic,"All metrics within the dashboard utilize hardcoded future dates in their `WHERE` clauses (e.g., '2025-08-26' or '2025-07-01'). This is a severe anti-pattern for a 'Daily Update' dashboard, as it prevents the dashboard from displaying current or dynamic data. The inconsistency in hardcoded dates across metrics further exacerbates the issue, leading to potentially disparate data points even if the queries were to execute successfully.",WHERE SAFE_CAST(visit_date AS DATE) = DATE '2025-08-26' (or '2025-07-01'),"Replace all hardcoded dates with dynamic date parameters. For a 'Daily Update' dashboard, consider using `CURRENT_DATE()` or Looker Studio's built-in date range parameters (e.g., `_PARTITIONTIME` or `_PARTITIONDATE` if applicable) to ensure the dashboard automatically updates with the latest data. Ensure consistent date filtering logic across all metrics.",120,8a7be976-10d2-4657-aa8a-8bcbcb4c4cd7
"instances_from_homepage, visits_from_search",Anti-Pattern (Potential),"Metrics that filter by `data_type` (e.g., 'Homepage', 'Search') use `CASE WHEN SAFE_CAST(data_type AS STRING) = '...' THEN ... END` within the `SUM` aggregation. While functional for a few specific filters, this pattern can become cumbersome and repetitive if many `data_type` filters are needed, making maintenance difficult and potentially leading to errors if `data_type` values change or new ones are introduced. It also prevents dynamic filtering by `data_type` from the dashboard interface.",SUM(CASE WHEN SAFE_CAST(data_type AS STRING) = 'Homepage' THEN SAFE_CAST(instances AS INT64) ELSE NULL END),"For specific filtered metrics, this approach is acceptable. However, for broader reusability or if many `data_type` filters are anticipated, consider creating a base view that includes a `data_type` column, allowing Looker Studio's native filtering capabilities to be used. Alternatively, if the dashboard needs to dynamically switch between `data_type` values, a Looker Studio parameter could be used in the SQL query.",120,8a7be976-10d2-4657-aa8a-8bcbcb4c4cd7
"total_daily_target_national_sports_newsroom_20250303_20250309, total_daily_target_national_sports_newsroom_20250327_20250402",Hardcoded Logic|Anti-Pattern,"Both metrics on the dashboard are essentially the same underlying calculation ('Total Daily Target for National Sports Newsroom') but are duplicated to display different, hardcoded date ranges. This creates redundant metrics and SQL queries, making the dashboard less flexible and harder to maintain. Any change to the target date logic or publication group would require modifying multiple metrics.","WHERE
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-03-03' AND
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-03-09' AND
  t0.publication_group = 'National Sports Newsroom'","Consolidate these into a single, parameterized metric. Utilize Looker Studio's date range controls and parameters for the `targetdate` filter. If the 'National Sports Newsroom' filter is not always constant, consider making `publication_group` a dashboard parameter as well. This would allow users to dynamically select date ranges and publication groups without requiring new metrics for each permutation.",121,eb8b311c-ae29-4773-b749-b429715b073d
total_adds_standard_paid_digital_hs,Hardcoded Logic,"Multiple key performance indicators (KPIs) for 'Total Adds', 'Total Cancels', and 'Net Adds' share identical hardcoded filtering logic for 'Standard Paid' class level, 'Digital' delivery medium, and 'HS' masthead. While consistent for this specific dashboard, this approach reduces flexibility and increases maintenance effort if these business definitions evolve or if similar metrics for other segments are required across different dashboards.",WHERE t0.report_date = DATE 'YYYY-MM-DD' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.masthead = 'HS',"Consider defining these common filtering criteria as a parameterized view or a dedicated dimension in the underlying data model (`v_consumer_activity_daily_summary`) to promote reusability and centralize business rule definitions. Alternatively, if these are truly fixed, ensure robust documentation and governance around these specific metric definitions.",122,3c4b6517-cd6a-4138-bd32-09644e44c44a
total_cancels_standard_paid_digital_hs,Hardcoded Logic,"This metric exhibits the same hardcoded filtering logic as 'Total Adds', contributing to the pattern of repeated business rule definitions within the SQL queries.",WHERE t0.report_date = DATE 'YYYY-MM-DD' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.masthead = 'HS',Refer to the recommendation for 'total_adds_standard_paid_digital_hs' regarding externalizing or parameterizing common filtering criteria.,122,3c4b6517-cd6a-4138-bd32-09644e44c44a
net_adds_standard_paid_digital_hs,Hardcoded Logic,"As a calculated field based on 'adds' and 'cancels', this metric also inherits and explicitly applies the same hardcoded filtering logic, reinforcing the pattern.",WHERE t0.report_date = DATE 'YYYY-MM-DD' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.masthead = 'HS',Refer to the recommendation for 'total_adds_standard_paid_digital_hs' regarding externalizing or parameterizing common filtering criteria.,122,3c4b6517-cd6a-4138-bd32-09644e44c44a
"total_tables_monitored_adpoint_cdm, tables_with_acceptable_status_adpoint_cdm, total_tables_monitored_sfnca, tables_with_acceptable_status_sfnca",Hardcoded Logic & Anti-Pattern (Business Rules in SQL),"All four metrics embed complex, hardcoded business rules for determining `overall_status` directly within nested `CASE` statements. These rules vary by `table_name` (e.g., 'adsales_sundry_revenue', 'adsales_contracts', 'gbaba_act_xref') and involve specific time-based thresholds (`EXTRACT(HOUR FROM time(...))`). This approach makes it difficult to manage and update freshness criteria, especially as new tables are added or existing rules change. The logic is also duplicated across the Adpoint/CDM and SFNCA metric pairs.","CASE
  WHEN date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") AND
  table_name != ""adsales_sundry_revenue"" AND table_name != ""adsales_targets"" AND table_name != ""adsales_contracts"" AND
  table_name != ""gbaba_act_xref"" THEN
  CASE
    WHEN(EXTRACT(HOUR FROM time(datetime(last_modified_time, ""Australia/Sydney""))) <= 4) THEN 'Success'
    WHEN(EXTRACT(HOUR FROM time(datetime(last_modified_time, ""Australia/Sydney""))) >= 5 AND EXTRACT(HOUR FROM time(datetime(last_modified_time,
        ""Australia/Sydney""))) <= 8) THEN ' '
    ELSE 'Need a check'
  END
  WHEN(table_name = ""adsales_contracts"" OR table_name = ""gbaba_act_xref"") AND date(datetime(last_modified_time,
      ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
  CASE
    WHEN(EXTRACT(HOUR FROM time(datetime(last_modified_time, ""Australia/Sydney""))) <= 15) THEN 'Success'
    WHEN(EXTRACT(HOUR FROM time(datetime(last_modified_time, ""Australia/Sydney""))) >= 16 AND EXTRACT(HOUR FROM time(datetime(last_modified_time,
        ""Australia/Sydney""))) <= 19) THEN ''
    ELSE 'Need a check'
  END
  -- ... and more similar logic ...","Externalize data freshness rules into a dedicated BigQuery configuration or metadata table. This table should define `table_name`, `refresh_frequency`, `success_hour_threshold`, `warning_hour_threshold`, and other relevant parameters. The SQL logic can then join to this table to dynamically apply rules, significantly improving maintainability and scalability. Consider using a UDF or a common view to encapsulate the status calculation logic.",123,a5ab7569-238a-4229-a402-868a12d75088
"total_tables_monitored_adpoint_cdm, tables_with_acceptable_status_adpoint_cdm, total_tables_monitored_sfnca, tables_with_acceptable_status_sfnca",Anti-Pattern (Hardcoded Lookup Data),"All metrics utilize large `UNION ALL` CTEs (`dd1_sdm`, `dd1_cdm`, `dd1`) to define `TableName` and `RefreshRate` pairs. This is a clear anti-pattern for managing lookup or configuration data. Any change to a table's refresh rate or the addition/removal of a monitored table requires direct modification of the SQL query, which is error-prone and bypasses proper data governance for metadata.","dd1_sdm AS (
  SELECT ""sub_contracts"" AS TableName, ""2:00"" AS RefreshRate UNION ALL SELECT ""spec_places2"", ""2:00"" UNION ALL SELECT ""sales_rep_export"", ""2:00"" UNION ALL SELECT ""sales_package_groups_export"", ""2:00"" UNION ALL SELECT ""sale_types_export"", ""2:00"" UNION ALL SELECT ""sale_teams_export"", ""2:00"" UNION ALL SELECT ""roles_export"", ""2:00"" UNION ALL SELECT ""revenue_site_recognition_export"", ""2:00"" UNION ALL SELECT ""revenue_recognition_export"", ""2:00"" UNION ALL SELECT ""rate_card_export"", ""2:00"" UNION ALL SELECT ""publication_export"", ""2:00"" UNION ALL SELECT ""promotions_export2"", ""2:00"" UNION ALL SELECT ""price_item_export"", ""2:00"" UNION ALL SELECT ""payments_export"", ""2:00"" UNION ALL SELECT ""packages_export"", ""2:00"" UNION ALL SELECT ""orders_export2"", ""2:00"" UNION ALL SELECT ""order_items2"", ""2:00"" UNION ALL SELECT ""order_item_price_item"", ""2:00"" UNION ALL SELECT ""order_item_metadata"", ""2:00"" UNION ALL SELECT ""online_zones_export"", ""2:00"" UNION ALL SELECT ""online_sites_export"", ""2:00"" UNION ALL SELECT ""online_product_types_export"", ""2:00"" UNION ALL SELECT ""online_ads_export2"", ""2:00"" UNION ALL SELECT ""online_ad_types_export"", ""2:00"" UNION ALL SELECT ""online_ad_sizes_export"", ""2:00"" UNION ALL SELECT ""offices_export"", ""2:00"" UNION ALL SELECT ""office_directors_export"", ""2:00"" UNION ALL SELECT ""material_export"", ""2:00"" UNION ALL SELECT ""join_specplace_onlinezone"", ""2:00"" UNION ALL SELECT ""join_specplace_onlinesite"", ""2:00"" UNION ALL SELECT ""join_publ_specplace"", ""2:00"" UNION ALL SELECT ""join_publ_basic"", ""2:00"" UNION ALL SELECT ""join_publ_adsize"", ""2:00"" UNION ALL SELECT ""invoices_export2"", ""2:00"" UNION ALL SELECT ""insert_ads_export"", ""2:00"" UNION ALL SELECT ""insert_ad_regions"", ""2:00"" UNION ALL SELECT ""ext_references"", ""2:00"" UNION ALL SELECT ""ext_ref_types"", ""2:00"" UNION ALL SELECT ""ext_ref_sources"", ""2:00"" UNION ALL SELECT ""display_ads_export"", ""2:00"" UNION ALL SELECT ""customers_export2"", ""2:00"" UNION ALL SELECT ""contracts_export"", ""2:00"" UNION ALL SELECT ""contacts_export"", ""2:00"" UNION ALL SELECT ""addresses"", ""2:00"" UNION ALL SELECT ""ad_types"", ""2:00"" UNION ALL SELECT ""ad_sizes2"", ""2:00"" UNION ALL SELECT ""basic_price_export2"", ""2:00"" UNION ALL SELECT ""online_buyers"", ""2:00"" UNION ALL SELECT ""online_deal_types_export"", ""2:00"" UNION ALL SELECT ""campaign_categories"", ""2:00"" UNION ALL SELECT ""custom_campaign_types"", ""2:00"" UNION ALL SELECT ""order_custom_fields_export"", ""2:00"" UNION ALL SELECT ""ad_custom_fields_export"", ""2:00"" UNION ALL SELECT ""ad_custom_status"", ""2:00"" UNION ALL SELECT ""adsales_sundry_revenue"", ""weekly once"" UNION ALL SELECT ""adsales_contracts"", ""13:30"" UNION ALL SELECT ""adsales_targets"", ""weekly once"" UNION ALL SELECT ""gbaba_act_xref"", """" UNION ALL SELECT ""adsales_pipeline_revenue"", ""00:30""
)","Create dedicated BigQuery tables (e.g., `project.dataset.table_refresh_metadata`) to store `TableName` and `RefreshRate` information. This allows for centralized management, versioning, and easier updates without modifying dashboard SQL. The SQL queries can then simply join to these tables.",123,a5ab7569-238a-4229-a402-868a12d75088
"total_tables_monitored_adpoint_cdm, tables_with_acceptable_status_adpoint_cdm, total_tables_monitored_sfnca, tables_with_acceptable_status_sfnca",Anti-Pattern (Extensive SQL Duplication),"The core logic for extracting `INFORMATION_SCHEMA.PARTITIONS` data and calculating `overall_status` is almost entirely duplicated across the two pairs of metrics (Adpoint/CDM and SFNCA). This leads to a high maintenance burden, as any fix or enhancement to the data freshness logic must be applied in multiple places, increasing the risk of inconsistencies and errors.","FROM (
  WITH
    data_sdm AS (
      SELECT
        table_schema AS SCHEMA,
        table_name AS TABLE,
        PARSE_DATE(""%Y%m%d"", partition_id) AS partition_date,
        datetime(last_modified_time, ""Australia/Sydney"") AS UPDATE_TIME_AUS,
        total_rows AS ROW_COUNT,
        CASE ... END AS overall_status
      FROM
        ((
          SELECT * FROM (...) -- sdm_adpoint
        ) UNION ALL
        SELECT * FROM (...) -- sdm_advertisingexternals
      )
    ),
    dd1_sdm AS (...) -- hardcoded refresh rates
  SELECT ... FROM data_sdm INNER JOIN dd1_sdm ...
  UNION ALL
  (WITH
    data_cdm AS (
      SELECT
        table_schema AS SCHEMA,
        table_name AS TABLE,
        PARSE_DATE(""%Y%m%d"", partition_id) AS partition_date,
        datetime(last_modified_time, ""Australia/Sydney"") AS UPDATE_TIME_AUS,
        total_rows AS ROW_COUNT,
        CASE ... END AS overall_status
      FROM
        ((
          SELECT * FROM (...) -- cdm_adpoint
        ) UNION ALL
        SELECT * FROM (...) -- cdm_advertisingexternals
      )
    ),
    dd1_cdm AS (...) -- hardcoded refresh rates
  SELECT ... FROM data_cdm INNER JOIN dd1_cdm ...
  )
) AS t0","Create a consolidated BigQuery view or a series of modular views that encapsulate the common data freshness logic. This view would query `INFORMATION_SCHEMA.PARTITIONS` across all relevant datasets, apply the status calculation (potentially joining to the externalized metadata table), and then be consumed by the dashboard metrics. This promotes the DRY (Don't Repeat Yourself) principle and significantly improves maintainability.",123,a5ab7569-238a-4229-a402-868a12d75088
N/A,No Obvious Anti-Pattern,"Based on the provided SQL logic snippets, no significant anti-patterns such as repeated hardcoded values, overly complex CASE statements that should be replaced by lookup tables, or inefficient data access patterns were identified. The use of `SAFE_CAST`, `REGEXP_CONTAINS`, and `UNNEST` for GA4 data is appropriate and follows common best practices for BigQuery. The reliance on a dedicated reference table (`verity2_user_test`) for user-related dimensions is a positive consolidation practice.",N/A,Continue to monitor for potential anti-patterns as the dashboard evolves or if new metrics are added. Ensure that any future categorical data is sourced from governed lookup tables rather than hardcoded logic.,124,6dfeb6d8-8d5e-4118-ae57-9597289a7e53
"total_subscription_movements_hpr_rgpep_filtered_subscribers, total_subscription_movements_hpr_rgpep_filtered_subscribers_by_source_type_date_range, total_subscription_movements_expanded_source_non_rgpep_filtered_subscribers, total_subscription_movements_expanded_source_non_rgpep_filtered_subscribers_grouped, unique_subscribers_expanded_source_non_rgpep_filtered_subscribers_grouped",Hardcoded Logic / Anti-Pattern,"Multiple metrics share an identical, long, hardcoded list of `subscriber_id_src` values to be excluded using `NOT REGEXP_CONTAINS`. This approach is brittle, difficult to maintain, and prone to errors if the exclusion list changes. Any update requires modifying multiple metric definitions.","NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.subscriber_id_src AS STRING), '^(80636560|80636659|80637108|80637477|80637990|80637795|80637825|80637965|)$') AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.subscriber_id_src AS STRING), '^(80713076|80713220)$')","Create a dedicated lookup table (e.g., `excluded_subscriber_ids`) in BigQuery containing these IDs. Modify the metrics to perform a `LEFT JOIN` to this table and filter where the `subscriber_id_src` is `NULL` in the joined table, or use a `NOT EXISTS` subquery. This centralizes the exclusion logic and improves maintainability.",125,a4ae6326-c6de-4270-babd-bd87207b0af1
"total_subscription_movements_hpr_rgpep_filtered_subscribers, total_subscription_movements_hpr_rgpep_filtered_subscribers_by_source_type_date_range, total_subscription_movements_expanded_source_non_rgpep_filtered_subscribers, total_subscription_movements_expanded_source_non_rgpep_filtered_subscribers_grouped, unique_subscribers_expanded_source_non_rgpep_filtered_subscribers_grouped",Hardcoded Logic / Anti-Pattern,"The `sold_in_source_code` filtering uses extensive `REGEXP_CONTAINS` patterns that are hardcoded within the SQL logic of multiple metrics. There are two distinct sets of these patterns, one for 'HPR/RGPEP' and another 'Expanded Source'. This makes it difficult to manage new source codes or modify existing classifications without altering multiple metric definitions.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.sold_in_source_code AS STRING), 'TAWEB_WRE170_HPR|TAWEB_MRE170_HPR|TAWEB_EDM20240429_na|TAWEB_EDM20240429_nb|TAWEB_EDM20240429_nc|TAWEB_EDM20240429_nd|TAWEB_EDM20240429_ne|TAWEB_EDM20240429_nf|TAWEB_EDM20240429_ng|TAWEB_EDM20240513_dma|TAWEB_EDM20240513_dmbTAWEB_EDM20240513_dmc|TAWEB_EDM20240513_dmcc')","Implement a `sold_in_source_code_classification` lookup table. This table should map `sold_in_source_code` values to business-defined categories (e.g., 'HPR/RGPEP Offers', 'Expanded Non-RGPEP Offers'). Metrics can then join to this lookup table and filter by the category, significantly simplifying the SQL and improving flexibility.",125,a4ae6326-c6de-4270-babd-bd87207b0af1
total_subscription_movements_hpr_rgpep_filtered_subscribers_by_source_type_date_range,Hardcoded Logic,"The metric includes a hardcoded date range (`2024-10-01` to `2025-06-04`) directly in its SQL logic. This severely limits the reusability and dynamic nature of the dashboard, as the metric will only ever show data for this specific period, regardless of user selections.",t0.report_date >= DATE '2024-10-01' AND t0.report_date <= DATE '2025-06-04',"Remove the hardcoded date range from the SQL. Instead, leverage Looker Studio's built-in date range controls or create a custom date parameter that users can interact with. This allows the dashboard to be dynamic and serve various analytical periods.",125,a4ae6326-c6de-4270-babd-bd87207b0af1
payment_type_derived,Hardcoded Logic,The 'Payment Type' metric uses hardcoded `REGEXP_CONTAINS` patterns on `rate_plan_code` to categorize payment methods. The order of `WHEN` clauses and the broadness of `_DD` for 'Direct Debit' after more specific 'Credit Card' patterns (which also contain `_DD`) could lead to ambiguous or incorrect categorization if not carefully managed. This logic is difficult to maintain and scale.,"SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0c0d1.rate_plan_code, '_PP|_PI')) THEN 'Invoice' WHEN (SAFE.REGEXP_CONTAINS(t0c0d1.rate_plan_code, '_DDO_|_DD_|_DDS_|_DDE_')) THEN 'Credit Card' WHEN (SAFE.REGEXP_CONTAINS(t0c0d1.rate_plan_code, '_DD')) THEN 'Direct Debit' ELSE 'Credit Card' END AS payment_type","Replace the hardcoded `CASE` statement with a join to a governed `dim_payment_type` lookup table. This table should map `rate_plan_code` (or a derived key) to a standardized payment type, ensuring consistency and easier updates.",126,a0a0af46-f41f-4236-b6d1-6de8e92e6e23
delivery_schedule_type_derived,Hardcoded Logic,"The 'Delivery Schedule Type' metric relies on hardcoded `REGEXP_CONTAINS` patterns on `rate_plan_description` and `rate_plan_code`. The use of multiple case variations (e.g., 'Weekend|WEEKEND|Wknd') within the regex makes the logic verbose and prone to missing new variations or typos. This is a common anti-pattern for categorization.","SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0c0d1.rate_plan_description, 'Weekend|WEEKEND|Wknd|WKD|weekend|Saturday Home|Sunday Home')) THEN 'Weekend' WHEN (SAFE.REGEXP_CONTAINS(t0c0d1.rate_plan_description, '7 DAY|7-Day|7-day|7 Day|7 day|6 Day|Monday-Saturday')) THEN '7 or 6 Day' WHEN (SAFE.REGEXP_CONTAINS(t0c0d1.rate_plan_code, '_6DY|_7DY')) THEN '7 or 6 Day' ELSE 'other' END AS delivery_schedule_type",Create a `dim_delivery_schedule_type` lookup table that maps `rate_plan_description` or `rate_plan_code` to standardized delivery schedule types. Consider data cleaning or standardization of the source `rate_plan_description` field upstream.,126,a0a0af46-f41f-4236-b6d1-6de8e92e6e23
subscriber_activity_level_derived,Hardcoded Logic,"The 'Subscriber Activity Level' metric defines activity tiers using hardcoded numerical ranges within a `CASE` statement. Any change to these business-defined thresholds requires direct modification of the SQL logic, leading to potential inconsistencies across different reports or dashboards if not centrally managed.",SELECT CASE WHEN (t0.subscriber_days_active_last_30 = 0) THEN 'Dormant' WHEN (t0.subscriber_days_active_last_30 >= 16) THEN 'Super' WHEN (t0.subscriber_days_active_last_30 >= 1 AND t0.subscriber_days_active_last_30 <= 5) THEN 'Occasional' WHEN (t0.subscriber_days_active_last_30 >= 6 AND t0.subscriber_days_active_last_30 <= 10) THEN 'Light' WHEN (t0.subscriber_days_active_last_30 >= 11 AND t0.subscriber_days_active_last_30 <= 15) THEN 'Mid' ELSE 'Other' END AS subscriber_activity_level,"Externalize these ranges into a configuration table (e.g., `dim_activity_level_ranges`) or implement a User-Defined Function (UDF) that encapsulates this logic. This allows business users or data governance teams to manage thresholds without direct SQL changes.",126,a0a0af46-f41f-4236-b6d1-6de8e92e6e23
subscription_tenure_group_derived,Hardcoded Logic,"Similar to subscriber activity, the 'Subscription Tenure Group' metric uses hardcoded numerical ranges for tenure categorization. This approach lacks flexibility and central governance, making it difficult to adapt to evolving business definitions or to ensure consistency across reporting.",SELECT CASE WHEN (t0.subscription_tenure_days <= 90) THEN 'Under 3 months' WHEN (t0.subscription_tenure_days BETWEEN 91 AND 180) THEN '3 to 6 months' WHEN (t0.subscription_tenure_days BETWEEN 181 AND 270) THEN '6 to 9 months' WHEN (t0.subscription_tenure_days BETWEEN 271 AND 365) THEN '9 to 12 months' WHEN (t0.subscription_tenure_days > 365) THEN '12 months plus' ELSE NULL END AS subscription_tenure_group,"Implement a lookup table (e.g., `dim_tenure_groups`) or a UDF to manage subscription tenure ranges. This promotes reusability, consistency, and easier maintenance of business rules.",126,a0a0af46-f41f-4236-b6d1-6de8e92e6e23
contract_type_derived,Anti-Pattern: Complex Hardcoded Logic,"The 'Contract Type' metric uses an extremely complex `CASE` statement with multiple nested `REGEXP_CONTAINS` and `NOT` conditions on `rate_plan_code`. This logic is highly brittle, difficult to read, debug, and maintain. Given its 'high' business criticality, any error in this complex logic could have significant business impact. It's a prime example of an anti-pattern where business rules are embedded directly into SQL rather than being externalized.","SELECT CASE WHEN ((SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'W52|M12')) AND (SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CON|UNICS')) AND (NOT(SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CVM')))) THEN 'Contract 12 month' WHEN ((SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'M24')) AND (SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CON')) AND (NOT(SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CVM')))) THEN 'Contract 24 month' WHEN (((SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'W26|M06')) AND (SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CON')) AND (NOT(SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CVM')))) OR (SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'SDO_P0423AM06'))) THEN 'Contract 6 month' WHEN ((SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'CON')) AND (SAFE.REGEXP_CONTAINS(t0.rate_plan_code, 'W04|M01'))) THEN 'Contract roll-off - PAYG 4-weekly or monthly billed' ELSE 'Non contract, PAYG 4 weekly, monthly or invoice billing' END AS contract_type","This logic should be refactored. The ideal solution is to create a `dim_contract_type` lookup table that maps `rate_plan_code` (or components derived from it) to a standardized contract type. This table could be maintained by data governance or product teams. Alternatively, if `rate_plan_code` has a consistent structure, a UDF could parse and categorize it, but a lookup table is generally more flexible for complex, evolving business rules.",126,a0a0af46-f41f-4236-b6d1-6de8e92e6e23
data_load_datetime_second_grain,Anti-Pattern,"The `LIMIT 1` clause on a dimension intended for time-based filtering or display will only ever return a single timestamp. If this is meant to show the latest data load, it needs an `ORDER BY` clause. If it's for general filtering or displaying the range of data load times, `LIMIT 1` is incorrect.","SELECT DATETIME_TRUNC(data_load_datetime, SECOND) AS data_load_datetime_second FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` LIMIT 1","Clarify the intended use. If for 'last updated', add `ORDER BY data_load_datetime DESC`. If for filtering/displaying all relevant timestamps, remove `LIMIT 1`.",127,4114bd43-f752-4628-9b6c-1941b3c0d962
unified_publication_name_filtered_fy24_25,Hardcoded Logic|Anti-Pattern|Data Mismatch,"1. An extremely long, hardcoded `NOT IN` list for `unified_publication_name` is difficult to maintain, prone to errors, and indicates a lack of a governed lookup table for publication classifications/exclusions. 2. The `financial_year IN ('2024', '2025')` clause directly contradicts the dashboard's 'FY26 Campaigns Report' name, making the filter functionally incorrect for the stated purpose. 3. The `LIMIT 1` clause will only return a single distinct publication name, rendering the filter control ineffective for selecting multiple options.","WHERE unified_publication_name NOT IN ('Admin.ADV', ... 'Unruly') AND financial_year IN ('2024', '2025') LIMIT 1","1. Replace the hardcoded `NOT IN` list with a join to a governed lookup table. 2. Update the `financial_year` filter to include or dynamically select FY26, aligning with the dashboard's name. 3. Remove `LIMIT 1` to allow the filter to display all relevant distinct publication names.",127,4114bd43-f752-4628-9b6c-1941b3c0d962
financial_year_filtered_pub_name,Hardcoded Logic|Anti-Pattern|Data Mismatch,"1. The `NOT IN` list for `unified_publication_name` is duplicated from other metrics, indicating a lack of centralized definition and potential for inconsistencies. 2. The `LIMIT 1` clause will only return a single distinct financial year, rendering the filter control ineffective.","WHERE unified_publication_name NOT IN ('Admin.ADV', ... 'Unruly') LIMIT 1","1. Centralize the `unified_publication_name` exclusion logic (e.g., in a view or a governed lookup table) to avoid duplication. 2. Remove `LIMIT 1` to allow the filter to display all relevant distinct financial years.",127,4114bd43-f752-4628-9b6c-1941b3c0d962
gross_revenue_digital_filtered_fy24_25,Hardcoded Logic|Anti-Pattern|Data Mismatch,"1. Multiple extensive hardcoded `NOT IN` lists (`fin_adtype_name` and `unified_publication_name`) are duplicated across metrics and are difficult to maintain. 2. The `financial_year IN ('2024', '2025')` clause directly contradicts the dashboard's 'FY26 Campaigns Report' name, making this core KPI functionally incorrect for the stated purpose. The `SAFE_CAST(financial_year AS INT64) >= 2024` is redundant given the `IN` clause. 3. The `LIMIT 1` clause on a `SUM` aggregation is fundamentally incorrect and will prevent the metric from calculating the total sum across all relevant rows, leading to severely understated or incorrect results.","WHERE revenue_type = 'DIGITAL' AND SAFE_CAST(financial_year AS INT64) >= 2024 AND fin_adtype_name NOT IN ('Xtend', ... 'Unruly') AND unified_publication_name NOT IN ('Admin.ADV', ... 'Unruly') AND financial_year IN ('2024', '2025') LIMIT 1","1. Centralize exclusion logic for `fin_adtype_name` and `unified_publication_name` (e.g., in views or lookup tables). 2. Update the `financial_year` filter to include or dynamically select FY26, aligning with the dashboard's name. 3. **Crucially, remove `LIMIT 1`** to correctly calculate the total sum of `gross_revenue_amount`.",127,4114bd43-f752-4628-9b6c-1941b3c0d962
all_metrics,Hardcoded Logic,"All metrics within the dashboard utilize hardcoded date/timestamp ranges (e.g., `TIMESTAMP '2025-08-03'`, `DATE '2025-07-01'`) instead of dynamic relative dates or leveraging Looker Studio's date range parameters. This design choice prevents the dashboard from automatically displaying current data and requires manual intervention to update the SQL queries for data freshness.","(clmn8_ >= TIMESTAMP '2025-08-03' AND clmn8_ < TIMESTAMP_ADD(TIMESTAMP '2025-08-03', INTERVAL 1 DAY))","Replace hardcoded dates with Looker Studio date range parameters or dynamic SQL functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) to ensure data freshness, align with the 'Daily Update' dashboard name, and significantly reduce maintenance overhead.",128,9e810f08-0171-451e-a406-6bf7076c4d2f
"total_registrations_articles_health_wealth_daily, total_registrations_articles_australian_wealth_range, total_registrations_articles_aus_global_dowjones_daily, total_registrations_articles_aus_global_dowjones_daily_by_paywall_breach",Anti-Pattern,"Several article/registration metrics employ subqueries that select a large number of columns (e.g., `clmn1_`, `clmn5_`, `clmn6_`, etc.) from the base table (`t_registration_details_snapshot_summary`), even though only a small subset of these columns are subsequently used in the outer query's `WHERE` clause or `GROUP BY`. This can lead to unnecessary data processing, increased query costs, and longer execution times.","SELECT
    t0.ArticleDominantSection1 AS clmn1_,
    t0.ArticleLink AS clmn5_,
    t0.ArticleRightsSource AS clmn6_,
    t0.SocialReferrer AS clmn7_,
    t0.SubscriptionDateTime AS clmn8_,
    t0.SubscriptionSourceCode AS clmn9_,
    t0.categorytopic_path AS clmn10_,
    t0.ArticleCanonicalLink AS clmn0_,
    t0.ArticleHeadlineDefault AS clmn3_,
    t0.ArticleID AS clmn4_,
    t0.ArticleFirstPublished AS clmn2_
  FROM
    `ncau-data-newsquery-prd.prstn_verity.t_registration_details_snapshot_summary` AS t0","Refactor subqueries to select only the columns explicitly required for filtering, grouping, or aggregation in the outer query. This 'select what you need' approach will improve query performance and reduce resource consumption.",128,9e810f08-0171-451e-a406-6bf7076c4d2f
"total_subscription_targets_australian_daily_range, total_subscription_targets_annual_by_date_section",Anti-Pattern,"The `targetdate` column in the `cdm_reference_data.subscription_targets` table requires explicit parsing using `PARSE_DATE('%Y%m%d', SAFE_CAST(clmn2_ AS STRING))` for date comparisons. While functional, this indicates that the column is likely stored as a string or integer rather than a native `DATE` type, which can impact query performance and readability.","PARSE_DATE('%Y%m%d', SAFE_CAST(clmn2_ AS STRING))","Investigate the source data type of `targetdate` in `cdm_reference_data.subscription_targets`. If possible, convert it to a native `DATE` type at the ETL/ingestion layer. This would simplify SQL logic, remove the need for parsing functions, and potentially improve query performance.",128,9e810f08-0171-451e-a406-6bf7076c4d2f
subscriber_count_by_days_active_prior_28_daily,Hardcoded Logic,"This high-criticality daily metric uses a hardcoded future date (`2025-05-06`) in its `WHERE` clause, making the data static and irrelevant for current analysis. This is a fundamental flaw for a 'daily' metric.",WHERE dw_tgt_partition_date = DATE '2025-05-06',"Replace the hardcoded date with a dynamic date parameter (e.g., `_PARTITIONTIME` or a Looker Studio date range control) to ensure the dashboard displays current and relevant daily data. For example, `WHERE dw_tgt_partition_date = CURRENT_DATE()` or `WHERE dw_tgt_partition_date = @DS_START_DATE`.",129,4fc017fc-f405-453a-83c5-027155103330
subscriber_count_by_newsletter_and_attributes_daily,Hardcoded Logic,"Similar to other daily metrics, this high-criticality metric also contains a hardcoded future date (`2025-05-18`) in its `WHERE` clause, preventing it from reflecting current subscriber counts and attributes.",WHERE dw_tgt_partition_date = DATE '2025-05-18',Implement dynamic date filtering using Looker Studio's built-in date range controls or BigQuery's `CURRENT_DATE()` function to ensure the metric always displays up-to-date information.,129,4fc017fc-f405-453a-83c5-027155103330
sum_subscriber_churn_risk_by_newsletter_and_attributes_daily,Hardcoded Logic,"This high-criticality metric, intended for daily churn risk aggregation, is rendered static due to the hardcoded future date (`2025-05-18`) in its `WHERE` clause.",WHERE dw_tgt_partition_date = DATE '2025-05-18',"Update the query to use dynamic date parameters, aligning with the 'daily' nature of the metric and enabling real-time churn risk monitoring.",129,4fc017fc-f405-453a-83c5-027155103330
sum_subscriber_churn_risk_by_newsletter_and_attributes_daily,Anti-Pattern,"This metric shares an almost identical `WHERE` clause and an extensive `GROUP BY` clause with `subscriber_count_by_newsletter_and_attributes_daily`. This duplication of complex logic is inefficient and increases maintenance overhead, as changes to the filtering or grouping criteria would need to be applied in multiple places.","WHERE dw_tgt_partition_date = DATE '2025-05-18' AND SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name_28 AS STRING), 'MKT') AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name_28 AS STRING), 'CS_DAILY') GROUP BY newsletter_send_email_name_28, rewards_redeem_comp_1M, rewards_redeem_comp_lifetime, rewards_redeem_other_1M, rewards_redeem_other_lifetime, sf_contact_id, subscriber_app_reader_28, subscriber_combined_classification_level_1, subscriber_combined_classification_level_2, subscriber_combined_masthead, subscriber_days_active_prior_28, subscriber_dpe_reader_28, subscriber_id_src, subscriber_mosaic_title, subscriber_segment, subscriber_top_sections_28, subscriber_top_subsections_28, subscriber_top_subsubsections_28, subscriber_value_group, subscriber_web_reader_28","Consolidate the common filtering and grouping logic into a single BigQuery view or a CTE (Common Table Expression) that both metrics can reference. This promotes reusability, improves maintainability, and potentially optimizes query performance by reducing redundant processing.",129,4fc017fc-f405-453a-83c5-027155103330
subscriber_web_reader_28_single_contact,Hardcoded Logic,"The 'Web Reader Status for Specific Contact ID' metric is hardcoded to a single Salesforce Contact ID, severely limiting its reusability and utility for general analysis or ad-hoc lookups.",WHERE sf_contact_id = '496c04fbddb26474e436f5fc32b6947965af87b2ab0278f184874fc2ae04a348',"If this metric is intended for individual subscriber lookups, parameterize the `sf_contact_id` using a Looker Studio input control. This would allow users to dynamically enter any contact ID for investigation.",129,4fc017fc-f405-453a-83c5-027155103330
rewards_redeem_comp_lifetime_paid_subscribers_breakdown,Anti-Pattern,"The metric uses `STRPOS` for string matching to identify 'Paid' subscribers. While functional, `STRPOS` can be less precise than exact matching if 'Paid' might appear as a substring in other, unrelated classification values. It also might not be as performant as direct equality checks if the column is indexed for exact matches.","STRPOS(subscriber_combined_classification_level_1, 'Paid') > 0","If 'Paid' is an exact category, consider using `subscriber_combined_classification_level_1 = 'Paid'` for clarity and potential performance benefits. If classifications are complex or hierarchical, a dedicated lookup table for subscriber classification types would provide greater robustness and maintainability.",129,4fc017fc-f405-453a-83c5-027155103330
total_subscribers_by_audience_segment,Hardcoded Logic,"The metric uses a complex, hardcoded `CASE` statement to map `subscriber_mosaic_title` values to predefined `audience_segment` categories. This approach is inflexible and difficult to maintain. Any changes to the mosaic titles or the desired audience segmentation will require manual modification of the SQL query, increasing the risk of errors and maintenance overhead. It also lacks scalability for new or evolving segments.","CASE
        WHEN (t0.subscriber_mosaic_title = 'First Class Life' OR t0.subscriber_mosaic_title = 'Secure Tranquility' OR t0.subscriber_mosaic_title = 'Family Fringes') THEN 'Older affluents'
        WHEN (t0.subscriber_mosaic_title = 'Comfortable Foundations' OR t0.subscriber_mosaic_title = 'Striving for Status' OR t0.subscriber_mosaic_title = 'Establishing Roots' OR t0.subscriber_mosaic_title = 'Growing Independence') THEN 'Young professionals'
        WHEN (t0.subscriber_mosaic_title = 'Traditional Pursuits' OR t0.subscriber_mosaic_title = 'Mature Freedom' OR t0.subscriber_mosaic_title = 'Graceful Ageing' OR t0.subscriber_mosaic_title = 'Rural Commitment') THEN 'Growing Families'
        WHEN (t0.subscriber_mosaic_title = 'Hardship & Perseverance' OR t0.subscriber_mosaic_title = 'Middle Blue-collars' OR t0.subscriber_mosaic_title = 'True Grit') THEN 'Low income households'
        ELSE t0.subscriber_mosaic_title
    END AS audience_segment","Replace the hardcoded `CASE` statement with a join to a governed lookup table (e.g., `dim_audience_segments`) that contains the mapping between `subscriber_mosaic_title` and `audience_segment`. This centralizes the business logic, improves maintainability, and allows for easier updates without modifying core metric SQL.",130,a8f4530d-2788-4494-9ad2-73660bcd7c36
total_subscribers_by_masthead,Inconsistent Logic,"The filtering logic for determining 'paying consumer subscribers' differs significantly between 'Total Subscribers by Masthead' and the other two subscriber metrics ('Total Subscribers by Audience Segment' and 'Total Subscribers (Overall)'). Specifically, 'Total Subscribers by Masthead' uses `SAFE.REGEXP_CONTAINS` on `combined_is_paying_flag` and `combined_customer_type` fields, while the others use direct equality checks on `t0_subscriber_details.is_paying_flag` and `t0_subscriber_details.customer_type`. This inconsistency can lead to different subscriber counts for the same report date, undermining data trust and making cross-metric comparisons unreliable.","Metric: total_subscribers_by_masthead
WHERE clauses:
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.combined_is_paying_flag AS STRING), 'Y')
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer')

Metrics: total_subscribers_by_audience_segment, total_subscribers_overall
WHERE clauses:
    AND t0_subscriber_details.customer_type = 'Consumer'
    AND t0_subscriber_details.is_paying_flag = 'Y'","Standardize the filtering logic for 'paying consumer subscribers' across all metrics. Investigate the data model to understand the difference between `subscriber_details` fields and `combined_` fields. Once the correct and most performant approach is identified, apply it consistently. Consider creating a common base view or a UDF that encapsulates this core filtering logic to ensure consistency and reusability.",130,a8f4530d-2788-4494-9ad2-73660bcd7c36
"medallia_total_monitored_tables, medallia_tables_success_or_manual_check, audience_insights_freshness_status_count, general_cdm_sdm_monitored_datasets",Hardcoded Logic / Anti-Pattern,"Multiple metrics rely on extensive, hardcoded `UNION ALL` CTEs to define lists of monitored tables and datasets. This is particularly problematic in `general_cdm_sdm_monitored_datasets` which contains a very large, manually maintained list of dataset and table IDs. This approach is not scalable, highly prone to errors (e.g., typos, outdated entries), and creates a significant maintenance overhead when new tables are added, removed, or their monitoring parameters (like `update_frequency`) change. It also makes it difficult to audit what is truly being monitored versus what is merely listed.","WITH
  table_list AS (
    SELECT
      1440 AS update_frequency,
      'sdm_medallia' AS datasetid,
      'voc_app' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'sdm_medallia' AS datasetid,
      'voc_myaccount' AS tableid
    UNION ALL
    ...
    SELECT
      1440 AS update_frequency,
      'cdm_think' AS datasetid,
      'news_feature' AS tableid
  )","Replace hardcoded `UNION ALL` lists with a centralized metadata table (e.g., a BigQuery table) that stores monitored dataset/table names, their update frequencies, and any other relevant monitoring parameters. This table can be easily updated and queried, promoting data governance and maintainability. For BigQuery, consider leveraging `INFORMATION_SCHEMA.TABLES` and `INFORMATION_SCHEMA.SCHEMATA` with appropriate filtering to dynamically discover tables where feasible, reducing manual maintenance.",131,c3fc480a-3d9d-4ea9-96f3-4eab5ec79637
"prstn_consumer_monitored_tables, prstn_consumer_table_overall_status, prstn_consumer_table_row_check",Anti-Pattern / Duplication,"The core logic for determining data freshness status and identifying monitored tables within the `prstn_consumer` dataset is duplicated verbatim across three different metrics. This includes identical `main_data` and `dd1` CTEs, which contain complex `CASE` statements for status calculation and hardcoded refresh rates. This extensive duplication increases the risk of inconsistencies if logic needs to be updated (e.g., a change to freshness thresholds might not be applied to all three metrics), makes debugging difficult, and is inefficient in terms of query compilation and execution.","WITH
  main_data AS (
    SELECT
      table_schema AS SCHEMA,
      table_name AS TABLE,
      datetime(last_modified_time, ""Australia/Sydney"") AS UPDATE_TIME_AUS,
      total_rows AS ROW_COUNT,
      partition_id,
      CASE
        WHEN date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") AND
        table_name IN ('subscription_engagement_breadth', 'payment_revenue_fct', 'b2b_subscription_engagement',
          'b2c_subscription_engagement', 'consumer_activity_daily_summary', 'subscription_movement', 'subscription_base_movement_agg',
          'subscription_base') THEN
        CASE
          WHEN TIMESTAMP_DIFF(`CURRENT_TIMESTAMP`(), TIMESTAMP(DATETIME(last_modified_time, ""Australia/Sydney"")),
            HOUR) <= 25 THEN 'Success'
          ELSE
          CASE
            WHEN TIMESTAMP_DIFF(`CURRENT_TIMESTAMP`(), TIMESTAMP(DATETIME(last_modified_time, ""Australia/Sydney"")),
              HOUR) > 25 AND TIMESTAMP_DIFF(`CURRENT_TIMESTAMP`(), TIMESTAMP(DATETIME(last_modified_time, ""Australia/Sydney"")),
              HOUR) <= 26 THEN ' '
            ELSE 'Need a check'
          END
        END
        ...
  ),
  dd1 AS (
    SELECT
      ""subscription_engagement_breadth"" AS TableName,
      ""Every 24 Hours"" AS RefreshRate
    UNION ALL
    SELECT
      ""payment_revenue_fct"",
      ""Every 24 Hours""
    UNION ALL
    ...
  )","Encapsulate the common data freshness logic and table definitions for `prstn_consumer` into a BigQuery view or a set of BigQuery UDFs (User-Defined Functions). This would allow all dependent metrics to reference a single, consistent source of truth, significantly improving maintainability, reducing errors, and potentially optimizing query performance through BigQuery's query caching.",131,c3fc480a-3d9d-4ea9-96f3-4eab5ec79637
"medallia_tables_success_or_manual_check, audience_insights_freshness_status_count, prstn_consumer_table_overall_status",Anti-Pattern / Complex Logic,"The data freshness status calculation across multiple metrics uses complex, sometimes deeply nested, `CASE` statements to define alert statuses (e.g., 0, -1, -2, -3) or descriptive categories ('Success', 'Need a check', ' '). The specific thresholds (e.g., `updated_minutes_ago > update_frequency`, `update_frequency <= 132480`, `row_count = 0`) and conditions are hardcoded directly within these statements. This makes the logic difficult to read, understand, and modify, and can lead to subtle bugs if the rules are not consistently applied or updated.","CASE
  WHEN updated_minutes_ago > update_frequency AND update_frequency <= 132480 AND (updated_minutes_ago -
  update_frequency) > update_frequency THEN -2
  WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
  (updated_minutes_ago - update_frequency) > 30 THEN -2
  WHEN update_frequency = 0000 THEN -1
  WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
  update_frequency THEN -1
  WHEN row_count = 0 THEN -3
  ELSE 0
END AS alert_status","Consider refactoring complex `CASE` statements into more modular components. For common freshness rules or calculations (e.g., `updated_minutes_ago`), BigQuery UDFs could be used to encapsulate the logic. For specific thresholds or status mappings, these could potentially be stored in a configuration table rather than hardcoded in SQL, allowing for easier updates and better transparency of business rules.",131,c3fc480a-3d9d-4ea9-96f3-4eab5ec79637
total_c_score_target_by_publication_group,Hardcoded Logic,"The SQL query for the 'Total C-Score Target by Publication Group' metric explicitly filters data for a specific, future week (June 9-15, 2025). This hardcoded date range prevents the dashboard from dynamically updating with current or historical C-Score targets, severely limiting its utility for ongoing business analysis and monitoring.",WHERE SAFE_CAST(t0.week_ending AS DATE) BETWEEN DATE '2025-06-09' AND DATE '2025-06-15',"Replace the static date range with dynamic Looker Studio date parameters (e.g., `_DS_LAST_WEEK`, `_DS_TODAY`, or a user-selectable date range filter) to ensure the dashboard displays relevant, up-to-date information. This will allow the dashboard to serve its purpose as a dynamic performance monitoring tool.",132,f60ad8ef-829d-4363-b705-c60a305ec777
"All metrics (c_score_target_sum_weekly_20250331_20250406, c_score_target_sum_weekly_20250317_20250323, c_score_target_sum_weekly_20250804_20250810)",Hardcoded Logic / Anti-Pattern,"The dashboard defines multiple distinct metrics for the same underlying 'C-Score Target' measure, with the only difference being hardcoded date ranges in the WHERE clause. This is an anti-pattern for dashboard design, as it creates redundant metrics, makes the dashboard inflexible (requiring new metrics for every new time period), and significantly increases maintenance burden. A single, dynamic metric with date range controls or parameters would be far more efficient and scalable.",SELECT SUM(t0.c_score_target) AS c_score_target_sum FROM `ncau-data-newsquery-prd.cdm_reference_data.cscore_targets` AS t0 WHERE SAFE_CAST(t0.week_ending AS DATE) >= DATE '2025-03-31' AND SAFE_CAST(t0.week_ending AS DATE) <= DATE '2025-04-06',"Consolidate these three metrics into a single 'Total C-Score Target' metric. Utilize Looker Studio's built-in date range controls or create a parameter for dynamic date selection (e.g., 'Week Ending Date'). This would allow users to select any desired week or period without requiring new metric definitions. If specific fixed periods are required for comparison, consider using calculated fields with date functions or a single metric with a date dimension and filtering.",133,9b27e204-fd9a-4032-8669-58b6f23bfef
current_year_gross_revenue_sum,Hardcoded Logic / Anti-Pattern,"Multiple metrics (e.g., 'Current Year Gross Revenue', 'Previous Year Gross Revenue', 'Next Year Gross Revenue') use identical `CASE WHEN` statements to filter data based on hardcoded `relative_fy_year_offset` values (0, -1, 1). This creates redundancy, makes maintenance cumbersome if fiscal year definitions change, and prevents dynamic year selection without creating new metrics.",SUM(CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END),"Centralize fiscal year filtering logic. Consider creating a `fiscal_year_type` dimension (e.g., 'Current FY', 'Previous FY', 'Next FY') in the underlying data model (view or table). Alternatively, leverage Looker Studio parameters or filters to allow dynamic selection of the fiscal year offset, applying the filter once rather than embedding it in each metric's SQL.",134,567db886-3b54-47d1-bfe5-b972c2cc0449
current_year_gross_revenue_k_sum,Anti-Pattern,"Numerous metrics have a `_k` (thousands) version that simply divides the base metric by 1000 using `SAFE_DIVIDE`. This is a presentation formatting concern embedded directly into the SQL logic, leading to metric proliferation and unnecessary computation at the data source level.","SAFE_DIVIDE(gross_revenue_amount, 1000)","Define base metrics (e.g., `gross_revenue_amount`, `ss_lgb`) as raw values. Apply the division by 1000 for display purposes directly within Looker Studio's field settings (e.g., number formatting) or create a separate calculated field in Looker Studio for the 'k' version, promoting a cleaner separation of concerns.",134,567db886-3b54-47d1-bfe5-b972c2cc0449
gross_revenue_complex_conditions_sum,Anti-Pattern / Hardcoded Logic / Governance Issue,"This metric contains an extremely complex `CASE WHEN` statement that combines multiple filtering criteria, hardcoded publication names, specific revenue type/subtype/segment conditions, and a hardcoded date calculation. This logic is difficult to read, maintain, and prone to errors. The explicit mention of 'jeyaram.jawahar's queries' suggests it might be an ad-hoc or non-standardized business rule that has been hardcoded into the dashboard.","SUM(CASE WHEN (relative_fy_year_offset = -1 AND (UPPER(SAFE_CAST(unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') OR (CASE WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' AND sales_segment_l_2_name_sync = 'Digital Other' AND advertiser_parent != 'DOUBLECLICK') THEN SAFE_CAST(fix_date_lod AS DATETIME) ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-04 22:04:33.840631+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY))) THEN gross_revenue_amount ELSE 0 END)","This complex logic should be refactored and pushed upstream: 
1.  **Extract Business Logic:** Define the complex conditions as a new boolean flag or dimension in the underlying `adsales_performance` table or a dedicated view. This makes the logic reusable, testable, and transparent.
2.  **Lookup Tables:** Replace hardcoded lists (e.g., `unified_publication_name` values) with joins to proper lookup tables for maintainability and scalability.
3.  **Standardize Date Logic:** Generalize the date comparison logic, possibly using dynamic date parameters or pre-calculated date flags in the data model.
4.  **Governance:** Conduct a review with business stakeholders to formally define and govern this complex business rule, ensuring it's standardized across all reporting.",134,567db886-3b54-47d1-bfe5-b972c2cc0449
current_year_gross_revenue_excl_ss_lgb_k_sum,Anti-Pattern,"This metric calculates a composite value (`gross_revenue_amount - ss_lgb`) directly within its SQL definition. While functional, it tightly couples the definition of this metric to the internal calculation, making it less flexible if the definitions of `gross_revenue_amount` or `ss_lgb` change, or if the exclusion logic needs to be applied in other contexts.","SUM(CASE WHEN (relative_fy_year_offset = 0) THEN (SAFE_DIVIDE(gross_revenue_amount, 1000) - SAFE_DIVIDE(ss_lgb, 1000)) ELSE 0 END)","Promote modularity and reusability. Define `gross_revenue_amount_k` and `ss_lgb_k` as separate, atomic metrics (or calculated fields in Looker Studio). Then, create a *new* calculated field in Looker Studio that performs the subtraction (e.g., `Current Year Gross Revenue (k) - Current Year SS_LGB (k)`). This allows for independent management and reuse of the base components.",134,567db886-3b54-47d1-bfe5-b972c2cc0449
all_metrics,Hardcoded Logic & Anti-Pattern,"All 59 metrics in the dashboard hardcode the fiscal year to '2025' and repeatedly use an identical subquery to find the maximum fiscal week within that year. This makes the dashboard static for FY2025, requiring manual updates annually, and leads to highly inefficient, redundant query execution for every single metric displayed.",SAFE_CAST(t0.fy_year AS INT64) = 2025 AND SAFE_CAST(t0.fy_week_of_year AS INT64) = (SELECT MAX(SAFE_CAST(t.fy_week_of_year AS INT64)) FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.masthead_scorecard_forecast_version` AS t WHERE SAFE_CAST(t.fy_year AS INT64) = 2025),"Implement dynamic date parameters (e.g., Looker Studio's built-in date range controls or custom parameters) for `fy_year` and `fy_week_of_year`. Refactor the data model or create a BigQuery view/CTE to pre-calculate or efficiently determine the 'current' fiscal week and year once, rather than in each metric's query. This will drastically improve performance and maintainability.",135,5e3be025-a96e-4f5d-8172-dfef07e60f6d
all_budget_metrics,Hardcoded Logic,"All 'Budget' metrics are hardcoded to filter data for the 'CM' (Courier Mail) masthead. While the business description mentions 'Courier Mail' for some, this hardcoding limits the dashboard's reusability and flexibility if budget comparisons are needed for other mastheads in the future.",t0.masthead = 'CM',"Introduce a parameter for 'masthead' to allow users to select different mastheads, or consider creating separate, parameterized views for each masthead if the underlying business logic or data structure varies significantly. If 'CM' is the only relevant masthead for budget, ensure this constraint is clearly documented and potentially enforced at the data model level.",135,5e3be025-a96e-4f5d-8172-dfef07e60f6d
all_metrics,Anti-Pattern (Potential Schema Inefficiency),"The pervasive use of `SAFE_CAST(<column> AS BIGNUMERIC)` or `SAFE_CAST(<column> AS INT64)` for columns like `fy_year`, `fy_week_of_year`, and all measure columns (`Always_on_Digital_Sales`, `Breach_Sales`, etc.) suggests potential data type inconsistencies in the source table or an overly cautious approach. While `SAFE_CAST` prevents query failures, redundant casting adds unnecessary processing overhead if the source columns are already correctly typed.",SUM(SAFE_CAST(t0.Always_on_Digital_Sales AS BIGNUMERIC)),"Review the schema of the `masthead_scorecard_forecast_version` table in BigQuery. Ensure that numeric columns are stored with appropriate numeric data types (e.g., `BIGNUMERIC`, `INT64`, `FLOAT64`). If the source types are correct, remove the redundant `SAFE_CAST` operations. If not, address data quality at the ingestion layer or create a curated view with proper type enforcement.",135,5e3be025-a96e-4f5d-8172-dfef07e60f6d
all_metrics_with_limit_1,Anti-Pattern,"A pervasive anti-pattern exists where nearly all metrics (dimensions, measures, and calculated fields) include a `LIMIT 1` clause in their SQL logic. This prevents the dashboard from displaying aggregated data, full lists of dimension values, or allowing dynamic filtering and slicing across the dataset. For example, a 'Total' metric will not sum across all relevant rows, and a 'Dimension' will only ever show one arbitrary value.","Example from 'total_subscription_movement_count_cancels_filtered': `SELECT SUM(t0_subscription_details.detail_subscription_movement_count) AS total_movement_count FROM ... LIMIT 1`
Example from 'subscriber_cancel_details_dt_masthead': `SELECT t0c0d1.subscriber_id_src, ... WHERE t0c0d1_subscription_details.masthead = 'DT' LIMIT 1`","Remove the `LIMIT 1` clause from all dashboard metrics. Looker Studio handles data retrieval and aggregation dynamically based on chart configuration and user interactions. The `LIMIT 1` clause is typically used for quick data previews or specific single-row lookups, not for general dashboard metrics.",136,e642b3f9-9711-44c8-b2d8-959ded9f5b0d
total_subscription_movement_count_cancels_filtered,Hardcoded Logic,"The 'Total Subscription Movement Count (Cancels, Filtered)' KPI is heavily filtered by hardcoded values for date (`DATE '2025-06-24'`, `DATE '2025-01-20'`), customer type (`'Consumer'`), paying status (`'Y'`), member type (`'subscriber'`), and classification level (`'Print-only'`). This makes the metric extremely rigid and non-reusable, as it will only ever reflect data for these specific, fixed conditions, despite its name implying a general 'total' count.","WHERE t0.subscriber_movement_date = DATE '2025-06-24' AND t0_subscription_details.customer_type = 'Consumer' AND t0_subscription_details.is_paying_flag = 'Y' AND t0.member_type = 'subscriber' AND t0_subscription_details.classification_level_2 != 'Print-only' AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.subscriber_movement_report_date AS DATETIME), ISOWEEK) AS DATE) = DATE '2025-01-20'","Replace hardcoded filter values with Looker Studio parameters or dynamic date ranges (e.g., 'today', 'last 7 days', 'current week') to allow users to interactively filter the data. For categorical filters, consider using dashboard controls linked to the underlying dimension fields.",136,e642b3f9-9711-44c8-b2d8-959ded9f5b0d
audience_segment_adds,Anti-Pattern,"The 'Audience Segment (Adds)' metric uses a lengthy and complex `CASE` statement to categorize `subscriber_mosaic_title` values into broader audience segments. This approach is difficult to maintain, prone to errors if new mosaic titles are introduced or categories change, and lacks scalability. It also duplicates business logic within the dashboard's metric definition.",SELECT CASE WHEN (t0.subscriber_mosaic_title = 'First Class Life' OR t0.subscriber_mosaic_title = 'Secure Tranquility' OR t0.subscriber_mosaic_title = 'Family Fringes' OR t0.subscriber_mosaic_title = 'High Society' OR t0.subscriber_mosaic_title = 'Suburban Stability' OR t0.subscriber_mosaic_title = 'Blissful Retirement') THEN 'Older affluents' WHEN (...) THEN 'Young professionals' WHEN (...) THEN 'Growing Families' WHEN (...) THEN 'Low income households' ELSE t0.subscriber_mosaic_title END AS audience_segment,"Refactor this logic by creating a dedicated lookup table in the data warehouse (e.g., `asl_audience_insights.mosaic_segment_lookup`) that maps `subscriber_mosaic_title` to `audience_segment`. The metric's SQL can then be simplified to a `LEFT JOIN` to this lookup table, improving maintainability, governance, and performance.",136,e642b3f9-9711-44c8-b2d8-959ded9f5b0d
c_score_target_sum_by_publication_group_weekly,Hardcoded Logic,"The SQL logic for the 'Total C-Score Target by Publication Group' metric contains a hardcoded date range (2025-06-16 to 2025-06-22). This makes the dashboard static and irrelevant for current or future reporting, directly contradicting its implied purpose as a 'Sunrise Report' which suggests daily or ongoing relevance. This practice severely limits the dashboard's utility and requires manual updates to remain current.",WHERE t0.week_ending BETWEEN DATE '2025-06-16' AND DATE '2025-06-22',"Replace the hardcoded date range with dynamic date parameters. For Looker Studio, this typically involves using dashboard-level date range controls that pass parameters to the underlying BigQuery query. Alternatively, for BigQuery SQL, use functions like `CURRENT_DATE()` in conjunction with `DATE_SUB` to define a rolling window (e.g., `WHERE t0.week_ending BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND CURRENT_DATE()`). This will ensure the report is always current without manual intervention.",138,bb705701-76b0-40eb-bc6f-0159956fda7a
all_metrics,Hardcoded Logic,"All metrics within the dashboard contain hardcoded date ranges (e.g., '2025-06-01' to '2025-06-30' for 'Total Audience by Month (Truncated)' and '2025-07-01' to '2025-07-31' for others). This design choice makes the 'Monthly Executive Summary' dashboard static and requires manual updates each month to remain relevant. This leads to significant maintenance overhead and a high risk of displaying outdated information.","WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.Month AS DATETIME), MONTH) AS DATE) >= DATE '2025-06-01' AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.Month AS DATETIME), MONTH) AS DATE) <= DATE '2025-06-30'",Implement dynamic date filtering using Looker Studio's built-in date range controls or SQL functions like `CURRENT_DATE()` and `DATE_TRUNC()` to automatically select the current or previous month's data. Consider creating a common date dimension table or a SQL view that calculates relevant date periods to centralize date logic.,140,73153654-dd99-4f67-839d-a986a52ca1e2
"total_audience_by_content_rank, audience_mom_change_pct_by_content_rank, audience_prev_month_scaled_by_content_rank",Anti-Pattern,"A specific set of content filters (`Age='ALL'`, `Gender='ALL'`, `Device='PC/Laptop, Smartphone, Tablet'`, `rank_current_month <= 10`, `Category='News'`, `Subcategory='Travel'`) is hardcoded and repeated verbatim across three different metrics. This violates the DRY (Don't Repeat Yourself) principle, making any future updates or changes to these criteria cumbersome, error-prone, and requiring modifications in multiple places.","AND t0.Age = 'ALL' AND t0.Gender = 'ALL' AND t0.Device = 'PC/Laptop, Smartphone, Tablet' AND t0.rank_current_month <= 10 AND t0.Category = 'News' AND t0.Subcategory = 'Travel'","Consolidate these common filters into a shared SQL view or a Looker Studio data source filter. Alternatively, if these filters represent a specific 'segment' (e.g., 'Top 10 Travel News Content for All Demographics'), consider pre-calculating this segment in the underlying data model or defining it as a reusable parameter/field in Looker Studio to improve maintainability and consistency.",140,73153654-dd99-4f67-839d-a986a52ca1e2
dim_adtype_group,Hardcoded Logic|Anti-Pattern,"This dimension uses a large, complex CASE statement to categorize `fin_adtype_name` into broader groups. This logic is embedded directly in the metric definition, making it difficult to maintain, update, and reuse across other metrics or dashboards. Any change to ad type groupings requires direct SQL modification.","SELECT
  CASE
    WHEN fin_adtype_name IN ('AUDIO (NON-TARGETED)', 'AUDIO (TARGETED)') THEN 'Audio'
    WHEN fin_adtype_name IN ('CONTENT DISCOVERY (NON-TARGETED)', 'CONTENT DISCOVERY (TARGETED)', 'CONTENT INTEGRATION (NON-TARGETED)',
      'CONTENT INTEGRATION (TARGETED)', 'NATIVE (NON-TARGETED)', 'NATIVE (TARGETED)') THEN 'Native, CI & CD'
    WHEN fin_adtype_name = 'CLASSIFIED' THEN 'Classified'
    WHEN fin_adtype_name = 'COLOUR MAGAZINES' THEN 'Colour Magazines'
    WHEN fin_adtype_name = 'CREATIVES' THEN 'Creatives'
    WHEN fin_adtype_name = 'DISPLAY' THEN 'Display'
    WHEN fin_adtype_name IN ('E-COMMERCE', 'EDMEDIA', 'EVENTS (NON-TARGETED)', 'FINDA', 'SUDDENLY (NON-TARGETED)',
      'UNKNOWN', 'XTEND') THEN 'Other'
    WHEN fin_adtype_name IN ('OUTSTREAM (NON-TARGETED)', 'UNRULY (NON-TARGETED)', 'PROD ADDED VALUE (NON-TARGETED)') THEN 'Outstream'
    WHEN fin_adtype_name IN ('RICH MEDIA (NON-TARGETED)', 'RICH MEDIA (TARGETED)', 'SOCIAL DISPLAY (NON-TARGETED)',
      'SOCIAL DISPLAY (TARGETED)') THEN 'Rich Media'
    WHEN fin_adtype_name IN ('SOCIAL VIDEO (NON-TARGETED)', 'SOCIAL VIDEO (TARGETED)', 'VIDEO (NON-TARGETED)',
      'VIDEO (TARGETED)', 'VIDEO GROWTH (NON-TARGETED)', 'VIDEO GROWTH (TARGETED)') THEN 'Video'
    WHEN fin_adtype_name IN ('STANDARD DISPLAY (NON-TARGETED)', 'STANDARD DISPLAY (TARGETED)', 'TTIV (NON-TARGETED)',
      'TTIV (TARGETED)') THEN 'Std Display'
    WHEN fin_adtype_name = 'SUDDENLY' THEN 'Suddenly'
    WHEN fin_adtype_name = 'TABOOLA' THEN 'Outbrain'
    WHEN fin_adtype_name = 'TUBI (NON-TARGETED)' THEN 'Tubi'
  END AS adtype_group","Extract the ad type grouping logic into a dedicated lookup table or a shared dimension view in the data warehouse. This would centralize the business logic, improve maintainability, and allow other metrics to reference a consistent definition.",141,53ec39c2-f93b-4025-a7cb-4c06d3cefa6e
dim_site_name,Hardcoded Logic|Anti-Pattern,"This dimension contains an extremely long and complex CASE statement to standardize `UNIFIED_PUBLICATION_NAME` into `SITE_NAME`. This is a classic example of hardcoded business logic that is prone to errors, difficult to read, and highly inefficient to maintain. Any changes to publication names or their groupings require direct SQL modification.","SELECT
  CASE
    WHEN UNIFIED_PUBLICATION_NAME IN ('News', 'GAM Default') THEN 'News.com.au'
    WHEN UNIFIED_PUBLICATION_NAME IN ('WTN', 'HWT Buy Search Sell', 'HWT', 'HeraldSun.Mobile.app', 'Herald Sun') THEN 'Herald Sun'
    WHEN UNIFIED_PUBLICATION_NAME = 'The Daily Telegraph' THEN 'The Daily Telegraph'
    WHEN UNIFIED_PUBLICATION_NAME IN ('The Australian', 'TAUS.STOCKHEAD', 'TAUS.app', 'TAUS') THEN 'The Australian'
    WHEN UNIFIED_PUBLICATION_NAME = 'Xtend' THEN 'Xtend'
    WHEN UNIFIED_PUBLICATION_NAME = 'The Courier-Mail' THEN 'The Courier-Mail'
    WHEN UNIFIED_PUBLICATION_NAME = 'The Advertiser' THEN 'The Advertiser'
    WHEN UNIFIED_PUBLICATION_NAME = 'The Sunday Telegraph' THEN 'The Sunday Telegraph'
    WHEN UNIFIED_PUBLICATION_NAME = 'Taste.com.au' THEN 'Taste'
    WHEN UNIFIED_PUBLICATION_NAME = 'Sunday Herald Sun' THEN 'Sunday Herald Sun'
    WHEN UNIFIED_PUBLICATION_NAME IN ('Escape NSW', 'Escape VIC', 'Escape QLD', 'Escape SA') THEN 'Escape'
    WHEN UNIFIED_PUBLICATION_NAME = 'Taboola' THEN 'Taboola'
    WHEN UNIFIED_PUBLICATION_NAME = 'Vogue' THEN 'Vogue'
    WHEN UNIFIED_PUBLICATION_NAME = 'The Gold Coast Bulletin' THEN 'The Gold Coast Bulletin'
    WHEN UNIFIED_PUBLICATION_NAME IN ('TTB', 'Townsville Bulletin', 'NQN Buy Search Sell', 'Digital Subscription_NQN') THEN 'Townsville Bulletin'
    WHEN UNIFIED_PUBLICATION_NAME = 'Vogue Australia' THEN 'Vogue Australia'
    WHEN UNIFIED_PUBLICATION_NAME IN ('The Courier Mail eCommerce', 'Escape eCommerce', 'ECOMMERCE.VOGUELIVING',
        'ECOMMERCE.VOGUE', 'eCommerce.Taste', 'ECOMMERCE.NEWS', 'eCommerce.Kidspot', 'eCommerce.GQ', 'eCommerce.Delicious',
        'ECOMMERCE.BODYANDSOUL', 'eCommerce') THEN 'E-Commerce'
    WHEN UNIFIED_PUBLICATION_NAME IN ('NTN Buy Search Sell', 'NTN', 'NT News', 'Digital Subscription_NTN') THEN 'NT News'
    WHEN UNIFIED_PUBLICATION_NAME IN ('UNKNOWN Buy Search Sell', 'TCM', 'Shortlyster Managed Service', 'QNP Buy Search Sell',
        'My Tributes', 'Buy Search & Sell') THEN 'The Courier Mail'
    WHEN UNIFIED_PUBLICATION_NAME IN ('NWN Buy Search Sell', 'DTM', 'CNG Buy Search Sell') THEN 'Daily Telegraph'
    WHEN UNIFIED_PUBLICATION_NAME = 'The Weekly Times' THEN 'The Weekly Times'
    WHEN UNIFIED_PUBLICATION_NAME IN ('Geelong Advertiser', 'GEA', 'GAD Buy Search Sell') THEN 'Geelong Advertiser'
    WHEN UNIFIED_PUBLICATION_NAME = 'Offnet' THEN 'Offnet'
    WHEN UNIFIED_PUBLICATION_NAME = 'Sky News' THEN 'Sky News'
    WHEN UNIFIED_PUBLICATION_NAME IN ('New Homes SA', 'messenger.com.au', 'Messenger', 'ADV', 'ADN Buy Search Sell') THEN 'Adelaide Now'
    WHEN UNIFIED_PUBLICATION_NAME IN ('TWM Buy Search Sell', 'TOOWOOMBACUSTOM', 'Toowoomba Chronicle', 'TOOWOOMBA',
        'MYT.Classified', 'Digital Subscription_TWM') THEN 'Toowoomba Chronicle'
    WHEN UNIFIED_PUBLICATION_NAME IN ('The Cairns Post', 'TCP', 'Digital Subscription_CNS', 'CNS Buy Search Sell') THEN 'The Cairns Post'
    WHEN UNIFIED_PUBLICATION_NAME = 'SUDDENLY.CW' THEN 'SUDDENLY.CW'
    WHEN UNIFIED_PUBLICATION_NAME = 'RACENET' THEN 'RACENET'
    WHEN UNIFIED_PUBLICATION_NAME = 'Punters.com.au' THEN 'Punters.com.au'
    WHEN UNIFIED_PUBLICATION_NAME = 'Rea.Audience' THEN 'Rea.Audience'
    WHEN UNIFIED_PUBLICATION_NAME IN ('delicious.com.au', 'Delicious') THEN 'Delicious'
    WHEN UNIFIED_PUBLICATION_NAME = 'Gold Coast Real Estate' THEN 'Gold Coast Real Estate'
    WHEN UNIFIED_PUBLICATION_NAME IN ('Vogue Living Online', 'Vogue Living') THEN 'Vogue Living'
    WHEN UNIFIED_PUBLICATION_NAME = 'kidspot' THEN 'Kidspot'
    WHEN UNIFIED_PUBLICATION_NAME = 'Vogue.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'BestRecipes' THEN 'Best Recipes'
    WHEN UNIFIED_PUBLICATION_NAME = 'EdMedia' THEN 'EdMedia'
    WHEN UNIFIED_PUBLICATION_NAME = 'SUDDENLY.TGG' THEN 'SUDDENLY.TGG'
    WHEN UNIFIED_PUBLICATION_NAME = 'Vogue.Events' THEN 'Events'
    WHEN UNIFIED_PUBLICATION_NAME = 'GQ Mag' THEN 'GQ'
    WHEN UNIFIED_PUBLICATION_NAME = 'escape.com.au' THEN 'Escape'
    WHEN UNIFIED_PUBLICATION_NAME = 'bodyandsoul' THEN 'Body and Soul'
    WHEN UNIFIED_PUBLICATION_NAME = 'Admin.Sales' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'GQ Online' THEN 'GQ'
    WHEN UNIFIED_PUBLICATION_NAME = 'Delicious.admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'News.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Vogueliving.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'TMRC' THEN 'Mercury Digital'
    WHEN UNIFIED_PUBLICATION_NAME = 'DBL Buy Search Sell' THEN 'Mercury Digital'
    WHEN UNIFIED_PUBLICATION_NAME = 'GQ.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'GQ.Events' THEN 'Events'
    WHEN UNIFIED_PUBLICATION_NAME = 'TAUS.ADMIN' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Vogue.Vosn' THEN 'Events'
    WHEN UNIFIED_PUBLICATION_NAME = 'Bestrecipes.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Bodyandsoul.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Escape.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Kidspot.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Taste.Admin' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'TUBI' THEN 'Tubi'
    WHEN UNIFIED_PUBLICATION_NAME = 'Admin.ADV' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Admin.DTM' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'ADMIN.SPORT' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'Admin.TCM' THEN 'Admin Sales'
    WHEN UNIFIED_PUBLICATION_NAME = 'DELICIOUS.EVENTS' THEN 'Events'
    WHEN UNIFIED_PUBLICATION_NAME = 'Admin.HWT' THEN 'Admin Sales'
    ELSE 'Other Site'
  END AS SITE_NAME","Refactor this logic into a dedicated `site_name_lookup` table or a materialized view in the data warehouse. This lookup table should map `UNIFIED_PUBLICATION_NAME` to `SITE_NAME`, allowing for simple joins and centralized management of publication name standardization.",141,53ec39c2-f93b-4025-a7cb-4c06d3cefa6e
revenue_fy2026_digital_taste_q123,Code Duplication|Hardcoded Logic|Anti-Pattern,"This metric, along with `revenue_fy2024_digital_taste_q123`, re-implements the entire complex CASE logic for `adtype` and `SITE_NAME` within its CTE. This leads to massive code duplication, increased query complexity, and a high risk of inconsistency if the underlying dimension logic changes. The only difference between this metric and its FY2024 counterpart is the target financial year.","WITH base_data AS (
  SELECT
    financial_quarter,
    financial_year,
    gross_revenue_amount,
    CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END AS adtype,
    CASE
      WHEN UNIFIED_PUBLICATION_NAME IN ('News', 'GAM Default') THEN 'News.com.au'
      -- ... (rest of the long CASE statement for SITE_NAME)
      ELSE 'Other Site'
    END AS SITE_NAME
  FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
)
SELECT
  SUM(CASE WHEN SAFE_CAST(financial_year AS STRING) = '2026' THEN gross_revenue_amount ELSE 0 END) AS Revenue_FY2026
FROM
  base_data
WHERE
  adtype = 'DIGITAL'
  AND SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
  AND SITE_NAME = 'Taste'
  AND (SAFE_CAST(financial_quarter AS INT64) NOT IN (4) OR financial_quarter IS NULL)","Leverage existing dimension definitions or create shared views/models for `adtype` and `site_name` transformations. Instead of re-writing the CASE statements, these metrics should join to pre-calculated or governed dimension tables/views. Parameterize the financial year to create a single, reusable metric for 'Revenue (Digital, Taste, Q1-Q3)' that can be filtered by year.",141,53ec39c2-f93b-4025-a7cb-4c06d3cefa6e
revenue_fy2024_digital_taste_q123,Code Duplication|Hardcoded Logic|Anti-Pattern,"This metric is a near-exact duplicate of `revenue_fy2026_digital_taste_q123`, differing only by the target financial year. It also re-implements the entire complex CASE logic for `adtype` and `SITE_NAME` within its CTE, leading to significant code redundancy and maintenance overhead.","WITH base_data AS (
  SELECT
    financial_quarter,
    financial_year,
    gross_revenue_amount,
    CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END AS adtype,
    CASE
      WHEN UNIFIED_PUBLICATION_NAME IN ('News', 'GAM Default') THEN 'News.com.au'
      -- ... (rest of the long CASE statement for SITE_NAME)
      ELSE 'Other Site'
    END AS SITE_NAME
  FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
)
SELECT
  SUM(CASE WHEN SAFE_CAST(financial_year AS STRING) = '2024' THEN gross_revenue_amount ELSE 0 END) AS Revenue_FY2024
FROM
  base_data
WHERE
  adtype = 'DIGITAL'
  AND SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
  AND SITE_NAME = 'Taste'
  AND (SAFE_CAST(financial_quarter AS INT64) NOT IN (4) OR financial_quarter IS NULL)","Leverage existing dimension definitions or create shared views/models for `adtype` and `site_name` transformations. Instead of re-writing the CASE statements, these metrics should join to pre-calculated or governed dimension tables/views. Parameterize the financial year to create a single, reusable metric for 'Revenue (Digital, Taste, Q1-Q3)' that can be filtered by year.",141,53ec39c2-f93b-4025-a7cb-4c06d3cefa6e
stly_revenue_base,Anti-Pattern|Complex Business Logic,"The 'Same Time Last Year Revenue' metric includes complex, nested CASE statements and a subquery to handle specific booking date adjustments for 'DOUBLECLICK' advertisers. Embedding such specific and intricate logic directly within a base metric makes it less readable, harder to debug, and potentially less performant due to the subquery within the SUM's CASE statement.","SELECT
  SUM(
    CASE
      WHEN relative_fy_year_offset = -1 AND date(
        CASE
          WHEN revenue_type = ""DIGITAL"" AND revenue_group_subtype = ""DIGITAL"" AND sales_segment_l_2_name_sync = ""Digital Other"" AND advertiser_parent != ""DOUBLECLICK"" THEN(
            SELECT
              MIN(t2.booking_line_created_date)
            FROM
              `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t2
            WHERE
              t2.financial_year = t1.financial_year AND t2.advertiser_parent = ""DOUBLECLICK""
          )
          ELSE booking_line_created_date
        END) <= `CURRENT_DATE`() THEN gross_revenue_amount
    END
  ) AS STLY_Revenue
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t1","Consider pre-calculating the adjusted `booking_line_created_date` or a flag for 'DOUBLECLICK' special handling in the `adsales_performance` table or a derived view. This would simplify the metric's SQL logic, making it more declarative and potentially improving performance.",141,53ec39c2-f93b-4025-a7cb-4c06d3cefa6e
gross_revenue_filtered_digital_current_future_years,Hardcoded Logic|Anti-Pattern,"The SQL logic for this high-criticality KPI contains an extensive hardcoded list of `unified_publication_name` values to be excluded. This 'NOT IN' list is brittle; any change in publication names, new exclusions, or re-categorizations would require manual updates to the metric's SQL, leading to high maintenance overhead and potential for errors. Similarly, the hardcoded financial years ('2025', '2024') and financial weeks (47-52) make the metric non-dynamic and require constant updates as time progresses.","WHERE t0.style_name != 'PRODUCTION' AND t0.unified_publication_name NOT IN ('Admin.Sales', 'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Qantas Travel Insider', 'RACENET', 'SKYNEWS.ADMIN', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin', 'TOOWOOMBACUSTOM', 'odds.com.au', 'Shortlyster Managed Service NWN', 'Shortlyster Managed Service', 'Shortlyster Managed Service NQN', 'Shortlyster Managed Service GAD', 'SUDDENLY.TGG', 'SUDDENLY.CW', 'SUDDENLY.NORTH') AND t0.financial_year IN ('2025', '2024') AND t0.revenue_group_subtype IN ('DIGITAL') AND (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(t0.financial_week AS INT64) IS NULL)","Replace the hardcoded `unified_publication_name` exclusion list with a join to a governed lookup table for excluded publications. Implement dynamic date logic (e.g., `CURRENT_DATE()` or `EXTRACT(YEAR FROM CURRENT_DATE())`) to determine current and future financial years, and manage excluded financial weeks via a configuration table or dynamic calculation rather than hardcoding.",142,3ee20092-1897-49b7-8bcd-4157d5f816eb
sum_financial_week_filtered_digital_current_future_years,Anti-Pattern|Misleading Metric,"The aggregation of `SUM(financial_week)` is highly unusual and likely provides no meaningful business insight. Financial week numbers are typically used for grouping or filtering, not for summation. This suggests either a misunderstanding of the data's nature or a misconfiguration within Looker Studio, as noted in the initial AI summary.",SELECT SUM(SAFE_CAST(t0.financial_week AS INT64)) AS sum_of_financial_week,"Investigate the business requirement for this metric. If the intent is to count distinct financial weeks, `COUNT(DISTINCT financial_week)` should be used. If it's meant to be a dimension, it should be defined as such. If no valid business use case exists, this metric should be removed to avoid confusion and unnecessary computation.",142,3ee20092-1897-49b7-8bcd-4157d5f816eb
financial_week_digital_2024,Hardcoded Logic,"This dimension explicitly filters for `financial_year IN ('2024')`. This hardcoding means the dimension will become outdated and irrelevant once the financial year 2024 passes, requiring manual updates.",WHERE t0.financial_year IN ('2024'),"Modify the dimension to dynamically refer to the current financial year or allow for user-selected financial years, rather than hardcoding a specific year.",142,3ee20092-1897-49b7-8bcd-4157d5f816eb
revenue_group_subtype_filtered_current_future_years,Hardcoded Logic,"Similar to the main revenue metric, this dimension hardcodes financial years ('2025', '2024') and excludes specific financial weeks (47-52). This makes the dimension non-dynamic and prone to becoming outdated.","WHERE t0.financial_year IN ('2025', '2024') AND (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(t0.financial_week AS INT64) IS NULL)","Implement dynamic logic for financial year selection and manage excluded financial weeks through a more flexible mechanism (e.g., a lookup table or dynamic calculation) to ensure the dimension remains relevant over time without manual intervention.",142,3ee20092-1897-49b7-8bcd-4157d5f816eb
product_group_dimension,Hardcoded Logic|Anti-Pattern,"The `Product Group` dimension is defined using a complex, deeply nested `CASE` statement that hardcodes categorization rules based on multiple source columns (masthead, billing system, classification, delivery medium, delivery schedule). This approach is highly prone to errors, difficult to maintain, and does not scale as new products or categories emerge. Specifically, the `delivery_schedule_group` logic is very verbose and brittle, explicitly listing many values and grouping them, which is not robust to new or changed values.","SELECT DISTINCT
  CASE
    WHEN customer.customer_segment_group = 'B2B' THEN customer.customer_segment
    WHEN bma.masthead = 'AP' THEN 'Apple Podcast: Crime X'
    WHEN bma.masthead = 'CS' THEN 'Code'
    WHEN bma.masthead = 'PU' THEN 'Punters'
    WHEN bma.masthead = 'RN' THEN 'Racenet'
    WHEN bma.masthead = 'SC' THEN 'SuperCoach'
    WHEN bma.masthead = 'TS' THEN 'Taste Online'
    WHEN bma.dw_billing_system_code = 'WINE' THEN 'Wine Club'
    WHEN bma.classification_level_1 = 'Offplatform - Paid' THEN '3rd Party and Other'
    WHEN customer.customer_segment_group = 'B2C' THEN
    CASE
      WHEN bma.classification_level_2 = 'Essentials' THEN 'Essentials'
      WHEN bma.delivery_medium_type = 'Digital' THEN 'Digital'
      ELSE CONCAT(bma.delivery_medium_type, ' ',
        CASE
          WHEN bma.delivery_schedule_group IN ('budgetforecast', 'budgetforecast_grosscan', 'budgetforecast_netacq',
            'budgetforecast_netcan', 'nfmanualhist', 'Not Available', 'shadowbudget') THEN bma.delivery_schedule_group
          WHEN bma.delivery_schedule_group IN ('Weekend (1 Day)', 'Weekend (2 Days)') THEN 'Weekend'
          WHEN bma.delivery_schedule_group IN ('6 Days', '7 Days', 'Weekday (1 Day)', 'Weekday (1 Day) & Weekend (1 Day)',
            'Weekday (2 Days) & Weekend (2 Days)', 'Weekday (5 Days)', 'Weekday (2 Days) & Weekend (1 Day)',
            'Weekday (3 Days) & Weekend (1 Day)') THEN '7 Day'
          ELSE NULL
        END)
    END
    WHEN customer.customer_segment = 'Education' THEN customer.customer_segment
    ELSE customer.customer_segment
  END AS Product_Group","Replace the hardcoded `CASE` logic with a dedicated lookup table (e.g., `dim_product_group`) that maps raw attributes to `Product Group` values. This table should be maintained by data governance and joined to the `v_subscription_base_movement_agg` view. This improves maintainability, scalability, and data consistency, and allows for easier updates to product categorization.",143,d828e66e-2476-4e31-91af-3a202a45f99d
masthead_group_dimension,Hardcoded Logic|Anti-Pattern,"The `Masthead Group` dimension uses a hardcoded `CASE` statement to categorize mastheads. While simpler than the Product Group, this approach still requires code changes for any new mastheads or re-categorizations, leading to maintenance overhead and potential inconsistencies across dashboards if not updated uniformly.","SELECT DISTINCT
  CASE
    WHEN (bma.masthead = 'TA') THEN 'The Australian'
    WHEN (bma.masthead IN ('AA', 'CM', 'DT', 'HS')) THEN 'Metro'
    WHEN (bma.masthead IN ('CP', 'GA', 'GC', 'NT', 'TB', 'TC', 'TM')) THEN 'Regional'
    WHEN (bma.masthead = 'WT') THEN 'Others'
    WHEN (bma.masthead IN ('AP', 'CS', 'PU', 'RN', 'SC', 'TS')) THEN 'Deep Niche Publications'
    ELSE 'Discontinued/Excluded'
  END AS Masthead_Group","Implement a `dim_masthead_group` lookup table to manage masthead categorizations. This table would contain `masthead` and `masthead_group` columns, allowing for flexible and centralized management of groupings without modifying SQL code.",143,d828e66e-2476-4e31-91af-3a202a45f99d
"year_end_digital_bundle_closing_base, year_end_digital_bundle_acquisition_count, total_digital_bundle_acquisition_count",Anti-Pattern|Inefficient Query,"The measure metrics (`Year-End Digital & Bundle Closing Base`, `Year-End Digital & Bundle Acquisition Count`, `Total Digital & Bundle Acquisition Count`) include an unnecessary `LEFT JOIN` to `v_customer_segment_mapping`. No columns from the `customer` alias are used in the `SELECT` or `WHERE` clauses for these specific metrics, making the join redundant and potentially impacting query performance.","LEFT JOIN
  `ncau-data-newsquery-prd.prstn_consumer_views.v_customer_segment_mapping` AS customer
  ON bma.classification_level_1 = customer.classification_level_1 AND bma.classification_level_2 = customer.classification_level_2","Remove the `LEFT JOIN` to `v_customer_segment_mapping` from the SQL logic for these measure metrics, as it is not utilized. This will improve query efficiency by reducing unnecessary processing.",143,d828e66e-2476-4e31-91af-3a202a45f99d
All Metrics and Dimensions,Hardcoded Logic,All metrics and dimensions hardcode the fiscal year range (`fy_year >= 2012 AND fy_year <= 2024`). This requires manual updates annually and limits the flexibility of the dashboard for historical or future analysis without code modification.,bma.fy_year >= 2012 AND bma.fy_year <= 2024,"Parameterize the fiscal year range in the Looker Studio dashboard or define it dynamically within the underlying view/table (e.g., using a metadata table for min/max years or a dynamic date calculation). Alternatively, leverage Looker Studio's built-in date range filters to allow users to select their desired period.",143,d828e66e-2476-4e31-91af-3a202a45f99d
"publication_group_calculated, publishing_division_group_filtered_by_publication_group, financial_quarter_filtered_by_publication_group, financial_quarter_filtered_by_specific_publication_group_and_month, unified_publication_name_filtered_by_publication_group, financial_short_month_filtered_by_specific_publication_group_and_quarter",Hardcoded Logic|Anti-Pattern,"The business logic for categorizing 'unified_publication_name' into 'Publication Group' (e.g., 'At Home', 'Body & Soul', 'Weekend Magazine') is defined using a complex, hardcoded CASE statement. This exact CASE statement is then duplicated and embedded directly into the WHERE clauses of at least five other dimension metrics for filtering purposes. This creates a significant maintenance burden; any change to the publication grouping rules requires manual updates across multiple, disparate SQL definitions, increasing the risk of inconsistencies and errors. Furthermore, the 'financial_quarter_filtered_by_specific_publication_group_and_month' and 'financial_short_month_filtered_by_specific_publication_group_and_quarter' metrics redundantly include the same CASE statement twice within their WHERE clauses.","CASE WHEN (unified_publication_name IN ('Home NSW', 'Home SA')) THEN 'At Home' WHEN (unified_publication_name IN ('Body + Soul - NSW', 'Body + Soul - QLD', 'Body + Soul - SA', 'Body + Soul - TAS', 'Body + Soul - VIC')) THEN 'Body & Soul' ... ELSE 'Others' END","Centralize the 'Publication Group' logic. This can be achieved by creating a dedicated lookup table (e.g., `publication_group_mapping`) that maps `unified_publication_name` to `publication_group`. Alternatively, define this logic in a BigQuery view (e.g., `v_adsales_performance_with_publication_group`) that adds the `publication_group` as a derived column. All dependent metrics should then join to this lookup table or query the view, ensuring a single source of truth and vastly improving maintainability and scalability.",144,dd0544cd-634f-43bd-a385-158c78dace66
sum_day_target_website,Potential Data Type Mismatch/Redundancy,"The SQL logic involves casting `t0.targetdate` to a string and then parsing it as a date (`PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))`). While `SAFE_CAST` adds robustness, this pattern suggests `targetdate` might not be stored in an optimal DATE/DATETIME format. If `targetdate` is already a date type, these casts are redundant and add unnecessary processing overhead. If it's an integer or string, it highlights a potential opportunity for data type standardization at the source or within the `cdm_reference_data.subscription_targets` table.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))","Investigate the native data type of `t0.targetdate` in the `subscription_targets` table. If it's already a DATE/DATETIME, remove redundant casting. If it's an integer/string, consider standardizing the column to a DATE type upstream for improved query performance and readability.",145,73aa273f-1632-484a-b0eb-c1132725d861
sum_spv_target,Potential Data Type Mismatch/Redundancy,"Similar to the other metric, the SQL uses nested `SAFE_CAST` operations (`SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.week_commencing AS DATETIME), ISOWEEK) AS DATE)`). This implies `t0.week_commencing` might not be a direct DATETIME type, or the inner `SAFE_CAST` is redundant if it already is. While `DATETIME_TRUNC` is a valid operation for week-based aggregation, the nested casting can make the query less efficient and harder to read if not strictly necessary.","SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.week_commencing AS DATETIME), ISOWEEK) AS DATE)","Investigate the native data type of `t0.week_commencing` in the `spv_weekly_website_tgt` table. If it's already a DATETIME, remove the inner `SAFE_CAST`. Consider standardizing date/time columns to appropriate types upstream to simplify SQL logic and improve performance.",145,73aa273f-1632-484a-b0eb-c1132725d861
total_orders_by_site_id_article_index_non_npass_non_reg_pep_fy25_q4,Anti-Pattern (SQL Duplication & Hardcoded Logic),"This metric, along with 'total_orders_by_site_id_article_index_non_npass_non_reg_pep_fy26_week1', exhibits extensive SQL duplication. The entire complex subquery structure, including the `UNNEST` operation and `CASE` statements for `articleLink` and `NPASS` classification, is repeated. The only significant difference between these two metrics is their hardcoded date range. This approach is inefficient, difficult to maintain, and prone to inconsistencies if business rules change.","SELECT clmn3_, COUNT(1) AS total_orders FROM (
SELECT SAFE_CAST(DATETIME_TRUNC(clmn5_, SECOND) AS DATE) AS clmn7_, clmn1_, clmn2_, clmn3_, clmn4_, clmn6_ FROM (
SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(clmn0_, 'digitaledition|digitalprintedition')) THEN 'DPE' ELSE 'Article/index' END AS clmn4_, SAFE_CAST(clmn1_ AS DATETIME) AS clmn5_, CASE WHEN (SAFE.REGEXP_CONTAINS(clmn2_, 'NPASS')) THEN true ELSE false END AS clmn6_, clmn1_, clmn2_, clmn3_ FROM (
SELECT t0.articleLink AS clmn0_, t0_orders.orderDate AS clmn1_, t0_orders.pkgDef AS clmn2_, t0_orders.siteId AS clmn3_ FROM (
SELECT
  *
FROM
  `ncau-data-newsquery-prd.sdm_salesforce_subscription.package_order` AS t0_base,
  UNNEST(t0_base.orders) AS orders_base
WHERE
  t0_base.orderDate >= ""2023-07-03"" AND t0_base.datePartitioned >= ""2023-07-03"" AND orders_base.sourceCode LIKE ""%WEB_ONL100"" AND
  orders_base.articleLink IS NOT null
) AS t0 LEFT JOIN UNNEST(t0.orders) AS t0_orders
)
)
) WHERE (clmn1_ >= TIMESTAMP '2024-06-18' AND clmn1_ < TIMESTAMP_ADD(TIMESTAMP '2025-06-20', INTERVAL 1 DAY) AND NOT SAFE.REGEXP_CONTAINS(SAFE_CAST(clmn2_ AS STRING), 'REG_PEP') AND clmn6_ = false AND clmn4_ IN ('Article/index')) GROUP BY clmn3_ ORDER BY total_orders DESC LIMIT 10;","Create a base BigQuery view or dbt model that pre-processes the `package_order` table, extracting relevant fields (`orderDate`, `pkgDef`, `siteId`, `articleLink`) and pre-calculating common flags like `is_npass` and `is_reg_pep`, and `article_type`. Then, define a single, flexible Looker Studio metric that leverages this consolidated view, allowing users to select date ranges and filter by content types using dashboard controls, eliminating the need for multiple hardcoded metrics.",147,1b29c0eb-ab01-4e6f-b3f6-8161f5d3c669
total_orders_by_article_type_non_npass_fy25,Hardcoded Logic (Article Type Classification),"The classification of 'article_type' into 'DPE' or 'Article/index' is hardcoded directly within the SQL using a `CASE` statement with `REGEXP_CONTAINS`. This logic is duplicated across all three metrics. If the business definitions for article types evolve or new types are introduced, every affected metric's SQL will require manual updates, increasing the risk of errors and maintenance overhead.","CASE WHEN (SAFE.REGEXP_CONTAINS(clmn0_, 'digitaledition|digitalprintedition')) THEN 'DPE' ELSE 'Article/index' END AS clmn3_","Centralize the `article_type` classification logic within the data model layer (e.g., a dedicated BigQuery view, dbt model, or a lookup table). This ensures a single source of truth for business rules, promotes consistency across all metrics, and simplifies future updates.",147,1b29c0eb-ab01-4e6f-b3f6-8161f5d3c669
sum_day_target_pub_group_hs_daily_20250812,Anti-Pattern,"Multiple metrics within the dashboard (all 5 provided) utilize hardcoded specific dates or fixed date ranges in their SQL logic. This design prevents the dashboard from being truly dynamic for a 'Weekly performance report' and necessitates manual updates to the SQL for each new reporting period, leading to high maintenance overhead and a lack of reusability. For example, a metric is hardcoded to '2025-08-12' or a range like '2022-07-04' to '2023-07-02'.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-08-12'","Implement Looker Studio date range controls or parameters to allow users to select dynamic date ranges. Update SQL queries to use these parameters (e.g., `WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN @start_date AND @end_date`). This will make the dashboard truly dynamic and reduce maintenance.",148,4473a333-74f4-463b-81e7-151f93013906
sum_day_target_pub_group_hs_daily_20250812,Anti-Pattern,"Several metrics (4 out of 5, specifically those from `subscription_targets`) are hardcoded to specific 'website' or 'publication_group' values (e.g., 'Herald Sun'). While the dashboard name 'HS & SHS' suggests a focus, hardcoding these values within the SQL limits the reusability of these metrics for other publications/websites or even for a consolidated view of 'HS' and 'SHS' if 'SHS' is not explicitly included in the SQL. This approach necessitates creating new, nearly identical metrics for each variation, increasing maintenance overhead and reducing metric consolidation.",AND t0.website = 'Herald Sun' AND t0.publication_group = 'Herald Sun',"Utilize Looker Studio filters or parameters for 'website' and 'publication_group' to allow users to dynamically select these dimensions. This would enable a single, more generalized metric to serve multiple reporting needs across different publications/websites, significantly improving consolidation and maintainability.",148,4473a333-74f4-463b-81e7-151f93013906
total_gross_revenue_digital_fy24,Anti-Pattern,"The metric uses an extremely long and hardcoded `NOT IN` list for `fin_adtype_name` and `unified_publication_name`. This exact list is duplicated in the `unified_publication_name_dimension_fy24_25` metric. This approach is highly unmaintainable, prone to errors, and makes updates cumbersome. Any change to the exclusion list requires manual modification in multiple places.","  AND t0.fin_adtype_name NOT IN ('Xtend', 'Unruly (Non-Targeted)', 'Taboola', 'SUDDENLY (Non-Targeted)', 'Finda', 'Events (Non-Targeted)', 'Edmedia', 'Display', 'Creatives', 'Classified', '-')
  AND t0.unified_publication_name NOT IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'CodeBet', 'CODE', 'null', 'Digital Subscription_NTN', 'Digital Subscription_TWM', 'Delicious.admin', 'ECOMMERCE.BODYANDSOUL', 'ECOMMERCE.VOGUE', 'EdMedia', 'Escape eCommerce', 'Escape.Admin', 'RACENET', 'SKYNEWS.ADMIN', 'Sky News', 'Stellar.Admin', 'TAUS.STOCKHEAD', 'TAUS.ADMIN', 'TOOWOOMBACUSTOM', 'Taboola', 'Taste.Admin', 'Unknown', 'Vogue.Admin', 'Vogueliving.Admin', 'Xtend', 'eCommerce.GQ', 'eCommerce.Kidspot', 'eCommerce', 'odds.com.au', 'Digital Subscription_NQN', 'Digital Subscription_CNS', 'Bodyandsoul.Admin', 'eCommerce.Delicious', 'ECOMMERCE.VOGUELIVING', 'eCommerce.Taste', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Rea.Audience', 'Rea.Content', 'Punters.com.au', 'Unruly')","Replace hardcoded `NOT IN` lists with a join to a governed lookup table (e.g., `dim_excluded_ad_types`, `dim_excluded_publications`) or implement a data quality layer upstream to filter these values at the source. This centralizes logic and improves maintainability.",149,f502f44a-e283-405f-ab8f-6a641edb4194
data_load_datetime_dimension_fy24_25,Hardcoded Logic,"Financial years ('2024', '2025', '2026') are hardcoded in the `WHERE` clauses across multiple metrics (e.g., `data_load_datetime_dimension_fy24_25` and `data_load_datetime_dimension_fy26`). This leads to metric duplication and requires manual updates every financial year, increasing maintenance overhead and risk of error.","  t0.financial_year IN ('2024', '2025')",Utilize Looker Studio's native date range controls or parameters for dynamic financial year selection. This allows a single metric definition to serve multiple financial years without requiring new metrics or manual code changes annually.,149,f502f44a-e283-405f-ab8f-6a641edb4194
unified_publication_name_dimension_fy24_25,Data Mismatch,"Most metrics source data from `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`, but this dimension specifically uses `ncau-data-newsquery-prd.asl_finance_derived_archive.details_dashboard_archive_FY25_T`. Using an archive table for a live dimension could indicate an inconsistent data source, potential data freshness issues, or performance implications if the archive table is not optimized for querying.","FROM
  `ncau-data-newsquery-prd.asl_finance_derived_archive.details_dashboard_archive_FY25_T` AS t0","Investigate the reason for sourcing this dimension from an archive table. Consolidate data sources to the primary `details_dashboard` table if possible, ensuring data consistency and optimal performance. If the archive table is intentionally used, document its purpose and implications clearly.",149,f502f44a-e283-405f-ab8f-6a641edb4194
total_gross_revenue_travel_services_fy24_25,Anti-Pattern,"The `LIMIT 1` clause is applied to aggregate measure queries (e.g., `SUM(gross_revenue_amount)`). While it doesn't cause an error for a single aggregated value, it's an unusual and unnecessary pattern for Looker Studio measures, which inherently expect a single aggregated result. It might indicate a copy-paste from a different query type or a misunderstanding of Looker Studio's aggregation behavior.",LIMIT 1;,"Remove `LIMIT 1` from aggregate measure queries. Looker Studio handles aggregation correctly without it, and its presence can be confusing or imply an unintended constraint.",149,f502f44a-e283-405f-ab8f-6a641edb4194
total_monitored_tables,Hardcoded Logic,"The SQL logic for defining the list of monitored tables and their respective update frequencies is hardcoded directly within a `UNION ALL` Common Table Expression (CTE) named `table_list`. This approach is inflexible; any changes to the monitored tables (additions, removals, or frequency updates) require manual modification of the SQL query. This exact `table_list` CTE and subsequent complex alert status logic are also duplicated in the 'Total Tables with OK or Minor Delay Status' metric, creating a significant maintenance burden and potential for inconsistency.","WITH
  table_list AS (
    SELECT 0 AS update_frequency, 'bdm_finance' AS datasetid, 'advertising_budget_forecast_fct' AS tableid UNION ALL
    SELECT 0 AS update_frequency, 'bdm_finance' AS datasetid, 'circulation_budget_forecast_fct' AS tableid UNION ALL
    SELECT 0 AS update_frequency, 'bdm_finance' AS datasetid, 'external_sundry_expenses_budget_forecast_fct' AS tableid UNION ALL
    SELECT 0 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_budget_forecast_fct' AS tableid UNION ALL
    SELECT 0 AS update_frequency, 'bdm_finance' AS datasetid, 'subscription_budget_forecast_fct' AS tableid UNION ALL
    SELECT 60 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_balance_fct' AS tableid UNION ALL
    SELECT 60 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_transaction_fct' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_account_profisee_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_business_unit_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_company_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_department_profisee_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_ledger_type_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_party_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_publication_profisee_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_responsibility_unit_profisee_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_sub_ledger_dim' AS tableid UNION ALL
    SELECT 1440 AS update_frequency, 'bdm_finance' AS datasetid, 'gl_sub_ledger_type_dim' AS tableid UNION ALL
    SELECT 10080 AS update_frequency, 'bdm_finance' AS datasetid, 'advertising_snapshot_fct' AS tableid UNION ALL
    SELECT 10080 AS update_frequency, 'bdm_finance' AS datasetid, 'circulation_snapshot_fct' AS tableid UNION ALL
    SELECT 10080 AS update_frequency, 'bdm_finance' AS datasetid, 'offplatform_subscription_revenue_fct' AS tableid UNION ALL
    SELECT 10080 AS update_frequency, 'bdm_finance' AS datasetid, 'subscription_snapshot_fct' AS tableid UNION ALL
    SELECT 44640 AS update_frequency, 'bdm_finance' AS datasetid, 'content_licensing_snapshot_fct' AS tableid UNION ALL
    SELECT 44640 AS update_frequency, 'bdm_finance' AS datasetid, 'expense_depreciation_snapshot_fct' AS tableid UNION ALL
    SELECT 44640 AS update_frequency, 'bdm_finance' AS datasetid, 'finance_gaap_adjustment' AS tableid UNION ALL
    SELECT 44640 AS update_frequency, 'bdm_finance' AS datasetid, 'sundry_revenue_snapshot_fct' AS tableid
  ),","Create a dedicated, governed metadata table (e.g., `bdm_finance.monitored_table_config`) to store the list of tables, their datasets, and their expected update frequencies. This table can then be joined in the SQL, centralizing the configuration and improving maintainability. Furthermore, encapsulate the common table health status logic (from `table_list` to `final_status` CTEs) into a reusable BigQuery view to eliminate duplication across metrics.",150,f9b52275-5924-4afb-8222-2c55854183ba
total_circulation_records_filtered,Hardcoded Logic,"The metric's SQL contains hardcoded lists of specific `draw_date` values (e.g., '2025-05-12' to '2025-06-08') and `vendor` names ('WOOLWORTH', 'EG', 'COLES', 'AMPOL', '7ELEVEN') within its `WHERE` clause. This makes the metric static and severely limits its analytical flexibility, as it cannot be easily adapted to analyze different date ranges or vendor groups without direct SQL modification.","WHERE
  (t0.draw_date IN (DATE '2025-05-12', DATE '2025-05-13', DATE '2025-05-14', DATE '2025-05-15', DATE '2025-05-16', DATE '2025-05-17', DATE '2025-05-18', DATE '2025-05-19', DATE '2025-05-20', DATE '2025-05-21', DATE '2025-05-22', DATE '2025-05-23', DATE '2025-05-24', DATE '2025-05-25', DATE '2025-05-26', DATE '2025-05-27', DATE '2025-05-28', DATE '2025-05-29', DATE '2025-05-30', DATE '2025-05-31', DATE '2025-06-01', DATE '2025-06-02', DATE '2025-06-03', DATE '2025-06-04', DATE '2025-06-05', DATE '2025-06-06', DATE '2025-06-07', DATE '2025-06-08')
  AND t0.vendor IN ('WOOLWORTH', 'EG', 'COLES', 'AMPOL', '7ELEVEN'))","Leverage Looker Studio's dashboard controls (e.g., date range filters, multi-select dropdowns for vendors) to allow users to dynamically select these filter values. If these specific lists represent a fixed business rule, consider storing them in a small configuration table that can be joined, rather than hardcoding them in the query.",150,f9b52275-5924-4afb-8222-2c55854183ba
active_subscriber_count_paying_consumer_daily,Hardcoded Logic|Anti-Pattern,"This high-criticality KPI uses a hardcoded `report_date` ('2025-06-17') and includes `LIMIT 1`. The `LIMIT 1` clause is highly problematic for a measure intended to count active subscribers, as it will only return a single arbitrary row's value, not the total count for the specified date or period. The hardcoded date makes the metric static and unusable for historical or dynamic analysis.",WHERE report_date = DATE '2025-06-17' AND member_type = 'subscriber' AND subscriber_details.customer_type = 'Consumer' AND subscriber_details.is_paying_flag = 'Y' LIMIT 1;,"Remove `LIMIT 1`. Replace the hardcoded `report_date` with a dynamic date parameter (e.g., `_DATA_DATE` or a Looker Studio date range parameter) to allow for flexible date filtering. Ensure the `SELECT` clause correctly aggregates the count (e.g., `COUNT(DISTINCT subscriber_id)` or `SUM(active_subscriber_count)` if `active_subscriber_count` is already a pre-aggregated daily total).",152,6196cc2e-ba25-4e80-8d4e-29602d889639
subscriber_source_id,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic. Dimensions are used to categorize and group data, and `LIMIT 1` will arbitrarily select only one `subscriber_id_src`, making the dimension unusable for displaying all relevant IDs or for grouping data.",SELECT SAFE_CAST(subscriber_id_src AS STRING) FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `subscriber_id_src` values for filtering and grouping.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
masthead_category_derived,Anti-Pattern|Hardcoded Logic,"This dimension uses an extensive `CASE` statement to derive 'Masthead Category' from `combined_masthead`. While functional, this approach is difficult to maintain, prone to errors if new mastheads are introduced, and lacks scalability. It also includes `LIMIT 1`, which is inappropriate for a dimension.","SELECT CASE WHEN (STRPOS(combined_masthead, 'TA') > 0) THEN 'The Australian' WHEN (STRPOS(combined_masthead, 'HS') > 0) THEN 'Herald Sun' WHEN (STRPOS(combined_masthead, 'DT') > 0) THEN 'Daily Telegraph' ... ELSE 'other' END AS masthead_category FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` LIMIT 1;","Replace the `CASE` statement with a join to a dedicated, governed lookup table that maps `combined_masthead` codes to their respective categories. This improves maintainability, scalability, and data governance. Also, remove `LIMIT 1`.",152,6196cc2e-ba25-4e80-8d4e-29602d889639
subscriber_report_date,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a date dimension. It will only return a single arbitrary report date, preventing the dashboard from displaying data across different dates or using date range filters effectively.",SELECT report_date FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `report_date` values for filtering and grouping.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
subscriber_member_type,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a dimension. It will only return a single arbitrary member type, preventing the dashboard from displaying data across different member types or using them for grouping.",SELECT member_type FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `member_type` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
subscriber_customer_type,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a dimension. It will only return a single arbitrary customer type, preventing the dashboard from displaying data across different customer types or using them for grouping.",SELECT subscriber_details.customer_type FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` LEFT JOIN UNNEST(subscriber_details) AS subscriber_details LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `customer_type` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
subscriber_is_paying_flag,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a dimension. It will only return a single arbitrary paying flag, preventing the dashboard from displaying data across different paying statuses or using them for grouping.",SELECT subscriber_details.is_paying_flag FROM `ncau-data-newsquery-prd.asl_audience_insights.subscriber_base_agg` LEFT JOIN UNNEST(subscriber_details) AS subscriber_details LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `is_paying_flag` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
total_push_messages_sent,Hardcoded Logic|Anti-Pattern,"This KPI uses a hardcoded date range ('2025-06-04' to '2025-06-10') and includes `LIMIT 1`. The `LIMIT 1` clause is nonsensical for an aggregate `SUM` measure, as it will arbitrarily limit the result to a single row's sum, not the total sum over the specified period. The hardcoded date range makes the metric static and unusable for dynamic analysis.",SELECT SUM(total_sent_count) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,"Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters (e.g., `_DATA_DATE_START`, `_DATA_DATE_END` or Looker Studio date range parameters) to allow for flexible date filtering.",152,6196cc2e-ba25-4e80-8d4e-29602d889639
total_push_messages_opened,Hardcoded Logic|Anti-Pattern,"Similar to `total_push_messages_sent`, this KPI uses a hardcoded date range and `LIMIT 1`, rendering it static and potentially inaccurate for aggregated data.",SELECT SUM(total_open_count) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
paid_sub_push_messages_sent,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT SUM(paid_subscriber_sent_count) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
paid_sub_push_messages_opened,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT SUM(paid_subscriber_open_count) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
reg_sub_push_messages_sent,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT SUM(registered_subscriber_sent_count) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
reg_sub_push_messages_opened,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT SUM(registered_subscriber_open_count) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
avg_time_in_app_per_open,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT AVG(avg_timeinapp_seconds_per_open) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
paid_sub_avg_time_in_app_per_open,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT AVG(paid_subscriber_avg_timeinapp_seconds_per_open) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
reg_sub_avg_time_in_app_per_open,Hardcoded Logic|Anti-Pattern,"This measure uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT AVG(registered_subscriber_avg_timeinapp_seconds_per_open) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
paid_sub_open_rate,Hardcoded Logic|Anti-Pattern,"This KPI uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT AVG(paid_subscriber_open_rate) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
reg_sub_open_rate,Hardcoded Logic|Anti-Pattern,"This KPI uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT AVG(registered_subscriber_open_rate) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
total_open_rate,Hardcoded Logic|Anti-Pattern,"This KPI uses a hardcoded date range and `LIMIT 1`, making it static and potentially inaccurate for aggregated data.",SELECT AVG(total_open_rate) FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` WHERE activity_date BETWEEN DATE '2025-06-04' AND DATE '2025-06-10' LIMIT 1;,Remove `LIMIT 1`. Replace the hardcoded date range with dynamic date parameters.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
push_message_activity_date,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a date dimension. It will only return a single arbitrary activity date.",SELECT activity_date FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `activity_date` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
push_message_name,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a dimension. It will only return a single arbitrary message name.",SELECT message_name FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `message_name` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
push_message_content,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a dimension. It will only return a single arbitrary message content.",SELECT messagecontent FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `messagecontent` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
push_message_publication_name,Anti-Pattern,"This dimension metric includes `LIMIT 1` in its SQL logic, which is inappropriate for a dimension. It will only return a single arbitrary publication name.",SELECT publication_name FROM `ncau-data-newsquery-prd.prstn_consumer.pushmessagedetail_summary` LIMIT 1;,Remove `LIMIT 1` to allow the dimension to return all relevant `publication_name` values.,152,6196cc2e-ba25-4e80-8d4e-29602d889639
spv_target_family,Hardcoded Logic|Anti-Pattern,"The dashboard defines five distinct metrics, all based on the 'SPV Target' but with different hardcoded date ranges (e.g., '2024-08-04 to 2025-08-04', '2024-03-11 to 2025-03-11', etc.). Each metric has an almost identical SQL query, with the only variation being the `WHERE` clause's date filter. This is a severe anti-pattern as it leads to redundant metric definitions, increased maintenance burden (any change to the core SPV logic requires updating 5 metrics), and inefficient querying if all are displayed simultaneously. This directly contradicts the reported high consolidation score.","WHERE (clmn5_ >= DATE 'YYYY-MM-DD' AND clmn5_ <= DATE 'YYYY-MM-DD')
(Example: WHERE (clmn5_ >= DATE '2024-08-04' AND clmn5_ <= DATE '2025-08-04'))","Consolidate these five metrics into a single 'SPV Target' metric. Implement dynamic date filtering within the Looker Studio dashboard using built-in date range controls or parameters. This allows users to select their desired period without requiring new, hardcoded metric definitions for each time window, significantly improving maintainability, reusability, and true consolidation.",153,9ecab5db-180b-480c-a819-d10e5b8d263e
audience_mom_growth_rate_july_2025_all_devices,Anti-Pattern,"The SQL logic for 'All Devices' metrics uses an equality check (`= 'PC/Laptop, Smartphone, Tablet'`) on the `Device` column. This is a severe anti-pattern. If the `Device` column stores individual device types (e.g., 'PC/Laptop', 'Smartphone', 'Tablet'), this filter will *never* return data, or it implies a highly unusual and poor data modeling choice where the column literally stores a concatenated string. The business description 'across PC/Laptop, Smartphone, Tablet devices' strongly suggests the intent is to include all three, which would typically require an `IN` clause.","SAFE_CAST(t0.Device AS STRING) = 'PC/Laptop, Smartphone, Tablet'","Investigate the actual data stored in the `Device` column. If it contains individual device names, change the filter to `SAFE_CAST(t0.Device AS STRING) IN ('PC/Laptop', 'Smartphone', 'Tablet')`. If the column truly stores concatenated strings, consider normalizing the data model to individual device entries or using string functions like `LIKE` or `CONTAINS` (though `IN` is preferred for exact matches).",154,1f63540f-8268-4e9f-83a3-3acf63da5da5
audience_mom_growth_rate_march_2025_tablet,Hardcoded Logic,"All metrics on this dashboard are defined with hardcoded date ranges (e.g., March 2025, July 2025) and specific device types ('Tablet', 'All Devices'). This leads to significant metric duplication (e.g., separate metrics for March Tablet vs. July All Devices) and prevents the dashboard from being dynamic or easily updated for new reporting periods or dimension selections.",WHERE (SAFE_CAST(t0.Month AS DATE) >= DATE '2025-03-01' AND SAFE_CAST(t0.Month AS DATE) <= DATE '2025-03-31' AND ... AND SAFE_CAST(t0.Device AS STRING) = 'Tablet'),"Refactor the dashboard to use Looker Studio's date range controls and filter parameters for dimensions like 'Month' and 'Device'. This would allow a single, dynamic metric definition to serve all reporting periods and device combinations, drastically reducing the number of individual metrics and improving maintainability.",154,1f63540f-8268-4e9f-83a3-3acf63da5da5
total_audience_march_2025_tablet,Anti-Pattern,"The repeated use of `SAFE_CAST(t0.Audience AS FLOAT64)` and `SAFE_CAST(t0.Audience_Previous_Month AS FLOAT64)` across all metrics suggests that the `Audience` and `Audience_Previous_Month` columns in the `ipsos_mom_audience_view` table might not be stored as numeric types (e.g., INT64, BIGNUMERIC). While `SAFE_CAST` handles errors gracefully, consistent casting at the query level can indicate a suboptimal data type in the source table or view, potentially impacting performance or clarity.",SUM(SAFE_CAST(t0.Audience AS FLOAT64)),"Review the schema of `ipsos_mom_audience_view`. If `Audience` and `Audience_Previous_Month` are intended to be numeric, ensure they are stored as appropriate numeric types (e.g., `INT64`, `BIGNUMERIC`, `FLOAT64`) directly in the view or underlying table. This would remove the need for repeated casting in every metric's SQL logic.",154,1f63540f-8268-4e9f-83a3-3acf63da5da5
audience_mom_growth_rate_march_2025_tablet,Anti-Pattern,"The `Gender` and `Age` filters use `IN ('All', 'ALL')`. This indicates potential inconsistency in casing for 'All' values in the source data or an overly defensive filter. While functional, it suggests a data quality issue or a need for data standardization.","SAFE_CAST(t0.Gender AS STRING) IN ('All', 'ALL') AND SAFE_CAST(t0.Age AS STRING) IN ('All', 'ALL')",Standardize the casing of 'All' values in the `Gender` and `Age` columns within the `ipsos_mom_audience_view` table or during the ETL process. This would allow for a simpler filter like `SAFE_CAST(t0.Gender AS STRING) = 'All'`.,154,1f63540f-8268-4e9f-83a3-3acf63da5da5
total_events_20230703_to_20250702,Anti-Pattern,"Two metrics, 'Total Events (2023-07-03 to 2025-07-02)' and 'Total Events (2023-07-03 to 2025-07-01)', are functionally identical except for a one-day difference in their hardcoded end date. This duplication of logic for slightly varied date ranges is an anti-pattern that increases maintenance overhead and reduces reusability. Each minor date adjustment would currently require a new, distinct metric.","WHERE
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0c0d1.event_date AS STRING)) >= DATE '2023-07-03' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0c0d1.event_date AS STRING)) <= DATE '2025-07-02'

(Similar logic for 'total_events_20230703_to_20250701' with end date '2025-07-01')","Consolidate these into a single 'Total Events' metric that utilizes a dynamic date range parameter, typically provided by Looker Studio's built-in date range controls. This allows users to select any desired period without requiring new metrics. If specific fixed date ranges are business requirements, consider creating a base metric and then using dashboard-level filters or calculated fields that reference this base metric with the specific date ranges, rather than duplicating the entire metric definition.",156,7af6d106-46fc-4721-8a0c-3da32bc27707
"message_category_dimension, sms_activity_count_by_date_subscriber_publication_message_category, sms_activity_count_granular, sms_activity_count_by_date_subscriber_publication_message_category_publication_abbr, sms_activity_count_by_message_category_simplified",Hardcoded Logic|Anti-Pattern,"Multiple metrics and dimensions define 'message_category' using identical or very similar hardcoded CASE statements with `REGEXP_CONTAINS` on `message_text`. This duplication creates a significant maintenance burden, increases the risk of inconsistencies if categorization rules change, and makes it difficult to introduce new categories or modify existing ones across the dashboard. The 'simplified' version further fragments this logic.","CASE
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'digital edition')) THEN 'DPE'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'My Account')) THEN 'My Account'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'Rewards')) THEN 'Rewards'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'Australian Plus')) THEN 'Rewards'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'Click here to download')) THEN 'App'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'Super Coach')) THEN 'Supercoach'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'puzzles and games ')) THEN 'Puzzles'
        WHEN (SAFE.REGEXP_CONTAINS(t0.message_text, 'Mind Games ')) THEN 'Mind Games'
        ELSE t0.message_text
    END AS message_category","Centralize the 'message_category' logic. This can be achieved by creating a dedicated BigQuery view or a User-Defined Function (UDF) that encapsulates this categorization. Alternatively, if categories are static and finite, consider a lookup table that maps `message_text` patterns to `message_category` and join to it. This ensures a single source of truth for message categorization, improving consistency and maintainability.",157,a7df2367-af28-4183-b5f8-70806ad88772
"publication_abbreviation_dimension, sms_activity_count_by_date_subscriber_publication_message_category_publication_abbr",Hardcoded Logic|Anti-Pattern|Data Mismatch,"The 'publication_abbreviation' is derived using a hardcoded CASE statement. The `structure_sql` indicates 30 unique publications, but the CASE statement only explicitly maps 13. This means a significant portion of publications (17 out of 30) will fall into the `ELSE` clause, resulting in their full names being displayed instead of abbreviations. This leads to inconsistent display and potential misinterpretation for users expecting abbreviations for all publications.","CASE
        WHEN (t0.publication_name = 'The Aus') THEN 'TA'
        WHEN (t0.publication_name = 'CourierMail') THEN 'CM'
        WHEN (t0.publication_name = 'Daily Tele') THEN 'DT'
        WHEN (t0.publication_name = 'Advertiser') THEN 'AA'
        WHEN (t0.publication_name = 'GeelongAdv') THEN 'GA'
        WHEN (t0.publication_name = 'GCBulletin') THEN 'GC'
        WHEN (t0.publication_name = 'CairnsPost') THEN 'CP'
        WHEN (t0.publication_name = 'WeeklyTimes') THEN 'WT'
        WHEN (t0.publication_name = 'Chronicle') THEN 'TC'
        WHEN (t0.publication_name = 'TVBulletin') THEN 'TB'
        WHEN (t0.publication_name = 'Herald Sun') THEN 'HS'
        WHEN (t0.publication_name = 'GeelongAddy') THEN 'GA'
        WHEN (t0.publication_name = 'The Mercury') THEN 'TM'
        ELSE t0.publication_name
    END AS publication_abbreviation","Create a dedicated `publication_lookup` dimension table in BigQuery. This table should contain `publication_name` and `publication_abbreviation` columns for all relevant publications. Metrics can then join to this table to retrieve the abbreviation, ensuring comprehensive, consistent, and easily maintainable mapping.",157,a7df2367-af28-4183-b5f8-70806ad88772
"sms_activity_count_by_date_subscriber_publication_message_category, sms_activity_count_by_publication, sms_activity_count_granular, sms_activity_count_by_date_subscriber_publication_message_category_publication_abbr, sms_activity_count_by_message_category_simplified",Hardcoded Logic,"Several aggregation metrics use hardcoded, static date ranges (e.g., '2025-02-24' to '2025-07-15', '2025-03-01' to '2025-04-30'). While the `structure_sql` confirms data availability up to '2025-09-01', these fixed date filters make the dashboard static and require manual updates for ongoing analysis, limiting its utility for historical or real-time trending.","WHERE
    t0.activity_date >= DATE '2025-02-24' AND t0.activity_date <= DATE '2025-07-15'","Replace hardcoded date ranges with dynamic date filtering mechanisms. Utilize Looker Studio's built-in date range controls or parameters to allow users to select their desired period. For default views, consider using relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY/MONTH/YEAR)`) to ensure the dashboard always displays current or recent data.",157,a7df2367-af28-4183-b5f8-70806ad88772
distinct_job_count_by_minute_state,Anti-Pattern,"This aggregation metric uses a `LIMIT 10` clause. For a dashboard intended to show overall query performance trends, this provides an incomplete and potentially misleading view, as it only displays the top 10 results based on the `ORDER BY` clause, ignoring any other relevant data points.",LIMIT 10,"Remove the `LIMIT` clause to ensure all relevant data is displayed for comprehensive analysis. If a 'top N' view is specifically required, it should be clearly labeled as such and potentially implemented at the visualization layer rather than hardcoded in the underlying metric SQL.",158,c1ecb281-a103-4831-8a43-d303111e02ec
distinct_job_count_by_hour,Anti-Pattern,"Similar to other aggregation metrics, this metric includes a `LIMIT 10` clause, arbitrarily restricting the data shown to only 10 hours. This prevents a full historical trend analysis of job counts by hour over the specified 14-day period.",LIMIT 10,"Remove the `LIMIT` clause to allow for a complete time-series analysis. Dashboard users expect to see all data within their selected date range, not a truncated sample.",158,c1ecb281-a103-4831-8a43-d303111e02ec
distinct_job_count_by_state,Anti-Pattern,"This metric, intended to show job counts by state, is limited to 10 results. This could hide less frequent but potentially important job states, or misrepresent the overall distribution if more than 10 states exist or are relevant to the analysis.",LIMIT 10,"Remove the `LIMIT` clause to ensure all job states and their respective counts are visible. If a 'top N' states view is desired, it should be a specific visualization choice, not a hardcoded SQL limitation.",158,c1ecb281-a103-4831-8a43-d303111e02ec
job_duration_sum_by_hour,Anti-Pattern,"The `LIMIT 10` clause restricts the sum of job durations to only 10 hours, making it impossible to analyze the full hourly trend of job durations over the specified 14-day period.",LIMIT 10,Remove the `LIMIT` clause to provide a complete hourly breakdown of job durations.,158,c1ecb281-a103-4831-8a43-d303111e02ec
job_duration_count_by_hour,Anti-Pattern,"Similar to other hourly aggregations, this metric is limited to 10 hours, hindering a comprehensive view of job duration counts over time.",LIMIT 10,Remove the `LIMIT` clause to show the full hourly trend of job duration counts.,158,c1ecb281-a103-4831-8a43-d303111e02ec
job_duration_per_job,Anti-Pattern,"This metric is designed to show duration per job but is limited to only 10 jobs. This is highly restrictive and prevents any meaningful analysis of individual job performance, especially for a dashboard focused on query performance.",LIMIT 10,Remove the `LIMIT` clause or implement pagination/filtering at the dashboard level if displaying a large number of individual jobs. A `LIMIT 10` makes this metric largely useless for its stated purpose.,158,c1ecb281-a103-4831-8a43-d303111e02ec
stages_from_creation_sum_by_hour,Anti-Pattern,"The `LIMIT 10` clause restricts the sum of stage creation times to only 10 hours, preventing a complete hourly trend analysis.",LIMIT 10,Remove the `LIMIT` clause to provide a complete hourly breakdown.,158,c1ecb281-a103-4831-8a43-d303111e02ec
stages_from_creation_count_by_hour,Anti-Pattern,"Similar to other hourly aggregations, this metric is limited to 10 hours, hindering a comprehensive view of stage creation counts over time.",LIMIT 10,Remove the `LIMIT` clause to show the full hourly trend.,158,c1ecb281-a103-4831-8a43-d303111e02ec
total_bytes_processed_per_job,Anti-Pattern,"This metric is limited to only 10 jobs, making it impossible to analyze bytes processed for the vast majority of jobs. This severely limits its utility for performance monitoring.",LIMIT 10,Remove the `LIMIT` clause or manage data display at the dashboard level for individual job details.,158,c1ecb281-a103-4831-8a43-d303111e02ec
total_slot_ms_per_job,Anti-Pattern,"Similar to bytes processed, this metric is limited to 10 jobs, providing an incomplete picture of slot consumption per job.",LIMIT 10,Remove the `LIMIT` clause or manage data display at the dashboard level for individual job details.,158,c1ecb281-a103-4831-8a43-d303111e02ec
creation_time_minute_dimension,Anti-Pattern,"This dimension metric uses `LIMIT 1`, which is nonsensical for a dimension. It will only ever return a single minute value, making it unusable for filtering or grouping across a range of data.",LIMIT 1,Remove the `LIMIT 1` clause. Dimensions should return all distinct values relevant to the selected data range to enable proper filtering and grouping in the dashboard.,158,c1ecb281-a103-4831-8a43-d303111e02ec
start_time_hour_dimension,Anti-Pattern,"Similar to `creation_time_minute_dimension`, this dimension uses `LIMIT 1`, rendering it useless for its intended purpose of providing hourly granularity for filtering or grouping.",LIMIT 1,Remove the `LIMIT 1` clause.,158,c1ecb281-a103-4831-8a43-d303111e02ec
job_state_dimension,Anti-Pattern,"This dimension uses `LIMIT 1`, meaning it will only ever show one job state. This completely defeats the purpose of a 'Job State' dimension, which should list all available states for filtering and analysis.",LIMIT 1,Remove the `LIMIT 1` clause.,158,c1ecb281-a103-4831-8a43-d303111e02ec
cache_hit_dimension,Anti-Pattern,"This dimension uses `LIMIT 1`, which is problematic as it will only return one cache hit status (true/false) instead of allowing analysis across both.",LIMIT 1,Remove the `LIMIT 1` clause.,158,c1ecb281-a103-4831-8a43-d303111e02ec
job_type_dimension,Anti-Pattern,"This dimension uses `LIMIT 1`, preventing the dashboard from showing or filtering by all available job types.",LIMIT 1,Remove the `LIMIT 1` clause.,158,c1ecb281-a103-4831-8a43-d303111e02ec
job_priority_dimension,Anti-Pattern,"This dimension uses `LIMIT 1`, preventing the dashboard from showing or filtering by all available job priorities.",LIMIT 1,Remove the `LIMIT 1` clause.,158,c1ecb281-a103-4831-8a43-d303111e02ec
distinct_job_count_base,Anti-Pattern,"The base metric for distinct job count uses `DATE(creation_time) = CURRENT_DATE()`. While valid for a daily snapshot, this hardcoded filter limits flexibility and consistency with other metrics that use different time windows (e.g., 15 minutes, 14 days). This inconsistency can lead to user confusion and makes it difficult to compare related metrics.",WHERE DATE(creation_time) = CURRENT_DATE(),"Standardize date filtering across all metrics, ideally using dashboard-level date range parameters to allow users to select their desired time window. This improves reusability and consistency across the dashboard.",158,c1ecb281-a103-4831-8a43-d303111e02ec
job_duration_seconds_base,Anti-Pattern,"Similar to `distinct_job_count_base`, this KPI uses a hardcoded `DATE(creation_time) = CURRENT_DATE()` filter, which limits its utility for historical analysis or comparison with other metrics using different timeframes.",WHERE DATE(creation_time) = CURRENT_DATE(),"Standardize date filtering across all metrics, ideally using dashboard-level date range parameters.",158,c1ecb281-a103-4831-8a43-d303111e02ec
total_bytes_processed_base,Anti-Pattern,"This KPI also uses a hardcoded `DATE(creation_time) = CURRENT_DATE()` filter, leading to inconsistency in time window analysis across the dashboard.",WHERE DATE(creation_time) = CURRENT_DATE(),"Standardize date filtering across all metrics, ideally using dashboard-level date range parameters.",158,c1ecb281-a103-4831-8a43-d303111e02ec
total_slot_ms_base,Anti-Pattern,"This KPI uses a hardcoded `DATE(creation_time) = CURRENT_DATE()` filter, limiting its flexibility and consistency with other metrics.",WHERE DATE(creation_time) = CURRENT_DATE(),"Standardize date filtering across all metrics, ideally using dashboard-level date range parameters.",158,c1ecb281-a103-4831-8a43-d303111e02ec
distinct_job_count_by_minute_state,Hardcoded Logic,"The `state IN ('DONE', 'RUNNING', 'PENDING')` filter hardcodes specific job states. While these are common, it might exclude other relevant states (e.g., 'FAILED', 'CANCELLED') or require manual updates if new states are introduced in BigQuery.","state IN ('DONE', 'RUNNING', 'PENDING')","Consider if all job states should be included by default, or if this filter should be exposed as a dashboard parameter to allow users to select states of interest. If only these states are ever relevant, document the business rule clearly.",158,c1ecb281-a103-4831-8a43-d303111e02ec
stages_from_creation_seconds_base,Anti-Pattern,"The use of `UNNEST(job_stages)` followed by `SUM` without a clear `GROUP BY job_id` for the base metric might lead to an inflated sum if a single job has multiple stages and the intent is to measure total time *per job*. The business description 'The sum of time in seconds from job creation to the start of each job stage' could be interpreted as a sum across all stages *for all jobs*, which the current SQL does, but if the intent is a single 'stages from creation' value per job, this needs refinement.","FROM `...JOBS_BY_PROJECT`, UNNEST(job_stages) AS job_stages SELECT SUM(TIMESTAMP_DIFF(TIMESTAMP_MILLIS(job_stages.start_ms), creation_time, SECOND))","Clarify the precise business definition for 'Total Stages from Creation (Seconds)'. If it's meant to be a single aggregated value per job, consider aggregating `job_stages` within a subquery (e.g., `MAX` or `AVG` per job_id) before summing across jobs. If it's truly a sum of all stage durations across all jobs, the current SQL is technically correct but the business description might need to be more explicit about summing across individual stage entries.",158,c1ecb281-a103-4831-8a43-d303111e02ec
stages_from_creation_sum_by_hour,Anti-Pattern,"Similar to the base metric, the `UNNEST(job_stages)` combined with `SUM` for hourly aggregation might lead to inflated sums if the intent is to sum a single 'stages from creation' value per job per hour. This could misrepresent the total time spent in stages.","FROM `...JOBS_BY_PROJECT`, UNNEST(job_stages) AS job_stages SELECT DATETIME_TRUNC(start_time, HOUR) AS start_hour, SUM(TIMESTAMP_DIFF(TIMESTAMP_MILLIS(job_stages.start_ms), creation_time, SECOND))","As with the base metric, clarify the business definition. If the intent is to sum a single value per job, refactor the SQL to aggregate `job_stages` per job_id first, then sum by hour.",158,c1ecb281-a103-4831-8a43-d303111e02ec
stages_from_creation_count_by_hour,Anti-Pattern,"The `COUNT(TIMESTAMP_DIFF(...))` after `UNNEST(job_stages)` will count each stage entry, not necessarily each job. If the intent is to count jobs that have stage data, this metric will be inflated. If the intent is to count individual stage entries, the business description should be more precise.","FROM `...JOBS_BY_PROJECT`, UNNEST(job_stages) AS job_stages SELECT DATETIME_TRUNC(start_time, HOUR) AS start_hour, COUNT(TIMESTAMP_DIFF(TIMESTAMP_MILLIS(job_stages.start_ms), creation_time, SECOND))","Clarify the business definition: is it counting jobs or individual stage entries? If counting jobs, use `COUNT(DISTINCT job_id)` or ensure aggregation handles the `UNNEST` appropriately (e.g., `COUNT(job_id)` after a subquery that selects distinct jobs with stage data).",158,c1ecb281-a103-4831-8a43-d303111e02ec
revenue_type_level2_filtered_by_financial_month_1,Hardcoded Logic,"The 'Revenue Type Level 2 (Financial Month 1)' metric explicitly filters for `financial_month = '1'`. While this might be intentional for a specific reporting period, hardcoding a month value makes the dashboard less dynamic and requires manual updates or new metric definitions for subsequent months. This can lead to a proliferation of similar metrics (e.g., 'Financial Month 2', 'Financial Month 3') and increased maintenance burden.",t0.financial_month = '1',"Replace the hardcoded `financial_month = '1'` with a dynamic parameter or a relative date filter (e.g., 'current financial month'). Alternatively, if the intent is to always show data for the first financial month, consider if this dimension should be part of a broader date dimension table that allows for flexible filtering across all months without creating separate metrics.",159,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
channel_classification,Hardcoded Logic|Anti-Pattern,"Multiple dimension metrics (e.g., `channel_classification`, `site_classification`, `category1_classification`, `category_classification_subscription_movement`, `category_campaign_conversion`, `masthead_classification_spend`, `campaign_code_classification`) rely on extensive, hardcoded `CASE` statements with string matching (`LIKE '%...%'`) to categorize data. This approach is brittle; any change in source system naming conventions or the introduction of new channels/campaign types requires manual updates to numerous metric definitions. The `campaign_code_classification` metric is particularly complex and lengthy, indicating a significant maintenance burden.",SELECT CASE WHEN source_system_name LIKE '%Facebook%' THEN 'Meta' WHEN source_system_name LIKE '%LinkedIn%' THEN 'LinkedIn' ... ELSE 'Other' END AS Channel_Classification FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct`,"Implement a centralized dimension table (e.g., `dim_marketing_channels`, `dim_campaign_types`) that maps raw source system names, campaign types, or adgroup names to their respective classifications. This table can be maintained independently and joined to the fact tables. This approach improves data governance, ensures consistency, and significantly reduces the effort required for updates or expansions.",160,180028f3-3485-45df-b0df-f690cbb6f2e9
meta_subscriptions,Hardcoded Logic|Anti-Pattern,"A large number of measure metrics (e.g., `meta_subscriptions`, `linkedin_subscriptions`, `tradedesk_subscriptions`, `facebook_subs_campaign_conversion`, `google_search_subs_campaign_conversion`, `external_display_count`, `sem_count`) are defined by embedding specific channel or source filters directly within `SUM(CASE WHEN ... THEN ... END)` logic. This creates a redundant set of metrics (e.g., 10+ channel-specific subscription metrics from `campaign_performance_fct`, 8+ from `campaign_conversion_fct`, and 15+ acquisition counts from `v_subscription_movement`). This proliferation makes the dashboard cumbersome, increases query complexity, and requires creating a new metric for every new channel or specific filter combination.",SELECT SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscription_count ELSE 0 END) AS Meta_Subs FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct`,"Leverage the base measure (e.g., `total_subscriptions`, `total_spend`, `subscription_movement_count`) and combine it with the recommended dimension tables. Users can then dynamically filter the base measure by the appropriate classification dimension (e.g., 'Channel Classification' = 'Meta') directly within the dashboard. This drastically reduces the total number of metrics, improves dashboard flexibility, and simplifies maintenance.",160,180028f3-3485-45df-b0df-f690cbb6f2e9
metro_subs_campaign_conversion,Anti-Pattern|Duplication,"The metrics 'Metro Subscriptions (Campaign Conversion)' and 'Regionals Subscriptions (Campaign Conversion)' are defined with identical SQL logic, both filtering for `account_name IN ('The Australian')`. This indicates either a direct, unnecessary duplication of metrics or a potential mislabeling/misunderstanding of the business logic, where 'The Australian' is being used to represent both 'Metro' and 'Regionals' without any actual data differentiation.",SELECT SUM(CASE WHEN account_name IN ('The Australian') THEN subscriptions ELSE 0 END) AS Metro_Subs FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_conversion_fct`,"Investigate the precise business requirements for 'Metro' and 'Regionals' subscriptions. If they are intended to be distinct, the SQL logic needs to be updated to reflect that differentiation. If 'The Australian' is indeed the common source for both, consider consolidating into a single, appropriately named metric or clarifying the naming convention to avoid confusion. This also suggests the benefit of a `dim_account` or `dim_masthead` table with a 'region' attribute.",160,180028f3-3485-45df-b0df-f690cbb6f2e9
subscriptions_last_7_days,Hardcoded Logic,"Metrics such as 'Subscriptions Last 7 Days' and 'Cost Last 7 Days' embed relative date logic (`DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= 7`) directly within their definitions. While functional for a specific use case, this approach limits the dashboard's flexibility. Users cannot easily adjust the lookback period (e.g., to 30 days, 90 days, or a custom range) without requiring a new metric to be created.","SELECT SUM(CASE WHEN DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= 7 THEN subscription_count ELSE 0 END) AS Subs_Last_7_Days FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct`","For common relative date filters, leverage dashboard-level date range controls or implement a date dimension table with pre-calculated flags (e.g., `is_last_7_days`, `is_current_month`). This allows users to dynamically apply date filters to base measures, reducing metric proliferation and increasing dashboard interactivity and reusability.",160,180028f3-3485-45df-b0df-f690cbb6f2e9
total_day_target_by_publication_group,Hardcoded Logic,"This metric's SQL logic includes a hardcoded date range ('2025-05-19' AND '2025-05-25'). This prevents the dashboard from dynamically displaying current or historical weekly data without manual SQL modification, making it unsuitable for a 'Weekly Subs dashboard' unless it's intended as a static snapshot for a specific future period.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN '2025-05-19' AND '2025-05-25'","Replace hardcoded dates with Looker Studio's built-in date range parameters or dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)`) to allow users to select or automatically view relevant weekly data. This will significantly improve the dashboard's utility and maintainability.",161,b8ff9b19-a3c3-4b05-a4a1-d6626d5783da
total_day_target_website,Hardcoded Logic,"Similar to 'Total Day Target by Publication Group', this metric also uses an identical hardcoded date range ('2025-05-19' AND '2025-05-25'). This severely limits the dashboard's ability to provide up-to-date or historical weekly insights without manual intervention, contradicting the purpose of a 'weekly' dashboard.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN '2025-05-19' AND '2025-05-25'",Implement dynamic date filtering using Looker Studio's date range controls or BigQuery's date functions to ensure the dashboard reflects current or user-selected weekly data. Consider consolidating the underlying data model if both 'publication_group' and 'website' targets are always needed together.,161,b8ff9b19-a3c3-4b05-a4a1-d6626d5783da
total_c_score_target,Hardcoded Logic,"This metric's SQL logic contains a hardcoded date range ('2025-08-01' AND '2025-08-31') for `week_ending`. This design choice restricts the dashboard to displaying C-score targets only for this specific future month, hindering its utility for continuous weekly monitoring and requiring manual updates for ongoing use.",WHERE t0.week_ending BETWEEN '2025-08-01' AND '2025-08-31',"Revise the SQL to use dynamic date parameters or Looker Studio's date range filters. For weekly dashboards, consider using `DATETIME_TRUNC(CURRENT_DATETIME(), ISOWEEK)` or similar logic to automatically align with the current week or a user-defined period, ensuring the dashboard remains relevant without manual code changes.",161,b8ff9b19-a3c3-4b05-a4a1-d6626d5783da
multiple_metrics,Anti-Pattern,"All key metrics ('Weekly Acquisitions', 'Weekly Cancellations', 'Cumulative Cancellations', 'Potential Closing Base', 'Active Closing Base', and even the 'Sold In Source Code Category' dimension) redundantly define the exact same complex set of CTEs: `newspass_next_subscriptions`, `acquisition_data`, `cancellation_data`, `calendar_dim`, `decay_data_txfm1`, and `decay_data_txfm2`. This duplication means that the same data preparation and transformation steps are re-executed for every single metric query, leading to highly inefficient data processing, increased query costs, and a significant maintenance overhead. Any change to the core logic requires updating multiple, identical SQL blocks.","WITH
  newspass_next_subscriptions AS (
    SELECT DISTINCT
      next_subscription_id_src
    FROM
      `nau-data-nprod-dataservices.genome_sandbox.t_newspass_subscription_fct` AS npass
    WHERE
      npass.next_subscription_id_src IS NOT NULL
  ),
  acquisition_data AS (
    SELECT
      psm.* EXCEPT (subscription_movement_count),
      CAST(psm.movement_datetime AS date) AS acquisition_date,
      1 AS subscription_movement_count
    FROM
      newspass_next_subscriptions AS npass
      LEFT JOIN
      `nau-data-nprod-dataservices.prstn_genome.t_prstn_subscription_movement` AS psm
      ON npass.next_subscription_id_src = psm.subscription_id_src
    WHERE
      psm.is_paying_flag = 'Y'
      AND CAST(psm.movement_datetime AS date) BETWEEN PARSE_DATE('%Y%m%d', @DS_START_DATE) AND PARSE_DATE('%Y%m%d', @DS_END_DATE)
      AND dw_source_system_code = 'THINK'
      AND psm.subscription_movement_count_type IN ('acquisition', 'rate_plan_movement')
      AND movement_type_code = 'to'
    QUALIFY ROW_NUMBER() OVER (PARTITION BY subscriber_id_src, subscription_id_src ORDER BY subscription_movement_count_type, movement_datetime) = 1
  ),
  cancellation_data AS (
    SELECT
      psm.* EXCEPT (subscription_movement_count),
      CAST(psm.movement_datetime AS date) AS cancellation_date,
      1 AS subscription_movement_count
    FROM
      newspass_next_subscriptions AS npass
      LEFT JOIN
      `nau-data-nprod-dataservices.prstn_genome.t_prstn_subscription_movement` AS psm
      ON npass.next_subscription_id_src = psm.subscription_id_src
      AND psm.is_paying_flag = 'Y'
      AND CAST(psm.movement_datetime AS date) BETWEEN PARSE_DATE('%Y%m%d', @DS_START_DATE) AND PARSE_DATE('%Y%m%d', @DS_END_DATE)
      AND dw_source_system_code = 'THINK'
    WHERE
      psm.subscription_movement_count_type IN ('cancellation')
      AND movement_type_code = 'from'
  ),
  calendar_dim AS (
    SELECT
      cal.week_end_date,
      min(cal.calendar_date) AS week_start_date
    FROM
      `nau-data-nprod-dataservices.reference_data_genome.t_calendar_dim` AS cal
    WHERE
      cal.calendar_date BETWEEN PARSE_DATE('%Y%m%d', @DS_START_DATE) AND PARSE_DATE('%Y%m%d', @DS_END_DATE)
    GROUP BY 1
  ),
  decay_data_txfm1 AS (
    SELECT
      ad.*,
      cd.cancellation_date,
      CASE WHEN cd.cancellation_date IS NOT null THEN 1 ELSE 0 END AS has_cancellation_flag,
      ad.acquisition_date AS subscription_start_date,
      coalesce(cd.cancellation_date, PARSE_DATE('%Y%m%d', @DS_END_DATE)) AS subscription_end_date,
      PARSE_DATE('%Y%m%d', @DS_END_DATE) AS potential_subscription_end_date
    FROM
      acquisition_data AS ad
      LEFT JOIN
      cancellation_data AS cd
      ON CAST(ad.subscription_id_src AS string) = CAST(cd.subscription_id_src AS string)
  ),
  decay_data_txfm2 AS (
    SELECT
      cal.week_end_date AS decay_analysis_date,
      cal.week_start_date,
      cal.week_end_date,
      tx1.subscription_id_src,
      tx1.subscription_movement_count,
      tx1.masthead,
      tx1.rate_plan_code,
      tx1.offer_category_name,
      tx1.sold_in_source_channel,
      tx1.sold_in_channel,
      tx1.sold_in_source_code,
      CASE WHEN tx1.cancellation_date BETWEEN cal.week_start_date AND cal.week_end_date THEN 1 ELSE 0 END AS cancellation_flag,
      CASE WHEN tx1.cancellation_date <= cal.week_end_date THEN 1 ELSE 0 END AS cumulative_cancellation_flag,
      CASE WHEN tx1.acquisition_date BETWEEN cal.week_start_date AND cal.week_end_date THEN 1 ELSE 0 END AS acquisition_flag,
      CASE WHEN tx1.acquisition_date <= cal.week_end_date AND coalesce(tx1.cancellation_date, tx1.potential_subscription_end_date) >= cal.week_start_date THEN 1 ELSE 0 END AS closing_base_flag,
      CASE WHEN tx1.acquisition_date <= cal.week_end_date AND tx1.potential_subscription_end_date >= cal.week_start_date THEN 1 ELSE 0 END AS potential_closing_base_flag,
      row_number() OVER (PARTITION BY tx1.subscription_id_src ORDER BY cal.week_end_date) AS analysis_subscription_tenure_weeks,
      trunc(date_diff(cal.week_end_date, min(cal.week_end_date) OVER (), day) / 7, 0) + 1 AS acquisition_week
    FROM
      decay_data_txfm1 AS tx1
      INNER JOIN
      calendar_dim AS cal
      ON tx1.acquisition_date <= cal.week_end_date
  )","Consolidate the common data preparation logic into a single, shared data source. This could be achieved by creating a dedicated BigQuery view (e.g., `v_newspass_decay_base`) that pre-computes `decay_data_txfm2`. All metrics would then query this single view, significantly reducing query complexity, improving performance, and centralizing maintenance. Alternatively, if Looker Studio's custom query capabilities allow, define this base query once and reference it across all calculated fields.",162,0db8e1f9-6d55-4d0d-a4b7-04f2c1c1f855
sold_in_source_code_category,Hardcoded Logic,The 'Sold In Source Code Category' dimension uses a hardcoded `CASE` statement with `REGEXP_CONTAINS` to classify `sold_in_source_code` values. This approach is prone to errors and requires manual updates every time a new source code needs categorization or an existing category's definition changes. It lacks scalability and can lead to inconsistencies if the same categorization logic is needed elsewhere.,"  CASE
    WHEN SAFE.REGEXP_CONTAINS(sold_in_source_code, '_CSR100') THEN 'NCS'
    WHEN SAFE.REGEXP_CONTAINS(sold_in_source_code, '_EDM') THEN 'EDM'
    WHEN SAFE.REGEXP_CONTAINS(sold_in_source_code, 'Paid_Media') THEN 'Paid Media'
    WHEN SAFE.REGEXP_CONTAINS(sold_in_source_code, 'MYA_') THEN 'My Account'
    WHEN SAFE.REGEXP_CONTAINS(sold_in_source_code, 'WEB_CAM') THEN 'Campaign Page'
    ELSE 'Breach'
  END AS sold_in_source_code_category","Replace the hardcoded `CASE` statement with a join to a governed lookup table (e.g., `dim_sold_in_source_category`) that maps `sold_in_source_code` to its respective category. This centralizes the business logic, makes updates easier, ensures consistency across all reports, and allows for more robust data governance.",162,0db8e1f9-6d55-4d0d-a4b7-04f2c1c1f855
All metrics,Hardcoded Logic,"Every single metric's SQL query includes a hardcoded date filter (`WHERE report_date >= '2023-07-03'`). This severely limits the dashboard's flexibility, preventing dynamic date range selection or historical analysis beyond this fixed start date. It suggests either an incomplete development or a dashboard intended for a very specific, unchanging period.",WHERE report_date >= '2023-07-03',Replace the hardcoded date filter with a dynamic date range parameter or control within Looker Studio. Ensure the underlying data source contains a sufficient historical range to support flexible reporting periods.,163,a62fa89c-fc4d-48d7-83e7-a673894fc85
"meta_subscriptions, linkedin_subscriptions, tradedesk_subscriptions, reddit_subscriptions, microsoft_bing_subscriptions, google_search_subscriptions, google_pmax_subscriptions",Anti-Pattern / Hardcoded Logic,"Multiple subscription metrics rely on `CASE WHEN [column] LIKE '%Value%' THEN ... END` statements to categorize data by `source_system_name` or `campaign_type`. This approach is highly brittle; any new source system/campaign type, or even minor naming variations, will require manual updates to each individual metric. This leads to high maintenance overhead and potential for inconsistencies or incomplete data representation.",SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscription_count ELSE 0 END),"Implement a centralized lookup table for `source_system_name` and `campaign_type` that maps raw values to standardized categories. Join this lookup table to `campaign_performance_fct` in the data model. This centralizes categorization logic, improves data consistency, and simplifies metric creation and maintenance.",163,a62fa89c-fc4d-48d7-83e7-a673894fc85
"derived_masthead_description, derived_masthead_group_description",Anti-Pattern / Hardcoded Logic,"These dimension metrics use hardcoded `CASE` statements to remap specific masthead codes or descriptions (e.g., 'COD'/'CS' to 'Code Sports', 'Content' to 'Body&Soul'). Similar to the source system categorization, this logic is embedded directly in the metric definition, making it difficult to manage and prone to errors if mappings change or new values emerge.",CASE WHEN masthead_group_code = 'COD' OR masthead_code = 'CS' THEN 'Code Sports' ELSE masthead_description END,"Create a dedicated dimension table for masthead codes and descriptions. This table should contain the raw codes/descriptions and their standardized or remapped values. Join this dimension table to the `campaign_performance_fct` to apply the mappings, ensuring a single source of truth for masthead categorization.",163,a62fa89c-fc4d-48d7-83e7-a673894fc85
"subs_last_7_days, cost_last_7_days, impressions_last_7_days, clicks_last_7_days, breaches_last_7_days, subs_last_4_days, cost_last_4_days, impressions_last_4_days, clicks_last_4_days, breaches_last_4_days",Anti-Pattern / Redundancy,"The logic for calculating 'last N days' metrics (`DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= N`) is repeated across multiple metrics for both 4-day and 7-day windows. This creates redundant code, increases the risk of inconsistencies if the logic needs to be updated, and makes the dashboard less flexible for analyzing other rolling periods.","SUM(CASE WHEN DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= 7 THEN subscription_count ELSE 0 END)","Leverage Looker Studio's built-in date range filtering and comparison features for rolling windows, which are more efficient and user-friendly. If custom SQL is required, consider creating a single calculated field for 'days_since_report_date' and then applying filters in Looker Studio, or define these rolling windows as parameterized views/subqueries in the data layer if they are complex and frequently used across multiple dashboards.",163,a62fa89c-fc4d-48d7-83e7-a673894fc85
sum_subscription_ids_by_subscriber_zip,Anti-Pattern,"The metric 'Sum of Subscription IDs by Subscriber Zip' aggregates unique identifiers (`subscription_id_src`) using `SUM()`. This is an unusual and typically meaningless aggregation for IDs, which are usually counted (e.g., `COUNT(DISTINCT id)`) or used for joins. Summing IDs can lead to misinterpretation of data. The use of `SAFE_CAST` to `BIGNUMERIC` suggests that `subscription_id_src` might not always be a clean numeric value, further highlighting the potential for data quality issues or an incorrect aggregation strategy.",SUM(SAFE_CAST(t0.subscription_id_src AS BIGNUMERIC)),"Investigate the precise business requirement for this metric. If the intent is to count unique subscriptions, replace `SUM(SAFE_CAST(...))` with `COUNT(DISTINCT t0.subscription_id_src)`. If the ID truly represents a quantifiable value, ensure its data type is appropriate and the sum is indeed meaningful. Consider renaming the metric to accurately reflect its calculation if it's not a count.",164,a5d7d240-afbf-4f2d-b228-565c10dceb18
sum_subscriber_ids_by_delivery_schedule_group,Anti-Pattern,"Similar to the subscription ID metric, 'Sum of Subscriber IDs by Delivery Schedule Group' aggregates unique subscriber identifiers (`subscriber_id_src`) using `SUM()`. This is an anti-pattern for ID fields, which are typically counted for uniqueness rather than summed. This aggregation is highly likely to be misleading or incorrect from a business perspective. The `SAFE_CAST` to `BIGNUMERIC` also points to potential underlying data type inconsistencies or an attempt to force a numeric sum on non-numeric IDs.",SUM(SAFE_CAST(t0.subscriber_id_src AS BIGNUMERIC)),"As with the subscription ID metric, clarify the business intent. If the goal is to count unique subscribers, change the aggregation to `COUNT(DISTINCT t0.subscriber_id_src)`. If the ID is meant to represent a value, validate its numeric nature and the business meaning of its sum. Rename the metric if the current name implies a count but the calculation is a sum.",164,a5d7d240-afbf-4f2d-b228-565c10dceb18
unique_subscribers_by_detailed_dimensions,Hardcoded Logic,"The `state_from_zip` dimension is derived using a lengthy, hardcoded `CASE` statement based on `subscriber_zip`. This logic is complex, difficult to read, and highly prone to errors (e.g., missing or incorrect zip ranges, overlapping conditions). It is also duplicated exactly in the `unique_subscriptions_by_detailed_dimensions` metric, creating a maintenance burden. Any change to postcode-to-state mapping would require updating multiple SQL queries, increasing the risk of inconsistency. The presence of both '0800' and '800' for NT suggests potential string/numeric conversion issues or redundancy in the logic.","CASE
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2000' AND '2599') THEN 'NSW'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2619' AND '2899') THEN 'NSW'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2921' AND '2999') THEN 'NSW'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2600' AND '2618') THEN 'ACT'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2900' AND '2920') THEN 'ACT'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '3000' AND '3999') THEN 'VIC'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '4000' AND '4999') THEN 'QLD'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '5000' AND '5799') THEN 'SA'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '6000' AND '6797') THEN 'WA'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '7000' AND '7799') THEN 'TAS'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '0800' AND '0899') THEN 'NT'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '800' AND '899') THEN 'NT'
    ELSE 'Other/null'
  END AS state_from_zip","Replace the hardcoded `CASE` statement with a join to a governed, centralized lookup table for postcode-to-state mapping. This table should be maintained by data governance and serve as the single source of truth for geographic derivations. This approach significantly improves maintainability, accuracy, and scalability across all dashboards and reports requiring state information.",164,a5d7d240-afbf-4f2d-b228-565c10dceb18
unique_subscriptions_by_detailed_dimensions,Hardcoded Logic,"This metric duplicates the exact same hardcoded `CASE` statement for `state_from_zip` as seen in `unique_subscribers_by_detailed_dimensions`. This repetition is a clear anti-pattern, increasing the risk of inconsistent data if the logic is updated in one place but not the other, and making maintenance cumbersome.","CASE
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2000' AND '2599') THEN 'NSW'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2619' AND '2899') THEN 'NSW'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2921' AND '2999') THEN 'NSW'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2600' AND '2618') THEN 'ACT'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '2900' AND '2920') THEN 'ACT'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '3000' AND '3999') THEN 'VIC'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '4000' AND '4999') THEN 'QLD'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '5000' AND '5799') THEN 'SA'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '6000' AND '6797') THEN 'WA'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '7000' AND '7799') THEN 'TAS'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '0800' AND '0899') THEN 'NT'
    WHEN (SAFE_CAST(t0.subscriber_zip AS STRING) BETWEEN '800' AND '899') THEN 'NT'
    ELSE 'Other/null'
  END AS state_from_zip",Implement the same recommendation as for `unique_subscribers_by_detailed_dimensions`: utilize a centralized postcode-to-state lookup table. This will ensure consistency and simplify maintenance across all metrics that require this geographic derivation.,164,a5d7d240-afbf-4f2d-b228-565c10dceb18
all_metrics,Anti-Pattern,"All five metrics in this dashboard contain an identical inner subquery that selects distinct subscription records with the same filtering criteria (`subscription_status_code = 'active'`, `is_paying_flag = 'Y'`, `dw_tgt_partition_date = CURRENT_DATE('Australia/Sydney') - 1`, `dw_source_system_code = 'THINK'`, `customer_segment_group = 'B2C'`). This repetition leads to redundant code, increased maintenance effort, and potential for inconsistencies if the base filtering logic needs to change. While the dashboard has a high consolidation score, this indicates a lack of technical consolidation at the data model layer.","SELECT DISTINCT
    subscriber_id_src,
    subscription_id_src,
    masthead,
    hyper_local_brand_name,
    hyper_local_publication_name,
    subscriber_zip,
    classification_level_2,
    delivery_medium_type,
    delivery_schedule_group
  FROM
    `ncau-data-newsquery-prd.prstn_consumer.subscription_base`
  WHERE
    subscription_status_code = 'active'
    AND is_paying_flag = 'Y'
    AND dw_tgt_partition_date = CURRENT_DATE('Australia/Sydney') - 1
    AND dw_source_system_code = 'THINK'
    AND customer_segment_group = 'B2C'","Create a consolidated BigQuery view or a Common Table Expression (CTE) that encapsulates this base filtered dataset. All metrics can then query this single, well-defined source, improving readability, maintainability, and potentially query performance through BigQuery's view optimization. This aligns with best practices for data modeling and reduces technical debt.",164,a5d7d240-afbf-4f2d-b228-565c10dceb18
"expense_ml_1_2, expense_ml_1_2_3, expense_ml_1_2_3_4, expense_ml_1_2_3_4_5, expense_ml_1_2_3_4_5_6, expense_ml_1",Anti-Pattern,"Six out of seven metrics on this dashboard, all related to 'Total Expense' at various 'Margin Levels', employ repetitive `CASE` statements to filter data based on hardcoded `Margin_Level` values. This creates redundant SQL logic, makes future modifications (e.g., adding a new margin level, changing a definition) cumbersome, and increases the risk of inconsistencies across metrics. The use of `SAFE_CAST(t0.Margin_Level AS STRING)` suggests `Margin_Level` might not be a string type, which is handled, but the core issue is the hardcoding of filter values.",SUM(CASE WHEN (SAFE_CAST(t0.Margin_Level AS STRING) = '1' OR SAFE_CAST(t0.Margin_Level AS STRING) = '2') THEN SAFE_CAST(t0.Expense AS BIGNUMERIC) ELSE 0 END),"Refactor these metrics to leverage a more dynamic and consolidated approach. Options include:
1.  **Single Base Metric + Dashboard Filters:** Define a single 'Total Expense' metric and allow users to filter by `Margin_Level` directly on the Looker Studio dashboard.
2.  **Parameter-Driven Queries (if supported):** If specific pre-aggregated views are required, consider using a parameter to dynamically select margin levels within a single query.
3.  **Lookup Table for Margin Level Groups:** If 'Margin Level 1-2' represents a business concept, create a lookup table that maps `Margin_Level` to `Margin_Level_Group` (e.g., 'Low Margin', 'Medium Margin') and join to this table for filtering. This externalizes the business logic.
4.  **SQL View/Materialized View:** Create a BigQuery view that pre-calculates expenses by `Margin_Level`, allowing dashboard metrics to simply sum or filter this view.",165,a2edd9c0-9f0c-45f4-b481-6ed9e4a3f11d
"total_adds_standard_paid_digital_dt_daily, total_cancels_standard_paid_digital_dt_daily, net_adds_cancels_standard_paid_digital_dt_daily, net_adds_cancels_standard_paid_digital_dt_masthead_monthly, net_adds_cancels_standard_paid_digital_dt_masthead_daily_weekly_range",Hardcoded Logic / Anti-Pattern,"All primary consumer activity metrics (Adds, Cancels, Net Adds/Cancels) repeatedly hardcode specific filter values for 'class_lvl_1' ('Standard Paid'), 'delivery_medium' ('Print' exclusion), and 'masthead' ('DT'). This duplication of static logic across multiple metrics makes the dashboard inflexible, difficult to maintain, and prone to errors if these business rules change. It also prevents users from dynamically filtering by these dimensions within the dashboard.",WHERE SAFE_CAST(t0.class_lvl_1 AS STRING) = 'Standard Paid' AND SAFE_CAST(t0.delivery_medium AS STRING) != 'Print' AND SAFE_CAST(t0.masthead AS STRING) = 'DT',"Parameterize these filters within Looker Studio using dashboard controls, allowing users to select different class levels, delivery mediums, or mastheads. Alternatively, if these are fixed business rules for this specific dashboard, consider creating a dedicated, pre-filtered view in BigQuery or defining these as derived fields/dimensions in a LookML model to centralize the logic and improve reusability.",166,5da65dbf-b1cc-467b-85fc-3c82ea5c9f13
"total_adds_standard_paid_digital_dt_daily, total_cancels_standard_paid_digital_dt_daily, net_adds_cancels_standard_paid_digital_dt_daily, net_adds_cancels_standard_paid_digital_dt_masthead_monthly, net_adds_cancels_standard_paid_digital_dt_masthead_daily_weekly_range, c_score_target_publication_group_weekly",Hardcoded Logic / Anti-Pattern,"All metrics in the dashboard use hardcoded specific dates or date ranges (e.g., '2025-03-23', '2025-02-22' to '2025-03-23'). This makes the dashboard static, requiring manual SQL modifications for each reporting period update. It completely negates the dynamic reporting capabilities expected of a dashboard.",SAFE_CAST(t0.report_date AS DATE) = DATE '2025-03-23',"Implement Looker Studio's built-in date range controls and parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to allow users to select their desired reporting period dynamically. For daily/weekly/monthly views, use dynamic date functions like `CURRENT_DATE()`, `DATE_SUB()`, or `DATE_TRUNC()` in conjunction with parameters.",166,5da65dbf-b1cc-467b-85fc-3c82ea5c9f13
earned_amount_paid_news_fy26q1,Hardcoded Logic,"The metric uses extensive hardcoded `NOT IN` lists for `classification_level_1_description` and `classification_level_2_description` to define 'paid subscriptions'. This makes the business logic brittle, difficult to update, and highly prone to errors if new classification values emerge or existing ones change. The `business_rules_sql` sample data, while limited, confirms the existence of various classification types, reinforcing the need for a more robust and dynamic exclusion mechanism.","(
        (CASE WHEN (t0.classification_level_1_description IS NULL) THEN 'null' ELSE SAFE_CAST(t0.classification_level_1_description AS STRING) END NOT IN ('Complimentary', 'Free Staff', 'Free Trials'))
        AND
        (CASE WHEN (t0.classification_level_2_description IS NULL) THEN 'null' ELSE SAFE_CAST(t0.classification_level_2_description AS STRING) END NOT IN ('Brand Registration', 'Business', 'Cafe', 'CAFE', 'Café', 'CLIENT', 'Complimentary', 'DIGITAL', 'Digital Bundle', 'Education', 'Existing Subscribers', 'Free Staff', 'Free to Paid', 'Free Trials', 'Group Activation', 'Home Delivery', 'Library', 'Metered Access', 'Miscellaneous', 'Staff', 'TAB', 'Unknown', 'VIP Access'))
    )","Replace hardcoded `NOT IN` lists with a join to a dedicated lookup table for subscription classification types, or define these exclusions as a managed view/subquery. This would centralize the business rule, improve maintainability, and ensure consistency across all metrics requiring this 'paid' classification.",167,e380f99e-2ef3-40ec-a3ec-bc35491cc0bb
earned_amount_paid_news_fy25q1_estimate,Anti-Pattern (Duplicated Logic),"The complex classification exclusion logic, identical to that found in `earned_amount_paid_news_fy26q1`, is duplicated in this metric. This violates the DRY (Don't Repeat Yourself) principle, increasing the effort required for updates and the risk of inconsistencies if one instance of the logic is updated but another is missed. This pattern will likely repeat for any future 'earned amount' metrics with similar 'paid' definitions.","(
        (CASE WHEN (t0.classification_level_1_description IS NULL) THEN 'null' ELSE SAFE_CAST(t0.classification_level_1_description AS STRING) END NOT IN ('Complimentary', 'Free Staff', 'Free Trials'))
        AND
        (CASE WHEN (t0.classification_level_2_description IS NULL) THEN 'null' ELSE SAFE_CAST(t0.classification_level_2_description AS STRING) END NOT IN ('Brand Registration', 'Business', 'Cafe', 'CAFE', 'Café', 'CLIENT', 'Complimentary', 'DIGITAL', 'Digital Bundle', 'Education', 'Existing Subscribers', 'Free Staff', 'Free to Paid', 'Free Trials', 'Group Activation', 'Home Delivery', 'Library', 'Metered Access', 'Miscellaneous', 'Staff', 'TAB', 'Unknown', 'VIP Access'))
    )","Encapsulate the 'paid subscription' classification logic into a dedicated view or a common base metric (if Looker Studio allows for derived metrics with complex filters). This would allow other metrics to simply reference this consolidated logic, significantly improving reusability, maintainability, and consistency across the dashboard.",167,e380f99e-2ef3-40ec-a3ec-bc35491cc0bb
all_metrics,Hardcoded Logic / Anti-Pattern,"All metrics within this dashboard utilize hardcoded date ranges that are set in the future (specifically, 2025). This practice prevents the dashboard from displaying current or relevant historical performance data, making it effectively useless for its stated purpose of 'Performance' monitoring. For example, 'Distinct Subscription Orders (Acquisition)' is filtered for '2025-01-01' to '2025-04-08', and SMS/Newsletter metrics are similarly hardcoded for future dates. This is a critical anti-pattern for a live operational dashboard.","Example from 'distinct_subscription_orders_acquisition_filtered': WHERE SAFE_CAST(t0c0d1.report_date AS DATE) BETWEEN DATE '2025-01-01' AND DATE '2025-04-08'
Example from 'total_sms_activity_count': WHERE SAFE_CAST(t0c0d1.activity_date AS DATE) BETWEEN DATE '2025-01-01' AND DATE '2025-05-29'","Replace hardcoded future dates with dynamic date parameters or Looker Studio's built-in date range controls. For BigQuery, consider using `CURRENT_DATE()` in conjunction with `DATE_SUB` or `DATE_TRUNC` functions to define rolling date windows (e.g., 'last 30 days', 'current quarter'). This will ensure the dashboard always displays relevant, up-to-date information.",168,3d2c67c3-cd34-4afb-ba2c-1c4dc2cd9e90
distinct_subscription_orders_acquisition_filtered,Data Type Casting,"The `subscription_order_id_src` column is explicitly cast to `STRING` before applying `COUNT(DISTINCT)`. While `SAFE_CAST` is used, if `subscription_order_id_src` is already a string or a type that can be directly distinct-counted without string conversion, this cast might be redundant or indicative of potential mixed data types in the source column. It's an observation, not necessarily an error, but worth noting for optimization or data quality review.",COUNT(DISTINCT SAFE_CAST(t0c0d1.subscription_order_id_src AS STRING)),"Verify the native data type of `subscription_order_id_src` in the source table. If it's already a string or an integer type that can be directly used for `COUNT(DISTINCT)`, the `SAFE_CAST(... AS STRING)` might be removed for slight performance improvement and clarity, assuming no mixed-type issues require it.",168,3d2c67c3-cd34-4afb-ba2c-1c4dc2cd9e90
all_metrics,Hardcoded Logic,"All metrics within the dashboard utilize hardcoded date ranges (e.g., Q1 2024, Q3 2024, Q1 2025). This design choice severely limits the dashboard's flexibility, requiring manual updates for each new reporting period and preventing dynamic analysis. The presence of future-dated metrics (Q1 2025) further emphasizes this static approach.","Example from 'total_subscribers_daily_base_movement_q1': `t0c1d0.report_date >= DATE '2024-01-20' AND t0c1d0.report_date <= DATE '2024-04-13'`
Example from 'distinct_subscribers_added_q3': `SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0c1d0.subscriber_movement_date AS DATETIME), ISOWEEK) AS DATE) >= DATE '2024-03-03' AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0c1d0.subscriber_movement_date AS DATETIME), ISOWEEK) AS DATE) <= DATE '2024-05-15'`","Implement dynamic date range parameters at the dashboard level (e.g., Looker Studio date controls) or utilize relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) within the SQL to define reporting periods. This would allow users to select desired date ranges without requiring SQL modifications.",169,a982df7c-f75a-4f0e-bd2a-da716941d156
all_metrics,Anti-Pattern,"Common business filters (e.g., `member_type = 'subscriber'`, `combined_customer_type` containing 'Consumer', `combined_classification_level_2 != 'Print-only'`, `combined_masthead` containing 'CS') are hardcoded and repeatedly applied across nearly all metrics. This violates the DRY (Don't Repeat Yourself) principle, making maintenance cumbersome and increasing the risk of inconsistencies if business rules or filter values change.","Example from 'total_subscribers_daily_base_movement_q1': `t0c1d0.member_type = 'subscriber' AND STRPOS(t0c1d0.combined_customer_type, 'Consumer') > 0 AND t0c1d0.combined_classification_level_2 != 'Print-only' AND STRPOS(t0c1d0.combined_masthead, 'CS') > 0`
Example from 'distinct_subscribers_added_q3': `SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c1d0.member_type AS STRING), 'subscriber') AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c1d0.combined_customer_type AS STRING), 'Consumer') AND t0c1d0.combined_classification_level_2 != ''`","Centralize common filters. This can be achieved by: 1) Applying filters at the Looker Studio data source or dashboard level, 2) Creating a base view or CTE in BigQuery that pre-filters the data, or 3) Defining these common filters within a semantic layer (e.g., LookML) for reusability across metrics.",169,a982df7c-f75a-4f0e-bd2a-da716941d156
"distinct_subscribers_added_q3, distinct_iso_weeks_with_subscriber_adds_q3",Anti-Pattern,"The SQL for metrics sourced from `subscriber_adds` uses `SAFE.REGEXP_CONTAINS(SAFE_CAST(column AS STRING), 'exact_value')` for exact string matches (e.g., 'subscriber', 'Consumer'). This is less efficient and more complex than a direct equality check (`column = 'value'`). Furthermore, the use of `SAFE_CAST` to STRING suggests potential data type inconsistencies or an overly cautious approach for columns that are likely already strings.","Example from 'distinct_subscribers_added_q3': `SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c1d0.member_type AS STRING), 'subscriber')`","For exact string matches, replace `REGEXP_CONTAINS` with direct equality (`column = 'value'`). Verify column data types to eliminate unnecessary `SAFE_CAST` operations, improving query performance and readability. Reserve `REGEXP_CONTAINS` for actual pattern matching requirements.",169,a982df7c-f75a-4f0e-bd2a-da716941d156
total_volume,Data Mismatch,"Multiple metrics, including 'Total Volume', suffer from a critical data filtering inconsistency. The initial common table expression (CTE) named `OSandFACT` consistently filters the `gl_hierarchy_code` for `FY2025`. However, the outer `WHERE` clause for 'Total Volume' attempts to filter for `fy_year = 2026` and `fy_year_week_number <= 202601`. This means the query is trying to retrieve FY2026 data from a dataset already filtered to FY2025, which will result in an empty or incorrect sum. This pattern is repeated across several other metrics intended for FY2026 data.","FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND os.l04_publication_code <> 'Free News & Lifestyle'
    AND os.l06_publication_code NOT IN ('Food', 'Prestige')
    AND os.gl_hierarchy_code = 'FY2025'
)
SELECT
  SUM(volume) AS total_volume
FROM
  OSandFACT
WHERE
  (fy_year = 2026 AND fy_year_week_number <= 202601)","Align the fiscal year filtering. If the dashboard is intended to show FY2026 data, the `gl_hierarchy_code` filter within the `OSandFACT` CTE should be updated to `FY2026`. Alternatively, if `gl_hierarchy_code` is not the primary fiscal year indicator, ensure the correct fiscal year column is used consistently throughout the query.",170,2104a3f5-9424-4087-a928-e67fecae789a
budget_amount_current_week,Hardcoded Logic,"The calculation for 'current week' in budget-related metrics relies on hardcoded timestamps (`2025-07-22` and `2025-07-02`). This makes the 'current week' logic static and fixed to a specific historical period, rather than dynamically reflecting the actual current fiscal week. This defeats the purpose of a 'current week' metric and requires manual updates to remain relevant.","    (EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-07-22 02:55:42.957221+00', 'Australia/Sydney'))) - 1) AS fixed_date_day_of_week_num,
    DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-07-22 02:55:42.957221+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2025-07-02T00:00:00' AS DATETIME), WEEK) AS fixed_date_weeks_diff_from_ref,","Replace hardcoded dates with dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC(CURRENT_DATE(), WEEK)`) to ensure the 'current week' calculation is always up-to-date. Ideally, the `v_asl_DIM_calendar` table should include a flag or column indicating the current fiscal week, which can then be joined and filtered upon.",170,2104a3f5-9424-4087-a928-e67fecae789a
consolidated_channel_group,Anti-Pattern,"The logic for consolidating sales channels (mapping `os_level_10` to 'Retail', 'Alternative Channels', 'Subscriptions', 'Unspec Channel') is implemented using a complex, nested `CASE WHEN` statement. This exact `CASE WHEN` logic is duplicated across almost all metrics in the dashboard (e.g., `volume_mon_fri_k`, `budget_amount_current_week`, `actual_amount_sat_k`), leading to redundancy, increased maintenance effort, and a higher risk of inconsistencies if the mapping rules change.","  CASE WHEN (CASE WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels' WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations' WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies' WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions' WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets' ELSE 'Unspec Channel' END) IN ('Convenience Stores / Service Stations', 'Newsagencies', 'Supermarkets') THEN 'Retail' ELSE (CASE WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels' WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations' WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies' WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions' WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets' ELSE 'Unspec Channel' END) END) AS consolidated_channel_group","Centralize this channel mapping logic. The best approach would be to create a dedicated dimension table (e.g., `v_asl_DIM_channel_mapping`) that maps `os_level_10` to the `consolidated_channel_group`. This table can then be joined to the fact table. Alternatively, if `os_level_10` is always mapped this way, the `v_asl_FCT_finance_os_aggregated` view itself could be updated to include this derived `consolidated_channel_group` column.",170,2104a3f5-9424-4087-a928-e67fecae789a
volume_mon_fri_k,Anti-Pattern,"The logic for categorizing `day_of_week` into 'M-F', 'SAT', or 'SUN' is implemented using a `CASE WHEN` statement and is repeated across multiple metrics (e.g., `actual_amount_mon_fri_k`, `budget_amount_current_week_mon_fri_k`). This duplication makes the code less efficient, harder to read, and prone to errors if the day grouping rules need to be adjusted.","CASE WHEN (day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN 'M-F' WHEN (day_of_week = 'Sat') THEN 'SAT' WHEN (day_of_week = 'Sun') THEN 'Sun' ELSE NULL END","This mapping should be part of the `v_asl_DIM_calendar` table. Add a column like `day_of_week_group` to the calendar dimension, pre-calculating this value. This would simplify metric SQL and ensure consistency.",170,2104a3f5-9424-4087-a928-e67fecae789a
newsletter_brand_formatted,Hardcoded Logic|Anti-Pattern,"The `newsletter_brand_formatted` metric relies on a lengthy and complex `CASE` statement to standardize newsletter brand names. This hardcoded logic is highly susceptible to errors (e.g., typos, missing new brands), difficult to maintain as brand names evolve, and not scalable. It also contains redundant conditions (e.g., checking for 'Herald Sun' after 'HeraldSun' when the output is the same 'Herald Sun'), indicating potential for simplification or a more robust approach. This pattern is a significant governance risk for data consistency.",SELECT CASE WHEN (t0c0d1.newsletter_brand = 'HeraldSun') THEN 'Herald Sun' WHEN (t0c0d1.newsletter_brand = 'Herald Sun') THEN 'Herald Sun' WHEN (t0c0d1.newsletter_brand = 'DailyTelegraph') THEN 'The Daily Telegraph' WHEN (t0c0d1.newsletter_brand = 'Daily Telegraph') THEN 'The Daily Telegraph' WHEN (t0c0d1.newsletter_brand = 'CourierMail') THEN 'The Courier-Mail' WHEN (t0c0d1.newsletter_brand = 'Couriermail') THEN 'The Courier-Mail' WHEN (t0c0d1.newsletter_brand = 'GeelongAdvertiser') THEN 'Geelong Advertiser' WHEN (t0c0d1.newsletter_brand = 'GoldCoastBulletin') THEN 'Gold Coast Bulletin' WHEN (t0c0d1.newsletter_brand = 'NTNews') THEN 'NT News' WHEN (t0c0d1.newsletter_brand = 'TheChronicle') THEN 'The Chronicle' WHEN (t0c0d1.newsletter_brand = 'TheMercury') THEN 'Mercury' WHEN (t0c0d1.newsletter_brand = 'The Mercury') THEN 'Mercury' WHEN (t0c0d1.newsletter_brand = 'CairnsPost') THEN 'Cairns Post' WHEN (t0c0d1.newsletter_brand = 'TownsvilleBulletin') THEN 'Townsville Bulletin' WHEN (t0c0d1.newsletter_brand = 'TheAustralian') THEN 'The Australian' WHEN (t0c0d1.newsletter_brand = 'TheAdvertiser') THEN 'The Advertiser' WHEN (t0c0d1.newsletter_brand = 'CodeSports') THEN 'CODE Sports' WHEN (t0c0d1.newsletter_brand = 'WeeklyTimesNow') THEN 'The Weekly Times' ELSE t0c0d1.newsletter_brand END AS newsletter_brand_formatted FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0c0d1,"Replace the hardcoded `CASE` statement with a join to a dedicated, governed dimension or lookup table for newsletter brands. This table should contain both the raw `newsletter_brand` values and their standardized `formatted_brand_name` counterparts. This approach centralizes transformation logic, improves data consistency, simplifies maintenance, and enhances scalability for future brand additions or changes. Alternatively, if a lookup table is not immediately feasible, consider a User Defined Function (UDF) for this specific transformation, though a lookup table is generally preferred for data standardization.",171,7b5f16b7-e7eb-4989-97fe-2a2e74100bfe
detailed_redemptions_by_member_and_time,Anti-Pattern,"The SQL logic for deriving `transaction_datetime_second` is overly complex and inefficient. It involves multiple redundant conversions (casting to string, then using Looker Studio's auto-detect, then casting to timestamp, then formatting back to string, then parsing back to datetime, before finally truncating). This indicates either an underlying data type issue with `t0.transaction_date` that is being over-engineered, or a lack of understanding of direct BigQuery date/time functions. This convoluted chain of operations adds unnecessary processing overhead and reduces readability.","DATETIME_TRUNC(
    PARSE_DATETIME('%Y-%m-%dT%H:%M:%S',
      FORMAT_TIMESTAMP('%Y-%m-%dT%H:%M:%S',
        SAFE_CAST(LOOKER_STUDIO.AUTO_DETECT_TO_DATETIME(SAFE_CAST(t0.transaction_date AS STRING)) AS TIMESTAMP)
      )
    ), SECOND
  )","Investigate the actual data type and format of `t0.transaction_date`. If it's already a `TIMESTAMP` or `DATETIME`, simplify to `DATETIME_TRUNC(t0.transaction_date, SECOND)`. If it's a string, use a single, direct `PARSE_DATETIME` or `SAFE_CAST` to convert it to a `DATETIME`/`TIMESTAMP` before truncation. For example, if `t0.transaction_date` is a string like 'YYYY-MM-DD HH:MM:SS', `DATETIME_TRUNC(PARSE_DATETIME('%Y-%m-%d %H:%M:%S', t0.transaction_date), SECOND)` would be much cleaner. Consider defining this as a pre-calculated column in the underlying table or a logical view if frequently used.",172,a934f5eb-3b42-46f4-bd22-815444731247
scenario_dimension,Anti-Pattern,"The SQL logic for the 'Scenario' dimension includes a `LIMIT 100` clause. While this might be intended for previewing distinct values or for performance in specific visualization types, it is an anti-pattern for a comprehensive dimension definition. If the number of distinct scenarios exceeds 100, the dimension will be incomplete, leading to partial or misleading analysis.",SELECT DISTINCT SAFE_CAST(t0.scenario AS STRING) AS scenario FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0 LIMIT 100,"Remove the `LIMIT 100` clause from the `scenario_dimension` SQL to ensure all distinct scenario values are retrieved. If performance is a concern for very large dimension tables, consider optimizing the underlying data source, materializing distinct values, or implementing a more robust sampling strategy if a full list is genuinely not required for the specific use case.",173,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
all_metrics,Anti-Pattern,"The `WHERE` clause containing `SAFE.REGEXP_CONTAINS(t0.publication_code, '^(^[0-9]+$)$')` is repeated identically across all three metrics. While ensuring consistency for reconciliation, this represents a hardcoded filter logic that is duplicated. Furthermore, the regex pattern `^(^[0-9]+$)$` is redundant; the outer grouping is unnecessary, and `^[0-9]+$` would achieve the same result more efficiently and cleanly. Any future change to the definition of a 'numeric publication code' would require updates in multiple metric definitions.","WHERE SAFE.REGEXP_CONTAINS(t0.publication_code, '^(^[0-9]+$)$')","Centralize the filtering logic by defining a dedicated view or a common table expression (CTE) that applies this `publication_code` filter. This would ensure a single source of truth for this data subset. Additionally, simplify the regex pattern to `^[0-9]+$` for improved readability and minor efficiency gains.",174,f353b933-30eb-4853-9976-0d35371db7d7
N/A (applies to all metrics),Hardcoded Logic / Anti-Pattern,"All 27 metrics in the dashboard include identical hardcoded `WHERE` clauses: `WHERE report_date >= '2023-07-03' AND source_system_name NOT IN ('Google Ads', 'Bing Ads', 'Trade Desk')`. This repetition indicates a lack of centralized filtering or parameterization. Any change to the reporting start date or the list of excluded source systems would require manual updates to every single metric, increasing the risk of inconsistencies and maintenance overhead.","WHERE report_date >= '2023-07-03' AND source_system_name NOT IN ('Google Ads', 'Bing Ads', 'Trade Desk')","Implement these common filters at the data source level (e.g., in a BigQuery view or a Looker Studio custom query for the data source) or leverage Looker Studio's built-in date range controls and filter components. For `source_system_name` exclusions, consider defining these in a configuration table or a more robust data model that allows for dynamic exclusion lists.",175,6daaeb09-c31b-423e-a67c-50d8dcea3ba6
"meta_subscriptions, linkedin_subscriptions, tradedesk_subscriptions, reddit_subscriptions, microsoftbing_subscriptions, google_search_subscriptions, google_pmax_subscriptions",Hardcoded Logic / Anti-Pattern,"Multiple subscription metrics (e.g., 'Meta Subscriptions', 'LinkedIn Subscriptions') are created using hardcoded `CASE WHEN` statements to filter by `source_system_name` or `campaign_type` (e.g., `source_system_name LIKE '%Facebook%'`). This approach leads to a proliferation of similar metrics for each specific source/campaign type. It's not scalable; adding a new source system or campaign type requires creating a new calculated field, rather than simply filtering a dimension.",SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscription_count ELSE 0 END),"Instead of creating separate metrics, expose `source_system_name` and `campaign_type` as dimensions in the Looker Studio data source. Users can then filter or group by these dimensions to analyze subscriptions by source/campaign. If specific groupings are needed, define them in a semantic layer or a lookup table joined to the fact table, allowing for more flexible and maintainable categorization.",175,6daaeb09-c31b-423e-a67c-50d8dcea3ba6
"subscriptions_last_7_days, cost_last_7_days, impressions_last_7_days, clicks_last_7_days, breaches_last_7_days, breaches_last_4_days, subscriptions_last_4_days, cost_last_4_days, impressions_last_4_days, clicks_last_4_days",Hardcoded Logic / Anti-Pattern,"Metrics for specific time windows (e.g., 'Last 7 Days', 'Last 4 Days') are hardcoded using `DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= X`. This creates redundant metrics for different fixed periods and limits the dashboard's flexibility. Users cannot easily select arbitrary date ranges or compare custom periods without new metrics being created.","SUM(CASE WHEN DATE_DIFF(CURRENT_DATE(), report_date, DAY) <= 7 THEN subscription_count ELSE 0 END)","Leverage Looker Studio's native date range controls. Define `report_date` as a date dimension and allow users to select custom or relative date ranges (e.g., 'Last 7 days', 'Last 30 days'). If specific fixed periods are absolutely necessary, consider defining them as calculated fields at the data source level using more robust and dynamic date functions that don't rely on `CURRENT_DATE()` for every query, or pre-aggregate these periods in the underlying data model.",175,6daaeb09-c31b-423e-a67c-50d8dcea3ba6
total_unique_ingested_article_type_combinations,Hardcoded Logic,"The SQL logic contains hardcoded date ranges (`2025-06-12` to `2025-06-13`) which directly contradict the dashboard's name '...Performance yesterday'. This makes the dashboard static, irrelevant for daily performance tracking, and will always show data for a specific future period rather than the intended 'yesterday'.","SAFE_CAST(DATETIME_ADD(DATETIME_TRUNC(SAFE_CAST(t0.IngestTime AS DATETIME), SECOND), INTERVAL 11 HOUR) AS DATE) >= DATE '2025-06-12'
    AND SAFE_CAST(DATETIME_ADD(DATETIME_TRUNC(SAFE_CAST(t0.IngestTime AS DATETIME), SECOND), INTERVAL 11 HOUR) AS DATE) <= DATE '2025-06-13'","Replace hardcoded dates with dynamic date parameters (e.g., `CURRENT_DATE() - INTERVAL 1 DAY`) or integrate with Looker Studio's native date range controls to align with the 'yesterday' requirement and ensure the dashboard is always current.",176,9060d6e1-ee05-438a-9bae-b80814a5e065
total_unique_ingested_article_type_combinations,Hardcoded Logic,"The SQL logic filters on a single hardcoded `CollectionID` (`da836743742cbf2daadbbe4a0ca6f530`). This severely limits the reusability and general applicability of the metric, as it only reports for one specific collection, preventing analysis across different collections without modifying the underlying SQL.",t0.CollectionID = 'da836743742cbf2daadbbe4a0ca6f530',"Introduce a dashboard filter or parameter for `CollectionID` to allow users to select different collections, or remove the filter if the metric is intended to be an aggregate across all collections. If a specific collection is always required, consider creating a dedicated metric or view for it.",176,9060d6e1-ee05-438a-9bae-b80814a5e065
total_unique_ingested_article_type_combinations,Anti-Pattern,"The SQL uses separate `LEFT JOIN UNNEST` operations for `RefArticleID` and `RefType` and then concatenates them to count unique combinations. If `RefArticleID` and `RefType` are corresponding elements within arrays (e.g., `RefArticleID[i]` corresponds to `RefType[i]`), this approach will generate a Cartesian product, leading to an inflated and incorrect count of unique pairs. This is a common anti-pattern when dealing with array elements that should be paired.","LEFT JOIN UNNEST(t0.RefArticleID) AS t0_RefArticleID
LEFT JOIN UNNEST(t0.RefType) AS t0_RefType
COUNT(DISTINCT CONCAT(t0_RefArticleID, '-', t0_RefType))","If `RefArticleID` and `RefType` are corresponding elements, use `UNNEST` with `WITH OFFSET` or `WITH ORDINALITY` to join them correctly (e.g., `UNNEST(t0.RefArticleID) WITH OFFSET AS art_id_offset JOIN UNNEST(t0.RefType) WITH OFFSET AS ref_type_offset ON art_id_offset.offset = ref_type_offset.offset`). Alternatively, consider restructuring the underlying data model to store these as a single repeated struct field for better data integrity and query simplicity.",176,9060d6e1-ee05-438a-9bae-b80814a5e065
total_link_clicks_twitter_sport_performance,Anti-Pattern,"Multiple core metrics (e.g., Total Link Clicks, Total Spend, Total Impressions) for specific campaign types (Twitter Sport Performance, Google NWS Performance) embed an identical subquery with a `CASE` statement to derive `Seasonal_Vs_Performance`. This logic is duplicated across at least 6 metrics, making updates inefficient and prone to error. This is a clear violation of the DRY (Don't Repeat Yourself) principle.","(SELECT *, CASE WHEN campaign_name LIKE 'AOD%' THEN 'Performance' ELSE 'Seasonal' END AS Seasonal_Vs_Performance FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct` WHERE report_date >= '2023-07-03' AND masthead_group_code IN ('CON', 'FOD', 'NKB', 'TRV') AND masthead_code != 'CKO')","Centralize the `Seasonal_Vs_Performance` logic. This could be achieved by creating a persistent view in BigQuery that includes this derived column, or by pushing this logic upstream into the `campaign_performance_fct` table if it's a common business attribute. Alternatively, if Looker Studio supports it, define this as a calculated field at the data source level once, and reuse it across all relevant metrics.",177,61eeb098-9394-4e79-a43b-064edb830a79
channel_dimension,Hardcoded Logic,The 'Channel' dimension uses a hardcoded `CASE` statement to categorize source systems and campaign types. This approach is inflexible; adding new channels or modifying existing definitions requires direct SQL changes for this metric and potentially others that rely on similar logic. This makes the dashboard brittle to changes in marketing channel definitions.,CASE WHEN source_system_name LIKE '%Google%' AND campaign_type LIKE '%PERFORMANCE_MAX%' THEN 'Google P-Max' WHEN source_system_name LIKE '%Google%' AND campaign_type LIKE '%SEARCH%' THEN 'Google Search' WHEN source_system_name LIKE '%Google%' AND campaign_type LIKE '%VIDEO%' THEN 'YouTube' ELSE source_system_name END,"Implement a governed lookup table for channel categorization in BigQuery. This table would map `source_system_name` and `campaign_type` to a `channel` dimension, allowing for centralized management and easier updates without modifying dashboard-level SQL. The `campaign_performance_fct` table could then join to this lookup table.",177,61eeb098-9394-4e79-a43b-064edb830a79
brand_dimension,Hardcoded Logic,"The 'Brand' dimension uses a hardcoded `CASE` statement based on `campaign_name` and `masthead_description`. Similar to the channel dimension, this logic is embedded directly in the metric, making it difficult to maintain and scale if brand definitions evolve or new brands are introduced.",CASE WHEN campaign_name LIKE '%TRV%' THEN 'Escape' ELSE masthead_description END,"Create a dedicated brand lookup table or a common dimension in the underlying data model (e.g., a view or a new column in `campaign_performance_fct`). This would centralize brand definitions and improve data governance and consistency.",177,61eeb098-9394-4e79-a43b-064edb830a79
tiktok_clicks_calculated,Anti-Pattern,"Separate calculated fields are created for clicks from each individual source system (e.g., TikTok Clicks, Google Clicks, Apple Clicks, etc.). This is highly inefficient and redundant. If a new source system is added, a new metric must be created. It also prevents easy comparison or aggregation across source systems within a single visualization without manual effort.",SUM(CASE WHEN source_system_name LIKE '%Tiktok%' THEN link_click_count ELSE 0 END),"Instead of creating individual metrics, use `source_system_name` as a dimension and `link_click_count` as a single measure. Users can then filter or group by `source_system_name` to see clicks for specific platforms. If a pivoted view is required, it should be handled at the visualization layer or via a more advanced data model that pivots the data once.",177,61eeb098-9394-4e79-a43b-064edb830a79
fiscal_quarter_year_dimension,Hardcoded Logic,"The fiscal quarter and year calculation is implemented with a complex, hardcoded `CASE` statement directly within the metric. This logic is prone to errors, difficult to modify if the fiscal calendar definition changes (e.g., start month shifts), and is not reusable across other dashboards or reports.","CASE WHEN EXTRACT(MONTH FROM report_date) BETWEEN 7 AND 9 THEN CONCAT('FY ', CAST(EXTRACT(YEAR FROM report_date) + 1 AS STRING), ' Q1') WHEN EXTRACT(MONTH FROM report_date) BETWEEN 10 AND 12 THEN CONCAT('FY ', CAST(EXTRACT(YEAR FROM report_date) + 1 AS STRING), ' Q2') WHEN EXTRACT(MONTH FROM report_date) BETWEEN 1 AND 3 THEN CONCAT('FY ', CAST(EXTRACT(YEAR FROM report_date) AS STRING), ' Q3') WHEN EXTRACT(MONTH FROM report_date) BETWEEN 4 AND 6 THEN CONCAT('FY ', CAST(EXTRACT(YEAR FROM report_date) AS STRING), ' Q4') END","Implement a dedicated date dimension table in BigQuery that includes pre-calculated fiscal year, quarter, and week attributes. This centralizes date logic, improves query performance by pre-computing values, and ensures consistency across all dashboards and reports that rely on fiscal periods.",177,61eeb098-9394-4e79-a43b-064edb830a79
prev_week_clicks,Anti-Pattern,"Calculated fields using window functions (`LAG`) include a `LIMIT 1` clause. This is highly unusual and likely incorrect for a calculated field intended to provide row-level or aggregated week-over-week comparisons. If these are meant to be single-value KPIs, the `LIMIT 1` might be intentional but severely restricts their reusability. If they are meant for row-level analysis, `LIMIT 1` will cause incorrect or incomplete results by only returning a single row.","LAG(link_click_count) OVER (PARTITION BY SAFE_CAST(SUBSTR(fy_year_week_name, 8, 2) AS INT64) ORDER BY SAFE_CAST(SUBSTR(fy_year_week_name, 8, 2) AS INT64)) FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct` WHERE report_date >= '2023-07-03' AND masthead_group_code IN ('CON', 'FOD', 'NKB', 'TRV') AND masthead_code != 'CKO' LIMIT 1","Review the intended use of these metrics. If they are for row-level calculations, remove `LIMIT 1`. If they are for dashboard-level single values, consider if a different aggregation or a dedicated summary query would be more appropriate and explicit. Additionally, for `prev_week_clicks`, replace `SUBSTR` string parsing with proper date/week functions (e.g., `EXTRACT(WEEK FROM fy_first_day_of_week)`) for more robust and maintainable week number extraction.",177,61eeb098-9394-4e79-a43b-064edb830a79
total_acquisition_count,Hardcoded Logic / Anti-Pattern,"All measure metrics on this dashboard (e.g., `total_acquisition_count`, `free_to_paid_conversion_count`, `switch_acquisition_count`, `reactivation_30day_acquisition_count`) duplicate identical, complex `CASE` statements for filtering by 'Subscription Type' and 'Masthead Grouping' directly within their `WHERE` clauses. This redundancy leads to bloated SQL, makes updates cumbersome, and introduces a high risk of inconsistencies if the underlying business logic for these dimensions changes in the future.","WHERE t0.table_nm = 'agg' AND (CASE WHEN (t0.delivery_medium_type IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END) = 'Digital Subscriptions' AND (CASE WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals' WHEN (t0.masthead = 'WT') THEN 'Other Publications' WHEN (t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications' WHEN (t0.masthead IS NULL) THEN 'check' ELSE 'Exclude' END) != 'Exclude'","Refactor these common filtering conditions. The ideal solution is to define these dimensions as derived fields or views within the underlying BigQuery data model, or within a semantic layer (e.g., LookML) if available. This allows measures to simply reference these pre-computed or centrally defined dimensions, promoting reusability and consistency.",178,e5702a4e-27f6-42cc-8cd8-0b5ff84421e4
product_grouping_dimension,Anti-Pattern / Hardcoded Logic / Complexity,"The `product_grouping_dimension` metric exhibits extreme complexity due to deeply nested `CASE` statements that re-evaluate logic already defined in other dimensions (e.g., `classification_level_2_grouping`, `masthead_grouping`). This makes the SQL nearly unreadable, incredibly difficult to debug, and highly prone to errors. Any modification to the logic of its constituent groupings would necessitate complex and error-prone changes within this single, massive metric definition.","SELECT CASE WHEN (CASE WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' WHEN (t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP' WHEN (t0.classification_level_2 = 'Free Staff') THEN 'Staff' WHEN (t0.classification_level_2 = 'IP Access') THEN 'Corporate IP' WHEN (t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education' ELSE NULL END = 'B2B') THEN t0.budfor_product WHEN (CASE WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals' WHEN (t0.masthead = 'WT') THEN 'Other Publications' WHEN (t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications' WHEN (t0.masthead IS NULL) THEN 'check' ELSE 'Exclude' END = 'Deep Niche Publications') THEN (CASE WHEN (t0.masthead = 'AA') THEN 'The Advertiser' WHEN (t0.masthead = 'AP') THEN 'Apple Podcast: Crime X' WHEN (t0.masthead = 'CM') THEN 'Courier Mail' WHEN (t0.masthead = 'CP') THEN 'Cairns Post' WHEN (t0.masthead = 'CS') THEN 'Code' WHEN (t0.masthead = 'DT') THEN 'Daily Telegraph' WHEN (t0.masthead = 'GA') THEN 'Geelong' WHEN (t0.masthead = 'GC') THEN 'Gold Coast' WHEN (t0.masthead = 'HS') THEN 'Herald Sun' WHEN (t0.masthead = 'NT') THEN 'NT News' WHEN (t0.masthead = 'NW') THEN 'News.com.au' WHEN (t0.masthead = 'PU') THEN 'Punters' WHEN (t0.masthead = 'RN') THEN 'Racenet' WHEN (t0.masthead = 'SC') THEN 'Supercoach Plus' WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead = 'TB') THEN 'Townsville' WHEN (t0.masthead = 'TC') THEN 'Toowoomba' WHEN (t0.masthead = 'TM') THEN 'The Mercury' WHEN (t0.masthead = 'TS') THEN 'Taste Online' WHEN (t0.masthead = 'WT') THEN 'Weekly Times' ELSE NULL END) WHEN (t0.dw_billing_system_code = 'WINE') THEN 'Wine Club' WHEN (t0.classification_level_1 = 'Offplatform - Paid') THEN '3rd Party and Other' WHEN (t0.table_nm IN ('budfor_cancel', 'budfor_acq')) THEN t0.budfor_product WHEN (CASE WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' WHEN (t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP' WHEN (t0.classification_level_2 = 'Free Staff') THEN 'Staff' WHEN (t0.classification_level_2 = 'IP Access') THEN 'Corporate IP' WHEN (t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education' ELSE NULL END = 'Consumer') THEN (CASE WHEN (t0.classification_level_2 = 'Essentials') THEN 'Essentials' WHEN (CASE WHEN (t0.delivery_medium_type = 'Not Available') THEN 'Digital' ELSE t0.delivery_medium_type END = 'Digital') THEN 'Digital' ELSE CONCAT(SAFE_CAST(CASE WHEN (t0.delivery_medium_type = 'Not Available') THEN 'Digital' ELSE t0.delivery_medium_type END AS STRING),' ',SAFE_CAST(CASE WHEN (t0.delivery_schedule_group = 'Not Available') THEN 'Only' WHEN (t0.delivery_schedule_group = 'Weekend (2 Days)' OR t0.delivery_schedule_group = 'Weekend (1 Day)') THEN 'Weekend' ELSE '7 Day' END AS STRING)) END) WHEN (CASE WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' WHEN (t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP' WHEN (t0.classification_level_2 = 'Free Staff') THEN 'Staff' WHEN (t0.classification_level_2 = 'IP Access') THEN 'Corporate IP' WHEN (t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education' ELSE NULL END = 'Education') THEN (CASE WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' WHEN (t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP' WHEN (t0.classification_level_2 = 'Free Staff') THEN 'Staff' WHEN (t0.classification_level_2 = 'IP Access') THEN 'Corporate IP' WHEN (t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education' ELSE NULL END) ELSE (CASE WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' WHEN (t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP' WHEN (t0.classification_level_2 = 'Free Staff') THEN 'Staff' WHEN (t0.classification_level_2 = 'IP Access') THEN 'Corporate IP' WHEN (t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education' ELSE NULL END) END AS product_grouping FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0 LIMIT 10","This metric requires significant refactoring. Break down the logic into smaller, manageable, and reusable components. Ideally, these groupings should be pre-calculated and stored as columns in the `acquisitions_cancellations_movements` table or a related lookup table. If not possible, define intermediate derived fields or views for each sub-grouping, allowing `product_grouping_dimension` to reference these simpler components rather than re-calculating them inline.",178,e5702a4e-27f6-42cc-8cd8-0b5ff84421e4
"total_registrations_health_wellness_excl_aus_global, total_registrations_health_incl_aus_global_dowjones",Hardcoded Logic,"Both metrics, despite the dashboard's name '7 DAY', use hardcoded and *different* 7-day date ranges in their SQL logic. This prevents the dashboard from showing current or consistent 7-day data across its metrics, making it static and potentially misleading.","Metric 1: `t0.SubscriptionDateTime >= TIMESTAMP '2025-07-10' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-07-16', INTERVAL 1 DAY)`
Metric 2: `t0.SubscriptionDateTime >= TIMESTAMP '2025-03-31' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-06', INTERVAL 1 DAY)`","Replace hardcoded dates with dynamic date functions (e.g., `CURRENT_TIMESTAMP()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)`) to ensure the dashboard always reflects the most recent 7-day period consistently for all metrics. Implement a dashboard-level date filter if users need to select custom date ranges.",179,89140d65-10c7-4de8-9dfa-f5585b101519
"total_registrations_health_wellness_excl_aus_global, total_registrations_health_incl_aus_global_dowjones",Anti-Pattern,"Metrics rely on hardcoded string literals within `REGEXP_CONTAINS` and direct string comparisons for filtering `categorytopic_path`, `PublicationGroup`, and `ArticleRightsSource`. While functional for a few values, this approach can lead to maintenance issues if categories or publication group names change, or if new values need to be included, requiring direct SQL modification. It also introduces potential for typos and inconsistencies.","Metric 1: `(SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'Health|health|Wellness|wellness') OR t0.ArticleDominantSection1 = 'health') AND t0.PublicationGroup != 'The Australian' AND t0.PublicationGroup != 'Global syndication'`
Metric 2: `(SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.PublicationGroup AS STRING), 'Australian|Global syn') OR t0.ArticleRightsSource = 'Dow Jones') AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'Health|health') OR t0.ArticleDominantSection1 = 'health')`","Consider centralizing category, publication group, and article rights source definitions. If these values are stable and limited, the current approach is acceptable. If they are dynamic or numerous, explore using a lookup table or a more robust categorization mechanism (e.g., a dimension table joined to `t_registration_details_snapshot_summary`) to improve maintainability, data governance, and query readability.",179,89140d65-10c7-4de8-9dfa-f5585b101519
"All metrics (e.g., sum_page_views_may_2025_woolworths_by_brand, sum_page_views_jan_may_2025_total)",Hardcoded Logic,"All five metrics on the dashboard utilize hardcoded date ranges (e.g., '2025-05-01' to '2025-05-31' or '2025-01-01' to '2025-05-25'). This design choice severely limits the reusability and dynamic nature of the dashboard, requiring manual updates to the SQL logic for each new reporting period. This directly impacts the dashboard's scalability and maintainability.",WHERE t0.Month >= DATE '2025-05-01' AND t0.Month <= DATE '2025-05-31',"Implement Looker Studio date range parameters or BigQuery scripting to dynamically adjust date filters based on user selection or current reporting period. Consider using relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) where appropriate to create 'rolling' date windows.",181,56c2d7df-a806-42fd-a626-09f428503c5b
"sum_page_views_may_2025_woolworths_by_brand, sum_print_recipes_may_2025_woolworths_by_brand, count_avg_time_spent_records_may_2025_woolworths_by_brand, sum_avg_time_spent_ratio_may_2025_woolworths_by_brand",Hardcoded Logic,"Four out of five metrics hardcode the `rebranding = 'woolworths'` filter. While the dashboard is named 'Woolworths Rebranding', this hardcoding prevents the dashboard from being easily adapted to analyze other rebranding campaigns or to provide a consolidated view across multiple rebranding efforts. This reduces the flexibility and broader applicability of the dashboard's metrics.",AND t0.rebranding = 'woolworths',"Introduce a Looker Studio filter control for the 'rebranding' dimension or parameterize the SQL query to allow dynamic selection of rebranding campaigns. If 'woolworths' is the primary focus, consider setting it as a default filter in the dashboard rather than hardcoding it in the underlying SQL queries.",181,56c2d7df-a806-42fd-a626-09f428503c5b
agreement_id_src_list,Hardcoded Logic / Anti-Pattern,"The SQL logic for 'Agreement ID Source List' includes a `LIMIT 10` clause. While this might be intended for sampling or preview during development, if used in a production dashboard for a dimension meant to provide a 'list of unique agreement IDs', it will severely restrict the available data. This prevents users from seeing or filtering by the full set of agreement IDs, which contradicts the business description of providing 'a list of unique agreement IDs' for filtering or as a primary key.",LIMIT 10,"Review the intended use of this dimension. If a comprehensive list of agreement IDs is required for filtering or analysis, remove the `LIMIT 10` clause. If it's purely for a sample, ensure this is clearly documented and that the production query for the actual dashboard component does not include this limitation.",182,36c94aef-cf82-466b-9b8f-6a3a6580e059
"engaged_minutes_an_plus_base, total_page_views_base, total_video_views_base, unique_viewers_base, monthly_active_users_base, weekly_active_users_base, total_reach_base",Hardcoded Logic,"All primary engagement metrics include a hardcoded `date > '2024-06-19'` filter. This arbitrarily limits the historical data visible in the dashboard, potentially leading to incomplete trend analysis and requiring manual updates to extend the data window. This filter overrides or conflicts with the dynamic date range parameters (`@DS_START_DATE`, `@DS_END_DATE`).","WHERE date > '2024-06-19' AND territory = 'Global' AND Date BETWEEN PARSE_DATE(""%Y%m%d"", @DS_START_DATE) AND PARSE_DATE(""%Y%m%d"", @DS_END_DATE)","Remove the `date > '2024-06-19'` clause. Rely solely on the Looker Studio date range parameters (`@DS_START_DATE`, `@DS_END_DATE`) for dynamic date filtering, allowing users to select their desired historical period. If a rolling window is intended, implement a more robust dynamic date logic (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)`).",183,c4f27694-e6b3-4064-9231-f6c31b0bb9c1
distinct_content_count,Anti-Pattern / Hardcoded Logic,"The `distinct_content_count` metric contains highly complex SQL, including a `WITH` clause, window functions, and a `CASE` statement that embeds a hardcoded Google Drive URL as a fallback for `thumbnailLink`. This suggests potential data quality issues or a workaround for missing image data, and the hardcoded URL is not scalable, maintainable, or appropriate for production use.","IF(ARRAY_LENGTH(b.contentrelatedthumbnail) > 0, CONCAT(""https://content.api.news/v3/images/bin/"", b.contentrelatedthumbnail[OFFSET(0)]), ""https://drive.google.com/file/d/1_LhO6ELGA1exq99eu78EY2HfT_IF_rUW/view?usp=sharing"") AS thumbnailLink","Investigate the root cause of missing `contentrelatedthumbnail` data. Replace the hardcoded Google Drive URL with a more appropriate default image asset hosted within the application's infrastructure, or handle missing thumbnails gracefully at the presentation layer. Consider simplifying the SQL by materializing complex subqueries into a dedicated view or table if performance or maintainability become issues.",183,c4f27694-e6b3-4064-9231-f6c31b0bb9c1
distinct_content_count,Hardcoded Logic,"The `distinct_content_count` metric explicitly excludes `CAPIDemo` clients using a hardcoded `WHERE` clause. While this might be a valid business rule, embedding such exclusions directly in the SQL makes it less flexible and harder to manage if the list of excluded clients changes or needs to be dynamic.",WHERE t0.licensing_client_name != 'CAPIDemo',"If the list of excluded clients is static and small, this is acceptable. However, for scalability and maintainability, consider managing such exclusions via a configuration table, a Looker Studio parameter, or a more centralized data governance approach if the list is dynamic or grows.",183,c4f27694-e6b3-4064-9231-f6c31b0bb9c1
total_day_target_by_publication_group_chronicle,Hardcoded Logic|Anti-Pattern,"The 'Total Daily Subscription Target (Publication Group, Chronicle)' metric's SQL definition includes a hardcoded filter for `website = 'Chronicle'`. This creates redundancy, as the dashboard's scope is already 'The Chronicle', and makes the metric less reusable for other websites without creating new, almost identical metric definitions. This is a common anti-pattern that hinders maintainability and scalability.","WHERE SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.website AS STRING), 'Chronicle')","Instead of hardcoding the 'Chronicle' filter within the metric's SQL, it is recommended to: 1. Utilize the more generic `base_metric_id` metrics (e.g., `total_day_target_by_publication_group`) if they are available in the Looker Studio data source. 2. Apply a dashboard-level filter or a filter control in Looker Studio to narrow the results to 'Chronicle'. This centralizes the filtering logic, improves metric reusability across different dashboards (e.g., for other websites), and simplifies maintenance.",184,6ee6cea9-d444-437d-96c9-cf93a94aad6b
total_day_target_by_website_chronicle,Hardcoded Logic|Anti-Pattern,"Similar to its counterpart, the 'Total Daily Subscription Target (Website, Chronicle)' metric's SQL definition also includes an identical hardcoded filter for `website = 'Chronicle'`. This duplicates the hardcoded logic found in the other metric, reinforcing the redundancy and maintainability challenges. While appropriate for this specific dashboard's scope, it's an anti-pattern for metric definition reusability.","WHERE SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.website AS STRING), 'Chronicle')","Instead of hardcoding the 'Chronicle' filter within the metric's SQL, it is recommended to: 1. Utilize the more generic `base_metric_id` metrics (e.g., `total_day_target_by_website`) if they are available in the Looker Studio data source. 2. Apply a dashboard-level filter or a filter control in Looker Studio to narrow the results to 'Chronicle'. This centralizes the filtering logic, improves metric reusability across different dashboards (e.g., for other websites), and simplifies maintenance.",184,6ee6cea9-d444-437d-96c9-cf93a94aad6b
overall_table_status_cdm,Hardcoded Logic|Anti-Pattern,"The 'Overall Table Health Status (CDM)' metric uses an extremely complex and extensive CASE statement with hardcoded lists of table names and varying hourly thresholds. This makes the logic difficult to read, maintain, and scale as new tables or rules are introduced. It also leads to repeated logic across different health status metrics.","    WHEN date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") AND
    table_name NOT IN ('actionmaps', 'authorization_divisions', 'campaign_progress', 'campaigns', 'datatables',
      'journey_browser', 'journey_device', 'journey_lastpage', 'journey_sessions', 'routing_divisionviews_all',
      'user_list', 'wrapupcodes', 'conversation_speechtext', 'transcript_analytics', 'transcript_phrases',
      'transcript_words', 'transcripts', 'user_aggregate', 'quality_conversation', 'user_roles', 'bots_analytics',
      'bots_analytics_metrics', 'evaluations_analytics', 'evaluations_analytics_metrics', 'wfm_activitycodes',
      'wfm_bu_agentschedules', 'wfm_bu_agentschedules_shifts', 'wfm_bu_agentschedules_timeoff', 'wfm_business_units',
      'wfm_historical_adherence', 'wfm_historical_adherence_actuals', 'wfm_historical_adherence_dayMetrics',
      'wfm_historical_adherence_exceptionInfo', 'wfm_mgmtunits', 'wfm_mu_adherence') THEN
    CASE
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) <= 3 THEN 'Success'
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) >= 4 THEN ''
      ELSE 'Need a check'
    END
    WHEN date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") AND
    table_name IN ('actionmaps', 'campaign_progress', 'campaigns', 'datatables', 'journey_browser', 'journey_device',
      'journey_lastpage', 'journey_sessions', 'user_list', 'transcript_analytics', 'transcript_phrases', 'transcript_words',
      'transcripts', 'user_aggregate') THEN
    CASE
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) <= 8 THEN 'Success'
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) >= 9 THEN ''
      ELSE 'Need a check'
    END
    -- ... (similar complex WHEN clauses follow)","Refactor this logic by creating a dedicated BigQuery lookup table (e.g., `project.dataset.table_health_rules`) that maps table names or patterns to their specific refresh thresholds and health criteria. Join to this lookup table to dynamically apply rules, significantly improving maintainability and readability.",185,33798d51-b7fb-4d59-84da-e004f442c841
table_refresh_rate,Hardcoded Logic|Anti-Pattern,"The 'Table Refresh Rate' metric defines its lookup data directly within the SQL query using a large `UNION ALL` block. This is effectively a hardcoded lookup table embedded in the metric, making updates cumbersome and prone to errors. The comment 'truncated for brevity, full CTE is very long in original queries' confirms this is a significant issue.","SELECT RefreshRate FROM (
  SELECT ""CDM"" AS Layer, ""actionmaps"" AS TableName, ""cdm_genesys"" AS TableSchema, ""6 hrs"" AS RefreshRate
  UNION ALL SELECT ""CDM"", ""authorization_divisions"", ""cdm_genesys"", ""19:00""
  UNION ALL SELECT ""PRSTN"", ""myaccount_base_01"", ""prstn_customerinteractions"", ""6 hrs""
  -- ... (truncated for brevity, full CTE is very long in original queries)
) WHERE TableName = 'myaccount_base_01' LIMIT 1","Extract this hardcoded lookup into a proper, governed BigQuery table (e.g., `project.dataset.table_refresh_rates`). This centralizes the configuration, allows for easier updates, and promotes reusability across other metrics or dashboards.",185,33798d51-b7fb-4d59-84da-e004f442c841
healthy_tables_bdm_ascend,Anti-Pattern|Repeated Logic,"The SQL logic for `healthy_tables_bdm_ascend` duplicates the entire complex health status calculation from `overall_table_status_bdm_ascend`. This includes the `select_data`, `threshold_file_cnt`, and `final_data` CTEs. Duplication of complex logic increases the risk of inconsistencies if changes are made to one metric but not the other.","SELECT COUNT(1) FROM (
  WITH select_data AS (
    SELECT
      table_name, last_modified_time, total_rows, partition_id,
      CASE WHEN length(partition_id) = 8 THEN PARSE_DATE(""%Y%m%d"", partition_id) WHEN length(partition_id) = 6 THEN PARSE_DATE(""%Y%m"", partition_id) END AS TABLE_PARTITION_DATE,
      avg(total_rows) OVER (PARTITION BY table_name) as avg_total_rows_for_status_check
    FROM (
      SELECT *, CASE WHEN partition_id = max(partition_id) OVER (PARTITION BY table_name ORDER BY last_modified_time DESC, partition_id DESC) THEN partition_id END AS max_partition_id FROM `ncau-data-newsquery-prd.bdm_customerinteractions.INFORMATION_SCHEMA.PARTITIONS` WHERE partition_id NOT IN ('__NULL__')
      UNION ALL
      SELECT *, CASE WHEN partition_id = max(partition_id) OVER (PARTITION BY table_name ORDER BY last_modified_time DESC, partition_id DESC) THEN partition_id END AS max_partition_id FROM `ncau-data-newsquery-prd.ascend_sdm_ncs.INFORMATION_SCHEMA.PARTITIONS` WHERE partition_id NOT IN ('__NULL__')
    ) WHERE partition_id = max_partition_id
  ),
  threshold_file_cnt AS (
    SELECT
      ROW_COUNT,
      avg(ROW_COUNT) OVER (PARTITION BY TABLE) AS avg_table
    FROM select_data
    WHERE table_name IN ('queue', 'userlist', 'division', 'campaign', 'userrole', 'user')
  ),
  final_data AS (
    SELECT
      sd.* EXCEPT(avg_total_rows_for_status_check),
      sd.avg_total_rows_for_status_check,
      CASE WHEN sd.table_name IN ('queue', 'userlist', 'division', 'campaign', 'userrole', 'user') THEN IF((sd.total_rows > (tfc.avg_table + (0.1 * tfc.avg_table))) OR (sd.total_rows < (tfc.avg_table - (0.1 * tfc.avg_table))), 'N', 'Y') ELSE null END AS row_check,
      CASE WHEN date(datetime(sd.last_modified_time, ""Australia/Sydney"")) > `current_date`(""Australia/Sydney"") - 2 THEN 'Y' ELSE 'N' END AS MOD_DATE_CHECK,
      CASE WHEN length(sd.partition_id) = 8 AND PARSE_DATE(""%Y%m%d"", sd.partition_id) > `current_date`(""Australia/Sydney"") - 2 THEN 'Y' ELSE 'N' END AS PARTITION_DATE_CHECK
    FROM select_data sd
    LEFT JOIN threshold_file_cnt tfc ON sd.total_rows = tfc.ROW_COUNT
  )
  SELECT
    CASE
      WHEN row_check IS NOT null AND row_check = 'N' THEN 'Need a check'
      WHEN table_name IN ('userrole') AND (PARTITION_DATE_CHECK = 'N' OR MOD_DATE_CHECK = 'N') THEN ' '
      WHEN date(datetime(last_modified_time, ""Australia/Sydney"")) > `current_date`(""Australia/Sydney"") - 2 AND
      length(partition_id) = 8 AND TABLE_PARTITION_DATE > `current_date`(""Australia/Sydney"") - 2 AND total_rows <= avg_total_rows_for_status_check THEN 'Success'
      ELSE 'Need a check'
    END AS OVERALL_STATUS
  FROM final_data
  WHERE table_name IN ('conversation_survey_metrics', 'flow', 'event_session', 'message_detail', 'queue', 'conversation_evaluations_metrics', 'user_list', 'conversation', 'campaign_contact_metrics', 'division', 'campaign', 'event_workflow_management_metrics', 'event_workflow_management_log', 'event_transaction_history', 'userrole', 'user')
) WHERE OVERALL_STATUS IN ('Success', ' ', '', 'Running Late', 'Running Unexpected')","Centralize the table health status calculation into a single, reusable view or UDF. Both the individual status metrics and the count metrics (`healthy_tables_*`) should then query this centralized source, ensuring consistency and reducing maintenance overhead.",185,33798d51-b7fb-4d59-84da-e004f442c841
overall_table_status_bdm_ascend,Anti-Pattern|Data Mismatch,"The `row_check` logic within the `overall_table_status_bdm_ascend` metric (and subsequently `healthy_tables_bdm_ascend`) uses a `LEFT JOIN threshold_file_cnt tfc ON sd.total_rows = tfc.ROW_COUNT`. This join condition is highly suspect. `tfc.ROW_COUNT` is the `total_rows` from a *filtered subset* of tables. Joining on `sd.total_rows = tfc.ROW_COUNT` implies that the current table's row count must exactly match a row count from one of the thresholded tables, which is unlikely to be the intended way to compare a table's row count against an *average* for its type or group. This could lead to incorrect `row_check` values.","    FROM select_data sd
    LEFT JOIN threshold_file_cnt tfc ON sd.total_rows = tfc.ROW_COUNT","Review and correct the `row_check` logic. If `threshold_file_cnt` is meant to provide an average for a specific `table_name` or group, the join condition should likely be on `table_name` or the average should be calculated directly within the `final_data` CTE for each table.",185,33798d51-b7fb-4d59-84da-e004f442c841
revenue_gross_by_advertiser_independent_agencies_nsw,Hardcoded Logic,The 'Revenue Gross' metric hardcodes specific `PortfolioParentGroup` ('INDEPENDENT AGENCIES NSW') and `TransactionType` ('Guaranteed') values directly into the SQL WHERE clause. This limits the reusability of this metric for other portfolio groups or transaction types and requires manual SQL modification for any changes.,"WHERE
  t0.PortfolioParentGroup IN ('INDEPENDENT AGENCIES NSW')
  AND (t0.TransactionType NOT IN ('Guaranteed') OR t0.TransactionType IS NULL)",Parameterize these filters in Looker Studio or define them as derived fields/views in BigQuery to allow for dynamic selection by users or reuse across different dashboard contexts. Consider a lookup table for `TransactionType` if more complex logic is needed.,186,6f1c8731-02da-464f-b146-bf2947860735
advertiser_independent_agencies_nsw,Hardcoded Logic,"Similar to the 'Revenue Gross' metric, the 'Advertiser' dimension also hardcodes specific `PortfolioParentGroup` ('INDEPENDENT AGENCIES NSW') and `TransactionType` ('Guaranteed') values. This creates redundancy and maintenance burden if these filter criteria need to change across multiple related metrics.","WHERE
  t0.PortfolioParentGroup IN ('INDEPENDENT AGENCIES NSW')
  AND (t0.TransactionType NOT IN ('Guaranteed') OR t0.TransactionType IS NULL)",Consolidate filter logic into a shared view or a parameterized data source in Looker Studio. This promotes reusability and ensures consistency across related metrics.,186,6f1c8731-02da-464f-b146-bf2947860735
buyer_fy2025_q4_specific_portfolio_child_groups,Hardcoded Logic / Anti-Pattern,The 'Buyer' metric hardcodes both a specific financial period ('FY2025 - Q4') and a list of `PortfolioChildGroup` values. This makes the metric highly specific and non-reusable for other periods or child groups. The explicit list of child groups is a strong indicator for a lookup table or a more dynamic filtering mechanism.,"WHERE
  CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4')
  AND t0.PortfolioChildGroup IN ('QLD IA C2', 'QLD IA C1', 'NSW CON B5', 'NSW CON B4', 'NSW CON B3', 'NSW CON B1')","For `Financial Period`, utilize Looker Studio's native date range controls or a derived dimension that allows dynamic selection. For `PortfolioChildGroup`, create a dedicated lookup table or a BigQuery view that maps these groups to a higher-level category, allowing for more flexible filtering and reducing hardcoding. This would significantly improve the metric's reusability.",186,6f1c8731-02da-464f-b146-bf2947860735
revenue_gross_by_advertiser_independent_agencies_nsw,Anti-Pattern,"Several metrics, including 'Revenue Gross', 'Advertiser', and 'Buyer', use a `LIMIT 2000001` clause. While this might be a Looker Studio default for some data sources, it can indicate an attempt to pull a very large number of rows into the dashboard for aggregation, which might be inefficient if the aggregation could be done at the database level with more specific filtering.",LIMIT 2000001;,"Review if such a large limit is truly necessary. If the intent is to aggregate, ensure aggregations are pushed down to BigQuery as much as possible to optimize query performance and reduce data transfer. If it's for displaying a large list, consider if a smaller, more relevant subset would suffice or if pagination/sampling is appropriate for the visualization.",186,6f1c8731-02da-464f-b146-bf2947860735
total_subscriber_movements_by_mosaic_group_filtered_tm_digital_paying,Hardcoded Logic|Anti-Pattern|Data Mismatch,"The metric uses a complex, hardcoded `CASE` statement to map `subscriber_mosaic_title` values to `subscriber_mosaic_group` categories. The `business_rules_sql` sample data shows `subscriber_mosaic_group` values ('High Society', 'Solo Budgets') that are not explicitly defined as output categories in the `CASE` statement's `WHEN` clauses. This indicates the logic is incomplete or out of sync with actual business rules, leading to potential miscategorization or reliance on the `ELSE` clause for undefined groups.","CASE
        WHEN (t0.subscriber_mosaic_title = 'First Class Life' OR t0.subscriber_mosaic_title = 'Secure Tranquility' OR t0.subscriber_mosaic_title = 'Family Fringes') THEN 'Older affluents'
        WHEN (t0.subscriber_mosaic_title = 'Striving for Status' OR t0.subscriber_mosaic_title = 'Establishing Roots' OR t0.subscriber_mosaic_title = 'Growing Independence') THEN 'Young professionals'
        WHEN (t0.subscriber_mosaic_title = 'Traditional Pursuits' OR t0.subscriber_mosaic_title = 'Mature Freedom' OR t0.subscriber_mosaic_title = 'Rural Commitment' OR t0.subscriber_mosaic_title = 'Comfortable Foundations' OR t0.subscriber_mosaic_title = 'Flourishing Families' OR t0.subscriber_mosaic_title = 'Millennial Movers' OR t0.subscriber_mosaic_title = 'Green & Gold' OR t0.subscriber_mosaic_title = 'Land of Plenty') THEN 'Growing Families'
        WHEN (t0.subscriber_mosaic_title = 'Hardship & Perseverance' OR t0.subscriber_mosaic_title = 'Middle Blue-collars' OR t0.subscriber_mosaic_title = 'True Grit' OR t0.subscriber_mosaic_title = 'Graceful Ageing') THEN 'Low income households'
        ELSE t0.subscriber_mosaic_title
    END AS subscriber_mosaic_group","Replace the hardcoded `CASE` statement with a join to a governed lookup table (e.g., `dim_subscriber_mosaic_groups`) that centrally maps `subscriber_mosaic_title` to `subscriber_mosaic_group`. This will ensure consistency, improve maintainability, and allow for easier updates to business rules.",187,ca71779e-655c-4fda-0000-c32970fc283a
total_subscriber_count_filtered_cm_consumer_digital,Hardcoded Logic|Anti-Pattern,"The metric's SQL hardcodes specific filters for `combined_customer_type` ('Consumer') and `combined_masthead` ('CM'). While valid for this specific metric, this pattern limits reusability and flexibility. The `structure_sql` shows 7 unique customer types and 10282 unique mastheads, indicating a broader data landscape that could benefit from more dynamic filtering.","AND STRPOS(t0.combined_customer_type, 'Consumer') > 0
    AND STRPOS(t0.combined_masthead, 'CM') > 0","Consider externalizing these filters as dashboard parameters or Looker Studio controls to allow users to dynamically select different mastheads or customer types. If these are fixed business rules, consider creating a dedicated view that encapsulates these filters for better governance and reusability. For exact matches, `t0.combined_customer_type = 'Consumer'` would be more precise than `STRPOS`.",187,ca71779e-655c-4fda-0000-c32970fc283a
active_daily_subscriber_count_28_days_filtered_cm_consumer_digital,Hardcoded Logic|Anti-Pattern,"Similar to the 'Total Subscriber Count' metric, this metric also hardcodes specific filters for `combined_customer_type` ('Consumer') and `combined_masthead` ('CM'). This approach restricts the metric's applicability to other mastheads or customer segments without SQL modification.","AND STRPOS(t0.combined_customer_type, 'Consumer') > 0
    AND STRPOS(t0.combined_masthead, 'CM') > 0",Implement dashboard parameters or controls for `combined_customer_type` and `combined_masthead` to enable dynamic filtering. This promotes reusability and allows for a more flexible analysis of subscriber data across different segments.,187,ca71779e-655c-4fda-0000-c32970fc283a
daily_website_target_filtered_courier_mail,Hardcoded Logic,"The metric hardcodes the `website = 'Courier Mail'` filter directly in the SQL. This limits the dashboard's ability to display targets for other websites without modifying the underlying query, reducing its scalability and reusability.",AND t0.website = 'Courier Mail',"If future requirements include displaying targets for multiple websites, consider making the `website` a dashboard parameter or control. This would allow users to select different websites dynamically, making the dashboard more versatile.",187,ca71779e-655c-4fda-0000-c32970fc283a
N/A (applies to multiple metrics),Anti-Pattern,"A complex and identical `WHERE` clause is hardcoded and repeated across almost all metrics sourced from the `campaign_performance_fct` table. This indicates a lack of a centralized data model or view for the 'Metro Report' context, leading to redundant code and potential for inconsistencies if the filtering logic needs to change.","WHERE (masthead_code IN ('HS', 'DT', 'AA', 'CM', 'QUEST', 'MESSENGER', 'NEWSLOCAL', 'LEADER') OR (campaign_name LIKE '%MET%' OR adgroup_name LIKE '%LOC%')) AND campaign_name LIKE 'AOD%' AND report_date >= '2024-07-01'","Create a dedicated BigQuery view (e.g., `metro_campaign_performance_base`) that pre-applies this common filtering logic. All metrics for this dashboard should then query this view, simplifying their SQL and centralizing the filtering rule.",188,7a21f833-eb54-4580-b152-669a9cc02dd9
campaign_adgroup_category_dim,Hardcoded Logic,"The `Campaign/Adgroup Category` dimension uses an extensive `CASE` statement to categorize campaigns and adgroups based on string matching. This approach is highly brittle, difficult to maintain, and does not scale well as new campaigns or categorization rules emerge. It also risks miscategorization if naming conventions change slightly.",CASE WHEN(campaign_name LIKE '%Professional Women%') OR adgroup_name LIKE '%ProfessionalWomen%' OR adgroup_name LIKE '%Professional Women%' THEN 'Professional Women' ... ELSE 'Other' END AS Category,"Implement a `dim_campaign_category` lookup table in BigQuery. This table should contain mappings from raw `campaign_name` or `adgroup_name` patterns to standardized categories. The SQL logic should then perform a `LEFT JOIN` to this dimension table, making categorization dynamic and maintainable.",188,7a21f833-eb54-4580-b152-669a9cc02dd9
channel_category_performance_dim,Hardcoded Logic,"Channel categorization for performance data relies on hardcoded `CASE` statements checking `source_system_name` and `campaign_type`. Similar to campaign categories, this is prone to errors, difficult to update, and lacks a single source of truth for channel definitions.",CASE WHEN source_system_name LIKE '%Facebook%' THEN 'Meta' WHEN campaign_type NOT LIKE '%PERFORMANCE_MAX%' AND source_system_name LIKE '%Google%' THEN 'Google Search' ... ELSE 'Other' END AS Category1,Create a `dim_channel` lookup table that maps `source_system_name` and `campaign_type` (or a combination thereof) to standardized channel categories. This table can then be joined to the `campaign_performance_fct` table. This also allows for consistent channel definitions across different data sources if applicable.,188,7a21f833-eb54-4580-b152-669a9cc02dd9
masthead_code_dim,Hardcoded Logic,Masthead codes and descriptions are derived using hardcoded `CASE` statements based on `campaign_name` patterns. This duplicates logic that should ideally reside in a master data management system or a dedicated dimension table for mastheads.,CASE WHEN campaign_name LIKE '%DTUF%' OR campaign_name LIKE '%DTLF%' OR campaign_name LIKE '%DT-LF%' THEN 'DT' ... ELSE masthead_code END AS masthead_code,"Establish a `dim_masthead` table that contains `masthead_code`, `masthead_description`, and potentially `region_description`. This table should be the single source of truth for masthead information, and the fact tables should join to it based on a masthead identifier.",188,7a21f833-eb54-4580-b152-669a9cc02dd9
fy_week_of_year_conversion_dim,Anti-Pattern,"Complex fiscal date calculations (week, year-week, year-month) are embedded directly within the SQL logic of multiple dimension metrics. This is a common anti-pattern; date logic should be centralized and pre-calculated.","WITH base_data AS (SELECT report_date, account_name, subscriptions, site, campaign_type, CASE WHEN EXTRACT(MONTH FROM report_date) >= 7 THEN DATE(EXTRACT(YEAR FROM report_date), 7, 1) ELSE DATE(EXTRACT(YEAR FROM report_date) - 1, 7, 1) END AS fiscal_year_start FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_conversion_fct` WHERE account_name IN ('The Advertiser', 'Daily Telegraph', 'Courier Mail', 'Herald Sun')) SELECT DISTINCT FLOOR(DATE_DIFF(report_date, fiscal_year_start, DAY) / 7) + 1 AS fy_week_of_year FROM base_data","Create a comprehensive `dim_date` table that pre-calculates all necessary date attributes, including fiscal year, quarter, week, and month. Fact tables can then join to this `dim_date` table on the `report_date` column, simplifying metric definitions and ensuring consistent date logic across the entire data model.",188,7a21f833-eb54-4580-b152-669a9cc02dd9
report_date_dim,Functional Error,"Several dimension queries, such as `report_date_dim`, `fy_week_of_year_dim`, `campaign_adgroup_category_dim`, `channel_category_performance_dim`, `fiscal_quarter_year_dim`, `masthead_code_dim`, `masthead_description_dim`, `region_description_dim`, `fy_week_of_year_conversion_dim`, `fy_year_week_conversion_dim`, `fy_year_month_conversion_dim`, and `channel_category_conversion_dim`, include a `LIMIT 10` clause. This will severely restrict the number of distinct values returned for these dimensions, making them unusable for comprehensive filtering or grouping in a dashboard.",LIMIT 10,Remove the `LIMIT 10` clause from all dimension queries. Dimensions should return all distinct values to allow for complete data exploration and filtering within the dashboard.,188,7a21f833-eb54-4580-b152-669a9cc02dd9
"current_fy_lgr, previous_fy_lgr, sum_financial_month_numbers",Anti-Pattern|Hardcoded Logic,"The `CASE` statement used to categorize `SPORT_CUSTOMER_FL` into 'Sports Industry' or 'Sports Category' is repeated verbatim across three different measure metrics. While a `sports_customer_type_dim` exists to define this logic as a dimension, the measures themselves hardcode the *result* of this categorization ('Sports Industry') directly in their `WHERE` clauses. This creates redundancy, increases maintenance effort, and makes it difficult to change the definition of 'Sports Industry' consistently across the dashboard.","(CASE WHEN STARTS_WITH(t0.SPORT_CUSTOMER_FL, 'Y') THEN 'Sports Industry' WHEN STARTS_WITH(t0.SPORT_CUSTOMER_FL, 'N') THEN 'Sports Category' ELSE t0.SPORT_CUSTOMER_FL END) = 'Sports Industry'","Define the `sports_customer_type` as a calculated field (dimension) once at the Looker Studio data source level. Then, for the measures, filter directly on this defined dimension (e.g., `WHERE sports_customer_type = 'Sports Industry'`). Ideally, this categorization logic should be pushed upstream into the `adsales_sports_revenue` table as a derived column for better data governance and performance.",189,762b4ea1-2978-4ce6-8308-6eff1fc3422f
sales_region_dim,Hardcoded Logic|Anti-Pattern,"The `sales_region_dim` uses a highly complex and extensive `CASE` statement with numerous hardcoded `sales_segment_l_2_name_sync` values to derive sales regions. This approach is brittle, difficult to read, and prone to errors if segment names change or new regions are introduced. The inconsistent spacing in the output strings (e.g., ' NSW', ' QLD', ' Regionals') also indicates a lack of standardization.","SELECT DISTINCT CASE WHEN (t0.sales_segment_l_2_name_sync IN ('Consortium NSW', 'Direct NSW', 'Independent Agencies NSW')) THEN ' NSW' WHEN (t0.sales_segment_l_2_name_sync IN ('Consortium QLD', 'Direct QLD', 'Independent Agencies QLD')) THEN '   QLD' WHEN (t0.sales_segment_l_2_name_sync IN ('Darwin', 'Geelong', 'Gold Coast', 'Hobart', 'The Weekly Times', 'Townsville')) THEN '     Regionals' WHEN (t0.sales_segment_l_2_name_sync IN ('Consortium SA', 'Direct SA', 'Independent Agencies SA')) THEN '    SA' WHEN (t0.sales_segment_l_2_name_sync IN ('Consortium VIC', 'Consortium WA', 'Direct VIC', 'Independent Agencies VIC')) THEN '  VIC' ELSE '      Other' END AS sales_region FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_sports_revenue` AS t0 WHERE t0.unified_publication_name = 'CODE'","Implement a lookup table (either in the database or as a separate data source if feasible) that maps `sales_segment_l_2_name_sync` to `sales_region`. This lookup table should be joined to the `adsales_sports_revenue` table in the Looker Studio data source or, preferably, the `sales_region` should be pre-calculated and stored as a column in the `adsales_sports_revenue` table. Ensure consistent formatting for region names (e.g., no leading/trailing spaces).",189,762b4ea1-2978-4ce6-8308-6eff1fc3422f
"q1_records_afl_ctr, q1_total_records, current_fy_lgr, previous_fy_lgr, financial_short_month_dim",Hardcoded Logic,"Several metrics contain hardcoded filters (e.g., `financial_quarter = 1`, `relative_FY_year_Offset = 0`, `advertiser_parent = 'AUSTRALIAN FOOTBALL LEAGUE'`, `revenue_type = 'Digital'`). While specific metrics might require fixed filters, a proliferation of such hardcoded values can limit dashboard flexibility and reusability. It suggests that these filters are not exposed as interactive controls for users.",WHERE SAFE_CAST(t0.financial_quarter AS INT64) = 1,"Evaluate if these hardcoded filters should be exposed as dashboard controls (e.g., filter dropdowns, date range selectors) to allow users more flexibility. For time-based filters like `relative_FY_year_Offset`, consider using Looker Studio's built-in date range controls or a more robust date dimension table for dynamic fiscal year calculations.",189,762b4ea1-2978-4ce6-8308-6eff1fc3422f
dimension_revenue_group_level_2_industry_pillar,Hardcoded Logic,"This dimension uses an extensive `CASE` statement with `STRPOS` to categorize revenue groups into industry pillars. This logic is hardcoded directly into the metric definition and is duplicated in the `dimension_dynamic_adtype_or_industry_group` metric. This approach is brittle, difficult to maintain, and prone to errors if source `revenue_group_level_2_name` values change or new categories are introduced.","SELECT CASE WHEN (STRPOS(t0.revenue_group_level_2_name, 'Amusements') > 0 OR STRPOS(t0.revenue_group_level_2_name, 'Amusement') > 0) THEN 'Amusement' ... ELSE SAFE_CAST(t0.revenue_group_level_2_name AS STRING) END AS revenue_group_level_2_industry_pillar FROM `ncau-data-newsquery-prd.asl_finance_derived_archive.adsales_performance_archive_FY25_T` AS t0","Refactor this categorization logic into a dedicated lookup table in the underlying data model. This table would map `revenue_group_level_2_name` to `industry_pillar`, centralizing the logic, improving maintainability, and enabling easier updates without modifying dashboard metrics.",190,f63bfd08-fe1d-464a-a78c-a7f7fbaca71c
dimension_product_group_ranking,Hardcoded Logic,This dimension assigns numerical rankings to product groups using a hardcoded `CASE` statement. This exact ranking logic is also duplicated in the `product_group_ranking_count_q6` and `product_group_ranking_sum_q6` metrics. Hardcoding rankings across multiple metrics creates a maintenance burden and risks inconsistency if the ranking scheme needs to change.,SELECT CASE WHEN t0.product_group = 'The Australian & Prestige' THEN 9 WHEN t0.product_group = 'State & Communities' THEN 8 WHEN t0.product_group = 'Free News & Lifestyle' THEN 7 WHEN t0.product_group = 'Client' THEN 6 WHEN t0.product_group = 'Commercial Content' THEN 5 WHEN t0.product_group = 'Group Functions' THEN 4 WHEN t0.product_group = 'Others' THEN 3 WHEN t0.product_group = 'Unknown' THEN 2 ELSE 1 END AS product_group_ranking FROM `ncau-data-newsquery-prd.asl_finance_derived_archive.adsales_performance_archive_FY25_T` AS t0,"Define product group rankings in a lookup table within the data model or as a derived column in the base table. This centralizes the ranking logic, ensures consistency, and simplifies future updates.",190,f63bfd08-fe1d-464a-a78c-a7f7fbaca71c
dimension_dynamic_adtype_or_industry_group,Anti-Pattern / Over-engineering / Hardcoded Logic,"This metric is an extremely complex and brittle `CASE` statement designed for dynamic grouping. It hardcodes a parameter value ('1' in the SQL snippet) and contains duplicated logic, including the entire `revenue_group_level_2_industry_pillar` categorization and another complex `CASE` for `fin_adtype_name`. This approach is highly unmaintainable, difficult to debug, and violates the DRY (Don't Repeat Yourself) principle. The hardcoded parameter value also suggests a potential issue with how Looker Studio parameters are being passed or interpreted.","SELECT CASE WHEN ('1' = '0') THEN t0.product_group WHEN ('1' = '1') THEN t0.nca_industry_pillar WHEN ('1' = '2') THEN (CASE WHEN (STRPOS(t0.fin_adtype_name, 'CONTENT INTEGRATION') > 0) THEN 'CONTENT INTEGRATION' ... ELSE '     OTHER' END) WHEN ('1' = '3') THEN t0.adtype_l1 WHEN ('1' = '4') THEN t0.adtype_l2 WHEN ('1' = '5') THEN t0.fin_adtype_name WHEN ('1' = '6') THEN (CASE WHEN (STRPOS(t0.revenue_group_level_2_name, 'Amusements') > 0 ... ELSE SAFE_CAST(t0.revenue_group_level_2_name AS STRING) END) ELSE NULL END AS dynamic_adtype_or_industry_group FROM `ncau-data-newsquery-prd.asl_finance_derived_archive.adsales_performance_archive_FY25_T` AS t0","Refactor this into a more modular and maintainable design. Instead of one massive `CASE` statement, create separate, well-defined dimensions for each grouping type (e.g., `adtype_l1_group`, `industry_pillar_group`). If dynamic switching is essential, leverage Looker Studio's parameter capabilities to dynamically select which pre-defined dimension is displayed, rather than embedding all logic within a single, complex calculated field. All internal categorization logic (e.g., for `fin_adtype_name`) should be moved to lookup tables.",190,f63bfd08-fe1d-464a-a78c-a7f7fbaca71c
month_number_sum_q3,Anti-Pattern / Unclear Business Utility,"This metric sums numerical representations of financial months (e.g., July=1, August=2). The business description explicitly states its utility is 'unclear.' Summing arbitrary numerical assignments from a `CASE` statement rarely provides meaningful business insight and suggests this metric may be misconfigured or serve no practical purpose for reporting.",SELECT SUM(CASE WHEN t0.financial_short_month = 'Jul' THEN 1 WHEN t0.financial_short_month = 'Aug' THEN 2 ... ELSE NULL END) AS month_number_sum_q3 FROM `ncau-data-newsquery-prd.asl_finance_derived_archive.adsales_performance_archive_FY25_T` AS t0,"Review the business requirement for this metric with stakeholders. If no clear business utility can be identified, it should be removed from the dashboard to reduce clutter and query complexity. If a specific analytical purpose exists, refactor it to provide a more meaningful aggregation.",190,f63bfd08-fe1d-464a-a78c-a7f7fbaca71c
product_group_ranking_sum_q6,Anti-Pattern / Unclear Business Utility,"Similar to `month_number_sum_q3`, this metric sums numerical rankings assigned to product groups. Its business utility is also explicitly stated as 'unclear.' Summing these arbitrary rankings is unlikely to yield actionable business insights and indicates a potential misconfiguration or lack of clear purpose.",SELECT SUM(CASE WHEN t0.product_group = 'The Australian & Prestige' THEN 9 WHEN t0.product_group = 'State & Communities' THEN 8 ... ELSE 1 END) AS product_group_ranking_sum_q6 FROM `ncau-data-newsquery-prd.asl_finance_derived_archive.adsales_performance_archive_FY25_T` AS t0,"As with `month_number_sum_q3`, engage with business users to determine the actual need for this metric. If no valid use case is found, it should be removed. If a specific analytical purpose exists, consider alternative aggregations or a different representation of the ranking data.",190,f63bfd08-fe1d-464a-a78c-a7f7fbaca71c
"total_post_interactions_by_group_account, total_posts_by_group_account, unique_posts_count, weekend_subscription_target_dt",Hardcoded Logic / Anti-Pattern,"Multiple social and target metrics contain hardcoded date ranges, some of which are in the future (e.g., July/August 2025). This design makes the dashboard static and requires manual SQL updates for each reporting period, severely limiting its utility, reusability, and maintainability. As of the current date, these metrics would display no data or placeholder data, as the target dates have not yet arrived.","t0.post_created_time >= DATETIME '2025-07-11T00:00:00' AND t0.post_created_time <= DATETIME '2025-07-14T23:59:59.999999'
PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-08-18' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-08-24'","Replace hardcoded date ranges with dynamic date parameters (e.g., Looker Studio date range controls, or BigQuery `CURRENT_DATE()` functions combined with `DATE_SUB` for relative ranges) to allow users to select reporting periods without modifying the underlying SQL. This will enable the dashboard to be truly dynamic and useful for ongoing analysis.",191,b51acdd5-4bf9-4de0-9c2f-a0bbd529ddf7
"weekend_subscription_target_dt, weekly_spv_target_dt_website",Hardcoded Logic / Anti-Pattern,"Metrics for subscription and SPV targets hardcode specific publication groups ('The Daily Telegraph') and website names ('Daily Telegraph'), as well as specific days of the week ('Saturday|Sunday'). While these might be the intended scope for *this specific dashboard*, hardcoding them directly in the SQL limits the reusability of these metric definitions for other publications, websites, or different reporting needs. It also makes the dashboard less flexible if the scope needs to change in the future.","t0.publication_group = 'The Daily Telegraph'
SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.day_of_week AS STRING), 'Sunday|Saturday')
t0.website = 'Daily Telegraph'","Introduce dashboard-level filters or parameters for `publication_group`, `website`, and `day_of_week` to allow dynamic selection by users. If these values are truly fixed for this dashboard, consider creating a more generalized metric that can be filtered at the dashboard layer, rather than embedding these specific values directly in the base metric SQL. This promotes reusability and easier maintenance across multiple dashboards.",191,b51acdd5-4bf9-4de0-9c2f-a0bbd529ddf7
"daily_sub_target_pub_group, daily_web_target_website_fy_week, daily_adds_standard_paid_digital_nt, daily_cancels_standard_paid_digital_nt, daily_net_adds_cancels_standard_paid_digital_nt",Hardcoded Logic,"All five metrics within the dashboard contain hardcoded date ranges in their `WHERE` clauses (e.g., '2025-07-07' to '2025-07-13'). This makes the dashboard static, unable to display current data without manual SQL modifications, and severely limits its utility for ongoing performance monitoring.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN DATE '2025-07-07' AND DATE '2025-07-13'","Implement dynamic date parameters (e.g., Looker Studio date range controls) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to allow the dashboard to display current and historical data dynamically. This is a high-priority fix.",192,789ba6af-d662-4bbe-a27c-e2ea9551305d
"daily_adds_standard_paid_digital_nt, daily_cancels_standard_paid_digital_nt, daily_net_adds_cancels_standard_paid_digital_nt",Anti-Pattern,"The three core subscription activity metrics (`adds`, `cancels`, `net adds/cancels`) apply identical hardcoded filters (`class_lvl_1 = 'Standard Paid'`, `delivery_medium != 'Print'`, `masthead = 'NT'`) directly within their SQL. This redundancy increases maintenance effort and risk of inconsistency if these business rules change. It also suggests these could be derived from a more consolidated base metric or view.",AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.masthead = 'NT',"Consolidate these common filters into a single, parameterized base view or a Looker Studio data source configuration. Alternatively, define these filters as dashboard-level controls or calculated fields to apply them consistently across related metrics, reducing SQL duplication and improving maintainability.",192,789ba6af-d662-4bbe-a27c-e2ea9551305d
"daily_adds_standard_paid_digital_nt, daily_cancels_standard_paid_digital_nt",Anti-Pattern,"The `Daily Adds` and `Daily Cancels` metrics use `LIMIT 1` on aggregate queries, while the related `Daily Net Adds/Cancels` metric groups by date and uses `LIMIT 10`. This inconsistency suggests a potential mismatch in how these related metrics are intended to be displayed (single sum vs. daily trend) or an unnecessary `LIMIT` clause.",LIMIT 1;,"Clarify the intended display for `Daily Adds` and `Daily Cancels`. If a daily trend is desired, remove `LIMIT 1` and add `GROUP BY t0.report_date`. If a single sum is always intended, `LIMIT 1` is redundant and can be removed for clarity.",192,789ba6af-d662-4bbe-a27c-e2ea9551305d
sum_day_target_by_publication_group_q1,Hardcoded Logic,"Multiple metrics (`sum_day_target_by_publication_group_q1`, `sum_day_target_website_q1`, `sum_active_daily_subscribers_q3`, `sum_subscriber_count_q3`, `sum_day_target_by_publication_group_q6`) use hardcoded specific dates. This severely limits the dashboard's flexibility, requiring manual updates or new metric definitions for each reporting period.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-03-23'",Implement dynamic date range parameters in Looker Studio or utilize a date dimension table to allow users to select desired reporting periods without modifying underlying metric definitions. Consider using BigQuery's parameterized queries if direct SQL is necessary.,193,c00fff03-f644-4725-90db-35b254793268
sum_day_target_by_publication_group_q2,Hardcoded Logic,"Several metrics (`sum_day_target_by_publication_group_q2`, `sum_day_target_website_q2`, `count_distinct_publication_group_q2`, `sum_active_daily_subscribers_q4`, `sum_subscriber_count_q4`, `dimension_report_date_q4`, `sum_active_daily_subscribers_q5`, `sum_subscriber_count_q5`, `dimension_report_date_q5`) use hardcoded date ranges. Similar to single dates, this creates rigid, non-reusable metrics.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN DATE '2025-04-28' AND DATE '2025-05-04'",Centralize date filtering logic using Looker Studio's built-in date range controls or by defining a flexible date parameter that can be applied across multiple charts and metrics. This will reduce metric sprawl and improve maintainability.,193,c00fff03-f644-4725-90db-35b254793268
sum_active_daily_subscribers_q3,Hardcoded Logic,"Repeated hardcoded string filters (`member_type`, `combined_customer_type`, `combined_classification_level_2`, `combined_masthead`) are present across multiple subscriber-related metrics. This makes it difficult to modify filtering criteria globally and increases the risk of inconsistencies.","WHERE t0.member_type = 'subscriber' AND STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND t0.combined_classification_level_2 != 'Print-only' AND STRPOS(t0.combined_masthead, 'HS') > 0","Define these common filters as dashboard-level controls or parameters in Looker Studio. Alternatively, if these are fixed business rules, consider creating a pre-filtered view or a semantic layer (e.g., LookML, dbt metrics) that encapsulates these conditions, promoting reusability and consistency.",193,c00fff03-f644-4725-90db-35b254793268
sum_day_target_by_publication_group_q6,Hardcoded Logic,"The `STRPOS` function with a hardcoded literal ('Herald Sun') is used to filter `publication_group`. While functional, this is less robust than an exact match if 'Herald Sun' is a distinct value, and still represents a hardcoded filter that limits flexibility.","AND STRPOS(t0.publication_group, 'Herald Sun') > 0","If 'Herald Sun' is a distinct value, use an exact match (`= 'Herald Sun'`) for clarity and performance. If it's a substring within a larger string, consider if this filter should be dynamic via a dashboard control or if the data model should be refined to provide a distinct 'publication_group_name' field. For common filters, create a reusable filter component or a semantic layer definition.",193,c00fff03-f644-4725-90db-35b254793268
dimension_iso_week_start_date_q2,Anti-Pattern,"The SQL logic for `iso_week_start_date` involves multiple nested `SAFE_CAST` and `PARSE_DATE` functions, indicating that the `targetdate` column is not stored in an optimal `DATE` or `DATETIME` format. This adds unnecessary computational overhead for every query.","SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) AS DATETIME), ISOWEEK) AS DATE)","Pre-process the `targetdate` column in the `subscription_targets` table (or a derived view) to store it as a native `DATE` type. This would simplify queries, improve readability, and potentially enhance query performance by avoiding repeated casting and parsing.",193,c00fff03-f644-4725-90db-35b254793268
sum_active_daily_subscribers_q3,Anti-Pattern,"The `CASE WHEN t0.subscriber_last_28_days_active_days = 28 THEN t0.subscriber_count ELSE 0 END` logic is repeated across multiple 'active daily subscribers' metrics (`q3`, `q4`, `q5`). While a valid calculation, its repetition highlights the lack of a centralized, reusable definition for this specific business logic.",SUM(CASE WHEN t0.subscriber_last_28_days_active_days = 28 THEN t0.subscriber_count ELSE 0 END),"Define this 'active subscriber' logic as a calculated field within the Looker Studio data source, or ideally, as a derived column in a BigQuery view or a semantic layer (e.g., dbt metric). This promotes a 'define once, use everywhere' approach, ensuring consistency and simplifying maintenance.",193,c00fff03-f644-4725-90db-35b254793268
total_responses_digital_product_csat_category,Hardcoded Logic|Anti-Pattern,"The metric uses a complex, hardcoded `CASE` statement to categorize 'digital_product_csat' into 'Gain', 'Pain', or 'Exclude'. This exact `CASE` statement is duplicated in the `WHERE` clause for filtering, and also duplicated identically in another metric ('total_responses_digital_survey_type'). This creates maintenance overhead, increases the risk of inconsistencies if the categorization logic needs to change, and makes the SQL less readable.","CASE
        WHEN (t0.digital_product_csat = 'Extremely satisfied') THEN 'Gain'
        WHEN (t0.digital_product_csat = 'Somewhat satisfied') THEN 'Gain'
        WHEN (t0.digital_product_csat = 'Neither satisfied nor dissatisfied') THEN 'Exclude'
        WHEN (t0.digital_product_csat = 'Somewhat dissatisfied') THEN 'Pain'
        WHEN (t0.digital_product_csat = 'Extremely dissatisfied') THEN 'Pain'
        WHEN (t0.digital_product_csat = 'Don\'t know / didn\'t use') THEN 'Exclude'
        WHEN (t0.digital_product_csat = 'null') THEN 'Exclude'
        ELSE 'Exclude'
    END","Centralize the CSAT categorization logic. This can be achieved by: 1) Defining a derived column in the underlying BigQuery view (`cdm_medallia.voc_myaccount`) to pre-calculate `csat_category`. This is the preferred approach for data governance and reusability. 2) If the logic is specific to the dashboard and not reusable across the data model, consider using a Looker Studio calculated field or parameter for the categorization. Additionally, use a CTE or subquery to define the category once and then filter on it, rather than repeating the `CASE` statement in the `WHERE` clause.",194,435638dc-cebd-41fe-8e93-f4a0e2f0f5a9
total_responses_digital_survey_type,Hardcoded Logic|Anti-Pattern,"This metric duplicates the exact same hardcoded `CASE` statement for 'digital_product_csat' categorization as seen in 'total_responses_digital_product_csat_category'. This is a clear anti-pattern for maintainability and consistency, as any change to the CSAT definition would require updates in multiple places.","CASE
            WHEN (t0.digital_product_csat = 'Extremely satisfied') THEN 'Gain'
            WHEN (t0.digital_product_csat = 'Somewhat satisfied') THEN 'Gain'
            WHEN (t0.digital_product_csat = 'Neither satisfied nor dissatisfied') THEN 'Exclude'
            WHEN (t0.digital_product_csat = 'Somewhat dissatisfied') THEN 'Pain'
            WHEN (t0.digital_product_csat = 'Extremely dissatisfied') THEN 'Pain'
            WHEN (t0.digital_product_csat = 'Don\'t know / didn\'t use') THEN 'Exclude'
            WHEN (t0.digital_product_csat = 'null') THEN 'Exclude'
            ELSE 'Exclude'
        END","As with 'total_responses_digital_product_csat_category', centralize this CSAT categorization logic in the underlying data model (e.g., a BigQuery view) to ensure consistency and reduce redundancy across metrics. This will simplify the SQL for both metrics and improve data governance.",194,435638dc-cebd-41fe-8e93-f4a0e2f0f5a9
total_responses_overall_experience_csat_category_and_survey_type,Hardcoded Logic,"This metric also uses a hardcoded `CASE` statement for CSAT categorization, similar in structure but applied to 'csat_overall_experience_at_day_30' with slightly different satisfaction levels. While the input column differs, the pattern of hardcoding categorization logic within individual metric SQL queries is an anti-pattern that hinders maintainability and consistency across the data landscape.","CASE
        WHEN (t0.csat_overall_experience_at_day_30 = 'Completely satisfied') THEN 'Gain'
        WHEN (t0.csat_overall_experience_at_day_30 = 'Somewhat satisfied') THEN 'Gain'
        WHEN (t0.csat_overall_experience_at_day_30 = 'Neither satisfied nor dissatisfied') THEN 'Exclude'
        WHEN (t0.csat_overall_experience_at_day_30 = 'Somewhat dissatisfied') THEN 'Pain'
        WHEN (t0.csat_overall_experience_at_day_30 = 'Completely dissatisfied') THEN 'Pain'
        WHEN (t0.csat_overall_experience_at_day_30 = 'Don\'t know / didn\'t use') THEN 'Exclude'
        WHEN (t0.csat_overall_experience_at_day_30 = 'null') THEN 'Exclude'
        ELSE 'Exclude'
    END","Centralize this CSAT categorization logic within the `v_cdm_medallia_voc_onboarding` view or a common data model layer. This promotes reusability and ensures that CSAT definitions are consistent and managed in one place, even if the specific input columns vary. This also makes it easier to update the logic if business definitions of 'Gain'/'Pain'/'Exclude' change.",194,435638dc-cebd-41fe-8e93-f4a0e2f0f5a9
all_metrics,Anti-Pattern,"All three metrics use hardcoded `responsedate` ranges (e.g., `TIMESTAMP '2024-06-17' AND t0.responsedate < TIMESTAMP_ADD(TIMESTAMP '2024-12-15', INTERVAL 1 DAY)`). This prevents dynamic date filtering on the dashboard, requiring manual updates to the SQL to view different time periods, which is inefficient and prone to error.","t0.responsedate >= TIMESTAMP '2024-06-17' AND t0.responsedate < TIMESTAMP_ADD(TIMESTAMP '2024-12-15', INTERVAL 1 DAY)",Replace hardcoded date ranges with Looker Studio's built-in date range controls. This typically involves removing the date filter from the custom SQL and relying on the dashboard's global date filter or specific chart-level date filters. This allows users to dynamically select the desired reporting period without requiring SQL modifications.,194,435638dc-cebd-41fe-8e93-f4a0e2f0f5a9
"total_responses_digital_product_csat_category, total_responses_digital_survey_type, total_responses_overall_experience_csat_category_and_survey_type",Inconsistent Logic,"Metrics 'total_responses_digital_product_csat_category' and 'total_responses_digital_survey_type' explicitly filter out responses categorized as 'Exclude' (`!= 'Exclude'`). However, 'total_responses_overall_experience_csat_category_and_survey_type' includes 'Exclude' in its results (`IN ('Gain', 'Pain', 'Exclude')`). This creates an inconsistency in how 'Exclude' responses are handled across the dashboard, which could lead to misinterpretation of total response counts or comparisons between different survey types.","Metric 1 & 3: (CASE ... END) != 'Exclude'
Metric 2: (CASE ... END) IN ('Gain', 'Pain', 'Exclude')","Clarify the business requirement for handling 'Exclude' categories across all survey types and metrics. If 'Exclude' responses should always be filtered out for total response counts, then the logic in 'total_responses_overall_experience_csat_category_and_survey_type' should be updated to exclude them. If 'Exclude' responses are sometimes relevant, consider adding a filter control on the dashboard to allow users to dynamically include/exclude them, or clearly document the difference in each chart's description to avoid confusion.",194,435638dc-cebd-41fe-8e93-f4a0e2f0f5a9
all_metrics,Hardcoded Logic / Anti-Pattern,"A complex and identical `WHERE` clause is hardcoded into the SQL logic of every single metric (26 metrics in total). This includes specific `masthead_code` values, `adgroup_name` patterns, `campaign_name` patterns, and a fixed `report_date` start. This approach leads to high maintenance overhead, as any change to the core filtering criteria for the 'Regionals Report' requires updating every single metric definition. It also makes the SQL verbose and harder to read.","WHERE (masthead_code IN ('GA','GC', 'NT', 'TM', 'TB', 'CP','TC') OR (masthead_code LIKE'%Not Available%' AND (adgroup_name LIKE '%REG%'))) AND campaign_name LIKE 'AOD%' AND report_date >= '2024-07-01'","Define this common filter logic once, ideally as a BigQuery authorized view or a Looker Studio data source filter. This would centralize the definition, simplify individual metric SQL, and drastically reduce maintenance effort. Alternatively, consider a dedicated `dim_campaign_type` table that pre-classifies campaigns based on these criteria.",195,56e7262f-a638-469d-a174-fab6a8a65226
"site_dimension, funnel_code_dimension, category_dimension, category1_dimension, channel_classification_dimension",Hardcoded Logic / Anti-Pattern,"Multiple dimension metrics (`Site Classification`, `Funnel Code`, `Adgroup Category`, `Platform Category 1`, `Channel Classification`) rely on complex, hardcoded `CASE` statements for classification based on string matching (`LIKE '%X%'`). This makes the logic difficult to maintain, prone to inconsistencies (e.g., `LinkedIn` vs `Linkedin` in `site_dimension`), and not easily scalable for new categories or changes in classification rules. The `Channel Classification` metric, in particular, is very extensive.",SELECT CASE WHEN source_system_name LIKE '%Facebook%' THEN '(Meta) Facebook' WHEN source_system_name LIKE '%Google%' THEN 'DART Search : Google' ... ELSE 'Other' END AS Site,"Centralize classification logic into dedicated lookup tables (e.g., `dim_platform_classification`, `dim_campaign_funnel`, `dim_adgroup_category`) in BigQuery. These tables can then be joined to the `campaign_performance_fct` table to derive these dimensions, significantly improving maintainability, consistency, and scalability. This also allows for easier updates to classification rules without modifying numerous metric definitions.",195,56e7262f-a638-469d-a174-fab6a8a65226
"meta_subscriptions, linkedin_subscriptions, tradedesk_subscriptions, reddit_subscriptions, google_search_subscriptions, microsoft_bing_subscriptions, google_pmax_subscriptions",Anti-Pattern / Inefficient Query Design,"Separate `*_subscriptions` metrics are defined by re-implementing channel classification logic within individual `SUM(CASE WHEN ... THEN subscription_count ELSE 0 END)` statements. This leads to highly redundant data processing and inefficient query execution. If a user wants to view subscriptions across all channels, the dashboard likely executes multiple separate queries, each scanning the entire `campaign_performance_fct` table with the same `WHERE` clause, rather than a single, more efficient aggregated query.",SELECT SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscription_count ELSE 0 END) AS Meta_Subs FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct` WHERE ...,"Instead of separate metrics for each channel, calculate `Total Subscriptions` and use the `Channel Classification` dimension (or a similar centralized dimension) to group or filter. This allows for a single, more efficient query to retrieve all channel-specific subscription data, improving performance and flexibility. Consider creating a pre-aggregated materialized view if performance remains a critical concern for these common breakdowns.",195,56e7262f-a638-469d-a174-fab6a8a65226
fy_quarter_dimension,Hardcoded Logic / Maintainability,"The `Fiscal Year Quarter` dimension uses a complex, hardcoded `CASE` statement to define fiscal quarters based on the `report_date`. While functional, this logic is embedded directly in the metric definition, making it less flexible and harder to manage if the fiscal year definition changes or if different fiscal calendars are needed across the organization.","SELECT CONCAT(CAST(CASE WHEN EXTRACT(MONTH FROM report_date) >= 7 THEN EXTRACT(YEAR FROM report_date) + 1 ELSE EXTRACT(YEAR FROM report_date) END AS STRING), ' Q', CAST(CASE WHEN EXTRACT(MONTH FROM report_date) IN (7, 8, 9) THEN 1 WHEN EXTRACT(MONTH FROM report_date) IN (10, 11, 12) THEN 2 WHEN EXTRACT(MONTH FROM report_date) IN (1, 2, 3) THEN 3 ELSE 4 END AS STRING)) AS FY_Quarter","Create a dedicated date dimension table in BigQuery that pre-calculates fiscal year, quarter, month, and other relevant date attributes. This table can then be joined to the `campaign_performance_fct` table, centralizing date logic and improving query performance for date-based filtering and grouping across all dashboards.",195,56e7262f-a638-469d-a174-fab6a8a65226
N/A (applies to all metrics),Anti-Pattern: Extreme SQL Duplication,"All 13 metrics listed, regardless of their specific aggregation (e.g., total link clicks, page views, AWS recommendations), derive their data from an identical, complex chain of six CTEs (`placement_modules`, `clicks_by_module`, `pv_with_recommendations`, `pv_recomm_placements`, `combined_clicks_and_pv`, `nca_and_aws_get_recs`). This leads to massive SQL duplication, making the dashboard's underlying logic difficult to maintain, prone to errors if changes are required, and potentially inefficient due to repeated computations.","Example of repeated CTEs (from any metric, e.g., 'total_link_clicks'):
```sql
WITH
  placement_modules AS (
    SELECT
      'the courier mail' AS brand,
      'cm - homepage - hyper localisation' AS placement_module
    UNION ALL
    SELECT
      'the courier mail' AS brand,
      'cm - homepage - network-1 - 1,2,3' AS placement_module
    UNION ALL
    SELECT
      'the courier mail' AS brand,
      'cm - recommended-for-you' AS placement_module
    UNION ALL
    SELECT
      'the courier mail' AS brand,
      'cm - story-more-coverage' AS placement_module
    UNION ALL
    SELECT
      'newscomau' AS brand,
      'newscomau - story-related-content' AS placement_module
    UNION ALL
    SELECT
      'newscomau' AS brand,
      'newscomau - story-more-coverage' AS placement_module
    UNION ALL
    SELECT
      'newscomau' AS brand,
      'newscomau - homepage - most-read' AS placement_module
  ),
  clicks_by_module AS (
    SELECT
      timestamp_trunc(visit_date, hour) AS visit_date,
      brand,
      personalisation_group,
      placement_module,
      sum(link_clicks) AS link_clicks
    FROM
      `ncau-data-newsquery-sit.bdm_consumer.personalisation_cm_nca_adobe_summary`
    WHERE
      date(visit_date) BETWEEN parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))) AND parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE())) AND
      placement_module != 'Out of Scope' AND placement_module IS NOT null AND personalisation_group IS NOT null AND
      personalisation_group IN ('Control Group', 'AWS Group', 'Google Group') AND link_clicks > 0
    GROUP BY 1, 2, 3, 4
  ),
  -- ... (additional identical CTEs follow)
  nca_and_aws_get_recs AS (
    SELECT
      * EXCEPT (homepage_views, pv_with_recommended_for_you, pv_with_more_coverage, pv_with_story_related_content),
      CASE
        WHEN placement_module IN ('cm - homepage - hyper localisation', 'cm - homepage - network-1 - 1,2,3',
          'newscomau - homepage - most-read') THEN homepage_views
        WHEN placement_module = 'cm - recommended-for-you' THEN pv_with_recommended_for_you
        WHEN placement_module IN ('cm - story-more-coverage', 'newscomau - story-more-coverage') THEN pv_with_more_coverage
        WHEN placement_module = 'newscomau - story-related-content' THEN pv_with_story_related_content
      END AS page_views_with_placements,
      0 AS aws_get_recommendations,
      0 AS aws_clicks,
      0 AS google_get_recommendations
    FROM
      combined_clicks_and_pv
    UNION ALL(
    SELECT
      timestamp_trunc(timestamp, HOUR) AS visit_date,
      publication AS brand,
      'AWS Group' AS personalisation_group,
      placement_module,
      0 AS link_clicks,
      0 AS page_views_with_placements,
      count(1) AS aws_get_recommendations,
      0 AS aws_clicks,
      0 AS google_get_recommendations
    FROM
      `ncau-data-newsquery-sit.bdm_consumer.v_cm_personalisation_aws_get_recs`
    WHERE
      date(timestamp) BETWEEN parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))) AND parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
    GROUP BY 1, 2, 3, 4
    UNION ALL
    SELECT
      timestamp_trunc(timestamp_click, HOUR) AS visit_date,
      publication AS brand,
      'AWS Group' AS personalisation_group,
      placement_module,
      0 AS link_clicks,
      0 AS page_views_with_placements,
      0 AS aws_get_recommendations,
      count(1) AS aws_clicks,
      0 AS google_get_recommendations
    FROM
      `ncau-data-newsquery-sit.bdm_consumer.v_cm_personalisation_aws_get_recs`
    WHERE
      date(timestamp_click) BETWEEN parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))) AND parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE())) AND
      timestamp_click IS NOT null
    GROUP BY 1, 2, 3, 4
    ) UNION ALL
    SELECT
      timestamp_trunc(timestamp(timestamp), HOUR) AS visit_date,
      publication AS brand,
      'Google Group' AS personalisation_group,
      placement_module,
      0 AS link_clicks,
      0 AS page_views_with_placements,
      0 AS aws_get_recommendations,
      0 AS aws_clicks,
      count(1) AS google_get_recommendations
    FROM
      `ncau-data-newsquery-sit.bdm_consumer.v_cm_personalisation_google_get_recs`
    WHERE
      date(timestamp) BETWEEN parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))) AND parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
    GROUP BY 1, 2, 3, 4
  )
```","Create a single, consolidated BigQuery view (e.g., `personalisation_metrics_base_view`) that encapsulates all the common CTE logic up to `nca_and_aws_get_recs`. This view should expose all necessary granular columns (e.g., `visit_date`, `brand`, `personalisation_group`, `placement_module`, `link_clicks`, `page_views_with_placements`, `aws_get_recommendations`, `aws_clicks`, `google_get_recommendations`). All individual metrics in Looker Studio should then query this single view, applying simple `SUM()` aggregations and `WHERE` clauses as needed. This will drastically improve maintainability, consistency, and query performance.",196,c393a5a0-4e52-4bfe-b791-47d1aee087e9
N/A (applies to all metrics),Hardcoded Logic: Placement Modules,"The `placement_modules` CTE, which defines specific brand and placement module pairs, is hardcoded within every single metric's SQL. This makes it cumbersome and error-prone to update if new brands or placement modules are introduced or existing ones change. Any modification requires updating 13 separate metric definitions.","```sql
placement_modules AS (
    SELECT
      'the courier mail' AS brand,
      'cm - homepage - hyper localisation' AS placement_module
    UNION ALL
    SELECT
      'the courier mail' AS brand,
      'cm - homepage - network-1 - 1,2,3' AS placement_module
    -- ... and so on
  )
```","Extract the `placement_modules` definitions into a dedicated, governed lookup table in BigQuery. The consolidated base view (as recommended above) can then join to or reference this lookup table, ensuring a single, centralized source of truth for placement module metadata. This promotes data governance and simplifies updates.",196,c393a5a0-4e52-4bfe-b791-47d1aee087e9
N/A (applies to all metrics),Anti-Pattern: Repeated Date Range Filtering,"The 30-day lookback date filtering logic (`date(visit_date) BETWEEN parse_date(...) AND parse_date(...)`) is explicitly repeated in multiple CTEs (`clicks_by_module`, `pv_with_recommendations`, and the `UNION ALL` subqueries for AWS/Google recommendations) within every metric. This redundancy makes it difficult to change the lookback window consistently across the dashboard and can lead to performance overhead if not optimized by the query engine.","```sql
WHERE
      date(visit_date) BETWEEN parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))) AND parse_date(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
```","Integrate the date filtering directly into the consolidated BigQuery view. If dynamic date ranges are required in Looker Studio, ensure the underlying BigQuery table is partitioned or clustered by date to allow for efficient filter pushdown. For a fixed 30-day window, the view itself should handle this, or a Looker Studio date range control should be used on the consolidated view.",196,c393a5a0-4e52-4bfe-b791-47d1aee087e9
N/A (applies to all metrics),Anti-Pattern: Complex Hardcoded CASE Statement,"The `nca_and_aws_get_recs` CTE contains a complex `CASE` statement that maps specific `placement_module` strings to different page view metrics (e.g., `homepage_views`, `pv_with_recommended_for_you`). This logic is hardcoded and repeated across all metrics, making it inflexible and difficult to manage if new page view types or placement module mappings are introduced.","```sql
CASE
    WHEN placement_module IN ('cm - homepage - hyper localisation', 'cm - homepage - network-1 - 1,2,3',
      'newscomau - homepage - most-read') THEN homepage_views
    WHEN placement_module = 'cm - recommended-for-you' THEN pv_with_recommended_for_you
    WHEN placement_module IN ('cm - story-more-coverage', 'newscomau - story-more-coverage') THEN pv_with_more_coverage
    WHEN placement_module = 'newscomau - story-related-content' THEN pv_with_story_related_content
  END AS page_views_with_placements
```","This mapping logic should be part of the consolidated BigQuery view. Consider if a more normalized data structure for page view types or a separate lookup table for `placement_module` to page view type mapping could simplify this `CASE` statement, especially if the logic is expected to evolve.",196,c393a5a0-4e52-4bfe-b791-47d1aee087e9
unique_booking_numbers_cons_wa_current,Hardcoded Logic,The SQL logic for this metric hardcodes the 'CONSORTIUM WA' value for `portfolio_parent_group_name_current`. This makes the metric specific to a single portfolio and prevents dynamic filtering or reuse for other portfolios without modifying the underlying SQL.,WHERE SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM WA',"Replace hardcoded values with dashboard parameters or filters. This would allow users to dynamically select different portfolios, significantly enhancing the dashboard's reusability and flexibility.",197,aaeee404-9b2c-4665-9228-999b01c5fc70
distinct_dw_asl_load_timestamps_financial_2025_may_jun_cons_wa,Hardcoded Logic,"This metric exhibits the most severe hardcoding, fixing the `portfolio_parent_group_name_current` to 'CONSORTIUM WA', `financial_year` to '2025', and `financial_short_month` to 'May' or 'Jun'. This makes the metric entirely static and unusable for any other time period or portfolio without direct SQL modification, severely limiting its analytical value.","WHERE SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM WA' AND SAFE_CAST(t0.financial_year AS STRING) = '2025' AND SAFE_CAST(t0.financial_short_month AS STRING) IN ('May', 'Jun')","Implement dashboard parameters for portfolio, financial year, and financial month. This is crucial for enabling dynamic filtering and making the dashboard adaptable to various reporting periods and business contexts.",197,aaeee404-9b2c-4665-9228-999b01c5fc70
unique_portfolio_conformed_names_cons_wa_current,Hardcoded Logic,"Similar to other metrics, this metric's SQL logic hardcodes the `portfolio_parent_group_name_current` to 'CONSORTIUM WA', restricting its utility to a single, predefined portfolio.",WHERE SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM WA',"Parameterize the portfolio filter to allow dynamic selection, aligning with best practices for reusable dashboard components.",197,aaeee404-9b2c-4665-9228-999b01c5fc70
unique_crm_account_numbers_cons_wa_current,Hardcoded Logic,"The SQL logic for this metric hardcodes the `portfolio_parent_group_name_current` to 'CONSORTIUM WA', limiting its application to a specific portfolio.",WHERE SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM WA',Introduce a dashboard parameter for portfolio selection to make the metric dynamic and reusable across different portfolios.,197,aaeee404-9b2c-4665-9228-999b01c5fc70
unique_agency_names_cons_wa_current,Hardcoded Logic,"This metric also hardcodes the `portfolio_parent_group_name_current` to 'CONSORTIUM WA', restricting its scope to a single portfolio.",WHERE SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM WA',Utilize dashboard parameters for portfolio filtering to enhance reusability and allow for broader analysis.,197,aaeee404-9b2c-4665-9228-999b01c5fc70
all_data_driven_metrics,Anti-Pattern,"All data-driven metrics (those querying the `details_dashboard` table) include a `LIMIT 100` clause. While this might be intended for sampling or display in a specific chart type, it implies that the metric is not designed to retrieve a complete dataset, which can be misleading if users expect comprehensive lists or if the dashboard is intended for detailed analysis.",LIMIT 100,"Review the purpose of the `LIMIT 100` clause. If the intent is to display a full list, remove the limit. If it's for sampling, ensure the dashboard clearly communicates that the data shown is a sample. For large datasets, consider if a different visualization type (e.g., paginated table) or a drill-down report would be more appropriate than a limited list.",197,aaeee404-9b2c-4665-9228-999b01c5fc70
"free_comp_sc_records_by_source_channel_fy_gt_2024, free_comp_sc_records_by_source_channel_fy_ge_2024, free_comp_sc_records_by_classification_level_2_fy_ge_2024, free_comp_sc_records_by_sold_in_channel_fy_ge_2024",Anti-Pattern,"Multiple 'record count' metrics (4 out of 6 total metrics) share nearly identical filtering logic (`t0.classification_level_1 IN ('Free Trials', 'Complimentary') AND t0.masthead = 'SC'`) and query the same base table (`v_subscription_base_movement_agg`). They primarily differ in the `GROUP BY` dimension and a minor variation in the fiscal year filter (`> 2024` vs `>= 2024`). This indicates redundancy and a lack of parameterization, leading to duplicated SQL and potentially more maintenance overhead.","FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base_movement_agg` AS t0
WHERE t0.classification_level_1 IN ('Free Trials', 'Complimentary')
AND t0.masthead = 'SC'
AND SAFE_CAST(t0.fy_year AS INT64) [>= or >] 2024","Consolidate these record-counting metrics into a single, more flexible metric within Looker Studio. This could be achieved by using parameters for the fiscal year filter (e.g., 'Fiscal Year Filter Type: >=2024, >2024') and a control for selecting the desired grouping dimension (e.g., 'Group By: Source Channel, Classification Level 2, Sold In Channel'). This would reduce the number of distinct metrics, simplify dashboard design, and improve maintainability.",198,77631717-5cc6-4903-87bd-7314bf461243
free_comp_sc_cancellations_by_fiscal_week_source_code,Anti-Pattern,"The `fiscal_week` calculation uses a `CASE` statement to format `fy_year` and `fy_week_of_year` into a `YYYYWW` string. While functional, this logic is specific and if needed across multiple metrics or dashboards, it could lead to inconsistencies or repeated code.","CASE WHEN SAFE_CAST(t0.fy_week_of_year AS INT64) < 10 THEN CONCAT(SAFE_CAST(t0.fy_year AS STRING),'0',SAFE_CAST(t0.fy_week_of_year AS STRING)) ELSE CONCAT(SAFE_CAST(t0.fy_year AS STRING),SAFE_CAST(t0.fy_week_of_year AS STRING)) END AS fiscal_week","Consider defining `fiscal_week` as a standardized, pre-calculated column within the underlying `v_subscription_base_movement_agg_snap` view or a dedicated date dimension table. This would centralize the logic, ensure consistency across all consumers, and simplify metric SQL.",198,77631717-5cc6-4903-87bd-7314bf461243
"gross_revenue_2024_breakdown, gross_revenue_2025_breakdown, gross_revenue_2025_q4, gross_revenue_2025_by_adsize, gross_revenue_2025_total",Anti-Pattern,"Multiple metrics are created to represent Gross Revenue for specific financial years (e.g., 2024, 2025) or quarters, by hardcoding the `financial_year` and `financial_quarter` values directly within the SQL `WHERE` clause. This leads to metric proliferation, redundancy, and increased maintenance burden for future financial periods (e.g., 2026, 2027 would require new metrics).","WHERE t0.xtend_flag = 'Y' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.financial_year = '2025'","Refactor the dashboard to use a single, more generalized 'Gross Revenue' metric. Leverage Looker Studio's built-in filter controls, date range controls, or parameters for 'financial_year' and 'financial_quarter' to allow users to dynamically select the desired period. This would significantly reduce the number of distinct metrics, simplify maintenance, and improve scalability for future data.",199,8f142224-196a-4d47-b234-491eeecf59fa
all_metrics,Anti-Pattern,"All three metrics (`record_count_by_source_system`, `actual_amount_by_source_system`, `actual_amount_by_year_source_system`) define an identical and complex `OSandFACT` Common Table Expression (CTE). This duplication is a significant anti-pattern, leading to redundant computation, increased query execution time, higher costs, and a substantial maintenance burden. Any change to the base logic requires modification in multiple places.","WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS INT) AS fiscal_week_id,
      ...
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          ...
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
      ON os.os_level_12 = dep.department_code
  )","Consolidate the `OSandFACT` logic into a single, dedicated BigQuery view or a pre-aggregated table. Alternatively, if using a Looker Studio data source, define this complex query once as the base data source and then build individual metrics as calculated fields on top of it. This will improve performance, reduce costs, and simplify maintenance.",200,d7412673-0af1-4efe-8374-ca475b001fb6
all_metrics,Inefficient Query Design,"The `OSandFACT` CTE selects a large number of columns from the base fact table and its joins, many of which are not utilized in the final `SELECT` statements of the individual metrics. This 'select all' approach within the CTE leads to unnecessary data processing and transfer, impacting query performance and cost.","SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS INT) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      calendar.fy_year,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.month_end_flag","Refactor the `OSandFACT` CTE to select only the columns explicitly required by the final aggregation queries (e.g., `source_system_name`, `Actual_Amount`, `fiscal_week_id`, `fy_year`). This 'select what you need' approach optimizes query performance and reduces BigQuery costs.",200,d7412673-0af1-4efe-8374-ca475b001fb6
all_metrics,Hardcoded Logic,"The `calendar` subquery within the `OSandFACT` CTE includes a hardcoded filter `control.period_name IN ('CP', 'PY')`. This embeds a specific business rule for 'Current Period' and 'Prior Year' directly into the SQL, limiting the dashboard's flexibility if different period definitions are needed or if the period control logic changes.","JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')","Consider externalizing this period control logic. This could involve using Looker Studio parameters for dynamic period selection, or enhancing the `v_asl_DIM_period_control` table to include flags that can be filtered more flexibly without modifying the core metric SQL.",200,d7412673-0af1-4efe-8374-ca475b001fb6
all_metrics,Redundant Code,"The `calendar` subquery contains a redundant `WHERE 1 = 1` clause and selects `current_timestamp()` as `extract_time` which is not used in the outer query. While minor, these indicate areas for code cleanup and optimization.","WHERE
          1 = 1
      )
      ...
          `current_timestamp`() AS extract_time",Remove the `WHERE 1 = 1` clause and the `current_timestamp()` selection from the `calendar` subquery to improve code readability and eliminate unnecessary computation.,200,d7412673-0af1-4efe-8374-ca475b001fb6
"actual_amount_by_source_system, actual_amount_by_year_source_system",Data Quality Observation,"The `Actual_Amount` column is explicitly `SAFE_CAST` to `BIGNUMERIC`. While `SAFE_CAST` is a good practice for error handling, its consistent use might indicate underlying data quality issues where the `Actual_Amount` column in the source table (`v_asl_FCT_finance_os_aggregated`) may not always contain valid numeric values. This could lead to silent data loss (NULLs) if many values fail to cast.",SUM(SAFE_CAST(Actual_Amount AS BIGNUMERIC)) AS actual_amount,Investigate the data quality of the `Actual_Amount` column in the `v_asl_FCT_finance_os_aggregated` table. Identify and address the root causes of non-numeric values upstream in the ETL/ELT process to ensure data integrity and prevent potential data loss during casting.,200,d7412673-0af1-4efe-8374-ca475b001fb6
"total_records_20250729_20250804, total_records_20250714_20250720",Hardcoded Logic|Anti-Pattern,"Both 'Total Records' metrics are identical in their complex SQL logic, differing only by a hardcoded `WHERE` clause for the `month` column. This creates redundant code, increases maintenance overhead, and prevents dynamic date range selection by users. Furthermore, the hardcoded dates (e.g., '2025-07-29' to '2025-08-04') are in the future relative to the actual data's `max_month` ('2024-04-01' as per `structure_sql`), rendering these metrics currently non-functional.",WHERE (clmn0_ >= DATE '2025-07-29' AND clmn0_ <= DATE '2025-08-04'),"Consolidate these into a single 'Total Records' metric. Implement date filtering directly within Looker Studio using a date range control, allowing users to select their desired period dynamically. This would eliminate redundant SQL definitions, ensure the dashboard displays relevant, current data, and significantly improve maintainability and reusability.",201,6a9da673-c8cd-4bd5-8743-77da4afcfa78
all_acquisition_metrics_from_v_subscription_movement,Anti-Pattern,"A large number of acquisition metrics (e.g., 'BAU Always On Digital Acquisitions', 'Premium Breach Acquisitions', 'Other Channel Acquisitions', and all source-channel specific acquisitions) are defined using `SUM(CASE WHEN ...)` statements to filter on specific `sold_in_channel` or `sold_in_source_channel` values. This results in highly repetitive SQL logic across metrics, making the dashboard cumbersome to maintain and prone to errors if channel definitions change. The 'Other BAU Acquisitions' metric further highlights this by using an extensive, hardcoded `NOT IN` list for `sold_in_source_channel` values.","Example from 'BAU Always On Digital Acquisitions': `SUM(CASE WHEN sold_in_channel = 'Bau Always On Digital' AND classification_level_1 NOT IN ('Other Paid', 'Free Trials', 'Complimentary') THEN 1 END)`
Example from 'Other BAU Acquisitions': `sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Content Amplification', 'Not Available', 'Twitter - Creative', 'Google - Content Amplification', 'Facebook', 'Landing Page')`","To improve maintainability and consistency, implement a dedicated dimension table for 'sold_in_channel' and 'sold_in_source_channel' with associated business-friendly names and groupings. Metrics should then join to this dimension table and filter based on the dimension attributes. Alternatively, leverage a semantic layer (e.g., LookML, dbt metrics) to define these channel categorizations once and reuse them across all relevant metrics.",202,9ba99d6a-b418-433f-9b7c-ec7430af6e8f
all_metrics,Hardcoded Logic,"All metrics, regardless of their underlying table (`v_subscription_movement` or `campaign_conversion_fct`), incorporate hardcoded date ranges or fiscal years within their `WHERE` clauses. For instance, `SAFE_CAST(subscription_tenure_start_datetime AS DATE) >= DATE(""2023-07-03"") AND SAFE_CAST(fy_year AS INT64) = 2025` or `SAFE_CAST(report_date AS DATE) >= DATE '2024-07-01' AND SAFE_CAST(report_date AS DATE) <= DATE '2025-05-08'`. This design choice renders the dashboard static and requires manual SQL updates to align with current or future reporting periods, leading to significant maintenance overhead.","From `bau_always_on_digital_acquisitions`: `SAFE_CAST(subscription_tenure_start_datetime AS DATE) >= DATE(""2023-07-03"") AND SAFE_CAST(fy_year AS INT64) = 2025`
From `facebook_subscriptions`: `SAFE_CAST(report_date AS DATE) >= DATE '2024-07-01' AND SAFE_CAST(report_date AS DATE) <= DATE '2025-05-08'`","Replace hardcoded dates with dynamic date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)`) to ensure the dashboard automatically reflects the most current or relevant reporting periods. For fiscal year filtering, consider integrating a fiscal calendar dimension table or implementing a parameterized approach.",202,9ba99d6a-b418-433f-9b7c-ec7430af6e8f
other_bau_acquisitions,Anti-Pattern,The `sold_in_source_channel NOT IN` clause within the 'Other BAU Acquisitions' metric explicitly lists 'Facebook' and 'Google - Content Amplification' twice. This redundancy indicates a lack of careful management of the exclusion list and could potentially lead to unexpected behavior or errors if the list is intended to be unique and comprehensive.,"`sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Content Amplification', 'Not Available', 'Twitter - Creative', 'Google - Content Amplification', 'Facebook', 'Landing Page')`","Review and deduplicate the `NOT IN` list for `sold_in_source_channel`. Ideally, this categorization logic should be managed through a lookup table or a more robust, centralized mechanism, aligning with the broader recommendation for channel dimensioning.",202,9ba99d6a-b418-433f-9b7c-ec7430af6e8f
multiple_dimensions,Anti-Pattern,"Almost all dimension metrics (`THINK Company Name`, `NewsQuery Company Name`, `Classification Level 1`, `Classification Level 2`, `Fiscal Year`, `Masthead`, `Delivery Medium Type`, `Subscriber ID Source`) include a `LIMIT 100` clause. While this might be intended for sampling distinct values in Looker Studio filters or parameters to improve load times, it can lead to incomplete data representation for users if there are more than 100 distinct values. This is generally not a best practice for production dimension queries as it can hide the full scope of available data.","SELECT DISTINCT classification_level_1
FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base`
WHERE classification_level_1 IS NOT NULL
LIMIT 100;","Remove `LIMIT 100` from dimension queries to ensure all distinct values are available for filtering and analysis. If sampling is truly required for performance in Looker Studio, consider alternative strategies such as pre-aggregating distinct values in a dedicated dimension table, or relying on Looker Studio's internal sampling mechanisms, rather than hardcoding limits in the SQL.",203,8dd0c610-0845-410c-b2f1-1d01043b9908
multiple_dimensions,Anti-Pattern,"The date filtering logic `WHERE SAFE_CAST(rev.bill_date AS DATE) > '2018-07-01'` is repeatedly applied across several metrics (`THINK Company Name`, `NewsQuery Company Name`, `Fiscal Year`, `Masthead`). This redundancy suggests that this common filter could be pushed down into a base view or a consolidated fact table (e.g., `payment_revenue_fct_filtered`), improving maintainability, ensuring consistent data scope, and potentially optimizing query performance by reducing repeated calculations.","WHERE
  SAFE_CAST(rev.bill_date AS DATE) > '2018-07-01'","Consolidate common filtering logic (e.g., `bill_date` range) into a base view or a materialized view for `payment_revenue_fct` if this filter is consistently applied across many dashboards/metrics. This reduces redundancy, ensures consistent data scope, and simplifies future maintenance.",203,8dd0c610-0845-410c-b2f1-1d01043b9908
"think_company_dim, nq_company_dim",Observation,"The dashboard includes two distinct company name dimensions (`THINK Company Name` and `NewsQuery Company Name`), each sourced from different underlying dimension tables (`cdm_think.agency` and `b2b_b2c_subscriber_subscription_dim`) but joined to the same `payment_revenue_fct`. While the business descriptions clarify their distinct origins (THINK system vs. NewsQuery system), it's important to ensure end-users clearly understand which 'company name' to use for specific analyses to avoid confusion or misinterpretation.",N/A (applies to the existence of two distinct metrics),"Ensure clear documentation and potentially in-dashboard guidance (e.g., tooltips, descriptive labels) to differentiate between 'THINK Company Name' and 'NewsQuery Company Name' for end-users. Consider if a single, conformed company dimension with an attribute indicating the source system (e.g., 'Company Name (Source: THINK)', 'Company Name (Source: NewsQuery)') could simplify the user experience in the future.",203,8dd0c610-0845-410c-b2f1-1d01043b9908
subscription_day_target_20250414_20250420,Hardcoded Logic / Anti-Pattern,"Multiple metrics are defined for 'Subscription Daily Target' where the *only* difference is the hardcoded date range in the `WHERE` clause. This leads to metric proliferation, maintenance overhead, and prevents dynamic date selection by users. This pattern is repeated across all 'Subscription Daily Target' metrics.","WHERE PARSE_DATE('%Y%m%d', t0.targetdate) >= DATE '2025-04-14' AND PARSE_DATE('%Y%m%d', t0.targetdate) <= DATE '2025-04-20'","Consolidate these into a single 'Subscription Daily Target' metric. Utilize Looker Studio's date range controls or BigQuery's parameterized queries to allow users to select the desired period dynamically. If specific fixed periods are required, consider a lookup table for period definitions rather than creating separate metrics.",204,c794898d-8468-454e-97c7-de1fa293c759
c_score_weekly_target_20250428_20250504,Hardcoded Logic / Anti-Pattern,"Similar to subscription targets, 'C-Score Weekly Target' metrics are duplicated with only hardcoded date ranges differing. This is a direct violation of good consolidation practices and indicates a lack of reusability for the underlying metric definition.",WHERE t0c1d0.week_ending >= DATE '2025-04-28' AND t0c1d0.week_ending <= DATE '2025-05-04',"Consolidate into a single 'C-Score Weekly Target' metric, leveraging dynamic date range selection or parameterized queries to allow users to specify the week of interest. This will significantly reduce the number of individual metrics and improve maintainability.",204,c794898d-8468-454e-97c7-de1fa293c759
net_consumer_activity_standard_paid_digital_cm_20250621_20250720,Hardcoded Logic / Data Type Concern,"The metric includes hardcoded filter values for `class_lvl_1`, `delivery_medium`, and `masthead`. While only one instance of this base metric is provided, if these filters are common or expected to change, hardcoding them within the SQL limits flexibility. The consistent use of `SAFE_CAST` suggests that the underlying columns (`class_lvl_1`, `delivery_medium`, `masthead`) might not be consistently stored as STRING, which could indicate data quality issues or suboptimal schema design.",SAFE_CAST(t0.class_lvl_1 AS STRING) = 'Standard Paid' AND SAFE_CAST(t0.delivery_medium AS STRING) != 'Print' AND SAFE_CAST(t0.masthead AS STRING) = 'CM',"Review the schema of `prstn_consumer_views.v_consumer_activity_daily_summary` to ensure consistent data types for categorical fields. If `SAFE_CAST` is necessary, investigate the root cause of the inconsistent types. For the hardcoded filter values, consider exposing these as dashboard filters or parameters if they are meant to be dynamic, or managing them via a lookup table if they represent fixed business rules.",204,c794898d-8468-454e-97c7-de1fa293c759
subscription_category_complex_dimension,Anti-Pattern,"This dimension uses an extremely long, deeply nested, and highly complex `CASE WHEN` statement to categorize subscriptions. This anti-pattern makes the logic incredibly difficult to read, understand, debug, and maintain. It also duplicates categorization logic (e.g., for publication groups and delivery medium types) that should ideally be defined once and reused.","SELECT CASE WHEN (CASE WHEN (CASE WHEN (t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer' WHEN (t0.classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus' ... ELSE NULL END END AS subscription_category","Refactor this complex dimension. Create a dedicated lookup table or a series of smaller, more manageable views/UDFs in BigQuery that pre-calculate these categorization levels. This would significantly improve readability, maintainability, and ensure consistency across all metrics that rely on these categorizations.",205,e33ad43b-7f46-4dd7-bfd4-bd53657e4538
publication_group_dimension,Hardcoded Logic,The `publication_group_dimension` defines publication categories using a hardcoded `CASE WHEN` statement based on `masthead` values. This exact logic is also duplicated within the `subscription_category_complex_dimension`. This redundancy increases the effort required for updates and introduces a risk of inconsistencies if changes are not applied uniformly.,"SELECT CASE WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals' WHEN (t0.masthead = 'WT') THEN 'Other Publications' WHEN (t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications' WHEN (t0.masthead IS NULL) THEN 'check' ELSE 'Exclude' END AS publication_group","Create a single, governed lookup table or a view for `publication_group` based on `masthead`. All metrics and dimensions should then reference this central definition to ensure consistency and simplify maintenance.",205,e33ad43b-7f46-4dd7-bfd4-bd53657e4538
digital_subscription_cancellation_count,Hardcoded Logic,The logic to determine 'Digital Subscriptions' versus 'Print Subscriptions' is hardcoded using a `CONCAT` and `CASE WHEN` statement. This exact same logic is duplicated in the `subscription_type_dimension` and also partially within the `subscription_category_complex_dimension`. This duplication is an anti-pattern that leads to redundant code and potential inconsistencies if the definition of 'Digital Subscriptions' changes.,"WHERE t0.subscription_movement_count_type = 'cancellation' AND (CASE WHEN (CONCAT(SAFE_CAST(t0.delivery_medium_type AS STRING),' ',SAFE_CAST(t0.subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END) = 'Digital Subscriptions'","Define 'subscription_type' as a derived column in the base `acquisitions_cancellations_movements` table, or as a column in a dedicated view built on top of it. This ensures the logic is defined once, centrally, and can be reused consistently across all metrics and dimensions.",205,e33ad43b-7f46-4dd7-bfd4-bd53657e4538
adobe_metrics_group,Anti-Pattern,"A large group of Adobe-related metrics (e.g., 'Total Unique Users', 'Total Unique Visits', 'Total Sessions', 'Total Time Spent', 'Bounce Sessions', 'Audio Users', 'Non-Audio Users', 'Audio Visits', 'Non-Audio Visits', 'Total Seconds for Audio/Non-Audio Visits/Users', 'Audio/Non-Audio Sessions Count', 'Average Time Per Session', 'Average Seconds for Audio/Non-Audio Users', 'Bounce Rate', 'Audio Engagement Rate') share an identical and extensive `WHERE` clause. This duplication makes maintenance cumbersome and increases the risk of inconsistencies if the filtering logic needs to change.","WHERE is_bw_audio_article_content = 'Y' AND SecondsSpent IS NOT NULL AND SecondsSpent > 0 AND member_type IS NOT NULL AND DATE(visit_timestamp) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE()","Create a base view (e.g., `qvr_consumer.beyondWords_adobe_filtered_vw`) that encapsulates this common filtering logic. All dependent metrics should then query this view, centralizing the definition and improving maintainability and consistency.",206,d110a146-283a-4836-a1db-94ef302d9d90
beyondwords_metrics_group,Anti-Pattern,"BeyondWords metrics (e.g., 'Player Loads', 'Player Plays', 'Unique Listen Sessions', 'Total Listen Seconds', 'Total Listen Percent Sum', 'Listen Sessions with Completion', 'Average Listen Duration', 'Average Completion Rate', 'Listen Rate') include a redundant hardcoded date filter (`dw_partition_date >= '2024-01-01'`) in addition to the dynamic 30-day lookback. This filter is unnecessary and could inadvertently restrict data if the 30-day window extends prior to '2024-01-01'. Similar to Adobe metrics, the common `WHERE` clause is repeated across these metrics.","WHERE dw_partition_date >= '2024-01-01' AND article_id IS NOT NULL AND event_type IN ('load', 'play') AND dw_partition_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE()","Remove the redundant `dw_partition_date >= '2024-01-01'` filter. Consolidate the remaining common `WHERE` clause into a base view (e.g., `cdm_beyondwords.analytics_custom_filtered_vw`) for all BeyondWords metrics to centralize logic and improve maintainability.",206,d110a146-283a-4836-a1db-94ef302d9d90
cs_audio_article_play_events,Anti-Pattern,"Clickstream metrics like 'Audio Article Play Events' and 'Audio Article Pause Events' rely on `REGEXP_CONTAINS` to extract event IDs (e.g., '401', '402') from a potentially delimited string column (`event_list`). This approach is computationally expensive, not scalable, and fragile if the `event_list` format changes.","SUM(CASE WHEN REGEXP_CONTAINS(event_list, r'\b401\b') THEN 1 ELSE 0 END)","Investigate the upstream data pipeline for `sdm_adobe_web.clickstream_ingest`. Ideally, `event_list` should be parsed into a more structured format (e.g., an array of event IDs or individual boolean flags for common events) during ingestion or via a dedicated transformation layer. If not possible upstream, consider creating a materialized view that pre-parses these events into dedicated columns for improved query performance and reliability.",206,d110a146-283a-4836-a1db-94ef302d9d90
all_metrics_date_filter,Hardcoded Logic,"The 30-day lookback period (`DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE()`) is hardcoded directly into almost every metric's SQL logic. This makes it difficult to modify the reporting window globally and increases the chance of inconsistencies if not all metrics are updated uniformly.","DATE(visit_timestamp) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE()","Implement a centralized date dimension or a BigQuery script that generates the dynamic date range. For Looker Studio, consider using a date parameter that can be applied across all data sources, or define base views (as suggested above) that handle the date filtering, allowing for a single point of change for the date range.",206,d110a146-283a-4836-a1db-94ef302d9d90
all_metrics,Hardcoded Logic,"All metrics within the dashboard utilize hardcoded date ranges in their SQL logic (e.g., '2025-04-03' to '2025-04-09'). This prevents dynamic date filtering by users, severely limiting the dashboard's interactivity and requiring manual updates to view current or different historical periods. This contradicts typical dashboard functionality.","SAFE_CAST(DATETIME_TRUNC(DATETIME_ADD(PARSE_DATETIME('%Y-%m-%dT%H:%M:%S', t0.post_created_time), INTERVAL 10 HOUR), DAY) AS DATE) >= DATE '2025-04-03' AND SAFE_CAST(DATETIME_TRUNC(DATETIME_ADD(PARSE_DATETIME('%Y-%m-%dT%H:%M:%S', t0.post_created_time), INTERVAL 10 HOUR), DAY) AS DATE) <= DATE '2025-04-09'","Replace hardcoded date ranges with Looker Studio's built-in date range controls. This typically involves using parameters like `_PARTITIONTIME` or `_PARTITIONDATE` for partitioned tables, or dynamic date filters linked to a date dimension in the data source configuration.",207,a7a0f9fb-9e07-4931-8127-a7944660b5c9
all_metrics,Anti-Pattern,"The date parsing and timezone adjustment logic (`SAFE_CAST(DATETIME_TRUNC(DATETIME_ADD(PARSE_DATETIME('%Y-%m-%dT%H:%M:%S', t0.post_created_time), INTERVAL 10 HOUR), DAY) AS DATE)`) is complex and repeated across all metric queries. This indicates a potential lack of standardization in the underlying data model or Looker Studio calculated fields.","SAFE_CAST(DATETIME_TRUNC(DATETIME_ADD(PARSE_DATETIME('%Y-%m-%dT%H:%M:%S', t0.post_created_time), INTERVAL 10 HOUR), DAY) AS DATE)","Standardize the `post_created_time` column in the `social_content_interactions_fct` table to a `DATE` or `TIMESTAMP` type with a consistent timezone (e.g., UTC) during ETL. Alternatively, create a reusable calculated field in Looker Studio for the 'Post Created Date (AEST)' to simplify metric definitions and ensure consistency.",207,a7a0f9fb-9e07-4931-8127-a7944660b5c9
total_avg_video_duration_tiktok_by_author_and_post,Data Mismatch,"The metric 'Total Average Video Duration' is calculated as a `SUM` of `insights_video_view_average_seconds_duration`. Summing averages is generally mathematically incorrect for deriving a true overall average, as it does not account for the varying number of views or posts contributing to each individual average. This can lead to misleading insights.",SELECT SUM(t0.insights_video_view_average_seconds_duration) AS total_avg_video_duration,"Re-evaluate the business requirement for this metric. If an overall average video duration is needed, it should be calculated by summing the total duration and dividing by the total number of views/posts, or by using a weighted average if individual average durations are available alongside their corresponding total views/posts.",207,a7a0f9fb-9e07-4931-8127-a7944660b5c9
"All metrics (e.g., total_video_revenue_fy2025, distinct_video_bookings_fy2025, etc.)",Hardcoded Logic / Anti-Pattern,"A very long and complex set of `STRPOS` and `NOT IN` conditions is used to exclude specific publication names. This identical logic is duplicated across all seven metrics in the dashboard. This approach makes updates difficult, error-prone, and significantly increases the maintenance burden, as any change to the list of excluded publications requires modifying every single metric's SQL definition.","AND (STRPOS(unified_publication_name, 'ADMIN') <= 0 OR STRPOS(unified_publication_name, 'admin') <= 0 OR STRPOS(unified_publication_name, 'Run') <= 0 OR STRPOS(unified_publication_name, 'Taboola') <= 0 OR STRPOS(unified_publication_name, 'CODE') <= 0 OR STRPOS(unified_publication_name, 'CodeBet') <= 0 OR STRPOS(unified_publication_name, 'Punters.com.au') <= 0 OR STRPOS(unified_publication_name, 'odds.com.au') <= 0 OR STRPOS(unified_publication_name, 'RACENET') <= 0 OR STRPOS(unified_publication_name, 'Racenet App') <= 0 OR STRPOS(unified_publication_name, 'SUDDENLY') <= 0 OR STRPOS(unified_publication_name, 'SUPERCOACH') <= 0 OR STRPOS(unified_publication_name, 'Sky News') <= 0 OR STRPOS(unified_publication_name, 'Stockhead') <= 0)
    AND source_system_code NOT IN ('LGBPUB')
    AND publication_name NOT IN ('racenet.com.au', 'punters.com.au', 'odds.com.au', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'TASTE.ADMIN', 'TAUS.ADMIN', 'Stockhead', 'SkyNews', 'SKYNEWS', 'RACENET', 'NEWS.ADMIN', 'KIDSPOT.ADMIN', 'GQ.ADMIN', 'ESCAPE.ADMIN', 'DELICIOUS.ADMIN', 'BODYANDSOUL.ADMIN', 'ADMIN.TCM', 'ADMIN.SALES', 'ADMIN.DTM', 'ADMIN.HWT')","Create a dedicated lookup table or a governed view that pre-filters `v_adsales_revenue_client` based on these exclusion criteria. This centralizes the filtering logic, making it easier to manage and ensuring consistency across all metrics. Alternatively, define these exclusions as a common dimension or filter within the Looker Studio model itself.",208,85af3509-d3b5-433d-83d2-d49a89ad4f0b
"total_video_revenue_by_video_type_fy2025, total_video_revenue_by_type_and_targeting_fy2025_weeks44_52",Hardcoded Logic / Anti-Pattern,"The `video_type` dimension is derived from `adsize_name` using an extremely long and complex `CASE` statement. This exact logic is duplicated across multiple metrics. Any new `adsize_name` value or change in categorization requires manual updates in multiple places, significantly increasing the risk of inconsistency and errors. The `ELSE SAFE_CAST(adsize_name AS STRING)` suggests that some `adsize_name` values might not be explicitly mapped, potentially leading to unclassified or misclassified revenue.","CASE
        WHEN (STRPOS(adsize_name, 'Adaptive Video') > 0) THEN 'Adaptive'
        WHEN (STRPOS(adsize_name, 'adaptive video') > 0) THEN 'Adaptive'
        WHEN (adsize_name = 'video view cpcv 30 sec' OR adsize_name = 'video view cpcv 15 sec' OR adsize_name = 'video reach 6 / 15 sec' OR adsize_name = 'video view cpcv 6 sec') THEN 'Blended'
        WHEN (adsize_name = 'in-article block' OR adsize_name = 'in-article video' OR adsize_name = 'in-article video (all devices)' OR adsize_name = 'in-article video mob' OR adsize_name = 'in-article shorts 6 / 15 sec') THEN 'In-Article'
        -- ... (many more lines of similar logic) ...
        ELSE SAFE_CAST(adsize_name AS STRING)
    END AS video_type","Create a dedicated dimension table for `video_type` that maps `adsize_name` to its corresponding `video_type`. This table can then be joined to `v_adsales_revenue_client` in a view or directly in the Looker Studio model. This centralizes the mapping logic, improves maintainability, and allows for easier auditing and expansion without modifying individual metric definitions.",208,85af3509-d3b5-433d-83d2-d49a89ad4f0b
"total_video_revenue_by_advertiser_gm_fy2025, total_video_revenue_by_cost_model_ian_fy2025, total_video_revenue_by_type_and_targeting_fy2025_weeks44_52",Hardcoded Logic,"Specific GM names (e.g., 'Ian', 'Natalie', 'Renee', 'Kelly') and financial weeks (44-52) are hardcoded directly into the SQL queries. This makes the metrics inflexible and requires manual updates if the GMs change, if new GMs are added, or if the reporting period needs adjustment for different analyses.","GM names: `AND (STRPOS(sales_segment_gm_name, 'Ian') > 0 OR STRPOS(sales_segment_gm_name, 'Natalie') > 0 OR STRPOS(sales_segment_gm_name, 'Renee') > 0 OR STRPOS(sales_segment_gm_name, 'Kelly') > 0)`
Weeks: `AND SAFE_CAST(financial_week AS INT64) IN (44, 45, 46, 47, 48, 49, 50, 51, 52)`","For GMs, consider using a lookup table for sales segments or parameterizing the GM names if the dashboard is intended for dynamic filtering. For financial weeks, leverage dynamic date functions or Looker Studio's built-in date range filters to avoid hardcoding specific week numbers, allowing for more flexible and dynamic reporting periods.",208,85af3509-d3b5-433d-83d2-d49a89ad4f0b
total_video_revenue_by_type_and_targeting_fy2025_weeks44_52,Anti-Pattern / Inefficient Query,"The `WHERE` clause redundantly re-evaluates the same complex `CASE` statements used in the `SELECT` clause to filter `video_type` and `targeting_type`. This is inefficient as the calculation is performed twice for each row. It also suggests that the `CASE` statements might produce values outside the explicitly listed ones, which are then filtered out, indicating potential gaps or incomplete mapping logic in the `CASE` statement itself.","AND (
        CASE
            WHEN (STRPOS(adsize_name, 'Adaptive Video') > 0) THEN 'Adaptive'
            -- ... (same as SELECT clause) ...
            ELSE SAFE_CAST(adsize_name AS STRING)
        END
    ) IN ('Pre-Roll', 'Blended', 'In-Article', 'Social Video', 'Tubi', 'Adaptive', 'Outstream', 'Total Video Content', 'Vertical', 'Tubi.tv instream 15 sec', 'xxx Tubi.tv instream 6-30 sec', 'Tubi.tv instream 30 sec', 'Shoppable', 'Not Available')
    AND (
        CASE
            WHEN (fin_adtype_name = 'Social Video (Targeted)' OR fin_adtype_name = 'Video (Targeted)' OR fin_adtype_name = 'Video Growth (Targeted)') THEN 'Targeted'
            WHEN (fin_adtype_name = 'Social Video (Non-Targeted)' OR fin_adtype_name = 'Video (Non-Targeted)' OR fin_adtype_name = 'Video Growth (Non-Targeted)') THEN 'Non-Targeted'
            ELSE SAFE_CAST(fin_adtype_name AS STRING)
        END
    ) IN ('Non-Targeted', 'Targeted')","Refactor the query to first define the `video_type` and `targeting_type` in a subquery or a view, and then apply filters to these aliased columns. This improves readability and query efficiency. More importantly, review the `CASE` statements to ensure they are exhaustive and correctly map all expected values, potentially making the `IN` clause unnecessary if the `ELSE` condition is handled appropriately (e.g., mapping to 'Other' or 'Unknown').",208,85af3509-d3b5-433d-83d2-d49a89ad4f0b
previous_fy_video_revenue,Logic Ambiguity,"The metric calculates revenue for `relative_fy_year_offset = -1`. While this is a valid approach for identifying the previous financial year, the query lacks an explicit `financial_year` filter for the *current* context (e.g., `financial_year IN ('2025')`), unlike other metrics. This implies that `relative_fy_year_offset` is a pre-calculated column that inherently accounts for the current reporting context. If `relative_fy_year_offset` is not dynamically calculated relative to the current date or a dashboard-wide `financial_year` filter, it could lead to misinterpretation or misalignment with other FY2025 metrics.","SELECT
    SUM(CASE WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount ELSE 0 END) AS previous_fy_video_revenue
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
    revenue_transaction_status IN ('Booked', 'Billed')
    AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL)
    AND revenue_type = 'Digital'
    -- ... (common filters) ...
    AND fin_adtype_name IN ('Video Growth (Targeted)', 'Video Growth (Non-Targeted)', 'Video (Targeted)', 'Video (Non-Targeted)', 'Social Video (Targeted)', 'Social Video (Non-Targeted)')
    -- Missing financial_year IN ('2025') or similar filter here","Clarify the definition and calculation of `relative_fy_year_offset`. If it's intended to be relative to a specific `financial_year` (e.g., FY2025), then add `AND financial_year = '2024'` or `AND financial_year = (CURRENT_FINANCIAL_YEAR - 1)` to explicitly define the target year, ensuring consistency with other FY2025 metrics. If `relative_fy_year_offset` is truly dynamic and relative to the current date, document this clearly in the data model.",208,85af3509-d3b5-433d-83d2-d49a89ad4f0b
daily_website_target_code_sports,Hardcoded Logic,"The SQL query for 'Daily Website Target (Code Sports)' hardcodes the target date to '2025-07-02'. This prevents the dashboard from displaying current or dynamic daily targets, rendering it static and requiring manual updates for each new day. This fundamentally undermines the 'daily' aspect of the metric.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-07-02'","Replace the hardcoded date with a dynamic date parameter (e.g., a Looker Studio date range filter or a BigQuery `_PARTITIONTIME` filter if applicable) to allow the dashboard to display targets for the selected date range.",209,5645b0e9-2850-4984-b808-b90bcb74ed92
daily_website_target_code_sports,Hardcoded Logic,"The SQL query hardcodes the website filter to 'Code Sports'. While this aligns with the dashboard's specific name and purpose, it limits reusability if similar dashboards are needed for other websites, or if the dashboard needs to show aggregated data across multiple websites in the future.",AND t0.website = 'Code Sports',"For this specific dashboard, the hardcoding might be acceptable given its name. However, for future generalization or reusability, consider externalizing 'Code Sports' into a dashboard filter or a parameter.",209,5645b0e9-2850-4984-b808-b90bcb74ed92
daily_website_target_code_sports,Anti-Pattern,"The `targetdate` column is cast from `STRING` and then parsed into a `DATE`. This suggests `targetdate` might not be stored in an optimal `DATE` or `TIMESTAMP` format in the source table, potentially impacting query performance and readability.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))","Investigate the underlying data type of `targetdate` in the `subscription_targets` table. If possible, store dates as native `DATE` or `TIMESTAMP` types to avoid unnecessary casting and parsing, improving query efficiency and maintainability.",209,5645b0e9-2850-4984-b808-b90bcb74ed92
daily_website_target_code_sports,Anti-Pattern,"The `LIMIT 1` clause is redundant for a `SUM` aggregation without a `GROUP BY`, as a `SUM` will always return a single row. While harmless in this specific context, it adds unnecessary complexity and can be misleading in other scenarios.",LIMIT 1;,Remove the `LIMIT 1` clause as it serves no functional purpose for this aggregate query.,209,5645b0e9-2850-4984-b808-b90bcb74ed92
paid_impressions_guaranteed_cw_jun2025,Hardcoded Logic|Anti-Pattern,"This metric is hardcoded to calculate paid impressions for a very specific combination of 'Guaranteed' transaction type, 'Chemist Warehouse *' advertiser, and the month of June 2025. This practice creates a rigid, non-reusable metric that will lead to metric sprawl if similar specific data points are required (e.g., different advertisers, transaction types, or months). It suggests a lack of dynamic filtering or parameterization within the dashboard design.","WHERE t0.TransactionType IN ('Guaranteed') AND t0.Advertiser IN ('Chemist Warehouse *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-06-01');","Refactor the dashboard to utilize Looker Studio's native filtering, control components, or parameters. Instead of creating new metrics for each specific combination, allow users to dynamically select 'TransactionType', 'Advertiser', and 'Month Start Date' against the base `total_paid_impressions` metric. This promotes reusability, reduces metric count, and improves dashboard maintainability.",210,87651b69-c43e-471f-9c4b-98df1208a844
revenue_gross_guaranteed_cw_jun2025,Hardcoded Logic|Anti-Pattern,"Similar to the paid impressions metric, this revenue metric is hardcoded for 'Guaranteed' transaction type, 'Chemist Warehouse *' advertiser, and June 2025. This rigid definition is an anti-pattern for scalable dashboard design, as it necessitates creating new metrics for every unique combination of these dimensions, leading to an unmanageable number of metrics over time.","WHERE t0.TransactionType IN ('Guaranteed') AND t0.Advertiser IN ('Chemist Warehouse *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-06-01');","Implement dynamic filtering or parameterization within the Looker Studio dashboard. Users should be able to apply filters for 'TransactionType', 'Advertiser', and 'Month Start Date' to the base `total_revenue_gross` metric, eliminating the need for these highly specific, hardcoded metrics. This enhances flexibility and reduces technical debt.",210,87651b69-c43e-471f-9c4b-98df1208a844
delivery_event_count_by_location_filtered_by_date,Hardcoded Logic,"This metric, along with 'delivery_event_count_by_delivery_time_filtered_by_date' and 'delivery_location_filtered_by_subscription_id', uses a hardcoded date range (April 23, 2025, to May 20, 2025). This severely limits the dashboard's utility for ongoing analysis, requiring manual updates for any change in the reporting period and hindering its reusability.","WHERE edition_date >= PARSE_DATE('%Y%m%d', '20250423') AND edition_date <= PARSE_DATE('%Y%m%d', '20250520')","Replace hardcoded dates with Looker Studio date range parameters or dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`) to enable users to select their desired reporting period dynamically.",211,d200e676-935c-4ae4-abad-abf3addd82c2
delivery_location_filtered_by_subscription_id,Hardcoded Logic,"The SQL logic for this metric includes a hardcoded filter for a specific `newscycle_subscription_id` ('6784910'). This makes the metric useful only for analyzing this single subscription, preventing broader analysis or dynamic filtering by other subscription IDs.",AND t0.newscycle_subscription_id = '6784910',"Parameterize the subscription ID using a Looker Studio control (e.g., a text input or dropdown filter) to allow users to dynamically select the subscription they wish to analyze.",211,d200e676-935c-4ae4-abad-abf3addd82c2
all_metrics,Anti-Pattern,"All five metrics in the dashboard include a `LIMIT 100` clause in their SQL queries. This critically restricts the number of rows returned, making the dashboard unsuitable for comprehensive data analysis, aggregation, or visualization of trends beyond the first 100 records. This is a significant limitation for any production-ready dashboard.",LIMIT 100 (present at the end of all SQL queries),"Remove the `LIMIT 100` clause from all production queries. If this was intended for development or testing, ensure a clear process for its removal before deployment. If it's a performance optimization, explore more appropriate methods like pre-aggregation, materialized views, or optimizing the underlying data model and Looker Studio's caching mechanisms.",211,d200e676-935c-4ae4-abad-abf3addd82c2
delivery_location_dimension,Anti-Pattern,"The logic for concatenating latitude and longitude into a 'delivery_location' string (`CONCAT(SAFE_CAST(t0.subscription_lat AS STRING), ',', SAFE_CAST(t0.subscription_lng AS STRING))`) is repeated across multiple metrics. While functional, this redundancy can lead to inconsistencies if the definition needs to change and makes maintenance less efficient.","CONCAT(SAFE_CAST(t0.subscription_lat AS STRING), ',', SAFE_CAST(t0.subscription_lng AS STRING)) AS delivery_location","Define 'delivery_location' as a calculated field within the Looker Studio data source itself, or as a view in BigQuery, to ensure consistency and establish a single source of truth for this dimension.",211,d200e676-935c-4ae4-abad-abf3addd82c2
last_subscription_timestamp,Hardcoded Logic,"This metric, intended for monitoring, uses a hardcoded date range (January 2023). This means the dashboard will always display data from that specific month, making it ineffective for current operational monitoring. This issue is repeated across related metrics.","WHERE DATE(subscriptiondatetime) BETWEEN PARSE_DATE('%Y%m%d', '20230101') AND PARSE_DATE('%Y%m%d', '20230131')","Replace the hardcoded date range with dynamic date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)` or `CURRENT_DATE()`) or leverage Looker Studio's built-in date range parameters to allow users to select the desired period.",212,3c161a70-2994-4beb-958e-29e06f9053c4
subscription_received_minutes_ago,Hardcoded Logic,"Similar to 'Last Subscription Timestamp', this metric also uses a hardcoded date range (January 2023). This makes the 'minutes ago' calculation irrelevant for current monitoring, as it's based on old, static data.","WHERE DATE(subscriptiondatetime) BETWEEN PARSE_DATE('%Y%m%d', '20230101') AND PARSE_DATE('%Y%m%d', '20230131')","Implement dynamic date filtering using `CURRENT_DATE()` or `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)` to ensure the metric reflects recent subscription activity. Consider using a shared view for `t_subscription_details_snapshot_summary` with a dynamic date filter if multiple metrics depend on it.",212,3c161a70-2994-4beb-958e-29e06f9053c4
total_processed_gb_app_engine,Anti-Pattern,"This metric, along with 'Total Billed GB (App Engine)', contains a highly complex and duplicated `verity_usage` CTE. This CTE includes extensive, nested `CASE` statements to classify `querySource` and `process` based on `principalEmail` and job labels. This logic is hardcoded, difficult to read, maintain, and prone to errors if new principalEmails or label patterns emerge. The same complex logic is repeated in the 'Total Billed GB' metric.","CASE
        WHEN protopayload_auditlog.authenticationInfo.principalEmail LIKE 'ds-%' THEN 'Data Studio'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'verity-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com' THEN 'Verity 2'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'ncau-data-newsquery-prd@appspot.gserviceaccount.com' THEN 'App Engine'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'prd-composer@ncau-data-newsquery-prd.iam.gserviceaccount.com' THEN
        CASE
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'batchtype'
          ) > 0 THEN 'Verity 1'
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key IN ('benchmarktype', 'applicaiton', 'application')
          ) > 0 THEN 'Verity 2'
          ELSE 'Other'
        END
      END AS querySource,","Extract the `verity_usage` CTE into a dedicated BigQuery view (e.g., `bq_usage_classified_v`). This view should pre-classify `querySource` and `process`. This would centralize the complex logic, improve readability, and simplify maintenance. Any new classification rules would only need to be updated in one place. Consider creating a lookup table for `principalEmail` to `querySource` mappings if they are static.",212,3c161a70-2994-4beb-958e-29e06f9053c4
total_billed_gb_app_engine,Anti-Pattern,"This metric duplicates the exact same complex `verity_usage` CTE found in 'Total Processed GB (App Engine)'. This leads to redundant code, increased maintenance burden, and potential for inconsistencies if changes are made to one but not the other.","WITH verity_usage AS (
    SELECT
      protopayload_auditlog.authenticationInfo.principalEmail AS User,
      date(datetime(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.createTime,
          ""Australia/Sydney"")) AS UsageDate,
      protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalProcessedBytes,
      protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalBilledBytes,
      CASE
        WHEN protopayload_auditlog.authenticationInfo.principalEmail LIKE 'ds-%' THEN 'Data Studio'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'verity-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com' THEN 'Verity 2'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'ncau-data-newsquery-prd@appspot.gserviceaccount.com' THEN 'App Engine'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'prd-composer@ncau-data-newsquery-prd.iam.gserviceaccount.com' THEN
        CASE
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'batchtype'
          ) > 0 THEN 'Verity 1'
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key IN ('benchmarktype', 'applicaiton', 'application')
          ) > 0 THEN 'Verity 2'
          ELSE 'Other'
        END
      END AS querySource,
      CASE
        WHEN protopayload_auditlog.authenticationInfo.principalEmail LIKE 'ds-%' THEN substr(split(protopayload_auditlog.authenticationInfo.principalEmail,
            '@')[safe_ordinal(1)], 4)
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'ncau-data-newsquery-prd@appspot.gserviceaccount.com' THEN 'App Engine'
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'prd-composer@ncau-data-newsquery-prd.iam.gserviceaccount.com' THEN
        CASE
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'batchtype'
          ) > 0 THEN(
            SELECT
              label.value
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'batchtype'
            LIMIT 1)
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'benchmarktype'
          ) > 0 THEN 'benchmark'
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.value = 'alteryx'
          ) > 0 THEN(
            SELECT
              label.value
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'component'
            LIMIT 1)
          WHEN(
            SELECT
              count(1)
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key IN ('applicaiton', 'application')
          ) > 0 THEN(
            SELECT
              label.value
            FROM
              UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
            WHERE
              label.key = 'process'
            LIMIT 1)
        END
        WHEN protopayload_auditlog.authenticationInfo.principalEmail = 'verity-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com' THEN(
          SELECT
            label.value
          FROM
            UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
          WHERE
            label.key = 'process'
        )
      END AS process
    FROM
      `ncau-data-newsquery-prd.ops_prd_bq_logs.cloudaudit_googleapis_com_data_access_*`
    WHERE
      _TABLE_SUFFIX BETWEEN FORMAT_DATE('%Y%m%d', DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) AND FORMAT_DATE('%Y%m%d', CURRENT_DATE()) AND (protopayload_auditlog.authenticationInfo.principalEmail LIKE 'ds-%' OR
      protopayload_auditlog.authenticationInfo.principalEmail = 'verity-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com' OR
      protopayload_auditlog.authenticationInfo.principalEmail = 'prd-composer@ncau-data-newsquery-prd.iam.gserviceaccount.com' OR
      protopayload_auditlog.authenticationInfo.principalEmail = 'ncau-data-newsquery-prd@appspot.gserviceaccount.com') AND
      protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobStatistics.totalProcessedBytes IS NOT null AND
      (
        SELECT
          count(1)
        FROM
          UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
        WHERE
          label.value = 'circs'
      ) = 0 AND (
        SELECT
          count(1)
        FROM
          UNNEST(protopayload_auditlog.servicedata_v1_bigquery.jobCompletedEvent.job.jobConfiguration.labels) AS label
        WHERE
          label.key LIKE '%recon%'
      ) = 0
  )","As recommended for 'Total Processed GB (App Engine)', create a shared BigQuery view for the `verity_usage` CTE. Both metrics can then query this single, well-defined view, significantly reducing code duplication and improving maintainability.",212,3c161a70-2994-4beb-958e-29e06f9053c4
data_freshness_status,Hardcoded Logic,"This metric, along with 'Count of Tables by Freshness Status', relies on a massive `table_list` CTE that hardcodes every monitored table's `datasetid`, `tableid`, and `update_frequency` using a long series of `UNION ALL` statements. This approach is highly unscalable and difficult to manage. Adding or removing a table requires modifying the SQL logic directly, which is error-prone and bypasses metadata management best practices.","WITH table_list AS (
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interaction_detail_navigation' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_agg_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_daily_agg_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_pv' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_amp_demographics_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_amp_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_app_demographics_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_app_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_web_demographics_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_web_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interaction_detail_navigation_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_agg_fct_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_daily_agg_fct_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_pv_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_summary' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_breach' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_breachsubs' AS datasetid,
      'think_consumer_orders' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_breachsubs' AS datasetid,
      'think_consumer_orders_demographics' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_agg_fct' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_daily_agg_fct' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_fct_refresh' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_summary' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_breach_refresh' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_content' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_promotion' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_article' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_collection' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_content_01' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_content_02' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_gallery' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'collection_promotion_dim' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_content_refresh' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_promotion_refresh' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_collection_01' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_collection_02' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_comments_daily_agg_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'coral_comments_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_comments_agg_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_comments_daily_agg_fct_refresh' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'anonymous_demographics_lookup' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'subscriber_demographics_lookup' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interaction_detail_navigation_agg_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_details_agg' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      'content_interaction_insights' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_content_summary' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_content_summary_cache' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_content_summary_lastupdate_cache' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_subscription_details_snapshot_summary' AS tableid
  )","Create a dedicated BigQuery metadata table (e.g., `monitoring.table_freshness_config`) to store `datasetid`, `tableid`, and `update_frequency`. The SQL query can then simply join to this table, making the list of monitored tables dynamic and easily manageable without modifying SQL code. Additionally, the common CTEs (`table_update_list`, `load_stats`, `final_data`) should be extracted into a shared view to avoid duplication.",212,3c161a70-2994-4beb-958e-29e06f9053c4
count_tables_by_freshness_status,Anti-Pattern,"This metric duplicates the exact same massive `table_list` CTE and subsequent complex logic found in 'Data Freshness Status'. This is a significant anti-pattern, leading to redundant code, increased query complexity, and a higher risk of inconsistencies if the list of monitored tables or freshness logic needs to be updated.","WITH table_list AS (
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interaction_detail_navigation' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_agg_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_daily_agg_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_pv' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_amp_demographics_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_amp_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_app_demographics_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_app_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_web_demographics_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'clickstream_web_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interaction_detail_navigation_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_agg_fct_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_daily_agg_fct_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_pv_refresh' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_summary' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_breach' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_breachsubs' AS datasetid,
      'think_consumer_orders' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_breachsubs' AS datasetid,
      'think_consumer_orders_demographics' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_agg_fct' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_daily_agg_fct' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_fct_refresh' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'breach_subscriptions_summary' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_breach_refresh' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_content' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_promotion' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_article' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_collection' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_content_01' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_content_02' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_gallery' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'collection_promotion_dim' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_content_refresh' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_detail_promotion_refresh' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_collection_01' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'cdm_capi' AS datasetid,
      'capi_collection_02' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_comments_daily_agg_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'coral_comments_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_comments_agg_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_comments_daily_agg_fct_refresh' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'anonymous_demographics_lookup' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'cdm_adobe' AS datasetid,
      'subscriber_demographics_lookup' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interaction_detail_navigation_agg_fct' AS tableid
    UNION ALL
    SELECT
      30 AS update_frequency,
      'bdm_verity' AS datasetid,
      'content_interactions_details_agg' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      'content_interaction_insights' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_content_summary' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_content_summary_cache' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_content_summary_lastupdate_cache' AS tableid
    UNION ALL
    SELECT
      5 AS update_frequency,
      'prstn_verity' AS datasetid,
      't_subscription_details_snapshot_summary' AS tableid
  )","As recommended for 'Data Freshness Status', create a shared BigQuery metadata table for `update_frequency` and a shared view for the common freshness calculation logic. This will eliminate code duplication and centralize the definition of monitored tables and their expected update frequencies.",212,3c161a70-2994-4beb-958e-29e06f9053c4
total_package_order_events,Hardcoded Logic,"This metric uses a hardcoded future date ('2025-07-15') in its `WHERE` clause. This means the metric will always return zero or null until that specific date, making it useless for current monitoring purposes.","AND date(datetime(ingesttime, ""Australia/Sydney"")) = DATE '2025-07-15'","Replace the hardcoded future date with a dynamic date filter, such as `CURRENT_DATE()` or `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`, to ensure the metric reflects recent data. If this was intended for a future test, it should be clearly documented or removed from a production monitoring dashboard.",212,3c161a70-2994-4beb-958e-29e06f9053c4
added_package_order_events,Hardcoded Logic,"This metric also contains the same hardcoded future date ('2025-07-15') as 'Total Package Order Events', rendering it non-functional for current monitoring.","AND date(datetime(ingesttime, ""Australia/Sydney"")) = DATE '2025-07-15'","Update the date filter to use dynamic date functions (e.g., `CURRENT_DATE()`) to ensure the metric provides relevant, up-to-date information.",212,3c161a70-2994-4beb-958e-29e06f9053c4
mwre_package_order_events,Hardcoded Logic|Anti-Pattern,"This metric suffers from the same hardcoded future date ('2025-07-15') issue. Additionally, it uses a nested subquery (`SELECT count(1) FROM UNNEST(orders) WHERE sourcecode LIKE '%MRE%' OR sourcecode LIKE '%WRE%'`) within an `IF` condition. While functional, this pattern can be less performant and harder to read than alternative approaches, especially if `orders` is a large array.","AND date(datetime(ingesttime, ""Australia/Sydney"")) = DATE '2025-07-15'
SELECT sum(if(EVENT_TYPE = 'TE_PACKAGE_ORDER_ADDED' AND (SELECT count(1) FROM UNNEST(orders) WHERE sourcecode LIKE '%MRE%' OR sourcecode LIKE '%WRE%') > 0, 1, 0)) AS mwre_events","Correct the hardcoded date to a dynamic one. For the nested subquery, consider unnesting `orders` in a separate CTE or using `EXISTS` with `UNNEST` for better readability and potential performance improvements, e.g., `EXISTS (SELECT 1 FROM UNNEST(orders) AS o WHERE o.sourcecode LIKE '%MRE%' OR o.sourcecode LIKE '%WRE%')`.",212,3c161a70-2994-4beb-958e-29e06f9053c4
weekly_live_streams_target_by_pub_group,Hardcoded Logic,"This metric, intended for a 'Weekly Wrap' report, uses a hardcoded date range (March 31 - April 6, 2025). This makes the dashboard static and unable to dynamically display the current week's data, rendering it obsolete for ongoing weekly reporting without manual updates.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN DATE '2025-03-31' AND DATE '2025-04-06'","Replace the hardcoded date range with dynamic date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)` and `CURRENT_DATE()`) to automatically reflect the current week. Consider implementing Looker Studio's date range controls for user flexibility.",213,6575ef79-5264-4580-998a-8150e679f565
total_news_corp_sports_live_streams_target,Hardcoded Logic,"This metric also uses a hardcoded date range (July 1, 2024 - June 29, 2025), which is a nearly year-long period. While potentially useful for an annual target, its inclusion in a 'Weekly Wrap' dashboard with a fixed, long-term period is incongruous and misleading for a weekly performance overview.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN DATE '2024-07-01' AND DATE '2025-06-29'","Re-evaluate the purpose of this metric within a 'Weekly Wrap' dashboard. If it's meant to be a weekly target, apply dynamic weekly date filtering. If it's an annual target, ensure its presentation clearly indicates its long-term scope and consider if it truly belongs in a weekly report, or if it should be part of a separate, annual performance dashboard.",213,6575ef79-5264-4580-998a-8150e679f565
weekly_live_streams_target_by_pub_group,Hardcoded Logic,"The metric filters `publication_group` using a hardcoded `REGEXP_CONTAINS` string ('Live Streams'). While functional, this approach is less robust than using a defined lookup or categorization if the naming conventions for publication groups are subject to change or if more complex grouping logic is required.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'Live Streams')","For improved maintainability and flexibility, consider defining publication group categories in a separate lookup table or a well-governed `CASE` statement if the categories are fixed and few. This would allow for easier updates and more complex categorization logic without modifying core metric SQL.",213,6575ef79-5264-4580-998a-8150e679f565
total_news_corp_sports_live_streams_target,Hardcoded Logic,"This metric uses a direct hardcoded string equality filter for `publication_group` ('News Corp Sports Live Streams'). Similar to the `REGEXP_CONTAINS` issue, this is brittle if the exact string name changes or if the dashboard needs to analyze other specific publication groups without SQL modification.",SAFE_CAST(t0.publication_group AS STRING) = 'News Corp Sports Live Streams',"As with the previous point, if publication groups are a fixed, small set, consider using a parameter or a `CASE` statement for clearer categorization. For a larger or evolving set, creating a lookup table for publication groups and joining to it would provide more robust filtering and categorization capabilities.",213,6575ef79-5264-4580-998a-8150e679f565
dim_business_type,Hardcoded Logic|Anti-Pattern,The business logic for 'Business Type' (B2C/B2B) is hardcoded as a CASE statement within this metric's SQL. This exact logic is duplicated in the `dim_product_classification_level_3` and `dim_product_grouping` metrics. This redundancy increases maintenance overhead and the risk of inconsistencies if the business rules for classification change.,"CASE WHEN (t0.classification_level_2 IN ('Consumer', 'Gift Receiver')) THEN 'B2C' WHEN (t0.classification_level_2 IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B' ELSE 'Others' END","Centralize the 'Business Type' classification logic. This can be achieved by: 1) Creating a dedicated dimension table that maps `classification_level_2` to `business_type`. 2) Implementing a BigQuery view or UDF to encapsulate this logic. 3) If using Looker, defining this as a derived table or a robust dimension within the LookML model, allowing other metrics to reference it.",214,0e05b4ce-cb33-488a-8537-b9e68a844e2e
dim_masthead_group_v2,Hardcoded Logic|Anti-Pattern,The business logic for 'Masthead Group V2' is hardcoded as a CASE statement within this metric's SQL. This exact logic is duplicated in the `dim_product_classification_level_3` and `dim_product_grouping` metrics. This redundancy makes updates cumbersome and prone to errors.,"CASE WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals' WHEN (t0.masthead = 'WT') THEN 'Other Publications' WHEN (t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications' WHEN (t0.masthead IS NULL) THEN 'check' ELSE 'Exclude' END","Centralize the 'Masthead Group V2' classification logic. Similar to 'Business Type', this should be moved to a dedicated dimension table, a BigQuery view/UDF, or a LookML model definition to ensure consistency and ease of maintenance across all dependent metrics.",214,0e05b4ce-cb33-488a-8537-b9e68a844e2e
dim_product_classification_level_3,Hardcoded Logic|Anti-Pattern,"This metric uses a complex, multi-layered CASE statement to derive 'Product Classification Level 3'. It re-implements logic for 'business_type' and 'masthead_group_v2' (already defined in other metrics) and then applies further nested conditions. This creates a brittle classification system that is difficult to read, debug, and maintain. Any new product or change in classification rules requires direct modification of this complex SQL.","WITH base_data AS (...), derived_intermediate_dims AS (SELECT *, CASE WHEN (classification_level_2 IN ('Consumer', 'Gift Receiver')) THEN 'B2C' ... END AS business_type, CASE WHEN (masthead = 'TA') THEN 'The Australian' ... END AS masthead_group_v2, CASE WHEN (classification_level_2 = 'Essentials') THEN 'Essentials' ... END AS product_classification_level_3_intermediate FROM base_data) SELECT CASE WHEN (business_type = 'B2B') THEN classification_level_2 ... ELSE classification_level_2 END AS product_classification_level_3 FROM derived_intermediate_dims","Replace the hardcoded, chained CASE statements with a governed product dimension table. This table would pre-calculate and store all product classification levels (e.g., `business_type`, `masthead_group_v2`, `product_classification_level_3`, `product_grouping`) based on source attributes. The dashboard's metrics would then simply join to this dimension table, significantly improving maintainability, scalability, and data governance.",214,0e05b4ce-cb33-488a-8537-b9e68a844e2e
dim_product_grouping,Hardcoded Logic|Anti-Pattern,"This metric builds upon the already complex `product_classification_level_3` (which itself contains duplicated logic) with another large, hardcoded CASE statement to define 'Product Grouping'. The presence of `ELSE 'Check for New Products'` indicates an expectation of new values, which will fall into a generic bucket, potentially masking important data. This chaining of complex, hardcoded logic makes the entire product classification system extremely fragile.","WITH base_data AS (...), derived_intermediate_dims AS (...), final_derived_dims AS (SELECT *, CASE WHEN (business_type = 'B2B') THEN classification_level_2 ... END AS product_classification_level_3 FROM derived_intermediate_dims) SELECT CASE WHEN (product_classification_level_3 = 'Print 7 Day' OR ... OR '3rd Party and Others') THEN 'Core Consumer' WHEN (product_classification_level_3 = 'Campus' OR ... OR 'SMB') THEN 'B2B' WHEN (product_classification_level_3 = 'Null' OR ... OR 'Print Weekend') THEN 'Deep Niche Products' ELSE 'Check for New Products' END AS product_grouping FROM final_derived_dims","As with `dim_product_classification_level_3`, this logic should be part of a centralized, governed product dimension table. This table would contain the definitive mapping for all product groupings, allowing for easy updates and ensuring consistency across all reporting. The 'Check for New Products' scenario should be handled proactively through data quality checks and a clear process for updating the dimension table, rather than a generic 'else' clause in the SQL.",214,0e05b4ce-cb33-488a-8537-b9e68a844e2e
all_dimension_metrics,Anti-Pattern,"All dimension metrics (`dim_product_classification_level_3`, `dim_product_grouping`, `dim_business_type`, `dim_subscription_type`, `dim_masthead_group_v2`, `dim_fy_year`, `dim_fy_week_of_year`, `dim_masthead`, `dim_offer_category_group_name`, `dim_offer_category_name`, `dim_subscription_movement_sub_type`) include `LIMIT 1` in their SQL logic. While this might be an artifact of how the SQL was extracted for preview, if these queries are executed as-is for dashboard rendering, they would severely limit the utility of these dimensions by only returning a single arbitrary value.",SELECT ... FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0 LIMIT 1;,"Verify the actual SQL queries generated by Looker Studio for these dimensions. If `LIMIT 1` is present in the production queries, it must be removed to allow the dimensions to function correctly for grouping, filtering, and displaying all relevant values. This is a critical functional issue if not an extraction artifact.",214,0e05b4ce-cb33-488a-8537-b9e68a844e2e
"total_gcp_cost, total_gcp_cost_contentlake_monthly, total_gcp_cost_prod_genai_monthly",Hardcoded Logic,"All three metrics use an identical, hardcoded list of project IDs in their `WHERE` clauses. This approach is inflexible, difficult to maintain, and prone to errors. Any change to the set of relevant AI/ML projects requires manual modification of each metric's SQL, increasing the risk of inconsistencies and outdated data.","bill.project.id IN ('nca-datapl-dev-genai', 'nca-datapl-dev-finaipoc', 'nca-data-prod-aisummarize', 'nca-datapl-prod-genai', 'nca-taiste-prod-taiste', 'nca-ola-prod-data', 'nca-datapl-prod-conintai', 'nca-cts-prod-tddxai', 'nca-datapl-nonprod-tasteaiconc', 'nca-datapl-prod-tasteaiconc', 'ncau-data-nprod-aitrain', 'nca-cts-nonprod-tddxai', 'ncau-data-nprod-taiste', 'nca-datapl-dev-contentsearch')","Centralize the list of AI/ML related project IDs in a dedicated, governed lookup table (e.g., `ncau_gcp_metaadata.ai_ml_projects`). Modify the metrics to `INNER JOIN` or `LEFT JOIN` to this lookup table to filter projects. This allows for dynamic updates to the project list without altering metric definitions and improves maintainability.",215,a6b35c09-d774-4509-95d0-4e3c05417e57
"total_gcp_cost_contentlake_monthly, total_gcp_cost_prod_genai_monthly",Anti-Pattern,"Project categorization (e.g., 'contentlake', 'prod-genai') is performed using `STRPOS` (string position) on the `metadata.projectId` field. This string-matching approach is fragile, error-prone, and not scalable. It relies on specific naming conventions that can change, leading to broken categorization, and does not allow for explicit, governed definitions of project categories.","AND STRPOS(metadata.projectId, 'contentlake') > 0","Enhance the `ncau_gcp_metaadata.ncau-gcp-projects-metadata` table (or create a new lookup table) to include explicit project classification attributes (e.g., `project_category`, `project_type`). Filter on these explicit, governed attributes instead of relying on fragile string matching. This provides robust and maintainable categorization.",215,a6b35c09-d774-4509-95d0-4e3c05417e57
"total_gcp_cost, total_gcp_cost_contentlake_monthly, total_gcp_cost_prod_genai_monthly",Anti-Pattern,"All metrics utilize a `FULL JOIN` between the billing export table (`bill`) and the project metadata table (`metadata`). However, the `metadata` table is not consistently used for filtering or enrichment across all metrics, and when it is, it's for string matching. For `total_gcp_cost`, the `metadata` table is joined but not used in the `WHERE` clause for filtering, making the `FULL JOIN` potentially inefficient or indicating a misunderstanding of its purpose. A `FULL JOIN` implies that records from both tables are desired even without a match, which doesn't align with the subsequent filtering on `bill.project.id` or `metadata.projectId`. This could lead to unexpected results or performance overhead.",FULL JOIN `ncau-tech-mgmt.ncau_gcp_metaadata.ncau-gcp-projects-metadata` AS metadata ON metadata.projectId = bill.project.id,"Review the intended relationship between the billing data and the project metadata. If `metadata` is primarily used to enrich or filter `bill` records, consider changing to a `LEFT JOIN` (from `bill` to `metadata`) or `INNER JOIN` (if only matching records are desired) as appropriate. Ensure the `metadata` table is properly populated and maintained to support explicit project categorization, replacing the need for string matching.",215,a6b35c09-d774-4509-95d0-4e3c05417e57
multiple_metrics,Hardcoded Logic,"A highly specific and lengthy set of WHERE clauses is repeated verbatim across 20+ metrics related to campaign performance (e.g., Total Impressions, Total Subscriptions, Subscriptions from Meta, etc.). This includes specific masthead codes, campaign names, and a fixed report date. Any change to these business rules requires updating every single affected metric, increasing the risk of errors and inconsistencies.",WHERE ((masthead_group_code = 'TAU') OR (masthead_code LIKE 'TA')) AND (campaign_name LIKE 'AOD%' OR campaign_name = 'S25047_TAU_FACESO_BR_TA - Bronwyn S2 | IG Content Amp') AND report_date >= '2023-07-01',"Centralize these common filters. Ideally, create a dedicated BigQuery view or materialized view that pre-filters the `campaign_performance_fct` table based on these criteria. Alternatively, if Looker Studio supports it, apply these as data source level filters or leverage parameters for dynamic campaign/masthead selection.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
multiple_metrics,Hardcoded Logic,"A specific set of WHERE clauses for 'The Australian' website and a fixed start date (July 1, 2024) is repeated across multiple article-related metrics (e.g., Distinct Subscription IDs, Article Headline, Derived Article Section). This hardcoded date will become outdated and requires manual updates.",WHERE Website IN ('The Australian') AND DATE(SubscriptionDateTime) >= DATE('2024-07-01'),"For the fixed website, consider a data source filter in Looker Studio or a dedicated view. For the date, if it represents a fiscal year start, implement a dynamic date calculation (e.g., `DATE_TRUNC(CURRENT_DATE(), YEAR) + INTERVAL 6 MONTH` for July 1st of current FY) or use a Looker Studio date range control. If it's truly a static historical cut-off, document it clearly.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
article_section_derived,Anti-Pattern,"The 'Derived Article Section' metric uses a very long and complex CASE statement to categorize articles based on multiple `ArticleDominantSection` fields and `ArticleLink` patterns. This logic is difficult to read, maintain, and prone to errors if new sections are introduced or existing patterns change. The order of `WHEN` clauses also matters, which can lead to unexpected classifications.",CASE WHEN ArticleDominantSection1 LIKE '%education%' OR ArticleDominantSection2 LIKE '%education%' OR ArticleDominantSection3 LIKE '%education%' OR ArticleLink LIKE '%/education/%' THEN 'education' ... ELSE ArticleDominantSection1 END,"Extract this classification logic into a dedicated lookup table in BigQuery. This table would map `ArticleDominantSection` values and `ArticleLink` patterns to their corresponding 'Derived Article Section'. The metric's SQL would then perform a simple JOIN to this lookup table, significantly improving readability, maintainability, and scalability.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
tactic_classification,Anti-Pattern,The 'Tactic Classification' metric relies on an extensive CASE statement that attempts to infer marketing tactics from `campaign_name` patterns. This approach is highly brittle; minor changes in campaign naming conventions will break the classification. It also duplicates business logic that should ideally be managed centrally.,CASE WHEN campaign_name LIKE '%Health%' THEN 'Health' WHEN campaign_name LIKE '%CALD%' THEN 'CALD' ... ELSE 'Other' END,"Implement a campaign metadata or lookup table that explicitly assigns a 'Tactic Classification' to each `campaign_name` or `campaign_id`. This table could be maintained by marketing operations or data governance teams. The metric would then simply join to this table to retrieve the classification, ensuring accuracy and consistency.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
channel_classification,Anti-Pattern,"Multiple metrics (`channel_classification`, `site_classification`, `category1_classification`) use similar but distinct CASE statements to classify source systems or campaign types. This redundancy leads to potential inconsistencies (e.g., 'LinkedIn' vs 'Linkedin' in `site_classification`) and makes it challenging to ensure a unified view of channel performance.",SELECT DISTINCT CASE WHEN source_system_name LIKE '%Facebook%' THEN 'Meta' ... END,"Consolidate all channel/site/category classification logic into a single, well-defined lookup table. This table should map raw `source_system_name` and `campaign_type` values to their respective 'Channel Classification', 'Site Classification', and 'Category 1 Classification'. This ensures a single source of truth for channel definitions across the dashboard.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
fy_quarter_campaign,Anti-Pattern,"The fiscal quarter calculation is embedded directly in the SQL using complex date extraction and conditional logic. While functional, this is a common business logic that should be standardized and reusable.","CONCAT(CAST(CASE WHEN EXTRACT(MONTH FROM SAFE_CAST(report_date AS DATE)) >= 7 THEN EXTRACT(YEAR FROM SAFE_CAST(report_date AS DATE)) + 1 ELSE EXTRACT(YEAR FROM SAFE_CAST(report_date AS DATE)) END AS STRING), ' Q', CAST(CASE WHEN EXTRACT(MONTH FROM SAFE_CAST(report_date AS DATE)) IN (7, 8, 9) THEN 1 ... ELSE 4 END AS STRING))","Create a shared date dimension table or a common utility function/view in BigQuery that includes fiscal year, quarter, and week calculations. This allows all dashboards to consistently derive fiscal periods without duplicating complex logic.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
day_of_week_subscription_movement,Anti-Pattern,"The day of week calculation uses a CASE statement to map numeric day-of-week values to string names. While simple, this is a basic formatting task that could be handled more efficiently and consistently.",CASE WHEN EXTRACT(DAYOFWEEK FROM SAFE_CAST(report_date AS DATE)) = 1 THEN 'Sunday' ... END,"Utilize BigQuery's `FORMAT_DATE('%A', report_date)` function for direct day-of-week name extraction, or include this as a pre-calculated column in the underlying view (`v_subscription_base_movement_agg`) if performance is a concern.",216,743c6721-7b52-4c74-ae92-c60c9a76602a
total_daily_subscription_target_by_publication_group,Hardcoded Logic,"The SQL logic for the 'Total Daily Subscription Target by Publication Group' metric contains a hardcoded date (`2025-06-11`) in its `WHERE` clause. While the comment indicates it's an 'Example date, typically parameterized by dashboard controls', its presence in the static SQL snippet suggests a potential risk of displaying outdated or incorrect data if not properly overridden by Looker Studio controls.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-06-11'","Ensure the date filter is dynamically controlled by Looker Studio parameters (e.g., a date range filter) to allow users to select the desired target date, rather than relying on a hardcoded value in the underlying SQL.",217,127587ca-3bf2-4367-809c-ce91aca8fb52
total_daily_subscription_target_by_publication_group,Anti-Pattern,"The SQL query includes a `LIMIT 10` clause. For a dashboard metric intended to show 'Total Daily Subscription Target by Publication Group', this could lead to incomplete or misleading data if there are more than 10 distinct `publication_group` values. This is generally not advisable for aggregate metrics unless the dashboard is explicitly designed to show only the top N groups.",LIMIT 10;,"Remove the `LIMIT 10` clause to ensure all relevant publication groups are included in the aggregation. If a 'top N' display is required, implement it within Looker Studio's charting capabilities or ensure the `LIMIT` is parameterized and clearly communicated to users.",217,127587ca-3bf2-4367-809c-ce91aca8fb52
"wow_closing_movement_print_paid, yoy_closing_movement_print_paid, yoy_closing_base_print_paid",Hardcoded Logic|Anti-Pattern,"The `finance_recognition` classification logic is hardcoded as a complex CASE statement and is repeated identically across three different metrics. This creates a significant maintenance burden, as any change to this core business rule (e.g., how 'Bundle' or 'Not Available' delivery types are classified) would require updating multiple SQL queries. This also increases the risk of inconsistencies if updates are not applied uniformly across all instances.","(
    CASE
      WHEN delivery_medium_type_adjusted IN ('Bundle', 'Print') AND subscriber_has_email_flag = 'N' THEN 'Print Subscription'
      WHEN delivery_medium_type_adjusted = 'Print' AND subscriber_has_email_flag = 'Y' THEN 'Print Subscription'
      WHEN delivery_medium_type_adjusted IN ('Bundle', 'Digital', 'Not Available') AND subscriber_has_email_flag = 'Y' THEN 'Digital Subscription'
      WHEN delivery_medium_type_adjusted = 'Digital' AND subscriber_has_email_flag = 'N' THEN 'Digital Subscription'
    END) AS finance_recognition","Externalize the `finance_recognition` logic. This could be achieved by pushing this classification into the upstream `v_subscription_base_movement_agg_snap` view itself, or by creating a dedicated dimension table that maps `delivery_medium_type_adjusted` and `subscriber_has_email_flag` to `finance_recognition`. This would centralize the business rule, improve maintainability, and ensure consistency across all dependent metrics.",218,3b23bf1a-c212-49a1-afa1-558ec7ed6b19
"wow_closing_movement_print_paid, yoy_closing_movement_print_paid, yoy_closing_base_print_paid",Hardcoded Logic|Anti-Pattern,"A highly specific, time-bound, and masthead-specific data adjustment for `delivery_medium_type` is hardcoded directly within the SQL logic of three metrics. This makes the query brittle, difficult to understand, and challenging to maintain as new exceptions or time periods arise. Such specific overrides should ideally be handled at the data source level or through a more flexible, configurable mechanism.",(CASE WHEN fy_year = 2025 AND fy_week_of_year = 3 AND masthead = 'HS' AND delivery_medium_type = 'Not Available' THEN 'Bundle' ELSE delivery_medium_type END) AS delivery_medium_type_adjusted,"Investigate the root cause of this specific data reclassification. If it's a data quality issue, address it upstream in the ETL process that populates `v_subscription_base_movement_agg_snap`. If it's a legitimate business reclassification, consider managing such exceptions in a dedicated lookup table that can be joined, rather than hardcoding them directly into the metric SQL. This would significantly improve flexibility and maintainability.",218,3b23bf1a-c212-49a1-afa1-558ec7ed6b19
multiple_metrics_v_subscription_base_movement_agg,Hardcoded Logic,"A comprehensive set of standard business filters (e.g., date range, specific mastheads, offer categories, classification levels, and complex channel exclusions) is duplicated verbatim across at least 8 different metrics that query the `v_subscription_base_movement_agg` view. This includes core metrics like `total_subscription_count_base`, `total_acquisition_count_base`, and various dimensions. This practice makes global filter updates extremely cumbersome, error-prone, and difficult to audit.","WHERE report_date >= DATE(""2024-07-01"") AND masthead IN ('TA', 'DT', 'HS', 'CM', 'AA', 'WT', 'GA', 'GC', 'CP', 'TB', 'NT', 'TM', 'TC', 'CS') AND offer_category_name NOT LIKE '%Print%' AND classification_level_1 IN ('Standard Paid', 'Offplatform - Paid', 'Other Paid') AND classification_level_2 NOT IN ('University Digital', 'Print-only') AND NOT(sold_in_channel = 'Bau Always On Digital' AND sold_in_source_channel IN ('Print Url', 'Premium Breach', 'Mobile', 'Linkedin', 'App', 'In Game Referral', 'Inbound', 'Internal Display', 'Internal Referal')) AND NOT(sold_in_channel = 'Bau General Offer' AND sold_in_source_channel IN ('Adnotes', 'Direct Mail', 'Experiential', 'Face To Face', 'Flyer', 'Infomercial', 'Letter Box Drop', 'Magazines', 'Mobile', 'Nav Bar (Ons)', 'Onsite Placements', 'Outdoor', 'Partner Activity', 'Post It Note', 'Print/Press', 'TVC')) AND NOT(sold_in_channel NOT IN ('Bau General Offer', 'Bau Always On Digital', 'Breach', 'Premium Breach') AND sold_in_source_channel NOT IN ('Edm', 'Not Available', 'Print Url', 'Sms', 'Think Import', 'Think Migrations', 'Cvm', 'Outbound Sales', 'App', 'My Account', 'Outbound'))","Create a dedicated, governed BigQuery view (e.g., `v_subscription_base_movement_agg_standard_filtered`) that pre-applies these common filters. All dependent metrics should then query this new view. Alternatively, if a semantic layer (like LookML or dbt) is in use, define these filters as a reusable `WHERE` clause or a derived table to ensure single-source-of-truth.",219,cf714dce-529a-49ba-94b8-ddb12643c494
multiple_calculated_dimensions,Anti-Pattern,"Several derived dimensions (`Calculated Day of Week`, `Calculated Group Channel`, `Calculated Source Channel`, `Calculated Customer Type`, `Calculated Customer Group Type`, `Calculated Subscription Rate Plan Group`) rely on extensive and complex `CASE` statements directly within the Looker Studio metric definition. This hardcodes critical business logic into the dashboard layer, making it difficult to manage, audit, and reuse consistently across other dashboards or tools. The `LIMIT 1` in the SQL logic for these calculated fields is also misleading, as it only samples one row for definition, not representing the full query execution.",SELECT CASE WHEN classification_level_2 LIKE 'University%' THEN 'Education' WHEN classification_level_2 LIKE '%Teachers%' THEN 'Education' WHEN classification_level_2 = 'Campus Activation' THEN 'Campus' WHEN classification_level_2 LIKE '%Corporate%' THEN 'Corporate excluding IP' WHEN classification_level_2 LIKE 'SMB Activation' THEN 'B2B' WHEN classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN classification_level_2 LIKE '%Gift%' THEN 'Consumer' WHEN classification_level_2 = 'Digital' THEN 'Consumer' WHEN classification_level_2 = 'App Subscribers' THEN 'Consumer' WHEN classification_level_2 = 'Bundles' THEN 'Consumer' WHEN classification_level_2 = 'Essentials' THEN 'Consumer' WHEN classification_level_2 = 'DPE only' THEN 'Consumer' WHEN classification_level_2 = 'Mind Games' THEN 'Consumer' WHEN classification_level_2 = 'Press Reader' THEN 'Consumer' WHEN classification_level_2 = 'Wine Club' THEN 'Consumer' END AS Customer_Type FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base_movement_agg` LIMIT 1,"Push this business logic upstream into the `v_subscription_base_movement_agg` view itself or a new derived view in BigQuery. This ensures consistency, improves performance (as the logic is pre-computed), and centralizes business definitions. For `Calculated Day of Week`, consider using BigQuery's `FORMAT_DATE('%A', report_date)` function directly in the view. For other complex mappings, consider creating lookup tables in the data warehouse and joining them to the base view.",219,cf714dce-529a-49ba-94b8-ddb12643c494
multiple_filtered_metrics,Hardcoded Logic,"Specific segment filters, such as `masthead = 'WT'` and `classification_level_2 IN ('Digital', 'Bundles', 'App Subscribers')`, are repeatedly applied to multiple metrics (e.g., `total_subscription_count_filtered_wt_digital_bundles_app`, `total_acquisition_count_filtered_wt_digital_bundles_app`, `total_free_to_paid_conversions_filtered_wt_digital_bundles_app`, `total_cancellation_count_filtered_wt_digital_bundles_app`). This creates a maintenance overhead and potential for inconsistency if the definition of this specific 'WT Digital/Bundles/App' segment changes.","... AND masthead = 'WT' AND classification_level_2 IN ('Digital', 'Bundles', 'App Subscribers')","If this segment is frequently used, define it as a separate, pre-filtered view or a boolean calculated field (e.g., `is_wt_digital_bundle_app_segment`) in the underlying data model. This would allow metrics to simply filter on this new field, improving readability and maintainability.",219,cf714dce-529a-49ba-94b8-ddb12643c494
derived_gm_sales_region,Anti-Pattern,"The SQL logic for this dimension includes a 'LIMIT 1' clause. This means the metric will only ever display a single, arbitrary value from the underlying table, making it ineffective for grouping, filtering, or providing a comprehensive view of all GM/Sales Region values within the dashboard. This fundamentally undermines its utility as a dimension.",SELECT CASE WHEN (t0.GM IS NULL) THEN t0.sales_region_name ELSE t0.GM END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0 LIMIT 1,"Remove the 'LIMIT 1' clause. For a dimension, the query should return all relevant distinct values. If used in a dashboard table, ensure the visualization applies appropriate aggregation (e.g., COUNT DISTINCT) or that the query is used in a GROUP BY context to show all unique entries.",220,7ada02b8-e93e-41d8-9a7e-05013ff81247
derived_gsd_sales_team,Anti-Pattern,"Similar to 'Derived GM / Sales Region', this dimension also uses 'LIMIT 1' in its SQL query. This prevents the metric from displaying all relevant GSD/Sales Team values, making it unsuitable for comprehensive analysis, grouping, or filtering within the dashboard.",SELECT CASE WHEN (t0.GSD IS NULL) THEN t0.sales_team_name ELSE t0.GSD END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0 LIMIT 1,Remove the 'LIMIT 1' clause. Ensure the dashboard visualization or underlying query context allows for the display and grouping of all distinct GSD/Sales Team values.,220,7ada02b8-e93e-41d8-9a7e-05013ff81247
data_load_timestamp,Anti-Pattern,"The 'Data Load Timestamp' metric, intended for freshness monitoring, uses 'LIMIT 1'. This means it will only show the timestamp from a single, arbitrary row, rather than the maximum (most recent) or minimum (oldest) load timestamp for the entire dataset. This provides an incomplete and potentially misleading view of data freshness.","SELECT DATETIME_TRUNC(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP), SECOND) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0 LIMIT 1","Modify the SQL to `SELECT MAX(DATETIME_TRUNC(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP), SECOND))` to accurately reflect the most recent data load for the table. Remove the 'LIMIT 1'.",220,7ada02b8-e93e-41d8-9a7e-05013ff81247
all_metrics,Anti-Pattern,"All five metrics utilize a nearly identical Common Table Expression (CTE) named `base_cost_data`. The only significant variation within the CTE across metrics is the hardcoded list of `bill.project.id IN (...)` values, with one metric (`monthly_gcp_cost_prod_tddxai_march_2025_alt_projects`) using a completely different list. This extreme duplication of complex SQL logic is a major anti-pattern, making the dashboard difficult to maintain, update, and debug. Any change to the core cost calculation logic would require updating five separate metric definitions.","WITH base_cost_data AS (
  SELECT
    metadata.projectId,
    CASE
      WHEN metadata.projectId LIKE ""%dev%"" OR metadata.projectId LIKE ""%nprod%"" OR metadata.projectId LIKE ""%poc%"" THEN ""NonProduction""
      ELSE ""Production""
    END AS environment,
    ROUND(cost + IFNULL((SELECT c.amount FROM UNNEST(credits) AS c), 0), 3) AS real_cost,
    metadata.bu,
    metadata.department,
    bill._PARTITIONTIME
  FROM
    `ncau-tech-mgmt.billing_export.gcp_billing_export_v1_0129CD_D10B4E_0A39B2` AS bill
    FULL JOIN
    `ncau-tech-mgmt.ncau_gcp_metaadata.ncau-gcp-projects-metadata` AS metadata
    ON metadata.projectId = bill.project.id
  WHERE
    DATE(bill._PARTITIONTIME) >= DATE_SUB(`current_date`(), INTERVAL 6 MONTH)
    AND bill.project.id IN (
      'nca-datapl-dev-genai', 'nca-datapl-dev-finaipoc', 'nca-data-prod-aisummarize', 'nca-datapl-prod-genai',
      'nca-taiste-prod-taiste', 'nca-ola-prod-data', 'nca-datapl-prod-conintai', 'nca-cts-prod-tddxai',
      'nca-datapl-nonprod-tasteaiconc', 'nca-datapl-prod-tasteaiconc', 'ncau-data-nprod-aitrain',
      'nca-cts-nonprod-tddxai', 'ncau-data-nprod-taiste', 'nca-datapl-dev-contentsearch', 'nau-data-nprod-dataservices'
    )
)","Create a single, consolidated BigQuery view or a Looker Studio data source that encapsulates the `base_cost_data` logic, including the join and the initial 6-month filter. This view should expose `projectId`, `environment`, `real_cost`, `bu`, `department`, and `_PARTITIONTIME`. Then, define individual metrics in Looker Studio by applying filters (e.g., `STRPOS(projectId, 'prod-tddxai') > 0`) and date range controls on this consolidated view, rather than embedding the full SQL in each metric.",221,c67409c3-3e67-4d5a-8472-34a3aa704cf6
all_metrics,Hardcoded Logic,"All metrics use hardcoded `TIMESTAMP` values for their date range filtering (e.g., `TIMESTAMP '2025-03-01'` and `TIMESTAMP_ADD(TIMESTAMP '2025-03-XX', INTERVAL 1 DAY)`). This makes the dashboard static and requires manual updates for each reporting period. Additionally, the `_PARTITIONTIME` filter in the CTE uses `DATE_SUB(current_date(), INTERVAL 6 MONTH)`, which is a relative date, creating an inconsistency with the hardcoded absolute dates in the main query.","SAFE_CAST(base_cost_data._PARTITIONTIME AS DATETIME) >= TIMESTAMP '2025-03-01'
  AND SAFE_CAST(base_cost_data._PARTITIONTIME AS DATETIME) < TIMESTAMP_ADD(TIMESTAMP '2025-03-12', INTERVAL 1 DAY)",Leverage Looker Studio's built-in date range controls and parameters. Define a single date field in the consolidated data source and allow users to select the desired reporting period dynamically. This eliminates the need for hardcoded dates and makes the dashboard reusable for any time frame.,221,c67409c3-3e67-4d5a-8472-34a3aa704cf6
all_metrics,Hardcoded Logic,"The `CASE` statement used to derive the `environment` (Production/NonProduction) is hardcoded within the SQL for each metric. While functional, this logic could be centralized and governed, especially if the definition of 'Production' vs. 'NonProduction' environments changes or becomes more complex.","CASE
      WHEN metadata.projectId LIKE ""%dev%"" OR metadata.projectId LIKE ""%nprod%"" OR metadata.projectId LIKE ""%poc%"" THEN ""NonProduction""
      ELSE ""Production""
    END AS environment","Consider moving this environment classification logic into the `ncau_gcp_metaadata.ncau-gcp-projects-metadata` table as a dedicated column, or into a separate lookup table. This would centralize the business rule, improve data governance, and simplify the SQL queries.",221,c67409c3-3e67-4d5a-8472-34a3aa704cf6
total_c_score_target_messenger_fy23_24,Hardcoded Logic,"The SQL logic for 'Total C-Score Target for Messenger (FY23-24)' explicitly hardcodes specific date ranges (July 3, 2023 to June 30, 2024) and the 'Messenger' publication group. While the 'Messenger' group is consistent with the metric's name, hardcoding the fiscal year dates makes the metric inflexible. It will require manual SQL modification annually to remain relevant for future fiscal periods, increasing maintenance overhead and the risk of human error.",t0.week_ending >= DATE '2023-07-03' AND t0.week_ending <= DATE '2024-06-30' AND t0.publication_group = 'Messenger',"To improve maintainability, consider replacing hardcoded dates with dynamic calculations based on `CURRENT_DATE()` (e.g., `DATE_TRUNC(CURRENT_DATE(), YEAR)` for fiscal year start/end if fiscal year aligns with calendar year, or a more complex calculation if not). Alternatively, if this is a static historical target, ensure clear documentation. For the 'Messenger' filter, if the dashboard ever needs to display other publication groups, consider using a dashboard-level filter or parameter instead of hardcoding within the SQL.",222,0546f07c-bb7b-4ec0-aba8-06c738dd12ec
financial_month_numeric_dimension,Hardcoded Logic,"The 'Financial Month Number' metric utilizes a hardcoded `CASE` statement to convert short month names (e.g., 'Jul', 'Aug') into their corresponding numeric values. While functional, this approach is an anti-pattern for data transformation. It makes the logic less maintainable, prone to errors if month naming conventions change, and difficult to reuse across other metrics or dashboards without duplication. This contradicts the initial AI analysis's 'total_governance_issues: 0'.",CASE WHEN (financial_short_month = 'Jul') THEN 1 WHEN (financial_short_month = 'Aug') THEN 2 WHEN (financial_short_month = 'Sep') THEN 3 WHEN (financial_short_month = 'Oct') THEN 4 WHEN (financial_short_month = 'Nov') THEN 5 WHEN (financial_short_month = 'Dec') THEN 6 WHEN (financial_short_month = 'Jan') THEN 7 WHEN (financial_short_month = 'Feb') THEN 8 WHEN (financial_short_month = 'Mar') THEN 9 WHEN (financial_short_month = 'Apr') THEN 10 WHEN (financial_short_month = 'May') THEN 11 WHEN (financial_short_month = 'Jun') THEN 12 ELSE NULL END,"Replace the hardcoded `CASE` statement with a join to a small, governed lookup table (e.g., `dim_financial_month`) that contains the mapping between `financial_short_month` and `financial_month_number`. This centralizes the mapping logic, improves data governance, enhances maintainability, and promotes reusability across the data platform.",223,e0746d13-dad7-4ba1-aabc-d3b8e82cef54
"All measure metrics (e.g., current_fy_non_future_gross_revenue_k_current_month, total_pipeline)",Anti-Pattern,"Almost all measure metrics include `LIMIT 1` in their SQL logic. If these SQL snippets represent the actual Looker Studio field definitions, this severely restricts the utility of these metrics, as it prevents them from being used in aggregated views that require more than one row of data (e.g., tables, charts broken down by dimensions). This would effectively limit the dashboard to displaying only single, overall values for these KPIs, hindering detailed analysis.","LIMIT 1 (example: `SELECT SUM(SAFE_DIVIDE(t0.gross_revenue_amount, 1000)) AS current_fy_non_future_gross_revenue_k_current_month FROM ... LIMIT 1`)","Remove `LIMIT 1` from all measure metric SQL definitions. Looker Studio handles aggregation at the visualization level, and explicit `LIMIT` clauses in field definitions are generally counterproductive for analytical dashboards.",224,4d8074b2-17a8-48ba-babe-c536359b1f64
"All dimension metrics (e.g., gsd_dimension, sales_segment_gm_name_dimension)",Anti-Pattern,"Dimension metrics include `LIMIT 10` in their SQL logic. Similar to measures, if these are the actual field definitions, this could lead to incomplete lists of dimension values, potentially hiding relevant data points or categories in filters and charts. This would severely impact the dashboard's ability to provide a comprehensive view of sales performance across all segments or divisions.",LIMIT 10 (example: `SELECT t0.GSD AS GSD FROM ... GROUP BY t0.GSD LIMIT 10`),Remove `LIMIT 10` from all dimension metric SQL definitions. Looker Studio will retrieve all necessary dimension values for display and filtering without an explicit `LIMIT`.,224,4d8074b2-17a8-48ba-babe-c536359b1f64
revenue_type_xtend_adjusted_dimension,Hardcoded Logic,"The `revenue_type_xtend_adjusted_dimension` uses a `CASE` statement to hardcode the 'XTEND' value based on a flag. While functional for this specific case, if more complex or numerous adjustments to `revenue_type` are needed in the future, this approach can become difficult to maintain and scale. It also embeds business logic directly in the metric definition rather than potentially in the underlying data model.",CASE WHEN t0.xtend_flag = 'Y' THEN 'XTEND' ELSE t0.revenue_type END,"Consider if this transformation should be pushed upstream into the `adsales_performance` table or a dedicated lookup table if `xtend_flag` or `revenue_type` logic is expected to evolve or become more complex. For a single, stable rule, it may be acceptable, but it's a pattern to monitor.",224,4d8074b2-17a8-48ba-babe-c536359b1f64
"unique_subscribers, count_churn_scores, sum_churn_scores, churn_group",Anti-Pattern,"All four metrics utilize an identical, complex subquery structure (joining `churn_automation` and `subscription_base` with specific filters). This redundancy leads to inefficient query execution, increased maintenance overhead, and makes the dashboard brittle to schema changes or filter updates.","FROM (
    SELECT
      A.pcsid,
      A.churn_score,
      A.Masthead_Grouping,
      A.rundate,
      B.subscriber_id_src AS Subscribers,
      B.subscription_status_code,
      B.is_paying_flag,
      B.dw_tgt_partition_date,
      B.masthead,
      B.rate_plan_code
    FROM
      (
        SELECT pcsid, churn_score, Masthead_Grouping, rundate
        FROM `nau-data-prod-dataservices.Churn_prediction_model.churn_automation`
        WHERE Masthead_Grouping IN (""Metros"") AND rundate BETWEEN ""2025-01-01"" AND ""2025-01-30""
      ) AS A
      JOIN
      (
        SELECT DISTINCT subscriber_id_src, subscription_status_code, is_paying_flag, dw_tgt_partition_date, masthead, rate_plan_code
        FROM `ncau-data-newsquery-prd.prstn_consumer.subscription_base`
        WHERE subscription_status_code = ""active"" AND is_paying_flag = ""Y"" AND dw_tgt_partition_date = ""2025-02-23"" AND
          masthead IN (""DT"", ""CM"", ""HS"", ""AA"", ""TM"") AND rate_plan_code IN (""DT_SDO_SDO24AM12"", ""HS_SDO_SDO24AM12"",
            ""AA_SDO_SDO24AM12"", ""CM_SDO_CM24AM12"", ""TM_SDO_SDO24AM12"")
      ) AS B
      ON SAFE_CAST(A.pcsid AS STRING) = SAFE_CAST(B.subscriber_id_src AS STRING)
  ) AS T","Consolidate the common data selection logic into a single BigQuery view or materialized view. This view can then be referenced by all metrics, improving performance, maintainability, and data consistency. Alternatively, if Looker Studio supports it, define a common data source or blended data source that encapsulates this join.",225,f84749df-19c4-4af7-b29fcefddb6a
"unique_subscribers, count_churn_scores, sum_churn_scores, churn_group",Hardcoded Logic,"The SQL for all metrics contains hardcoded values for dates (`rundate`, `dw_tgt_partition_date`), masthead groupings, specific mastheads, and rate plan codes. This severely limits the dashboard's flexibility, requiring manual SQL modifications for each new reporting period or change in business focus. The use of future dates (2025) is particularly concerning for a dashboard intended to reflect current or past performance.","WHERE Masthead_Grouping IN (""Metros"") AND rundate BETWEEN ""2025-01-01"" AND ""2025-01-30""
... dw_tgt_partition_date = ""2025-02-23"" AND masthead IN (""DT"", ""CM"", ""HS"", ""AA"", ""TM"") AND rate_plan_code IN (""DT_SDO_SDO24AM12"", ""HS_SDO_SDO24AM12"", ""AA_SDO_SDO24AM12"", ""CM_SDO_CM24AM12"", ""TM_SDO_SDO24AM12"")","Replace hardcoded values with dynamic parameters (e.g., Looker Studio date range controls, filter controls for mastheads/rate plans). For static lists that might evolve, consider externalizing them into lookup tables that can be joined, rather than hardcoding them directly in the SQL.",225,f84749df-19c4-4af7-b29fcefddb6a
churn_group,Anti-Pattern,"The 'Churn Group' metric, intended as a categorical classification, includes a `LIMIT 1` clause in its SQL. This means the metric will only ever return a single arbitrary churn group value, making it unusable for analyzing the distribution of churn groups across subscribers or for filtering/grouping by this dimension. This fundamentally breaks its intended business purpose.","SELECT
  CASE
    WHEN T.subscription_tenure <= 36 THEN ""Infancy""
    WHEN T.churn_score >= 0.7 THEN 'Acute'
    WHEN T.churn_score < 0.7 AND T.churn_score >= 0.4 THEN ""Specialist treatment""
    WHEN T.churn_score < 0.4 AND T.churn_score > 0.0 THEN ""General Health""
    ELSE ""UNSCORED""
  END AS churn_group_value
FROM
  (
    -- ... (common subquery) ...
  ) AS T
LIMIT 1","Remove the `LIMIT 1` clause. Ensure this calculated field is used as a dimension in Looker Studio, allowing for proper grouping and aggregation of other metrics by churn group. If the classification logic is complex or subject to frequent changes, consider implementing it as a UDF or a derived column in the underlying view/table.",225,f84749df-19c4-4af7-b29fcefddb6a
distinct_subscriptions_by_cvm_status_and_brand,Anti-Pattern,"The complex `CASE` statement used to categorize `DIFF_CVM_SUBSCRIPTION_FLAG` into `CVM_Status` is duplicated verbatim across `distinct_subscriptions_by_cvm_status_and_brand` and `distinct_subscriptions_by_cvm_status_overall`. This violates the DRY (Don't Repeat Yourself) principle, making maintenance and updates difficult. The `structure_sql` confirms there are 7 unique CVM flags, which are all covered by the `CASE` statement, but any change to the CVM status logic would require updating multiple metric definitions.","CASE
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'CHECK') THEN 'Check'
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'NO-NEW CVM SUBSCRIPTION (ACTIVE)') THEN 'Successful CVM'
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'NO-NEW CVM SUBSCRIPTION (CANCELLED)') THEN 'Moved then Cancelled'
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'YES-ORIGINAL SUBSCRIPTION (ACTIVE)') THEN 'Yet to Move'
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'YES-ORIGINAL SUBSCRIPTION (CANCELLED)') THEN 'Cancelled'
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'YES-SWITCH OFFER (ACTIVE)') THEN 'Switched'
        WHEN (SAFE_CAST(t0.DIFF_CVM_SUBSCRIPTION_FLAG AS STRING) = 'YES-SWITCH OFFER (CANCELLED)') THEN 'Switched then Cancelled'
        ELSE NULL
    END AS CVM_Status","Centralize the `CVM_Status` logic. This can be achieved by defining `CVM_Status` as a derived column in the underlying `t_cvm_reporting_table` view, or by creating a dedicated dimension in a semantic layer (e.g., LookML, dbt). This ensures a single source of truth for CVM status categorization, improving maintainability and consistency across all metrics.",226,b821747c-3075-4a4b-b4a5-c12a548b4e1b
distinct_subscriptions_by_cvm_status_and_brand,Hardcoded Logic,"The metric `distinct_subscriptions_by_cvm_status_and_brand` explicitly filters for `PH_BRAND = 'TB'`. The `structure_sql` indicates there are 4 unique brands in the dataset, meaning 'TB' is just one of several. This hardcoded filter limits the metric's reusability and requires duplicating or modifying the metric's SQL if analysis for other brands is needed, hindering dashboard flexibility and scalability.","WHERE
    SAFE_CAST(t0.PH_BRAND AS STRING) = 'TB'","Implement a dashboard-level filter or parameter for `PH_BRAND` to allow users to dynamically select brands. This would enable a single metric to serve multiple brand-specific analyses, improving reusability and reducing the need for redundant metrics.",226,b821747c-3075-4a4b-b4a5-c12a548b4e1b
sales_volume_l5_australian_2025,Hardcoded Logic,This metric hardcodes the 'Masthead_name' to 'The Australian' and the 'Year' to 2025. This limits the reusability of the metric for analyzing sales volume across other mastheads or different years.,WHERE SAFE_CAST(t0.Masthead_name AS STRING) = 'The Australian' AND SAFE_CAST(t0.Year AS INT64) = 2025,"Parameterize the 'Masthead_name' and 'Year' filters to allow dynamic selection, significantly improving the reusability and flexibility of the metric across the dashboard or for other reports.",227,b3eace25-3ec3-427a-839f-0639faf377ea
sum_year_australian,Anti-Pattern / Hardcoded Logic,"The metric sums the 'Year' dimension, which is an unusual aggregation for typical business reporting and likely indicates a misconfigured metric or an attempt to count data points. It also hardcodes the 'Masthead_name' and 'Year' range.",SUM(SAFE_CAST(t0.Year AS INT64)) AS sum_of_year FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.dt_regression_data` AS t0 WHERE SAFE_CAST(t0.Masthead_name AS STRING) = 'The Australian' AND SAFE_CAST(t0.Year AS INT64) <= 2027,"Clarify the precise business purpose of summing the 'Year' dimension. If the intent is to count records or distinct years, use `COUNT(*)` or `COUNT(DISTINCT Year)` respectively. Additionally, parameterize the 'Masthead_name' and 'Year' filters.",227,b3eace25-3ec3-427a-839f-0639faf377ea
sales_volume_l4_australian_upto_2027,Hardcoded Logic,"Similar to other sales volume metrics, this one hardcodes the 'Masthead_name' to 'The Australian' and filters years up to 2027, limiting its general applicability.",WHERE SAFE_CAST(t0.Masthead_name AS STRING) = 'The Australian' AND SAFE_CAST(t0.Year AS INT64) <= 2027,Parameterize the 'Masthead_name' and 'Year' filters to enhance the metric's reusability and flexibility.,227,b3eace25-3ec3-427a-839f-0639faf377ea
sales_volume_by_masthead_2025,Hardcoded Logic,"This metric hardcodes the 'Year' to 2025, which restricts its use for analyzing sales volume across mastheads in other years.",WHERE SAFE_CAST(t0.Year AS INT64) = 2025,"Parameterize the 'Year' filter to allow dynamic year selection, making the metric more versatile.",227,b3eace25-3ec3-427a-839f-0639faf377ea
sum_year_by_week_australian_upto_2027,Anti-Pattern / Hardcoded Logic,"This metric also sums the 'Year' dimension, grouped by 'Week', which is an unusual aggregation for business reporting. It also hardcodes the 'Masthead_name' and 'Year' range.",SUM(SAFE_CAST(t0.Year AS INT64)) AS sum_of_year FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.dt_regression_data` AS t0 WHERE SAFE_CAST(t0.Masthead_name AS STRING) = 'The Australian' AND SAFE_CAST(t0.Year AS INT64) <= 2027,"Clarify the business purpose of summing the 'Year' dimension. If the intent is to count records, use `COUNT(*)` or `COUNT(DISTINCT Year)`. Parameterize the 'Masthead_name' and 'Year' filters.",227,b3eace25-3ec3-427a-839f-0639faf377ea
sum_week_by_week_australian_upto_2027,Anti-Pattern / Hardcoded Logic,"This metric sums the 'Week' dimension, grouped by 'Week', which is highly unusual and likely a misconfiguration or a very specific, non-standard use case. It also hardcodes the 'Masthead_name' and 'Year' range.",SUM(SAFE_CAST(t0.Week AS INT64)) AS sum_of_week FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.dt_regression_data` AS t0 WHERE SAFE_CAST(t0.Masthead_name AS STRING) = 'The Australian' AND SAFE_CAST(t0.Year AS INT64) <= 2027,"Clarify the business purpose of summing the 'Week' dimension. If the intent is to count records or distinct weeks, use `COUNT(*)` or `COUNT(DISTINCT Week)`. This metric appears to be summing a dimension by itself, which is redundant if the goal is to show distinct weeks, or incorrect if it's meant to be a count. Parameterize the 'Masthead_name' and 'Year' filters.",227,b3eace25-3ec3-427a-839f-0639faf377ea
All metrics,Anti-Pattern,"The `details_with_flags` and `details_with_agg_flags` CTEs, including their complex `CASE` statements for `contra_flag`, `revenue_type_model`, and `exclude_ctr_performance_flag`, are identically duplicated across *every single metric*. This leads to massive code redundancy, makes maintenance difficult, and increases the risk of inconsistent logic if changes are required.","WITH
      details_with_flags AS (
        SELECT
          *,
          CASE WHEN `LEFT`(advertiser_group, 4) = ""CTR_"" AND unified_publication_name = 'Run of Audience Extension' THEN 'Y' ELSE 'N' END AS contra_flag
        FROM
          `ncau-data-newsquery-prd`.asl_finance_derived.details_dashboard
      ),
      details_with_agg_flags AS (
        SELECT
          *,
          sum(CASE WHEN contra_flag = 'N' THEN gross_revenue_amount ELSE 0 END) OVER (PARTITION BY advertiser_group, portfolio_conformed_name_current) AS all_revenue_agg,
          sum(CASE WHEN contra_flag = 'N' AND (unified_publication_name = 'Run of Audience Extension' OR UPPER(revenue_group_subtype) = 'PROGRAMMATIC SOURCE') THEN gross_revenue_amount ELSE 0 END) OVER (PARTITION BY advertiser_group, portfolio_conformed_name_current) AS prog_revenue_agg
        FROM
          details_with_flags
      )","Consolidate these common transformations and derived fields (`contra_flag`, `revenue_type_model`, `exclude_ctr_performance_flag`) into a single, governed BigQuery view or a shared Looker Studio data source. This will centralize logic, improve maintainability, and potentially enhance query performance.",228,abd763c6-2364-490c-b801-5bfbbf69b2d4
"total_gross_revenue_actuals, total_rep_target_revenue, total_performance_target_revenue, total_gross_revenue_opp_customers",Logic Error,"All 'Total' aggregation metrics (`total_gross_revenue_actuals`, `total_rep_target_revenue`, `total_performance_target_revenue`, `total_gross_revenue_opp_customers`) include a `LIMIT 1` clause. This will cause the sum to be calculated over only a single row, leading to fundamentally incorrect and severely understated total values.",LIMIT 1;,Immediately remove `LIMIT 1` from all aggregation queries. This is a critical error that will misrepresent key business metrics. Ensure that aggregation functions (like `SUM`) are applied to the entire filtered dataset.,228,abd763c6-2364-490c-b801-5bfbbf69b2d4
All metrics,Hardcoded Logic,"There is extensive use of hardcoded values for filtering, including specific `Rep` names ('Daiki Tanabe', 'Brodie Higgins'), lists of `financial_short_month` values, and `portfolio_parent_group_name_current` exclusions. Furthermore, the dynamic portfolio/segment filter `(CASE WHEN ('3' = '1') THEN ...)` is effectively hardcoded to `t0.portfolio_conformed_name_sync` because the condition `'3' = '1'` is always false, making the 'dynamic' part static and inflexible. The `revenue_type_model` CASE statement is also hardcoded and has inconsistent formatting (leading spaces).","t0.Rep IN ('Daiki Tanabe')
financial_short_month IN ('Sep', 'Oct', 'Nov', 'Dec')
t0.portfolio_parent_group_name_current NOT IN ('TRUE OTHER', 'SMB TRANSACTIONAL', 'DIGITAL OTHER')
(CASE WHEN ('3' = '1') THEN t0.portfolio_parent_group_name_sync WHEN ('3' = '2') THEN t0.portfolio_group_name_sync WHEN ('3' = '3') THEN t0.portfolio_conformed_name_sync WHEN ('3' = '0') THEN t0.sales_segment_gm_name_sync ELSE NULL END) IN ('VIC IA B3')","Replace hardcoded filter values with Looker Studio parameters to allow for dynamic filtering by users. For complex derived fields like `revenue_type_model` and `exclude_ctr_performance_flag`, define them once in a shared view or data source. For the 'dynamic' portfolio filter, implement proper parameterization or use a lookup table for mapping.",228,abd763c6-2364-490c-b801-5bfbbf69b2d4
"total_rep_target_revenue, total_performance_target_revenue",Anti-Pattern,"The `UNION ALL` structure in these target metrics includes a branch that selects from `details_dashboard` (actuals) and assigns `source = 'Data'`. However, this branch is immediately filtered out by the outer `WHERE t0.source IN ('Rep Target')` or `('PERFORMANCE Target')`. This constitutes dead code, adding unnecessary complexity and potential performance overhead without contributing to the final result.","SELECT
      details.Rep,
      null AS advertiser_group, ...
      'Data' AS source,
      CASE ... END AS revenue_type_model, CASE ... END AS exclude_ctr_performance_flag
    FROM
      details_with_agg_flags AS details
    WHERE
      details.gross_revenue_amount IS NOT NULL
    UNION ALL ...","Refactor the SQL to remove the irrelevant `UNION ALL` branches. Each metric's query should only include the necessary data sources and transformations to calculate its specific value, avoiding dead code.",228,abd763c6-2364-490c-b801-5bfbbf69b2d4
All metrics,Anti-Pattern,"The `details_with_agg_flags` CTE calculates `all_revenue_agg` and `prog_revenue_agg` using window functions. However, these aggregated fields are not used in the final `SELECT` statement or any `WHERE` clause of any of the provided metrics. This indicates unused calculations, adding unnecessary processing and making the SQL harder to read and understand.","sum(CASE WHEN contra_flag = 'N' THEN gross_revenue_amount ELSE 0 END) OVER (PARTITION BY advertiser_group, portfolio_conformed_name_current) AS all_revenue_agg,
          sum(CASE WHEN contra_flag = 'N' AND (unified_publication_name = 'Run of Audience Extension' OR UPPER(revenue_group_subtype) = 'PROGRAMMATIC SOURCE') THEN gross_revenue_amount ELSE 0 END) OVER (PARTITION BY advertiser_group, portfolio_conformed_name_current) AS prog_revenue_agg","Remove these unused calculations from the CTEs to simplify the SQL and improve query performance. If they are intended for future use, document their purpose or only add them when they are actively consumed.",228,abd763c6-2364-490c-b801-5bfbbf69b2d4
"total_gross_revenue_actuals, total_gross_revenue_opp_customers",Redundancy,"The SQL logic for `total_gross_revenue_actuals` and `total_gross_revenue_opp_customers` is identical. Despite having slightly different business descriptions, their underlying queries are precisely the same, suggesting one metric might be redundant or incorrectly defined.",The full SQL for both metrics is identical.,"Investigate the business requirements for these two metrics. If they are intended to represent distinct concepts, their SQL should reflect those differences. If not, consolidate them into a single metric, potentially using a parameter to switch between 'actuals' and 'opportunity customers' if the distinction is merely a filter.",228,abd763c6-2364-490c-b801-5bfbbf69b2d4
"opportunity_id, opportunity_type, opportunity_stage_name, expected_revenue, opportunity_age, opportunity_created_datetime_truncated, opportunity_closed_date_parsed",Anti-Pattern,"All dimension metrics (e.g., 'Opportunity ID', 'Opportunity Type') incorrectly include `LIMIT 1` in their SQL logic. This causes these dimensions to return only a single, arbitrary record, making them unusable for filtering, grouping, or accurate display of distinct values within the dashboard. This severely impacts the dashboard's analytical utility and data exploration capabilities.",LIMIT 1,"Remove `LIMIT 1` from all dimension metric SQL queries. Dimensions should be designed to return all relevant values to enable proper filtering, grouping, and drill-down functionality in Looker Studio.",229,46ddebb6-f504-44ef-86dc-924a51de34bf
All metrics,Data Mismatch,"The date filtering logic (`dw_partition_date`) is inconsistent across metrics. Most measures and some dimensions use a date range of `2025-02-11` to `2025-03-10`, while 'Opportunity ID' and 'Opportunity Type' use `2025-02-27` to `2025-03-26`. This discrepancy means different metrics are querying different subsets of data, leading to unreliable cross-metric comparisons and potentially misleading insights.","t0c0d1.dw_partition_date >= PARSE_DATE('%Y%m%d', '20250211') AND t0c0d1.dw_partition_date <= PARSE_DATE('%Y%m%d', '20250310') (vs) t0c0d2.dw_partition_date >= PARSE_DATE('%Y%m%d', '20250227') AND t0c0d2.dw_partition_date <= PARSE_DATE('%Y%m%d', '20250326')","Standardize the date filtering logic across all metrics to ensure a consistent data view. Implement a dashboard-level date filter or a common date dimension that all metrics can reference dynamically, rather than hardcoding different ranges within individual metric SQL.",229,46ddebb6-f504-44ef-86dc-924a51de34bf
"distinct_opportunity_revenue_dates, distinct_sfdc_opportunities, distinct_case_origins",Anti-Pattern,"Metrics calculating distinct counts (e.g., 'Distinct Opportunity Revenue Dates') unnecessarily cast numeric or date fields to `STRING` before applying `COUNT(DISTINCT)`. For `opportunity_revenue_date_actual__c`, casting to string can lead to incorrect distinct counts if date string formats vary (e.g., 'YYYY-MM-DD' vs 'YYYY-M-D'). For ID fields, it's an unnecessary operation that adds overhead without clear benefit.",SAFE_CAST(t0c0d1.opportunity_revenue_date_actual__c AS STRING),"Remove `SAFE_CAST(... AS STRING)` for `DISTINCT` counts on fields that are inherently dates or IDs. For dates, ensure the field is a proper `DATE` or `TIMESTAMP` type and use `COUNT(DISTINCT date_field)`. For IDs, use `COUNT(DISTINCT id_field)` directly if the type is appropriate (e.g., `STRING`, `INT64`). If the original field is not a date, consider `PARSE_DATE` before `COUNT(DISTINCT)`.",229,46ddebb6-f504-44ef-86dc-924a51de34bf
total_opportunity_count_field,Data Mismatch,"The metric 'Total Opportunity Count (from field)' is calculated by summing `count_opportunity__c`. The business description states this field is a 'pre-calculated count associated with each opportunity record'. If `count_opportunity__c` represents a count *within* each opportunity (e.g., number of products), then summing it would yield a total of these internal counts, not a count of distinct opportunities. This could lead to a misinterpretation of the 'Total Opportunity Count'.",SUM(SAFE_CAST(t0c0d1.count_opportunity__c AS BIGNUMERIC)),"Clarify the exact meaning and intended use of `count_opportunity__c` with business stakeholders and data owners. If the goal is to count distinct opportunities, the SQL should be `COUNT(DISTINCT opty_sfdc_id__c)` or `COUNT(DISTINCT id)`. If `count_opportunity__c` is intended to be summed, rename the metric to accurately reflect what it represents (e.g., 'Total Opportunity Line Items' or 'Total Opportunity Sub-Units').",229,46ddebb6-f504-44ef-86dc-924a51de34bf
video_media_starts_portrait_news_com_au,Hardcoded Logic,"The metric explicitly filters on a hardcoded content source ('News.com.au'). While functional for this specific metric, this pattern can become less maintainable and scalable if the dashboard expands to include metrics for numerous content sources, or if content source names change. It limits the ability to dynamically analyze or aggregate across multiple sources without modifying the underlying SQL.",SAFE_CAST(Content_Source AS STRING) = 'News.com.au',"Consider externalizing content source values into a governed lookup table or a configuration parameter if the dashboard is expected to expand to include metrics for multiple content sources. This would allow for more flexible, maintainable, and reusable metric definitions, avoiding repeated hardcoding.",230,eb904391-4d82-4b02-4f99-5eef7336117f
"active_sub_volume_by_masthead_daily_specific_date, active_sub_volume_daily_filtered_rate_plan, offplatform_sub_volume_daily_specific_date, offplatform_sub_volume_by_masthead_daily_specific_date, active_sub_volume_by_rate_plan_daily_filtered",Hardcoded Logic,"Multiple metrics within the dashboard use hardcoded specific dates (e.g., '2025-07-09', '2025-07-08', '2025-07-10') in their `WHERE` clauses. This makes the dashboard static, providing only a snapshot for a fixed historical date rather than dynamic, current, or user-selectable views. This significantly limits the dashboard's utility for ongoing monitoring and trend analysis.","WHERE
  cal.calendar_date = DATE '2025-07-09'","Replace hardcoded dates with dynamic date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) to allow the dashboard to display current data or enable users to select specific dates/ranges. Looker Studio's date range controls should be leveraged.",231,6d3aa90f-e0e3-4462-9032-286b434adfe8
offplatform_sub_volume_daily_trend,Hardcoded Logic,"While the end date for the trend metric is dynamic (`CURRENT_DATE('Australia/Sydney')`), the start date is hardcoded (`DATE '2024-07-01'`). This limits the flexibility of the trend analysis to a fixed historical starting point.","WHERE
  cal.calendar_date BETWEEN DATE '2024-07-01' AND CURRENT_DATE('Australia/Sydney')","Parameterize the start date using a Looker Studio date range control or define it relative to the current date (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)`) to provide a rolling window for trend analysis.",231,6d3aa90f-e0e3-4462-9032-286b434adfe8
"active_sub_volume_daily_filtered_rate_plan, active_sub_volume_by_rate_plan_daily_filtered",Anti-Pattern,"The SQL logic for filtering rate plans relies on extensive hardcoded lists within `NOT IN` and `IN` clauses. This approach is brittle, difficult to maintain, and prone to errors if rate plan definitions change or new rate plans are introduced. It also makes it challenging to understand the business logic without inspecting the SQL.","AND (gd.rate_plan_code NOT IN ('WT_DO_WEDMTH21W04', 'WT_DO_WEDMTH21AW04', ...) OR gd.rate_plan_code IS NULL)
AND gd.rate_plan_code IN ('TA_SDO_P019BW04', 'HS_SDO_P1016AW04', ...)","Centralize rate plan categorization. Create a dedicated lookup table (e.g., `dim_rate_plan_categories`) that maps `dw_offplatform_rate_plan_code` to business-friendly categories (e.g., 'Excluded', 'Included', 'Standard'). Join to this table and filter by category, or use Looker Studio parameters/filters to allow dynamic selection of rate plan groups.",231,6d3aa90f-e0e3-4462-9032-286b434adfe8
total_daily_target_by_publication_group_by_fy_section_team,Hardcoded Logic / Anti-Pattern,"All four metrics in this dashboard (`total_daily_target_by_publication_group_by_fy_section_team`, `total_daily_target_by_publication_group_by_publication_group`, `total_daily_target_by_section_team`, `total_daily_target_website`) utilize hardcoded date ranges in their `WHERE` clauses. A specific inconsistency is observed where `total_daily_target_by_publication_group_by_publication_group` uses an end date of `2025-06-29`, while the other three metrics use `2025-04-08`. This practice introduces potential data misalignment across related metrics and creates a manual maintenance burden for future date range updates.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2024-07-01' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-04-08' (and '2025-06-29' for one metric)","Implement dynamic date range logic (e.g., using `CURRENT_DATE()` and `DATE_TRUNC` for rolling periods) or externalize date parameters. For fixed fiscal year targets, consider a dedicated configuration table that stores target period start and end dates, allowing all metrics to reference a single, governed source for date filtering. This would ensure consistency and simplify updates.",232,003ea399-8d01-4613-91ef-e27f1254bda8
bq_billed_cost_daily_user,Hardcoded Logic|Anti-Pattern,"The SQL logic for filtering relevant users includes a hardcoded list of `LIKE` conditions for `principalEmail` (e.g., '%consumer%prd%', '%verity%prd%', '%bsg%'). This exact pattern is duplicated across all three metrics in the dashboard. This makes the user categorization logic difficult to maintain, update, or extend, and violates the DRY (Don't Repeat Yourself) principle. The `business_rules_sql` in the execution summary confirms these categories are actively being used, highlighting the need for a more robust, centralized definition.","lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%consumer%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%verity%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%finance%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%bsg%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%client%prd%'","Centralize the definition of user categories. This can be achieved by creating a dedicated lookup table (e.g., `user_email_categories`) that maps email patterns or specific emails to business categories. The main query can then join with this lookup table or use a subquery for filtering. This approach significantly improves maintainability, scalability, and consistency across metrics.",233,9d62354b-6993-4829-9de4-f12bf37befab
bq_billed_cost_quarterly_bsg_users,Hardcoded Logic|Anti-Pattern,"Similar to the 'Daily Billed Cost per User' metric, this metric also contains the identical hardcoded `LIKE` conditions for filtering `principalEmail`. This redundancy is a significant anti-pattern that complicates maintenance and updates. Additionally, the use of generic aliases like `clmn0_`, `clmn1_`, etc., within the nested queries reduces readability and understanding of the SQL logic.","lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%consumer%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%verity%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%finance%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%bsg%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%client%prd%'","Implement a centralized user categorization mechanism, such as a lookup table, to avoid repeating this complex filtering logic across multiple metrics. Furthermore, refactor the SQL to use more descriptive aliases (e.g., `total_billed_cost`, `user_email`, `quarter_start_date`) and consider using Common Table Expressions (CTEs) to improve query readability and modularity.",233,9d62354b-6993-4829-9de4-f12bf37befab
bq_billed_cost_quarterly_specific_bsg_user,Hardcoded Logic|Anti-Pattern,"This metric exhibits two critical hardcoded logic issues: 1) The same repeated `LIKE` conditions for `principalEmail` as seen in other metrics, and 2) A specific hardcoded quarter (`DATE '2025-01-01'`) and a specific user email address (`'bsg-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com'`). While the specific user filter is intentional for this metric's purpose, the hardcoded date makes the metric static and significantly limits its utility for a 'BAU' (Business As Usual) dashboard, which typically requires dynamic or rolling data.","lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%consumer%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%verity%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%finance%prd%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%bsg%' OR
    lower(protopayload_auditlog.authenticationInfo.principalEmail) LIKE '%client%prd%'
... clmn3_ = DATE '2025-01-01' AND clmn1_ = 'bsg-composer-prd@ncau-data-newsquery-prd.iam.gserviceaccount.com'","Address the hardcoded user categories by centralizing them (e.g., using a lookup table). For the hardcoded quarter, consider parameterizing it using Looker Studio controls or BigQuery scripting variables if the dashboard is meant to be dynamic. If it's intended as a historical snapshot, ensure it's clearly labeled as such. For ongoing BAU, a rolling quarter or `CURRENT_DATE()` based calculation would be more appropriate. Additionally, improve readability by using descriptive aliases instead of `clmn0_`, `clmn1_`, etc.",233,9d62354b-6993-4829-9de4-f12bf37befab
gross_revenue_current_year_current_period,Anti-Pattern,"Multiple 'Gross Revenue' and 'SS LGB' metrics (e.g., `gross_revenue_current_year_current_period`, `gross_revenue_last_year_current_period`, `ss_lgb_current_year_past_week`) employ highly repetitive `CASE WHEN` logic to filter data based on `relative_fy_year_offset`, `is_future_period_flag`, and `relative_fy_month_offset`. This creates redundancy, makes maintenance cumbersome, and increases the risk of inconsistencies if the underlying logic needs to change.",SUM(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN t0.gross_revenue_amount ELSE 0 END),"Centralize time-based filtering logic. Consider defining these period filters as calculated fields in the data source view or using a dedicated date dimension table with pre-calculated flags (e.g., `is_current_fy`, `is_current_period`). Alternatively, leverage Looker Studio's native date range filtering capabilities where appropriate, or define these as base metrics in a semantic layer (e.g., LookML, dbt metrics) to avoid repetition.",234,4a1b4017-aa80-42f5-a2ae-1bdb57fcb135
gross_revenue_current_year_current_period_k,Anti-Pattern,"Several metrics (e.g., `gross_revenue_current_year_current_period_k`, `gross_revenue_last_year_current_period_k`, `ss_lgb_current_year_k`) are simply their base metric divided by 1000. This is a presentation concern rather than a distinct business metric, leading to unnecessary metric proliferation and increased dashboard complexity.","SUM(SAFE_DIVIDE(CASE WHEN (...) THEN t0.gross_revenue_amount ELSE 0 END, 1000))","Define the base revenue/LGB metrics without the division. Utilize Looker Studio's native formatting options (e.g., 'Compact numbers' or custom number formatting) to display values in thousands (K) directly on the dashboard, eliminating the need for separate `_k` metrics.",234,4a1b4017-aa80-42f5-a2ae-1bdb57fcb135
financial_year_dim,Anti-Pattern,"Multiple dimension metrics (`financial_year_print_current_month_dimension`, `financial_year_dim`, `financial_short_month_dim`, `relative_fy_year_offset_dim`, `relative_fy_month_offset_dim`) include `LIMIT 1` in their SQL logic. This prevents the dimension from returning all distinct values, severely limiting its utility for filtering, grouping, or displaying historical/contextual data. For example, `financial_year_dim` will only return the latest financial year, not all available years.",SELECT financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` GROUP BY financial_year ORDER BY financial_year DESC LIMIT 1;,"Remove `LIMIT 1` and `ORDER BY` clauses from dimension SQL to allow them to return all distinct values. If the intent is to display a single 'current' value, it should be defined as a measure or a parameter, not a general dimension.",234,4a1b4017-aa80-42f5-a2ae-1bdb57fcb135
revenue_type_categorized_dim,Hardcoded Logic,"The `revenue_type_categorized_dim` uses nested `CASE WHEN` statements to categorize `revenue_type` based on `xtend_flag`. This logic is hardcoded within the metric definition, making it inflexible and difficult to update if categorization rules change. The `GROUP BY ... LIMIT 1` is also problematic for a dimension.",CASE WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END,"Implement categorization logic upstream in the data model (e.g., BigQuery view, dbt model) or use a dedicated lookup table for `revenue_type` and `xtend_flag` to derive `revenue_type_categorized`. This centralizes business logic, improves maintainability, and allows for easier updates.",234,4a1b4017-aa80-42f5-a2ae-1bdb57fcb135
sales_segment_gm_name_sync_categorized_dim,Hardcoded Logic|Anti-Pattern,"This dimension uses an extensive `CASE WHEN` statement to map specific GM names to themselves, including leading spaces in the output values (e.g., `' Ian Paterson'`, `'  Natalie Grabbe'`). This is a clear anti-pattern for categorization and indicates a lack of a proper lookup mechanism. The use of `'       null'` as a string for empty values is also poor practice. The `GROUP BY ... LIMIT 1` is also problematic for a dimension.",CASE WHEN (t0.sales_segment_gm_name_sync = 'Renee Sycamore') THEN 'Renee Sycamore' WHEN (t0.sales_segment_gm_name_sync = 'Ian Paterson') THEN ' Ian Paterson' WHEN (t0.sales_segment_gm_name_sync = 'Natalie Grabbe') THEN '  Natalie Grabbe' WHEN (t0.sales_segment_gm_name_sync = 'Kelly Healy') THEN '   Kelly Healy' WHEN (t0.sales_segment_gm_name_sync = 'Belinda MacPherson') THEN '    Belinda MacPherson' WHEN (t0.sales_segment_gm_name_sync = 'Lou Barrett') THEN '     Lou Barrett' WHEN (t0.sales_segment_gm_name_sync = 'Vacant') THEN '      Vacant' WHEN (t0.sales_segment_gm_name_sync = '') THEN '       null' ELSE NULL END,"Create a dedicated lookup table for `sales_segment_gm_name_sync` that includes the desired display names and any categorization logic. Join this lookup table to the `adsales_performance` table. Address the leading spaces issue, which is likely for display ordering but should be handled by sorting options in the BI tool or a separate sort key in the lookup table. Replace `'       null'` with actual `NULL` or a meaningful string like 'Unassigned'.",234,4a1b4017-aa80-42f5-a2ae-1bdb57fcb135
day_target_by_section_team_sum_filtered_health_wellness_excl_australian,Hardcoded Logic,"The SQL logic for this high-criticality metric directly embeds specific filter values ('The Australian', 'Health', 'wellness') within the WHERE clause. This approach is brittle; any changes to these categories (e.g., a new publication group, a reclassification of section teams, or a typo correction) would require a direct modification of the SQL, increasing maintenance overhead and the risk of errors. It also limits the reusability and flexibility of the metric.","WHERE t0.publication_group != 'The Australian' AND (t0.section_team = 'Health' OR STRPOS(t0.section_team, 'wellness') > 0)","To improve maintainability and scalability, consider externalizing these filter criteria. For `publication_group` exclusions, a configuration table or a dedicated view could manage the list of excluded groups. For `section_team` filtering (e.g., 'Health' or 'wellness'), a lookup table that maps `section_team` values to broader `section_category` (e.g., 'Health & Wellness') would be more robust. This allows business rules to be managed outside the core SQL, enabling easier updates and better data governance.",235,0cbe9a87-5f64-4e05-b993-a508e99ecdcd
dim_l03_department,Anti-Pattern,"The `L03_department` field is filtered using hardcoded `NOT IN ('null', 'Not Found')` clauses across multiple metrics (`dim_l03_department`, `total_distinct_l03_departments`, `total_distinct_projects`, `distinct_jira_keys_per_l03_department`). While functional, this approach is brittle and not scalable if the list of invalid values changes or grows. It also indicates potential upstream data quality issues that are being handled at the dashboard level.","SAFE_CAST(L03_department AS STRING) NOT IN ('null', 'Not Found')","Investigate upstream data quality processes to prevent 'null' or 'Not Found' values from entering the `jira_integrated_dashboard` table. If these are legitimate exclusions, consider externalizing this list into a configuration table or a more robust data quality rule engine for improved maintainability and governance. This would centralize the definition of 'valid' L03 departments.",236,34cd05a8-37bb-4a61-b1f5-c782a32bffb3
dim_l03_department,Anti-Pattern / Data Mismatch,"All dimension metrics (`dim_l03_department`, `dim_project`, `dim_jira_link`, `dim_jira_summary`, `dim_status_category`, `dim_jira_key`) include a `LIMIT 1` clause in their `sql_logic`. This is highly unusual and problematic for a dimension, as it would only ever return a single arbitrary record. If these dimensions are used in tables, filters, or group-by clauses in the dashboard, Looker Studio's generated queries would likely override or ignore this `LIMIT 1`, or the dashboard would display incomplete data. This suggests the provided `sql_logic` might not accurately represent how these dimensions are actually queried and used in the dashboard, or it points to a fundamental misunderstanding of dimension definition.",LIMIT 1,"Clarify the intended use of these dimension metrics within the dashboard. If they are meant to display multiple values (e.g., in a table or filter), the `LIMIT 1` clause should be removed from the metric definition. If this `sql_logic` is merely a sample of how the field is accessed, ensure the actual queries used by the dashboard are documented and align with business requirements. This discrepancy needs urgent investigation to ensure data integrity and correct interpretation of dashboard data.",236,34cd05a8-37bb-4a61-b1f5-c782a32bffb3
distinct_subscriptions_by_cluster_name,Anti-Pattern,"Multiple metrics on this dashboard (e.g., 'Distinct Subscriptions', 'Sum of Subscription IDs', 'Count of Tenure Days', 'Sum of Tenure Days', 'Distinct Subscribers') share an identical, complex nested subquery (aliased as `t0`). This subquery performs data aggregation (`active_days`), joins two tables (`segmentation_engagement_date_dif` and `segmentation_clusters_named`), and defines the `Engagement_Level` dimension. This repetition is a significant anti-pattern, leading to redundant computation, increased query execution time, and a high risk of inconsistencies if the underlying logic needs to be updated.","FROM
  (
    SELECT
      A.subscriber_id_src,
      A.subscription_id_src,
      A.masthead,
      A.active_days,
      A.subscription_tenure_days,
      B.Cluster_Name,
      B.pcs_id,
      CASE
        WHEN A.active_days < 6 THEN ""Disengaged""
        WHEN A.active_days BETWEEN 6 AND 15 THEN ""Engaged""
        WHEN A.active_days >= 16 THEN ""Highly Engaged""
        ELSE ""Other""
      END AS Engagement_Level
    FROM
      (
        SELECT
          subscriber_id_src,
          subscription_id_src,
          masthead,
          count(DISTINCT activity_date) AS active_days,
          subscription_tenure_days
        FROM
          `nau-data-nprod-dataservices.Emma_working_files.segmentation_engagement_date_dif`
        WHERE
          date_dif_within_30 >= 0 AND date_dif_within_30 <= 30
        GROUP BY 1, 2, 3, 5
      ) AS A
      LEFT JOIN
      (
        SELECT
          * 
        FROM
          `nau-data-nprod-dataservices.Emma_working_files.segmentation_clusters_named`
      ) AS B
      ON A.subscriber_id_Src = B.pcs_id
  ) AS t0","Consolidate this common subquery logic into a single, governed BigQuery view or a Looker Studio data source that pre-calculates these derived fields and joins. This 'base' view/source can then be referenced by all dependent metrics, improving performance, maintainability, and data consistency. Consider using a CTE within Looker Studio's custom SQL data source if a view is not immediately feasible, though a view is preferred for reusability across dashboards.",237,a6c0f7df-8da6-44dc-bf50-72a907020ebc
engagement_level_dimension,Hardcoded Logic,"The `Engagement_Level` classification logic, defined by a `CASE` statement based on `active_days`, is hardcoded and duplicated across multiple metrics' SQL definitions. While a separate `engagement_level_dimension` metric exists, its SQL is slightly different (only deriving `active_days` from a subquery) and doesn't prevent the duplication of the `CASE` statement in other metrics' complex subqueries. This makes updates to engagement level definitions cumbersome and prone to error.","CASE
        WHEN A.active_days < 6 THEN ""Disengaged""
        WHEN A.active_days BETWEEN 6 AND 15 THEN ""Engaged""
        WHEN A.active_days >= 16 THEN ""Highly Engaged""
        ELSE ""Other""
      END AS Engagement_Level","Define `Engagement_Level` as a calculated field within a consolidated Looker Studio data source or, ideally, as a column in a pre-calculated BigQuery view. This ensures a single source of truth for the definition, simplifying maintenance and guaranteeing consistency across all metrics that use it. If the `active_days` calculation is also part of this consolidated view, the `CASE` statement can directly reference that column.",237,a6c0f7df-8da6-44dc-bf50-72a907020ebc
sum_subscription_ids_by_active_days,Anti-Pattern,"The metric 'Sum of Subscription IDs by Active Days' explicitly sums `subscription_id_src`. As noted in its business description, summing IDs is almost universally a meaningless business metric and indicates a fundamental misunderstanding or misconfiguration of how identifiers should be treated in a data model. IDs are typically used for counting distinct entities, not for aggregation.",SUM(SAFE_CAST(t0.subscription_id_src AS INT64)) AS sum_of_subscription_ids,"Review the business requirement for this metric. If the intent is to count unique subscriptions, `COUNT(DISTINCT t0.subscription_id_src)` should be used instead. If there's a specific, unusual business reason for summing IDs, it should be clearly documented and justified; otherwise, this metric should be removed or replaced with a meaningful aggregation (e.g., count, average of a relevant measure).",237,a6c0f7df-8da6-44dc-bf50-72a907020ebc
ALL,Anti-Pattern,"All 14 metrics in the dashboard duplicate the identical `FROM`, `JOIN`, and `WHERE` clauses. This redundancy leads to inefficient query execution (as the same base data is processed repeatedly for each metric), increased maintenance overhead (any change to the base logic requires updating 14 separate metric definitions), and a higher risk of inconsistencies if the underlying data model or filtering logic changes across metrics.","FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS cancels
JOIN `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS acq
ON cancels.dw_subscription_movement_id = acq.dw_related_subscription_movement_id
WHERE acq.fy_year >= 2022
AND cancels.Subscription_Movement_Count_Type = 'cancellation'
AND cancels.Subscription_Movement_Count_Sub_Type IN ('switch_cancellation', 'reactivation_30day_cancellation')","Create a consolidated base view or a BigQuery CTE (Common Table Expression) that encapsulates this core join and filtering logic. All dashboard metrics should then query this single, optimized base view/CTE. This approach significantly improves query performance, simplifies maintenance, and ensures consistency across all metrics. If using Looker, consider defining this base logic as a derived table or a common explore.",238,8ea43b00-837f-4d0f-9c52-5c5f451785ea
acquisition_masthead_category,Hardcoded Logic,"The `acquisition_masthead_category` metric uses a hardcoded `CASE` statement to categorize masthead codes into predefined groups. This approach is brittle; any changes to masthead codes, new mastheads, or modifications to category definitions will require manual updates to this SQL logic, increasing the risk of errors and maintenance burden. Given its 'high' business criticality, this is a significant governance concern.","CASE
    WHEN acq.masthead = 'TA' THEN 'The Australian'
    WHEN acq.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metros'
    WHEN acq.masthead IN ('GC', 'NT', 'TM', 'TC', 'TB', 'GA', 'CP') THEN 'Regionals'
    WHEN acq.masthead = 'WT' THEN 'Others'
    WHEN acq.masthead IN ('RN', 'CS', 'TS', 'AP', 'PU', 'SC') THEN 'Deep Niche Publications'
    ELSE 'Discontinued'
  END AS Acquisition_Masthead_Category","Implement a dedicated lookup table (e.g., `dim_masthead_category`) in BigQuery that maps `masthead` codes to their respective categories. The metric's SQL should then join to this lookup table. This centralizes categorization logic, improves data governance, and simplifies updates. If using Looker, this could also be managed via a LookML view or a parameter.",238,8ea43b00-837f-4d0f-9c52-5c5f451785ea
all_metrics,Hardcoded Logic,"All metrics within the dashboard utilize a hardcoded date range ('2024-06-12' to '2024-06-19') in their WHERE clauses. This prevents the dashboard from displaying current or dynamic data, effectively making it a static historical report for a single week. This is a fundamental flaw for a live dashboard.","WHERE
        DATE(creation_time) BETWEEN ""2024-06-12"" AND ""2024-06-19""
    ...
WHERE
    creation_time >= TIMESTAMP '2024-06-12' AND creation_time < TIMESTAMP_ADD(TIMESTAMP '2024-06-19', INTERVAL 1 DAY)","Implement Looker Studio date range parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to allow users to dynamically select the reporting period. This is crucial for a functional and up-to-date dashboard.",239,e1ee24c8-128c-4276-a251-ac722571b97b
all_metrics_except_total_jobs_overall,Anti-Pattern,"Almost all metrics define an identical `base_data` Common Table Expression (CTE) to extract and pre-process data from `JOBS_BY_PROJECT`. This leads to significant code duplication, increased query execution overhead due to repeated processing, and makes maintenance difficult. Any change to the base data extraction logic would require updating multiple individual metric queries.","WITH base_data AS (
    SELECT
        user_email,
        count(job_id) AS total_jobs,
        creation_time,
        EXTRACT(HOUR FROM DATETIME(creation_time, ""Australia/Sydney"")) AS usage_hour
    FROM
        `ncau-data-newsquery-prd.region-US.INFORMATION_SCHEMA.JOBS_BY_PROJECT`
    WHERE
        DATE(creation_time) BETWEEN ""2024-06-12"" AND ""2024-06-19""
    GROUP BY 1, 3, 4
)","Create a shared, parameterized BigQuery view or a Looker Studio custom connector/data source that encapsulates this `base_data` logic. All metrics should then query from this single, consistent, and potentially optimized source. This would drastically reduce code duplication and improve maintainability.",239,e1ee24c8-128c-4276-a251-ac722571b97b
"total_jobs_tableau_users, total_jobs_newsfact_service_users, daily_job_count_tableau_users, hourly_job_count_tableau_users, daily_job_count_newsfact_service_users, hourly_job_count_newsfact_service_users, distinct_dates_tableau_users, distinct_dates_looker_users, distinct_usage_hours_newsfact_service_users, distinct_usage_hours_looker_users",Hardcoded Logic / Anti-Pattern,"User classification (e.g., 'tableau', 'newsfact service', 'looker') is hardcoded directly into the SQL queries using `STRPOS` or `LIKE` clauses on the `user_email` field. This makes the business logic for user categorization inflexible and difficult to manage. Adding new user types, modifying existing patterns, or correcting misclassifications requires direct SQL changes in multiple places.","AND STRPOS(user_email, 'tableau') > 0;
AND STRPOS(user_email, 'svc') > 0 AND STRPOS(user_email, 'newsfact') > 0;
AND user_email LIKE ""%looker%""","Implement a user classification lookup table (e.g., `user_type_lkp`) in BigQuery that maps `user_email` patterns or specific email domains to a `user_category` dimension. Join this lookup table in the shared `base_data` view/source. This allows for centralized management of user classification logic without modifying individual metric queries.",239,e1ee24c8-128c-4276-a251-ac722571b97b
"daily_job_count_tableau_users, hourly_job_count_tableau_users, daily_job_count_newsfact_service_users, hourly_job_count_newsfact_service_users, distinct_dates_tableau_users, distinct_usage_hours_newsfact_service_users, distinct_dates_looker_users, distinct_usage_hours_looker_users",Anti-Pattern / Potential Data Mismatch,"Several aggregation and dimension metrics include a `LIMIT 10` clause. While this might be intended for specific 'top N' visualizations, it can lead to incomplete data display for daily/hourly trends or distinct lists if the actual number of days/hours/items exceeds 10. For total counts or full trend lines, this limit is inappropriate and misleading.",LIMIT 10;,"Review the dashboard's visualization requirements for each metric. If the intent is to show all data for the selected period, remove the `LIMIT 10` clause. If a 'top N' is genuinely required, ensure the metric name and visualization clearly communicate this limitation to the user.",239,e1ee24c8-128c-4276-a251-ac722571b97b
unique_users_by_dashboard_title_australian_prestige,Hardcoded Logic,"The metric filters users by a hardcoded division name ('The Australian & Prestige') directly within the WHERE clause. This reduces the flexibility and reusability of the metric, making it harder to maintain if division names change or if similar metrics are needed for other divisions.",SAFE_CAST(t0.division AS STRING) IN ('The Australian & Prestige'),"Consider externalizing division names into a lookup table or a configuration variable. This would allow for dynamic filtering and improve maintainability, especially if the number of divisions or their names are subject to change, or if this pattern is repeated across other dashboards/metrics.",240,6e1a98d6-289f-44d8-b6b9-c0965640412c
multiple_metrics_q1_2_5_6,Hardcoded Logic|Anti-Pattern|Inconsistent Filtering,"A large number of metrics (e.g., Total Delivered Emails, Total Unsubscribed, Unique Clicks, Unique Opens, Total Opens, Total Sends, Total Bounces, Total Clicks, Total Records, and all rate-related metrics) share an identical, extremely long, and complex hardcoded `WHERE NOT REGEXP_CONTAINS` clause. This makes the filter logic opaque, difficult to maintain, and prone to errors. Any change to the exclusion criteria requires updating numerous individual metric definitions.","WHERE NOT ( (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape |Delicious |Beauty EDM|Vogue Living Weekly|BSL_|VA newsletter')) AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT|MARKETING|Special Offer|Rewards|EVENT|Not Available|_Suspend|_Failed|Abandon|Reinforcement|System|Connect|_Lead_Nurture|Rewards_|_Wave|Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Delivery_Issue|Decommission|Switch|Modify|Cancellation|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause|Triggered|Journey|Winback|WINBACK|Newspass|NEWSPASS|Feature-led'))) OR (t0.newsletter_brand = 'Taste.com.au' AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered'))) OR (t0.newsletter_brand = 'Australia\'s Best Recipes' AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered'))) OR (t0.newsletter_brand = 'Delicious' AND SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Weekday eDM|Weekend eDM|Delicious Weekly')) OR (t0.newsletter_brand = 'Escape' AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'EDM'))) )","Centralize the exclusion logic. Create a dedicated dimension table for `newsletter_send_email_name` and `newsletter_brand` with flags (e.g., `is_marketing_email`, `is_test_email`, `is_system_email`) that can be joined and filtered. Alternatively, if a dimension table is not feasible, define a common, governed SQL view that applies this filter, and have all metrics query that view.",241,ec72cb0e-78f9-45d1-805f-4aef62ea9780
total_send_q3,Inconsistent Filtering|Hardcoded Logic,"The `total_send_q3` metric uses a filter logic that is *nearly identical* but subtly different from the 'Standard Filter' used by other metrics (e.g., `total_send_q1_2_5_6`). Specifically, the second `REGEXP_CONTAINS` list for `newsletter_send_email_name` has variations (e.g., 'EVENT' is missing, 'Newspass|NEWSPASS' is added). This inconsistency creates ambiguity about which filter is truly 'standard' and can lead to conflicting numbers for similar metrics, undermining data trust.","WHERE NOT ( (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape |Delicious |Beauty EDM|Vogue Living Weekly|BSL_|VA newsletter')) AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT|MARKETING|Special Offer|EVENT|Not Available|_Suspend|_Failed|Abandon|Reinforcement|System|Connect|_Lead_Nurture|Rewards_|_Wave|Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Delivery_Issue|Decommission|Switch|Modify|Cancellation|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause|Triggered|Journey|Winback|WINBACK|Newspass|NEWSPASS'))) OR (t0.newsletter_brand = 'Taste.com.au' AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered'))) OR (t0.newsletter_brand = 'Australia\'s Best Recipes' AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered'))) OR (t0.newsletter_brand = 'Delicious' AND SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Weekday eDM|Weekend eDM|Delicious Weekly')) OR (t0.newsletter_brand = 'Escape' AND NOT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'EDM'))) )","Standardize the exclusion logic across all relevant metrics. If different exclusion criteria are genuinely needed for different business contexts, these should be clearly defined, documented, and ideally managed via a parameter or a dedicated view/function, rather than hardcoded, slightly varied REGEX strings.",241,ec72cb0e-78f9-45d1-805f-4aef62ea9780
unique_openers_fct,Anti-Pattern|Performance Concern,"The calculation of 'Unique Openers' uses `COUNT(DISTINCT CONCAT(SAFE_CAST(FORMAT_DATETIME('%w', t0.dw_newsletter_send_datetime) AS INT64),'-',SAFE_CAST(t0.newsletter_send_email_name AS STRING),'-',SAFE_CAST(t0.newsletter_subject AS STRING),'-',SAFE_CAST(t0.subscriber_id_src AS STRING)))`. While functionally correct, concatenating multiple fields and then applying `COUNT(DISTINCT)` can be computationally expensive and less performant on very large datasets compared to alternative approaches, especially if these combinations are frequently queried.","COUNT(DISTINCT CONCAT(SAFE_CAST(FORMAT_DATETIME('%w', t0.dw_newsletter_send_datetime) AS INT64),'-',SAFE_CAST(t0.newsletter_send_email_name AS STRING),'-',SAFE_CAST(t0.newsletter_subject AS STRING),'-',SAFE_CAST(t0.subscriber_id_src AS STRING)))","Evaluate if a pre-computed unique identifier for these combinations can be added to the `newsletter_activity_fct` table during ETL/ELT. Alternatively, explore if a more efficient `GROUP BY` and `COUNT(*)` approach can be used if the underlying data structure allows for it, or if a materialized view of unique openers is feasible.",241,ec72cb0e-78f9-45d1-805f-4aef62ea9780
total_daily_target_metro_business_jul_1_27_2025,Hardcoded Logic,"This metric, intended for a 'Sunrise Report', uses a hardcoded future date range (July 1-27, 2025). This makes the dashboard static and unable to reflect current or dynamic daily targets without manual SQL updates. The date range also differs from the second metric on the same dashboard.","WHERE
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-07-01'
  AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-07-27'","Replace hardcoded dates with dynamic date logic (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL N DAY)`) or leverage Looker Studio's built-in date range controls and parameters to allow users to select the desired period.",242,0071d646-565a-46be-b47c-e78a85d5cee7
daily_target_metro_business_by_date_jul_1_15_2025,Hardcoded Logic,"Similar to the first metric, this metric also uses a hardcoded future date range (July 1-15, 2025), making the 'Sunrise Report' static. The date range here is different from the first metric, which could lead to confusion or inconsistent reporting if not explicitly understood by users.","WHERE
  PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-07-01'
  AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-07-15'",Implement dynamic date logic or dashboard date range controls. Ensure consistency in date ranges across related metrics or provide clear explanations for differing periods.,242,0071d646-565a-46be-b47c-e78a85d5cee7
total_daily_target_metro_business_jul_1_27_2025,Hardcoded Logic,"Both metrics hardcode the `section_team` filter to 'Metro Business'. While this dashboard focuses on 'Metro Business', this pattern limits reusability. If targets for other teams are needed, new metrics with identical SQL structures (except for the team name) would likely be created, leading to redundancy.",AND t0.section_team = 'Metro Business';,Introduce a dashboard filter or parameter for `section_team` to allow dynamic selection of teams without modifying the underlying SQL. This promotes reusability and reduces maintenance overhead.,242,0071d646-565a-46be-b47c-e78a85d5cee7
daily_target_metro_business_by_date_jul_1_15_2025,Hardcoded Logic,"Both metrics hardcode the `section_team` filter to 'Metro Business'. While this dashboard focuses on 'Metro Business', this pattern limits reusability. If targets for other teams are needed, new metrics with identical SQL structures (except for the team name) would likely be created, leading to redundancy.",AND t0.section_team = 'Metro Business',Introduce a dashboard filter or parameter for `section_team` to allow dynamic selection of teams without modifying the underlying SQL. This promotes reusability and reduces maintenance overhead.,242,0071d646-565a-46be-b47c-e78a85d5cee7
total_2nd_margin_rev_sum_filtered_future_non_hybrid_specific_months_service_models,Hardcoded Logic / Anti-Pattern,"Multiple metrics across the dashboard use an identical, long hardcoded list of fiscal month IDs (e.g., '202401' through '202507'). This makes updates to the reporting period cumbersome, error-prone, and requires modifying numerous individual metrics.","SAFE_CAST(t0.fiscal_month_id AS STRING) IN ('202401', '202402', '202403', '202404', '202405', '202406', '202407', '202408', '202409', '202410', '202411', '202412', '202501', '202502', '202503', '202504', '202505', '202506', '202507')","Replace hardcoded fiscal month lists with dynamic date filters (e.g., relative date functions like `DATE_ADD(CURRENT_DATE(), INTERVAL 1 MONTH)` to `DATE_ADD(CURRENT_DATE(), INTERVAL 24 MONTH)`) or implement a fiscal calendar lookup table. Alternatively, leverage Looker Studio's date range controls or parameters.",243,c44e51ad-f0c4-4a5e-bb7c-00044deaa278
total_2nd_margin_rev_sum_filtered_future_non_hybrid_specific_months_service_models,Hardcoded Logic / Anti-Pattern,"Several metrics contain an identical, long hardcoded list of specific service models. This indicates a lack of a governed dimension for service models and makes any changes to the service model hierarchy or additions/removals difficult to manage consistently across the dashboard.","t0.service_model IN ('E1.F2F Key Accounts', 'E2. F2F Agency', 'E3. Direct', 'N1. New Business F2F', 'N2. New Business Virtual', 'Other', 'V2. Transactional', 'V3. Self Service', 'V4. Account Managed')","Create a governed dimension table for service models in the underlying data model and join to it. This centralizes the definition and allows for easier maintenance and consistency. For dashboard filtering, use a multi-select parameter or filter control linked to this dimension.",243,c44e51ad-f0c4-4a5e-bb7c-00044deaa278
total_2nd_margin_rev_sum_filtered_future_non_hybrid_concat_months_single,Anti-Pattern / Brittle Logic,"Filtering by concatenating `fiscal_month_id` and `fiscal_month` (e.g., '202507 Jan') for comparison is brittle. It relies on consistent string formatting and can lead to issues if the underlying data types or formats change. It also forces string comparison for what should ideally be date or numeric comparisons.","CONCAT(SAFE_CAST(t0.fiscal_month_id AS STRING),' ',SAFE_CAST(t0.fiscal_month AS STRING)) IN ('202507 Jan')","Filter directly on `fiscal_month_id` (ensuring it's an appropriate numeric or date type) or use proper date functions to derive and compare month/year components, avoiding string concatenation for filtering.",243,c44e51ad-f0c4-4a5e-bb7c-00044deaa278
total_2nd_margin_rev_sum_filtered_future_non_hybrid_specific_months_service_models,Redundancy / Metric Sprawl,"The dashboard contains multiple sets of metrics (e.g., `_specific_months_service_models`, `_concat_months_single`, `_concat_months_multi`) that are functionally very similar, differing only by their hardcoded fiscal month filters. This indicates a lack of dynamic filtering or parameterization, leading to an excessive number of nearly identical metrics.",N/A (This is a structural issue across multiple metrics rather than a single code snippet),"Leverage Looker Studio's filter controls and parameters to allow users to dynamically select fiscal months and service models. This would consolidate many of these redundant metrics into a single, flexible metric definition.",243,c44e51ad-f0c4-4a5e-bb7c-00044deaa278
service_model_filtered_future_non_hybrid,Anti-Pattern / Type Coercion for Comparison,"Casting `current_fiscal_month_id` and `fiscal_month_id` to STRING for comparison (`<`) can lead to incorrect results if the string representation does not sort numerically (e.g., '9' vs '10'). While it might work for YYYYMM format, it's less robust and less performant than numeric or date comparison.",SAFE_CAST(t0.current_fiscal_month_id AS STRING) < SAFE_CAST(t0.fiscal_month_id AS STRING),"Ensure `fiscal_month_id` and `current_fiscal_month_id` are stored as integer or date types and compare them numerically or as dates. If they must be strings, ensure they are zero-padded to maintain lexicographical order (e.g., '202401' vs '202410').",243,c44e51ad-f0c4-4a5e-bb7c-00044deaa278
all_metrics,Anti-Pattern,"All 17 metrics on this dashboard share the exact same complex set of CTEs (bolded_experiment, no_bolded_experiment, combined_experiment_data, author_preferences, subscriber_activity, user_level_data). This duplication is highly inefficient, increases query execution time, and makes maintenance extremely difficult. Any change to the core data logic requires updating 17 separate metric definitions.","WITH
  bolded_experiment AS (...
  no_bolded_experiment AS (...
  combined_experiment_data AS (...
  author_preferences AS (...
  subscriber_activity AS (...
  user_level_data AS (...","Consolidate the common data preparation logic into a single, well-defined BigQuery view or table. This view should pre-process the 'user_level_data' and expose it as a clean data source for Looker Studio. Each metric can then be a simple aggregation on this consolidated view, significantly reducing query complexity and improving maintainability.",244,db1deb9c-ce2b-4d07-b194-b278597339b5
all_metrics,Hardcoded Logic,"The date filters `au_activity_date = CURRENT_DATE('Australia/Sydney') - 1` and `dw_tgt_partition_date = CURRENT_DATE('Australia/Sydney') - 1` are hardcoded, limiting the dashboard to display only 'yesterday's' data. This restricts historical analysis or flexible date range selection.","WHERE
      au_activity_date = CURRENT_DATE('Australia/Sydney') - 1 AND experiment_detail = 'NM20_Metro_Follow_Button(5695197573545984):Bolded_Follow_Button_(6086553840123904)' AND
      LOWER(brand) IN ('daily telegraph', 'herald sun', 'the courier mail', 'the advertiser')","Parameterize the date filter in the underlying data model (if creating a view) or leverage Looker Studio's date range controls to allow users to select their desired period. If 'yesterday' is the primary use case, ensure the data pipeline reliably delivers data for this specific day.",244,db1deb9c-ce2b-4d07-b194-b278597339b5
all_metrics,Hardcoded Logic,The experiment details and brand names are hardcoded within the SQL queries. This makes the dashboard specific to a single experiment ('NM20_Metro_Follow_Button') and a fixed set of brands. Any new experiment or brand requires manual SQL modification across all metrics.,"WHERE
      au_activity_date = CURRENT_DATE('Australia/Sydney') - 1 AND experiment_detail = 'NM20_Metro_Follow_Button(5695197573545984):Bolded_Follow_Button_(6086553840123904)' AND
      LOWER(brand) IN ('daily telegraph', 'herald sun', 'the courier mail', 'the advertiser')","If the dashboard is intended to be reusable for different experiments or brands, these values should be exposed as dimensions in the consolidated data model. Looker Studio filters can then be used to select specific experiments or brands, providing flexibility without SQL changes. If it's strictly for this experiment, consider externalizing these IDs to a configuration table for easier updates.",244,db1deb9c-ce2b-4d07-b194-b278597339b5
all_metrics,Anti-Pattern,"The SQL queries use `UNION ALL` to generate 'Overall', 'Brand', and 'Device' breakdowns. This approach pushes presentation-layer aggregation logic into the data query, leading to larger result sets and less efficient processing. Looker Studio is designed to handle such breakdowns dynamically using its dimension and grouping features.","SELECT
  experiment_group,
  'Overall' AS breakdown_type,
  COUNT(user_identifier) AS total_interactions
FROM
  user_level_data
GROUP BY experiment_group
UNION ALL
SELECT
  experiment_group,
  CONCAT('Brand: ', brand) AS breakdown_type,
  COUNT(user_identifier) AS total_interactions
FROM
  user_level_data
GROUP BY experiment_group, brand
UNION ALL
SELECT
  experiment_group,
  CONCAT('Device: ', device_type) AS breakdown_type,
  COUNT(user_identifier) AS total_interactions
FROM
  user_level_data
GROUP BY experiment_group, device_type","Remove the `UNION ALL` structure from the SQL. The consolidated data model should expose `experiment_group`, `brand`, and `device_type` as dimensions. Looker Studio can then be configured to display metrics broken down by these dimensions as needed, improving dashboard performance and flexibility.",244,db1deb9c-ce2b-4d07-b194-b278597339b5
current_period_gross_media_spend,Hardcoded Logic|Anti-Pattern,"This metric uses a highly complex and hardcoded `CASE` statement to determine 'Current Year' (CY) and 'Previous Year' (PY) based on a fixed reference date (December 1, 2024). This makes the metric non-dynamic and will require manual updates annually. Additionally, the date range filter `(PARSE_DATE('%b %y', 'Dec 24')) AND (PARSE_DATE('%b %y', 'Jan 24'))` appears contradictory (Dec 2024 to Jan 2024) and is also hardcoded. Specific `MediaSubType` ('Content Sites') and `AdFormat` ('Video') are hardcoded filters.","SELECT
    SUM(
        CASE
            WHEN (
                (CASE WHEN ((DATETIME_DIFF(SAFE_CAST(PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) AS DATETIME), SAFE_CAST(DATE(2024, 12, 1) AS DATETIME), MONTH) <= 0) AND (DATETIME_DIFF(SAFE_CAST(PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) AS DATETIME), SAFE_CAST(DATE(2024, 12, 1) AS DATETIME), MONTH) > -12)) THEN 'CY'
                WHEN (
                    (DATETIME_DIFF(SAFE_CAST(PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) AS DATETIME), SAFE_CAST(DATE(2024, 12, 1) AS DATETIME), MONTH) <= -12) AND (DATETIME_DIFF(SAFE_CAST(PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) AS DATETIME), SAFE_CAST(DATE(2024, 12, 1) AS DATETIME), MONTH) > -24)) THEN 'PY'
                ELSE NULL
            END = 'CY'
            ) AND (
                (PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) <= PARSE_DATE('%b %y', 'Dec 24')) AND (PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) >= PARSE_DATE('%b %y', 'Jan 24'))
            )
        THEN t0c0d1.GrossMediaSpend
        ELSE 0
        END
    ) AS Current_Period_GrossMediaSpend
FROM
    `ncau-data-newsquery-prd.sbx_dcp.smi_industry_data` AS t0c0d1
WHERE
    t0c0d1.MediaSubType IN ('Content Sites') AND t0c0d1.AdFormat IN ('Video')","Replace hardcoded date logic with dynamic date parameters (e.g., `CURRENT_DATE()`) and a proper date dimension table for `CY`/`PY` calculations. Externalize `MediaSubType` and `AdFormat` filters into dashboard controls or a configuration table if they are subject to change. Investigate and correct the `Dec 24` to `Jan 24` date range logic as it appears illogical.",245,e830291d-dabb-421d-87cc-4241cc7502ad
nca_gross_media_spend,Hardcoded Logic,The metric hardcodes 'News Corporation' as the `MasterOwner` and uses a fixed end date (May 2025). This limits its reusability for other owners or future periods and requires manual updates.,"SUM(CASE WHEN (t0c0d2.MasterOwner = 'News Corporation') THEN t0c0d2.GrossMediaSpend ELSE 0 END) AS NCA_GrossMediaSpend
...
WHERE
    (PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d2.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d2.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) <= DATE(2025, 5, 1))","Parameterize the `MasterOwner` filter or use a lookup table for owner classifications. Replace hardcoded end dates with dynamic date logic (e.g., `CURRENT_DATE()`) or dashboard date range controls.",245,e830291d-dabb-421d-87cc-4241cc7502ad
news_publisher_gross_media_spend,Hardcoded Logic|Anti-Pattern,"This metric uses an extensive, hardcoded `OR` list within a `CASE` statement to classify 'news publisher' owners. This is a significant anti-pattern, making the logic highly unmaintainable, prone to errors if owner names change, and difficult to scale if new owners are added. The end date (June 2025) is also hardcoded.","CASE
            WHEN (t0c0d1.Owner = 'Schwartz Media' OR t0c0d1.Owner = 'BBC Digital' OR t0c0d1.Owner = 'News Publishing' OR t0c0d1.Owner = 'Foxtel' OR t0c0d1.Owner = 'Other Owners' OR t0c0d1.Owner = 'Seven Digital' OR t0c0d1.Owner = 'Nine Metro Publishing' OR t0c0d1.Owner = 'Solstice Media' OR t0c0d1.Owner = 'Seven West Media' OR t0c0d1.Owner = 'News Digital' OR t0c0d1.Owner = 'DMGT (Daily Mail General Trust)' OR t0c0d1.Owner = 'West Australian Newspapers' OR t0c0d1.Owner = 'Community News' OR t0c0d1.Owner = 'News Corporation' OR t0c0d1.Owner = 'Guardian News and Media Ltd.' OR t0c0d1.Owner = 'Nine Digital' OR t0c0d1.Owner = 'Australian Community Media') THEN 'news publisher'
            ELSE 'Others'
        END = 'news publisher'
    )
    AND
    (PARSE_DATE('%F', CONCAT(SAFE.RIGHT(t0c0d1.CalYear, 4), '-', SAFE_CAST(SAFE_CAST(SAFE.RIGHT(t0c0d1.YearMonth, 2) AS FLOAT64) AS STRING), '-1')) <= DATE(2025, 6, 1))","Create a dedicated lookup table for `Owner` classifications (e.g., `owner_classification_lkp`) that maps `Owner` names to `publisher_type` (e.g., 'news publisher', 'others'). Join this lookup table to the `smi_datasource` table to dynamically classify owners. Replace hardcoded end dates with dynamic date logic or dashboard date range controls.",245,e830291d-dabb-421d-87cc-4241cc7502ad
projected_revenue_pacing_teads,Hardcoded Logic,"The 'Projected Revenue (Pacing) - Teads' metric uses a hardcoded future date (2025-07-15) within its `DATETIME_TRUNC` function. This makes the metric static and irrelevant for current pacing analysis, as it will only ever calculate projected revenue for July 2025.","DATETIME(TIMESTAMP '2025-07-15 03:30:43.421592+00', 'UTC')","Replace the hardcoded timestamp with a dynamic date function like `CURRENT_TIMESTAMP()` or leverage Looker Studio's built-in date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to ensure the metric always reflects the current month's data.",246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
projected_revenue_pacing_teads,Anti-Pattern,"The 'Projected Revenue (Pacing) - Teads' metric includes a `LIMIT 1` clause. For a measure intended to be aggregated, this clause severely restricts its utility, preventing it from being used in tables or charts that require multiple rows or further aggregation/grouping.",LIMIT 1,"Remove the `LIMIT 1` clause. If this metric is intended for a single-value scorecard, Looker Studio's visualization layer handles the aggregation without needing `LIMIT 1` in the underlying SQL.",246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
revenue_net_year_ago_teads,Hardcoded Logic,"Similar to the projected revenue metric, 'Revenue Net Year Ago - Teads' also uses a hardcoded future date (2025-07-15) for its date calculations. This makes the year-ago comparison static and incorrect for any current period.","DATETIME(TIMESTAMP '2025-07-15 03:30:43.421592+00', 'UTC')","Update the timestamp to use dynamic date functions (e.g., `CURRENT_TIMESTAMP()`) or Looker Studio date parameters to ensure the year-ago comparison is always relative to the current reporting period.",246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
revenue_net_year_ago_teads,Anti-Pattern,"The 'Revenue Net Year Ago - Teads' metric includes a `LIMIT 1` clause, which is an anti-pattern for an aggregate measure. This limits its reusability and flexibility within the dashboard.",LIMIT 1,Remove the `LIMIT 1` clause to allow for proper aggregation and use in various visualizations.,246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
revenue_net_month_ago_teads,Hardcoded Logic,"The 'Revenue Net Month Ago - Teads' metric suffers from the same hardcoded future date (2025-07-15) issue as the other revenue metrics, rendering its month-over-month comparison inaccurate for the current period.","DATETIME(TIMESTAMP '2025-07-15 03:30:43.421592+00', 'UTC')",Replace the hardcoded timestamp with dynamic date functions or Looker Studio date parameters to ensure the month-ago comparison is always relative to the current reporting period.,246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
revenue_net_month_ago_teads,Anti-Pattern,"The 'Revenue Net Month Ago - Teads' metric includes a `LIMIT 1` clause, which is an anti-pattern for an aggregate measure. This limits its reusability and flexibility within the dashboard.",LIMIT 1,Remove the `LIMIT 1` clause to allow for proper aggregation and use in various visualizations.,246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
financial_month_dimension_current_non_adx,Anti-Pattern,"The 'Financial Month (NumDays) - Current, Non-AdX' dimension includes a `LIMIT 1` clause. This is highly problematic for a dimension, as it will only ever return a single row, making it unusable for filtering, grouping, or displaying multiple financial months.",LIMIT 1,"Remove the `LIMIT 1` clause. If this dimension is intended for a specific single-value filter control, the SQL should be tailored for that specific use case without restricting the general dimension definition.",246,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
sort_caption_filtered_by_financial_period,Hardcoded Logic,"The SQL logic for the 'Sort Caption' dimension hardcodes the financial month to 'Sep' and the financial year to '2025'. This makes the metric static and severely limits the dashboard's ability to display data for different financial periods dynamically, despite its business description suggesting it's used for filtering.",WHERE SAFE_CAST(t0.financial_short_month AS STRING) = 'Sep' AND SAFE_CAST(t0.financial_year AS STRING) = '2025',"Replace hardcoded financial month and year values with Looker Studio parameters (e.g., `financial_month_param`, `financial_year_param`). This will enable users to select desired periods dynamically, making the dashboard reusable and flexible. Consider using a dedicated date dimension table to manage financial periods consistently.",247,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
publication_date_filtered_by_financial_year_and_portfolio,Hardcoded Logic,"The SQL logic for the 'Publication Date' dimension hardcodes the financial year to '2026' and specific values for `portfolio_parent_group_name_current`, `portfolio_group_name_current`, and `portfolio_conformed_name_current`. This design prevents the dashboard from being used for any other financial year or portfolio view without direct modification of the underlying SQL, making it highly inflexible.",WHERE SAFE_CAST(t0.financial_year AS STRING) = '2026' AND SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM NSW' AND SAFE_CAST(t0.portfolio_group_name_current AS STRING) = 'NSW CON C' AND SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) = 'NSW CON C1',"Implement Looker Studio parameters for the financial year and all portfolio-related dimensions (parent group, group, conformed name). For portfolio dimensions, consider creating a hierarchical lookup table or a dedicated dimension table to manage portfolio structures, allowing for dynamic filtering, drill-down capabilities, and improved data governance.",247,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
meta_subscriptions_wt_aod_fy24,Hardcoded Logic,"This metric, along with LinkedIn and Trade Desk subscriptions, uses a hardcoded `CASE WHEN source_system_name LIKE '%X%'` to categorize subscriptions. This approach is brittle and not scalable; if source system names change or new systems are introduced, these metrics will require manual updates, leading to maintenance overhead and potential data inaccuracies. It duplicates logic across multiple metrics.",SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscriptions ELSE 0 END),"Implement a governed lookup table for `source_system_name` to a standardized `source_system_category`. This allows for centralized management of mappings and simplifies metric definitions. Alternatively, if `source_system_name` is a clean dimension, leverage it directly in the dashboard for filtering/grouping.",248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
linkedin_subscriptions_wt_aod_fy24,Hardcoded Logic,"Similar to Meta Subscriptions, this metric hardcodes the `source_system_name` categorization. This pattern is repeated for several source-specific subscription metrics, indicating a systemic issue with how these dimensions are handled.",SUM(CASE WHEN source_system_name LIKE '%LinkedIn%' THEN subscriptions ELSE 0 END),Refer to the recommendation for `meta_subscriptions_wt_aod_fy24`. A common base view or CTE could also pre-categorize these values.,248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
tradedesk_subscriptions_wt_aod_fy24,Hardcoded Logic,"This metric also hardcodes the `source_system_name` categorization, reinforcing the need for a more robust and centralized approach to dimensional mapping.",SUM(CASE WHEN source_system_name LIKE '%Trade Desk%' THEN subscriptions ELSE 0 END),Refer to the recommendation for `meta_subscriptions_wt_aod_fy24`. Centralizing this logic will improve maintainability and data consistency.,248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
google_search_subscriptions_wt_aod_fy24,Hardcoded Logic,"This metric, along with Google PMAX Subscriptions, uses a hardcoded `CASE WHEN campaign_type LIKE '%X%'` for categorization. This is an anti-pattern that makes the dashboard rigid and prone to errors if campaign type naming conventions evolve.",SUM(CASE WHEN campaign_type LIKE '%SEARCH%' THEN subscriptions ELSE 0 END),"Establish a governed lookup table for `campaign_type` to a standardized `campaign_category`. This allows for flexible and centralized management of campaign type classifications. Alternatively, if `campaign_type` is a clean dimension, leverage it directly in the dashboard for filtering/grouping.",248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
google_pmax_subscriptions_wt_aod_fy24,Hardcoded Logic,"Similar to Google Search Subscriptions, this metric hardcodes the `campaign_type` categorization, indicating a repeated anti-pattern in how campaign types are handled.",SUM(CASE WHEN campaign_type LIKE '%PERFORMANCE_MAX%' THEN subscriptions ELSE 0 END),Refer to the recommendation for `google_search_subscriptions_wt_aod_fy24`. A common base view or CTE could pre-categorize these values.,248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
subscriptions_last_7_days_wt_aod_fy24,Anti-Pattern,"This metric, and 'Cost Last 7 Days', uses `DATE_DIFF(CURRENT_DATE(), date, DAY) <= 7` to define a relative date period. While functional, hardcoding relative date logic within each metric can limit flexibility. It also relies on `CURRENT_DATE()` which can lead to inconsistent results if not handled carefully in the data refresh schedule.","SUM(CASE WHEN DATE_DIFF(CURRENT_DATE(), date, DAY) <= 7 THEN subscriptions ELSE 0 END)","For Looker Studio dashboards, leverage native date range filters or parameters to allow users dynamic control over time periods. If 'last 7 days' is a fixed business requirement, consider defining a `is_last_7_days` boolean column in a base view or a common CTE to centralize this logic and simplify metric definitions.",248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
cost_last_7_days_wt_aod_fy24,Anti-Pattern,"This metric duplicates the hardcoded relative date logic found in 'Subscriptions Last 7 Days', reinforcing the need for a more centralized and flexible approach to date filtering.","SUM(CASE WHEN DATE_DIFF(CURRENT_DATE(), date, DAY) <= 7 THEN spend ELSE 0 END)",Refer to the recommendation for `subscriptions_last_7_days_wt_aod_fy24`. Centralizing date logic will improve consistency and reduce redundancy.,248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
N/A (Common Filters),Anti-Pattern,"All 12 metrics on this dashboard share identical `WHERE` clause filters (`masthead_code IN ('WT') AND campaign_name LIKE 'AOD%' AND fy_year = 'FY24' AND date >= '2023-07-03'`). This duplication of filtering logic across every metric is inefficient, increases query complexity, and makes dashboard-wide filter changes cumbersome.",WHERE masthead_code IN ('WT') AND campaign_name LIKE 'AOD%' AND fy_year = 'FY24' AND date >= '2023-07-03',"Create a consolidated base view or a common table expression (CTE) that applies these standard filters once. All metrics can then query this pre-filtered view/CTE, significantly simplifying the SQL, improving performance (by reducing redundant filtering), and centralizing filter management.",248,c637fc4f-d352-4401-a60c-1c1bf7e527a9
"total_day_target_by_section_team_pub_group_weekly_sept_2025, total_day_target_by_section_team_weekly_aug_2025, total_day_target_website_local_weekly_april_2025",Hardcoded Logic,"All metrics define specific, fixed date ranges in 2025 (e.g., Sept 1-7, Aug 18-24, April 14-20). This makes the dashboard static and not reflective of 'last week's performance' as implied by its name. It requires manual updates to remain current, which is unsustainable for a dynamic dashboard.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-09-01' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-09-07'","Implement dynamic date filtering (e.g., using `CURRENT_DATE()` and `DATE_SUB` functions, or Looker Studio date range controls) to ensure the dashboard always reflects the most recent 'last week's' data without manual SQL changes. Consider creating a base metric that accepts date parameters.",249,07de4dcd-194f-42aa-87bf-ee79996fb768
total_day_target_website_local_weekly_april_2025,Hardcoded Logic,"The metric uses a hardcoded `REGEXP_CONTAINS` clause to filter for specific local websites. This makes the metric inflexible; any changes to the definition of 'local websites' or the addition of new sites will require manual SQL modification, leading to potential data omissions or inaccuracies.","AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.website AS STRING), 'Geelong Advertiser|Mercury|Gold Coast Bulletin|Townsville|NT News|Cairns Post|Chronicle|Weekly')",Replace the hardcoded `REGEXP_CONTAINS` with a join to a governed lookup table for 'local websites'. This allows for centralized management of website definitions and ensures the metric automatically includes new or updated sites.,249,07de4dcd-194f-42aa-87bf-ee79996fb768
"total_day_target_by_section_team_pub_group_weekly_sept_2025, total_day_target_by_section_team_weekly_aug_2025, total_day_target_website_local_weekly_april_2025",Anti-Pattern,"The dashboard uses three distinct metrics that are essentially variations of 'Total Daily Target' differing only by hardcoded date ranges and specific grouping/filtering dimensions. This leads to metric duplication and reduces reusability. A more robust design would involve a single, parameterized base metric.",SELECT ... FROM `subscription_targets` WHERE ... GROUP BY ... (repeated pattern across metrics),"Refactor into a single, more generic 'Total Daily Target' metric. Utilize Looker Studio's filtering and dimension capabilities to allow users to select date ranges, publication groups, section teams, and website filters dynamically, rather than pre-defining them in separate SQL queries. This improves maintainability and flexibility.",249,07de4dcd-194f-42aa-87bf-ee79996fb768
total_subscription_acquisitions_cm_masthead_filtered_specific_date,Hardcoded Logic,"This metric contains multiple hardcoded values for critical filters, including a specific date ('2025-04-02'), a specific masthead ('CM'), and extensive exclusion lists for 'classification_level_2' and 'sold_in_source'. The 'sold_in_source' exclusion list is particularly long and complex, making it difficult to maintain and prone to errors. This hardcoding severely limits the reusability of the metric for different time periods or mastheads without manual SQL modification, requiring developers to edit the SQL directly for each new use case.","WHERE (SAFE_CAST(t0.movement_datetime AS DATE) = DATE '2025-04-02' AND t0.subscription_movement_count_type = 'acquisition' AND t0.masthead = 'CM' AND (t0.classification_level_2 NOT IN ('IP Access', 'Free Trials', 'Corporate Volume Activation') OR t0.classification_level_2 IS NULL) AND (t0.sold_in_source NOT IN ('Web Order Mobile site Reader Premium Content breach - Facebook customer', 'Web Order_Mobile Site Reader_Premium Content breach_AMP', 'Web Order_Mobile site Reader_Premium Content breach__General Customer') OR t0.sold_in_source IS NULL))","Replace hardcoded dates with Looker Studio date range parameters or BigQuery `CURRENT_DATE()` functions with appropriate offsets. Parameterize 'masthead' and 'classification_level_2' filters using Looker Studio controls. For the 'sold_in_source' exclusion list, consider creating a governed lookup table or a dedicated dimension table to manage these values, allowing for easier updates and improved readability. Alternatively, if these are fixed business rules, consider materializing them in a view.",250,b80779c9-a393-4f32-adc1-605745ac8957
total_subscription_acquisitions_cm_masthead_filtered_specific_date,Anti-Pattern,"The metric applies a `SAFE_DIVIDE` by 10 to the `subscription_movement_count`. While the business description notes this as a 'potential scaling factor or unit conversion,' this implicit scaling embedded directly within the metric's SQL is an anti-pattern. Such transformations should ideally be handled at the data model layer (e.g., in a BigQuery view or a dedicated derived field within the data source) with clear documentation, to ensure consistency, transparency, and prevent duplication of logic across multiple metrics.","SUM(SAFE_DIVIDE(t0.subscription_movement_count, 10))","Refactor this scaling into the underlying data model (e.g., a BigQuery view that presents the scaled value as a new column) or define it as a clearly named derived field within the Looker Studio data source. Ensure clear documentation of the purpose and origin of this scaling factor in the data dictionary.",250,b80779c9-a393-4f32-adc1-605745ac8957
total_active_subscriptions_by_subscription_id_src_filtered_cs_masthead_specific_date,Hardcoded Logic,"This metric also contains hardcoded values for a specific date ('2025-04-01') and a specific masthead ('CS'). Similar to other metrics in this dashboard, this severely limits its utility for general analysis across different timeframes or business units, requiring manual SQL adjustments for each new query.",WHERE (t0.data_as_of_date = DATE '2025-04-01' AND t0.masthead = 'CS'),"Replace hardcoded dates with Looker Studio date range parameters or BigQuery `CURRENT_DATE()` functions. Parameterize 'masthead' using Looker Studio filter controls to allow dynamic selection by users, enhancing the dashboard's flexibility and reusability.",250,b80779c9-a393-4f32-adc1-605745ac8957
sum_c_score_target_by_publication_group,Hardcoded Logic,"The metric's SQL logic includes a hardcoded date range (`2024-07-01` to `2025-06-29`), which corresponds to a specific fiscal year (FY25). This approach limits the dashboard's dynamic capabilities, preventing users from selecting different date ranges and requiring manual updates to the SQL definition for each new reporting period.","WHERE
    (clmn2_ >= DATE '2024-07-01' AND clmn2_ <= DATE '2025-06-29')","Replace hardcoded date ranges with Looker Studio date parameters or dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC`) to enable interactive date filtering and ensure the dashboard automatically reflects current data without manual SQL modifications.",251,a42a8045-0c60-4346-bfd2-6d2b5839ebec
total_events_by_name_param_value_date,Hardcoded Logic,"Similar to other metrics, this event-based metric uses a hardcoded date range (`2025-07-21` to `2025-07-27`), specifically targeting a single week. This severely restricts the utility of the metric for trend analysis or broader period reporting, necessitating constant manual updates.","WHERE
    (clmn6_ >= DATE '2025-07-21' AND clmn6_ <= DATE '2025-07-27')","Implement dynamic date filtering using Looker Studio date parameters. For 'weekly' reports, consider using `DATE_TRUNC` or `DATE_SUB` functions relative to `CURRENT_DATE()` to define rolling weekly periods, enhancing automation and user flexibility.",251,a42a8045-0c60-4346-bfd2-6d2b5839ebec
sum_day_target_by_publication_group_fy_website,Hardcoded Logic,"This metric, like others, contains a hardcoded fiscal year date range (`2024-07-01` to `2025-06-29`). This practice makes the dashboard static for a single fiscal year, hindering its long-term usability and requiring ongoing maintenance.","WHERE
    (clmn7_ >= DATE '2024-07-01' AND clmn7_ <= DATE '2025-06-29')","Utilize Looker Studio's built-in date range controls or define custom parameters that allow users to select the desired fiscal year or date range, making the dashboard adaptable and reducing maintenance overhead.",251,a42a8045-0c60-4346-bfd2-6d2b5839ebec
sum_day_target_website_fy_publication_group,Hardcoded Logic,"This metric also suffers from a hardcoded fiscal year date range (`2024-07-01` to `2025-06-29`), presenting the same limitations as its counterpart, `sum_day_target_by_publication_group_fy_website`.","WHERE
    (clmn7_ >= DATE '2024-07-01' AND clmn7_ <= DATE '2025-06-29')",Apply the same recommendation as for `sum_day_target_by_publication_group_fy_website`: use dynamic date parameters to allow user-driven date selection and ensure future compatibility.,251,a42a8045-0c60-4346-bfd2-6d2b5839ebec
sum_day_target_by_publication_group_fy_website,Anti-Pattern,"This metric and `sum_day_target_website_fy_publication_group` are highly redundant. They query the exact same table (`cdm_reference_data.subscription_targets`), use identical grouping keys (`fy_name`, `publication_group`, `website`), and apply the same hardcoded date filter. The only difference is the column being summed (`clmn0_` vs `clmn1_`). This duplication increases maintenance burden, potential for inconsistency, and query overhead.","Metric 1 (sum_day_target_by_publication_group_fy_website):
SUM(clmn0_) AS total_day_target_by_publication_group

Metric 2 (sum_day_target_website_fy_publication_group):
SUM(clmn1_) AS total_day_target_website","Consolidate these two metrics into a single, more flexible metric. This can be achieved by: 
1. Creating a single metric that returns both `total_day_target_by_publication_group` and `total_day_target_website` as separate measures if they are always needed together. 
2. Using a Looker Studio parameter to allow users to select which 'target' type they want to view, and then using a `CASE` statement in the SQL to sum the appropriate column based on the parameter value. This significantly improves reusability and reduces the number of distinct metrics to manage.",251,a42a8045-0c60-4346-bfd2-6d2b5839ebec
all_metrics,Anti-Pattern,"All provided SQL queries exhibit a pattern of deeply nested subqueries and the use of generic `clmnX_` aliases. This structure, often a byproduct of visual query builders, severely impacts SQL readability, debugging, and maintainability. It makes it difficult for a human to quickly understand the data flow and transformations.","FROM (
    SELECT
        PARSE_DATE('%Y%m%d', clmn6_) AS clmn7_,
        clmn0_, clmn1_, clmn2_, clmn3_, clmn4_, clmn5_
    FROM (
        SELECT
            SAFE_CAST(clmn4_ AS STRING) AS clmn6_,
            clmn0_, clmn1_, clmn2_, clmn3_, clmn4_, clmn5_
        FROM (
            SELECT
                t0.day_target_by_publication_group AS clmn0_,
                t0.day_target_website AS clmn1_,
                t0.fy_name AS clmn2_,
                t0.publication_group AS clmn3_,
                t0.targetdate AS clmn4_,
                t0.website AS clmn5_
            FROM
                `ncau-data-newsquery-prd.cdm_reference_data.subscription_targets` AS t0
        )
    )
)","Refactor the SQL queries to use Common Table Expressions (CTEs) for improved readability and modularity. Replace generic `clmnX_` aliases with descriptive column names that reflect the data they represent. This will make the SQL easier to understand, debug, and modify in the future.",251,a42a8045-0c60-4346-bfd2-6d2b5839ebec
all_metrics_with_publication_mapping,Hardcoded Logic|Anti-Pattern,"The logic for mapping `gl_publication_code` or `masthead_code` to a `publication_name` (e.g., 'The Australian', 'Courier Mail') is hardcoded and repeated verbatim across almost all metrics. This creates a high maintenance burden and risk of inconsistency if publication codes change or new ones are added.","WHEN t0.gl_publication_code = '101' OR t0.masthead_code = 'TA' THEN 'The Australian'
            WHEN t0.gl_publication_code = '400' OR t0.masthead_code = 'CM' THEN 'Courier Mail'
            ...","Extract this mapping into a dedicated lookup table (e.g., `dim_publications`) in BigQuery. All metrics should then join to this lookup table to retrieve the `publication_name`, ensuring a single source of truth and easier maintenance.",252,3e28affe-dc1b-43b8-b7aa-bd7cb3572084
"total_subscriptions_by_recognition_type, total_fy_week_of_year_sum, total_fy_quarter_of_year_sum, publication_group_category_digital_offplatform, publication_group_category_distinct_digital_offplatform",Hardcoded Logic|Anti-Pattern,"A second layer of hardcoded `CASE` statements is used to categorize `publication_name` into `publication_group_category` (e.g., 'Metros', 'Regionals', 'Deep Niche Publications'). This logic is also repeated across multiple metrics, compounding the maintenance issue.","WHEN PreCalculated.publication_name IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser') THEN 'Metros'
        WHEN PreCalculated.publication_name IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville') THEN 'Regionals'
        ...","Integrate this grouping logic into the `dim_publications` lookup table or create a separate `dim_publication_groups` table, linking `publication_name` to its `publication_group_category`. This would allow for simpler, more readable SQL joins.",252,3e28affe-dc1b-43b8-b7aa-bd7cb3572084
"total_fy_week_of_year_sum, product_category_group_digital_swg",Hardcoded Logic|Anti-Pattern,"An extremely long and complex `CASE` statement is used to define product categories based on various fields (`table_union_source`, `rate_plan_group_name`, `dw_billing_system_code`, `delivery_medium_type`, `scenario`, `category_name`). This logic is duplicated and includes an `ELSE 'CHECK'` clause, indicating incomplete or unhandled cases.","WHEN PreCalculated.table_union_source = 'nfmanualhist' AND PreCalculated.rate_plan_group_name = 'Corporate' THEN 'Corporate excluding IP'
            WHEN PreCalculated.table_union_source = 'nfmanualhist' AND PreCalculated.rate_plan_group_name = 'IP Access' THEN 'Corporate IP'
            ...
            ELSE 'CHECK'","This complex categorization should be moved upstream into the `digital_subscriptions` table as a derived column or, ideally, managed via a dedicated `dim_product_categories` lookup table. This would drastically simplify the metric SQL and improve data governance. The 'CHECK' clause should be investigated to ensure all product types are correctly categorized.",252,3e28affe-dc1b-43b8-b7aa-bd7cb3572084
"total_fy_week_of_year_sum, total_fy_quarter_of_year_sum",Anti-Pattern,"The dashboard calculates the `SUM` of `fy_week_of_year` and `fy_quarter_of_year`. These are typically dimensional attributes (e.g., for grouping or filtering by week/quarter), not measures to be aggregated by summation. This suggests a potential misconfiguration or a placeholder metric that was not properly replaced.","SUM(SAFE_CAST(PreCalculated.fy_week_of_year AS BIGNUMERIC))
SUM(SAFE_CAST(PreCalculated.fy_quarter_of_year AS BIGNUMERIC))","Clarify the business requirement for these metrics. If they are intended as dimensions, they should be used in `GROUP BY` clauses or as filters, not summed. If they are placeholders, they should be removed or replaced with meaningful business metrics.",252,3e28affe-dc1b-43b8-b7aa-bd7cb3572084
"publication_group_category_digital_offplatform, publication_group_category_distinct_digital_offplatform",Redundant Logic,Two distinct metrics (`publication_group_category_digital_offplatform` and `publication_group_category_distinct_digital_offplatform`) have identical SQL logic. This indicates redundancy and unnecessary duplication within the dashboard's metric definitions.,SELECT DISTINCT (CASE ... END) AS publication_group_category FROM PreCalculated WHERE ...,"Consolidate these into a single metric definition. Looker Studio typically handles distinct values for dimensions automatically, making the 'Distinct' version redundant if the base metric is already a dimension.",252,3e28affe-dc1b-43b8-b7aa-bd7cb3572084
gross_revenue_previous_fy_complex_digital_filter_h1,Hardcoded Logic|Anti-Pattern,"This metric's SQL is excessively complex, containing a large `WITH MAIN AS (...)` subquery that appears to duplicate significant portions of the underlying `v_adsales_revenue_client_daily` view's logic. It also includes a hardcoded timestamp (`2025-05-07 06:36:08.960316+00`) for date comparison, which will quickly become stale. Furthermore, the `financial_short_month` filter uses hardcoded strings with leading spaces (`' Jan'`, `' Feb'`), indicating potential data quality issues or an overly rigid and unmaintainable filtering approach.","FROM (WITH MAIN AS (SELECT record_type_code, ASL.booking_line_created_short_month, ASL.booking_line_created_year, ASL.revenue_type_level2, ASL.product_group AS PUBLISHER_VERTICAL, IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD, IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS CONFORMED_OWNER, IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS GSD_CURR, IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS CONFORMED_OWNER_CURR, UPPER(ASL.revenue_type) AS revenue_type, UPPER(ASL.revenue_group_subtype) AS revenue_group_subtype, ASL.booking_line_id, ASL.fin_adtype_name, ASL.cost_model_type, ASL.xtend_flag, ASL.adsize_name, ASL.advertiser_group, ASL.advertiser_parent, ASL.nca_industry_pillar, CASE WHEN ASL.source_system_code = 'PLUTO' THEN CAST(reporting_date AS string) ELSE ASL.booking_line_created_date END AS booking_line_created_date, ASL.portfolio_group_name_current, ASL.portfolio_conformed_name_current, ASL.portfolio_parent_group_name_current, ASL.portfolio_group_name_sync, ASL.portfolio_conformed_name_sync, ASL.portfolio_parent_group_name_sync, ASL.current_portfolio_group_owner_current, ASL.current_portfolio_group_owner_sync, ASL.current_portfolio_conformed_owner_current, ASL.current_portfolio_conformed_owner_sync, ASL.sales_segment_l_1_name_sync, ASL.sales_segment_l_2_name_sync, ASL.sales_segment_l_2_name AS sales_segment_l_2_name_curr, sales_segment_gm_name_sync, sales_segment_gm_name, ASL.unified_publication_name, ASL.publishing_division_group, ASL.financial_year, ASL.fy_quarter_of_year_name, ASL.financial_week, ASL.financial_month, ASL.financial_short_month, ASL.relative_fy_week_offset, ASL.relative_fy_month_offset, ASL.relative_fy_year_offset, ASL.relative_cal_month_offset, ASL.relative_cal_year_offset, ASL.booking_line_created_month_offset, ASL.booking_line_created_month, ASL.booking_line_created_year_offset, ASL.dow, ASL.reporting_date, ASL.relative_day_offset, UPPER(ASL.revenue_category) AS revenue_category, ASL.revenue_group_level_2_name, CASE WHEN ASL.reporting_date >= `current_date`('Australia/Sydney') THEN 'Y' ELSE 'N' END AS is_future_period_flag, CASE WHEN ASL.reporting_date >= DATE_ADD(`current_date`('Australia/Sydney'), INTERVAL -365 DAY) THEN 'Y' ELSE 'N' END AS LY_is_future_period_flag, CASE FORMAT_DATE('%A', DATE_ADD(`current_date`('Australia/Sydney'), INTERVAL -1 DAY)) WHEN 'Monday' THEN 1 WHEN 'Tuesday' THEN 2 WHEN 'Wednesday' THEN 3 WHEN 'Thursday' THEN 4 WHEN 'Friday' THEN 5 WHEN 'Saturday' THEN 6 WHEN 'Sunday' THEN 7 END AS DOW_TODAY_NR, PRODUCT.product_group, PRODUCT.product_parent, PRODUCT.legacy_growth_flag, IFNULL(ASL.col_cms_finance, 0) AS col_cms_finance, IFNULL(ASL.pages_count, 0) AS FPE, SUM(IFNULL(ASL.gross_revenue_amount, 0)) AS gross_revenue_amount, SUM(IFNULL(ASL.ss_lgb, 0)) AS LGB FROM `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_daily AS ASL LEFT JOIN `ncau-data-newsquery-prd`.asl_advertising.v_envision_product AS PRODUCT ON UPPER(ASL.revenue_group_subtype) = UPPER(PRODUCT.revenue_group_subtype) AND UPPER(ASL.fin_adtype_name) = UPPER(PRODUCT.fin_adtype_name) WHERE ASL.relative_fy_year_offset IN (-2, -1, 0, 1) AND UPPER(IFNULL(ASL.revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(ASL.style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(ASL.source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(ASL.publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(ASL.publication_name) LIKE 'SUDDENLY%' AND ASL.account_number IN ('17114', '29172', '52809'))) GROUP BY ALL) SELECT *, MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod, DATETIME(TIMESTAMP(`current_timestamp`()), ""Australia/Sydney"") AS dw_asl_load_timestamp FROM MAIN) AS t0 WHERE t0.financial_short_month IN ('      Jan', '       Feb', '        Mar', '         Apr', '          May', '           Jun')","Refactor the complex subquery into a dedicated, optimized BigQuery view or materialized view. Replace the hardcoded timestamp with a dynamic date parameter or a `CURRENT_TIMESTAMP()` function with appropriate date arithmetic. Standardize and validate the `financial_short_month` values in the source data or use numerical month values for filtering to avoid reliance on specific string formatting.",253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
gross_revenue_digital_last_pub_date_range,Anti-Pattern,"This metric calculates `last_digi_pub_date` using a `WITH client_temp AS (...)` subquery. While functional, this logic is duplicated in the `days_since_last_digital_pub_bucket` dimension. Repeated complex calculations across multiple metrics indicate a lack of data model consolidation.","FROM (WITH client_temp AS (SELECT advertiser_group, MAX(reporting_date) AS last_digi_pub_date FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_envision` WHERE UPPER(revenue_type) = 'DIGITAL' GROUP BY 1) SELECT main.*, client_temp.last_digi_pub_date FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_envision` AS main LEFT JOIN client_temp ON main.advertiser_group = client_temp.advertiser_group) AS t0",Pre-calculate and materialize `last_digi_pub_date` as a column in the `adsales_envision` table or a dedicated derived view. This will improve query performance and ensure consistency across all metrics that rely on this calculation.,253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
distinct_advertisers_current_fy_excl_specific,Hardcoded Logic|Anti-Pattern,"The exclusion list `('DOUBLECLICK', 'PROGRAMMATIC ALLOCATION BUCKET')` is hardcoded directly into the SQL. This pattern is repeated across other 'distinct advertisers' metrics. Hardcoding business rules makes maintenance difficult and error-prone if the list changes.","t0c0d1.advertiser_group NOT IN ('DOUBLECLICK', 'PROGRAMMATIC ALLOCATION BUCKET')","Consider creating a lookup table for 'excluded advertiser groups' or a dimension in the data model that categorizes `advertiser_group` (e.g., 'Included', 'Excluded'). This allows for centralized management of business rules.",253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
distinct_advertisers_current_fy_month_13_excl_specific,Hardcoded Logic|Anti-Pattern,"Similar to the above, this metric also hardcodes the exclusion list. Additionally, it specifically filters for `financial_month = 13`, which is unusual for standard calendar years and implies a specific fiscal calendar definition. This business rule should be clearly defined and potentially managed via a dedicated dimension or parameter.","SAFE_CAST(t0c0d1.financial_month AS FLOAT64) = 13 AND t0c0d1.relative_fy_year_offset = 0 AND t0c0d1.advertiser_group NOT IN ('DOUBLECLICK', 'PROGRAMMATIC ALLOCATION BUCKET')","As above, centralize the exclusion list. For `financial_month = 13`, ensure this is a well-understood business rule and consider creating a dimension like `is_fiscal_month_13` in the underlying data model for clarity and reusability.",253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
days_since_last_digital_pub_bucket,Anti-Pattern|Data Mismatch,"This dimension uses a very long and complex `CASE WHEN` statement for bucketing based on `DATE_DIFF`. This logic is difficult to read, maintain, and extend. It also duplicates the `last_digi_pub_date` subquery logic found in `gross_revenue_digital_last_pub_date_range`. Most critically, the SQL includes a `LIMIT 1` clause, which is fundamentally incorrect for a Looker Studio dimension. A dimension should return all possible values for grouping and filtering, not just a single arbitrary row.","SELECT CASE WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 60) THEN '1' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 90) THEN '2' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 120) THEN '3' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 150) THEN '4' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 180) THEN '5' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 210) THEN '6' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 240) THEN '7' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 270) THEN '8' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 300) THEN '9' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 330) THEN '10' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= 365) THEN '11' WHEN (DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) > 365 AND DATE_DIFF(DATE(TIMESTAMP(t0.reporting_date)),DATE(TIMESTAMP(t0.last_digi_pub_date)), DAY) <= (365*2)) THEN '>12' ELSE 'Exclude' END FROM (WITH client_temp AS (SELECT advertiser_group, MAX(reporting_date) AS last_digi_pub_date FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_envision` WHERE UPPER(revenue_type) = 'DIGITAL' GROUP BY 1) SELECT main.*, client_temp.last_digi_pub_date FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_envision` AS main LEFT JOIN client_temp ON main.advertiser_group = client_temp.advertiser_group) AS t0 WHERE t0.revenue_type = 'DIGITAL' LIMIT 1",Remove the `LIMIT 1` clause immediately. Materialize the `last_digi_pub_date` and the `days_since_last_digital_pub_bucket` as pre-calculated columns in the `adsales_envision` table or a dedicated view. This will simplify the Looker Studio dimension and improve performance.,253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
revenue_inclusion_status,Anti-Pattern|Data Mismatch,"This dimension uses a complex `CASE WHEN` statement to define inclusion status based on multiple conditions. While the logic itself might be valid, it's embedded directly in the Looker Studio dimension. More critically, it includes a `LIMIT 1` clause, which will prevent the dimension from functioning correctly for filtering or grouping in Looker Studio.","SELECT CASE WHEN (UPPER(SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING)) NOT IN ('DIGITAL OTHER', 'TRUE OTHER', 'SMB TRANSACTIONAL', 'UNMAPPED') AND ((t0.source_system_code = 'ADPT' AND UPPER(SAFE_CAST(t0.revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE') OR UPPER(SAFE_CAST(t0.revenue_group_subtype AS STRING)) = 'DIGITAL')) THEN 'INCLUDE' ELSE 'EXCLUDE' END FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0 LIMIT 1","Remove the `LIMIT 1` clause. This complex business logic should ideally be pre-calculated and materialized as a column (e.g., `is_revenue_included`) in the underlying `v_adsales_revenue_client_daily` view or a derived table, rather than being computed on the fly within Looker Studio.",253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
product_parent_category,Anti-Pattern|Data Mismatch,"This dimension uses a deeply nested `CASE WHEN` statement to categorize `product_parent` values and apply specific formatting (leading spaces) for display/sorting. This is an anti-pattern for maintainability and indicates that display logic is mixed with data categorization. The leading spaces are a hack for sorting that should be handled by a separate sort key or directly in Looker Studio's visualization settings. Most critically, it includes a `LIMIT 1` clause, which will prevent the dimension from functioning correctly.","SELECT CASE WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Print' THEN 'Print' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Display' THEN ' Display' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Events' THEN '  Events' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Video' THEN '   Video' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Video Growth' THEN '    Video Growth' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Audio' THEN '     Audio' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Content Integration' THEN '      Content Integration' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Content Discovery' THEN '       Content Discovery' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Native' THEN '        Native' WHEN (CASE WHEN (t0.product_parent IN ('Print', 'Display', 'Events', 'Video', 'Video Growth', 'Audio', 'Content Integration', 'Content Discovery', 'Native', 'Ecommerce')) THEN t0.product_parent ELSE 'Other' END) = 'Ecommerce' THEN '         Ecommerce' ELSE NULL END FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0 LIMIT 1","Remove the `LIMIT 1` clause. Create a dedicated lookup table for `product_parent` categorization. This table should contain the `product_parent`, its `category`, and a `sort_order` column. Join this lookup table in the underlying BigQuery view (`v_adsales_revenue_client_daily`) to expose the category and sort order as separate columns. Handle display formatting (leading spaces) directly within Looker Studio's visualization settings if necessary, or by using the `sort_order` column.",253,a73d4bb7-1fbe-4686-b2f1-f401e260038c
unique_consent_subscribers_filtered,Hardcoded Logic,"This metric uses a hardcoded date range (`2025-05-01` to `2025-05-31`) which is in the future. This prevents the metric from displaying current or historical data, making the dashboard non-functional for real-time analysis.","WHERE
    SAFE_CAST(t0.month AS DATE) >= DATE '2025-05-01' AND SAFE_CAST(t0.month AS DATE) <= DATE '2025-05-31'","Replace hardcoded dates with dynamic date parameters (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL N UNIT)`) or leverage Looker Studio's built-in date range controls to allow users to select relevant periods.",254,3d387428-38ed-4de6-81a0-f75f3e904118
unique_engaged_subscribers_filtered,Hardcoded Logic,"Similar to the previous metric, this metric also uses a hardcoded date range (`2025-04-01` to `2025-04-30`) which is in the future. This renders the metric useless for current data analysis.","WHERE
    SAFE_CAST(t0.month AS DATE) >= DATE '2025-04-01' AND SAFE_CAST(t0.month AS DATE) <= DATE '2025-04-30'",Replace hardcoded dates with dynamic date parameters or Looker Studio date range controls for flexibility and current data display.,254,3d387428-38ed-4de6-81a0-f75f3e904118
unique_consent_subscribers_monthly,Anti-Pattern,"The SQL query includes a `LIMIT 100` clause. While this might be intended for performance or initial display, it can arbitrarily truncate historical monthly data, preventing a full trend analysis if more than 100 months of data exist or are needed.",LIMIT 100;,"Remove the `LIMIT 100` clause unless there's a specific, well-understood reason to restrict the number of rows. If performance is an issue, consider optimizing the underlying table or query, or implementing proper Looker Studio filtering/aggregation.",254,3d387428-38ed-4de6-81a0-f75f3e904118
All metrics,Anti-Pattern,"All SQL queries for the dashboard's metrics (`month_truncated`, `site_name`, `site_network`, `total_density`, `good_lcp_density_news`, `poor_inp_density_news`) include a `LIMIT 1` clause. This critically restricts the data returned to a single arbitrary row, preventing proper aggregation, trend analysis, or display of comprehensive market data, thereby rendering the dashboard's core purpose unachievable with the current logic.",SELECT SUM(density) AS total_density FROM `ncau-data-newsquery-prd.asl_gcrux.chrome_report` LIMIT 1,Remove the `LIMIT 1` clause from all metric SQL definitions to allow for full data retrieval and proper aggregation. Ensure the dashboard's visualization layer handles aggregation as intended.,255,87f8ac55-5642-48ed-a7e7-f56dffb4ff94
"site_name, site_network, good_lcp_density_news, poor_inp_density_news",Hardcoded Logic / Anti-Pattern,"The logic for mapping `origin` URLs to 'Site Name' and 'Site Network/Category' is implemented via extensive, hardcoded `CASE` statements. This complex logic is duplicated across four different metrics. This approach is highly prone to errors, difficult to maintain, and lacks scalability when new origins or categories are introduced or existing ones change. For example, 'Kidspot' is hardcoded as a category in `site_network` instead of being assigned to a broader 'Women's Network' or similar, indicating potential inconsistencies.",CASE WHEN (origin = 'https://www.dailymail.co.uk') THEN 'News' WHEN (origin = 'https://www.bodyandsoul.com.au') THEN 'Women\'s Network' WHEN (origin = 'https://www.kidspot.com.au') THEN 'Kidspot' ... ELSE NULL END,"Centralize the mapping logic by creating a dedicated lookup table (e.g., `origin_lookup`) in BigQuery that stores `origin`, `site_name`, and `site_network` relationships. Update the metric definitions to join with this lookup table, promoting data governance, consistency, and maintainability. Review and standardize category assignments (e.g., 'Kidspot' vs. 'Women\'s Network').",255,87f8ac55-5642-48ed-a7e7-f56dffb4ff94
spv_target_sum_weekly_20250728_20250803,Hardcoded Logic,"The metric's SQL logic hardcodes a specific week range (2025-07-28 to 2025-08-03). This approach necessitates the creation of a new, distinct metric for every week to track trends, making the dashboard static, difficult to maintain, and not scalable for historical or future analysis.","WHERE SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.week_commencing AS DATETIME), ISOWEEK) AS DATE) >= DATE '2025-07-28' AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.week_commencing AS DATETIME), ISOWEEK) AS DATE) <= DATE '2025-08-03'","Implement dynamic date parameters (e.g., Looker Studio date range controls) to allow users to select the desired week or period. Alternatively, use relative date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC`) to define rolling weekly periods, enabling a single metric to serve multiple timeframes.",256,b167b958-958d-4085-8e39-77dec324fdfb
total_adds_daily_cm_20250730,Hardcoded Logic,"This metric hardcodes both the specific date (2025-07-30) and the 'CM' masthead. This design prevents the dashboard from showing trends over time or comparing performance across different mastheads without creating numerous identical metrics, leading to significant dashboard bloat and maintenance overhead.",WHERE SAFE_CAST(t0.report_date AS DATE) = DATE '2025-07-30' AND t0.masthead = 'CM',"Utilize dashboard filters or parameters for `report_date` and `masthead`. This allows users to dynamically select the date and masthead, making the metric reusable and the dashboard interactive. If 'CM' is one of many mastheads, consider a governed lookup table for masthead values to ensure consistency and enable dynamic filtering.",256,b167b958-958d-4085-8e39-77dec324fdfb
record_count_consumer_activity_daily_cm_20250730,Hardcoded Logic,"Similar to the 'Total Adds' metric, this record count also hardcodes the date (2025-07-30) and the 'CM' masthead. This severely limits its utility for dynamic analysis, requiring manual updates or new metric creations for each new period or masthead of interest.",WHERE SAFE_CAST(t0.report_date AS DATE) = DATE '2025-07-30' AND t0.masthead = 'CM',Apply the same recommendation as for 'Total Adds': leverage dynamic date and masthead filters/parameters within the dashboard to make this metric flexible and reusable across different contexts.,256,b167b958-958d-4085-8e39-77dec324fdfb
c_score_target_sum_weekly_20250721_20250727,Hardcoded Logic,"The SQL logic hardcodes a specific week range (2025-07-21 to 2025-07-27) for the C-Score target. This approach is not scalable for trend analysis, as each new week would require a new, hardcoded metric definition.",WHERE SAFE_CAST(t0.week_ending AS DATE) >= DATE '2025-07-21' AND SAFE_CAST(t0.week_ending AS DATE) <= DATE '2025-07-27',"Implement dynamic date parameters (e.g., Looker Studio date range controls) to allow users to select the desired week. Alternatively, use relative date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC`) to define rolling weekly periods, enabling a single metric to serve multiple timeframes.",256,b167b958-958d-4085-8e39-77dec324fdfb
c_score_target_sum_weekly_20250728_20250803,Hardcoded Logic,"Similar to the previous C-Score metric, this one also hardcodes a specific week range (2025-07-28 to 2025-08-03). This pattern indicates a lack of dynamic filtering capabilities, making the dashboard static and difficult to maintain for ongoing trend analysis.",WHERE SAFE_CAST(t0.week_ending AS DATE) >= DATE '2025-07-28' AND SAFE_CAST(t0.week_ending AS DATE) <= DATE '2025-08-03',"Implement dynamic date parameters (e.g., Looker Studio date range controls) to allow users to select the desired week. Alternatively, use relative date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC`) to define rolling weekly periods, enabling a single metric to serve multiple timeframes.",256,b167b958-958d-4085-8e39-77dec324fdfb
N/A (applies to all 6 metrics),Anti-Pattern,"All metrics within this dashboard utilize a hardcoded date range in their SQL queries. This design choice makes the dashboard static, as it will always display data for a fixed historical period rather than allowing users to select dynamic, current, or custom date ranges. This significantly diminishes the dashboard's value for ongoing business analysis and contradicts standard dashboard best practices for flexibility and reusability.",WHERE SAFE_CAST(local_date AS DATE) BETWEEN '2024-09-01' AND '2024-09-07',"Modify the SQL queries for all metrics to remove the hardcoded date range. Instead, leverage Looker Studio's built-in date range controls. These controls dynamically pass date parameters to the underlying BigQuery queries, enabling users to select their desired timeframes (e.g., 'Last 7 days', 'This month', 'Custom range'). This will transform the dashboard into a dynamic and highly reusable analytical tool.",257,c4796c36-94d3-4cbf-9762-4f2a492454bb
total_video_media_starts_apr2025_aus_dt,Hardcoded Logic,"This metric explicitly hardcodes both the date range (April 22-28, 2025) and a specific list of brands ('the australian', 'daily telegraph') directly within its SQL WHERE clause. This approach creates a rigid metric definition that cannot be dynamically adjusted by users and necessitates the creation of new, redundant metrics for different date ranges or brand combinations.","WHERE
  visit_date >= DATE '2025-04-22' AND visit_date <= DATE '2025-04-28'
  AND brand IN ('the australian', 'daily telegraph')","Consolidate this metric with similar ones into a single base metric. Utilize Looker Studio's built-in date range controls and filter components (e.g., dropdowns for brands) to allow dynamic selection of these parameters, eliminating the need for hardcoded values in the SQL.",258,45bc0813-2c47-4f36-bcac-ed638ce69ce2
total_video_media_starts_febmar2025_codesports,Hardcoded Logic,"Similar to other metrics in this dashboard, this metric hardcodes a specific date range (February 26 - March 4, 2025) and a single brand ('code sports') in its SQL. This leads to duplicated logic across metrics and reduces the dashboard's flexibility and ease of maintenance.","WHERE
  visit_date >= DATE '2025-02-26' AND visit_date <= DATE '2025-03-04'
  AND brand IN ('code sports')",Consolidate this metric with similar ones into a single base metric. Implement dynamic filtering using Looker Studio's date range and filter controls to allow users to select desired date ranges and brands without modifying the underlying metric SQL.,258,45bc0813-2c47-4f36-bcac-ed638ce69ce2
total_video_media_starts_aug2025_allbrands,Hardcoded Logic / Anti-Pattern,"This metric hardcodes a specific date range (August 8-14, 2025) and a long, explicit list of 16 'pre-defined' brands directly in its SQL. This is a significant anti-pattern; any change to the definition of 'all pre-defined brands' (e.g., adding a new brand, removing an old one) requires manual modification of this SQL, which is error-prone and increases maintenance overhead. It also makes the definition of 'all pre-defined brands' opaque without inspecting the SQL.","WHERE
  visit_date >= DATE '2025-08-08' AND visit_date <= DATE '2025-08-14'
  AND brand IN ('the australian', 'newscomau', 'daily telegraph', 'the courier mail', 'gold coast bulletin',
    'escape', 'townsville bulletin', 'the chronicle', 'kids news', 'the mercury', 'code sports', 'geelong advertiser',
    'the advertiser', 'the cairns post', 'nt news', 'herald sun')","Consolidate this metric into a single base metric using Looker Studio's dynamic controls. For the 'all brands' scenario, consider defining brand groups in a separate lookup table or a more robust configuration (e.g., a BigQuery view that defines brand groups) rather than hardcoding the list directly in the metric's SQL. This would allow for centralized management of brand definitions.",258,45bc0813-2c47-4f36-bcac-ed638ce69ce2
total_cost_dev_bigquery,Hardcoded Logic,"The SQL logic for 'Total Cost for Dev BigQuery' directly embeds specific values ('ncau-data-newsquery-dev' for 'id' and 'BigQuery' for 'service_description') within its WHERE clause. While this is appropriate for the current, highly specific scope of this single metric, it represents a hardcoded pattern. If the dashboard's requirements were to expand to include costs for other development projects or different services, this approach would necessitate creating new, similar metrics or modifying the existing SQL, leading to potential duplication and reduced flexibility.","WHERE id = ""ncau-data-newsquery-dev"" AND service_description = ""BigQuery""","For future scalability, if the dashboard is expected to track costs across multiple projects or services, consider introducing parameters in Looker Studio or leveraging a dimension table for projects and services. This would allow for dynamic filtering and a more robust, maintainable data model without hardcoding values directly into metric definitions.",259,d8104888-c324-42d8-a9b1-c065ba1c622
"digital_revenue, print_revenue",Hardcoded Logic,"Multiple revenue metrics (e.g., 'Digital Revenue', 'Print Revenue') utilize hardcoded `CASE` statements to filter `GROSS_AMOUNT_DIFF` based on specific `revenue_type` values ('DIGITAL', 'PRINT'). While functional, this approach becomes less maintainable and scalable if the number of revenue types grows or if business definitions change frequently, requiring individual metric updates.",SUM(CASE WHEN t0.revenue_type = 'DIGITAL' THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END),"Consider defining revenue types in a dedicated lookup table or a more centralized data model layer (e.g., a BigQuery view or dbt model). This would allow for dynamic filtering and easier management of new or changing revenue categories without modifying individual metric definitions in Looker Studio.",261,a1b901e6-c4fb-44bc-955a-3a7070c15829
revenue_category_derived,Anti-Pattern,"The 'Revenue Category (Derived)' metric utilizes a highly complex, nested `CASE` statement with multiple hardcoded string comparisons and string manipulations (`SAFE.LEFT`). This logic is brittle, difficult to debug, and prone to errors if source data values change or new categorization rules are introduced. It represents a significant anti-pattern for data governance and maintainability, as business logic is embedded directly within a dashboard metric rather than a governed data layer.","CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' WHEN ((SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO') OR ((t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (t0.revenue_sub_type = 'DIGITAL'))) THEN 'PROGRAMMATIC' WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL' WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY' ELSE t0.revenue_sub_type END","Refactor this complex categorization logic into a dedicated data transformation layer (e.g., a dbt model, a BigQuery view). This would centralize the business logic, improve readability, enable easier updates, and allow for better testing and version control. Consider using a more robust string matching or a mapping table instead of `SAFE.LEFT` for future-proofing.",261,a1b901e6-c4fb-44bc-955a-3a7070c15829
advertiser_group_cleaned,Hardcoded Logic,"The 'Advertiser Group (Cleaned)' metric replaces NULL values with the hardcoded string 'Nah'. While this addresses a specific business requirement for display, if 'Nah' is a common placeholder for missing values across multiple dimensions or dashboards, it could be standardized as a global constant or handled consistently at a data modeling layer.",CASE WHEN t0.advertiser_group IS NULL THEN 'Nah' ELSE t0.advertiser_group END,"Evaluate if 'Nah' is a universal placeholder for missing values across the data landscape. If so, consider defining it as a standard constant within the data platform or handling NULL replacements consistently at a data modeling layer to avoid scattered, hardcoded instances within individual Looker Studio metrics.",261,a1b901e6-c4fb-44bc-955a-3a7070c15829
verity_user_role_masthead_entries,Hardcoded Logic,"The metric's SQL logic contains a hardcoded CASE statement to assign numeric 'Masthead_ID' values based on string 'VerityUsageMasthead' values. This practice embeds business rules directly into the SQL query, making it brittle and difficult to maintain. Any changes to masthead names, the addition of new mastheads, or updates to their corresponding IDs would require a code change and redeployment, increasing the risk of errors and maintenance overhead. It also prevents consistent application of these IDs across different reports or systems.","CASE
        WHEN (t0.VerityUsageMasthead = 'The Advertiser') THEN 1
        WHEN (t0.VerityUsageMasthead = 'The Courier-Mail') THEN 2
        WHEN (t0.VerityUsageMasthead = 'The Daily Telegraph') THEN 3
        WHEN (t0.VerityUsageMasthead = 'Herald Sun') THEN 4
        WHEN (t0.VerityUsageMasthead = 'The Australian') THEN 5
        WHEN (t0.VerityUsageMasthead = 'National News Network') THEN 16
        WHEN (t0.VerityUsageMasthead = 'National Sports Newsroom') THEN 17
        WHEN (t0.VerityUsageMasthead = 'The Australian Business Network') THEN 18
        WHEN (t0.VerityUsageMasthead = 'NewsWire') THEN 18.500000
        WHEN (t0.VerityUsageMasthead = 'Code Sports') THEN 19
        WHEN (t0.VerityUsageMasthead = 'The Oz') THEN 20
        ELSE NULL
    END AS Masthead_ID","Replace the hardcoded CASE statement with a join to a dedicated, governed lookup table (e.g., `dim_masthead`) that contains 'VerityUsageMasthead' and 'Masthead_ID' mappings. This centralizes business logic, improves data consistency, simplifies maintenance, and allows for easier scalability as new mastheads are introduced.",262,c9b68cfe-7e00-4414-beaf-839ae216cc14
digital_paying_consumer_subscriber_count_by_audience_segment,Hardcoded Logic,"The 'Digital Paying Consumer Subscriber Count by Audience Segment' metric utilizes an extensive `CASE` statement to categorize `subscriber_mosaic_title` into predefined audience segments ('Older affluents', 'Young professionals', 'Growing Families', 'Low income households'). This hardcoded business logic is difficult to maintain, prone to errors if new mosaic titles are introduced, and lacks flexibility. The `ELSE` clause, which defaults to the raw `subscriber_mosaic_title`, indicates that any unmapped titles will appear as distinct values, potentially leading to fragmented or incomplete reporting if not actively monitored.","SELECT
    CASE
        WHEN (SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'First Class Life' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Secure Tranquility' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Family Fringes' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'High Society' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Suburban Stability' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Blissful Retirement') THEN 'Older affluents'
        WHEN (SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Striving for Status' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Establishing Roots' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Growing Independence' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Upscale Urbanites' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Bright Starts') THEN 'Young professionals'
        WHEN (SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Traditional Pursuits' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Mature Freedom' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Rural Commitment' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Comfortable Foundations' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Flourishing Families' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Millennial Movers' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Green & Gold' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Land of Plenty') THEN 'Growing Families'
        WHEN (SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Hardship & Perseverance' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Middle Blue-collars' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'True Grit' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Frugal Families' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Dream Chasers' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Solo Budgets' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Graceful Ageing' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Small Towners' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Timless Traditions' OR SAFE_CAST(t0.subscriber_mosaic_title AS STRING) = 'Timeless Traditions') THEN 'Low income households'
        ELSE SAFE_CAST(t0.subscriber_mosaic_title AS STRING)
    END AS audience_segment,","Replace the `CASE` statement with a join to a governed lookup table (e.g., `dim_audience_segments`) that maps `subscriber_mosaic_title` to `audience_segment`. This centralizes business logic, improves maintainability, allows for easier updates to segmentation rules, and promotes data governance.",263,ef665693-433c-4236-8c1f-77174b969b2c
active_subscriber_count_by_mosaic_details_digital_masthead,Anti-Pattern,"The SQL for 'Active Subscriber Count by Mosaic Details' uses `SAFE.REGEXP_CONTAINS` for simple equality checks on single-character flags (`'Y'`) and exact string matches (`'Consumer'`) for `combined_is_paying_flag` and `combined_customer_type`. While functional, `REGEXP_CONTAINS` is generally less performant and less readable than direct equality checks (`=`) for such straightforward comparisons.","AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c0d1.combined_is_paying_flag AS STRING), 'Y')
    AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c0d1.combined_customer_type AS STRING), 'Consumer')","For single-character or exact string matches, replace `REGEXP_CONTAINS` with direct equality (`=`). For example: `SAFE_CAST(t0c0d1.combined_is_paying_flag AS STRING) = 'Y'` and `SAFE_CAST(t0c0d1.combined_customer_type AS STRING) = 'Consumer'`.",263,ef665693-433c-4236-8c1f-77174b969b2c
all_metrics,Hardcoded Logic,"All three metrics define specific, hardcoded date ranges within their SQL queries (e.g., `report_date >= DATE '2025-01-01' AND report_date <= DATE '2025-07-20'`). While this might align with the dashboard's current fixed reporting period, it significantly limits the reusability and dynamism of these metrics. If the dashboard is intended to be interactive with date filters, these hardcoded values will override user selections or require frequent SQL modifications for updated reporting periods.","t0.report_date >= DATE '2025-01-01'
    AND t0.report_date <= DATE '2025-07-20'","If these metrics are intended for dynamic date filtering in Looker Studio, replace hardcoded dates with Looker Studio's date parameter syntax (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or ensure that the dashboard's date controls correctly override these. If fixed date ranges are intentional for specific historical snapshots, document this clearly and consider creating separate metrics for dynamic ranges.",263,ef665693-433c-4236-8c1f-77174b969b2c
article_count_by_date_and_publication,Hardcoded Logic,"Multiple metrics (`Article Count`, `Calculated Article Score Value`, `Article Score Level`, `Article Scored Status`) contain identical hardcoded filtering logic for `publicationgroup` ('Herald Sun' and a long `NOT IN` list) and `section` exclusions ('real-estate', 'hyperlocal'). This duplication makes the dashboard less flexible for other publication groups or changing filter criteria, requiring manual updates across all affected metrics.","WHERE t0.publicationgroup = 'Herald Sun' AND t0.publicationgroup NOT IN ('Fox Sports', 'News.com.au', 'Wires', 'Escape', 'Global syndication', 'Whimn Network', 'Kids News', 'Other', 'News Prestige Network', 'News Regional Media', 'PerthNow', 'Stellar') AND t0.section1 != 'real-estate' AND t0.section2 != 'hyperlocal' AND t0.section3 != 'hyperlocal'","Create a base view or a common Looker Studio data source that pre-filters data for 'Herald Sun' and applies the standard section exclusions. Alternatively, define these filters as parameters or leverage a configuration table for dynamic filtering, making the metrics reusable and easier to maintain.",264,a731f74e-c559-426f-aec8-f601f87cb69
article_scored_status,Anti-Pattern,"The `Calculated Article Score Value` logic is fully duplicated within the `Article Score Level` metric's `CASE` statement. Furthermore, the *entire* `Article Score Level` `CASE` statement (which includes the duplicated score calculation) is then duplicated within the `Article Scored Status` metric. This deep nesting and repetition of complex calculation logic is a severe anti-pattern, leading to extremely verbose, unreadable, and inefficient SQL. Any change to the underlying scoring formula or thresholds requires modification in multiple, deeply nested places, significantly increasing the risk of errors and maintenance overhead.",SELECT CASE WHEN (CASE WHEN ((((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64)) + (t0.SubscriberPV * 0.16)) + (t0.TotalPV * 0.02)) >= 10000) THEN '5' ... ELSE '0' END = '0') THEN 'unscored' ELSE 'scored' END AS article_scored_status,"Refactor the scoring logic into a layered approach. First, define `Calculated Article Score Value` as a standalone calculated field or a column in a base view. Second, define `Article Score Level` as a calculated field that references the `Calculated Article Score Value` field. Third, define `Article Scored Status` as a calculated field that references the `Article Score Level` field. This promotes modularity, reusability, and significantly improves maintainability and readability.",264,a731f74e-c559-426f-aec8-f601f87cb69
article_score_level,Hardcoded Logic,"The thresholds for assigning `Article Score Level` (e.g., `>= 10000`, `< 7500`, etc.) are hardcoded directly within the `CASE` statement. This makes the scoring logic inflexible; any adjustment to the score tiers requires direct modification of the SQL, which is cumbersome and error-prone.",WHEN ((((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64)) + (t0.SubscriberPV * 0.16)) + (t0.TotalPV * 0.02)) >= 10000) THEN '5',"Consider storing scoring thresholds in a dedicated lookup table (e.g., `score_level_thresholds`) and joining to it. This allows business users or data administrators to update thresholds without requiring SQL code changes, improving agility and governance.",264,a731f74e-c559-426f-aec8-f601f87cb69
total_cancellation_count_the_australian_20250730_20250828,Hardcoded Logic,"This metric, along with several others, hardcodes specific date ranges and masthead group filters directly into the SQL query. This makes the dashboard static, requiring manual updates for each new reporting period or masthead, and prevents dynamic analysis across different timeframes or mastheads without creating new, redundant metrics.",WHERE report_date >= DATE '2025-07-30' AND report_date <= DATE '2025-08-28' AND masthead_group = 'The Australian',"Implement Looker Studio's built-in date range controls and parameters for dynamic date filtering. For masthead filtering, use a dashboard filter control or a parameter to allow users to select the desired masthead group. This would enable a single, reusable 'Total Cancellation Count' metric.",265,0c50ad01-a1a6-49a6-895f-4c2002a12173
total_cancellation_count_20250714_20250720,Anti-Pattern,"Multiple metrics (e.g., `total_cancellation_count`, `total_switch_cancellation_count`, `total_net_cancellation_count`, `total_reactivation_cancellation_count`) are essentially the same calculation (`SUM(column)`) but duplicated with different hardcoded date ranges. This leads to metric proliferation and high maintenance overhead.",SELECT SUM(cancellation_count) AS total_cancellation_count FROM `ncau-data-newsquery-prd.prstn_consumer.subscription_cancels_w_engagement` WHERE report_date >= DATE '2025-07-14' AND report_date <= DATE '2025-07-20' LIMIT 1;,"Consolidate these into fewer, more flexible metrics. Define base measures (e.g., `cancellation_count`, `switch_cancellation_count`) and allow users to apply date range filters via dashboard controls. If specific predefined periods are needed, consider using calculated fields in Looker Studio that reference the base measure and apply dynamic date logic (e.g., 'Last 7 Days', 'Current Month').",265,0c50ad01-a1a6-49a6-895f-4c2002a12173
sum_subscriber_ids_20250722_20250820,Data Mismatch,"The metric calculates the `SUM` of `subscriber_id_src`. As noted in its own business description, summing unique identifiers is highly unusual and typically provides no meaningful business insight. It's likely intended to be a count of unique subscribers or a count of records associated with subscribers.","SELECT SUM(subscriber_id_src) AS sum_subscriber_ids FROM `ncau-data-newsquery-prd.prstn_consumer.subscription_closing_base_and_cancels` WHERE calendar_date >= PARSE_DATE('%Y%m%d', '20250722') AND calendar_date <= PARSE_DATE('%Y%m%d', '20250820') LIMIT 1;","Clarify the business requirement for this metric. If the goal is to count unique subscribers, change the aggregation to `COUNT(DISTINCT subscriber_id_src)`. If it's to count the number of records (e.g., events, subscriptions) associated with subscribers, use `COUNT(subscriber_id_src)` or `COUNT(*)`. Remove the `LIMIT 1` if this is part of a grouped result.",265,0c50ad01-a1a6-49a6-895f-4c2002a12173
total_cancellation_count_the_australian_20250730_20250828,Anti-Pattern,"The use of `LIMIT 1` on aggregate queries that are already designed to return a single scalar value (e.g., `SUM` without a `GROUP BY`) is redundant and indicates a potential misunderstanding of SQL aggregation or copy-pasting from a different query pattern. While harmless in this specific context, it's unnecessary overhead.",SELECT SUM(cancellation_count) AS total_cancellation_count FROM `ncau-data-newsquery-prd.prstn_consumer.subscription_cancels_w_engagement` WHERE report_date >= DATE '2025-07-30' AND report_date <= DATE '2025-08-28' AND masthead_group = 'The Australian' LIMIT 1;,"Remove `LIMIT 1` from SQL queries that are already guaranteed to return a single row due to the nature of the aggregation (e.g., `SUM`, `COUNT` without `GROUP BY`).",265,0c50ad01-a1a6-49a6-895f-4c2002a12173
masthead_dimension,Potential Limitation,"The `LIMIT 100` clause on dimension queries like 'Masthead' and 'Cancellation Reason' restricts the number of distinct values returned. While often sufficient for dropdowns or small lists, it could lead to incomplete data if there are more than 100 distinct values, potentially hiding less frequent but relevant categories.",SELECT DISTINCT masthead FROM `ncau-data-newsquery-prd.prstn_consumer.subscription_cancels_w_engagement` LIMIT 100;,"Evaluate if `LIMIT 100` is appropriate for the intended use of these dimensions. If the dashboard needs to display or filter on all distinct values, this limit should be removed. If it's for performance or display truncation, ensure users are aware of the limitation.",265,0c50ad01-a1a6-49a6-895f-4c2002a12173
video_tubi_revenue_current_fy,Anti-Pattern,"The SQL logic includes a condition `booking_line_created_date >= '2025-08-01'`. As '2025-08-01' is a future date, this condition will cause the `gross_revenue_amount` to be zero for all historical and current bookings, effectively rendering the metric useless for present-day reporting unless it's a placeholder for future data or a specific projection. This aligns with the initial AI analysis's flag.",CASE WHEN booking_line_created_date >= '2025-08-01' THEN gross_revenue_amount ELSE 0 END,"Clarify the business intent of this future date. If it's a placeholder, replace it with a dynamic date or remove it if not intended for current reporting. If it's for future projections, ensure the data source and reporting context support this.",266,28a297fc-7185-4ac9-9003-0c6cd0b48a5c
"video_tubi_revenue_current_fy, count_financial_months_vt, sum_financial_months_vt",Hardcoded Logic,"A large and complex set of filtering conditions (e.g., `record_type_code`, `source_system_code`, `cost_model_type`, `revenue_transaction_status`, `style_name`, `source_publishing_division`) is repeated verbatim across multiple 'Video & Tubi' related metrics. This violates the DRY (Don't Repeat Yourself) principle, making maintenance difficult and prone to inconsistencies if a change is needed in the core filtering logic.","WHERE (relative_fy_year_offset IN (-1, 0) OR relative_cal_year_offset IN (-1, 0)) AND record_type_code = 'STD' AND source_system_code NOT IN ('LGBPUB', 'LGBSS', 'PIPELINE', 'TARGET') AND NOT (cost_model_type = 'Guaranteed' AND revenue_group_name = 'Exchange') AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'","Encapsulate this common filtering logic into a dedicated view or a parameterized function/CTE that can be reused by all dependent metrics. Alternatively, define these as governed dimensions/filters within the data model to ensure consistency and maintainability.",266,28a297fc-7185-4ac9-9003-0c6cd0b48a5c
"video_tubi_revenue_current_fy, count_financial_months_vt, sum_financial_months_vt",Hardcoded Logic,"The logic for identifying 'Video & Tubi' ad types (`unified_publication_name LIKE 'TUBI%' OR LEFT(UPPER(fin_adtype_name), 5) = 'VIDEO'`) is hardcoded directly into the SQL queries. This is inflexible; any changes to how 'Video' or 'Tubi' are categorized, or the addition of new related ad types, would require manual modification of each metric's SQL.","(unified_publication_name LIKE 'TUBI%' OR LEFT(UPPER(fin_adtype_name), 5) = 'VIDEO')",Create a lookup table or a derived dimension in the data model that categorizes `unified_publication_name` and `fin_adtype_name` into broader groups like 'Video & Tubi'. This allows for centralized management of business rules and easier updates.,266,28a297fc-7185-4ac9-9003-0c6cd0b48a5c
sum_financial_months_vt,Data Anomaly,"The business description for 'Sum of Financial Months (Video & Tubi)' explicitly states: 'The business utility of summing month numbers is unclear and may indicate a data modeling or reporting anomaly.' Summing ordinal month numbers (e.g., 1+2+3=6) rarely provides a meaningful business insight and suggests a potential misunderstanding of the data or an incorrectly defined metric.",SUM(SAFE_CAST(financial_month AS INT64)),"Engage with the business user to clarify the exact purpose and expected output of this metric. If the intent was to count distinct months, `COUNT(DISTINCT financial_month)` would be more appropriate. If no clear business utility can be established, consider deprecating or redefining the metric.",266,28a297fc-7185-4ac9-9003-0c6cd0b48a5c
"total_revenue_current_fy, total_revenue_last_fy, total_revenue_stly",Hardcoded Logic,"The filter `Sales_Group = 'Client'` is hardcoded and repeated across all three 'Total Revenue' metrics. While consistent, this is a hardcoded value that could be centralized if the scope of 'Client' sales group ever changes or if other sales groups need to be analyzed.",WHERE Sales_Group = 'Client',"If 'Client' is a fixed scope for these dashboards, consider making it a default filter at the dashboard level or defining a view that pre-filters for the 'Client' sales group. If other sales groups might be needed in the future, parameterize this filter to allow for dynamic selection.",266,28a297fc-7185-4ac9-9003-0c6cd0b48a5c
total_audience_news_health_smartphone_apr2025,Hardcoded Logic,"All metrics within this dashboard hardcode specific dates or date ranges in their SQL queries (e.g., `DATE '2025-04-01' AND DATE '2025-04-30'`). This design makes the 'monthly snapshot' dashboard static and requires manual modification of each metric's SQL for every new reporting period. This is a significant anti-pattern for a dynamic or recurring dashboard.",WHERE t0.Month >= DATE '2025-04-01' AND t0.Month <= DATE '2025-04-30',"Implement dynamic date filtering using Looker Studio's built-in date range controls or BigQuery SQL functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC`, `DATE_SUB`) to derive relative date ranges (e.g., 'current month', 'previous month'). This would allow the dashboard to update automatically without manual intervention.",267,dd095fe1-af0e-477f-955d-ec2d58af2b80
total_audience_news_health_smartphone_apr2025,Anti-Pattern,"Each of the 12 metrics is defined with hardcoded dimensional filters (e.g., `Category = 'News'`, `Subcategory = 'Health'`, `Device = 'Smartphone'`). This leads to a proliferation of highly similar metrics, each representing a specific data slice, rather than a single, flexible metric that can be filtered dynamically. This design is not scalable; adding a new category/device combination would require creating new, redundant metrics.",AND t0.Category = 'News' AND t0.Subcategory = 'Health' AND t0.Device = 'Smartphone',"Redesign the data source and Looker Studio dashboard to utilize parameters or filter controls for dimensions like Category, Subcategory, and Device. Define a single, generalized 'Total Audience' metric, and allow users to select specific segments via dashboard filters. This would drastically reduce the number of individual metrics and improve flexibility and maintainability.",267,dd095fe1-af0e-477f-955d-ec2d58af2b80
total_audience_news_health_smartphone_apr2025,Redundancy,"The core calculations (current audience, previous month audience, absolute change, percentage change) are repeated across multiple metrics, with only the hardcoded dates and dimensional filters varying. While the `base_metric_id` suggests conceptual consolidation, the SQL implementation is highly redundant and inefficient.",SELECT SUM(SAFE_CAST(t0.Audience AS FLOAT64)) AS total_audience_current_month,"Leverage Looker Studio's calculated fields feature to define these core calculations once. These calculated fields can then be applied to a single, more generalized data source, allowing for dynamic filtering and significantly reducing maintenance overhead and potential for inconsistencies across metrics.",267,dd095fe1-af0e-477f-955d-ec2d58af2b80
traffic_count_by_channel_date_filtered,Hardcoded Logic,"This metric contains hardcoded date ranges (`'2025-05-19' AND '2025-05-20'`) and a hardcoded list of channels (`'Premium Breach', 'Marketing'`) directly within its SQL logic. This severely limits the reusability and flexibility of the metric, requiring manual updates for any change in reporting period or channel focus. It also prevents dynamic filtering by dashboard users, making the dashboard less interactive and adaptable.","WHERE
    SAFE_CAST(t0.visit_start_au_date AS DATE) BETWEEN '2025-05-19' AND '2025-05-20'
    AND SAFE_CAST(t0.channel AS STRING) IN ('Premium Breach', 'Marketing')","Replace hardcoded dates with Looker Studio's built-in date range controls. For channels, leverage Looker Studio filter controls or parameters. If the channel list is dynamic or large, consider creating a dedicated lookup table for channels and joining to it, allowing for more robust and maintainable filtering.",268,83a1c0b2-67b2-4d3e-8bc4-98a9f3683ad1
multiple_metrics,Anti-Pattern,"Several dimension and aggregation metrics (`channel_dimension`, `visit_start_au_date_dimension`, `masthead_dimension`, `traffic_count_by_masthead`, `traffic_count_by_channel_date_filtered`) include `LIMIT 10` clauses in their SQL. This restricts the number of distinct values or aggregated rows returned to a maximum of 10, potentially leading to incomplete data display if the actual number of distinct values or aggregated groups exceeds this limit. This can misrepresent the full scope of data available in the underlying table.",LIMIT 10,"Remove `LIMIT` clauses from dimension and aggregation definitions unless there's a specific, well-understood reason for truncating data (e.g., for performance testing, not for production display). Looker Studio handles pagination and display limits at the visualization layer, not typically at the data source query level for dimensions or full aggregations.",268,83a1c0b2-67b2-4d3e-8bc4-98a9f3683ad1
distinct_subscription_orders_acquisition_20250101_20250714,Anti-Pattern,"Multiple metrics on the dashboard are identical except for their hardcoded date ranges. This practice leads to metric proliferation, making the dashboard difficult to maintain and scale for different reporting periods. For example, two 'Distinct Subscription Orders' and two 'Total Subscription Movements' metrics exist solely to cover different end dates (Jul 14 vs Jun 30, 2025), rather than using dynamic date parameters.",t0c0d1.report_date >= DATE '2025-01-01' AND t0c0d1.report_date <= DATE '2025-07-14',"Implement Looker Studio date range controls or BigQuery parameters to allow dynamic date selection for metrics. Consolidate these into single, parameterized metrics to reduce redundancy and improve maintainability. This will significantly improve the dashboard's consolidation score and reduce development effort.",269,35b59adf-a1d7-4673-ad92-77cf87d13b7d
distinct_subscription_orders_acquisition_20250101_20250714,Hardcoded Logic,"The `subscription_movement_count_sub_type` is hardcoded to 'acquisition' across multiple subscription-related metrics. If analysis for other movement types (e.g., 'churn', 'renewal') is required, new metrics would need to be created, further exacerbating metric proliferation.",t0c0d1.subscription_movement_count_sub_type = 'acquisition',Consider using a Looker Studio filter control for `subscription_movement_count_sub_type` or parameterizing this value in the underlying data source/view if multiple types are frequently analyzed. This would allow a single metric to serve multiple analytical needs.,269,35b59adf-a1d7-4673-ad92-77cf87d13b7d
multiple_metrics_q5_group,Anti-Pattern,"A significant group of metrics (Total Gross Revenue, Total Agency Commission, Advertiser Name, Booking Line Number, Booking Number) share an identical and complex set of hardcoded `WHERE` clauses. This repetition leads to high maintenance overhead, potential for inconsistencies if filter values change, and reduced readability. This directly contradicts the spirit of a high consolidation score.","WHERE
  t0.financial_year BETWEEN '2023' AND '2026'
  AND t0.revenue_transaction_status IN ('Billed', 'Booked')
  AND t0.record_type_code = 'STD'
  AND t0.source_system_code = 'ADPT'
  AND t0.revenue_type = 'Digital'
  AND t0.source_publishing_division != 'Medium Rare Content Agency'
  AND t0.calendar_year IN ('2024')
  AND t0.cost_model_type IN ('Guaranteed')","Centralize this common filtering logic into a single, governed view or a Looker model definition (e.g., a derived table or a `sql_table_name` with a `WHERE` clause). This would improve maintainability, ensure consistency, and enhance reusability across the dashboard and potentially other finance-related dashboards.",270,38809f41-7138-4b94-94d1-ae919b2d9517
data_load_datetime_truncated_q6,Anti-Pattern,The SQL for 'Data Load Datetime (Truncated to Second) - Q6 Filtered' contains redundant and inefficient filtering for `financial_year`. The conditions `t0.financial_year BETWEEN '2023' AND '2026'` AND `t0.financial_year IN ('2025')` can be simplified.,"AND t0.financial_year BETWEEN '2023' AND '2026'
  AND t0.financial_year IN ('2025')",Simplify the `financial_year` filter to `t0.financial_year = '2025'`. This improves readability and query efficiency.,270,38809f41-7138-4b94-94d1-ae919b2d9517
all_metrics,Anti-Pattern,"Every single SQL query provided for the dashboard's metrics includes a `LIMIT 10` clause. This is highly unusual for production dashboard metrics, as it would severely restrict the data displayed to only 10 rows, which is unlikely for financial accounting analysis. This suggests either these are not the actual production queries, or the dashboard's functionality is severely constrained.",LIMIT 10;,"Urgent verification is needed to determine if these are the actual production queries. If so, remove the `LIMIT 10` clause unless there is a specific, well-documented business requirement for such a severe data limitation. If these are sample queries, the actual production queries should be obtained for a proper analysis.",270,38809f41-7138-4b94-94d1-ae919b2d9517
"running_expense_1_actuals_conditional, running_expense_2_actuals_conditional, running_expense_3_actuals_conditional, running_expense_4_actuals_conditional, running_expense_5_actuals_conditional, running_expense_6_actuals_conditional",Hardcoded Logic|Anti-Pattern,"Six distinct 'Running Expense' metrics (1 through 6) utilize nearly identical `CASE` statements to conditionally select values based on the 'Category' dimension (specifically 'CONSUMER' or 'ADVERTISING'). This pattern is highly repetitive and hardcodes business logic directly into each metric's SQL definition. The use of `MAX` aggregation on these conditional expenses suggests a specific data structure where only one category's expense might be relevant per row, or it's a method to extract the relevant value. This approach is brittle; any new categories or changes to existing category names would necessitate modifications across all six metrics, increasing the risk of errors and maintenance burden.",SELECT MAX(CASE WHEN SAFE_CAST(Category AS STRING) = 'CONSUMER' THEN Running_Expense_CONSUMER_X_Actuals WHEN SAFE_CAST(Category AS STRING) = 'ADVERTISING' THEN Running_Expense_ADVERTISING_X_Actuals ELSE 0 END) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` WHERE SAFE_CAST(Fiscal_Year AS STRING) = '2025' AND SAFE_CAST(Source AS STRING) = 'Actuals',"Consider refactoring the underlying `dv_pacman_running_expense` table to unpivot the `Running_Expense_CONSUMER_X_Actuals` and `Running_Expense_ADVERTISING_X_Actuals` columns into a single `Running_Expense_X_Actuals` column and a `Category_Type` dimension. This would allow for a single, more generic 'Running Expense' metric that can be filtered by `Category_Type`. If a data model change is not feasible, explore using Looker Studio's parameterization or blending capabilities to create a more dynamic metric that can adapt to different categories without hardcoding, or define these as a single, more flexible calculated field that takes category as an input.",271,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"total_expense_margin_1_or_2_actuals_2025, total_product_revenue_actuals_2025, running_expense_1_actuals_conditional, ..., running_expense_6_actuals_conditional, record_count_by_source_fiscal_year_2025",Hardcoded Logic,"Multiple metrics hardcode `Fiscal_Year = '2025'` and/or `Source = 'Actuals'` directly into their SQL logic. While appropriate for specific reporting periods, this limits the reusability and flexibility of these metrics for analyzing different fiscal years or data sources (e.g., 'Budget', 'Forecast') without creating new, nearly identical metrics.",WHERE SAFE_CAST(Fiscal_Year AS STRING) = '2025' AND SAFE_CAST(Source AS STRING) = 'Actuals',"Introduce Looker Studio parameters or filters for `Fiscal_Year` and `Source` at the dashboard level. This allows users to dynamically select the desired year and source, making the existing metrics more versatile and reducing the need for numerous hardcoded variations. The underlying SQL should then reference these parameters.",271,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"total_articles_published_overall, self_published_articles_by_source, syndicated_articles_by_source, attribution_type_calculated",Hardcoded Logic / Anti-Pattern / Repeated Code,"A large, static `SourceDomainMapping` array is hardcoded and duplicated across four different metrics. This makes updates difficult, error-prone, and violates the DRY (Don't Repeat Yourself) principle. Any change to the mapping requires updating multiple SQL queries, increasing the risk of inconsistencies.","SourceDomainMapping AS (
      SELECT
        domain,
        SourceName
      FROM
        UNNEST(ARRAY< STRUCT< domain STRING, SourceName STRING > >[('adelaidenow.com.au', 'The Advertiser'),
        ('couriermail.com.au', 'The Courier-Mail'), ('dailytelegraph.com.au', 'The Daily Telegraph'), ('heraldsun.com.au',
          'Herald Sun'), ('foxsports.com.au', 'FOX SPORTS'), ('goldcoastbulletin.com.au', 'Gold Coast Bulletin'),
        ('news.com.au', 'news.com.au'), ('ntnews.com.au', 'NT News'), ('theaustralian.com.au', 'The Australian Business Network'),
        ('theaustralian.com.au', 'The Australian'), ('thechronicle.com.au', ''), ('weeklytimesnow.com.au', 'The Weekly Times'),
        ('cairnspost.com.au', 'The Cairns Post'), ('bodyandsoul.com.au', 'bodyandsoul.com.au'), ('codesports.com.au',
          'Code Sports'), ('punters.com.au', 'Punters'), ('vogue.com.au', 'Vogue Australia'), ('nypost.com', ''),
        ('stockhead.com.au', 'Stockhead'), ('talksport.com', 'TalkSPORT'), ('foxbusiness.com', ''), ('foxnews.com',
          ''), ('racenet.com.au', 'Racenet'), ('themercury.com.au', 'Mercury'), ('geelongadvertiser.com.au', 'Geelong Advertiser'),
        ('gq.com.au', 'GQ Australia'), ('gq.com', 'GQ'), ('vogue.co.uk', 'Vogue UK'), ('gq-magazine.co.uk', 'GQ UK'),
        ('kidsnews.com.au', 'Kids News'), ('skynews.com.au', 'Sky News Australia'), ('townsvillebulletin.com.au',
          'Townsville Bulletin'), ('escape.com.au', 'Escape'), ('kidspot.com.au', 'Kidspot.com.au'), ('perthnow.com.au',
          ''), ('thetimes.co.uk', 'The Times'), ('thetimes.com', 'The Times'), ('vogue.com', 'Vogue')])
    )","Create a dedicated lookup table (e.g., `dim_source_domain_mapping`) in BigQuery for source-domain relationships. This table should be managed centrally and joined into queries as needed, eliminating hardcoding and improving maintainability.",272,e6d054c7-c65a-442d-b2a7-4afd6e4884da
"self_published_articles_by_source, syndicated_articles_by_source, attribution_type_calculated",Complex / Logically Flawed Logic,"The `AttributionType` CASE statement contains a specific condition `WHEN(domain_split.ArticleSourcedFrom = ""theaustralian.com.au"" AND (domain_split.ArticleSourcedFrom = ""The Australian"" OR domain_split.ArticleSourcedFrom = ""The Australian Business Network""))`. This condition is logically impossible if `ArticleSourcedFrom` is a single string value, as it cannot simultaneously be a domain and a source name. This suggests a misunderstanding of the data or a copy-paste error that will always evaluate to false, potentially leading to miscategorized articles.","CASE
          WHEN(domain_split.ArticleSourcedFrom = ""theaustralian.com.au"" AND (domain_split.ArticleSourcedFrom =
          ""The Australian"" OR domain_split.ArticleSourcedFrom = ""The Australian Business Network"")) THEN 'Self Published'
          WHEN EXISTS(
            SELECT
              1
            FROM
              SourceDomainMapping AS sdm
            WHERE
              lower(SourceDomainMapping.SourceName) = lower(domain_split.ArticleSourcedFrom)
          ) THEN 'Self Published'
          ELSE 'Syndicated'
        END AS AttributionType","Review and correct the `AttributionType` logic. The first `WHEN` clause appears to be flawed and should be removed or re-evaluated based on accurate business rules. Ensure the logic correctly distinguishes between 'Self Published' and 'Syndicated' using a robust and clear method, potentially leveraging the proposed `dim_source_domain_mapping` table.",272,e6d054c7-c65a-442d-b2a7-4afd6e4884da
"total_articles_published_overall, self_published_articles_by_source, syndicated_articles_by_source",Repeated Code / Lack of Reusability,"The CTEs `syndicated_content` and `syndicated_content_split` are identical and repeated across these three metrics. This leads to redundant code, increased query complexity, and makes maintenance harder. Any change to the core content extraction or syndication linking logic requires updating multiple places.","syndicated_content AS (
      SELECT
        tcs.ArticleID,
        cd.contentsyndicatedlinks,
        tcs.ArticleRightsSource,
        tcs.ArticleDatePublished
      FROM
        `ncau-data-newsquery-prd.prstn_verity.t_content_summary` AS tcs
        LEFT JOIN
        `ncau-data-newsquery-prd.bdm_verity.content_dim` AS cd
        ON tcs.ArticleId = cd.content_id
      WHERE
        SAFE_CAST(tcs.ArticleDatePublished AS DATE) BETWEEN `current_date`(""Australia/Sydney"") - 7 AND `current_date`(""Australia/Sydney"")
    ),
    syndicated_content_split AS (
      SELECT
        contentsyndicatedlinks.name AS syndicated_name,
        ArticleRightsSource,
        ArticleID
      FROM
        syndicated_content,
        UNNEST(contentsyndicatedlinks) AS contentsyndicatedlinks
    )","Create a base view or a dbt model for `syndicated_content_split` (and potentially `syndicated_content`) that can be reused by all dependent metrics. This would centralize the core logic, improve maintainability, and potentially reduce query execution overhead.",272,e6d054c7-c65a-442d-b2a7-4afd6e4884da
total_articles_published_overall,Data Mismatch / Misleading Metric Definition,"The SQL for 'Total Articles Published (Overall)' derives its sum from a CTE (`total_article`) that is based on `syndicated_content_split`. This means the metric is currently counting only syndicated articles, which directly contradicts its business description: 'The total number of articles published across all domains... regardless of attribution type (self-published or syndicated)'. Additionally, the query includes a `LIMIT 1` clause, which is redundant for a single aggregate value and could be misleading if the query structure were to change.","SELECT
  SUM(TotalArticlePublished) AS TotalArticlesPublished
FROM (
  WITH
    SourceDomainMapping AS (...),
    syndicated_content AS (...),
    syndicated_content_split AS (...),
    total_article AS (
      SELECT
        syndicated_name AS domain,
        count(1) AS TotalArticlePublished
      FROM
        syndicated_content_split
      GROUP BY 1
    )
  SELECT TotalArticlePublished FROM total_article
) LIMIT 1;","Confirm with business stakeholders the exact definition of 'Total Articles Published (Overall)'. If it means *all* articles (self-published and syndicated), the SQL needs to be revised to count from `t_content_summary` directly without filtering for syndicated content. If it *does* mean total syndicated articles, then the business description should be updated for clarity. The `LIMIT 1` clause should be removed as it serves no functional purpose for a single aggregate result.",272,e6d054c7-c65a-442d-b2a7-4afd6e4884da
newsletter_winback_email_names,Hardcoded Logic|Anti-Pattern,"The metric uses an extremely long and complex `REGEXP_CONTAINS` clause with numerous hardcoded email name patterns to identify 'winback' related newsletters. This approach is highly brittle, difficult to maintain, and prone to errors as new campaigns or naming conventions emerge. It indicates a lack of a standardized lookup or classification mechanism for email campaigns.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), 'Australian Pass|TAPass|WINBACK|Winback|winback|Lookback|lookback|LOOKBACK|Newspass_Email|DT_MKT_NURTURE_057|CM_MKT_NURTURE_055|HS_MKT_NURTURE_055|ADV_MKT_NURTURE_054|Hurry limited time sale|BronwynS2|Lions') OR SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.newsletter_send_email_name AS STRING), '3_EventLive_Email_Reg|1_Welcome_Email_Reg|2_MeetthePanel_Email_Reg|')","Refactor this logic by creating a dedicated lookup table for 'winback' email campaign names or types. This table should contain a clear mapping of email name patterns to a 'winback' flag or category. The SQL query can then join to this lookup table, significantly simplifying the `WHERE` clause and improving maintainability. Alternatively, explore if a 'campaign_type' or similar field already exists in the source data that could be leveraged.",273,2a7c146f-7170-4d91-8508-f0a5d2e55e7c
total_sms_activity_count_winback,Hardcoded Logic|Anti-Pattern,"Similar to the newsletter metric, this metric uses a hardcoded `REGEXP_CONTAINS` for SMS message names. While simpler than the newsletter example, it still represents an anti-pattern for maintainability and scalability. Any change in 'winback' SMS naming conventions requires a manual SQL update.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.message_name AS STRING), 'WINBACK|winback|Winback|WinBack')","Implement a lookup table for SMS message names or categories, similar to the recommendation for email names. This allows for centralized management of 'winback' classifications without modifying dashboard SQL. If a standardized naming convention is in place, consider a simpler `LIKE` clause or a direct equality check if possible.",273,2a7c146f-7170-4d91-8508-f0a5d2e55e7c
total_sms_undelivered_count_winback,Hardcoded Logic|Anti-Pattern,"This metric shares the same hardcoded `REGEXP_CONTAINS` issue as `total_sms_activity_count_winback`, leading to the same maintainability concerns.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.message_name AS STRING), 'WINBACK|winback|Winback|WinBack')",Apply the same recommendation as for `total_sms_activity_count_winback`: use a lookup table for SMS message names or categories to centralize classification logic.,273,2a7c146f-7170-4d91-8508-f0a5d2e55e7c
acquisition_subscription_movements_by_data_as_of_date,Hardcoded Logic|Data Mismatch,"All subscription-related metrics (`acquisition_subscription_movements_by_data_as_of_date`, `unique_acquisition_subscription_orders_by_data_as_of_date`, `acquisition_subscription_movements_by_report_date`, `unique_acquisition_subscription_orders_by_report_date`) use hardcoded date ranges that extend into the future. More critically, the end dates for `data_as_of_date` metrics (2025-08-26) differ from `report_date` metrics (2025-08-13), despite querying the same underlying `subscription_movement` table. This inconsistency can lead to confusing or misleading comparisons between 'as of date' and 'report date' views of acquisition data.","t0c0d2.data_as_of_date >= DATE '2022-11-01' AND t0c0d2.data_as_of_date <= DATE '2025-08-26' (for data_as_of_date metrics)
t0c0d1.report_date >= DATE '2022-11-01' AND t0c0d1.report_date <= DATE '2025-08-13' (for report_date metrics)","Replace hardcoded date ranges with dynamic date parameters provided by Looker Studio (e.g., `_DS_START_DATE`, `_DS_END_DATE`). This allows users to select their desired reporting period, making the dashboard flexible and evergreen. If specific fixed periods are required, they should be consistently applied across all relevant metrics and clearly documented. Investigate the reason for the differing end dates between `data_as_of_date` and `report_date` metrics and standardize them if appropriate.",273,2a7c146f-7170-4d91-8508-f0a5d2e55e7c
load_status_sdm_profisee_profisee_data_finc_subs_product_type_category,Anti-Pattern,"Multiple 'Load Status' and 'Most Recent Load Date' metrics (e.g., for `finc_subs_product_type_category`, `finc_ref_subs_package_type`, `finc_ref_subs_time_slicer`, `finc_opst_subs_hry_L9`, `finc_ref_subs_product_type`, `pbln_publication_source`, `finc_product_acc_codes`) query the same `sdm_profisee.profisee_data` table but use hardcoded `source_entity_name` filters within each metric's SQL. This leads to significant duplication of logic. If a new source entity needs monitoring, a new pair of metrics (load status and most recent load date) must be created and maintained, increasing the dashboard's complexity and reducing its scalability.","SELECT
  CASE
    WHEN(
      SELECT
        Count(*)
      FROM
        `ncau-data-newsquery-prd.sdm_profisee.profisee_data`
      WHERE
        (dw_partition_date >= CURRENT_DATE() - 1 AND source_entity_name = 'finc_subs_product_type_category')
    ) > 0 THEN 'Success'
    ELSE 'Fail'
  END AS Load_Status
FROM
  `ncau-data-newsquery-prd.sdm_profisee.profisee_data`
WHERE
  source_entity_name = 'finc_subs_product_type_category'
LIMIT 1","Consider creating a single, more generalized BigQuery view or a set of specific views for each `source_entity_name` within `sdm_profisee.profisee_data` that Looker Studio can then connect to. This would centralize the filtering logic and improve maintainability. Alternatively, explore if Looker Studio's data blending or custom connectors could offer a more dynamic, less hardcoded approach.",274,c8a235fc-4d8d-4b33-9f7f-813c0effdf36
most_recent_load_sdm_profisee_profisee_data_finc_subs_product_type_category,Anti-Pattern,"Similar to the 'Load Status' metrics, the 'Most Recent Load Date' metrics for `sdm_profisee.profisee_data` also hardcode the `source_entity_name` filter, leading to duplicated and difficult-to-maintain SQL across multiple metrics.","SELECT
  Max(dw_partition_date) AS Most_Recent_Load
FROM
  `ncau-data-newsquery-prd.sdm_profisee.profisee_data`
WHERE
  source_entity_name = 'finc_subs_product_type_category'
LIMIT 1","Apply the same recommendation as for the 'Load Status' metrics: centralize the logic, potentially through BigQuery views or a more dynamic Looker Studio data source setup, to avoid repetitive SQL.",274,c8a235fc-4d8d-4b33-9f7f-813c0effdf36
load_status_cdm_profisee_offplatform_volume_rates,Complex Hardcoded Logic,"The SQL for checking the load status of `cdm_profisee.offplatform_volume_rates` uses a highly complex and inefficient `WITH` clause with multiple `UNION ALL` statements to find the minimum of maximum ingest dates across several hardcoded `source_system` values (`GPLA`, `APLS`, `PRES`, `WINE`, `APLP`). This approach is brittle; adding or removing a source system requires manual modification of the SQL in multiple places, increasing the risk of errors and maintenance overhead. This pattern is repeated for the 'Most Recent Load Date' metric as well.","WITH
  offplatform_volume_rates AS (
    SELECT
      MIN(common_date) AS ingest_date
    FROM
      (
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'GPLA'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'APLS'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'PRES'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'WINE'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'APLP'
      ) AS common_dates
  )
SELECT
  CASE
    WHEN(
      SELECT
        COUNT(*)
      FROM
        offplatform_volume_rates
      WHERE
        ingest_date >= CURRENT_DATE() - 1
    ) > 0 THEN 'Success'
    ELSE 'Fail'
  END AS Load_Status
FROM
  offplatform_volume_rates
LIMIT 1","This complex logic should be pre-calculated in a dedicated BigQuery view or table. A more efficient and maintainable approach would be to `GROUP BY source_system` to get max ingest dates per system, and then find the `MIN` of those results in a single, cleaner query. This would significantly reduce query complexity, improve performance, and centralize the logic for easier updates.",274,c8a235fc-4d8d-4b33-9f7f-813c0effdf36
most_recent_load_cdm_profisee_offplatform_volume_rates,Complex Hardcoded Logic,"The 'Most Recent Load Date' metric for `cdm_profisee.offplatform_volume_rates` suffers from the same complex and hardcoded `UNION ALL` structure as its 'Load Status' counterpart, making it difficult to maintain and inefficient.","WITH
  offplatform_volume_rates AS (
    SELECT
      MIN(common_date) AS ingest_date
    FROM
      (
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'GPLA'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'APLS'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'PRES'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'WINE'
        UNION ALL
        SELECT
          Max(DATE(dw_src_ingest_time)) AS common_date
        FROM
          `ncau-data-newsquery-prd.cdm_profisee.offplatform_volume_rates`
        WHERE
          source_system = 'APLP'
      ) AS common_dates
  )
SELECT
  ingest_date AS Most_Recent_Load
FROM
  offplatform_volume_rates
LIMIT 1",Apply the same recommendation as for the 'Load Status' metric: pre-calculate this logic in BigQuery to simplify the Looker Studio metric and improve efficiency.,274,c8a235fc-4d8d-4b33-9f7f-813c0effdf36
load_status_cdm_googleplay_src_views_v_cdm_earnings,Inconsistent Logic,"While most 'Load Status' metrics check for data within the last 24 hours (`CURRENT_DATE() - 1`), the `v_cdm_earnings` metric checks for data within the last 30 days (`CURRENT_DATE() - 30`). This inconsistency, while potentially intentional due to its 'Near start of the Month' frequency, should be clearly documented and justified to avoid confusion and ensure proper monitoring expectations. Without clear documentation, this deviation could be misinterpreted as a data freshness issue.","SELECT
  CASE
    WHEN(
      SELECT
        COUNT(*)
      FROM
        `ncau-data-newsquery-prd.cdm_googleplay_src_views.v_cdm_earnings`
      WHERE
        Date(dw_src_ingest_time) >= CURRENT_DATE() - 30
    ) > 0 THEN 'Success'
    ELSE 'Fail'
  END AS Load_Status
FROM
  `ncau-data-newsquery-prd.cdm_googleplay_src_views.v_cdm_earnings`
LIMIT 1","Ensure this specific business rule for `v_cdm_earnings` is explicitly documented within the data dictionary, metric definitions, and the dashboard's operational guide. If possible, consider a metadata-driven approach where the 'freshness threshold' is a configurable parameter rather than hardcoded in SQL, especially if similar exceptions might arise for other data sources.",274,c8a235fc-4d8d-4b33-9f7f-813c0effdf36
actual_amount_current_week_by_publication_group,Hardcoded Logic|Anti-Pattern,"Both current week metrics (`actual_amount_current_week_by_publication_group` and `blended_amount_current_week_by_publication_group`) use an extensive, hardcoded CASE statement with leading spaces to categorize publications. This is difficult to maintain, prone to errors, and does not scale with new publications. The `structure_sql` shows 245 unique publication codes, indicating many are likely falling into the 'Other' category, which is then explicitly excluded, potentially leading to data loss.","CASE
    WHEN t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times') THEN '      Regionals'
    WHEN t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN '     The Advertiser'
    WHEN t0.publication_name IN ('The Australian') THEN ' The Australian'
    WHEN t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN '    The Courier Mail'
    WHEN t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN '   The Daily Telegraph'
    WHEN t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN '  The Herald Sun'
    ELSE '        Other'
  END AS publication_group","Replace the hardcoded CASE statement with a join to a dedicated dimension table for publication grouping. This table should be governed and maintained centrally, allowing for dynamic updates and consistent grouping across dashboards. The `v_asl_DIM_os_publication_hierachy` table could potentially be extended or a new dimension created.",275,aca2f032-b796-49a2-89fe-781ca947aa33
actual_amount_ytd_2025_week46,Hardcoded Logic,"All metrics hardcode specific fiscal years (FY2025) and week numbers (Week 46, Week 47). The `blended_amount` metric also hardcodes a specific date ('2025-05-28'). This makes the dashboard static and requires manual updates to remain current, leading to high maintenance overhead and potential staleness. The `structure_sql` indicates data is available for FY2026, highlighting this issue.","WHERE t0.fy_year = 2025 AND t0.fy_year_week_number <= 202546
-- Example from blended_amount_current_week_by_publication_group:
DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL -7 DAY)",Implement dynamic fiscal period selection using Looker Studio parameters or by leveraging the `v_asl_DIM_period_control` table to derive the current fiscal year/week/month. This will ensure the dashboard automatically displays current data without manual intervention.,275,aca2f032-b796-49a2-89fe-781ca947aa33
blended_amount_current_week_by_publication_group,Anti-Pattern,"The blending logic for Actuals/Forecasts is embedded in a deeply nested and complex CASE statement. This makes the logic difficult to understand, debug, and maintain. It also relies on a hardcoded date for determining the 'current month' context.","SUM(
    CASE
      WHEN (
        SAFE_CAST(
          CASE
            WHEN (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL -7 DAY) >= SAFE_CAST(t0.fy_first_day_of_week AS DATETIME)
            ) AND (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL 7 DAY) >= SAFE_CAST(t0.fy_last_day_of_week AS DATETIME)
            ) THEN SAFE_CAST(t0.fy_month_of_year AS STRING)
            ELSE NULL
          END AS INT64
        ) < 4
      ) THEN t0.Actual_Amount
      WHEN (
        SAFE_CAST(
          CASE
            WHEN (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL -7 DAY) >= SAFE_CAST(t0.fy_first_day_of_week AS DATETIME)
            ) AND (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL 7 DAY) >= SAFE_CAST(t0.fy_last_day_of_week AS DATETIME)
            ) THEN SAFE_CAST(t0.fy_month_of_year AS STRING)
            ELSE NULL
          END AS INT64
        ) < 6
      ) THEN (CASE WHEN (t0.fy_month_of_year < 4) THEN t0.Actual_Amount ELSE t0.Forecast_Amount END)
      WHEN (
        SAFE_CAST(
          CASE
            WHEN (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL -7 DAY) >= SAFE_CAST(t0.fy_first_day_of_week AS DATETIME)
            ) AND (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL 7 DAY) >= SAFE_CAST(t0.fy_last_day_of_week AS DATETIME)
            ) THEN SAFE_CAST(t0.fy_month_of_year AS STRING)
            ELSE NULL
          END AS INT64
        ) = 6
      ) THEN (CASE WHEN (t0.fy_month_of_year < 6) THEN t0.Actual_Amount ELSE t0.Forecast_Amount END)
      WHEN (
        SAFE_CAST(
          CASE
            WHEN (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL -7 DAY) >= SAFE_CAST(t0.fy_first_day_of_week AS DATETIME)
            ) AND (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL 7 DAY) >= SAFE_CAST(t0.fy_last_day_of_week AS DATETIME)
            ) THEN SAFE_CAST(t0.fy_month_of_year AS STRING)
            ELSE NULL
          END AS INT64
        ) < 9
      ) THEN (CASE WHEN (t0.fy_month_of_year < 7) THEN t0.Actual_Amount ELSE t0.Forecast_Amount END)
      WHEN (
        SAFE_CAST(
          CASE
            WHEN (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL -7 DAY) >= SAFE_CAST(t0.fy_first_day_of_week AS DATETIME)
            ) AND (
              DATETIME_SUB(DATE('2025-05-28', 'UTC'), INTERVAL 7 DAY) >= SAFE_CAST(t0.fy_last_day_of_week AS DATETIME)
            ) THEN SAFE_CAST(t0.fy_month_of_year AS STRING)
            ELSE NULL
          END AS INT64
        ) = 9
      ) THEN (CASE WHEN (t0.fy_month_of_year < 9) THEN t0.Actual_Amount ELSE t0.Forecast_Amount END)
      WHEN (t0.fy_month_of_year < 10) THEN t0.Actual_Amount
      ELSE t0.Forecast_Amount
    END
  )","Refactor the blending logic into a dedicated SQL view or a user-defined function (UDF) if BigQuery supports it, or simplify the logic by pre-calculating the 'current month' and applying a clearer rule set. This promotes reusability, improves readability, and centralizes complex business rules.",275,aca2f032-b796-49a2-89fe-781ca947aa33
gross_revenue_previous_fy_specific_publication_types,Hardcoded Logic,"This metric's SQL logic contains a hardcoded timestamp ('2025-05-08') used for date calculations. This makes the metric static and irrelevant as time progresses, requiring manual updates to remain current. This is a critical flaw for a dashboard intended for ongoing performance monitoring.","SAFE_CAST(DATE(TIMESTAMP '2025-05-08 22:06:40.974629+00', 'Australia/Sydney') AS DATETIME)","Replace the hardcoded date with a dynamic date reference (e.g., `CURRENT_DATE()`, `CURRENT_TIMESTAMP()`, or a dashboard parameter that defaults to today's date) to ensure the metric remains relevant without manual intervention.",276,cf86d117-5f64-4598-bb01-814b58006415
gross_revenue_previous_fy_specific_publication_types,Anti-Pattern,"The `IN` clause within this metric's SQL logic hardcodes a specific list of `unified_publication_name` values ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'). If these publication names change or new ones need to be included/excluded, the SQL logic must be manually updated, increasing maintenance overhead and potential for errors.","t0.unified_publication_name IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')","Consider managing such lists in a configuration table or a dedicated dimension table that can be joined. This centralizes the list, allows for easier updates, and improves data governance.",276,cf86d117-5f64-4598-bb01-814b58006415
gross_revenue_previous_fy_fixed_date_condition,Hardcoded Logic,"Similar to other metrics, this one also uses a hardcoded timestamp ('2025-05-04') for date filtering. This renders the metric obsolete quickly and requires constant manual updates, undermining the dashboard's utility for long-term analysis.","SAFE_CAST(DATE(TIMESTAMP '2025-05-04 05:04:04.194190+00', 'Australia/Sydney') AS DATETIME)","Replace the hardcoded date with a dynamic date reference (e.g., `CURRENT_DATE()`, `CURRENT_TIMESTAMP()`, or a dashboard parameter) to ensure the metric remains relevant without manual intervention.",276,cf86d117-5f64-4598-bb01-814b58006415
revenue_type_grouped_dimension,Hardcoded Logic,"The `CASE` statement hardcodes specific revenue type categories ('XTEND', 'DIGITAL (excl.XTEND)', 'PRINT'). If new revenue types emerge or existing ones are reclassified, this metric will require manual updates, leading to maintenance overhead and potential data inconsistencies. The `ELSE t0.revenue_type` clause mitigates some risk but doesn't prevent new categories from being un-grouped.",CASE WHEN t0.xtend_flag = 'Y' THEN 'XTEND' WHEN t0.revenue_type = 'DIGITAL' THEN 'DIGITAL (excl.XTEND)' WHEN t0.revenue_type = 'PRINT' THEN 'PRINT' ELSE t0.revenue_type END,"Implement a lookup table for revenue type categorization, joining on `xtend_flag` and `revenue_type` to derive the grouped category. This centralizes business logic and improves maintainability.",276,cf86d117-5f64-4598-bb01-814b58006415
gross_revenue_current_fy_dynamic_display,Anti-Pattern,"While attempting to provide dynamic display, the logic relies on a hardcoded string comparison (`'$\'000' = '$'`). This approach is brittle and less robust than using a boolean or numeric parameter to control the display unit, making it prone to errors if the parameter value changes.",('$\'000' = '$'),"Refactor the dashboard parameter to be a boolean (e.g., `display_in_thousands`) or a numeric scale factor, and adjust the SQL logic accordingly. This provides a cleaner and more robust solution for dynamic unit display.",276,cf86d117-5f64-4598-bb01-814b58006415
Pattern: Gross Revenue and SS_LGB metrics,Redundancy / Anti-Pattern,"There is a clear pattern of creating separate metrics for the same underlying value (e.g., `gross_revenue_current_fy_total` and `gross_revenue_current_fy_thousands`). This duplication increases the total metric count, complicates maintenance, and can be inefficient. The dashboard attempts to address this with a 'dynamic display' metric, but the pattern persists.","SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END) AS gross_revenue_current_fy_total
SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_current_fy_thousands","Consolidate these into fewer metrics by leveraging Looker Studio's native formatting options or by implementing a single dynamic metric that uses a dashboard parameter to control the display unit (e.g., full value vs. thousands). This reduces metric sprawl and simplifies maintenance.",276,cf86d117-5f64-4598-bb01-814b58006415
sum_day_target_by_publication_group_daily_filtered,Hardcoded Logic,"The SQL logic for 'Daily Target by Publication Group' contains a hardcoded date range (`2025-05-19` to `2025-05-25`). This prevents the dashboard from dynamically updating to show current or user-selected date ranges, making the metric static and requiring manual updates for ongoing relevance.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN DATE '2025-05-19' AND DATE '2025-05-25'","Replace the hardcoded date range with Looker Studio date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to allow for dynamic filtering and ensure the dashboard always displays up-to-date information. Consider using `CURRENT_DATE()` and `DATE_SUB()` for default relative date ranges if no user selection is made.",277,48a09c73-18f8-4e25-a22f-61398f34ab2a
sum_day_target_website_daily_filtered,Hardcoded Logic,"Similar to the publication group metric, 'Daily Target by Website' also uses a hardcoded date range (`2025-05-19` to `2025-05-25`). This is an anti-pattern that severely limits the dashboard's ability to provide current insights without manual intervention.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) BETWEEN DATE '2025-05-19' AND DATE '2025-05-25'","Implement Looker Studio date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) to enable dynamic date filtering. This will align the metric with expected dashboard functionality for 'Weekly Subs' analysis.",277,48a09c73-18f8-4e25-a22f-61398f34ab2a
sum_c_score_target_weekly_filtered,Hardcoded Logic,"The 'C-Score Target' metric's SQL logic includes a hardcoded date range (`2023-07-03` to `2024-06-30`). While different from the other metrics, this still represents a significant limitation, making the weekly target data static and potentially outdated.",WHERE t0.week_ending BETWEEN DATE '2023-07-03' AND DATE '2024-06-30',"Refactor the query to use dynamic date parameters or functions (e.g., `_DS_START_DATE`, `_DS_END_DATE` or `CURRENT_DATE()` with `DATE_SUB()`) to ensure the 'C-Score Target' reflects the current or relevant weekly period without requiring manual SQL updates.",277,48a09c73-18f8-4e25-a22f-61398f34ab2a
"All metrics (total_adds_standard_paid_non_print_cm, total_cancels_standard_paid_non_print_cm, net_activity_standard_paid_non_print_cm)",Hardcoded Logic|Anti-Pattern,"All three metrics on this dashboard exhibit a significant anti-pattern by embedding hardcoded values directly within their SQL `WHERE` clauses. Specifically, the `report_date` is fixed to '2025-05-04', and the `class_lvl_1`, `delivery_medium`, and `masthead` dimensions are hardcoded to 'Standard Paid', 'Non-Print', and 'CM' respectively. This design choice renders the dashboard inflexible, preventing its use for historical analysis, future dates, or different business segments without manual modification of the underlying SQL. It also hinders the ability to leverage Looker Studio's interactive filtering capabilities.",WHERE SAFE_CAST(t0.report_date AS DATE) = DATE '2025-05-04' AND SAFE_CAST(t0.class_lvl_1 AS STRING) = 'Standard Paid' AND SAFE_CAST(t0.delivery_medium AS STRING) != 'Print' AND SAFE_CAST(t0.masthead AS STRING) = 'CM',"To improve flexibility and reusability, replace hardcoded values with Looker Studio parameters or filter controls. For the `report_date`, implement a date range control, potentially defaulting to `CURRENT_DATE()` or a relevant business date. For `class_lvl_1`, `delivery_medium`, and `masthead`, utilize dropdown lists or multi-select filters linked to parameters, allowing users to dynamically select desired segments. Alternatively, if these filters represent a specific, frequently used business context, consider defining them as a view or a parameterized custom query at the data source level to centralize logic and improve maintainability.",278,42b711d5-6567-46b6-bf11-0f33e66e297e
c_score_target_raw,Anti-Pattern,"The SQL logic for 'C-Score Target (Raw)' includes a `LIMIT 1` clause. This means the metric will only ever return a single arbitrary value from the `c_score_target` column. While it might be intended to show an example, it prevents the dashboard from displaying a comprehensive set of raw target values, which could be misleading if users expect to see a full list or distribution.",SELECT t0.c_score_target FROM `ncau-data-newsquery-prd.cdm_reference_data.cscore_targets` AS t0 LIMIT 1,"If the intent is to display all raw values, remove the `LIMIT 1` clause. If a single example is truly desired, ensure the dashboard visualization and accompanying text clearly communicate that only one arbitrary value is shown, or consider a more specific filtering mechanism if a particular 'example' is needed.",279,41f3dfc4-db10-4e4a-9627-1261e9286fd0
publication_group_dimension,Anti-Pattern,"The 'Publication Group' dimension's SQL logic uses a `LIMIT 5` clause after selecting distinct values. This critically truncates the list of available publication groups, meaning the dashboard will only ever display a maximum of 5 distinct groups, regardless of how many exist in the `cscore_targets` table. This severely limits the ability to filter, segment, or analyze data across all relevant publication groups.",SELECT DISTINCT SAFE_CAST(t0.publication_group AS STRING) AS publication_group FROM `ncau-data-newsquery-prd.cdm_reference_data.cscore_targets` AS t0 LIMIT 5,"Remove the `LIMIT 5` clause. Dimensions should typically return all distinct values to enable comprehensive data exploration and filtering. If a 'top N' list is required for a specific visualization, it should be implemented at the visualization layer or through a more dynamic parameter, not hardcoded in the dimension's base SQL.",279,41f3dfc4-db10-4e4a-9627-1261e9286fd0
week_ending_dimension,Anti-Pattern,"Similar to the 'Publication Group' dimension, the 'Week Ending Date' dimension's SQL logic includes a `LIMIT 5` clause after ordering by date. This restricts the dashboard to only display the 5 most recent week ending dates, severely hindering any historical trend analysis or the ability to select older date ranges for reporting.",SELECT DISTINCT SAFE_CAST(t0.week_ending AS DATE) AS week_ending FROM `ncau-data-newsquery-prd.cdm_reference_data.cscore_targets` AS t0 ORDER BY week_ending DESC LIMIT 5,"Remove the `LIMIT 5` clause. Date dimensions should provide access to the full range of available dates to support flexible time-based analysis. Date range filtering should be handled by dashboard controls or dynamic SQL parameters, not by hardcoding a limit in the base dimension definition.",279,41f3dfc4-db10-4e4a-9627-1261e9286fd0
"ga4_total_events_daily_filtered_q1, ga4_total_events_daily_and_monthly_filtered_q2, ga4_total_events_daily_and_monthly_filtered_q3",Hardcoded Logic,"Three distinct GA4 total event metrics (`Q1`, `Q2`, `Q3`) are defined with identical `COUNT(1)` logic but use different hardcoded date ranges in their WHERE clauses. This approach is highly inefficient and unmaintainable, requiring a new metric definition for every desired date range. It also prevents dynamic date selection by users.","WHERE PARSE_DATE('%Y%m%d', event_date) >= DATE '2025-05-15' AND PARSE_DATE('%Y%m%d', event_date) <= DATE '2025-05-21' (and similar for other metrics)","Consolidate these into a single 'Total GA4 Events' metric. Implement dynamic date filtering within the Looker Studio dashboard using date range controls, allowing users to select their desired period without requiring new metric definitions. If specific fixed periods are needed for comparison, these should be handled at the dashboard visualization layer or through parameterized views, not via duplicated hardcoded metrics.",280,cbd888c3-e42d-4740-9dc4-2b1d774b85c6
"ref_total_records_q4, ref_total_records_q5, ref_total_records_q6",Anti-Pattern,"Three separate metrics (`Q4`, `Q5`, `Q6`) are defined to count the total records from the exact same table (`ncau-data-newsquery-prd.sdm_reference_data.verity2_user_test`) using identical `SELECT COUNT(1)` SQL logic. This is pure duplication, leading to unnecessary metadata, potential confusion, and inefficient resource usage if all are queried.",SELECT COUNT(1) AS total_records FROM `ncau-data-newsquery-prd.sdm_reference_data.verity2_user_test`,"Consolidate these into a single 'Total Reference Records' metric. If there was an intent for different filters or contexts, that intent is not reflected in the provided SQL and should be clarified and implemented appropriately, or the duplicates should be removed.",280,cbd888c3-e42d-4740-9dc4-2b1d774b85c6
"ga4_event_name_dimension, ga4_event_param_key_dimension, ga4_event_param_value_dimension, ga4_event_date_daily_dimension, ga4_event_date_monthly_dimension, ref_ad_user_name_dimension, ref_ad_user_role_dimension, ref_author_team_dimension, ref_verity_usage_masthead_dimension",Anti-Pattern,"All dimension metrics use a `LIMIT 10` clause in their SQL logic. While this might be acceptable for quick previews or data exploration, for a 'Scorecard' dashboard, it severely limits the visibility of distinct values. If the intent is to show a comprehensive list or allow filtering across all possible values, this limit will prevent it.",LIMIT 10,"Review the purpose of each dimension on the dashboard. If the intent is to display all distinct values or enable comprehensive filtering, remove the `LIMIT 10` clause. If a sample is truly intended, consider adding comments to the metric's business description to clarify this limitation to dashboard users.",280,cbd888c3-e42d-4740-9dc4-2b1d774b85c6
unique_subscription_orders_acquisition,Hardcoded Logic,"Both 'Unique Subscription Orders (Acquisition)' and 'Total Subscription Movements (Acquisition)' metrics explicitly filter on `subscription_movement_count_type = 'acquisition'`. While this aligns with the current metric definition, it represents hardcoded logic. If the business needs to analyze other subscription movement types (e.g., 'churn', 'renewal'), new metrics would need to be created or the existing ones duplicated with different filters. This approach can lead to metric proliferation and reduced maintainability.","WHERE
  t0c0d1.subscription_movement_count_type = 'acquisition'","Consider creating a dimension for `subscription_movement_count_type` within a data model (e.g., a BigQuery view or dbt model). This would allow dashboard users to filter or segment by movement type dynamically, reducing the need for multiple hardcoded metrics and improving the flexibility and reusability of the underlying data.",281,db85d1ac-5987-469f-978a-5334af29f7aa
total_subscription_movements_acquisition,Hardcoded Logic,"Both 'Unique Subscription Orders (Acquisition)' and 'Total Subscription Movements (Acquisition)' metrics explicitly filter on `subscription_movement_count_type = 'acquisition'`. While this aligns with the current metric definition, it represents hardcoded logic. If the business needs to analyze other subscription movement types (e.g., 'churn', 'renewal'), new metrics would need to be created or the existing ones duplicated with different filters. This approach can lead to metric proliferation and reduced maintainability.","WHERE
  t0c0d1.subscription_movement_count_type = 'acquisition'","Consider creating a dimension for `subscription_movement_count_type` within a data model (e.g., a BigQuery view or dbt model). This would allow dashboard users to filter or segment by movement type dynamically, reducing the need for multiple hardcoded metrics and improving the flexibility and reusability of the underlying data.",281,db85d1ac-5987-469f-978a-5334af29f7aa
pcsid_occurrence_count_by_referrer_filtered_cancel_date,Hardcoded Logic,"The SQL logic for this metric includes a hardcoded date range (December 2024). This makes the metric static and unsuitable for a dashboard titled 'cancels by referrer by month,' which implies dynamic, ongoing monthly reporting. This anti-pattern severely limits the dashboard's utility and requires manual updates or re-deployment to reflect current data.",WHERE SAFE_CAST(t0.current_offer_cancel_date AS DATE) >= DATE '2024-12-01' AND SAFE_CAST(t0.current_offer_cancel_date AS DATE) <= DATE '2024-12-31',"Replace the hardcoded date filter with dynamic date parameters (e.g., Looker Studio date range controls) or relative date logic (e.g., `WHERE current_offer_cancel_date BETWEEN DATE_TRUNC(CURRENT_DATE(), MONTH) AND LAST_DAY(CURRENT_DATE(), MONTH)` for the current month, or a user-selected date range parameter).",282,2cdcf36b-a99b-4beb-88a6-a28d238f6c1f
link_click_count_base,Hardcoded Logic,"All base metrics (Link Click Count, Impression Count, Spend Amount) and many derived metrics use hardcoded date filters (`report_date >= DATE('2023-07-03')`) and masthead codes (`masthead_code IN ('RN', 'PU')`). This makes the dashboard non-dynamic and requires manual updates for date range changes or masthead scope adjustments, leading to high maintenance overhead and potential for stale data.","WHERE report_date >= DATE('2023-07-03') AND masthead_code IN ('RN', 'PU')","Replace hardcoded dates with dynamic date parameters (e.g., `CURRENT_DATE() - INTERVAL 7 DAY`) or Looker Studio's built-in date range controls. Externalize masthead codes into a configurable parameter or a dimension table for flexible filtering.",283,7bf93024-7b75-4803-be97-60132f017c00
link_click_count_base,Anti-Pattern,"All base metrics and many derived metrics include a `LIMIT 1` or `LIMIT 10` clause. For aggregate metrics intended for a dashboard, this is highly problematic as it restricts the result set to a single or few rows, potentially misrepresenting the total or trend data. This suggests either a misunderstanding of dashboard aggregation or that the provided SQL snippets are not the full queries executed by Looker Studio.",LIMIT 1;,"Remove `LIMIT` clauses for aggregate metrics. Ensure Looker Studio's aggregation and filtering mechanisms are correctly applied, and that the underlying SQL is designed to return the full dataset for aggregation.",283,7bf93024-7b75-4803-be97-60132f017c00
tiktok_clicks,Anti-Pattern,"Multiple metrics (e.g., TikTok Clicks, Apple Clicks, Facebook Clicks, Google Clicks, Pinterest Clicks, Microsoft Bing Clicks, Snapchat Clicks) use repeated `SUM(CASE WHEN source_system_name LIKE '%X%' THEN ... END)` logic to filter by specific source systems. This is an anti-pattern for dimensional analysis. If new source systems emerge, new metrics must be created, leading to metric sprawl and maintenance burden.",SUM(CASE WHEN source_system_name LIKE '%Tiktok%' THEN link_click_count ELSE 0 END),"Model `source_system_name` as a dimension. Create a single `link_click_count` metric and allow users to filter or group by `source_system_name` directly in the dashboard. If specific groupings are needed, define them in a governed dimension table.",283,7bf93024-7b75-4803-be97-60132f017c00
total_acquisition_movements,Hardcoded Logic,"All subscription acquisition metrics use extensive hardcoded `WHERE` clauses for `masthead`, `subscription_movement_count_sub_type`, `is_corporate_b2b_flag`, `delivery_medium_type`, and `subscription_tenure_start_datetime`. Similar to campaign metrics, this severely limits flexibility and increases maintenance.","mv.masthead IN ('TA', 'DT', 'HS', 'CM', 'AA', 'WT', 'GA', 'GC', 'CP', 'TB', 'NT', 'TM', 'TC', 'CS', 'PU', 'RN')
  AND (mv.subscription_movement_count_sub_type = 'acquisition' OR mv.subscription_movement_count_sub_type = 'reactivation_30day_acquisition' OR mv.subscription_movement_count_sub_type = 'switch_acquisition')
  AND mv.is_corporate_b2b_flag = 'N'
  AND mv.delivery_medium_type != 'Print'
  AND mv.subscription_tenure_start_datetime >= DATE('2023-07-03')",Externalize these filters into dashboard controls or a governed data model. Define these common filtering criteria as views or pre-aggregated tables if performance is a concern.,283,7bf93024-7b75-4803-be97-60132f017c00
bau_always_on_digital_acquisitions,Anti-Pattern,"Multiple acquisition metrics (e.g., BAU Always On Digital Acquisitions, Premium Breach Acquisitions, Bau General Offer Acquisitions, Third-Party Offer Acquisitions, Other Acquisitions) use `COUNT(CASE WHEN mv.sold_in_channel = 'X' THEN 1 END)` or `COUNT(CASE WHEN mv.classification_level_2 = 'X' THEN 1 END)`. This pattern is repeated for `sold_in_source_channel` and `sold_in_channel` combinations (e.g., External Display Acquisitions, SEM Acquisitions). This indicates that `sold_in_channel`, `classification_level_2`, and `sold_in_source_channel` should be treated as dimensions, not hardcoded filters within individual metrics.",COUNT(CASE WHEN mv.sold_in_channel = 'Bau Always On Digital' THEN 1 END),"Create a single 'Acquisition Count' metric. Model `sold_in_channel`, `classification_level_2`, and `sold_in_source_channel` as dimensions in the data source. This allows for flexible slicing and dicing of acquisition data without creating a new metric for each channel/source combination.",283,7bf93024-7b75-4803-be97-60132f017c00
other_bau_acquisitions,Anti-Pattern,"The 'Other BAU Acquisitions' metric uses a `NOT IN` clause with a long, hardcoded list of `sold_in_source_channel` values. This is fragile and prone to errors if new source channels are introduced or existing ones are renamed. It suggests an incomplete or poorly managed categorization of acquisition sources.","mv.sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Content Amplification', 'Not Available')","Implement a robust dimension table for `sold_in_source_channel` and `sold_in_channel` that includes a 'category' or 'grouping' attribute. This allows for dynamic categorization (e.g., 'Other') based on a defined business logic, rather than an exclusionary list.",283,7bf93024-7b75-4803-be97-60132f017c00
wow_link_click_diff,Anti-Pattern,"The `LAG` function's `PARTITION BY` clause includes `fy_year_number_name` and `fy_week_of_year` in addition to `source_system_name`, while also ordering by `fy_week_of_year`. Partitioning by the week of year and then ordering by it within that same partition will cause the `LAG` function to look at the previous row *within that specific week*, which is likely not the intended week-over-week comparison. For a true week-over-week difference, the partitioning should typically be by `source_system_name` only, with ordering by `fy_year_number_name, fy_week_of_year`.","LAG(link_click_count, 1) OVER (PARTITION BY source_system_name, fy_year_number_name, fy_week_of_year ORDER BY fy_week_of_year)","Correct the `PARTITION BY` clause to `PARTITION BY source_system_name ORDER BY fy_year_number_name, fy_week_of_year` to ensure the `LAG` function correctly identifies the previous week's data for comparison.",283,7bf93024-7b75-4803-be97-60132f017c00
"total_events, total_events_weekly_20250421, total_events_monthly_20250430, total_events_weekly_20250217, total_verity_users",Anti-Pattern,"All metrics defined in the dashboard's SQL logic include a `LIMIT 100` clause. For metrics intended to represent 'Total Events' or 'Total Users', this will result in incomplete and incorrect aggregate values, severely compromising the accuracy and reliability of the dashboard's reported figures. This is a critical data integrity issue.",LIMIT 100,"Remove the `LIMIT 100` clause from all aggregate metrics unless the intention is specifically to display only a sample or top-N results, in which case the metric name and business description should clearly reflect this limitation. For 'Total' metrics, the limit must be removed.",284,7ab2395e-d246-4e16-b376-dd763ecefecb
"total_events_weekly_20250421, total_events_monthly_20250430, total_events_weekly_20250217",Hardcoded Logic,"Multiple 'Total Events' metrics are created by applying hardcoded date filters (e.g., '2025-04-21' to '2025-04-27') directly within the SQL query. This approach makes the dashboard static and non-dynamic, requiring manual modification of the SQL for each new reporting period. This contradicts the nature of a 'Weekly DT reporter pack' which implies automated, rolling reporting.",WHERE clmn6_ >= DATE 'YYYY-MM-DD' AND clmn6_ <= DATE 'YYYY-MM-DD',"Implement dynamic date filtering using Looker Studio's built-in date range controls. For BigQuery sources, this can often be achieved by leveraging parameters or by structuring the data source to allow for date-based partitioning (`_TABLE_SUFFIX` for `events_intraday_*`) and then applying filters at the dashboard level. This will allow users to select arbitrary date ranges without modifying the underlying SQL.",284,7ab2395e-d246-4e16-b376-dd763ecefecb
total_events,Anti-Pattern,"The SQL logic for the base 'Total Events' metric (and consequently its derivatives) is overly nested and uses generic, non-descriptive column aliases (e.g., `clmn0_`, `clmn1_`, `clmn5_`). While `UNNEST` is standard for event parameters, the subsequent layers of `SELECT` statements and aliasing significantly reduce readability and maintainability, making it difficult to understand the data flow and debug issues.","SELECT clmn1_, clmn2_, clmn3_, clmn5_ AS event_date_parsed, COUNT(1) AS total_events_count FROM ( SELECT PARSE_DATE('%Y%m%d', clmn4_) AS clmn5_, PARSE_DATE('%Y%m%d', clmn4_) AS clmn6_, clmn0_, clmn1_, clmn2_, clmn3_ FROM ( SELECT SAFE_CAST(clmn0_ AS STRING) AS clmn4_, clmn0_, clmn1_, clmn2_, clmn3_ FROM ( SELECT t0c1d1.event_date AS clmn0_, t0c1d1.event_name AS clmn1_, t0c1d1_event_params.key AS clmn2_, t0c1d1_event_params.value.string_value AS clmn3_ FROM `ncau-data-newsquery-prd.analytics_309894138.events_intraday_*` AS t0c1d1 LEFT JOIN UNNEST(t0c1d1.event_params) AS t0c1d1_event_params ) ) ) GROUP BY clmn1_, clmn2_, clmn3_, event_date_parsed LIMIT 100","Refactor the SQL using Common Table Expressions (CTEs) to break down the logic into more manageable and readable steps. Use meaningful column aliases throughout the query to improve clarity and maintainability. For example, `event_date` instead of `clmn0_` or `clmn4_`.",284,7ab2395e-d246-4e16-b376-dd763ecefecb
unique_signed_up_subscribers_by_masthead,Hardcoded Logic,"The SQL query for this metric contains a hardcoded list of 'masthead' values within its `WHERE` clause. This practice makes the query brittle and difficult to maintain, as any changes to the list of relevant mastheads (e.g., new additions, deprecations) would require manual modification of the SQL. It also limits the dashboard's ability to dynamically adapt to changes in the underlying data or business requirements without code changes.","WHERE
    SAFE_CAST(t0.masthead AS STRING) IN ('CM', 'HS', 'DT', 'SC', 'AA', 'TM', 'TA', 'GC', 'TB', 'NT', 'GA', 'CP', 'TC', 'WT')","Replace the hardcoded `IN` clause with a join to a dedicated, governed lookup table for mastheads. This approach centralizes masthead definitions, improves data consistency across reports, and allows for easier maintenance and scalability. Alternatively, if the list is truly static and small, consider a BigQuery `ARRAY` parameter or a view that encapsulates this list.",285,2adc554c-f88a-4f22-8e40-0a3bafc68994
unique_subscribers_by_newsletter_signup_status,Anti-Pattern,"The metric uses a `CASE` statement to categorize subscribers based on `digital_subscriber_id_src`. While functional for a simple binary split, this pattern, if repeated across many metrics or if the categorization logic becomes more complex, can lead to redundancy and maintenance challenges. The same logic for 'Signed up to newsletters' is also repeated in `unique_signed_up_subscribers_by_masthead`.",CASE WHEN t0.digital_subscriber_id_src IS NULL THEN 'not signed up to newsletters' ELSE 'Signed up to newsletters' END,"For future scalability and maintainability, consider externalizing common categorization logic into a dedicated dimension table, a common SQL view, or a user-defined function (UDF). This would promote reusability, reduce redundancy, and ensure consistent application of business rules across the data model.",285,2adc554c-f88a-4f22-8e40-0a3bafc68994
distinct_subscriber_days_active_prior_month_filtered_date,Hardcoded Logic,"The metric's SQL logic contains a hardcoded, static date range (`2025-05-12` to `2025-05-18`). This makes the metric non-dynamic and unsuitable for ongoing, time-series analysis without manual updates, which is a significant anti-pattern for dashboard metrics.",WHERE (t0.data_as_of_date >= DATE '2025-05-12' AND t0.data_as_of_date <= DATE '2025-05-18'),"Replace hardcoded dates with dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) or leverage Looker Studio's native date range parameters to allow for flexible and up-to-date analysis.",286,abb028b6-2752-4264-a22b-0b0810340515
distinct_dormant_active_australian_plus_subscribers,Hardcoded Logic,"The `Loyalty_Score` categorization is defined using a hardcoded `CASE` statement based on `Redemptions`. This logic is duplicated within the `UNION ALL` structure of the query, making updates difficult and prone to inconsistency if business rules for loyalty scoring change.",CASE WHEN Redemptions = 0 THEN 'Dormant' WHEN Redemptions >= 1 AND Redemptions <= 2 THEN 'Low' WHEN Redemptions >= 3 AND Redemptions <= 8 THEN 'Medium' WHEN Redemptions >= 9 AND Redemptions <= 13 THEN 'High' WHEN Redemptions >= 14 THEN 'Super' END AS Loyalty_Score,"Externalize loyalty score logic into a dedicated lookup table or a common SQL view/UDF. This promotes reusability, consistency, and easier maintenance across multiple metrics or dashboards that might use similar categorization.",286,abb028b6-2752-4264-a22b-0b0810340515
distinct_dormant_active_australian_plus_subscribers,Hardcoded Logic,"The `churn_score_group_order` is defined using a hardcoded `CASE` statement based on `Churn_Score`. Similar to `Loyalty_Score`, this logic is duplicated within the `UNION ALL` structure, which is an anti-pattern for maintainability and consistency.",CASE WHEN cam.Churn_Score = 0 THEN 1 WHEN cam.Churn_Score > 0 AND cam.Churn_Score <= 0.1 THEN 2 ... END AS churn_score_group_order,"Centralize churn score grouping logic into a dedicated lookup table, a common SQL view, or a UDF. This ensures consistency across the data platform and simplifies updates to churn risk definitions.",286,abb028b6-2752-4264-a22b-0b0810340515
distinct_dormant_active_australian_plus_subscribers,Anti-Pattern,"The metric's SQL uses a `UNION ALL` to combine two highly similar, complex subqueries. This results in significant code duplication, particularly for the `Loyalty_Score` and `churn_score_group_order` `CASE` statements, and makes the overall logic extremely difficult to understand, debug, and maintain. The differing `WHERE` clauses within the `UNION ALL` branches suggest a convoluted approach to filtering that could likely be simplified.",FROM (...) AS a UNION ALL (...) -- Represents the entire UNION ALL block with duplicated logic.,"Refactor this metric's SQL to eliminate code duplication. Consider using CTEs (Common Table Expressions) to break down complex logic into readable, modular steps. Evaluate if the `UNION ALL` is truly necessary or if the filtering logic can be simplified and applied once to a unified dataset. A thorough review with the business owner and original developer is recommended to confirm the intended logic of the `UNION ALL` branches and simplify the query.",286,abb028b6-2752-4264-a22b-0b0810340515
total_articles_courier_mail,Hardcoded Logic|Anti-Pattern,"The SQL query contains an extensive list of hardcoded `publicationgroup !=` and `section !=` conditions. This makes the query brittle, difficult to maintain, and prone to errors if new publication groups or sections are introduced or existing ones change. The date `20250813` is also hardcoded, rendering the report static and not dynamic for a 'Sunrise Report'.","WHERE (articledateupdated >= PARSE_DATE('%Y%m%d', '20250813') AND articledateupdated <= PARSE_DATE('%Y%m%d', '20250813') AND publicationgroup != 'Fox Sports' AND publicationgroup != 'News.com.au' AND publicationgroup != 'Wires' AND publicationgroup != 'Escape' AND publicationgroup != 'Global syndication' AND publicationgroup != 'Whimn Network' AND publicationgroup != 'Kids News' AND publicationgroup != 'Other' AND publicationgroup != 'News Prestige Network' AND publicationgroup != 'News Regional Media' AND publicationgroup != 'PerthNow' AND publicationgroup != 'Stellar' AND section1 != 'real-estate' AND section3 != 'hyperlocal' AND section2 != 'hyperlocal' AND publicationgroup = 'The Courier-Mail')","Centralize the exclusion logic (e.g., in a dedicated view or a lookup table for excluded publication groups/sections). Parameterize the date filter to allow for dynamic reporting (e.g., `CURRENT_DATE()` or a dashboard date parameter).",287,ba78bbd6-7358-4088-b37a-23c1dd22fb28
avg_article_value_score_courier_mail,Hardcoded Logic|Anti-Pattern,"This metric duplicates the exact same extensive hardcoded filtering logic and the hardcoded date as 'Total Articles (Courier Mail)'. Additionally, the core 'Article Value Score' calculation `(((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64)) + (t0.SubscriberPV * 0.16)) + (t0.TotalPV * 0.02))` is embedded directly in the query, leading to repetition across metrics.","SELECT AVG((((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64)) + (t0.SubscriberPV * 0.16)) + (t0.TotalPV * 0.02))) AS avg_article_value_score FROM `ncau-data-newsquery-prd.PRSTN.v_masthead_performance_summary` AS t0 WHERE (t0.articledateupdated >= PARSE_DATE('%Y%m%d', '20250813') AND t0.articledateupdated <= PARSE_DATE('%Y%m%d', '20250813') AND t0.publicationgroup != 'Fox Sports' AND t0.publicationgroup != 'News.com.au' AND t0.publicationgroup != 'Wires' AND t0.publicationgroup != 'Escape' AND t0.publicationgroup != 'Global syndication' AND t0.publicationgroup != 'Whimn Network' AND t0.publicationgroup != 'Kids News' AND t0.publicationgroup != 'Other' AND t0.publicationgroup != 'News Prestige Network' AND t0.publicationgroup != 'News Regional Media' AND t0.publicationgroup != 'PerthNow' AND t0.publicationgroup != 'Stellar' AND t0.section1 != 'real-estate' AND t0.section3 != 'hyperlocal' AND t0.section2 != 'hyperlocal' AND t0.publicationgroup = 'The Courier-Mail')",Define the 'Article Value Score' calculation as a calculated field in the data source or as a column in a BigQuery view. Apply the centralized exclusion logic and parameterized date filter.,287,ba78bbd6-7358-4088-b37a-23c1dd22fb28
article_value_category_courier_mail,Hardcoded Logic|Anti-Pattern|Data Mismatch,"This metric re-calculates the 'Article Value Score' and then applies a complex, hardcoded `CASE` statement for categorization. Changes to category thresholds would require manual SQL updates. The `LIMIT 1` clause is highly problematic for a categorical dimension, as it would only return a single arbitrary category value, not a distribution or the category for each article, making it unsuitable for grouping or filtering.","SELECT CASE WHEN (clmn13_ >= 10000) THEN '5' WHEN ((clmn13_ < 10000) AND (clmn13_ >= 7500)) THEN '4' WHEN ((clmn13_ < 7500) AND (clmn13_ >= 5000)) THEN '3' WHEN ((clmn13_ < 5000) AND (clmn13_ >= 2000)) THEN '2' WHEN ((clmn13_ < 2000) AND (clmn13_ >= 400)) THEN '1' ELSE '0' END AS article_value_category FROM (SELECT (((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64)) + (t0.SubscriberPV * 0.16)) + (t0.TotalPV * 0.02)) AS clmn13_ FROM `ncau-data-newsquery-prd.PRSTN.v_masthead_performance_summary` AS t0 WHERE (t0.articledateupdated >= PARSE_DATE('%Y%m%d', '20250813') AND t0.articledateupdated <= PARSE_DATE('%Y%m%d', '20250813') AND t0.publicationgroup != 'Fox Sports' AND t0.publicationgroup != 'News.com.au' AND t0.publicationgroup != 'Wires' AND t0.publicationgroup != 'Escape' AND t0.publicationgroup != 'Global syndication' AND t0.publicationgroup != 'Whimn Network' AND t0.publicationgroup != 'Kids News' AND t0.publicationgroup != 'Other' AND t0.publicationgroup != 'News Prestige Network' AND t0.publicationgroup != 'News Regional Media' AND t0.publicationgroup != 'PerthNow' AND t0.publicationgroup != 'Stellar' AND t0.section1 != 'real-estate' AND t0.section3 != 'hyperlocal' AND t0.section2 != 'hyperlocal' AND t0.publicationgroup = 'The Courier-Mail')) LIMIT 1","Pre-calculate the 'Article Value Score' and 'Article Value Category' as columns in the underlying BigQuery view (`v_masthead_performance_summary`) or as calculated fields in Looker Studio, referencing the base score. Replace the hardcoded `CASE` statement with a more maintainable solution (e.g., a lookup table for thresholds or a UDF). Remove the `LIMIT 1` clause to allow for proper categorical analysis.",287,ba78bbd6-7358-4088-b37a-23c1dd22fb28
article_scored_status_courier_mail,Hardcoded Logic|Anti-Pattern|Data Mismatch,"This metric is built upon the 'Article Value Category' logic, duplicating the entire nested calculation and `CASE` statement from that metric, then adding another `CASE` for 'scored'/'unscored'. This creates extreme redundancy and inefficiency. Similar to the previous metric, the `LIMIT 1` clause is inappropriate for a status dimension, preventing proper analysis of scored vs. unscored articles.","SELECT CASE WHEN (clmn22_ = '0') THEN 'unscored' ELSE 'scored' END AS article_scored_status FROM (SELECT CASE WHEN (clmn13_ >= 10000) THEN '5' WHEN ((clmn13_ < 10000) AND (clmn13_ >= 7500)) THEN '4' WHEN ((clmn13_ < 5000) AND (clmn13_ >= 2000)) THEN '2' WHEN ((clmn13_ < 2000) AND (clmn13_ >= 400)) THEN '1' ELSE '0' END AS clmn22_ FROM (SELECT (((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64) + SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64)) + (t0.SubscriberPV * 0.16)) + (t0.TotalPV * 0.02)) AS clmn13_ FROM `ncau-data-newsquery-prd.PRSTN.v_masthead_performance_summary` AS t0 WHERE (t0.articledateupdated >= PARSE_DATE('%Y%m%d', '20250813') AND t0.articledateupdated <= PARSE_DATE('%Y%m%d', '20250813') AND t0.publicationgroup != 'Fox Sports' AND t0.publicationgroup != 'News.com.au' AND t0.publicationgroup != 'Wires' AND t0.publicationgroup != 'Escape' AND t0.publicationgroup != 'Global syndication' AND t0.publicationgroup != 'Whimn Network' AND t0.publicationgroup != 'Kids News' AND t0.publicationgroup != 'Other' AND t0.publicationgroup != 'News Prestige Network' AND t0.publicationgroup != 'News Regional Media' AND t0.publicationgroup != 'PerthNow' AND t0.publicationgroup != 'Stellar' AND t0.section1 != 'real-estate' AND t0.section3 != 'hyperlocal' AND t0.section2 != 'hyperlocal' AND t0.publicationgroup = 'The Courier-Mail'))) LIMIT 1","This metric should derive directly from the 'Article Value Category' (e.g., `CASE WHEN article_value_category = '0' THEN 'unscored' ELSE 'scored' END`). Pre-calculate both the score and category in the underlying view to avoid redundant computations. Remove the `LIMIT 1` clause.",287,ba78bbd6-7358-4088-b37a-23c1dd22fb28
distinct_subscribers_standard_paid_other_gateways,Hardcoded Logic,"The metric's SQL logic explicitly excludes a hardcoded list of common payment gateways ('Stripe', 'B-Point', 'PayPal', 'Bpay', 'Australia Post') using a `NOT IN` clause. This approach is brittle and not scalable. If the definition of 'common' gateways changes, or new significant gateways emerge, the SQL query must be manually updated, increasing maintenance overhead, risk of human error, and potential for data inconsistencies across different reports. The inclusion of `OR t0.payment_gateway IS NULL` also requires clear business justification to ensure it aligns with the intended exclusion logic.","(SAFE_CAST(t0.payment_gateway AS STRING) NOT IN ('Stripe', 'B-Point', 'PayPal', 'Bpay', 'Australia Post') OR t0.payment_gateway IS NULL)","To improve maintainability and data governance, replace the hardcoded `NOT IN` list with a join to a governed lookup table (e.g., `dim_payment_gateway_types`). This lookup table could categorize payment gateways (e.g., 'Common', 'Niche', 'Legacy') allowing for dynamic filtering. This centralizes the definition of 'common' gateways and ensures consistency across all dependent metrics. Additionally, review the business requirement for including `t0.payment_gateway IS NULL` in the exclusion criteria.",288,da5dcd47-2e80-45e8-94b8-5b71d81182f5
"content_reference_id, adjusted_ingest_date, filtered_content_id",Hardcoded Logic,"All three metrics within this dashboard are hardcoded to filter data based on a specific `content_id` ('da836743742cbf2daadbbe4a0ca6f530'). This design choice makes the dashboard highly specific to a single content item, severely limiting its reusability. To analyze a different content item, the underlying SQL for each metric would require manual modification, which is inefficient, prone to errors, and violates the principle of 'Don't Repeat Yourself' (DRY).",WHERE t0.content_id = 'da836743742cbf2daadbbe4a0ca6f530',"Introduce a Looker Studio dashboard parameter (e.g., a 'Content ID' filter control) to allow users to dynamically select the `content_id`. This would enable the dashboard to be reused for any content item without requiring changes to the underlying metric definitions, significantly improving its flexibility, maintainability, and overall value.",289,ae3044ce-064d-4d74-90fc-2cf45afa04ee
filtered_content_id,Anti-Pattern / Redundant Metric,"The 'Content ID (Filtered)' metric explicitly selects the same hardcoded `content_id` that is already applied as a global filter across all other metrics in the dashboard. While its intent might be to explicitly state the filtered ID, it is redundant as a 'metric' if its sole purpose is display. This information could be conveyed more efficiently and without an additional query through a simple text box or by displaying the value of a dashboard parameter.",SELECT t0.content_id FROM `ncau-data-newsquery-prd.cdm_capi.capi_collection` AS t0 WHERE t0.content_id = 'da836743742cbf2daadbbe4a0ca6f530' LIMIT 10,"If the dashboard is parameterized (as recommended above), remove this metric entirely and instead display the value of the 'Content ID' parameter directly on the dashboard using a text box or similar display element. If not parameterized, evaluate if this metric truly adds analytical value beyond simply stating the filter applied; often, this can be inferred or displayed via other means.",289,ae3044ce-064d-4d74-90fc-2cf45afa04ee
adjusted_ingest_date,Complex Logic (Potential for Simplification/Clarity),"The `adjusted_ingest_date` metric includes a hardcoded `INTERVAL 10 HOUR` adjustment to the `dw_src_ingest_time`. While this likely accounts for a specific timezone conversion (e.g., UTC to AEST/AEDT), the current approach using `DATETIME_ADD` on a `DATETIME` type might not automatically handle daylight saving changes if the source `dw_src_ingest_time` is a `TIMESTAMP` or if the target timezone varies seasonally. This could lead to incorrect date assignments during daylight saving transitions.","DATETIME_ADD(DATETIME_TRUNC(SAFE_CAST(t0.dw_src_ingest_time AS DATETIME), SECOND), INTERVAL 10 HOUR)","Verify the exact data type and timezone of the `dw_src_ingest_time` column. If it's a `TIMESTAMP` type, consider using `TIMESTAMP_ADD` and `FORMAT_TIMESTAMP` with `AT TIME ZONE 'Australia/Sydney'` (or the appropriate timezone identifier) for more robust and explicit timezone handling that automatically accounts for daylight saving. If the source is a `DATETIME` without timezone information, the current approach is acceptable but should be clearly documented regarding its timezone assumptions and potential limitations during daylight saving.",289,ae3044ce-064d-4d74-90fc-2cf45afa04ee
revenue_this_financial_year,Anti-Pattern / Hardcoded Logic,"Multiple high-criticality metrics (`revenue_this_financial_year`, `revenue_same_time_last_financial_year`, `capacity_this_financial_year`, `capacity_same_time_last_financial_year`) contain identical, complex `CASE` statements for dynamically calculating financial year boundaries (July 1st to current date). This duplication of date logic is a significant anti-pattern, making updates cumbersome and prone to errors if the financial year definition changes or needs to be applied consistently across many metrics.","DATE(CASE WHEN EXTRACT(MONTH FROM CURRENT_DATE()) >= 7 THEN EXTRACT(YEAR FROM CURRENT_DATE()) ELSE EXTRACT(YEAR FROM CURRENT_DATE()) - 1 END, 7, 1)",Centralize financial year logic. This can be achieved by: 1) Creating a dedicated date dimension table in BigQuery with pre-calculated financial year attributes. 2) Defining reusable calculated fields or parameters within Looker Studio for financial year start/end dates. This would simplify metric definitions and improve maintainability.,290,51c14ec4-1d06-4dcc-9dad-6ff771fa2534
sold_pages_this_financial_year,Anti-Pattern / Hardcoded Logic,"The complex business logic for deriving `foc_grouping_str` (e.g., 'Sold', 'House', 'Other') based on `customer_profile_name`, `rev_contractual_bonus_amount`, and `gross_revenue_amount` is hardcoded and extensively repeated across all 'Sold Pages' metrics. This makes the dashboard highly dependent on specific, embedded business rules, which are difficult to manage, audit, and update. Any change to the 'Sold' definition requires modifying multiple metric SQL definitions.","(CASE WHEN customer_profile_name IN ('Not Available', 'Casual Business', 'Established', 'Overseas', 'Corporate', 'Private Party', 'ABN Exempt', 'Sub Corporate') AND rev_contractual_bonus_amount <= 0 THEN 'Sold' WHEN customer_profile_name IN ('Not Available', 'Casual Business', 'Established', 'Overseas', 'Corporate', 'Private Party', 'ABN Exempt', 'Sub Corporate') AND gross_revenue_amount = 0 THEN 'Sold' WHEN customer_profile_name IN ('Not Available', 'Casual Business', 'Established', 'Overseas', 'Corporate', 'Private Party', 'ABN Exempt', 'Sub Corporate') AND gross_revenue_amount > 0 THEN 'Sold' WHEN customer_profile_name IN ('Not Available', 'Casual Business', 'Established', 'Overseas', 'Corporate', 'Private Party', 'ABN Exempt', 'Sub Corporate') AND gross_revenue_amount < 0 THEN 'Sold' WHEN customer_profile_name = 'Barter' THEN 'Sold' WHEN customer_profile_name = 'Contra' THEN 'Sold' WHEN customer_profile_name IN ('House - Invoiced', 'House') THEN 'House' ELSE 'Other' END)","Pre-calculate the `foc_grouping_str` as a derived column in the `adsales_revenue_pricing` table (or a view on top of it) during the ETL/ELT process. This centralizes the business logic at the data model level, making it reusable, consistent, and easier to maintain. If pre-calculation is not feasible, define this logic as a reusable calculated field within Looker Studio.",290,51c14ec4-1d06-4dcc-9dad-6ff771fa2534
sold_pages_all_time,Data Mismatch / Inconsistency,"The `sold_pages_all_time` metric's `foc_grouping_str` logic uses `contractual_bonus_amount`, whereas other 'Sold Pages' metrics (e.g., `sold_pages_this_financial_year`) use `rev_contractual_bonus_amount`. This inconsistency in field usage for the same business logic could lead to different 'Sold' categorizations and potentially inaccurate results across related metrics.",contractual_bonus_amount (in `sold_pages_all_time`) vs. rev_contractual_bonus_amount (in other 'Sold Pages' metrics),"Review and standardize the field used for 'Sold' categorization (`contractual_bonus_amount` or `rev_contractual_bonus_amount`) across all relevant metrics. Ensure the chosen field accurately reflects the business definition of 'Sold' pages. Ideally, this standardization would occur at the data model level as part of the recommendation for centralizing the `foc_grouping_str` logic.",290,51c14ec4-1d06-4dcc-9dad-6ff771fa2534
financial_year_dimension,Anti-Pattern / Inefficient Query,"The `financial_year_dimension` is defined by querying the entire `adsales_revenue_pricing` table using `DISTINCT` and `CURRENT_DATE()` with a `LIMIT 10`. This approach is inefficient for a dimension, as it forces a full table scan for a single dynamic value. Furthermore, a dimension should ideally represent historical values for filtering, not just the current financial year, and the `LIMIT 10` is arbitrary for a dimension.",SELECT DISTINCT CASE WHEN EXTRACT(MONTH FROM CURRENT_DATE()) >= 7 THEN EXTRACT(YEAR FROM CURRENT_DATE()) + 1 ELSE EXTRACT(YEAR FROM CURRENT_DATE()) END AS financial_year FROM `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_pricing` LIMIT 10,"If 'Financial Year' is intended as a true dimension for filtering historical data, it should be derived from a date column (e.g., `publication_date`) within the table or sourced from a dedicated date dimension table. If it's meant to be a dynamic filter for the *current* financial year, it should be implemented as a Looker Studio parameter or a simpler calculated field that doesn't require querying the entire underlying table.",290,51c14ec4-1d06-4dcc-9dad-6ff771fa2534
c_score_target_sum_all_instances,Hardcoded Logic / Anti-Pattern,"The dashboard defines three distinct metrics for 'Total C-Score Target' (e.g., for weeks 2025-05-12 to 2025-05-18, 2025-03-03 to 2025-03-09, and 2025-04-21 to 2025-04-27). Each metric's SQL query is identical except for the hardcoded `WHERE` clause specifying a fixed weekly date range. This approach is highly inefficient, unscalable, and creates significant maintenance overhead. If the dashboard needs to display data for additional or different weeks, new metrics must be manually created and added, which is prone to errors and bloats the metric inventory. This contradicts the reported 'consolidation score' of 9, which likely refers to the base metric logic but not its implementation across varying time dimensions.",WHERE SAFE_CAST(t0.week_ending AS DATE) >= DATE '2025-05-12' AND SAFE_CAST(t0.week_ending AS DATE) <= DATE '2025-05-18',"Refactor these multiple metrics into a single, parameterized 'Total C-Score Target' metric. Leverage Looker Studio's native date range controls or dashboard-level parameters to allow users to dynamically select the desired week or period. This will drastically reduce metric redundancy, improve maintainability, and enhance the dashboard's flexibility and reusability. Consider implementing a date dimension table if more complex date logic or fiscal periods are required.",291,57a6a6b6-710d-4258-968d-35ab9a7704e5
total_website_target_weekly_20250428_20250504,Hardcoded Logic|Anti-Pattern,"This metric, along with its counterpart, defines the 'Total Website Target' by hardcoding specific date ranges (2025-04-28 to 2025-05-04) directly into its SQL `WHERE` clause. This approach creates redundant metric definitions, as any new weekly period requires a new metric to be created and maintained. It also prevents the dashboard from being dynamic, forcing users to rely on pre-defined weekly views rather than interactive date range selection.","WHERE
    PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-04-28'
    AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-04'","Refactor the 'Total Website Target' metric to remove the hardcoded date range. A single, consolidated metric should be created that relies on Looker Studio's built-in date range controls or parameters to filter the data dynamically. This will significantly reduce maintenance overhead, improve dashboard flexibility, and align with best practices for data modeling. Additionally, consider converting the `targetdate` column in the `subscription_targets` table from a string (`YYYYMMDD`) to a native `DATE` type for improved query performance and data integrity.",292,eda51dbb-3cc6-46c2-b1f7-8189b682760a
total_website_target_weekly_20250623_20250629,Hardcoded Logic|Anti-Pattern,"This metric exhibits the identical hardcoded date range issue as the '2025-04-28' week metric. The SQL logic is duplicated entirely, with only the date literals changing. This pattern is unsustainable for a dashboard intended to show weekly views, as it implies an ever-growing list of metrics for each past or future week.","WHERE
    PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-06-23'
    AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-06-29'","Consolidate this metric with 'total_website_target_weekly_20250428_20250504' into a single, parameterized 'Total Website Target' metric. This will eliminate redundancy, simplify future development, and enable dynamic date filtering directly within the Looker Studio dashboard. This consolidation is critical for improving the dashboard's maintainability and scalability.",292,eda51dbb-3cc6-46c2-b1f7-8189b682760a
advertiser_name_2024_billed_booked,Hardcoded Logic|Anti-Pattern,"This metric hardcodes the calendar year to '2024' and duplicates common filtering logic (e.g., `NOT(financial_year IS NULL)`, `source_publishing_division != 'Medium Rare Content Agency'`, `revenue_transaction_status IN ('Billed', 'Booked')`) that is present across other metrics in this dashboard. This creates redundant metric definitions and makes the dashboard less flexible for analyzing different time periods without creating new metrics.","WHERE NOT(financial_year IS NULL) AND source_publishing_division != 'Medium Rare Content Agency' AND revenue_transaction_status IN ('Billed', 'Booked') AND calendar_year IN ('2024')","Consolidate common filtering logic into a base view or a parameterized Looker Studio data source. Replace hardcoded year ('2024') with a Looker Studio parameter, allowing users to dynamically select the year without requiring new metric definitions.",293,705edcb5-737a-4600-b1a7-11870177f97a
calendar_month_2025_programmatic_adpt,Hardcoded Logic|Anti-Pattern,"This metric hardcodes the calendar year to '2025' and includes specific hardcoded values for `revenue_type_level2`, `source_system_code`, and `revenue_group_subtype`. Similar to other metrics, it duplicates common filtering logic. The `SAFE_CAST(calendar_month AS FLOAT64)` for a month dimension is unusual; `INT64` would typically be more appropriate for numerical month values, potentially indicating a data type mismatch or an unnecessary cast.","WHERE NOT(financial_year IS NULL) AND source_publishing_division != 'Medium Rare Content Agency' AND revenue_transaction_status IN ('Billed', 'Booked') AND revenue_type_level2 = 'Programmatic' AND source_system_code = 'ADPT' AND revenue_group_subtype IN ('Programmatic Source', 'Digital') AND calendar_year IN ('2025') GROUP BY SAFE_CAST(calendar_month AS FLOAT64)","Parameterize the year, revenue type, source system, and revenue group subtype filters to create a more flexible 'Calendar Month' metric. Review the `SAFE_CAST(calendar_month AS FLOAT64)` to ensure it aligns with the intended data type and usage; `INT64` is generally preferred for month numbers.",293,705edcb5-737a-4600-b1a7-11870177f97a
advertiser_name_2025_billed_booked_specific_load_date,Hardcoded Logic|Anti-Pattern,"This metric hardcodes the financial year to '2025' and, critically, filters by a *very specific hardcoded `DATETIME`* (`2025-07-07T08:03:12`). This makes the metric static and unusable for any other data load instance, severely limiting the dashboard's utility for up-to-date reporting. It also duplicates common filtering logic.","WHERE NOT(financial_year IS NULL) AND source_publishing_division != 'Medium Rare Content Agency' AND revenue_transaction_status IN ('Billed', 'Booked') AND financial_year IN ('2025') AND DATETIME_TRUNC(data_load_datetime, SECOND) IN (DATETIME '2025-07-07T08:03:12')","Replace the hardcoded financial year with a parameter. The specific `data_load_datetime` filter should be replaced with a dynamic mechanism, such as filtering by the `MAX(data_load_datetime)` for the latest available data, or by allowing users to select a date range via a Looker Studio date parameter. This is crucial for ensuring the dashboard displays current information.",293,705edcb5-737a-4600-b1a7-11870177f97a
active_subscribers_postcode_2_prefix_consumer_subscriber_cs_20240630,Anti-Pattern: Hardcoded Logic & Repetition,"Multiple metrics (`active_subscribers_postcode_2_prefix`, `active_subscribers_postcode_3_prefix`, `active_subscribers_postcode_4_prefix`) are defined by simply changing a single hardcoded character in a `STARTS_WITH` clause. This creates redundant metrics, increases maintenance overhead, and limits the dashboard's flexibility to analyze other postcode prefixes or aggregate by postcode prefix dynamically.","SUM(CASE WHEN STARTS_WITH(SAFE_CAST(t0.subscriber_postcode AS STRING), '2') THEN t0.active_subscriber_count ELSE NULL END)","Refactor these into a single, parameterized metric. Introduce a dashboard parameter for 'Postcode Prefix' that users can select. Alternatively, if the data model allows, derive a `postcode_prefix` dimension in the `subscriber_base_agg` table or a view, and allow users to filter or group by this dimension. This would enable a single metric to serve all postcode prefix analyses.",294,781e9cc0-5786-4221-94f2-e8e5691588a5
total_active_subscribers_consumer_subscriber_cs_20240630,Hardcoded Logic: Static Dates,"All metrics explicitly hardcode the `report_date` (e.g., '2024-06-30' or '2025-03-03') and `dw_subscriber_start_datetime`. This makes the dashboard static and requires manual updates to each metric definition to view data for different periods, severely limiting its reusability and historical analysis capabilities.",t0.report_date = DATE '2024-06-30',"Implement dynamic date range parameters in Looker Studio. This allows users to select the desired reporting period (e.g., 'Last 30 days', 'This Month', custom range) without modifying the underlying metric SQL.",294,781e9cc0-5786-4221-94f2-e8e5691588a5
total_subscribers_raw_consumer_paying_subscriber_cs_20240630,Anti-Pattern: Inefficient String Matching,"The SQL uses `SAFE.REGEXP_CONTAINS` for exact string matches (e.g., 'CS', 'Y', 'Consumer'). While functional, `REGEXP_CONTAINS` is generally less efficient and less readable for exact matches compared to a direct equality operator (`=`).","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0_subscriber_details.masthead AS STRING), 'CS')","Replace `SAFE.REGEXP_CONTAINS` with a direct equality check (`=`) for exact string comparisons. For example, `SAFE_CAST(t0_subscriber_details.masthead AS STRING) = 'CS'`.",294,781e9cc0-5786-4221-94f2-e8e5691588a5
total_active_subscribers_consumer_subscriber_cs_20240630,Hardcoded Logic & Duplication: Filter Values,"Multiple metrics are defined with hardcoded combinations of `masthead`, `member_type`, `customer_type`, and `combined_is_paying_flag`. This leads to a proliferation of similar metrics (e.g., 'Total Active Subscribers' vs. 'Total Subscribers Raw' with different filter sets) instead of a single, flexible metric.",SAFE_CAST(t0_subscriber_details.masthead AS STRING) = 'CS' AND SAFE_CAST(t0.member_type AS STRING) = 'subscriber' AND SAFE_CAST(t0_subscriber_details.customer_type AS STRING) = 'Consumer',"Consolidate these into fewer, more flexible base metrics. Utilize Looker Studio controls (filters, parameters) to allow users to dynamically select `masthead`, `member_type`, `customer_type`, and `paying_flag` values, reducing the need for numerous hardcoded metric variations.",294,781e9cc0-5786-4221-94f2-e8e5691588a5
"unearned_revenue_gst_exclusive_total, unearned_revenue_gst_exclusive_record_count_by_dimensions, unearned_revenue_gst_exclusive_detailed_sum_rounded, record_count_by_masthead",Hardcoded Logic / Anti-Pattern,"All unearned revenue related metrics (Total Unearned Revenue, Record Count by Rate Plan, Detailed Unearned Revenue, Record Count by Masthead) embed hardcoded date ranges (e.g., '2025-06-09' to '2025-06-15', '2025-02-10' to '2025-02-16') directly within their SQL queries. This makes the dashboard static, unable to reflect current reporting periods or allow for dynamic historical analysis without manual modification of the underlying SQL for each metric. This is a severe limitation for a finance dashboard.","FROM `ncau-data-newsquery-sit.qvr_consumer.fin_unearned_revenue_Jun25`
      WHERE
        DATE '2025-06-09' BETWEEN allocation_start_date AND allocation_end_date OR (allocation_start_date BETWEEN DATE '2025-06-09' AND DATE '2025-06-15') OR (allocation_end_date BETWEEN DATE '2025-06-09' AND DATE '2025-06-15')","Implement Looker Studio date range parameters (e.g., `START_DATE`, `END_DATE`) to dynamically filter data based on user selection. For BigQuery, consider using scripting or parameterized queries if direct Looker Studio parameter integration is insufficient. This is the highest priority fix for dashboard usability.",295,be4575e4-3850-46e2-9ba9-73a4393c5d2a
"unearned_revenue_gst_exclusive_total, unearned_revenue_gst_exclusive_record_count_by_dimensions, unearned_revenue_gst_exclusive_detailed_sum_rounded, record_count_by_masthead",Anti-Pattern,"The core prorata calculation logic `(date_diff(week_prorata_allocation_end, week_prorata_allocation_start, day) + 1) / installment_allocation_days * payment_base_amount` and the GST exclusion ` / 1.1` are duplicated across all four unearned revenue metrics. This repetition increases maintenance overhead, introduces a higher risk of inconsistencies if the calculation logic needs to change, and makes the queries less readable.","((date_diff(week_prorata_allocation_end, week_prorata_allocation_start, day) + 1) / installment_allocation_days * payment_base_amount) / 1.1 AS should_be_allocated_to_revenue_gst_exclusive","Centralize this complex calculation. Create a BigQuery view that pre-calculates `should_be_allocated_to_revenue_gst_exclusive` and other derived fields. Alternatively, define a BigQuery User-Defined Function (UDF) for the prorata calculation to promote reusability and maintainability across queries.",295,be4575e4-3850-46e2-9ba9-73a4393c5d2a
"unearned_revenue_gst_exclusive_record_count_by_dimensions, total_payment_base_amount_latest_attempt",Hardcoded Logic / Anti-Pattern,"Specific business filters and rules are hardcoded within the SQL. For example, `rate_plan_code IN ('TA_PB_WKNCON19M12')` in one metric and complex `WHERE` clauses like `offer_category_group_name = 'Contract' AND lower(offer_category_name) NOT LIKE '%upfront%'` in another. This limits the flexibility of the dashboard, as these filters cannot be easily changed or explored by users, and any change in business definition requires SQL modification.","WHERE
  t0.week_prorata_allocation_start = DATE '2025-02-10'
  AND t0.week_prorata_allocation_end = DATE '2025-02-16'
  AND t0.should_be_allocated_to_revenue_gst_exclusive > 0.000000
  AND t0.rate_plan_code IN ('TA_PB_WKNCON19M12')","Where appropriate, expose these filters as Looker Studio controls (e.g., dropdowns, text input fields) to allow users to dynamically adjust the scope of the data. For static business rules, consider defining them in a dedicated configuration table or view that can be joined, rather than hardcoding them in multiple queries.",295,be4575e4-3850-46e2-9ba9-73a4393c5d2a
"unearned_revenue_gst_exclusive_total, unearned_revenue_gst_exclusive_record_count_by_dimensions, unearned_revenue_gst_exclusive_detailed_sum_rounded, record_count_by_masthead",Data Mismatch / Potential Inconsistency,"The unearned revenue metrics pull from different underlying tables: `fin_unearned_revenue_Jun25`, `fin_unearned_revenue_mar25`, and `fin_unearned_revenue_recurring`. While the dashboard is marked as '(dev)', this inconsistency in data sources for related metrics could lead to discrepancies in reporting if these tables represent different snapshots or versions of the data without a clear, unified source.",FROM `ncau-data-newsquery-sit.qvr_consumer.fin_unearned_revenue_Jun25`,"Consolidate the unearned revenue data into a single, canonical BigQuery table or view that is regularly updated and versioned. Implement a clear data governance strategy for how time-sensitive financial snapshots are managed and accessed to ensure consistent reporting.",295,be4575e4-3850-46e2-9ba9-73a4393c5d2a
total_acquisitions,Anti-Pattern / Hardcoded Logic,"A comprehensive and identical `WHERE` clause, defining the core 'acquisition' filters (e.g., mastheads, subscription types, exclusions like corporate/B2B, print, university, metered access, and FY24 date range), is duplicated across all 20 acquisition-related metrics. This repetition makes maintenance cumbersome and error-prone; any change to the base acquisition definition requires updating 20 separate SQL queries.","WHERE masthead IN ('AA', 'CM', 'DT', 'HS') AND (subscription_movement_count_sub_type = 'acquisition' OR subscription_movement_count_sub_type = 'reactivation_30day_acquisition' OR subscription_movement_count_sub_type = 'switch_acquisition') AND is_corporate_b2b_flag = 'N' AND delivery_medium_type != 'Print' AND subscription_tenure_start_datetime >= DATE(""2023-07-03"") AND classification_level_2 != 'University Digital' AND classification_level_2 != 'Metered Access' AND fy_year = 2024","Create a consolidated base view (e.g., `v_fy24_base_acquisitions`) in BigQuery that encapsulates this common filtering logic. All acquisition metrics should then query this base view, simplifying their SQL and centralizing the definition of an 'FY24 acquisition'. Alternatively, if using a semantic layer like LookML, define these as core filters on the base explore.",296,cdf7be2f-dfa9-481b-9f1b-21e4941bb103
acq_bau_always_on_digital_count,Hardcoded Logic / Anti-Pattern,"Numerous metrics rely on hardcoded `CASE WHEN` statements or explicit `IN`/`NOT IN` lists to categorize and count acquisitions or subscriptions based on fields like `sold_in_channel`, `sold_in_source_channel`, `source_system_name`, and `campaign_type`. The `acq_other_channel_count` and `acq_other_bau_count` metrics are particularly problematic, listing many specific values to exclude. This approach is brittle; any new channel, source, or system requires manual updates to multiple metric definitions, leading to potential inconsistencies and high maintenance overhead.","COUNT(CASE WHEN sold_in_channel = 'Bau Always On Digital' AND offer_category_group_name != 'Non Consumer Offer' THEN 1 END) ... OR ... sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Creative', 'Reddit - Content Amplification', 'Not Available', 'Twitter - Creative')","Implement a dedicated dimension table (e.g., `dim_channel_source_category`) that maps raw `sold_in_channel`, `sold_in_source_channel`, `source_system_name`, and `campaign_type` values to their respective business categories. Metrics can then join to this dimension table and filter/group by the category, making the logic dynamic and easily extensible without modifying individual metric SQL.",296,cdf7be2f-dfa9-481b-9f1b-21e4941bb103
total_acquisitions,Data Mismatch / Inconsistent Data Type,"The `fy_year` column is filtered inconsistently across different data sources. In acquisition metrics (from `v_subscription_movement`), `fy_year` is filtered as an integer (`fy_year = 2024`). In campaign performance metrics (from `campaign_performance_consol`), it's filtered as a string (`fy_year = 'FY24'`). While BigQuery might implicitly cast, this inconsistency can lead to unexpected query behavior, performance issues, or errors if underlying data types change or strict type checking is enforced.",fy_year = 2024 (in acquisition metrics) vs. fy_year = 'FY24' (in campaign performance metrics),"Standardize the data type and format for `fy_year` across all relevant tables and metrics. Ideally, `fy_year` should be stored as an integer or derived from a date column to ensure consistent and robust filtering.",296,cdf7be2f-dfa9-481b-9f1b-21e4941bb103
"total_performance_media_acquisitions, total_premium_breach_acquisitions, total_marketing_acquisitions, total_third_party_offer_acquisitions, total_other_acquisitions",Anti-Pattern,"Multiple acquisition metrics share identical, hardcoded `WHERE` clauses for `masthead`, `fy_year`, `classification_level_2`, `offer_category_name`, `classification_level_1`, and `report_date` range. This repetition makes updates cumbersome and error-prone.","WHERE masthead IN ('HS', 'AA', 'CM', 'TC', 'DT', 'GC', 'TB', 'TM', 'CP', 'NT', 'GA', 'WT') AND fy_year IN (2024, 2025, 2026) AND classification_level_2 IN ('Bundles', 'Digital', 'DPE Only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'App Subscribers', 'Press Reader') AND offer_category_name != 'Non Consumer Offer' AND classification_level_1 LIKE '%Paid%' AND report_date >= DATE '2025-07-07' AND report_date <= DATE '2025-07-13'","Create a base view or a common parameterized query for `subscription_base_movement_agg_snap` that encapsulates these standard filters, allowing metrics to build upon a consistent and maintainable foundation. Consider using dynamic date parameters instead of hardcoded dates.",297,b815ae9f-506c-40f8-b23d-8c42d6ebe90a
"total_campaign_subscriptions, total_impressions",Anti-Pattern,"Campaign-related metrics share identical, hardcoded `WHERE` clauses for `masthead_code`, `campaign_name` pattern, `fy_year_number_name`, `report_date`, `impression_count`, `ad_name`, `funnel_code`, and `fy_week_of_year`. This is a duplication of filtering logic.","WHERE masthead_code IN ('WT', 'HS', 'AA', 'DT', 'CP', 'CM', 'NT', 'GC', 'TC', 'TM', 'GA', 'TB', 'LEADER', 'NEWSLOCAL', 'MESSENGER', 'QUEST') AND campaign_name LIKE 'AOD%' AND fy_year_number_name = 'FY 2025' AND report_date >= '2024-07-01' AND impression_count > 0 AND ad_name != 'Not Available' AND funnel_code IN ('UF', 'MF') AND fy_week_of_year = 41","Implement a base view or a common parameterized query for `campaign_performance_fct` to centralize these filters, improving consistency and reducing maintenance overhead. Use dynamic date/fiscal year parameters.",297,b815ae9f-506c-40f8-b23d-8c42d6ebe90a
"unique_subscribers_by_article_social, unique_subscribers_by_fiscal_week",Anti-Pattern,"Subscriber metrics share identical, hardcoded `WHERE` clauses for `SubscriptionDateTime` and `Website`. This indicates a pattern of repeated filtering.","WHERE DATE(SubscriptionDateTime) >= DATE('2024-07-01') AND Website IN ('Courier Mail', 'Daily Telegraph', 'Advertiser', 'Cairns Post', 'Herald Sun', 'Townsville Bulletin', 'Gold Coast Bulletin', 'Geelong Advertiser', 'NT News', 'Mercury', 'The Chronicle', 'The Weekly Times')",Create a base view or a common parameterized query for `t_subscription_details_snapshot_summary` to enforce consistent filtering for subscriber data. Use dynamic date parameters.,297,b815ae9f-506c-40f8-b23d-8c42d6ebe90a
"product_group_dimension, campaign_code_dimension, campaign_source_category, article_section_dimension, subscription_source_type",Hardcoded Logic,"These calculated fields rely on extensive, nested `CASE` statements to categorize data based on string matching (e.g., `LIKE`, `IN`). This approach is highly prone to errors, difficult to scale with new categories, and lacks centralized governance. The `LIMIT 1` clause in these calculated fields is also problematic, as it will restrict the field to a single arbitrary value, rendering it unusable for proper aggregation or grouping in a dashboard.",SELECT CASE WHEN(campaign_name LIKE '%Professional Women%') OR adgroup_name LIKE '%ProfessionalWomen%' OR adgroup_name LIKE '%Professional Women%' THEN 'Professional Women' ... ELSE 'Other' END AS Code FROM `ncau-data-newsquery-prd.prstn_consumer.campaign_performance_fct` LIMIT 1,"Replace these `CASE` statements with joins to dedicated, governed lookup tables (e.g., `dim_product_group`, `dim_campaign_category`, `dim_source_system`, `dim_article_section`). These lookup tables should contain the mapping logic and be maintained centrally. Remove `LIMIT 1` from all calculated fields; Looker Studio handles the aggregation and grouping based on how the field is used in the visualization.",297,b815ae9f-506c-40f8-b23d-8c42d6ebe90a
total_other_acquisitions,Anti-Pattern,"The metric defines 'Other' acquisitions using a `NOT IN` clause that explicitly lists all known channels. This approach is fragile; any new channel not explicitly added to the `NOT IN` list will automatically fall into 'Other', potentially masking new business initiatives or data quality issues without explicit awareness.","SELECT SUM(CASE WHEN sold_in_channel NOT IN ('Performance Media', 'Bau Always On Digital', 'Premium Breach', 'Marketing', 'Bau General Offer', 'Not Available') THEN acquisition_count ELSE 0 END)","Implement a governed dimension table for `sold_in_channel` that includes all valid channel values and a designated 'Other' category. This allows for explicit categorization and better data quality monitoring. Alternatively, if 'Other' is truly a catch-all, ensure processes are in place to regularly review its composition.",297,b815ae9f-506c-40f8-b23d-8c42d6ebe90a
unique_subscribers_by_fiscal_week,Anti-Pattern,"This metric includes a complex, hardcoded `CASE` statement to derive `ArticleDominantSection` and then explicitly excludes a long list of sections using a `NOT IN` clause. This is a highly inefficient and unmaintainable way to filter data, especially since `article_section_dimension` already exists.","AND (CASE WHEN ArticleDominantSection1 LIKE '%education%' OR ArticleDominantSection2 LIKE '%education%' ... ELSE ArticleDominantSection1 END) NOT IN ('news', 'state', 'crime', 'sport', 'education', 'lifestyle', 'business', 'entertainment', 'property & real estate', 'health', 'agribusiness')","Leverage the existing `article_section_dimension` calculated field. If specific exclusions are required, apply them as a filter on the `article_section_dimension` in the Looker Studio chart or report level, rather than re-implementing the complex logic within the metric's SQL.",297,b815ae9f-506c-40f8-b23d-8c42d6ebe90a
All metrics,Hardcoded Logic,"All metrics utilize a hardcoded date filter (`contentpublisheddate BETWEEN '2025-07-01' AND CURRENT_DATE()`) within the `capi_data` CTE. This filter uses a future start date, which will prevent the dashboard from displaying any current or historical data, making it non-functional for its intended purpose. This critical issue directly contradicts the AI summary's '0 governance issues' report.",WHERE SAFE_CAST(contentpublisheddate AS DATE) BETWEEN '2025-07-01' AND CURRENT_DATE(),"Immediately correct the date filter to reflect the intended historical period (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)` for recent data, or a parameter-driven date range for user flexibility). Ensure date filters are dynamic or configurable for dashboards to avoid such issues.",298,5e816a83-a077-4fdb-9b1f-bdaf0d527a62
All metrics,Anti-Pattern,"The `capi_data` and `artie_and_capi` CTEs are identical and repeated verbatim across all five metrics. This leads to redundant query execution, increased maintenance overhead (as changes to the base data logic must be applied to five separate queries), and potential for inconsistencies if updates are missed. This pattern suggests a lack of data model consolidation at the source level for Looker Studio.","WITH
  capi_data AS (
    SELECT DISTINCT
      content_id,
      content_canonical_url,
      content_type,
      content_subtype,
      content_status,
      contentpublisheddate,
      contentupdateddate,
      contentcreateddate,
      contentdefaultheadline,
      contentrightssource,
      content_seoTitle,
      ContentSeoOwner,
      source_ref_id,
      source_ref_parentid,
      ContentDominantSection1,
      ContentDominantSection2,
      ContentDominantSection3,
      ContentChannel,
      ContentDominantSection,
      ContentDominantDomain,
      PublicationGroup,
      MastheadCategory
    FROM
      `ncau-data-newsquery-prd.bdm_verity.content_dim`
    WHERE
      SAFE_CAST(contentpublisheddate AS DATE) BETWEEN '2025-07-01' AND CURRENT_DATE()
  ),
  artie_and_capi AS (
    SELECT
      art.*,
      cap.* -- Includes contentpublisheddate from cap
    FROM
      `ncau-data-newsquery-sit`.sdm_hq_uat.nca_analytics AS art
      FULL JOIN
      capi_data AS cap
      ON art.internal_id = cap.source_ref_parentid
    WHERE
      1 = 1
  )","Create a centralized base view or a pre-computed table in BigQuery that encapsulates the `artie_and_capi` joined dataset. This single source can then be used by all metrics in Looker Studio, centralizing data preparation logic, improving query performance, and simplifying maintenance. Alternatively, if using Looker Studio's data blending, define this common join once as a blended data source.",298,5e816a83-a077-4fdb-9b1f-bdaf0d527a62
All metrics,Hardcoded Logic,"Metric definitions rely on hardcoded lists of `event_type` strings (e.g., `('accepted', 'applied', 'copy')`) within `IF` or `CASE` statements. While functional, this approach makes the metrics less flexible and harder to maintain if new event types are introduced or existing ones are reclassified. It also embeds business logic directly into the SQL, making it less discoverable and reusable.","LOWER(event_type) IN ('accepted', 'applied', 'copy')","Consider creating a lookup table for `event_type` classifications (e.g., `event_type_category`) in BigQuery, or defining these classifications as Looker Studio parameters/fields. This would centralize the business logic, make it easier to update or extend the definitions without modifying multiple SQL queries, and improve data governance.",298,5e816a83-a077-4fdb-9b1f-bdaf0d527a62
sundry_pubs_category_dimension,Hardcoded Logic|Anti-Pattern,"The 'Publication Category (Sundry/Non-Sundry)' dimension uses a hardcoded list of 38 `unified_publication_name` values within a `CASE WHEN IN (...)` statement. This approach is brittle and difficult to maintain. Any change to the definition of 'Sundry Pubs' requires direct modification of the SQL, increasing the risk of errors and making governance challenging. The `LIMIT 100` in the provided SQL snippet for a dimension definition is also unusual and could imply an incomplete or sampled definition if this is the literal query used for the dimension.","SELECT CASE WHEN (unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin')) THEN 'Sundry Pubs' ELSE 'Non Sundry Pubs' END AS publication_category FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` LIMIT 100;","Replace the hardcoded `CASE WHEN IN` statement with a join to a governed lookup table (e.g., `dim_publication_category`) that contains `unified_publication_name` and its corresponding `publication_category`. This centralizes business logic, improves maintainability, and ensures consistency across dashboards. Investigate the purpose of `LIMIT 100` in the dimension's SQL definition; if it's literally applied, it could lead to partial or incorrect categorization.",299,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
total_subscription_targets_by_fy,Hardcoded Logic,"The SQL logic for the 'Total Subscription Targets by Financial Year' metric is hardcoded to a specific, narrow date range (January 2025). This severely restricts the dashboard's ability to display current or historical data dynamically, making it static and requiring manual updates for each new period. This anti-pattern is particularly concerning given the `structure_sql` indicates data availability across multiple years (2020-2026), meaning the metric's current definition only utilizes a tiny fraction of the available and relevant data.","WHERE
    PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-01-01'
    AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-01-31'","Replace the hardcoded `WHERE` clause with dynamic date parameters (e.g., Looker Studio date controls, relative date functions like `CURRENT_DATE()`, or a date dimension table) to allow users to select desired date ranges, thereby enhancing the dashboard's flexibility, reusability, and long-term value.",300,0823e425-5885-4fd6-b89e-5c9508f3cf1d
"All metrics (e.g., total_gross_revenue_by_cost_model_fy25_26_q1_kelly, total_gross_revenue_by_mapped_industry_pillar_fy25_26, etc.)",Anti-Pattern / Hardcoded Logic,"The common `base_adsales_revenue` CTE, used by all metrics, contains extensive and repeated `STRPOS` and `NOT IN` clauses for excluding specific `unified_publication_name` and `publication_name` values. This hardcoded and verbose exclusion logic is difficult to read, maintain, and update consistently across the dashboard if exclusion criteria change or expand.","AND (
      STRPOS(unified_publication_name, 'ADMIN') <= 0 OR STRPOS(unified_publication_name, 'admin') <= 0 OR STRPOS(unified_publication_name, 'Run') <= 0 OR STRPOS(unified_publication_name, 'Taboola') <= 0 OR STRPOS(unified_publication_name, 'CODE') <= 0 OR STRPOS(unified_publication_name, 'CodeBet') <= 0 OR STRPOS(unified_publication_name, 'Punters.com.au') <= 0 OR STRPOS(unified_publication_name, 'odds.com.au') <= 0 OR STRPOS(unified_publication_name, 'RACENET') <= 0 OR STRPOS(unified_publication_name, 'Racenet App') <= 0 OR STRPOS(unified_publication_name, 'SUDDENLY') <= 0 OR STRPOS(unified_publication_name, 'SUPERCOACH') <= 0 OR STRPOS(unified_publication_name, 'Sky News') <= 0 OR STRPOS(unified_publication_name, 'Stockhead') <= 0
    )
    AND source_system_code NOT IN ('LGBPUB')
    AND publication_name NOT IN ('racenet.com.au', 'punters.com.au', 'odds.com.au', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'TASTE.ADMIN', 'TAUS.ADMIN', 'Stockhead', 'SkyNews', 'SKYNEWS', 'RACENET', 'NEWS.ADMIN', 'KIDSPOT.ADMIN', 'GQ.ADMIN', 'ESCAPE.ADMIN', 'DELICIOUS.ADMIN', 'BODYANDSOUL.ADMIN', 'ADMIN.TCM', 'ADMIN.SALES', 'ADMIN.DTM', 'ADMIN.HWT')","Centralize these exclusion lists. Consider creating a dedicated lookup table (e.g., `dim_excluded_publications`) that can be joined to the base data, or a common dimension view that pre-filters these out. This would significantly simplify the base CTE and improve maintainability.",301,703f95f0-c89e-43cb-b26f-f479b7065be
total_gross_revenue_by_mapped_industry_pillar_fy25_26,Hardcoded Logic / Anti-Pattern,"This metric uses a very long and detailed `CASE` statement to map `nca_industry_pillar` values to simplified categories. This mapping logic is hardcoded directly into the SQL, making it inflexible and prone to errors if industry pillar definitions change or new categories are introduced. It also increases query complexity and reduces readability.","CASE
    WHEN (SAFE_CAST(nca_industry_pillar AS STRING) = 'Agriculture, Forestry & Fishing') THEN 'Agriculture'
    WHEN (SAFE_CAST(nca_industry_pillar AS STRING) = 'Arts, Entertainment & Recreation') THEN 'Entertainment'
    WHEN (SAFE_CAST(nca_industry_pillar AS STRING) = 'Beauty, Fashion & Personal Care') THEN 'Beauty/Fashion'
    -- ... many more WHEN clauses
    ELSE SAFE_CAST(nca_industry_pillar AS STRING)
  END AS mapped_industry_pillar","Implement a dedicated lookup table (e.g., `dim_industry_pillar_mapping`) that stores the `nca_industry_pillar` and its corresponding `mapped_industry_pillar`. This table can then be joined to the `base_adsales_revenue` CTE, centralizing the mapping logic and making it easily maintainable without modifying SQL.",301,703f95f0-c89e-43cb-b26f-f479b7065be
"total_gross_revenue_fy25_by_video_ad_type, total_gross_revenue_fy26_by_video_ad_type",Hardcoded Logic / Anti-Pattern / Redundancy,"These two metrics contain an extremely verbose and complex `CASE` statement to categorize `adsize_name` into various video ad types. This exact `CASE` statement is duplicated across both metrics and, critically, is also redundantly repeated in the `WHERE` clause of each metric. This is a severe anti-pattern, leading to highly inefficient, unreadable, and unmaintainable code. Any change to ad size mapping requires updates in multiple places within multiple metrics.","CASE
    WHEN (STRPOS(adsize_name, 'Adaptive Video') > 0) THEN 'Adaptive'
    WHEN (STRPOS(adsize_name, 'adaptive video') > 0) THEN 'Adaptive'
    WHEN (adsize_name = 'video view cpcv 30 sec' OR adsize_name = 'video view cpcv 15 sec' OR adsize_name = 'video view cpcv 6 sec' OR adsize_name = 'video reach 6 / 15 sec') THEN 'Blended'
    -- ... many, many more WHEN clauses
    ELSE SAFE_CAST(adsize_name AS STRING)
  END AS mapped_video_ad_type,
  -- ...
FROM base_adsales_revenue
WHERE
  CASE
    WHEN (STRPOS(adsize_name, 'Adaptive Video') > 0) THEN 'Adaptive'
    -- ... exact same CASE statement repeated
  END IN ('Pre-Roll', 'Blended', 'Social Video', 'In-Article', 'Outstream', 'Adaptive', 'Vertical', 'Total Video Content', 'Shoppable', 'External Talent Fee', 'Not Available')","This is a critical area for refactoring. Create a `dim_video_ad_type_mapping` lookup table that maps `adsize_name` to `mapped_video_ad_type`. This lookup table should then be joined to the `base_adsales_revenue` CTE (or a subsequent view) to create a `mapped_video_ad_type` column. The individual metrics can then simply `GROUP BY mapped_video_ad_type` and filter on this column, eliminating the massive, duplicated `CASE` statement and its redundant repetition. This would drastically improve readability, maintainability, and query performance.",301,703f95f0-c89e-43cb-b26f-f479b7065be
total_gross_revenue_fy26_filtered_pubs,Hardcoded Logic / Anti-Pattern,"This metric includes an additional hardcoded `NOT IN` clause for `unified_publication_name` specific to its business requirement. While functional, if similar exclusion lists are used elsewhere or are subject to frequent changes, hardcoding them in individual metric SQL makes management cumbersome and increases the risk of inconsistencies.","WHERE
  (unified_publication_name NOT IN ('News', 'TUBI', 'TAUS', 'Offnet', 'Vogue') OR unified_publication_name IS NULL)","If this specific exclusion list is stable and unique to this metric, it may be acceptable. However, if similar lists are used across other metrics or are dynamic, consider centralizing these exclusions in a small lookup table or a common dimension that flags publications for exclusion based on different business rules.",301,703f95f0-c89e-43cb-b26f-f479b7065be
total_subscriber_movements_by_date_referrer_metro_regional,Anti-Pattern,"This metric, along with others, uses hardcoded date ranges (e.g., '2025-06-03' to '2025-06-30') and specific date lists in its WHERE clause. This makes the dashboard static, requiring manual updates to view current or historical data, and severely limits its utility for ongoing performance monitoring.","t0.subscriber_movement_date >= DATE '2025-06-03'
    AND t0.subscriber_movement_date <= DATE '2025-06-30'
    AND SAFE_CAST(DATETIME_TRUNC(t0.subscriber_movement_datetime, SECOND) AS DATE) IN (DATE '2025-06-03', ... , DATE '2025-06-29')","Replace hardcoded dates with dynamic date parameters provided by Looker Studio (e.g., `START_DATE()`, `END_DATE()`) or BigQuery's date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to enable flexible date range selection by users or display rolling periods.",302,4d5e906e-84b0-4825-ad1f-ebaf86acd462
total_subscriber_movements_by_classification_level_2,Anti-Pattern,"This metric also uses a hardcoded date range, similar to the 'Metro & Regional' metric, limiting its dynamic reporting capabilities.","t0.subscriber_movement_date >= DATE '2025-04-04'
    AND t0.subscriber_movement_date <= DATE '2025-05-01'",Implement dynamic date filtering using Looker Studio parameters or BigQuery date functions to allow for flexible analysis periods.,302,4d5e906e-84b0-4825-ad1f-ebaf86acd462
total_subscriber_movements_single_day,Anti-Pattern,"This metric is hardcoded to a single specific date, making it completely static and requiring manual updates for any change in the analysis day.","t0c1d0.subscriber_movement_date >= DATE '2025-05-04'
    AND t0c1d0.subscriber_movement_date <= DATE '2025-05-04'","Utilize a Looker Studio date parameter to allow users to select a specific day, or use `CURRENT_DATE()` to always show the most recent full day's data.",302,4d5e906e-84b0-4825-ad1f-ebaf86acd462
total_subscriber_movements_by_date_referrer_metro_regional,Hardcoded Logic,"The SQL contains a complex `CASE` statement with `REGEXP_CONTAINS` to classify mastheads. This logic is embedded directly in the query, making it difficult to maintain, prone to errors if masthead naming conventions change, and not easily reusable across other metrics or dashboards. It also duplicates business logic that should ideally be managed centrally.","(CASE WHEN (SAFE.REGEXP_CONTAINS(t0_subscription_details.masthead, 'TA')) THEN 'The Australian' WHEN (SAFE.REGEXP_CONTAINS(t0_subscription_details.masthead, 'CM|DT|HS|AA|GA|CP|TB|NT|TM|TC|WT|GC')) THEN 'Metro & Regional' WHEN (SAFE.REGEXP_CONTAINS(t0_subscription_details.masthead, 'CS|SC')) THEN 'Code and Supercoach' ELSE t0_subscription_details.masthead END)","Create a dedicated lookup table (e.g., `masthead_classification_lkp`) that maps raw `masthead` values to their respective business categories. Join this lookup table in the SQL query to centralize and simplify the classification logic, improving maintainability and consistency.",302,4d5e906e-84b0-4825-ad1f-ebaf86acd462
total_subscriber_movements_by_date_referrer_metro_regional,Hardcoded Logic,"The metric filters `sold_in_source_referrer` using a hardcoded `IN` list. This approach is inflexible; if new referrers emerge or existing ones are reclassified, the SQL query must be manually updated, leading to potential data omissions or inconsistencies.","t0_subscription_details.sold_in_source_referrer IN ('Not Available', 'Facebook', 'Google AMP', 'Google', 'Newsletter', 'Twitter', 'News.com.au', 'LinkedIn', 'Reddit')","If the list of valid referrers is dynamic or managed externally, consider creating a lookup table for `sold_in_source_referrer` values. Alternatively, if the intent is to exclude specific referrers, ensure the list is comprehensive and regularly reviewed. For a dashboard, it's often better to allow users to filter or display all values rather than hardcoding a subset.",302,4d5e906e-84b0-4825-ad1f-ebaf86acd462
failed_payment_volume_supercoach_plus,Anti-Pattern,"Numerous financial metrics (e.g., 'No Time Volume', 'Failed Payment Volume', 'Total Revenue', 'Total Cancels') are hardcoded with `WHERE masthead = 'SC'`. This pattern is repeated across 28 out of 36 metrics. While currently focused on 'SuperCoach Plus', this approach lacks scalability and flexibility. If the dashboard needs to expand to other mastheads or allow user-driven filtering, each metric would require duplication or manual modification, leading to maintenance burden and potential inconsistencies. This also limits the 'consolidation score' of the dashboard.",WHERE masthead = 'SC',"Introduce a dashboard-level filter or parameter for 'masthead' to allow dynamic selection. Alternatively, if 'SuperCoach Plus' is the sole focus, consider creating a dedicated view or data source that pre-filters for 'SC' to simplify metric definitions and centralize the logic.",303,61cc5171-703d-44b5-acd7-e9db7cf81778
calculated_week_difference,Hardcoded Logic|Anti-Pattern,"This calculated field, and several others (`current_fy_week_match_2025`, `fy_week_comparison_flag`, `current_fy_week_match_2024`, `weekly_date_range_flag`), rely on hardcoded timestamps (`TIMESTAMP('2025-07-08 05:29:00.926550+00')`) and fixed fiscal years (`2024`, `2025`). This makes the dashboard's date logic static and prone to breaking or displaying incorrect data as time progresses. The complex `DATETIME_DIFF` and `EXTRACT(DAYOFWEEK)` logic, combined with nested `SELECT ... LIMIT 1` subqueries from `calendar_dim`, is highly inefficient and brittle for dynamic date calculations in a BI tool.","SELECT (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP('2025-07-08 05:29:00.926550+00')) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(TIMESTAMP('2025-07-08 05:29:00.926550+00') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(TIMESTAMP('2025-07-08 05:29:00.926550+00') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) AS calculated_week_difference FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` LIMIT 1","Refactor date calculations to leverage Looker Studio's native date range controls and parameters (e.g., `TODAY()`, `CURRENT_DATE()`). If a custom fiscal calendar is required, pre-calculate fiscal year, week, and dynamic flags (e.g., `is_current_fy_week`, `is_last_5_weeks`) directly within the `calendar_dim` table or a dedicated BigQuery view, using dynamic SQL functions. Avoid hardcoding dates and years in Looker Studio calculated fields, and eliminate `SELECT ... LIMIT 1` subqueries for dimensions.",303,61cc5171-703d-44b5-acd7-e9db7cf81778
iso_week_start_date,Anti-Pattern,"The `iso_week_start_date` dimension also includes a `LIMIT 1` clause. While this specific metric might not cause immediate issues if it's only used for display, it's an anti-pattern for a dimension. Dimensions should typically return values for all relevant rows, not just a single arbitrary one. This indicates a potential misunderstanding of how dimensions are processed or an attempt to force a single value where a join or parameter might be more appropriate.","SELECT SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(calendar_date AS DATETIME), ISOWEEK) AS DATE) AS iso_week_start_date FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` LIMIT 1","Remove `LIMIT 1` from dimension definitions. Ensure dimensions are designed to return a value for each row in the underlying data source. If a single, specific date is needed, it should be derived from a parameter or a separate, dedicated query, not by limiting a dimension.",303,61cc5171-703d-44b5-acd7-e9db7cf81778
total_circulation_value_fy2025_type01,Hardcoded Logic,"The metric hardcodes the fiscal year to '2025' and the revenue type prefix to '01'. While functional, this requires manual updates for each new fiscal year or change in revenue type focus, increasing maintenance overhead and risk of error.","WHERE FLOOR(SAFE_DIVIDE(t0.fy_year_week_number, 100)) = 2025 AND SAFE.LEFT(t0.revenue_type, 2) = '01'","Parameterize the fiscal year (e.g., using a Looker Studio control or a dynamic date function) and the revenue type prefix. Consider a lookup table for revenue type categories if '01', '02', etc., represent distinct business classifications.",304,c32d96e5-38f4-48a8-9b70-3d89a83f03aa
total_circulation_value_type02_specific_weeks,Anti-Pattern,"This metric exhibits a significant anti-pattern by hardcoding a long, specific list of fiscal year weeks (27 weeks) and exact revenue type names (6 types) directly within the SQL query. This approach is extremely brittle, difficult to maintain, and prone to errors. Any change to the reporting period or specific revenue types requires direct SQL modification.","WHERE SAFE.LEFT(t0.revenue_type, 2) = '02' AND t0.fy_year_week_number IN (202511, 202512, 202513, 202514, 202515, 202516, 202517, 202518, 202519, 202520, 202521, 202522, 202523, 202524, 202525, 202526, 202527, 202528, 202529, 202530, 202531, 202532, 202533, 202534, 202535, 202536, 202537) AND t0.revenue_type IN ('02 - snapshot - DTI Charges & Volume', '02 - snapshot - THINK - print subs revenue', '02 - snapshot - RCTI Charges & Volume', '02 - snapshot - RCTI - rev rec charge', '02 - snapshot - DTI - rev rec charge', '02 - snapshot - DTI - unmigrated print subs revenue')","Implement dynamic filtering for fiscal year weeks (e.g., using date range parameters or a fiscal calendar dimension table) and manage specific revenue types via a governed lookup table or a multi-select parameter in Looker Studio. This would centralize configuration and improve maintainability significantly.",304,c32d96e5-38f4-48a8-9b70-3d89a83f03aa
total_circulation_value_type02_all_weeks,Hardcoded Logic,"Similar to the first metric, this one hardcodes the revenue type prefix to '02'. This limits flexibility and requires SQL modification for any changes in the targeted revenue type prefix.","WHERE SAFE.LEFT(t0.revenue_type, 2) = '02'",Parameterize the revenue type prefix to allow for dynamic selection or use a lookup table for revenue type categories.,304,c32d96e5-38f4-48a8-9b70-3d89a83f03aa
total_health_registrations_wide_range,Hardcoded Logic,"Both 'Total Health Registrations (Wide Date Range)' and 'Health Registrations by Source, Article, and Date (Weekly)' metrics hardcode the `Website` filter to 'The Australian' and the topic filter to 'Health' (using `REGEXP_CONTAINS` or direct string match). This limits the reusability of these metrics for other publications or topics and requires SQL modification for any changes, indicating a lack of parameterization or a generalized data model.","t0.Website = 'The Australian'
    AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'Health|health') OR t0.ArticleDominantSection1 = 'health')",Introduce parameters for 'Website' and 'Topic' in the Looker Studio dashboard to allow dynamic filtering. Consider creating a more generalized base metric or view that exposes these dimensions for flexible analysis across different publications and topics without modifying the underlying SQL.,305,4d991729-7225-4b31-bb6c-1f06ceceeb9a
health_registrations_by_source_article_weekly,Anti-Pattern,"The `social_referrer_grouped` field is derived using a complex `CASE` statement with hardcoded `REGEXP_CONTAINS` checks on `SubscriptionSourceCode` values (e.g., '_INS' for Instagram). This approach embeds business logic directly into the SQL, making it difficult to maintain, prone to errors if new source codes emerge, and lacking a centralized source of truth for these mappings.","CASE
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_INS')) THEN 'Instagram'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_BIN')) THEN 'Bing'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_PIN')) THEN 'Pinterest'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_TWT')) THEN 'X / Twitter'
        WHEN (SAFE.REGEXP_CONTAINS(t0.SubscriptionSourceCode, '_GSC')) THEN 'Google Showcase'
        ELSE t0.SocialReferrer
    END AS social_referrer_grouped","Create a dedicated lookup table (e.g., `dim_subscription_source_codes`) that maps `SubscriptionSourceCode` to its corresponding `SocialReferrer` group. Join this lookup table to the `t_registration_details_snapshot_summary` table to derive `social_referrer_grouped`. This centralizes business logic, improves data governance, and simplifies SQL queries.",305,4d991729-7225-4b31-bb6c-1f06ceceeb9a
health_registrations_by_source_article_weekly,Anti-Pattern,"The `article_display_string` field is constructed using a verbose and complex `CONCAT` function that includes conditional emoji appending based on `REGEXP_CONTAINS` checks for image/video links. While functional, this logic is presentation-layer specific and makes the SQL harder to read, debug, and maintain. It also mixes data retrieval with display formatting concerns.","CONCAT(
        CONCAT(
            SAFE_CAST(t0.ArticleHeadlineDefault AS STRING),
            ' ',
            CASE WHEN (SAFE.REGEXP_CONTAINS(t0.ArticleCanonicalLink, '^(.*(image-gallery).*)$')) THEN ' \ud83d\udcf7' ELSE '' END,
            CASE WHEN (SAFE.REGEXP_CONTAINS(t0.ArticleLink, '^(.*(/video/).*)$')) THEN ' \ud83c\udfa5' ELSE '' END
        ),
        '\u00a0\u00a0',
        CONCAT('https://verity.news.net.au/articles/', SAFE_CAST(t0.ArticleID AS STRING))
    ) AS article_display_string","Consider pushing this presentation-layer formatting logic upstream into a data transformation layer (e.g., a dbt model or a BigQuery view) if `article_display_string` is a commonly used derived attribute. Alternatively, if specific to this dashboard, encapsulate the logic in a UDF for readability or explore if Looker Studio's visualization layer can handle such formatting based on simpler flags (e.g., `is_image_gallery`, `is_video`).",305,4d991729-7225-4b31-bb6c-1f06ceceeb9a
all_metrics,Hardcoded Logic,"All metrics within this dashboard hardcode the date range to July 2024. This design choice renders the dashboard static and requires manual modification of the underlying SQL for each subsequent reporting period, severely limiting its reusability and ability to provide historical or trending analysis without significant maintenance overhead.","SAFE_CAST(t0.created AS DATE) >= DATE '2024-07-01'
  AND SAFE_CAST(t0.created AS DATE) <= DATE '2024-07-31'","Replace hardcoded dates with dynamic date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC()`) to allow for flexible reporting periods via Looker Studio controls. For historical analysis, consider a date dimension table.",306,744cc917-29e9-4af7-b811-3043e3ced208
all_metrics,Hardcoded Logic,"All metrics define the 'BI Team' using a hardcoded `CASE` statement with a specific list of `assignee_name` values. This approach is brittle; any change in team composition (additions, removals, or name changes) will necessitate manual updates across all affected metrics, leading to potential data inaccuracies and high maintenance costs. This also prevents dynamic filtering or analysis by different team definitions.","(CASE WHEN (t0.assignee_name IN ('Deshmukh, Aniket', 'Darbari, Uphaar', 'Sadineni, Anil')) THEN 'BI' ELSE 'Non BI' END) = 'BI'","Implement a governed lookup table or a dedicated dimension in the data model that maps `assignee_name` to `team_name` (e.g., 'BI Team'). This allows for centralized management of team definitions and enables dynamic filtering and analysis without modifying core metric SQL.",306,744cc917-29e9-4af7-b811-3043e3ced208
distinct_jira_tickets_by_assignee_bi_nqops_july2024,Anti-Pattern,"The 'Distinct Jira Tickets by Assignee' metric first filters for a hardcoded list of BI team members and then groups by `assignee_name`. While it will correctly show the count for the hardcoded individuals, this pattern reinforces the hardcoding. If the intent is to show all assignees or dynamically filter by team, the initial `CASE` statement filter becomes redundant or restrictive, making the metric less flexible.","AND (CASE WHEN (t0.assignee_name IN ('Deshmukh, Aniket', 'Darbari, Uphaar', 'Sadineni, Anil')) THEN 'BI' ELSE 'Non BI' END) = 'BI'
GROUP BY
  t0.assignee_name","If the goal is to report on specific team members, ensure the filtering logic is consistent with the grouping. Ideally, remove the hardcoded `CASE` filter and rely on a `team_name` dimension (from a lookup table) for filtering, allowing the user to select the 'BI Team' or any other team for analysis.",306,744cc917-29e9-4af7-b811-3043e3ced208
ga4_page_view_events_by_user_name,Hardcoded Logic,"The SQL logic for 'GA4 Page View Events by User Name' contains a hardcoded date range (2025-05-12 to 2025-05-18). This makes the metric static and irrelevant for a dashboard named 'LAST WEEK', which implies dynamic, current data. This anti-pattern severely limits the dashboard's utility and requires manual updates to remain current.","PARSE_DATE('%Y%m%d', t0c1d0.event_date) >= DATE '2025-05-12' AND PARSE_DATE('%Y%m%d', t0c1d0.event_date) <= DATE '2025-05-18'","Replace the hardcoded date range with dynamic date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)` and `CURRENT_DATE()` for 'LAST WEEK' or leverage Looker Studio's built-in date range parameters for user flexibility. This will ensure the dashboard always displays relevant, up-to-date information.",307,6596264e-ca48-4ca6-8871-77d1e0d29b28
"All metrics (e.g., bgt_ad_pages_paid_2025_metros)",Hardcoded Logic / Anti-Pattern,"All metrics contain an identical, lengthy `CASE` statement to map `publication_l5` values to broader regional categories (e.g., 'Sydney Metro' to 'Sydney'). This hardcoded logic is highly repetitive, difficult to maintain, and prone to errors if new L5 publications are added or existing mappings change. The `NOT(... IS NULL)` clause implicitly filters out any `publication_l5` not explicitly listed, which could lead to silent data loss if mappings are incomplete.",NOT(CASE WHEN (t0.publication_l5 = 'Sydney Metro') THEN 'Sydney' WHEN (t0.publication_l5 = 'Melbourne Metro') THEN 'Melbourne' WHEN (t0.publication_l5 = 'Brisbane Metro') THEN 'Brisbane' WHEN (t0.publication_l5 = 'Adelaide Metro') THEN 'Adelaide' WHEN (t0.publication_l5 = 'Darwin') THEN 'Northern Territory' WHEN (t0.publication_l5 = 'Australian Regional Media') THEN 'Toowoomba' WHEN (t0.publication_l5 = 'Toowoomba') THEN 'Toowoomba' WHEN (t0.publication_l5 = 'Hobart') THEN 'Hobart' WHEN (t0.publication_l5 = 'Geelong') THEN 'Geelong' WHEN (t0.publication_l5 = 'Cairns') THEN 'Cairns' WHEN (t0.publication_l5 = 'Gold Coast') THEN 'Gold Coast' WHEN (t0.publication_l5 = 'The Australian') THEN 'The Australian' WHEN (t0.publication_l5 = 'Prestige') THEN 'The Australian' WHEN (t0.publication_l5 = 'Townsville') THEN 'Townsville' ELSE NULL END IS NULL),"Create a dedicated lookup table for `publication_l5` to regional mapping. Join this lookup table to `pagination_combined` and filter on the mapped region. Alternatively, define this mapping as a derived field within the BigQuery view or Looker Studio data source to centralize the logic.",308,a1000c87-d7d3-44f6-8edb-b27930b363f8
"All metrics (e.g., bgt_ad_pages_paid_2025_metros)",Hardcoded Logic / Anti-Pattern,"All metrics include extensive, hardcoded `IN` clauses and `REGEXP_CONTAINS` patterns to exclude specific publication names from `publication_name_bal` and `publication_name_optima`. This complex exclusion logic is duplicated across all 19 metrics, making it extremely cumbersome to update or audit the exclusion list. Any change requires modifying every single metric definition, increasing the risk of inconsistencies and errors.","NOT(
        LTRIM(RTRIM(SAFE_CAST(t0.publication_name_bal AS STRING))) IN ('AUS TABLOID MAGAZINE', 'MANSION MAGAZINE', 'REVIEW', 'TRAVEL', 'WEEKEND AUS MAG', 'WISH MAGAZINE', 'GEELONG TODAY', 'GAD TABLOID MAGAZINE', 'AUS QUARTO MAGAZINE', 'GQ')
        OR SAFE.REGEXP_CONTAINS(t0.publication_name_bal, '^(.*WEEKLY\\s*TIMES.*)$')
        OR SAFE.REGEXP_CONTAINS(t0.publication_name_bal, '^(.*VOGUE.*)$')
    )
    AND (
        NOT(
            SAFE.REGEXP_CONTAINS(t0.publication_name_optima, '^(.*jb\\s?hifi.*)$')
            OR SAFE.REGEXP_CONTAINS(t0.publication_name_optima, '^(.*good\\s?guys.*)$')
            OR SAFE.REGEXP_CONTAINS(t0.publication_name_optima, '^(.*weekly\\s?times.*)$')
            OR t0.publication_name_optima IN ('aus - commercial property', 'aus - mansion', 'aus - mansion victoria', 'aus - review', 'aus - reviewwrap', 'aus - travel (tabloid)', 'aus - weekend magazine', 'mosman daily gloss', 'north shore times', 'wentworth courier', 'geelong today', 'geelong today feature a')
            OR SAFE.REGEXP_CONTAINS(t0.publication_name_optima, '^(.*chemist\\s?warehouse.*)$')
        )
        OR t0.publication_name_optima IS NULL
    )","Centralize these exclusion lists. This could be achieved by: 1) Creating a separate lookup table of excluded publication names/patterns and joining to it with an `EXCEPT` or `NOT EXISTS` clause. 2) Implementing these exclusions as part of the ETL process that populates `pagination_combined`. 3) Defining these exclusions as a calculated field or parameter within the Looker Studio data source itself, applied once for all metrics.",308,a1000c87-d7d3-44f6-8edb-b27930b363f8
"All metrics (e.g., bgt_ad_pages_paid_2025_metros)",Hardcoded Logic / Anti-Pattern,"The fiscal year (2025, 2026) is hardcoded into each metric, leading to metric proliferation (e.g., `_2025_` vs `_2026_` versions). Additionally, the `fiscal_week_number` is determined by a repeated subquery `(SELECT t0_inner.current_week FROM ... LIMIT 1)`. While this ensures the current week, repeating this subquery for every metric is inefficient and could be handled more elegantly.","AND t0.fiscal_week_number = (SELECT t0_inner.current_week FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.pagination_combined` AS t0_inner LIMIT 1)
    AND t0.fiscal_year_number = 2025","For the fiscal year: Implement a Looker Studio parameter for the fiscal year, allowing users to select the year dynamically without creating new metrics. For the fiscal week: If `current_week` is truly static for the dashboard's context, consider extracting it once as a dashboard-level parameter or a pre-calculated value in a dedicated dimension table. If it's dynamic per row, ensure the subquery is optimized or consider a view that pre-calculates this.",308,a1000c87-d7d3-44f6-8edb-b27930b363f8
"All metrics (e.g., bgt_ad_pages_paid_2025_metros)",Hardcoded Logic / Anti-Pattern,"The region classification based on `publication_l4` (Metro, Regionals, The Aus / Prestige) is defined using a repeated `CASE` statement in every metric. This is another instance of duplicated logic that should be centralized, leading to unnecessary complexity and maintenance burden.",AND (CASE WHEN (t0.publication_l4 = 'Metro') THEN 'Metros' WHEN (t0.publication_l4 = 'The Aus / Prestige') THEN 'Metros' WHEN (t0.publication_l4 = 'Regionals') THEN 'Regionals' ELSE 'Others' END) = 'Metros',"Define `Metros`/`Regionals` as a dimension in the data model (e.g., a calculated field in the BigQuery view or Looker Studio data source) rather than hardcoding it in each metric. This allows for easier filtering and grouping within Looker Studio without needing separate metrics for each region.",308,a1000c87-d7d3-44f6-8edb-b27930b363f8
total_c_score_target_by_publication_group_weekly,Hardcoded Logic,"The SQL logic for the 'Total C-Score Target' metric includes a hardcoded date range (`2025-06-02` to `2025-06-08`). While a comment indicates this is an 'example date range' and 'actual range varies per dashboard component', hardcoding dates directly into the metric's base SQL definition is an anti-pattern. This makes the metric inflexible and difficult to reuse for different time periods without manual modification, or implies that the dashboard components are overriding this SQL, which is less efficient than using parameters.",t0.week_ending >= DATE '2025-06-02' AND t0.week_ending <= DATE '2025-06-08',"Replace hardcoded dates with Looker Studio parameters (e.g., `_parameter_week_start_date`, `_parameter_week_end_date`) or leverage Looker Studio's built-in date range controls. This allows the dashboard to dynamically filter data based on user selection or pre-defined date ranges without altering the underlying metric definition, improving reusability and maintainability.",309,19891283-911c-4528-b830-c99e4cb76155
all_metrics,Hardcoded Logic / Anti-Pattern,"All metrics on this dashboard contain hardcoded date ranges (e.g., '2025-07-01' to '2025-07-31' or '2025-02-28' to '2025-03-31'). This design makes the dashboard static and requires manual modification of each metric's SQL logic every month to reflect current data, leading to significant maintenance overhead and potential for errors. This directly contradicts the 'Monthly' aspect of the dashboard's name.",WHERE SAFE_CAST(t0.visit_date AS DATE) >= DATE '2025-07-01' AND SAFE_CAST(t0.visit_date AS DATE) <= DATE '2025-07-31',"Replace hardcoded dates with Looker Studio's built-in date range controls. Define a single 'visit_date' dimension and allow users to select the desired period. This would consolidate multiple 'monthly' metrics into a single, dynamic metric.",310,4c177d0d-6534-4cff-a966-31c6df560a99
filtered_metrics,Hardcoded Logic / Anti-Pattern,"Metrics designated as 'Filtered' (e.g., 'Unique Content IDs (July 2025, Filtered)') include hardcoded filters for 'brand_name' ('NOT IN newscomau' or IS NULL) and 'Topic' ('IN Donald Trump'). This creates highly specific, non-reusable metrics. If the business needs to analyze other topics or brands, new metrics would need to be created, further increasing duplication and maintenance.",(SAFE_CAST(t0.brand_name AS STRING) NOT IN ('newscomau') OR SAFE_CAST(t0.brand_name AS STRING) IS NULL) AND SAFE_CAST(t0.Topic AS STRING) IN ('Donald Trump'),"Leverage Looker Studio's filter controls. Define 'brand_name' and 'Topic' as dimensions. Users can then apply filters dynamically on the dashboard. For 'Donald Trump' as a specific event, consider making 'Topic' a parameter or a filterable dimension. The 'newscomau' exclusion could be handled at the data source view level if it's a universal exclusion, or also via a filter control.",310,4c177d0d-6534-4cff-a966-31c6df560a99
all_metrics,Anti-Pattern / Duplication,"The dashboard contains multiple metrics that are essentially the same base calculation (e.g., 'Unique Content IDs', 'Total AMP Page Views') but differentiated only by hardcoded dates and filters. For example, 'Unique Content IDs (July 2025, Filtered)' and 'Unique Content IDs (March 2025)' are distinct metrics in the dashboard but represent the same underlying business logic applied to different timeframes and filter sets. This leads to redundant metric definitions and makes the dashboard inflexible.",SELECT COUNT(DISTINCT SAFE_CAST(t0.content_id AS STRING)) AS unique_content_ids FROM `ncau-data-newsquery-prd.prstn_content_interaction.monthly_news_event_tracker` AS t0 WHERE SAFE_CAST(t0.visit_date AS DATE) >= DATE '2025-07-01' AND SAFE_CAST(t0.visit_date AS DATE) <= DATE '2025-07-31' AND (SAFE_CAST(t0.brand_name AS STRING) NOT IN ('newscomau') OR SAFE_CAST(t0.brand_name AS STRING) IS NULL) AND SAFE_CAST(t0.Topic AS STRING) IN ('Donald Trump'),"Consolidate these into a single, generic metric (e.g., 'Unique Content IDs'). Allow the dashboard's date range and filter controls to apply the desired timeframes and filter conditions dynamically. This would drastically reduce the number of individual metrics to maintain and improve dashboard flexibility.",310,4c177d0d-6534-4cff-a966-31c6df560a99
total_subscription_acquisitions_aa_masthead,Hardcoded Logic,"The metric's SQL query uses a hardcoded `report_date` ('2025-02-26'). This makes the dashboard static and unable to reflect current data without manual SQL modifications, which is unsustainable for ongoing reporting.",SAFE_CAST(t0.report_date AS DATE) = DATE '2025-02-26',"Replace the hardcoded date with a Looker Studio date parameter (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or a dynamic date function (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) to ensure the dashboard displays up-to-date information.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
active_subscribers_28_days_consumer_hs_masthead,Hardcoded Logic,"The metric's SQL query uses a hardcoded `report_date` ('2025-03-12'). This makes the dashboard static and unable to reflect current data without manual SQL modifications, which is unsustainable for ongoing reporting.",SAFE_CAST(t0.report_date AS DATE) = DATE '2025-03-12',"Replace the hardcoded date with a Looker Studio date parameter (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or a dynamic date function (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) to ensure the dashboard displays up-to-date information.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
total_subscriber_count_consumer_hs_masthead,Hardcoded Logic,"The metric's SQL query uses a hardcoded `report_date` ('2025-03-12'). This makes the dashboard static and unable to reflect current data without manual SQL modifications, which is unsustainable for ongoing reporting.",SAFE_CAST(t0.report_date AS DATE) = DATE '2025-03-12',"Replace the hardcoded date with a Looker Studio date parameter (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or a dynamic date function (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) to ensure the dashboard displays up-to-date information.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
total_subscription_acquisitions_aa_masthead,Anti-Pattern,"Categorical filtering for 'combined_masthead' is performed using `STRPOS` with a hardcoded string ('AA'). This method is less performant, error-prone if the string changes, and indicates a potential lack of a standardized dimension for mastheads.","STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'AA') > 0","If 'AA' represents a distinct category, refactor to use exact string matching (`=`) or, ideally, join to a governed dimension table for `combined_masthead` to ensure data integrity and maintainability. If 'AA' is truly a substring, consider a more robust pattern matching or a lookup table for such classifications.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
active_subscribers_28_days_consumer_hs_masthead,Anti-Pattern,"Categorical filtering for 'combined_customer_type' and 'combined_masthead' is performed using `STRPOS` with hardcoded strings ('Consumer', 'HS'). Additionally, 'combined_classification_level_2' uses a hardcoded exclusion ('Print-only'). This approach is prone to errors, less performant, and suggests a need for better data governance for these dimensions.","STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0
    AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'HS') > 0
    AND SAFE_CAST(t0.combined_classification_level_2 AS STRING) != 'Print-only'","Refactor these filters to use exact string matching (`=`) if the values are precise. For better maintainability and performance, consider creating dedicated dimension tables for `combined_customer_type`, `combined_masthead`, and `combined_classification_level_2` and joining to them. This would centralize business logic and improve data quality.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
total_subscriber_count_consumer_hs_masthead,Anti-Pattern,"Categorical filtering for 'combined_customer_type' and 'combined_masthead' is performed using `STRPOS` with hardcoded strings ('Consumer', 'HS'). Additionally, 'combined_classification_level_2' uses a hardcoded exclusion ('Print-only'). This approach is prone to errors, less performant, and suggests a need for better data governance for these dimensions.","STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0
    AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'HS') > 0
    AND SAFE_CAST(t0.combined_classification_level_2 AS STRING) != 'Print-only'","Refactor these filters to use exact string matching (`=`) if the values are precise. For better maintainability and performance, consider creating dedicated dimension tables for `combined_customer_type`, `combined_masthead`, and `combined_classification_level_2` and joining to them. This would centralize business logic and improve data quality.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
active_subscribers_28_days_consumer_hs_masthead,Anti-Pattern,The `WHERE` clause for this metric is almost identical to that of 'Total Subscriber Count (Consumer HS Masthead)'. This duplication of complex filtering logic increases maintenance overhead and the risk of inconsistencies if a filter needs to be updated across multiple metrics.,"WHERE
    SAFE_CAST(t0.report_date AS DATE) = DATE '2025-03-12'
    AND SAFE_CAST(t0.member_type AS STRING) = 'subscriber'
    AND STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0
    AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'HS') > 0
    AND SAFE_CAST(t0.combined_classification_level_2 AS STRING) != 'Print-only'","Consolidate this shared filtering logic into a common base view or a parameterized query/function. This would promote reusability, reduce redundancy, and simplify maintenance for metrics derived from the `subscriber_base_agg` table with these common filters.",311,1b9efa96-31e0-4a43-9f74-c5d0da8c5e42
"gross_revenue_current_fy_daily, gross_revenue_next_fy_daily, gross_revenue_current_fy_k_daily, gross_revenue_next_fy_k_daily, gross_revenue_current_fy_dc_adj_daily, gross_revenue_current_fy_dc_adj_k_daily, revenue_type_category_count_daily, revenue_type_category_sum_daily, ad_type_l1_dimension, classification_name_dimension, publishing_division_dimension, revenue_type_classification_daily_dimension",Anti-Pattern,"A large and complex CTE (named `CTE2`) is duplicated verbatim across almost all metrics sourced from `adsales_revenue_performance_daily`. This redundancy makes the code difficult to maintain, prone to inconsistencies if changes are required, and potentially inefficient as the same complex logic is re-evaluated for each metric.","WITH
      CTE2 AS (
        SELECT
          ad_type_name AS adtype_name,
          is_xtend_flag AS xtend_flag,
          unified_publication_name,
          unified_publication_gl_code,
          CASE
            WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
              'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
              'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
              'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
              'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
              'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
            ELSE 'Non Sundry Pubs'
          END AS Sundry_Pubs_Flag,
          ...","Create a base view or a materialized view (e.g., `adsales_revenue_performance_daily_processed_v`) in BigQuery that encapsulates the logic of `CTE2`. All dependent metrics should then query this consolidated view, improving maintainability, consistency, and potentially query performance.",312,52c11c9c-052a-4e45-9cda-8fecd87d7964
"gross_revenue_current_fy_daily, gross_revenue_next_fy_daily, gross_revenue_current_fy_k_daily, gross_revenue_next_fy_k_daily, gross_revenue_current_fy_dc_adj_daily, gross_revenue_current_fy_dc_adj_k_daily, revenue_type_category_count_daily, revenue_type_category_sum_daily, ad_type_l1_dimension, classification_name_dimension, publishing_division_dimension, revenue_type_classification_daily_dimension",Hardcoded Logic,"The `Sundry_Pubs_Flag` is determined by a long, hardcoded list of `unified_publication_name` values within a CASE statement. This approach is inflexible; any change to the 'Sundry Pubs' definition requires modifying every metric's SQL, increasing the risk of errors and making updates cumbersome.","CASE
            WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
              'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
              'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
              'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
              'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
              'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
            ELSE 'Non Sundry Pubs'
          END AS Sundry_Pubs_Flag,","Extract the 'Sundry Pubs' mapping into a dedicated lookup table (e.g., `dim_publication_sundry_flag`). Join this lookup table to the base data model (the `adsales_revenue_performance_daily_processed_v` view) to derive the `Sundry_Pubs_Flag` dynamically.",312,52c11c9c-052a-4e45-9cda-8fecd87d7964
"revenue_type_category_count_daily, revenue_type_category_sum_daily",Anti-Pattern / Questionable Logic,"These metrics use a `CASE` statement to assign arbitrary numerical values (1-6) to different `revenue_group_subtype` categories, which are then counted or summed. The `COUNT(CASE WHEN (FALSE) THEN NULL ...)` is particularly unusual and likely intended to count rows matching any of the categories. The `SUM` of these arbitrary numbers is not a standard business aggregation and its meaning is unclear.",COUNT(CASE WHEN (FALSE) THEN NULL WHEN (t0.revenue_group_subtype = 'PRINT') THEN 1 WHEN (t0.revenue_group_subtype = 'DIGITAL') THEN 2 WHEN (t0.revenue_group_subtype = 'PROGRAMMATIC') THEN 3 WHEN (t0.revenue_group_subtype = 'PROGRAMMATIC EXCHANGE') THEN 4 WHEN (t0.revenue_group_subtype = 'PROGRAMMATIC SOURCE') THEN 5 WHEN (t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY') THEN 6 ELSE NULL END) AS revenue_type_category_count,"Clarify the business requirement for these metrics. If the goal is to count occurrences of each revenue type, create separate metrics (e.g., `count_print_revenue`, `count_digital_revenue`) using `COUNT(CASE WHEN revenue_group_subtype = 'PRINT' THEN 1 END)`. If a numerical weighting is truly needed, define and document these weights in a lookup table rather than hardcoding them.",312,52c11c9c-052a-4e45-9cda-8fecd87d7964
"revenue_type_classification_daily_dimension, revenue_type_classification_finance_dimension",Hardcoded Logic / Anti-Pattern,"Complex `CASE` statements are used to classify revenue types based on multiple conditions (`fin_adtype_name`, `relative_fy_year_offset`, `revenue_group_subtype`, `sales_segment_l_2_name_sync`, `cost_model_type`). This logic is difficult to read, maintain, and extend. Any changes to classification rules require direct SQL modification, increasing the risk of errors.","CASE WHEN (t0.fin_adtype_name = 'XTEND') THEN 'XTEND' WHEN (t0.relative_fy_year_offset = 0 AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other') THEN 'PROGRAMMATIC - DIGITAL OTHER' WHEN (t0.relative_fy_year_offset = 0 AND t0.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(t0.cost_model_type, 3) = 'GUA') THEN 'PROGRAMMATIC - GUARANTEED' WHEN (t0.relative_fy_year_offset = 0 AND t0.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(t0.cost_model_type, 3) = 'NON') THEN 'PROGRAMMATIC - OPEN EXCHANGE' WHEN (t0.relative_fy_year_offset = 0 AND t0.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(t0.cost_model_type, 3) = 'PMP') THEN 'PROGRAMMATIC - PMP' WHEN (t0.revenue_group_subtype = 'DIGITAL') THEN 'ADPT DIGITAL' WHEN (SAFE.LEFT(t0.revenue_group_subtype, 6) = 'SUNDRY') THEN 'SUNDRY' ELSE t0.revenue_group_subtype END AS revenue_type_classification","Create a dedicated lookup table (e.g., `dim_revenue_classification`) that maps combinations of source attributes (e.g., `fin_adtype_name`, `revenue_group_subtype`, `sales_segment_l_2_name_sync`, `cost_model_type`) to the desired `revenue_type_classification`. Join this lookup table in the base view to derive the classification, centralizing the business logic.",312,52c11c9c-052a-4e45-9cda-8fecd87d7964
"gross_revenue_current_fy_daily, gross_revenue_current_fy_finance, gross_revenue_next_fy_daily, gross_revenue_next_fy_finance, etc.",Data Mismatch / Potential Inconsistency,"The dashboard relies on two distinct data sources (`adsales_revenue_performance_daily` and `asl_finance_derived.adsales_performance`) for core revenue metrics. While one is 'daily performance' and the other 'finance-derived', the existence of parallel metrics (e.g., 'Gross Revenue (Current FY)' vs. 'Gross Revenue (Current FY) (Finance)') can lead to confusion and discrepancies if the underlying definitions or data refresh rates differ significantly.",N/A (structural issue across metrics),"Investigate the specific business requirements and reconciliation processes between the daily operational data and finance-derived data. If both are essential, ensure clear documentation of their differences, refresh schedules, and intended use cases. Consider a unified data model that explicitly distinguishes between these sources (e.g., via a `data_source` dimension) or reconciles them into a single source of truth where appropriate.",312,52c11c9c-052a-4e45-9cda-8fecd87d7964
multiple_metrics,Hardcoded Logic,"Multiple metrics (e.g., 'Total Article Views (Filtered by Email and YearMonth)', 'Total Logins (Filtered by Email and YearMonth)', 'Total Monthly Devices (Filtered by Email and YearMonth Range)') contain hardcoded `YearMonth` values (e.g., '2025-04', '2025-06', '2025-05') and specific email addresses or substrings (e.g., 'christian@cmaxadvisory.com.au', 'abc') directly in their `WHERE` clauses. This prevents the dashboard from being dynamic or easily adaptable for different reporting periods or subscribers without manual SQL changes.","WHERE YearMonth = '2025-04' AND STRPOS(`ncau-data-newsquery-prd.ops_ncfr`.DETERMINISTIC_DECRYPT(email), 'christian@cmaxadvisory.com.au') > 0","Implement Looker Studio parameters for `YearMonth` and `Email` to allow users to dynamically select the desired period and subscriber. This will make the dashboard reusable and flexible. For email filtering, consider if a pre-decrypted or hashed email column could be used for more efficient filtering if privacy allows.",313,c51835dc-61f0-4277-ab19-e374508dccd2
multiple_metrics,Anti-Pattern,"The SQL logic for several 'filtered by email and yearmonth' metrics (e.g., Total Article Views, Total Logins, Total Page Views, Max Six Month Device Count, Total Monthly Devices) is nearly identical, differing only in the aggregated column (e.g., `ArticleViews`, `Logins`, `PVs`, `SixMonthDeviceCount`, `MonthlyDevices`). This indicates a copy-paste approach rather than leveraging reusable components or parameterized queries.","SELECT SUM(ArticleViews) FROM `...highest_subscriber_usage_6m_with_encryp_PII_2` WHERE YearMonth = '2025-04' AND STRPOS(`...`.DETERMINISTIC_DECRYPT(email), 'christian@cmaxadvisory.com.au') > 0","Explore creating a single, more generalized custom query in Looker Studio that allows selecting the desired metric (e.g., 'ArticleViews', 'Logins') as a parameter. Alternatively, if the underlying table structure permits, define these as separate fields on a single data source, allowing Looker Studio's native aggregation capabilities to be used.",313,c51835dc-61f0-4277-ab19-e374508dccd2
multiple_metrics,Anti-Pattern,"The `STRPOS(DETERMINISTIC_DECRYPT(email), '...')` function is repeatedly called within the `WHERE` clause for multiple metrics. While necessary for PII handling, applying a decryption function on every row for filtering can be computationally expensive, especially on large datasets.","STRPOS(`ncau-data-newsquery-prd.ops_ncfr`.DETERMINISTIC_DECRYPT(email), 'christian@cmaxadvisory.com.au') > 0","Investigate the performance implications of the `DETERMINISTIC_DECRYPT` function. Consider if a pre-decrypted and hashed version of the email (or a non-PII identifier) could be stored in the table for more efficient filtering, or if the decryption and filtering logic can be pushed down to a materialized view or a more optimized data processing layer.",313,c51835dc-61f0-4277-ab19-e374508dccd2
total_subscriber_count_ga_consumer_subscriber_q1_2025,Hardcoded Logic,"All metrics observed use hardcoded specific date ranges (e.g., `DATE '2025-01-27'`) in their `WHERE` clauses. This makes the dashboard static, requiring manual updates for each reporting period and preventing dynamic analysis over different timeframes.",t0.report_date >= DATE '2025-01-27' AND t0.report_date <= DATE '2025-04-21',"Implement Looker Studio date range parameters to allow dynamic date selection by users. For fixed reporting periods like Q1/Q2, consider using a date dimension table with fiscal period flags to simplify filtering.",314,59390a9a-e996-46b9-8151-cada4cafef65
total_subscriber_count_ga_consumer_subscriber_q1_2025,Hardcoded Logic,"Numerous metrics hardcode specific categorical values (e.g., `masthead = 'GA'`, `scenario_type = 'Budget'`, `delivery_medium != 'Print'`). This severely limits the flexibility of the dashboard, necessitating the creation of separate metrics for each combination of filter values, leading to duplication.","STRPOS(t0.combined_masthead, 'GA') > 0","Introduce Looker Studio filter controls (e.g., dropdowns) linked to parameters that can dynamically update the SQL queries. For frequently used dimensions like `masthead` or `product_category`, consider creating a governed lookup table to ensure consistent naming and definitions.",314,59390a9a-e996-46b9-8151-cada4cafef65
net_consumer_activity_tm_standard_paid_digital_july_2025,Anti-Pattern,"Two distinct metrics (`Net Consumer Activity` for 'TM' and 'HS' mastheads) are defined with almost identical SQL logic, differing only by the `masthead` filter and date range. This is a clear anti-pattern indicating a lack of reusability and leading to significant maintenance overhead. The same pattern is observed for the `consumer_planning` metrics.",t0.masthead = 'TM',"Consolidate these into a single base metric that accepts `masthead` and date range as parameters. This would drastically reduce the number of individual metrics, simplify maintenance, and improve dashboard flexibility.",314,59390a9a-e996-46b9-8151-cada4cafef65
total_additions_planning_ga_consumer_budget_april_2025,Anti-Pattern,The SQL logic for `consumer_planning` metrics involves complex `SAFE_CAST` and `DATETIME_TRUNC` operations to determine the ISO week. This complex and verbose logic is repeated across three planning metrics and could be simplified or pushed upstream.,"SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(t0.last_day_of_week AS DATETIME), ISOWEEK) AS DATE) = SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE '2025-04-01' AS DATETIME), ISOWEEK) AS DATE)","Pre-calculate and store the ISO week start/end dates or a simpler `reporting_week_id` in the `consumer_planning` table during ETL. Alternatively, use a well-defined date dimension table to simplify date filtering and calculations within Looker Studio.",314,59390a9a-e996-46b9-8151-cada4cafef65
all_metrics,Anti-Pattern,"The `base_report_data` CTE, which performs initial data parsing and transformations (e.g., `substr` for cleaning string fields, `SAFE_CAST` for dates/floats), is duplicated identically across all five metrics. This violates the DRY (Don't Repeat Yourself) principle, leading to redundant code, increased query execution time due to repeated computations, and a high maintenance burden. Any change to the base data processing logic would require updates in multiple places, increasing the risk of errors.","WITH
  base_report_data AS (
    SELECT
      substr(substr(date, 3), 1, length(substr(date, 3)) - 1) AS date_str,
      SAFE_CAST(substr(substr(date_master, 3), 1, length(substr(date_master, 3)) - 1) AS DATE) AS date_master,
      DATE_TRUNC(SAFE_CAST(substr(substr(date_master, 3), 1, length(substr(date_master, 3)) - 1) AS DATE), WEEK(MONDAY)) AS date_master_week,
      substr(substr(Employee_ID, 3), 1, length(substr(Employee_ID, 3)) - 1) AS Employee_ID,
      ...
    FROM
      `ncau-data-newsquery-prd.hr_occupancy.combined_report_noshow_ext_t`
    WHERE
      SAFE_CAST(substr(substr(date_master, 3), 1, length(substr(date_master, 3)) - 1) AS DATE) >= ""2022-08-01""
  )","Create a BigQuery view (e.g., `hr_occupancy.occupancy_base_data_v`) that encapsulates the `base_report_data` logic. All metrics should then query this single, centralized view. This will improve performance, simplify maintenance, and ensure consistency across all related metrics.",315,d240dd2c-82d6-4c48-b6b9-c0965640412c
all_metrics,Hardcoded Logic / Anti-Pattern,"The derivation of the `Level_05` column involves a highly complex and brittle `CASE` statement that attempts to parse specific patterns from the `Level_05_from_the_Top` string field. This logic is hardcoded and duplicated across all metrics. Such complex string manipulation within metrics is prone to errors if the source data format changes and makes the SQL difficult to read, debug, and maintain. It strongly suggests that `Level_05_from_the_Top` contains semi-structured data that should be pre-processed.","CASE
  WHEN REGEXP_INSTR(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1), r""\("") != 0 THEN
  CASE
    WHEN substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1) = 'Vogue Australia () (Jessica Montague)' OR ...
    ELSE trim(IF(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1) <> 'None', substr(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1), REGEXP_INSTR(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1),
                      r""\("") + 1, length(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1))), 0, length(substr(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1), STRPOS(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1),
                        '('), (length(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1)) - STRPOS(substr(substr(Level_05_from_the_Top, 3), 1, length(substr(Level_05_from_the_Top, 3)) - 1), '(')))) - 1), ' '))
  END
  ELSE ' '
END AS Level_05","Investigate the underlying data source for `Level_05_from_the_Top`. If the patterns are consistent, pre-process this field into a more structured format (e.g., separate columns for 'Department' and 'Manager') in the source table or a dedicated transformation layer. Alternatively, if it represents a lookup, create a governed lookup table for `Level_05_from_the_Top` to `Level_05` mappings and join to it in the base view.",315,d240dd2c-82d6-4c48-b6b9-c0965640412c
all_metrics,Hardcoded Logic / Anti-Pattern,"The `states` column is derived using a hardcoded `CASE` statement that maps full `Office_Location` strings to abbreviated state names. This logic is duplicated across all metrics. This approach is not scalable; adding new office locations or changing existing names would require manual updates in every metric's SQL, increasing the risk of inconsistencies and errors.","CASE
  WHEN substr(substr(Office_Location, 3), 1, length(substr(Office_Location, 3)) - 1) = 'NSW - SHS 2 Holt Street Surry Hills' THEN 'NSW'
  WHEN substr(substr(Office_Location, 3), 1, length(substr(Office_Location, 3)) - 1) = 'VIC - SBK HWT Tower 40 City Road Southbank' THEN 'VIC - HWT'
  WHEN substr(substr(Office_Location, 3), 1, length(substr(Office_Location, 3)) - 1) = 'SA - ADE 31 Waymouth Street Adelaide' THEN 'SA'
  WHEN substr(substr(Office_Location, 3), 1, length(substr(Office_Location, 3)) - 1) = 'QLD - BHS Cnr Mayne Road & Campbell Street Bowen Hills' THEN 'QLD'
  WHEN substr(substr(Office_Location, 3), 1, length(substr(Office_Location, 3)) - 1) = 'VIC - GLS 126 Little Malop Street Geelong' THEN 'VIC - Geelong'
  ELSE ' '
END AS states","Create a dedicated lookup table (e.g., `hr_occupancy.office_location_to_state_mapping`) that stores the `Office_Location` to `states` mapping. This lookup table should then be joined within the centralized `occupancy_base_data_v` view, centralizing the mapping logic and making it easily extensible and maintainable.",315,d240dd2c-82d6-4c48-b6b9-c0965640412c
employees_present_3_plus_days,Redundancy,"The `metrics_details` input contains two identical entries for the metric `employees_present_3_plus_days`, including the same business description and SQL logic. This indicates a potential duplication in the metric definitions within the dashboard's metadata or an error in the data collection process.","N/A (issue is in metadata, not SQL)","Verify if this is an actual duplicate metric definition within the Looker Studio dashboard. If so, consolidate it to a single, authoritative metric definition to avoid confusion and ensure consistent reporting.",315,d240dd2c-82d6-4c48-b6b9-c0965640412c
records_cm_android,Hardcoded Logic,"The metric 'Total Records for CM Android' uses a hardcoded filter for 'cm android' on `post_prop3`. This limits the reusability and flexibility of the metric, as it cannot easily be adapted for other platforms or if the 'cm android' string changes.",WHERE SAFE_CAST(t0.post_prop3 AS STRING) = 'cm android',"Consider externalizing platform definitions into a lookup table or utilizing a dashboard parameter to allow dynamic filtering across different platforms, improving maintainability and reusability.",316,c412242b-14aa-4045-84f0-b8c3b5594898
records_cm_android_by_pcsid_status,Hardcoded Logic,"Similar to 'Total Records for CM Android', this critical metric also hardcodes the filter for 'cm android' on `post_prop3`. This creates a dependency on a static string value, making the dashboard less adaptable.",WHERE SAFE_CAST(t0.post_prop3 AS STRING) = 'cm android',"Implement a more dynamic approach for platform filtering, such as a lookup table or a parameter, to enhance the dashboard's flexibility and reduce maintenance overhead.",316,c412242b-14aa-4045-84f0-b8c3b5594898
all_metrics,Anti-Pattern,"All metrics on this dashboard (Table Schema, Table Name, Last Update Time, Total Row Count, Overall Data Freshness Status, Expected Refresh Rate, Number of Tables/Partitions by Schema, Total Row Count by Table) share nearly identical, complex SQL logic, including multiple CTEs (`main_data`, `dd`, `dd1`). This extreme redundancy makes the dashboard exceptionally difficult to maintain, debug, and scale. Any change to the underlying data logic (e.g., adding a new table, modifying refresh rates, or fixing a bug in the freshness calculation) would require updating every single metric's SQL definition, leading to high error potential and development overhead.","WITH
  main_data AS (
    SELECT
      table_schema AS SCHEMA,
      table_name AS TABLE,
      datetime(last_modified_time, ""Australia/Sydney"") AS UPDATE_TIME_AUS,
      total_rows AS ROW_COUNT,
      CASE
        WHEN table_name IN ('event_transaction_wrk_01', 'event_transaction_wrk_02', 'event_transaction_history') AND
        date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
        CASE
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) <= 8 THEN 'Success'
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) >= 9 THEN ''
          ELSE 'Need a check'
        END
        WHEN table_name IN ('myaccount_base_02', 'myaccount_base_01', 'taste_nlm_fct', 'taste_nlm_seo_url_fct') AND
        date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") - 1 OR date(datetime(last_modified_time,
            ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
        CASE
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) <= 25 THEN 'Success'
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) >= 26 THEN ''
          ELSE 'Need a check'
        END
        ELSE 'Need a check'
      END AS OVERALL_STATUS
    FROM
      ((
        SELECT
          *,
          CASE
            WHEN partition_id = max(partition_id) OVER (PARTITION BY table_name
              ORDER BY last_modified_time DESC, partition_id DESC) THEN partition_id
          END AS max_partition_id
        FROM
          `ncau-data-newsquery-prd.prstn_customerinteractions.INFORMATION_SCHEMA.PARTITIONS`
        WHERE
          partition_id NOT IN ('__NULL__')
        ) UNION ALL(
        SELECT
          *,
          CASE
            WHEN partition_id = max(partition_id) OVER (PARTITION BY table_name
              ORDER BY last_modified_time DESC, partition_id DESC) THEN partition_id
          END AS max_partition_id
        FROM
          `ncau-data-newsquery-prd.prstn_content_interaction.INFORMATION_SCHEMA.PARTITIONS`
        WHERE
          partition_id NOT IN ('__NULL__')
        )
      )
    WHERE
      partition_id = max_partition_id
  ),
  dd AS (
    SELECT
      ""PRSTN"" AS Layer,
      ""myaccount_base_02"" AS TableName,
      ""prstn_customerinteractions"" AS TableSchema,
      ""24 hrs"" AS RefreshRate
    UNION ALL
    SELECT
      ""PRSTN"",
      ""myaccount_base_01"",
      ""prstn_customerinteractions"",
      ""24 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""event_transaction_wrk_02"",
      ""prstn_customerinteractions"",
      ""6 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""event_transaction_wrk_01"",
      ""prstn_customerinteractions"",
      ""6 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""taste_nlm_fct"",
      ""prstn_content_interaction"",
      ""24 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""taste_nlm_seo_url_fct"",
      ""prstn_content_interaction"",
      ""24 hrs""
  ),
  dd1 AS (
    SELECT
      *
    FROM
      dd
    WHERE
      Layer = 'PRSTN'
  )
SELECT
  main_data.SCHEMA
FROM
  main_data
INNER JOIN
  dd1
ON main_data.TABLE = dd1.TableName
LIMIT 1;","Consolidate the common SQL logic into a single BigQuery view or a Looker Studio data source with calculated fields. This would centralize the data preparation, improve maintainability, and potentially optimize query performance by allowing Looker Studio to cache the base data. The `main_data` and `dd` CTEs should be extracted into a reusable component.",317,dc9bcf46-d0a0-4501-8eb6-607f061379d9
overall_status_calculated,Hardcoded Logic,"The `OVERALL_STATUS` calculation uses a complex, nested `CASE` statement with hardcoded table names and refresh rate thresholds (e.g., '8 hours', '25 hours'). This logic is duplicated across all metrics and is difficult to manage. Adding or changing refresh rules for tables requires modifying this complex `CASE` statement in multiple places, increasing the risk of inconsistencies and errors.","      CASE
        WHEN table_name IN ('event_transaction_wrk_01', 'event_transaction_wrk_02', 'event_transaction_history') AND
        date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
        CASE
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) <= 8 THEN 'Success'
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) >= 9 THEN ''
          ELSE 'Need a check'
        END
        WHEN table_name IN ('myaccount_base_02', 'myaccount_base_01', 'taste_nlm_fct', 'taste_nlm_seo_url_fct') AND
        date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") - 1 OR date(datetime(last_modified_time,
            ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
        CASE
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) <= 25 THEN 'Success'
          WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
              ""Australia/Sydney""))) >= 26 THEN ''
          ELSE 'Need a check'
        END
        ELSE 'Need a check'
      END AS OVERALL_STATUS","Externalize refresh rate definitions. Create a lookup table (e.g., `table_refresh_rules`) that stores `table_name`, `expected_refresh_hours`, and `refresh_type` (e.g., 'daily', 'hourly'). Join this lookup table to the `main_data` CTE and dynamically calculate `OVERALL_STATUS` based on the lookup values. This would make the refresh logic data-driven and easily configurable without SQL changes.",317,dc9bcf46-d0a0-4501-8eb6-607f061379d9
refresh_rate_dimension,Hardcoded Logic,"The `dd` CTE hardcodes a list of monitored tables, their schemas, and refresh rates using `UNION ALL` statements. This is a manual and error-prone way to manage metadata. Any new table to monitor or change in metadata (like refresh rates or schemas) requires manual SQL modification across all metrics, which is highly inefficient and prone to errors.","  dd AS (
    SELECT
      ""PRSTN"" AS Layer,
      ""myaccount_base_02"" AS TableName,
      ""prstn_customerinteractions"" AS TableSchema,
      ""24 hrs"" AS RefreshRate
    UNION ALL
    SELECT
      ""PRSTN"",
      ""myaccount_base_01"",
      ""prstn_customerinteractions"",
      ""24 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""event_transaction_wrk_02"",
      ""prstn_customerinteractions"",
      ""6 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""event_transaction_wrk_01"",
      ""prstn_customerinteractions"",
      ""6 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""taste_nlm_fct"",
      ""prstn_content_interaction"",
      ""24 hrs""
    UNION ALL
    SELECT
      ""PRSTN"",
      ""taste_nlm_seo_url_fct"",
      ""prstn_content_interaction"",
      ""24 hrs""
  )","Create a dedicated metadata table (e.g., `your_project.your_dataset.monitored_tables`) in BigQuery that stores `Layer`, `TableName`, `TableSchema`, and `RefreshRate`. Replace the `dd` CTE with a simple `SELECT * FROM `your_project.your_dataset.monitored_tables` WHERE Layer = 'PRSTN'`. This centralizes metadata management, improves scalability, and allows business users or data engineers to update refresh rates without modifying dashboard SQL.",317,dc9bcf46-d0a0-4501-8eb6-607f061379d9
"total_value_gender_male, total_value_gender_female, total_value_gender_others",Anti-Pattern / Hardcoded Logic,"Three separate metrics are defined to calculate 'Total Value' for different gender audiences (Male, Female, Other). Each metric's SQL logic is nearly identical, differing only in the hardcoded 'level' value(s) within the WHERE clause. This creates redundant code, increases maintenance overhead, and makes it difficult to add new gender categories without creating new metrics. This pattern is a prime candidate for consolidation into a single, parameterized metric.","WHERE t0.factor = 'gender' AND t0.level = 'Male' (or 'Female', or IN ('Not Specified', 'Non Binary'))","Consolidate these three metrics into a single, more flexible metric. This can be achieved by either: 1) Using a Looker Studio parameter for 'gender level' if the dashboard allows user selection, or 2) Creating a single SQL query that groups by 'level' and then using Looker Studio's aggregation capabilities to display the desired gender breakdowns. This would significantly reduce the number of underlying queries and improve maintainability.",319,05d7819d-3d0d-44b4-9701-0ac35c5643fa
"total_value_gender_male, total_value_gender_female, total_value_gender_others, pivoted_data_row_count",Hardcoded Logic,"All four metrics on the dashboard utilize hardcoded date ranges in their SQL queries. The gender-based metrics use '2025-08-01' to '2025-08-31', while the 'pivoted_data_row_count' metric uses '2025-08-25' to '2025-08-31'. This makes the dashboard static, unable to dynamically display data for different time periods without manual SQL modifications. The inconsistency in date ranges between metric types also suggests a lack of standardized date filtering.",AND t0.month >= DATE '2025-08-01' AND t0.month <= DATE '2025-08-31' (and similar for other metric),"Replace hardcoded date ranges with Looker Studio's built-in date range parameters (e.g., `_SD_START_DATE`, `_SD_END_DATE`) or implement dynamic date logic (e.g., `CURRENT_DATE() - INTERVAL 1 MONTH`) directly in the SQL. This will allow users to select custom date ranges and make the dashboard dynamic and reusable for ongoing analysis. Standardize date ranges across all related metrics unless a specific business requirement dictates otherwise.",319,05d7819d-3d0d-44b4-9701-0ac35c5643fa
pivoted_data_row_count,Complexity / Anti-Pattern,"The SQL logic for 'Count of Pivoted Spotify Demographic Records' is highly complex, involving nested subqueries, a LEFT JOIN, a PIVOT operation, and a subquery to find the maximum partition date. While functional, such complex logic within a dashboard metric can be difficult to debug, maintain, and optimize. If the pivoted structure is frequently used, performing the pivot at the data modeling layer (e.g., in a dedicated view or table) would be more efficient and robust.","SELECT COUNT(1) AS pivoted_record_count FROM (
SELECT
  *
FROM
  (
    SELECT
      month,
      show,
      value,
      factor,
      level,
      url
    FROM
      `ncau-data-newsquery-prd.prstn_content_audio_view.v_spotify_demographic` AS v
      LEFT JOIN
      (
        SELECT
          p.program_name,
          p.program_artwork_url AS url
        FROM
          `ncau-data-newsquery-prd`.bdm_content_audio.program_dim AS p
        WHERE
          p.dw_partition_date = (
            SELECT
              max(dw_partition_date)
            FROM
              `ncau-data-newsquery-prd`.bdm_content_audio.program_dim AS p
          )
      ) AS o
      ON v.show = o.program_name
    WHERE
      factor NOT IN ('age', 'gender')
  ) PIVOT(max(CAST(value AS decimal)) FOR factor IN ('followers', 'listeners', 'streams', 'starts'))
) WHERE month >= DATE '2025-08-25' AND month <= DATE '2025-08-31'","Evaluate the necessity of performing the PIVOT operation directly within the Looker Studio metric. If the pivoted structure is a common requirement, consider creating a pre-pivoted view or table in the data warehouse. This would simplify the dashboard's SQL, improve query performance, and centralize complex logic for easier governance. If only specific aggregated values (e.g., total followers) are needed, consider creating individual metrics for each, avoiding the full pivot.",319,05d7819d-3d0d-44b4-9701-0ac35c5643fa
all_metrics,Anti-Pattern,"All four metrics on the dashboard apply the exact same complex `WHERE` clause conditions for `classification_level_2` (10 `OR` conditions) and `masthead` (9 `NOT IN` values). This hardcoded and repeated filtering logic is embedded directly in each metric's SQL, making the dashboard brittle, difficult to maintain, and prone to inconsistencies if these business rules change. Any update to the included classification levels or excluded mastheads requires modifying four separate metric definitions.","(SAFE_CAST(t0.classification_level_2 AS STRING) = 'Bundles' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'Digital' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'DPE only' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'Gift Bundles Activation' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'Gift Digital Activation' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'Mind Games' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'Print-only' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'SMB Activation' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'The Oz' OR SAFE_CAST(t0.classification_level_2 AS STRING) = 'Essentials') AND SAFE_CAST(t0.masthead AS STRING) NOT IN ('NW', 'FS', 'BG', 'SC', 'CS', 'SP', 'PU', 'RN', 'WT')","Create a consolidated, governed view or a materialized view that pre-filters the `subscription_cancellation_history` table based on these common business rules. Alternatively, define these filters as Looker Studio parameters or calculated fields at the data source level, referencing a lookup table for the allowed/excluded values. This would centralize the logic, improve maintainability, and ensure consistency across all related metrics.",320,7abef7bf-a809-4e7a-85dc-68f1f1dd60de
cancellations_by_transformed_subtype_paying_customers_filtered_masthead_classification,Hardcoded Logic,"The 'Cancellations by Transformed Sub-Type' metric uses a `CASE` statement to transform `subscription_movement_count_sub_type` values (`switch_intro_offer_cancellation` to `switch`, `reactivation_cancellation` to `reactivation`). This hardcoded transformation logic is embedded directly in the query. If new transformation rules are needed, or if the source values change, this logic must be manually updated within the metric's SQL, increasing maintenance overhead and potential for errors.",CASE WHEN SAFE_CAST(t0.subscription_movement_count_sub_type AS STRING) = 'switch_intro_offer_cancellation' THEN 'switch' WHEN SAFE_CAST(t0.subscription_movement_count_sub_type AS STRING) = 'reactivation_cancellation' THEN 'reactivation' ELSE SAFE_CAST(t0.subscription_movement_count_sub_type AS STRING) END AS transformed_sub_type,"Implement a governed lookup table for `subscription_movement_count_sub_type` transformations. This table would map raw values to transformed values, allowing the SQL to perform a simple `JOIN` instead of a complex `CASE` statement. This approach improves flexibility, centralizes transformation logic, and enhances data governance.",320,7abef7bf-a809-4e7a-85dc-68f1f1dd60de
news_com_au_volume,Anti-Pattern,"Multiple core volume metrics (e.g., 'Nine News Volume', 'ABC Volume', 'News.com.au Volume', 'Seven News Volume') are defined as separate `SUM` aggregations over distinct columns (`nine_news_com_au`, `abc`, `news_com_au`, `seven_news`) within the `ipsos_daily_gaps` table. This 'wide table' data modeling approach for similar measures leads to repetitive metric definitions in Looker Studio and makes it harder to add new news sources without modifying the underlying table schema and creating new metrics. The gap metrics also follow this pattern, performing direct subtractions of these distinct columns.",SELECT SUM(t0.news_com_au) FROM `ncau-data-newsquery-prd.prstn_content_interaction.ipsos_daily_gaps` AS t0,"Consider refactoring the `ipsos_daily_gaps` table (or creating a view/materialized view) to a 'tall' format. This would involve pivoting the news source columns into a single `news_source` dimension column and a single `volume` measure column. This would allow for a single 'Volume' metric in Looker Studio, filterable by 'News Source', significantly improving maintainability and scalability for adding new sources. Gap metrics could then be calculated using filtered values of this single 'Volume' metric.",321,4e1ed0ba-1904-40e6-9841-57377cd9cb53
total_real_cost_by_month_ola_projects,Hardcoded Logic,"Both 'Total Real Cost by Month for OLA Projects' and 'Total Real Cost for Non-Production Environment (Specific Period)' metrics use an identical hardcoded list of 7 GCP project IDs in their WHERE clauses. This approach is brittle, difficult to maintain, and prone to errors if project IDs change or new projects need to be included, requiring manual updates across multiple queries.","bill.project.id IN ('nca-datapl-dev-genai', 'ncau-data-prod-contentlake', 'nca-data-prod-aisummarize', 'nca-datapl-prod-genai', 'nca-taiste-prod-taiste', 'nca-ola-prod-data', 'nau-data-nprod-dataservices')","Centralize the management of relevant GCP project IDs. Store these project IDs in a dedicated lookup table within the `ncau_gcp_metaadata` dataset or a similar configuration table. The SQL queries should then join to this lookup table, allowing for dynamic updates and improved data governance without modifying the dashboard's underlying SQL.",322,2a7796ef-1ee1-46d5-ab21-dee8ec3ac155
total_real_cost_non_production_specific_period,Hardcoded Logic,"The 'Total Real Cost for Non-Production Environment (Specific Period)' metric classifies environments using a hardcoded `CASE` statement with `LIKE` patterns on `metadata.projectId`. This embeds business logic directly into the SQL, making it inflexible to changes in naming conventions or the introduction of new environment types (e.g., 'staging', 'qa').",(CASE WHEN metadata.projectId LIKE '%dev%' OR metadata.projectId LIKE '%nprod%' OR metadata.projectId LIKE '%poc%' THEN 'NonProduction' ELSE 'Production' END) = 'NonProduction',"Extend the `ncau_gcp_metaadata` table to include an explicit 'environment_type' column for each `projectId`. This would allow the query to simply filter on `metadata.environment_type = 'NonProduction'`, centralizing environment classification logic and making it more robust and maintainable.",322,2a7796ef-1ee1-46d5-ab21-dee8ec3ac155
masthead_classification_campaign_performance,Hardcoded Logic|Anti-Pattern,"Multiple metrics (`clicks_by_fy_week_masthead_source_aod`, `spend_by_fy_week_masthead_source_aod`, `masthead_classification_campaign_performance`) share an identical, complex `CASE WHEN` statement to define 'Masthead Classification' based on `masthead_code` for campaign performance data. This hardcoded logic is duplicated across these metrics, making updates cumbersome and highly prone to error if a classification changes or new mastheads are introduced. This directly contradicts the initial AI analysis's claim of '0 governance issues'.","CASE WHEN (masthead_code IN ('CP', 'GA', 'GC', 'NT', 'TB', 'TC', 'TM', 'WT')) THEN 'Regional' WHEN (masthead_code IN ('AA', 'CM', 'DT', 'HS', 'MESSENGER', 'Leader', 'Messenger', 'Quest', 'NEWSLOCAL', 'Newslocal')) THEN 'Metros' WHEN (masthead_code = 'TA') THEN 'The Australian' WHEN (masthead_code IN ('DEL', 'TAS', 'ABR')) THEN 'FoodCorp' WHEN (masthead_code IN ('VO', 'VOL', 'GQ')) THEN 'Prestige' WHEN (masthead_code IN ('PU', 'RN')) THEN 'NewsPerform' WHEN (masthead_code IN ('NWS', 'KS', 'BS')) THEN 'NewscomauBrands' WHEN (masthead_code = 'CS') THEN 'Code Sports' WHEN (masthead_code = 'BG') THEN 'BrainGains' WHEN (masthead_code IN ('SC', 'SCAFL', 'SCNRL', 'SCBBL', 'SCRAC', 'SCNBL')) THEN 'SuperCoach' WHEN (masthead_code = 'ESC') THEN 'Travel' ELSE 'Other' END","Create a centralized, governed lookup table or a BigQuery view (e.g., `dim_masthead_classification_campaign`) that maps `masthead_code` to `masthead_classification`. Metrics should then join to this lookup table/view to derive the classification, ensuring consistency, ease of maintenance, and improved data governance.",323,3e772890-cbb1-4939-8441-1e1a1463042c
masthead_classification_subscription_movement,Hardcoded Logic|Anti-Pattern,"Similar to campaign performance, the 'Masthead Classification' for subscription movement data (`total_subscriptions_by_masthead_sold_in_channel`, `masthead_classification_subscription_movement`) uses a hardcoded `CASE WHEN` statement. While this classification logic is distinct from the campaign performance one (operating on a different source table), its duplication within the subscription movement context presents the same maintainability challenges and is an anti-pattern.","CASE WHEN (masthead IN ('WT', 'TB', 'TC', 'GC', 'NT', 'TM', 'CP', 'GA')) THEN 'Regional' WHEN (masthead IN ('AA', 'DT', 'HS', 'CM')) THEN 'Metros' WHEN (masthead = 'CS') THEN 'Code Sports' WHEN (masthead = 'TA') THEN 'The Australian' WHEN (masthead IN ('PU', 'RN')) THEN 'NewsPerform' ELSE SAFE_CAST(masthead AS STRING) END","Establish a dedicated, governed lookup table or BigQuery view (e.g., `dim_masthead_classification_subscription`) for `v_subscription_movement` to centralize masthead classification logic. This would improve data governance, reduce redundancy, and ensure consistent application of business rules.",323,3e772890-cbb1-4939-8441-1e1a1463042c
campaign_classification,Hardcoded Logic,"The `Campaign Classification` metric uses a hardcoded `CASE WHEN` statement to categorize campaigns based on `source_system_name` and `campaign_type`. This logic, while specific to campaign classification, is embedded directly in the metric definition, making it less flexible and harder to manage if new campaign types or source systems need to be classified or if the classification rules evolve.",CASE WHEN source_system_name LIKE '%Facebook%' THEN 'Meta' WHEN source_system_name LIKE '%LinkedIn%' THEN 'LinkedIn' WHEN source_system_name LIKE '%Trade Desk%' THEN 'Trade Desk' WHEN campaign_type LIKE '%SEARCH%' THEN 'Google Search' WHEN campaign_type LIKE '%PERFORMANCE_MAX%' THEN 'Google PMAX' ELSE 'Other' END,"Consider creating a `dim_campaign_classification` lookup table or a view that centralizes this logic. This would allow for easier updates to classification rules and promote reusability across other campaign-related metrics or dashboards, improving overall data governance.",323,3e772890-cbb1-4939-8441-1e1a1463042c
meta_subscriptions,Anti-Pattern,"Multiple 'subscriptions by channel' metrics (`meta_subscriptions`, `linkedin_subscriptions`, `tradedesk_subscriptions`, `google_search_subscriptions`, `google_pmax_subscriptions`) are implemented as separate calculated fields. Each uses a `SUM(CASE WHEN ... THEN subscriptions ELSE 0 END)` pattern. While functionally correct, this approach leads to redundant queries if all these metrics are needed simultaneously, as each metric triggers its own scan of the `campaign_performance_consol` table.",SELECT SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscriptions ELSE 0 END) AS Meta_Subs FROM `ncau-data-newsquery-sit.qvr_consumer.campaign_performance_consol` WHERE campaign_name LIKE 'AOD%' AND date >= '2023-07-03',"Instead of separate calculated fields, create a single aggregated view or leverage the existing `Campaign_Classification` dimension to group subscriptions by channel. This would enable fetching all channel-specific subscription counts with a single, more efficient query, reducing query overhead and potentially improving dashboard load times.",323,3e772890-cbb1-4939-8441-1e1a1463042c
spend_facebook_aod,Hardcoded Logic,"Many core metrics (e.g., `spend_facebook_aod`, `subscriptions_facebook_aod`, `clicks_facebook_aod`, `spend_google_aod`, `subscriptions_google_aod`, `clicks_by_fy_week_masthead_source_aod`, `spend_by_fy_week_masthead_source_aod`, `total_subscriptions_by_masthead_sold_in_channel`, `meta_subscriptions`, `linkedin_subscriptions`, `tradedesk_subscriptions`, `google_search_subscriptions`, `google_pmax_subscriptions`, `subscriptions_last_7_days`, `cost_last_7_days`) use a hardcoded start date filter (`date >= '2023-07-03'`). This makes the dashboard's data static from that point, requiring manual updates to extend the reporting period or adjust for fiscal year changes, which is not scalable.",date >= '2023-07-03',"Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls) or relative date functions (e.g., `DATE_TRUNC(CURRENT_DATE(), YEAR)` for current fiscal year, if applicable) to ensure the dashboard remains current and flexible without manual SQL modifications.",323,3e772890-cbb1-4939-8441-1e1a1463042c
All metrics,Hardcoded Logic / Anti-Pattern,"An identical, lengthy `CASE` statement is used in all 9 metrics to map `gl_publication_code` or `publication_name` to a standardized publication name. This is highly redundant, error-prone, and difficult to maintain. Any change to publication mapping requires updating 9 separate metric definitions, increasing the risk of inconsistencies and bugs.","CASE
  WHEN (CASE WHEN (t0.gl_publication_code = 'Post Courier') THEN 'PNG' ELSE t0.publication_name END) IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
  WHEN (CASE WHEN (t0.gl_publication_code = 'Post Courier') THEN 'PNG' ELSE t0.publication_name END) IN ('Weekly Times') THEN 'Weekly Times'
  ...
  ELSE NULL
END","Create a dedicated dimension table (e.g., `dim_publication_mapping`) that stores the `gl_publication_code`, `publication_name`, and their corresponding `mapped_publication_name`. This dimension table should be joined into the `OSandFACT` CTE or the main query, replacing the hardcoded `CASE` statement with a simple lookup. This centralizes the logic, improves maintainability, and ensures consistency across all metrics.",325,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"total_budget_volume, prior_period_budget_amount, prior_period_budget_amount_all_sales_channels, ytd_actual_amount, adjusted_daily_budget_volume, adjusted_daily_actual_volume",Hardcoded Logic / Anti-Pattern,"A complex `CASE` statement is used in 6 metrics to categorize `os_level_10` into sales channels (e.g., 'Retail', 'Alternative Channels', 'Subscriptions'). This logic is duplicated and hardcoded within each metric's SQL, making it inflexible and prone to inconsistencies if business rules for channel categorization change. It also obscures the business logic within the metric definition.","(CASE WHEN (t0.os_level_10 IN ('Convenience Stores / Service Stations', 'Newsagencies', 'Supermarkets')) THEN 'Retail' ELSE (CASE WHEN (t0.os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels' WHEN (t0.os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations' WHEN (t0.os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies' WHEN (t0.os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions' WHEN (t0.os_level_10 IN ('Supermarkets')) THEN 'Supermarkets' ELSE 'Unspec Channel' END) END)","Create a dedicated dimension table (e.g., `dim_sales_channel_category`) that maps `os_level_10` values to their respective `sales_channel_category`. This dimension table should be joined into the `OSandFACT` CTE or the main query, replacing the hardcoded `CASE` statement with a simple lookup. This approach centralizes business rules, improves readability, and simplifies maintenance.",325,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"adjusted_daily_budget_volume, adjusted_daily_actual_volume",Hardcoded Logic / Anti-Pattern / Potential Bug,"The logic for calculating 'adjusted daily volume' is excessively complex, nested, and relies on hardcoded division factors and specific publication names. This makes it extremely difficult to understand, debug, and maintain. A critical logical flaw exists with the `OR (TRUE)` condition within a `CASE` statement, which effectively nullifies the preceding conditions for 'The Courier Mail' and 'The Australian', potentially leading to incorrect calculations for these publications.","WHEN ((t0.publication_name = 'The Courier Mail' OR t0.publication_name = 'The Australian') OR (TRUE)) THEN (
            CASE
              WHEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN 'M-F' WHEN (t0.day_of_week = 'Sat') THEN 'SAT' WHEN (t0.day_of_week = 'Sun') THEN 'Sun' ELSE NULL END) = 'M-F' THEN (SAFE_DIVIDE(t0.Budget_Volume, 4)*5)
              ELSE t0.Budget_Volume
            END
          )","1. **Immediate Fix:** Remove the `OR (TRUE)` condition from the `CASE` statement to ensure the intended logic for 'The Courier Mail' and 'The Australian' is applied. 2. **Long-term Refactoring:** Externalize this complex daily adjustment logic. Consider creating a `dim_publication_daily_factors` table that maps publication types, day-of-week categories, and their corresponding adjustment factors. This would significantly simplify the SQL, improve transparency of business rules, and allow for easier updates to adjustment logic without modifying metric definitions.",325,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"All metrics, ytd_actual_amount",Hardcoded Logic,"The fiscal year `FY2025` is hardcoded in the `WHERE` clause of the initial CTE for all metrics. Additionally, the YTD calculation in `ytd_actual_amount` uses a hardcoded fiscal week `40`. This prevents the dashboard from automatically rolling over to the next fiscal year or adjusting the YTD period without manual updates to each metric, leading to outdated data over time.","AND os.gl_hierarchy_code = 'FY2025'
-- and for ytd_actual_amount:
WHEN 40 <= t0.fy_year_week_number","Implement dynamic fiscal year and week filtering. This can be achieved by: 1. Utilizing a Looker Studio parameter or control for users to select the fiscal year. 2. Deriving the current fiscal year and week dynamically from the `v_asl_DIM_calendar` table or a system date function. 3. For YTD, determine if 'week 40' is a fixed business rule or if it should be relative to the current fiscal year's start or a user-defined period. If fixed, document it clearly; if dynamic, implement logic to derive it.",325,6a26c78f-0070-4fb3-88b8-691ee4a4485a
calculated_revenue_from_click_sum,Hardcoded Logic|Anti-Pattern,"The `calculated_revenue_from_click_sum` metric, and its 'Wine filtered' counterpart, contain a highly complex and extensive `CASE` statement to categorize newsletters based on `newsletter_send_email_name` and `newsletter_subject`. This exact same categorization logic is duplicated in the `newsletter_category_dim` dimension. Additionally, the revenue calculation embeds hardcoded rates (0.16 and 0.02) directly within this `CASE` statement. This approach is brittle, difficult to maintain, and prone to errors if new categories or rates are introduced, or if existing naming conventions change. The duplication of this logic across multiple metrics and dimensions is a significant anti-pattern.","CASE WHEN (SAFE.REGEXP_CONTAINS(CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'BREAKING|LATESTNEWS_ALERT')) THEN 'Breaking' ... ELSE 'Other' END, 'Subscriber only|Front page')) THEN 0.160000 ELSE 0.020000 END","Extract the newsletter categorization logic into a dedicated, governed dimension within the data model (e.g., a view or a new column in `newsletter_activity` if appropriate). This dimension should ideally be driven by a lookup table for categories and their associated rates, rather than hardcoded `REGEXP_CONTAINS` statements. This would centralize the logic, improve maintainability, and allow for easier updates to categories and revenue rates.",326,f79368a4-e0e4-4e11-89f6-352a9aedf50d
total_send_sum_wine_filtered,Anti-Pattern|Duplication,"A significant number of metrics (e.g., Total Sends, Bounces, Delivered, Opens, Clicks, Unsubscribes, Unique Clicks/Opens, and all Rate metrics) are duplicated with a `_wine_filtered` suffix. These 'filtered' metrics apply a hardcoded `WHERE SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name AS STRING), 'WINE|Wine|wine')` clause. This creates unnecessary metric proliferation, makes the dashboard less flexible for ad-hoc analysis of other categories, and increases maintenance overhead. If the definition of a 'Wine' newsletter changes, all these duplicated metrics would need to be updated.","SELECT SUM(total_send) FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` WHERE SAFE.REGEXP_CONTAINS(SAFE_CAST(newsletter_send_email_name AS STRING), 'WINE|Wine|wine')","Remove the duplicated `_wine_filtered` metrics. Instead, leverage Looker Studio's filtering capabilities by either: 
1. Creating a dashboard-level filter control for `newsletter_send_email_name` that users can interact with.
2. Creating a boolean dimension (e.g., `is_wine_newsletter`) in the data model using `SAFE.REGEXP_CONTAINS(newsletter_send_email_name, 'WINE|Wine|wine')` and using this dimension for filtering within the dashboard or specific charts. This centralizes the 'Wine' definition and allows for dynamic filtering.",326,f79368a4-e0e4-4e11-89f6-352a9aedf50d
Across all metrics,Anti-Pattern,"All metrics share an identical, complex `WHERE` clause for filtering `subscription_movement_count_sub_type`, `masthead`, `classification_level_2`, and `offer_category_group_name`. This extensive repetition makes maintenance difficult, increases the risk of inconsistencies if the base filtering logic needs to change, and leads to inefficient query generation.","WHERE
  (subscription_movement_count_sub_type = 'acquisition' OR subscription_movement_count_sub_type = 'reactivation_30day_acquisition' OR subscription_movement_count_sub_type = 'switch_acquisition')
  AND masthead IN ('AA', 'CM', 'CP', 'CS', 'DT', 'GA', 'GC', 'HS', 'NT', 'PU', 'RN', 'TA', 'TB', 'TC', 'TM', 'WT', 'SC')
  AND classification_level_2 != 'Metered Access'
  AND offer_category_group_name != 'Non Consumer Offer'","Encapsulate this common filtering logic within a dedicated base view or a common table expression (CTE). All dashboard metrics should then query this consolidated view/CTE. This approach significantly improves maintainability, ensures consistency, and allows for better query optimization.",327,a4975f7b-4ea2-49f2-bb3c-213a94741b78
"bau_always_on_digital_movement_count, premium_breach_movement_count, bau_general_offer_movement_count, third_party_offer_movement_count_not_available_channel, other_channel_acquisition_count, bau_always_on_digital_acquisition_count_non_consumer_offer, premium_breach_acquisition_count, bau_general_offer_acquisition_count, third_party_offer_acquisition_count_app_subscribers, third_party_offer_acquisition_count_source_system",Hardcoded Logic / Anti-Pattern,"Numerous individual metrics are created to count or sum acquisitions for specific `sold_in_channel` values (e.g., 'Bau Always On Digital', 'Premium Breach') or `classification_level_2` / `subscription_source_system_code` values. This is implemented using `SUM(CASE WHEN sold_in_channel = 'X' THEN ... END)` or `COUNT(CASE WHEN sold_in_channel = 'X' THEN 1 END)`. This approach is highly inflexible and not scalable; adding a new channel or category requires creating a new metric, modifying the dashboard, and potentially redeploying.","SUM(CASE WHEN sold_in_channel = 'Bau Always On Digital' THEN subscription_movement_count END) AS Bau_Always_On_Digital_Movement_Count
-- OR --
COUNT(CASE WHEN classification_level_2 IN ('App Subscribers') THEN 1 END) AS thirdParty_Offer_Acquisition_Count_App_Subscribers","Leverage the existing `Dashboard Channel` dimension and create a single, generic 'Acquisition Movement Count' or 'Acquisition Count' metric. The dashboard can then use this single metric and slice it by the `Dashboard Channel` dimension, allowing for dynamic analysis of all channels without needing to create new metrics. For other categorizations (e.g., App Subscribers, Source System), define these as dimensions or attributes in a consolidated data model, allowing for flexible filtering and grouping rather than hardcoded measures.",327,a4975f7b-4ea2-49f2-bb3c-213a94741b78
"external_display_bau_aod_count, facebook_content_amplification_bau_aod_count, sem_bau_aod_count, general_online_bau_aod_count, facebook_bau_aod_count, microsoft_ads_bing_creative_bau_aod_count, google_pmax_bau_aod_count, google_content_amplification_bau_aod_count, linkedin_content_amplification_bau_aod_count, rokt_creative_bau_aod_count, linkedin_creative_centre_bau_aod_count, microsoft_ads_pmax_bau_aod_count, reddit_content_amplification_bau_aod_count, twitter_creative_bau_aod_count, other_bau_aod_uncategorized_source_channel_count",Hardcoded Logic / Anti-Pattern,"A large number of metrics are created to count acquisitions based on specific `sold_in_source_channel` values AND a specific `sold_in_channel` ('Bau Always On Digital'). The `other_bau_aod_uncategorized_source_channel_count` metric is particularly brittle as it explicitly lists all *known* source channels in a `NOT IN` clause. This is a severe anti-pattern for scalability and maintainability, as any new source channel requires code modification.","COUNT(CASE WHEN sold_in_source_channel = 'External Display' AND sold_in_channel = 'Bau Always On Digital' THEN 1 END) AS ExternalDisplay_Count
-- OR --
COUNT(CASE WHEN sold_in_channel = 'Bau Always On Digital' AND sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', ...) THEN 1 END) AS Other_BAU_Count","Introduce a `Source Channel` dimension. Create a single generic 'Acquisition Count by Source Channel' metric. The dashboard can then use this metric and slice it by both `Dashboard Channel` and `Source Channel` dimensions. This allows for dynamic analysis of all channel/source channel combinations without requiring new metrics for each. The 'Other' category should be handled dynamically by grouping, not by explicitly listing all known values in a `NOT IN` clause.",327,a4975f7b-4ea2-49f2-bb3c-213a94741b78
revenue_type_grouped_digital_fy,Anti-Pattern,"The complex `CASE` statement used to define 'Revenue Type Grouped' (e.g., 'DIGITAL (excl.XTEND)', 'PRINT', 'XTEND ONLY') is hardcoded and repeated across at least three different metrics (`revenue_group_subtype_digital_excl_xtend_fy`, `revenue_type_grouped_digital_fy`, `gross_revenue_amount_print_monthly_industry_pub`). This creates a significant maintenance burden, as any change to the revenue grouping logic requires updating multiple SQL queries independently, increasing the risk of inconsistencies and errors.",(CASE WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END) = 'DIGITAL' THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END) = 'PRINT' THEN 'PRINT' WHEN (CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END) = 'XTEND' THEN 'XTEND ONLY' ELSE NULL END),"Refactor the `revenue_type_grouped` logic into a dedicated derived column within the `adsales_performance` table or a separate lookup table/view. This would centralize the business logic, improve query readability, and simplify future maintenance. Alternatively, if Looker Studio supports it, define this as a calculated field at the data source level once, ensuring consistency across all dependent metrics.",328,61f1feb4-fc3e-4bee-b987-84c86cfe6425
unified_publication_name_digital_fy,Hardcoded Logic,"Multiple metrics (`unified_publication_name_digital_fy`, `revenue_group_subtype_digital_excl_xtend_fy`, `revenue_type_grouped_digital_fy`, `gross_revenue_amount_print_monthly_industry_pub`) explicitly filter for `financial_year IN ('2024', '2025')`. This hardcoding makes the dashboard static and requires manual updates annually to remain current, increasing maintenance overhead and the risk of displaying outdated data.","SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')","Implement dynamic financial year filtering. This could involve using Looker Studio's date range controls, or if the underlying data model supports it, adding a flag for 'current_financial_year' or 'next_financial_year' in the `adsales_performance` table. Alternatively, use SQL functions to derive the current/future financial years relative to the current date, making the queries self-updating and reducing manual intervention.",328,61f1feb4-fc3e-4bee-b987-84c86cfe6425
total_active_weeks_28_days_by_masthead_group,Hardcoded Logic,"This metric uses a hardcoded `CASE` statement to categorize mastheads into groups like 'Metros', 'The Australian', 'Regionals', 'Code Sports', and 'Other'. This approach is inflexible and prone to errors if new mastheads are introduced, existing ones change categories, or business definitions evolve, requiring manual updates to the SQL logic.","CASE WHEN (t0_subscriber_details.masthead IN ('CM', 'AA', 'HS', 'DT')) THEN 'Metros' WHEN (t0_subscriber_details.masthead IN ('TA')) THEN 'The Australian' WHEN (t0_subscriber_details.masthead IN ('NT', 'GA', 'TB', 'GC', 'WT', 'TM', 'CP', 'TC')) THEN 'Regionals' WHEN (t0_subscriber_details.masthead IN ('CS')) THEN 'Code Sports' ELSE 'other' END","Replace the hardcoded `CASE` statement with a join to a governed lookup table for masthead categories. This centralizes business logic, improves maintainability, ensures consistency across all reports using masthead groupings, and allows for easier updates without modifying dashboard SQL.",329,bb0005fc-e838-471c-a79c-157d08e8b75e
total_records_by_dttv_engagement,Hardcoded Logic|Anti-Pattern,"This metric employs a hardcoded `CASE` statement to classify records based on engagement with the 'dttv' site section. While simple for a binary classification, this pattern, when repeated for other site sections, leads to duplicated logic and makes it difficult to manage or modify engagement definitions centrally.",CASE WHEN (t0_subscriber_top_5_site_section_details.site_section = 'dttv') THEN 'Engaged with DTTV' ELSE 'Havent Engaged' END,"For simple binary classifications, this might be acceptable. However, if the number of specific site section engagements grows or the definition of 'engagement' becomes more complex, consider defining engagement types in a configuration table or a more robust data model. This would prevent repeated `CASE` statements for each specific site section.",329,bb0005fc-e838-471c-a79c-157d08e8b75e
total_records_by_mindgames_engagement,Hardcoded Logic|Anti-Pattern,"Similar to the 'dttv' engagement metric, this metric uses a hardcoded `CASE` statement for 'mind-games' site section engagement. This is a recurring anti-pattern for categorizing site section interactions, leading to redundant logic and potential inconsistencies if the definition of 'engagement' changes or new site sections are added.",CASE WHEN (t0_subscriber_top_5_site_section_details.site_section = 'mind-games') THEN 'Played Mindgames' ELSE 'Not Played' END,"Implement a standardized approach for categorizing site section engagements, potentially using a lookup table or a more generic function/view that can be reused. This would prevent repeated `CASE` statements for each specific site section and improve overall data model consistency.",329,bb0005fc-e838-471c-a79c-157d08e8b75e
unique_subscribers_by_tenure_cohort,Anti-Pattern,"Multiple metrics across the dashboard (e.g., 'Unique Subscribers by Tenure Cohort Group', 'Count of Subscriber Churn Scores by Delivery Medium', 'Total Subscriber Active Weeks (Last 28 Days) by Masthead Group') repeatedly use `LEFT JOIN UNNEST(t0.subscriber_details)` and apply the same `WHERE` clause filters (`t0.member_type = 'subscriber' AND t0_subscriber_details.customer_type = 'Consumer'`). This indicates a lack of a consolidated base view or model for 'consumer subscribers', leading to repetitive and potentially inconsistent filtering logic.",LEFT JOIN UNNEST(t0.subscriber_details) AS t0_subscriber_details WHERE t0.member_type = 'subscriber' AND t0_subscriber_details.customer_type = 'Consumer',"Create a consolidated BigQuery view or dbt model (e.g., `consumer_subscriber_base`) that pre-applies these common joins and filters. This would simplify metric SQL, improve query performance by materializing common joins, and ensure consistent data definitions for 'consumer subscribers' across all dependent metrics.",329,bb0005fc-e838-471c-a79c-157d08e8b75e
buyer_list_filtered_by_advertiser_fiscal_period,Hardcoded Logic,"The 'Filtered Buyer List' metric embeds multiple hardcoded filters for specific fiscal periods ('FY25 Q4', '2025-05-01') and a fixed list of advertisers ('Kmart Corporation *', 'Myer *', 'Target Corporation *'). This design severely limits the metric's reusability and flexibility, requiring manual SQL modifications for any change in reporting period or target advertisers. It suggests these filters might be better managed as dynamic dashboard controls.","AND CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) IN ('FY25 Q4')
    AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH)) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-05-01')
    AND t0.advertiser IN ('Kmart Corporation *', 'Myer *', 'Target Corporation *')","Parameterize these filters using Looker Studio controls (e.g., date range pickers, dropdowns for advertisers/fiscal periods) to enable dynamic user interaction and enhance metric reusability. If these are specific, fixed business scenarios, consider creating separate, more granular metrics or views, or externalizing these values into a configuration table.",330,783f341c-8660-4e90-bab8-9bc860119cf5
buyer_list_filtered_by_advertiser_fiscal_period,Hardcoded Logic,"Both 'Filtered Buyer List' and 'Total Revenue Net' metrics utilize a hardcoded list of `source_transactiontype` values. This approach is brittle; any changes to transaction type definitions or the introduction of new types will necessitate manual updates to the SQL in both metrics, increasing maintenance burden and the risk of inconsistencies across the dashboard.","UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')","Replace the hardcoded list with a join to a governed lookup table for transaction types. This centralizes definitions, improves data consistency, and simplifies maintenance. Alternatively, if these are truly fixed business categories, consider defining them as a view or a User-Defined Function (UDF) for reusability.",330,783f341c-8660-4e90-bab8-9bc860119cf5
total_revenuenet_by_advertiser_filtered_transaction_type,Hardcoded Logic,"Both 'Filtered Buyer List' and 'Total Revenue Net' metrics utilize a hardcoded list of `source_transactiontype` values. This approach is brittle; any changes to transaction type definitions or the introduction of new types will necessitate manual updates to the SQL in both metrics, increasing maintenance burden and the risk of inconsistencies across the dashboard.","UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')","Replace the hardcoded list with a join to a governed lookup table for transaction types. This centralizes definitions, improves data consistency, and simplifies maintenance. Alternatively, if these are truly fixed business categories, consider defining them as a view or a User-Defined Function (UDF) for reusability.",330,783f341c-8660-4e90-bab8-9bc860119cf5
digital_gross_revenue_filtered,Hardcoded Logic / Anti-Pattern,"An extensive and identical set of hardcoded exclusion/inclusion lists for `unified_publication_name`, `publication_name`, `source_system_code`, and `product_group` is repeated across 'Digital Gross Revenue (Filtered)', 'Digital Gross Revenue 2025 (Content Filtered)', 'Digital Gross Revenue 2026 (Content Filtered)', and 'Distinct Digital Bookings (Current FY, Content Filtered)'. This makes maintenance difficult, error-prone, and violates the DRY (Don't Repeat Yourself) principle. Any change to these business rules requires updating multiple metric definitions.","WHERE t0.revenue_type = 'Digital' AND (STRPOS(t0.unified_publication_name, 'ADMIN') <= 0 OR STRPOS(t0.unified_publication_name, 'admin') <= 0 OR STRPOS(t0.unified_publication_name, 'Run') <= 0 OR STRPOS(t0.unified_publication_name, 'Taboola') <= 0 OR STRPOS(t0.unified_publication_name, 'CODE') <= 0 OR STRPOS(t0.unified_publication_name, 'CodeBet') <= 0 OR STRPOS(t0.unified_publication_name, 'Punters.com.au') <= 0 OR STRPOS(t0.unified_publication_name, 'odds.com.au') <= 0 OR STRPOS(t0.unified_publication_name, 'RACENET') <= 0 OR STRPOS(t0.unified_publication_name, 'Racenet App') <= 0 OR STRPOS(t0.unified_publication_name, 'SUDDENLY') <= 0 OR STRPOS(t0.unified_publication_name, 'SUPERCOACH') <= 0 OR STRPOS(t0.unified_publication_name, 'Sky News') <= 0 OR STRPOS(t0.unified_publication_name, 'Stockhead') <= 0) AND t0.publication_name NOT IN ('racenet.com.au', 'punters.com.au', 'odds.com.au', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'TASTE.ADMIN', 'TAUS.ADMIN', 'Stockhead', 'SkyNews', 'SKYNEWS', 'RACENET', 'NEWS.ADMIN', 'KIDSPOT.ADMIN', 'GQ.ADMIN', 'ESCAPE.ADMIN', 'DELICIOUS.ADMIN', 'BODYANDSOUL.ADMIN', 'ADMIN.TCM', 'ADMIN.SALES', 'ADMIN.DTM', 'ADMIN.HWT') AND t0.source_system_code NOT IN ('LGBPUB') AND t0.product_group IN ('Free News & Lifestyle', 'The Australian & Prestige', 'State & Communities')","Centralize these common filtering rules. This can be achieved by creating a dedicated BigQuery view (e.g., `v_adsales_revenue_client_content_filtered`) that applies these filters, or by defining a common Looker Studio data source with these filters applied at the data source level. For the exclusion lists, consider managing them in a lookup table within the data warehouse and joining to it, or using `NOT IN` with a subquery if the list is dynamic.",331,7a48a00d-07f9-4bbe-9333-a282d7182754
digital_gross_revenue_2025_content_filtered,Hardcoded Logic,"The financial years ('2025', '2026') are hardcoded within `CASE` statements and `IN` clauses for specific year-over-year metrics. This design requires manual updates to the metric definitions each financial year to reflect current and previous periods, leading to increased maintenance and potential for errors.","SUM(CASE WHEN SAFE_CAST(t0.financial_year AS STRING) = '2025' THEN t0.gross_revenue_amount ELSE NULL END) ... SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026')","Utilize Looker Studio's built-in date range controls or parameters to dynamically select financial years. Alternatively, define relative financial year flags (e.g., `is_current_fy`, `is_previous_fy`) in the underlying data model to make metrics evergreen and reduce manual intervention.",331,7a48a00d-07f9-4bbe-9333-a282d7182754
digital_gross_revenue_filtered,Anti-Pattern / Inefficient Logic,"The use of multiple `STRPOS(t0.unified_publication_name, 'string') <= 0 OR STRPOS(...) <= 0` for excluding publication names is verbose, less readable, and potentially less performant than using `NOT CONTAINS_SUBSTR` or `NOT LIKE` with wildcards. The `OR` conditions with `STRPOS <= 0` effectively create a series of `AND NOT` conditions, which can be confusing.","(STRPOS(t0.unified_publication_name, 'ADMIN') <= 0 OR STRPOS(t0.unified_publication_name, 'admin') <= 0 OR STRPOS(t0.unified_publication_name, 'Run') <= 0 ...)","Refactor `STRPOS` conditions to use `NOT CONTAINS_SUBSTR(t0.unified_publication_name, 'ADMIN') AND NOT CONTAINS_SUBSTR(t0.unified_publication_name, 'admin')` for clarity. For extensive lists of patterns, consider a lookup table for excluded publication patterns or a more concise regex if supported and appropriate.",331,7a48a00d-07f9-4bbe-9333-a282d7182754
digital_gross_revenue_2026_vs_2025_diff_q1_content_adtype,Inconsistent Logic,"The business description explicitly states that this difference metric 'does NOT apply the publication/source system filters seen in other digital revenue metrics.' While documented, this intentional inconsistency means the difference is calculated on a broader dataset than the individual year metrics it's comparing against (if those were displayed in isolation). This can lead to user confusion or misinterpretation if they assume consistent filtering across related metrics.","WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026') AND t0.fy_quarter_of_year_name = 'Q1' AND t0.fin_adtype_name IN ('Native (Targeted)', 'Native (Non-Targeted)', 'Content Discovery (Targeted)', 'Content Discovery (Non-Targeted)', 'Content Integration (Non-Targeted)', 'Content Integration (Targeted)')","Evaluate if this intentional inconsistency is truly necessary for the business question. If so, ensure prominent visual cues or clear annotations on the dashboard highlight the different filtering applied. Consider creating a consistent base metric or view that applies all common filters, and then building variations on top, or clearly separating these metrics visually to prevent direct, misleading comparisons.",331,7a48a00d-07f9-4bbe-9333-a282d7182754
"All metrics (e.g., dim_advertiser_name, agg_total_final_price_amount)",Anti-Pattern / Hardcoded Logic,"All metrics on the dashboard share an identical, extensive set of hardcoded WHERE clause filters. This includes specific date ranges (`booking_line_created_date >= ""2024-01-01""`), status exclusions (`booking_line_status_code <> ""Cancelled""`), active row flags (`is_current_active_row_flag = ""Y""`), style exclusions (`style_name <> ""ROP COMPOSITE""`), source system codes (`dw_source_system_code = ""ADPT""`), media types (`media_type_code = ""Digital""`), and financial amount thresholds (`basic_additions_amount > 0`). This duplication makes global filter changes cumbersome, increases the risk of inconsistencies, and reduces the reusability of individual metrics.","WHERE SAFE_CAST(bld.booking_line_created_date AS DATE) >= ""2024-01-01"" AND SAFE_CAST(bld.booking_line_status_code AS STRING) <> ""Cancelled"" AND SAFE_CAST(bld.is_current_active_row_flag AS STRING) = ""Y"" AND SAFE_CAST(bld.style_name AS STRING) <> ""ROP COMPOSITE"" AND SAFE_CAST(ad.is_current_active_row_flag AS STRING) = ""Y"" AND SAFE_CAST(bld.dw_source_system_code AS STRING) = ""ADPT"" AND SAFE_CAST(bld.media_type_code AS STRING) = ""Digital"" AND SAFE_CAST(blf.basic_additions_amount AS BIGNUMERIC) > 0","Centralize these common filters. If these filters represent universal business rules for 'active' or 'relevant' booking lines, they should be pushed down into the underlying BigQuery views (`v_booking_line_dim`, `v_booking_line_fct`, `v_advertiser_dim`). Alternatively, if they are specific to this dashboard, they should be applied at the Looker Studio data source level or managed via dashboard-wide controls/parameters to ensure consistency and ease of maintenance.",332,19077aa0-64b6-4ca2-b0ce-4e328780e073
agg_total_final_price_amount_filtered,Hardcoded Logic / Anti-Pattern,"The `agg_total_final_price_amount_filtered` metric is an extreme example of hardcoded logic. In addition to the common dashboard filters, it includes numerous highly specific, hardcoded values for dates, booking line numbers, advertiser names, and booking line names. This makes the metric non-reusable, inflexible, and suggests it's designed for a single, very narrow use case, which undermines the purpose of a dynamic dashboard.","AND SAFE_CAST(bld.last_modified_datetime AS DATETIME) >= DATETIME '2025-03-20' AND SAFE_CAST(bld.last_modified_datetime AS DATETIME) < DATETIME_ADD(DATE '2025-03-26', INTERVAL 1 DAY) AND SAFE_CAST(bld.booking_line_number AS STRING) IN ('1942660') AND SAFE_CAST(ad.advertiser_name AS STRING) IN ('Harvey Norman Holdings Head Office') AND SAFE_CAST(bld.booking_line_name AS STRING) IN ('RON mob CPM - medrec roadb mob') AND SAFE_CAST(bld.booking_line_created_date AS DATE) IN (DATE '2025-03-24') AND SAFE_CAST(bld.booking_line_start_date AS DATE) IN (DATE '2025-03-27') AND SAFE_CAST(bld.booking_line_end_date AS DATE) IN (DATE '2025-04-16') AND DATETIME_TRUNC(SAFE_CAST(bld.last_modified_datetime AS DATETIME), SECOND) IN (DATETIME '2025-03-24T16:30:34')","Refactor this metric. If these filters are intended to be dynamic, they should be implemented using Looker Studio's native filter controls or parameters, allowing users to select specific values. If this metric serves a very specific, non-dynamic reporting need, consider if it truly belongs on a general 'Self Learning Segments Report' dashboard, or if it should be part of a more specialized, ad-hoc report. Avoid hardcoding specific business entity IDs or names directly within metric SQL.",332,19077aa0-64b6-4ca2-b0ce-4e328780e073
daily_subscription_target_national_sports,Hardcoded Logic,"The metric's SQL logic uses hardcoded string values ('National Sports Newsroom', 'Code', 'CODE') within a REGEXP_CONTAINS clause to filter `publication_group`. This approach is inflexible; any changes or additions to these publication groups would require manual modification of the SQL query, increasing maintenance overhead and risk of error. It also obscures the business definition of these groups within the code.","WHERE SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.publication_group AS STRING), 'National Sports Newsroom|Code|CODE')","Replace the hardcoded REGEXP_CONTAINS logic with a join to a governed lookup table for publication groups. This table should contain a 'newsroom_category' or 'target_group_type' column that can be maintained independently, allowing for easier updates and better data governance. Alternatively, if these are fixed categories, consider defining them as an ENUM type in a schema or a configuration table.",333,4d233abb-3d9b-4942-98b0-3989e8986970
total_visits_by_segment_group_hour_filtered,Hardcoded Logic,"The SQL logic hardcodes the `visit_date` to '2025-03-11' and explicitly filters `Segment_Group` to a fixed list ('Low', 'GroupA', 'GroupB', 'High'). This severely limits the dashboard's flexibility, preventing dynamic daily updates and restricting analysis to a predefined set of segments. The `LIMIT 100` clause suggests that only a partial dataset is being displayed.","WHERE t0.visit_date = DATE '2025-03-11' AND t0.Segment_Group IN ('Low', 'GroupA', 'GroupB', 'High') GROUP BY t0.Segment_Group, visit_hour ORDER BY visit_hour ASC LIMIT 100;","Replace hardcoded dates with a dashboard parameter (e.g., a date range filter) or a dynamic date function (e.g., `CURRENT_DATE()`). For `Segment_Group`, consider using a lookup table for maintainability or allowing dynamic filtering via dashboard controls. Review and remove `LIMIT 100` if the intention is to show complete data.",334,1bcad774-082f-442e-94b0-7a65967fc751
total_visits_by_segment_group,Hardcoded Logic,"This metric also hardcodes the `visit_date` to '2025-03-11', making the dashboard static for daily reporting. The presence of `LIMIT 100` further indicates potential data truncation.",WHERE t0.visit_date = DATE '2025-03-11' GROUP BY t0.Segment_Group ORDER BY total_visits DESC LIMIT 100;,Standardize date filtering across all dashboard metrics using a dashboard parameter or a consistent dynamic date function. Review and remove `LIMIT 100` if full data is required.,334,1bcad774-082f-442e-94b0-7a65967fc751
total_visits_detailed,Hardcoded Logic|Data Mismatch,"This metric hardcodes the `visit_date` to '2025-03-04', which is inconsistent with the '2025-03-11' date used in other 'visits' and 'sales' metrics within the same dashboard. This inconsistency is a critical issue for a 'Daily Trading Dashboard' and will lead to inaccurate comparisons and analysis. The `LIMIT 100` clause may also hide complete data.","WHERE t0.visit_date = DATE '2025-03-04' GROUP BY t0.Segment, t0.Segment_Group, t0.brand, visit_hour LIMIT 100;","Prioritize standardizing date filtering across all dashboard metrics using a single dashboard parameter or a consistent dynamic date function (e.g., `CURRENT_DATE()`). This is paramount for data integrity and accurate daily reporting. Review and remove `LIMIT 100` if full data is required.",334,1bcad774-082f-442e-94b0-7a65967fc751
total_sales_detailed,Hardcoded Logic,The metric hardcodes the `subscription_date` to '2025-03-11'. This prevents the dashboard from dynamically updating for current daily data. The `LIMIT 100` clause may also hide complete data.,"WHERE t0c0d1.subscription_date = DATE '2025-03-11' GROUP BY t0c0d1.Intro_Offer, t0c0d1.PackageDefinitonCode, t0c0d1.Segment, t0c0d1.Segment_Group, t0c0d1.brand, subscription_hour LIMIT 100;","Replace hardcoded dates with a dashboard parameter or a dynamic date function (e.g., `CURRENT_DATE()`). Review and remove `LIMIT 100` if full data is required.",334,1bcad774-082f-442e-94b0-7a65967fc751
total_c_score_target_by_publication_group_weekly,Hardcoded Logic,"The SQL logic for the 'Total C-Score Target by Publication Group (Weekly)' metric contains hardcoded date ranges (`week_ending >= DATE '2025-07-21' AND week_ending <= DATE '2025-07-27'`). This makes the dashboard static and ineffective as a 'Daily C-Score report', as it will always display data for a specific, fixed week rather than the current or selected period.",WHERE week_ending >= DATE '2025-07-21' AND week_ending <= DATE '2025-07-27',"Replace hardcoded dates with dynamic date parameters or Looker Studio's built-in date range controls. For example, use `CURRENT_DATE()` and `DATE_SUB()` functions in SQL, or integrate with Looker Studio's date filters to allow users to select the desired reporting period.",335,1147dd47-ccea-49cb-bff0-6019f3249bc9
total_pv_by_organisation_keyword,Anti-Pattern,"Multiple metrics (e.g., 'Total Page Views by Organisation/Location/Person Keyword', 'Distinct Articles by Organisation/Location/Person Keyword', 'Total Page Views for High Confidence Articles') duplicate the exact same complex `article_summary` CTE (which uses UNION ALL to unnest different category types) and `article_thumbnail` CTE. This leads to redundant code, increased maintenance overhead, and potential for inconsistencies if changes are needed across these similar metrics.","WITH
  article_thumbnail AS (
    SELECT
      content_id,
      `if`(ARRAY_LENGTH(contentrelatedthumbnail) > 0, concat(""https://content.api.news/v3/images/bin/"", contentrelatedthumbnail[offset(0)]),
        ""https://drive.google.com/file/d/1_LhO6ELGA1exq99eu78EY2HfT_IF_rUW/view?usp=sharing"") AS thumbnailLink,
      content_body
    FROM
      `ncau-data-newsquery-prd.bdm_verity.content_dim`
  ),
  article_summary AS (
    SELECT
      ArticleDateUpdated, ArticleHeadlineDefault, ArticleCanonicalLink, AuthorByline, ArticleID, TotalPV, p.Confidence AS Confidence, p.path AS Keyword, ""Person"" AS Keyword_type
    FROM `ncau-data-newsquery-prd.prstn_verity.t_content_summary`, UNNEST(CategoryPersonComprehend) AS p
    UNION ALL
    SELECT
      ArticleDateUpdated, ArticleHeadlineDefault, ArticleCanonicalLink, AuthorByline, ArticleID, TotalPV, p.Confidence AS Confidence, p.path AS Keyword, ""Organisation"" AS Keyword_type
    FROM `ncau-data-newsquery-prd.prstn_verity.t_content_summary`, UNNEST(CategoryOrganisationComprehend) AS p
    UNION ALL
    SELECT
      ArticleDateUpdated, ArticleHeadlineDefault, ArticleCanonicalLink, AuthorByline, ArticleID, TotalPV, p.Confidence AS Confidence, p.path AS Keyword, ""Location"" AS Keyword_type
    FROM `ncau-data-newsquery-prd.prstn_verity.t_content_summary`, UNNEST(CategoryLocationComprehend) AS p
  )","Create a single, consolidated BigQuery view (e.g., `v_article_keyword_summary`) that pre-processes the `t_content_summary` data by unnesting all relevant categories (Person, Organisation, Location) and assigning `Keyword_type`. This view can then be referenced by all dependent metrics, significantly improving maintainability, consistency, and potentially query performance through BigQuery's caching.",336,05edacf6-0910-4e94-bbe4-00ebc469fc80
distinct_articles_by_sentiment_category,Data Mismatch / Anti-Pattern,"This metric pulls data from a 'SIT' (System Integration Testing) environment (`ncau-data-newsquery-sit`) and uses a different primary source table (`capi_article`) compared to other metrics which use 'PRD' (Production) environment (`ncau-data-newsquery-prd`) and `t_content_summary`. Additionally, the SQL logic is exceptionally complex, involving multiple nested `UNNEST` and `STRUCT` operations, making it difficult to read, debug, and optimize.","FROM
      `ncau-data-newsquery-sit.sdm_capi_content.capi_article`
    WHERE
      1 = 1","Consolidate all data sources to the production environment (`ncau-data-newsquery-prd`) to ensure data consistency and reliability across the dashboard. For the complex `capi_article` data, consider creating a pre-processed, flattened BigQuery view or table in the production environment that extracts and simplifies the nested category information, especially for frequently used dimensions like sentiment. This would greatly improve query readability and maintainability.",336,05edacf6-0910-4e94-bbe4-00ebc469fc80
N/A (applies to multiple metrics),Hardcoded Logic,"The majority of metrics (6 out of 7) are defined with specific, hardcoded dates or date ranges in their WHERE clauses. This practice makes the dashboard static and requires the creation of new metrics for each new reporting period (day/week), which is highly inefficient and unsustainable for a 'Daily' report. It also leads to a proliferation of similar metrics, hindering reusability and maintainability.","Example 1: WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-08-14'
Example 2: WHERE t0.week_ending >= DATE '2025-08-18' AND t0.week_ending <= DATE '2025-08-24'","Implement dynamic date filtering using Looker Studio's date range controls. For daily reports, consider using `CURRENT_DATE()` or `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)` in the underlying views/metrics, or pass date parameters from the dashboard. This would allow a single metric definition to serve all daily/weekly reporting needs.",337,f5e8e7c6-17e2-4ad7-bae5-79dfa8c47c3a
total_c_score_target_q5_20210628_20220626_daily_telegraph,Hardcoded Logic,"Beyond hardcoded dates, this specific metric also hardcodes a filter for a particular 'publication_group' ('The Daily Telegraph'). This further limits the reusability of the metric and necessitates creating duplicate metrics for each publication group that needs to be reported on.",AND t0.publication_group = 'The Daily Telegraph',Parameterize the 'publication_group' using Looker Studio's filter controls or create a dimension for publication group to allow users to select/filter by different groups. This promotes a single source of truth for the C-score target metric across all publication groups.,337,f5e8e7c6-17e2-4ad7-bae5-79dfa8c47c3a
"total_day_target_website_q1_20250814, total_day_target_website_q3_20250815, total_day_target_website_q4_20250314",Anti-Pattern,"Metrics sharing the same `base_metric_id` (`total_day_target_website`) exhibit inconsistent `GROUP BY` clauses. For instance, `total_day_target_website_q3_20250815` groups by `fy_name, publication_group, website`, while others group by `fy_name, website`. This inconsistency can lead to different levels of aggregation and potentially misleading comparisons for what is conceptually the same 'Total Daily Website Target' metric.","Metric 1: GROUP BY t0.fy_name, t0.website
Metric 2: GROUP BY t0.fy_name, t0.publication_group, t0.website","Standardize the `GROUP BY` clauses for metrics derived from the same base. If different aggregation levels are genuinely required, consider defining distinct base metrics or using Looker Studio's aggregation capabilities on a more granular base metric. This ensures consistency and clarity in data interpretation.",337,f5e8e7c6-17e2-4ad7-bae5-79dfa8c47c3a
"usage_hour_dimension_q1, total_jobs_by_date_and_hour_q2, user_hour_combinations_by_hour_q3, creation_date_dimension_q4",Hardcoded Logic,"All metrics rely on hardcoded date filters (e.g., `BETWEEN ""2024-06-12"" AND ""2024-06-19""` or `DATE(creation_time) = ""2024-06-19""`). This makes the dashboard static, requiring manual updates to view current data, and severely limits its utility for ongoing operational monitoring. The 'Total Jobs by Date and Hour' metric, identified as a high-criticality KPI, is particularly impacted by this issue.","WHERE
  DATE(creation_time) BETWEEN ""2024-06-12"" AND ""2024-06-19""","Implement dynamic date filtering using Looker Studio's date range controls or BigQuery's relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)`). Consider creating a base view that handles common date filtering logic to ensure consistency across all dependent metrics.",338,1479f9e9-5993-4969-a5b4-e74112f9134a
"usage_hour_dimension_q1, total_jobs_by_date_and_hour_q2, user_hour_combinations_by_hour_q3, creation_date_dimension_q4",Anti-Pattern,"Common date and time extraction logic, such as `EXTRACT(HOUR FROM DATETIME(creation_time, ""Australia/Sydney""))` and `SAFE_CAST(DATETIME_TRUNC(creation_time, SECOND) AS DATE)`, is repeatedly defined within each metric's SQL. This redundancy increases maintenance overhead and the risk of inconsistencies if the logic needs to be updated (e.g., timezone change).","EXTRACT(HOUR FROM DATETIME(creation_time, ""Australia/Sydney"")) AS usage_hour","Centralize common transformations and dimensions in a shared BigQuery view or a Looker Studio blended data source. This promotes reusability, improves maintainability, and ensures consistent application of business logic across all metrics.",338,1479f9e9-5993-4969-a5b4-e74112f9134a
total_jobs_by_date_and_hour_q2,Anti-Pattern,"The SQL for 'Total Jobs by Date and Hour' uses an unnecessary subquery to count `job_id` per `user_email` and `creation_time`, then sums these counts. Assuming `job_id` is unique per job, this subquery adds complexity without providing additional value, as a direct `COUNT(job_id)` in the outer query, grouped by `creation_date` and `usage_hour`, would achieve the same result more efficiently.","FROM (
  SELECT
    user_email,
    count(job_id) AS total_jobs,
    creation_time
  FROM
    `ncau-data-newsquery-prd.region-US.INFORMATION_SCHEMA.JOBS_BY_PROJECT`
  WHERE
    DATE(creation_time) BETWEEN ""2024-06-12"" AND ""2024-06-19""
  GROUP BY 1, 3
) AS subquery","Simplify the query by removing the redundant subquery. Directly apply `COUNT(job_id)` in the main `SELECT` statement, grouping by `creation_date` and `usage_hour`.",338,1479f9e9-5993-4969-a5b4-e74112f9134a
current_week_closing_subscriptions_digital_filtered,Hardcoded Logic,"All 'Current Week' metrics rely on a hardcoded `dashboard_reference_date` (2025-04-30) within the `DateCalculations` CTE. This means the dashboard will always display data for FY2025, Week 43, regardless of the actual current date, fundamentally breaking its purpose as a 'Current Week' report.","WITH DateCalculations AS (
    SELECT
        DATE(TIMESTAMP '2025-04-30 02:48:10.294788+00', 'Australia/Sydney') AS dashboard_reference_date,
        (EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-04-30 02:48:10.294788+00', 'Australia/Sydney'))) - 1) AS day_of_week_ref,
        DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-04-30 02:48:10.294788+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS week_diff_ref
)","Replace the hardcoded `dashboard_reference_date` with a dynamic function like `CURRENT_DATE()` or `CURRENT_TIMESTAMP()` to ensure the dashboard reflects the actual current fiscal week. Implement robust logic to derive `fy_year` and `fy_week_of_year` dynamically from the current date, potentially leveraging a date dimension table.",339,37641205-ec3e-4184-a5dd-f5ca79248335
current_week_opening_subscriptions_digital_filtered,Anti-Pattern,"The `masthead_group_level1` and `masthead_group_level2` classifications are defined using extensive, complex, and repetitive `CASE` statements across all three metrics. This hardcoded logic is difficult to maintain, prone to errors if new mastheads or classifications are introduced, and violates the DRY (Don't Repeat Yourself) principle.","        CASE
            WHEN (t0.classification_level_2_description = 'The Oz' OR t0.gl_publication_code = '103') THEN 'The Oz'
            WHEN (t0.gl_publication_code = '100' OR t0.gl_publication_code = '101' OR t0.masthead_code = 'TA') THEN 'The Australian'
            -- ... many more WHEN clauses ...
            ELSE NULL
        END AS masthead_group_level1,
        CASE
            WHEN (pd.masthead_group_level1 = 'The Australian') THEN 'The Australian'
            WHEN (pd.masthead_group_level1 IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
            -- ... more WHEN clauses ...
            ELSE 'Discontinued'
        END AS masthead_group_level2","Create a dedicated, governed lookup table for masthead classifications (e.g., `masthead_dim`) that maps `gl_publication_code`, `masthead_code`, and `classification_level_2_description` to `masthead_group_level1` and `masthead_group_level2`. Join to this dimension table in the SQL queries instead of using `CASE` statements. This improves maintainability, consistency, and scalability.",339,37641205-ec3e-4184-a5dd-f5ca79248335
current_week_earned_amount_digital_filtered,Anti-Pattern,"The `recognition_type_calc` logic, while simpler than masthead grouping, is also hardcoded. If the business rules for 'Print Recognition' vs. 'Digital Recognition' change, this logic would need to be updated in every metric's SQL.","        CASE
            WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition'
            WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition'
            ELSE 'Digital Recognition'
        END AS recognition_type_calc","Consider externalizing this logic into a view or a small lookup table if these rules are subject to change or are used widely across multiple reports. For simple, stable rules, it might be acceptable, but it's worth noting as a pattern.",339,37641205-ec3e-4184-a5dd-f5ca79248335
unique_subscribers_filtered_audience_registration,Hardcoded Logic,"This metric utilizes hardcoded string values for filtering `rule_group_definition` and `sc_registration_group`. Specifically, the `rule_group_definition` filter includes a leading space (' 2025 Total SuperCoach Audience'), which could indicate a data quality issue in the source data or an overly specific filter that might become brittle if the source data is cleaned or definitions change. This approach reduces flexibility and maintainability.",WHERE (SAFE_CAST(t0.rule_group_definition AS STRING) IN (' 2025 Total SuperCoach Audience') AND SAFE_CAST(t0.sc_registration_group AS STRING) IN ('1) afl_only')),"Investigate the leading space in ' 2025 Total SuperCoach Audience' to determine if it's a data quality issue. For these filter values, consider externalizing them into a configuration table or a governed dimension table. This would allow for dynamic filtering, easier updates, and better reusability across metrics, reducing the need for direct SQL modifications.",340,6640a246-777a-4fcf-a692-85e02e7f7a8e
unique_subscribers_filtered_audience_cohort,Hardcoded Logic,"Similar to the previous metric, this one also employs hardcoded string values for filtering `rule_group_definition` and `supercoach_engagement_cohort`. The `rule_group_definition` filter again contains the potentially problematic leading space (' 2025 Total SuperCoach Audience'). Hardcoding these values makes the metric less adaptable to changes in business definitions or new cohort introductions.",WHERE (SAFE_CAST(t0.rule_group_definition AS STRING) IN (' 2025 Total SuperCoach Audience') AND SAFE_CAST(t0.supercoach_engagement_cohort AS STRING) IN ('Moderately engaged')),"Investigate the leading space in ' 2025 Total SuperCoach Audience'. For 'Moderately engaged' and other specific cohort definitions, consider implementing a parameter-driven approach or linking to a dimension table that defines engagement cohorts. This would enable dynamic filtering and centralize the management of these definitions, improving scalability and consistency.",340,6640a246-777a-4fcf-a692-85e02e7f7a8e
"total_subscription_movements_acq_cohort_0_111_days, total_subscription_movements_newspass_fy24_25, unique_subscriptions_all_acq_cohorts, unique_subscriptions_acq_cohort_0_111_days_campus_segment, unique_subscriptions_newspass_fy24_25_40_days_plus, days_since_acquisition_report_date",Anti-Pattern,"The `newspass_acquisitions` CTE, which identifies the initial News Pass acquisition for a subscriber, is duplicated verbatim across six different metrics. This redundancy makes the SQL difficult to maintain, prone to errors if the core logic needs modification, and potentially less performant due to repeated subquery execution.","WITH newspass_acquisitions AS (
  SELECT
    report_date AS acq_report_date,
    subscriber_id_src AS acq_subscriber_id,
    subscription_id_src AS acq_subscription_id
  FROM
    (
      SELECT DISTINCT
        report_date,
        subscriber_id_src,
        subscription_id_src,
        RANK() OVER (PARTITION BY subscriber_id_src ORDER BY report_date, subscription_id_src) AS SubscriptionRank
      FROM
        `ncau-data-newsquery-prd`.prstn_consumer_views.v_subscription_movement
      WHERE
        SAFE_CAST(rate_plan_code AS STRING) LIKE '%NPASS%'
        AND SAFE_CAST(subscription_movement_count_type AS STRING) = 'acquisition'
    )
  WHERE
    SubscriptionRank = 1
)","Extract the `newspass_acquisitions` logic into a dedicated BigQuery view or a common table expression (CTE) defined once at a higher level (e.g., within a Looker Studio custom query if a single data source is used for all metrics, or preferably as a BigQuery view). This shared component can then be referenced by all dependent metrics, improving maintainability, consistency, and potentially query performance.",341,2b1f75a1-b473-4415-b29a-665bd2b492ae
unique_subscriptions_acq_cohort_0_111_days_campus_segment,Hardcoded Logic,"The metric hardcodes specific `customer_segment` values ('Campus', '') directly within its SQL query. This approach lacks flexibility; if new customer segments are introduced or existing definitions change, the SQL logic must be manually updated, increasing maintenance effort and risk of error.","AND SAFE_CAST(movey.customer_segment AS STRING) IN ('Campus', '')","Consider externalizing such categorical filters. If 'Campus' and empty string represent a specific business grouping, define this grouping in a lookup table or a configuration layer. This allows for dynamic updates without modifying the core metric SQL, enhancing scalability and maintainability.",341,2b1f75a1-b473-4415-b29a-665bd2b492ae
total_subscription_movements_newspass_fy24_25,Data Mismatch,"The business description for 'Total Subscription Movements (Newspass, FY 2024-2025)' states 'sum of subscription movement counts for subscriptions acquired via 'News Pass''. However, the SQL logic, validated by the `primary_analysis_sql` and `business_rules_sql` results, counts all movement types (e.g., acquisition, cancellation) for subscriptions initially acquired via News Pass within the specified fiscal years. This discrepancy between the business definition and the actual SQL implementation could lead to misinterpretation of the metric's value.","WHERE
  SAFE_CAST(movey.fy_year AS INT64) IN (2024, 2025)
  AND SAFE_CAST(movey.offer_category_name AS STRING) = 'Newspass'","Clarify the precise business definition for this metric. If the intent is to count all movements (acquisition, cancellation, etc.) for News Pass acquired subscriptions, update the business description to reflect this. If the intent is strictly to count only 'acquisition' movements, then an additional filter `AND SAFE_CAST(movey.subscription_movement_count_type AS STRING) = 'acquisition'` should be added to the main query's WHERE clause.",341,2b1f75a1-b473-4415-b29a-665bd2b492ae
days_live_calculated,Anti-Pattern,"The 'Days Live (Calculated)' metric is explicitly defined in its business description as returning '1' per row, making it a row counter rather than a meaningful 'days live' calculation. This is misleading and does not provide actual insight into the duration of campaigns or data freshness.",SELECT 1 AS Days_live FROM `ncau-data-newsquery-sit.qvr_consumer.campaign_performance_consol` WHERE masthead_group = 'TAU' AND campaign_name LIKE 'AOD%' AND date >= '2023-07-03' AND fy_year = 'FY24' LIMIT 1;,"Re-evaluate the business requirement for 'Days Live'. If it's meant to represent the duration a campaign has been active, implement a calculation like `MAX(date) - MIN(date)` for a given campaign, or `COUNT(DISTINCT date)` over a relevant period. If it's simply a row count, rename it to 'Record Count' for clarity.",342,8b343aa3-712e-49fe-97d4-73c8eda5277c
campaign_classification,Hardcoded Logic / Anti-Pattern,"The 'Campaign Classification' dimension uses a complex, hardcoded `CASE WHEN` statement to categorize campaigns based on `source_system_name` and `campaign_type`. This approach is brittle, difficult to maintain, and not scalable. Any new source system or campaign type requires a code change, increasing the risk of errors and maintenance overhead.",SELECT CASE WHEN source_system_name LIKE '%Facebook%' THEN 'Meta' WHEN source_system_name LIKE '%LinkedIn%' THEN 'LinkedIn' WHEN source_system_name LIKE '%Trade Desk%' THEN 'Trade Desk' WHEN source_system_name LIKE '%Reddit%' THEN 'Reddit' WHEN source_system_name LIKE '%Bing%' THEN 'MSA' WHEN campaign_type LIKE '%SEARCH%' THEN 'Google Search' WHEN campaign_type LIKE '%PERFORMANCE_MAX%' THEN 'Google PMAX' ELSE 'Other' END AS Campaign_Classification,"Implement a dedicated lookup table (e.g., `dim_campaign_classification`) that maps `source_system_name` and `campaign_type` to a standardized `Campaign_Classification`. This table should be joined to `campaign_performance_consol` to derive the classification, centralizing the logic and improving maintainability.",342,8b343aa3-712e-49fe-97d4-73c8eda5277c
meta_subscriptions,Hardcoded Logic / Redundancy / Anti-Pattern,"Multiple individual subscription metrics (e.g., 'Meta Subscriptions', 'LinkedIn Subscriptions', 'Google Search Subscriptions') are created using repetitive `SUM(CASE WHEN ... THEN subscriptions ELSE 0 END)` logic. This leads to metric proliferation and violates the DRY (Don't Repeat Yourself) principle. It's inefficient and makes adding new source-specific metrics cumbersome.",SELECT SUM(CASE WHEN source_system_name LIKE '%Facebook%' THEN subscriptions ELSE 0 END) AS Meta_Subs FROM `ncau-data-newsquery-sit.qvr_consumer.campaign_performance_consol` WHERE masthead_group = 'TAU' AND campaign_name LIKE 'AOD%' AND date >= '2023-07-03' AND fy_year = 'FY24';,Leverage the 'Campaign Classification' dimension (once refactored to use a lookup table) to slice the 'Total Subscriptions' metric. This allows users to dynamically view subscriptions by classification without needing separate hardcoded metrics for each source/type. This significantly reduces the total number of metrics and improves dashboard flexibility.,342,8b343aa3-712e-49fe-97d4-73c8eda5277c
live_status,Potential Data Mismatch / Logic Flaw,"The subquery used to determine the `MAX(date)` for 'Live Status' is only filtered by `masthead_group = 'TAU'`. It does not include the `campaign_name LIKE 'AOD%'`, `date >= '2023-07-03'`, or `fy_year = 'FY24'` filters present in the outer query. This could lead to an inaccurate 'Live Status' if the overall latest date for 'TAU' data is different from the latest date specifically for 'TAU AOD FY24' campaigns.",SELECT CASE WHEN date = (SELECT MAX(date) FROM `ncau-data-newsquery-sit.qvr_consumer.campaign_performance_consol` WHERE masthead_group = 'TAU') THEN 'Y' ELSE 'N' END AS Live_Status,Ensure the subquery's `WHERE` clause precisely matches the filtering criteria of the main query (`masthead_group = 'TAU' AND campaign_name LIKE 'AOD%' AND date >= '2023-07-03' AND fy_year = 'FY24'`) to accurately reflect the 'Live Status' for the specific data subset being analyzed by the dashboard.,342,8b343aa3-712e-49fe-97d4-73c8eda5277c
overall_status_freshness,Hardcoded Logic|Anti-Pattern,"The SQL logic for the 'Overall Data Freshness Status' metric is excessively complex, relying on deeply nested CASE statements that hardcode specific table names and their corresponding freshness rules. This makes the logic extremely difficult to read, maintain, and scale. Any change to a table's refresh rate, the addition of new tables, or even minor adjustments to time windows requires direct, error-prone modification of this large SQL block. The repeated datetime and current_date function calls within each WHEN clause also add unnecessary verbosity and potential for inconsistencies.","SELECT
  table_name AS TABLE,
  CASE
    WHEN table_name IN ('event_transaction_wrk_01', 'event_transaction_wrk_02', 'event_transaction_history') AND
    date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
    CASE
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) <= 8 THEN 'Success'
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) >= 9 THEN ''
      ELSE 'Need a check'
    END
    WHEN table_name IN ('myaccount_base_02', 'myaccount_base_01', 'taste_nlm_fct', 'taste_nlm_seo_url_fct') AND
    date(datetime(last_modified_time, ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") - 1 OR date(datetime(last_modified_time,
        ""Australia/Sydney"")) = `current_date`(""Australia/Sydney"") THEN
    CASE
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) <= 25 THEN 'Success'
      WHEN EXTRACT(HOUR FROM `current_time`(""Australia/Sydney"")) - EXTRACT(HOUR FROM time(datetime(last_modified_time,
          ""Australia/Sydney""))) >= 26 THEN ''
      ELSE 'Need a check'
    END
    ...","Refactor the data freshness rules into a dedicated BigQuery lookup table. This table should map table names to their expected refresh intervals (e.g., hourly, daily, specific time windows) and the logic for determining 'Success', 'Need a check', or empty status. The dashboard's metric can then perform a simple join to this lookup table, significantly simplifying the SQL, centralizing governance, and improving maintainability. This also allows for easier management of different refresh rates and the addition of new tables without modifying complex SQL.",343,376cca44-97b3-4959-aa0f-e228a9e1e408
refresh_rate_dimension,Hardcoded Logic|Anti-Pattern,"The 'Expected Refresh Rate' metric defines a static lookup table of table names, schemas, and their refresh rates using a very long series of UNION ALL statements. This is an inefficient and unmaintainable way to store metadata. It duplicates information that should ideally reside in a proper data catalog or a dedicated configuration table, making updates cumbersome and prone to errors. The use of inconsistent string formats for refresh rates (e.g., '6 hrs', '19:00', 'every hour') further complicates programmatic interpretation.","SELECT DISTINCT RefreshRate FROM (
    SELECT ""PRSTN"" AS Layer, ""myaccount_base_02"" AS TableName, ""prstn_customerinteractions"" AS TableSchema, ""24 hrs"" AS RefreshRate
    UNION ALL SELECT ""PRSTN"", ""myaccount_base_01"", ""prstn_customerinteractions"", ""24 hrs""
    UNION ALL SELECT ""PRSTN"", ""event_transaction_wrk_02"", ""prstn_customerinteractions"", ""6 hrs""
    UNION ALL SELECT ""PRSTN"", ""event_transaction_wrk_01"", ""prstn_customerinteractions"", ""6 hrs""
    UNION ALL SELECT ""PRSTN"", ""event_transaction_history"", ""prstn_customerinteractions"", ""6 hrs""
    UNION ALL SELECT ""PRSTN"", ""taste_nlm_fct"", ""prstn_content_interaction"", ""24 hrs""
    UNION ALL SELECT ""PRSTN"", ""taste_nlm_seo_url_fct"", ""prstn_content_interaction"", ""24 hrs""
    UNION ALL SELECT ""CDM"" AS Layer, ""actionmaps"" AS TableName, ""cdm_genesys"" AS TableSchema, ""6 hrs"" AS RefreshRate
    UNION ALL SELECT ""CDM"", ""authorization_divisions"", ""cdm_genesys"", ""19:00""
    ...","Migrate this static lookup data into a dedicated BigQuery lookup table. This table should contain columns for Layer, TableName, TableSchema, and a standardized RefreshRate (e.g., in minutes or hours, or a categorical ID). This approach centralizes metadata, allows for easier updates, versioning, and can be joined with other data sources (like INFORMATION_SCHEMA.PARTITIONS) to provide dynamic and accurate refresh rate information. This also enables consistency with the logic used in the 'Overall Data Freshness Status' metric.",343,376cca44-97b3-4959-aa0f-e228a9e1e408
"total_page_views_unlocked_articles_date_range, page_views_by_article_headline_unlocked_articles_date_range, daily_page_views_by_article_headline_unlocked_articles_date_range, daily_page_views_by_specific_article_headline_unlocked_articles_date_range",Hardcoded Logic,"The definition of 'unlocked articles' is hardcoded as a long list of `articleid` values within an `IN` clause, repeated across all four metrics. This makes the dashboard extremely difficult to maintain. Any change to the list of 'unlocked articles' requires manual modification of four separate SQL queries, increasing the risk of inconsistencies and errors.","a.articleid IN (
    '0762440fc87cf8a4b29d5f56278ff447', '424b20d92e17638ae598c63f56f85f9f',
    '70fe274b6b83affb46284cadc1998909', ...
  )","Create a dedicated lookup table or a managed view (e.g., `unlocked_articles_list`) containing the `articleid`s of 'unlocked articles'. Join to this table/view in the SQL queries instead of using a hardcoded `IN` clause. This centralizes the definition and significantly improves maintainability and data governance.",344,61c9dcaa-ebb1-48fc-9d1d-1b0042d3c075
"total_page_views_unlocked_articles_date_range, page_views_by_article_headline_unlocked_articles_date_range, daily_page_views_by_article_headline_unlocked_articles_date_range, daily_page_views_by_specific_article_headline_unlocked_articles_date_range",Hardcoded Logic,"All metrics use hardcoded date ranges (`date(a.GradientTimeSlot) >= ""2024-09-20""`, `TIMESTAMP '2025-03-13'`, `TIMESTAMP '2025-03-26'`). This makes the dashboard static and unsuitable for ongoing analysis of current or historical trends beyond the specified fixed period. Dashboards typically require dynamic date filtering capabilities.","date(a.GradientTimeSlot) >= ""2024-09-20"" AND SAFE_CAST(a.GradientTimeSlot AS TIMESTAMP) >= TIMESTAMP '2025-03-13' AND SAFE_CAST(a.GradientTimeSlot AS TIMESTAMP) < TIMESTAMP_ADD(TIMESTAMP '2025-03-26', INTERVAL 1 DAY)","Implement dynamic date parameters in the Looker Studio dashboard that can be passed into the underlying SQL queries. This allows users to select custom date ranges for analysis, making the dashboard flexible and useful for ongoing monitoring. The `2024-09-20` baseline date should also be reviewed for its purpose and potentially made dynamic or removed if no longer relevant.",344,61c9dcaa-ebb1-48fc-9d1d-1b0042d3c075
daily_page_views_by_specific_article_headline_unlocked_articles_date_range,Hardcoded Logic,"The metric 'Daily Page Views by Specific Article Headline for Unlocked Articles' further filters by a hardcoded list of `ArticleExtendedHeadline` values. This is redundant with the `articleid` filter and introduces another layer of hardcoded, unmaintainable logic. If headlines change or the specific subset needs adjustment, this query must be manually updated.","b.ArticleExtendedHeadline IN (
    'Will Schofield: How Simpson’s sprays, support and strategy shaped Eagles’ 2018 premiership',
    'Why cricket lost Kumar Sarna, the genius ‘Peter Pan’ batsman who could have been anything',
    ...
)","If this subset of articles represents a specific business concept, define it in a lookup table or view (e.g., `specific_unlocked_articles_subset`) by `articleid` or a more stable identifier, and join to it. Avoid filtering by `ArticleExtendedHeadline` directly in the SQL, as headlines can change, making the filter brittle and prone to breakage.",344,61c9dcaa-ebb1-48fc-9d1d-1b0042d3c075
"total_page_views_unlocked_articles_date_range, page_views_by_article_headline_unlocked_articles_date_range, daily_page_views_by_article_headline_unlocked_articles_date_range, daily_page_views_by_specific_article_headline_unlocked_articles_date_range",Anti-Pattern,"The core `FROM` and `LEFT JOIN` clauses, along with the extensive hardcoded `WHERE` conditions (article IDs and dates), are duplicated across all four metrics. This redundancy increases the surface area for errors and makes future modifications or optimizations inefficient, as changes need to be applied to multiple places.","FROM
  `ncau-data-newsquery-prd.bdm_verity.content_interactions_detail_pv` AS a
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_verity.t_content_summary` AS b
  ON a.articleid = b.articleID
WHERE
  date(a.GradientTimeSlot) >= ""2024-09-20"" AND a.articleid IN (...)","Consolidate the common data filtering and joining logic into a single BigQuery view or a Looker Studio data source. This view should pre-filter for 'unlocked articles' (using a lookup table) and incorporate dynamic date range parameters. Each metric can then query this consolidated view, applying only its specific aggregations and groupings. This promotes reusability, simplifies maintenance, and improves overall data architecture.",344,61c9dcaa-ebb1-48fc-9d1d-1b0042d3c075
all_metrics,Anti-Pattern,"A consistent set of base filters (`financial_year >= '2022'`, `revenue_transaction_status IN ('Billed', 'Booked')`, `record_type_code = 'STD'`, `source_system_code = 'ADPT'`, `revenue_type = 'Digital'`) is repeatedly applied across all six metrics. While consistent, this repetition increases maintenance effort if these core criteria ever need to change, as each metric's SQL would require individual updates.","WHERE (t0.financial_year >= '2022' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.record_type_code = 'STD' AND t0.source_system_code = 'ADPT' AND t0.revenue_type = 'Digital')","Encapsulate this common filtering logic within a dedicated BigQuery view or a Looker Studio data source custom query. This would allow all metrics to reference a single, governed source, improving maintainability and ensuring consistency across the dashboard.",345,d768f28d-cc4a-4314-b972-cffd680d1bb8
total_revenue_by_dimensions_digital_skynews_2025,Hardcoded Logic,"This metric includes highly specific, hardcoded filters for `publishing_division`, `publication_name`, and `calendar_year`. For example, `t0.publishing_division != 'Medium Rare Content Agency'`, `t0.publication_name = 'SKYNEWS'`, and `t0.calendar_year IN ('2025')`. This makes the metric rigid and not easily reusable for other publications or years without direct SQL modification.",AND t0.publishing_division != 'Medium Rare Content Agency' AND t0.publication_name = 'SKYNEWS' AND t0.calendar_year IN ('2025'),"Parameterize these specific filters using Looker Studio controls (e.g., dropdowns for publication name, year) or, for more complex scenarios, leverage BigQuery lookup tables to dynamically manage exclusion lists or specific entity selections. This would enhance dashboard flexibility and reduce the need for metric-level SQL changes.",345,d768f28d-cc4a-4314-b972-cffd680d1bb8
adsize_name_ctr_taus_filter,Hardcoded Logic,"The filter for ad size names is hardcoded to specific advertiser name patterns (`SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.advertiser_name AS STRING), '^(^CTR_.*)$')`) and publication names (`t0.publication_name IN ('TAUS', 'TAUS.ADMIN')`). This limits the reusability and adaptability of the filter if new patterns or publications need to be included.","AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.advertiser_name AS STRING), '^(^CTR_.*)$') AND t0.publication_name IN ('TAUS', 'TAUS.ADMIN')","Consider using Looker Studio filter controls for `advertiser_name` and `publication_name` to allow users to dynamically select criteria. If the patterns are complex and frequently updated, a BigQuery lookup table containing valid `advertiser_name` patterns or `publication_name` lists could be joined or referenced.",345,d768f28d-cc4a-4314-b972-cffd680d1bb8
financial_year_filtered_adtype_filter,Hardcoded Logic,"This filter explicitly excludes specific `fin_adtype_name` values (`'Content Discovery (Targeted)', 'Rich Media (Targeted)'`). This hardcoded exclusion list requires manual updates if the business rules for excluded ad types change.","AND (t0.fin_adtype_name NOT IN ('Content Discovery (Targeted)', 'Rich Media (Targeted)') OR t0.fin_adtype_name IS NULL)","Manage the list of excluded `fin_adtype_name` values in a BigQuery lookup table. This allows business users or data stewards to update the list without requiring changes to the dashboard's underlying SQL, improving data governance and agility.",345,d768f28d-cc4a-4314-b972-cffd680d1bb8
all_filter_metrics,Anti-Pattern,"All filter-related metrics (`financial_year_digital_filter`, `adsize_name_ctr_taus_filter`, `financial_year_filtered_adtype_filter`, `min_calendar_month_nova_2024`) use a `LIMIT 10` clause. While this can improve performance for large distinct value sets, it risks truncating the list of available filter options, potentially misleading users or preventing them from selecting desired values if there are more than 10 distinct entries.",LIMIT 10,"Review the cardinality of the dimensions used in these filters. If the number of distinct values is consistently low, `LIMIT 10` might be acceptable. Otherwise, consider removing the `LIMIT` clause or increasing it significantly to ensure all relevant filter options are displayed. Alternatively, implement search functionality in Looker Studio filters if available for very high cardinality dimensions.",345,d768f28d-cc4a-4314-b972-cffd680d1bb8
multiple_metrics,Hardcoded Logic / Anti-Pattern,"A large number of metrics (e.g., 'BAU Always On Digital Subscriptions', 'Premium Breach Subscriptions', 'Third-Party Offer Subscriptions', 'Google Content Amplification Subscriptions', 'Facebook Content Amplification Subscriptions', 'Other Subscription Channels', 'Other BAU Digital Subscriptions') rely on hardcoded `CASE WHEN` or `IN` conditions applied directly to `sold_in_channel` or `sold_in_source_channel` fields. This results in highly repetitive SQL logic across many metrics, making the dashboard's underlying data definitions difficult to maintain and prone to inconsistencies if channel definitions evolve. The 'Other BAU Digital Subscriptions' metric is particularly problematic due to its extensive `NOT IN` list, indicating a lack of a clear, positive classification scheme.","Example from 'bau_always_on_digital_count': `COUNT(CASE WHEN sold_in_channel = 'Bau Always On Digital' THEN 1 END)`
Example from 'other_subscription_count': `COUNT(CASE WHEN sold_in_channel IN ('My Account Save', 'Not Available', 'General Online', 'My Account Reactivate', 'My Account Modify') THEN 1 END)`
Example from 'other_bau_count': `COUNT(CASE WHEN sold_in_channel = 'Bau Always On Digital' AND sold_in_source_channel NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Content Amplification', 'Not Available', 'Twitter - Creative', 'Google - Content Amplification', 'Facebook') THEN 1 END)`","Implement a governed dimension for `sold_in_channel` and `sold_in_source_channel` classifications within the `v_subscription_movement` view or a dedicated semantic layer (e.g., LookML model, dbt model). This would allow users to simply filter by a pre-defined channel type, eliminating the need for complex, repetitive `CASE` statements in individual metrics. For 'Other BAU Digital Subscriptions', define explicit categories for all known channels and use an 'Other' category for anything not explicitly defined, rather than a long `NOT IN` list.",346,52d44d9a-25d9-4ce0-8c70-a26a9eef8a10
"code_category, code_vs_sc_category, campaign_classification",Hardcoded Logic / Anti-Pattern,"The `code_category`, `code_vs_sc_category`, and `campaign_classification` metrics utilize extensive and complex `CASE` statements to categorize campaigns based on string matching (`LIKE '%...'`) against `campaign_name`, `adgroup_name`, and `ad_name`. This logic is embedded directly in the metric definitions, making it difficult to manage, prone to errors if naming conventions change, and inefficient as the logic is re-evaluated for each query. The `code_category` metric's logic is particularly verbose and intricate.","Example from 'code_category': `CASE WHEN(campaign_name LIKE '%Kayo%') THEN 'All Sport' WHEN(adgroup_name LIKE '%AFL%' AND (ad_name LIKE '%afl%' OR ad_name LIKE '%CODE Footy%') AND adgroup_name NOT LIKE '%SC%') THEN 'AFL' ... ELSE 'Other' END`
Example from 'campaign_classification': `CASE WHEN campaign_name LIKE '%Offer%' THEN 'Meta Offer' WHEN campaign_name LIKE '%Content%' THEN 'Meta Content' WHEN campaign_type LIKE '%SEARCH%' THEN 'Google Search' WHEN campaign_type LIKE '%PERFORMANCE_MAX%' THEN 'Google PMAX' ELSE 'Content' END`","Pre-process and store these classifications as dedicated columns within the `campaign_performance_consol` table. Alternatively, define these as derived dimensions in a semantic layer (e.g., LookML) where the classification logic can be centrally managed, version-controlled, and reused across multiple metrics and dashboards. This approach improves performance, maintainability, and ensures consistent categorization across all reporting.",346,52d44d9a-25d9-4ce0-8c70-a26a9eef8a10
all_metrics,Hardcoded Logic,"All metrics consistently use hardcoded date and financial year filters (e.g., `SAFE_CAST(subscription_tenure_start_datetime AS DATE) >= DATE(""2023-07-03"") AND SAFE_CAST(fy_year AS INT64) = 2024`). This design requires manual updates for each new reporting period (e.g., new financial year), leading to potential data staleness, increased maintenance burden, and a risk of errors if updates are not applied promptly and consistently across all 25 metrics.","Example from 'bau_always_on_digital_count': `SAFE_CAST(subscription_tenure_start_datetime AS DATE) >= DATE(""2023-07-03"") AND SAFE_CAST(fy_year AS INT64) = 2024`
Example from 'google_pmax_subscriptions': `SAFE_CAST(date AS DATE) >= '2023-07-03' AND fy_year = 'FY24'`","Leverage Looker Studio's built-in date range controls and parameters to allow dynamic date filtering. For financial years, consider implementing a date dimension table that maps dates to their respective financial years, enabling dynamic FY filtering without hardcoding. Alternatively, use dynamic SQL functions like `CURRENT_DATE()` and `DATE_SUB()` to define rolling date windows.",346,52d44d9a-25d9-4ce0-8c70-a26a9eef8a10
multiple_metrics,Anti-Pattern,"Many metrics (e.g., 'BAU Always On Digital Subscriptions', 'Total Channel Subscriptions') employ a redundant subquery pattern: `SELECT SUM(t0.MetricName) FROM (SELECT COUNT(CASE WHEN ...) AS MetricName FROM ... GROUP BY ...) AS t0`. While functionally correct for a total count, the extensive `GROUP BY` clause within the inner query (including `masthead, subscription_tenure_start_datetime, is_corporate_b2b_flag, fy_year, fy_week_of_year, fy_month_of_year, subscription_movement_count_sub_type, classification_level_2, sold_in_source_channel`) is unnecessary if the ultimate goal is a single summed value. This adds verbosity and potentially unnecessary processing overhead.","Example from 'bau_always_on_digital_count': `SELECT SUM(t0.Bau_Always_On_Digital) FROM (SELECT COUNT(CASE WHEN sold_in_channel = 'Bau Always On Digital' THEN 1 END) AS Bau_Always_On_Digital FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` WHERE masthead = 'CS' AND (...) GROUP BY masthead, subscription_tenure_start_datetime, is_corporate_b2b_flag, fy_year, fy_week_of_year, fy_month_of_year, subscription_movement_count_sub_type, classification_level_2, sold_in_source_channel) AS t0`","For simple total counts based on filters, simplify the SQL to a direct `SELECT COUNT(CASE WHEN sold_in_channel = 'Bau Always On Digital' THEN 1 END) FROM ... WHERE ...`. If the intent is to count distinct combinations *before* summing, then the subquery is appropriate, but the metric naming should clearly reflect this more complex aggregation.",346,52d44d9a-25d9-4ce0-8c70-a26a9eef8a10
period_type_calendar_filtered_advertiser_booking,Hardcoded Logic / Anti-Pattern (Redundant Static Calculation),"This metric, along with 'period_type_calendar_filtered_booking' and 'period_type_calendar_unfiltered', uses a redundant `CASE WHEN ('Cal' = 'Cal')` statement to return a static string 'Calendar Period'. This is an inefficient way to display a fixed label and leads to unnecessary duplication across multiple metrics.",SELECT CASE WHEN ('Cal' = 'Cal') THEN 'Calendar Period' ELSE NULL END AS period_type,"Consolidate this into a single, reusable 'Period Type Label' metric if it's truly a static display. For a static label, a simple text field in the dashboard or a single calculated field without a `WHERE` clause would suffice, reducing metric clutter and maintenance.",348,70ed3b92-987b-479b-9ed7-d2903bd2787e
period_type_calendar_filtered_advertiser_booking,Hardcoded Logic / Anti-Pattern (Fixed Filters),"The metric includes hardcoded `WHERE` clauses for specific `advertiser_name` ('Brisbane Festival') and `booking_number` ('627989'). This makes the metric, and by extension, the dashboard, highly inflexible and specific to these hardcoded values, preventing dynamic analysis across different entities without manual modification.",WHERE SAFE_CAST(advertiser_name AS STRING) IN ('Brisbane Festival') AND SAFE_CAST(booking_number AS STRING) IN ('627989'),"Replace hardcoded filters with Looker Studio dashboard parameters (e.g., `advertiser_name_param`, `booking_number_param`) to allow users to dynamically select values. This would enable a single metric to serve multiple filtering scenarios, significantly improving reusability and user experience.",348,70ed3b92-987b-479b-9ed7-d2903bd2787e
dw_load_timestamp_filtered_booking,Hardcoded Logic / Anti-Pattern (Fixed Filters),"This metric uses a hardcoded `WHERE` clause for a specific `booking_number` ('154245'). This limits the utility of the timestamp to a single booking, hindering broader analysis of data load times across different bookings.",WHERE SAFE_CAST(booking_number AS STRING) IN ('154245'),"Implement a dashboard parameter for `booking_number` to allow dynamic filtering. If the intent is to show the load timestamp for the *entire* dataset, remove the `WHERE` clause or use a dedicated metadata table.",348,70ed3b92-987b-479b-9ed7-d2903bd2787e
account_number_filtered_advertiser,Hardcoded Logic / Anti-Pattern (Fixed Filters),"The metric filters `account_number` based on a hardcoded `advertiser_name` ('Coles Supermarkets Head Office'). This design restricts the dashboard's ability to display account numbers for other advertisers without manual modification, reducing its general applicability.",WHERE SAFE_CAST(advertiser_name AS STRING) IN ('Coles Supermarkets Head Office'),"Utilize a dashboard parameter for `advertiser_name` to enable dynamic selection of advertisers. This would allow the 'Account Number' metric to be reusable for any advertiser, enhancing the dashboard's flexibility.",348,70ed3b92-987b-479b-9ed7-d2903bd2787e
period_type_calendar_filtered_booking,Hardcoded Logic / Anti-Pattern (Fixed Filters),"Similar to other filtered metrics, this one hardcodes the `booking_number` ('587405'). This makes the 'Period Type' label specific to this single booking, which is redundant given the static nature of the label itself.",WHERE SAFE_CAST(booking_number AS STRING) = '587405',"As noted for other 'Period Type' metrics, consolidate the static label. If filtering by booking number is required for other metrics, use a dashboard parameter for `booking_number`.",348,70ed3b92-987b-479b-9ed7-d2903bd2787e
total_subscribers_valid_mosaic,Hardcoded Logic,"The metric uses a hardcoded `LEFT()` function and a `CASE` statement to derive `overall_mosaic_type` from `subscriber_mosaic_type`. While functional, this transformation logic is embedded directly in the metric's SQL rather than being defined in a shared, governed data model. This can lead to inconsistencies if the definition of 'overall mosaic type' changes or needs to be applied across multiple metrics.","CASE WHEN A.subscriber_mosaic_type = 'Not Available' THEN 'Not Available' ELSE `LEFT`(A.subscriber_mosaic_type, 1) END AS overall_mosaic_type","Define `overall_mosaic_type` as a derived column within a base view or a dedicated dimension table for mosaic types. This centralizes the logic, improves consistency, and simplifies metric definitions.",349,1d90f8d5-1170-44b0-9c20-3e16f00ddf1d
subscribers_by_gender_valid,Anti-Pattern,"This metric, along with all others, repeats an identical `base_data` CTE including the join to `CS_cluster_site_sections`, filtering by `dw_tgt_partition_date` and `masthead`, and the `ROW_NUMBER()` logic. This duplication of complex data preparation logic is a significant anti-pattern, increasing query complexity, maintenance burden, and potential for inconsistencies across metrics.","WITH base_data AS (
  SELECT
    A.subscriber_id_src,
    A.subscriber_individual_gender,
    ROW_NUMBER() OVER (PARTITION BY A.subscriber_id_src ORDER BY A.dw_effective_start_datetime) AS rn
  FROM
    `ncau-data-newsquery-prd`.prstn_consumer.subscription_base AS A
    JOIN
    `nau-data-nprod-dataservices`.ChrisFreyre_WorkTables.CS_cluster_site_sections AS B
    ON A.subscriber_id_src = B.pcs_id
  WHERE
    A.dw_tgt_partition_date = `current_date`('Australia/Sydney') - 1 AND A.masthead = 'CS'
)","Create a consolidated, governed base view or a dbt model (e.g., `stg_cs_subscribers`) that encapsulates this common `base_data` logic. All metrics should then query this single, well-defined source, improving maintainability, consistency, and potentially query performance through BigQuery's caching.",349,1d90f8d5-1170-44b0-9c20-3e16f00ddf1d
male_subscribers,Anti-Pattern,"This metric is a specific slice of 'Subscribers by Gender (Excluding Not Available)'. Defining 'Male Subscribers' as a separate, full SQL query that duplicates the base data logic is inefficient. It could be derived more simply from a consolidated gender breakdown or by adding a filter to a more generic subscriber count.",SELECT COUNT(DISTINCT subscriber_id_src) AS male_subscribers FROM base_data WHERE rn = 1 AND subscriber_individual_gender = 'M',"Once a consolidated base view is established, 'Male Subscribers' can be defined as a simple filtered count on that view, or as a derived metric from a 'Subscribers by Gender' grouped result, reducing redundant SQL and improving semantic consistency.",349,1d90f8d5-1170-44b0-9c20-3e16f00ddf1d
subscribers_by_cluster_gender_filtered,Hardcoded Logic,"The metric uses a hardcoded list of cluster IDs (`IN (1, 2, 3, 4, 5, 6, 7, 8, 9)`) and gender values (`IN ('M', 'F')`). This makes the metric rigid and difficult to maintain. If cluster IDs change or new ones are introduced, this SQL will require manual updates. The `subscriber_individual_gender IN ('M', 'F')` condition is also redundant if `subscriber_individual_gender != 'Not Available'` already ensures only 'M' and 'F' are present.","AND SAFE_CAST(Cluster AS INT64) IN (1, 2, 3, 4, 5, 6, 7, 8, 9)
AND subscriber_individual_gender IN ('M', 'F')","For cluster IDs, consider using a lookup table or a configuration table for valid cluster ranges/lists. For gender, rely solely on `subscriber_individual_gender != 'Not Available'` if 'M' and 'F' are the only other valid values, or define a canonical list of valid gender types in a dimension table. This promotes data governance and reduces maintenance.",349,1d90f8d5-1170-44b0-9c20-3e16f00ddf1d
cluster_dimension_filtered_by_gender,Anti-Pattern,"Similar to the measures, this dimension also repeats the entire `base_data` CTE, including the join and filtering logic. Dimensions should ideally be built on top of consolidated, clean data models, not by re-executing complex joins and transformations for each use case.","WITH base_data AS (
  SELECT
    A.subscriber_individual_gender,
    B.Cluster,
    ROW_NUMBER() OVER (PARTITION BY A.subscriber_id_src ORDER BY A.dw_effective_start_datetime) AS rn
  FROM
    `ncau-data-newsquery-prd`.prstn_consumer.subscription_base AS A
    JOIN
    `nau-data-nprod-dataservices`.ChrisFreyre_WorkTables.CS_cluster_site_sections AS B
    ON A.subscriber_id_src = B.pcs_id
  WHERE
    A.dw_tgt_partition_date = `current_date`('Australia/Sydney') - 1 AND A.masthead = 'CS'
)","Leverage the proposed consolidated base view/model. The dimension should then be a simple `SELECT DISTINCT Cluster FROM base_view WHERE subscriber_individual_gender != 'Not Available'`, significantly simplifying its definition and improving consistency.",349,1d90f8d5-1170-44b0-9c20-3e16f00ddf1d
net_adds_cancels_std_paid_digital_paying_think_daily,Hardcoded Logic,"The SQL query for this metric includes a hardcoded date range (2025-06-06) and specific filter values ('Standard Paid', 'Print', 'Y', 'THINK'). This prevents the dashboard from dynamically updating for different dates or filter criteria without manual SQL modification, hindering its 'at a glance' utility.",WHERE (t0.report_date >= DATE '2025-06-06' AND t0.report_date <= DATE '2025-06-06' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.is_paying = 'Y' AND t0.dw_source_system_code = 'THINK'),"Replace hardcoded dates with Looker Studio's date range parameters. Parameterize filter values (e.g., `class_lvl_1`, `delivery_medium`, `is_paying`, `dw_source_system_code`) using dashboard controls or define them as Looker Studio parameters/fields. Consider creating a dimension table for `dw_source_system_code` if 'THINK' is one of many sources.",350,02e77971-7980-47de-853b-5bc0943a65b1
total_adds_std_paid_digital_paying_think_daily,Hardcoded Logic,"Similar to other metrics, this query uses a hardcoded date range (2025-06-06) and specific filter values ('Standard Paid', 'Print', 'Y', 'THINK'). This redundancy across metrics increases maintenance burden and risk of inconsistency.",WHERE (t0.report_date >= DATE '2025-06-06' AND t0.report_date <= DATE '2025-06-06' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.is_paying = 'Y' AND t0.dw_source_system_code = 'THINK'),Apply the same recommendations as for 'net_adds_cancels_std_paid_digital_paying_think_daily' to ensure consistency and reusability. Centralize common filter logic if possible.,350,02e77971-7980-47de-853b-5bc0943a65b1
total_cancels_std_paid_digital_paying_think_daily,Hardcoded Logic,"This metric also suffers from hardcoded dates (2025-06-06) and specific filter values ('Standard Paid', 'Print', 'Y', 'THINK'), mirroring the issues found in related metrics.",WHERE (t0.report_date >= DATE '2025-06-06' AND t0.report_date <= DATE '2025-06-06' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.is_paying = 'Y' AND t0.dw_source_system_code = 'THINK'),Implement dynamic date range selection and parameterize filter values to align with best practices for dashboard flexibility.,350,02e77971-7980-47de-853b-5bc0943a65b1
row_count_std_paid_digital_paying_think_daily,Hardcoded Logic,"The row count metric, like its counterparts, is constrained by hardcoded dates (2025-06-06) and specific filter values ('Standard Paid', 'Print', 'Y', 'THINK'), limiting its analytical scope.",WHERE (t0.report_date >= DATE '2025-06-06' AND t0.report_date <= DATE '2025-06-06' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.is_paying = 'Y' AND t0.dw_source_system_code = 'THINK'),Standardize date and filter handling across all metrics to enable a more interactive and reusable dashboard.,350,02e77971-7980-47de-853b-5bc0943a65b1
net_adds_cancels_std_paid_digital_nt_weekly,Hardcoded Logic,"This metric uses a hardcoded weekly date range (2025-04-06 to 2025-04-12) and specific filters ('Standard Paid', 'Print', 'NT' masthead). The hardcoded masthead ('NT') is particularly problematic for a 'REGIONALS' dashboard, as it implies a lack of generalizability across regions.",WHERE (t0.report_date >= DATE '2025-04-06' AND t0.report_date <= DATE '2025-04-12' AND t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.masthead = 'NT'),Implement dynamic date range selection for weekly periods. Replace the hardcoded 'NT' masthead with a parameter or a dimension field that allows users to select or filter by different mastheads/regions. Consider a lookup table for masthead definitions.,350,02e77971-7980-47de-853b-5bc0943a65b1
total_subscriber_count_consumer_non_print_tc_daily,Hardcoded Logic / Anti-Pattern,"The query contains a hardcoded date (2025-07-15) and uses `STRPOS` for filtering `combined_customer_type` and `combined_masthead`. While functional, `STRPOS` can be less performant or clear than direct equality or `LIKE` for specific values, and might indicate a need for data normalization or a more robust filtering mechanism, especially for 'TC' in a 'REGIONALS' dashboard.","WHERE (t0.report_date >= DATE '2025-07-15' AND t0.report_date <= DATE '2025-07-15' AND t0.member_type = 'subscriber' AND STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND t0.combined_classification_level_2 != 'Print-only' AND STRPOS(t0.combined_masthead, 'TC') > 0)","Parameterize the report date. Evaluate if `STRPOS` is the most efficient and maintainable way to filter `combined_customer_type` and `combined_masthead`. If these are fixed categories, consider normalizing them into a dimension table or using direct equality. For 'TC' masthead, enable dynamic selection or filtering for regional analysis.",350,02e77971-7980-47de-853b-5bc0943a65b1
active_weekly_subscriber_count_consumer_non_print_tc_daily,Hardcoded Logic / Anti-Pattern,"This metric also uses a hardcoded date (2025-07-15) and `STRPOS` for filtering `combined_customer_type` and `combined_masthead`, similar to the total subscriber count metric. The `CASE` statement for `subscriber_last_28_days_active_weeks_count` is acceptable for conditional summing, but the overall hardcoded context limits its utility.","WHERE (t0.report_date >= DATE '2025-07-15' AND t0.report_date <= DATE '2025-07-15' AND t0.member_type = 'subscriber' AND STRPOS(t0.combined_customer_type, 'Consumer') > 0 AND t0.combined_classification_level_2 != 'Print-only' AND STRPOS(t0.combined_masthead, 'TC') > 0)",Apply the same recommendations as for 'total_subscriber_count_consumer_non_print_tc_daily' regarding date parameterization and filter optimization. Ensure that the `subscriber_last_28_days_active_weeks_count` field is clearly defined and consistently calculated upstream.,350,02e77971-7980-47de-853b-5bc0943a65b1
multiple_metrics_and_dimensions,Anti-Pattern,"The same complex set of CTEs (`temp`, `team_list`, `main`) and a large `UNION ALL` statement are duplicated verbatim across almost all metrics and dimensions (e.g., `current_fy_revenue`, `prior_fy_revenue`, `total_target`, `team_dimension`, `target_team_flag_dimension`, `advertiser_group_dimension`, `portfolio_parent_group_name_sync_dimension`, `unified_publication_name_dimension`, `advertiser_parent_dimension`). This leads to extreme code redundancy, makes maintenance and debugging exceptionally difficult, increases the risk of inconsistencies if logic needs to change, and likely impacts query performance due to repeated subquery execution. The `UNION ALL` with numerous `NULL` values for non-relevant columns is particularly inefficient and hard to read.","  WITH
    temp AS (
      SELECT
        *,
        CASE
          WHEN unified_publication_name LIKE 'TUBI%' THEN 'TUBI'
          WHEN `LEFT`(upper(fin_adtype_name), 5) = 'VIDEO' THEN 'VIDEO'
          ELSE 'OTHER'
        END AS Rev_Type
      FROM
        `ncau-data-newsquery-prd`.asl_finance_derived.details_dashboard
    ),
    team_list AS (
      SELECT DISTINCT
        Team
      FROM
        `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt
      WHERE
        Type IS NOT null
    ),
    main AS (
      SELECT
        temp.*,
        tgt_1.Team,
        null AS Target,
        'Data' AS source
      FROM
        temp
        LEFT JOIN
        `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt AS tgt_1
        ON temp.portfolio_group_name_sync = tgt_1.Portfolio_Group AND temp.financial_month = CAST(tgt_1.Month_Num AS STRING)
      UNION ALL
      SELECT
        null AS source_system_code, null AS sales_segment_gm_name_sync, null AS current_portfolio_group_owner_full_name_sync, null AS current_portfolio_conformed_owner_full_name_sync, null AS current_portfolio_group_owner_full, null AS current_portfolio_conformed_owner_full, null AS publisher_vertical, null AS data_load_datetime, null AS relative_day_offset, null AS sales_segment_gm_name, null AS nca_industry_pillar, null AS revenue_type, null AS revenue_group_subtype, null AS fin_adtype_name, null AS cost_model_type, null AS xtend_flag, null AS adsize_name, null AS pos_page_achieved, null AS account_number, null AS advertiser_name, null AS advertiser_group, null AS advertiser_parent, null AS crm_account_number, null AS agency_name, null AS agency_group, null AS agency_parent, null AS booking_number, null AS booking_name, null AS booking_line_number, null AS booking_line_created_date, null AS insertion_name, null AS sort_caption, null AS classification_name, null AS reporting_date, null AS portfolio_group_name_current, null AS portfolio_conformed_name_current, null AS portfolio_parent_group_name_current, null AS portfolio_group_name_sync, null AS portfolio_conformed_name_sync, null AS portfolio_parent_group_name_sync, null AS unified_publication_name, null AS employee_name, null AS financial_year,
        CASE Month_Num WHEN 1 THEN '1' WHEN 2 THEN '1' WHEN 3 THEN '1' WHEN 4 THEN '2' WHEN 5 THEN '2' WHEN 6 THEN '2' WHEN 7 THEN '3' WHEN 8 THEN '3' WHEN 9 THEN '3' WHEN 10 THEN '4' WHEN 11 THEN '4' WHEN 12 THEN '4' END AS financial_quarter,
        null AS financial_week,
        CAST(tgt_2.Month_Num AS string) AS financial_month,
        CASE Month_Num WHEN 1 THEN 'Jul' WHEN 2 THEN 'Aug' WHEN 3 THEN 'Sep' WHEN 4 THEN 'Oct' WHEN 5 THEN 'Nov' WHEN 6 THEN 'Dec' WHEN 7 THEN 'Jan' WHEN 8 THEN 'Feb' WHEN 9 THEN 'Mar' WHEN 10 THEN 'Apr' WHEN 11 THEN 'May' WHEN 12 THEN 'Jun' END AS financial_short_month,
        null AS relative_fy_year_offset, null AS relative_fy_month_offset, null AS relative_cal_year_offset, null AS calendar_year, null AS calendar_week, null AS calendar_month, null AS calendar_month_short_name, null AS dow, null AS revenue_group_level_2_name, null AS publication_date, null AS revenue_category, null AS publishing_division_group, null AS adpoint_account_number, null AS FPE, null AS gross_revenue_amount, null AS gross_revenue_ex_adj_amount, null AS adjustment_amount, null AS col_cms_finance, null AS system_price_amount, null AS gross_less_agency_commission_amount, null AS dw_asl_load_timestamp,
        tgt_2.Type AS Rev_Type,
        tgt_2.Team AS Team,
        tgt_2.Target AS Target,
        'Rep Target' AS source
      FROM
        `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt AS tgt_2
      WHERE
        Type IS NOT null
    )","Create a single, consolidated, and persistent BigQuery view or a dbt model that pre-joins the `details_dashboard` and `Progo_Streaming_Tgt` tables. This view should define all necessary fields (e.g., `Rev_Type`, `Team`, `Target`, `source`, `Target_team_flag`, and all financial date dimensions) once. All dashboard metrics and dimensions should then query this single, well-defined view, significantly improving maintainability, consistency, and potentially performance.",351,9c8f39dc-bf5f-4292-bfe3-c6e1ec71c588
rev_type_dimension,Hardcoded Logic,"The `Rev_Type` classification logic is hardcoded within a `CASE` statement based on `unified_publication_name` and `fin_adtype_name`. This makes the classification inflexible to changes in business rules, new revenue streams, or additional categorization requirements. Any update to this logic requires modifying SQL in multiple places.","CASE WHEN unified_publication_name LIKE 'TUBI%' THEN 'TUBI' WHEN `LEFT`(upper(fin_adtype_name), 5) = 'VIDEO' THEN 'VIDEO' ELSE 'OTHER' END AS Rev_Type","Implement a governed lookup table for revenue type classification. This table would map `unified_publication_name` and `fin_adtype_name` (or their combinations) to `Rev_Type`. This lookup table can then be joined to the main data model, centralizing the classification logic and allowing for easier updates without modifying dashboard-specific SQL.",351,9c8f39dc-bf5f-4292-bfe3-c6e1ec71c588
"financial_month_dimension, financial_quarter_dimension, financial_short_month_dimension",Hardcoded Logic,"The derivation of financial month, quarter, and short month names relies on hardcoded `CASE` statements based on `Month_Num`. This approach is brittle and prone to errors if the fiscal year definition changes (e.g., start month), or if the mapping needs to be extended or adjusted for different reporting periods. It also duplicates date logic across metrics.",CASE Month_Num WHEN 1 THEN '1' WHEN 2 THEN '1' WHEN 3 THEN '1' WHEN 4 THEN '2' WHEN 5 THEN '2' WHEN 6 THEN '2' WHEN 7 THEN '3' WHEN 8 THEN '3' WHEN 9 THEN '3' WHEN 10 THEN '4' WHEN 11 THEN '4' WHEN 12 THEN '4' END AS financial_quarter,"Create a dedicated and governed date dimension table in BigQuery. This table should contain all necessary calendar and fiscal date attributes (e.g., `Month_Num`, `financial_month`, `financial_quarter`, `financial_short_month`, `relative_fy_year_offset`, etc.). This table can then be joined to the main data model, providing a single, consistent, and easily maintainable source of truth for all date-related attributes.",351,9c8f39dc-bf5f-4292-bfe3-c6e1ec71c588
multiple_metrics_and_dimensions,Data Mismatch / Inconsistency,"The target data table is inconsistently referenced as `Progo_Streaming_Tgt` in some metrics (e.g., `current_fy_revenue`, `prior_fy_revenue`, `total_target`) and `progo_target_streaming` in others (e.g., `team_dimension`, `target_team_flag_dimension`). This inconsistency can lead to confusion, potential data discrepancies if these are indeed different tables, or broken queries if one name is deprecated or permissions change for one but not the other.","FROM `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt
FROM `ncau-data-newsquery-prd`.sbx_dcp.progo_target_streaming","Investigate if `Progo_Streaming_Tgt` and `progo_target_streaming` refer to the same underlying data. If so, standardize the naming convention to a single, consistent, and canonical name. If they are distinct tables, clarify their specific purposes and ensure the correct table is used for each metric/dimension, potentially by integrating them into the consolidated view recommended above.",351,9c8f39dc-bf5f-4292-bfe3-c6e1ec71c588
"q1_unique_subscribers_amex, q1_unique_visit_dates_amex, q1_total_minutes_spent_amex, q2_total_page_views_by_brand_usq_news, q3_total_page_views_by_site_section_iceda, q5_unique_subscribers_by_month_iabcnsw, q5_total_page_views_by_month_iabcnsw, q5_total_page_views_by_month_iabcnsw",Hardcoded Logic / Lack of Parameterization,"Multiple metrics rely on hardcoded values for 'company', 'agency_code', and 'site_section'. For example, American Express is hardcoded with multiple aliases ('American Express', 'AMERICAN EXPRESS AUSTRALIA LIMITED', 'Amex'), and specific agencies like 'USQ', 'I-CEDA', and 'I-ABCNSW' are directly embedded in the WHERE clauses. This approach makes the dashboard inflexible; to analyze a different company or agency, new metrics (or dashboard copies) would need to be created. It also introduces significant maintenance overhead if these lists change or new aliases emerge, and increases the risk of inconsistencies.","company IN ('American Express', 'AMERICAN EXPRESS AUSTRALIA LIMITED', 'Amex')
agency_code IN ('USQ')
site_section IN ('news')","Implement dashboard-level parameters or filters for 'company', 'agency_code', and 'site_section'. For company aliases, consider a normalized 'company_id' or a lookup table in the underlying data model to manage variations centrally. This would allow a single metric definition to serve multiple analytical needs and improve data governance.",352,a6dbe5ec-8104-48cb-8395-d29b9c3e3494
All metrics,Anti-Pattern / Fixed Date Ranges,"Every metric in the dashboard uses a fixed, hardcoded date range (e.g., `visit_date >= DATE '2024-05-01' AND visit_date <= DATE '2025-04-30'`). This is a severe anti-pattern for a dashboard, as it means the data displayed will quickly become outdated and requires manual SQL updates for each new reporting period. It prevents any dynamic time-series analysis or user-driven date range selection, severely limiting the dashboard's utility and requiring constant developer intervention.",visit_date >= DATE '2024-05-01' AND visit_date <= DATE '2025-04-30',"Replace fixed date ranges with dynamic date parameters provided by the dashboard tool (e.g., Looker Studio's `_DS_START_DATE` and `_DS_END_DATE` or similar templating variables). This allows users to select custom date ranges or apply relative date filters (e.g., 'Last 30 days', 'This Quarter'), making the dashboard dynamic and self-service.",352,a6dbe5ec-8104-48cb-8395-d29b9c3e3494
"All metrics (total_incidents_monthly, response_achieved_incidents_monthly, response_breached_incidents_monthly, resolution_achieved_incidents_monthly, resolution_breached_incidents_monthly)",Anti-Pattern,"All five metrics contain identical, hardcoded filtering logic for `assignment_group`, `task_type`, `sla` (excluding trial), and `stage`. This redundancy leads to increased maintenance overhead, potential for inconsistencies if changes are required, and inefficient query execution due to repeated data scans.","WHERE SAFE_CAST(assignment_group AS STRING) = ""News Corp Australia - NewsQuery"" AND SAFE_CAST(task_type AS STRING) = ""incident"" AND SAFE_CAST(sla AS STRING) NOT LIKE '%Trial%' AND SAFE_CAST(stage AS STRING) = ""Completed""","Create a consolidated base view or a common table expression (CTE) that encapsulates these common filtering conditions. All dashboard metrics should then query this single, pre-filtered view, centralizing the logic and simplifying individual metric definitions. This approach enhances maintainability and promotes data consistency.",353,bedebbe4-3e46-47d5-bc36-6d867544ba66
"response_achieved_incidents_monthly, response_breached_incidents_monthly, resolution_achieved_incidents_monthly, resolution_breached_incidents_monthly",Hardcoded Logic,"The specific SLA types ('%Response%', '%Resolve%') and breach statuses ('false', 'true') are hardcoded as string literals within the SQL for each respective metric. This approach is brittle; any change in how SLA types are named or how breach status is represented in the source system would require modifications across multiple queries. The use of `LIKE` for `sla` also suggests potential for ambiguity if `sla` values are not strictly controlled.","SAFE_CAST(sla AS STRING) LIKE '%Response%' AND SAFE_CAST(has_breached AS STRING) = ""false""","If `sla` and `has_breached` are categorical, consider creating a dimension table for SLA types and breach statuses. Alternatively, within a consolidated base view, use more robust conditional logic (e.g., `CASE` statements or direct boolean comparisons if `has_breached` is truly a boolean) to derive clear flags like `is_response_sla` and `is_breached`. This would allow for more flexible and maintainable metric definitions in the dashboard.",353,bedebbe4-3e46-47d5-bc36-6d867544ba66
all_metrics,Anti-Pattern,"All SQL queries for both dimensions and aggregations include a `LIMIT 100` clause. This practice severely restricts the data returned to the dashboard, meaning only the first 100 rows from the underlying query are ever displayed. This makes the dashboard unsuitable for comprehensive analysis, as it provides an incomplete and potentially misleading view of the data. It suggests either a fundamental misunderstanding of Looker Studio's data handling, a misguided attempt at performance optimization, or that this dashboard is strictly for development/testing purposes and not production.",LIMIT 100,"Remove the `LIMIT 100` clause from all metric SQL definitions. If performance is a concern, investigate proper Looker Studio data source optimization techniques (e.g., caching, efficient joins, materialized views) or optimize the underlying BigQuery table, rather than artificially limiting the dataset.",354,47325be1-3ddd-4d01-8fc0-3ec1e532b196
record_count_by_default_website_for_charlie_hall,Hardcoded Logic,"This aggregation metric specifically filters for `ADUserName = 'Charlie Hall'`. While this might be intentional for a very specific use case, it makes the metric non-reusable for analyzing other users. This pattern is repeated for other metrics targeting 'Charlie Hall' and 'Social editor' roles.",WHERE SAFE_CAST(t0.ADUserName AS STRING) = 'Charlie Hall',"If the intent is to analyze user-specific data, consider implementing Looker Studio parameters or controls that allow users to dynamically select the `ADUserName`. Alternatively, create a more generic metric that groups by `ADUserName` and let dashboard filters handle specific user selections.",354,47325be1-3ddd-4d01-8fc0-3ec1e532b196
total_access_level_by_email_for_charlie_hall,Hardcoded Logic,"Similar to the previous point, this metric also hardcodes a filter for `ADUserName = 'Charlie Hall'`, limiting its general applicability.",WHERE SAFE_CAST(t0.ADUserName AS STRING) = 'Charlie Hall',"As above, refactor to use dynamic parameters or a more generic grouping to enhance reusability across different users.",354,47325be1-3ddd-4d01-8fc0-3ec1e532b196
unique_users_by_author_team_for_social_editors,Hardcoded Logic,"This metric hardcodes a filter for `ADUserRole = 'Social editor'`. This restricts the analysis to a single role, preventing insights into other user roles without creating duplicate metrics.",WHERE SAFE_CAST(t0.ADUserRole AS STRING) = 'Social editor',"If analysis across various roles is desired, replace the hardcoded role with a Looker Studio parameter or create a generic metric that groups by `ADUserRole`, allowing dashboard filters to select specific roles.",354,47325be1-3ddd-4d01-8fc0-3ec1e532b196
record_count_by_verity_usage_masthead_for_social_editors,Hardcoded Logic,"This metric also hardcodes a filter for `ADUserRole = 'Social editor'`, similar to the 'unique users' metric.",WHERE SAFE_CAST(t0.ADUserRole AS STRING) = 'Social editor',"As above, refactor to use dynamic parameters or a more generic grouping to enhance reusability across different roles.",354,47325be1-3ddd-4d01-8fc0-3ec1e532b196
record_count_by_entity_sdm_ideliver,Anti-Pattern / Hardcoded Logic / Duplication,"This metric, along with 'record_count_by_entity_prod_news', exhibits a severe anti-pattern: a large `UNION ALL` query that hardcodes each entity name ('routes', 'deliveries', etc.) and repeats complex de-duplication logic (`QUALIFY row_number() OVER (...) = 1`) for each entity. This approach is highly unscalable, difficult to maintain, and prone to errors if new entities are added or de-duplication rules change. The `env` column is also hardcoded to 'prd' in every unioned subquery, which is redundant.","WITH dataprep AS (
    SELECT
      'prd' AS env,
      'routes' AS name,
      day
    FROM
      `ncau-data-newsquery-prd.sdm_ideliver.routes`
    WHERE
      day BETWEEN PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY))) AND PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
    QUALIFY row_number() OVER (PARTITION BY day, route_no, publication_id, delivery_id ORDER BY added_at DESC, modified_at DESC) = 1
    UNION ALL
    SELECT
      'prd' AS env,
      'deliveries' AS name,
      day
    FROM
      `ncau-data-newsquery-prd.sdm_ideliver.deliveries`
    WHERE
      day BETWEEN PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY))) AND PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
    QUALIFY row_number() OVER (PARTITION BY day, delivery_id ORDER BY added_at DESC, modified_at DESC) = 1
    -- ... (repeated for other entities)
  )","Consolidate the underlying data model by creating a single, unified table for iDeliver entities, perhaps with an `entity_name` column. Alternatively, implement a metadata-driven approach where entity names and their respective de-duplication keys are stored in a configuration table, allowing for dynamic query generation or a more generic `UNION ALL` structure. This would significantly reduce code duplication and improve maintainability. The hardcoded 'prd' environment variable should be removed or made dynamic if other environments are ever introduced.",355,5f6befe5-af10-4fe9-80aa-9d3827c672a
record_count_by_entity_prod_news,Anti-Pattern / Hardcoded Logic / Duplication,"This metric is a near-exact duplicate of 'record_count_by_entity_sdm_ideliver', differing only in the GCP project and dataset it queries. This direct copy-pasting of complex, hardcoded logic is a major anti-pattern. Any change to the de-duplication logic or entity list would require identical modifications in two separate, large SQL queries, drastically increasing the risk of inconsistencies and errors.","WITH dataprep AS (
    SELECT
      'prd' AS env,
      'routes' AS name,
      day
    FROM
      `ideliver-6-prod.news.routes`
    WHERE
      day BETWEEN PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY))) AND PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
    QUALIFY row_number() OVER (PARTITION BY day, route_no, publication_id, delivery_id ORDER BY added_at DESC, modified_at DESC) = 1
    UNION ALL
    SELECT
      'prd' AS env,
      'deliveries' AS name,
      day
    FROM
      `ideliver-6-prod.news.deliveries`
    WHERE
      day BETWEEN PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY))) AND PARSE_DATE(""%Y%m%d"", FORMAT_DATE(""%Y%m%d"", CURRENT_DATE()))
    QUALIFY row_number() OVER (PARTITION BY day, delivery_id ORDER BY added_at DESC, modified_at DESC) = 1
    -- ... (repeated for other entities)
  )","Explore options for parameterizing the GCP project and dataset within a single, reusable SQL definition if Looker Studio's data source capabilities allow. Ideally, the data from both sources (`sdm_ideliver` and `news`) should be consolidated upstream into a single, harmonized data model if their schemas are compatible and the business logic for 'record count by entity' is truly identical. This would eliminate the need for two separate, duplicated metrics.",355,5f6befe5-af10-4fe9-80aa-9d3827c672a
dim_offer_category_name_standardized,Hardcoded Logic,"The 'Standardized Offer Category Name' metric uses an extensive and complex `CASE` statement to standardize offer names. This approach is prone to errors, difficult to maintain as new offer categories emerge, and lacks scalability. It also makes it challenging to understand the full set of mappings without inspecting the SQL.","CASE WHEN SAFE_CAST(offer_category_name AS STRING) IN ('$1/28 Days') THEN '$1/4w' WHEN SAFE_CAST(offer_category_name AS STRING) IN ('$4 P.W For 4 Weeks') THEN '$4/4w' WHEN SAFE_CAST(offer_category_name AS STRING) IN ('50% Off/12 Weeks', '50% Off/3m') THEN '50% Off/12w' WHEN SAFE_CAST(offer_category_name AS STRING) IN ('Full Price (Monthly)') THEN 'Full Price' WHEN SAFE_CAST(offer_category_name AS STRING) IN ('Hot Offer 3m') THEN 'Hot Offer 12w' ELSE SAFE_CAST(offer_category_name AS STRING) END","Replace the hardcoded `CASE` statement with a join to a dedicated lookup table for offer category standardization. This table should be managed centrally, allowing for easier updates, better data governance, and improved readability of the SQL.",356,00f8a37b-0c5f-40fd-be45-f408b3b6e0e5
dim_masthead_group,Hardcoded Logic,"The 'Masthead Group' metric uses a simple `CASE` statement for binary grouping ('TA' vs. 'M&Rs'). While simple, if the grouping logic becomes more complex or needs to include additional masthead groups, this hardcoded approach will become cumbersome and require direct SQL modification.",CASE WHEN SAFE_CAST(masthead AS STRING) = 'TA' THEN 'TA' ELSE 'M&Rs' END,"For future scalability and maintainability, consider externalizing masthead grouping logic into a lookup table or a dedicated transformation layer if more complex or dynamic groupings are anticipated. For simple binary cases, this might be acceptable, but it sets a precedent for hardcoding.",356,00f8a37b-0c5f-40fd-be45-f408b3b6e0e5
meas_acquisition_subscriber_count_distinct,Anti-Pattern,"Multiple measure metrics (e.g., `meas_acquisition_subscriber_count_distinct`, `meas_acquisition_subscriber_movement_count`, and all `meas_channel_count` and `meas_source_channel_count` metrics) contain identical or very similar hardcoded filter clauses for `masthead`, `offer_category_name`, `dw_tgt_partition_date`, `delivery_medium_type`, `is_paying_flag`, `fy_year`, and `is_corporate_b2b_flag`. This repetition is inefficient, error-prone, and makes global changes to these filters extremely difficult.","WHERE SAFE_CAST(masthead AS STRING) IN ('HS', 'AA', 'CM', 'TC', 'DT', 'GC', 'TB', 'TM', 'CP', 'NT', 'GA', 'WT', 'TA') AND SAFE_CAST(offer_category_name AS STRING) != 'Not Available' AND SAFE_CAST(dw_tgt_partition_date AS DATE) = CURRENT_DATE('Australia/Sydney') - 1 AND SAFE_CAST(delivery_medium_type AS STRING) = 'Digital' AND SAFE_CAST(is_paying_flag AS STRING) = 'Y' AND SAFE_CAST(fy_year AS INT64) = 2025 AND SAFE_CAST(is_corporate_b2b_flag AS STRING) = 'N'","These common filters should be applied at a higher level, such as within the `v_subscription_movement` view itself if they are universally applicable to the dashboard's context, or by leveraging Looker Studio's dashboard-level filters and parameters. This centralizes filter logic, improves maintainability, and allows for dynamic filtering by users.",356,00f8a37b-0c5f-40fd-be45-f408b3b6e0e5
meas_total_channels_count,Anti-Pattern,"The `meas_channel_count` and `meas_source_channel_count` families of metrics (e.g., `meas_bau_always_on_digital_count`, `meas_external_display_count`, `meas_other_bau_count`) are defined as separate `COUNT(CASE WHEN ... THEN 1 END)` statements, each querying the same base subquery. This leads to redundant queries against the `v_subscription_movement` view for each individual channel/source channel count.",SELECT COUNT(CASE WHEN SAFE_CAST(sold_in_channel AS STRING) = 'Bau Always On Digital' AND SAFE_CAST(offer_category_group_name AS STRING) != 'Non Consumer Offer' THEN 1 END) AS Bau_Always_On_Digital FROM (SELECT * FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` WHERE ...),"Consolidate these channel/source channel counts into a single query that groups by `sold_in_channel` and `sold_in_source_channel`. Looker Studio can then aggregate and display these counts efficiently from a single, more performant query. This reduces database load and simplifies metric definitions.",356,00f8a37b-0c5f-40fd-be45-f408b3b6e0e5
unique_pcsids_by_masthead_and_churn_category_2025_07_22_to_2025_08_21,Hardcoded Logic|Anti-Pattern,"The complex `CASE` statement defining 'churn_category' is duplicated across multiple metrics (e.g., 'unique_pcsids_by_masthead_and_churn_category_2025_07_22_to_2025_08_21', 'unique_pcsids_by_churn_category_2025_02_15_to_2025_03_17', and explicitly defined in 'churn_category_definition'). This repetition creates maintenance overhead, increases the risk of inconsistencies if the business logic for churn categories changes, and makes the SQL less readable and efficient. While 'churn_category_definition' exists, its logic is not centrally applied or referenced by other metrics.",CASE WHEN (t0.subscription_tenure <= 36) THEN 'Infancy' WHEN (t0.Churn_Score >= 0.700000) THEN 'Acute' WHEN (t0.Churn_Score < 0.700000 AND t0.Churn_Score >= 0.400000) THEN 'Specialist treatment' WHEN (t0.Churn_Score < 0.400000 AND t0.Churn_Score > 0.000000) THEN 'General Health' ELSE 'UNSCORED' END,"Centralize the 'churn_category' definition. This can be achieved by creating a BigQuery `VIEW` that includes this calculated column, or by defining it as a reusable calculated field within the Looker Studio data source. All dependent metrics should then reference this single, governed definition. Alternatively, consider materializing 'churn_category' directly into the `churn_automation` table during the ETL process if it's a stable, frequently used dimension.",357,81522b56-4697-49ac-93da-6faed306d799
unique_pcsids_by_masthead_2025_07_22_to_2025_08_21,Hardcoded Logic|Anti-Pattern,"Multiple metrics within the dashboard utilize specific, hardcoded *future* date ranges (e.g., July 22 - Aug 21, 2025; April 6 - May 6, 2025; Feb 15 - Mar 17, 2025). This design choice makes the dashboard static and unsuitable for ongoing, dynamic analysis of churn trends. The varying future date ranges across different metrics also complicate cross-comparison and limit the dashboard's flexibility for general business intelligence purposes.","WHERE SAFE_CAST(t0.rundate AS DATETIME) >= TIMESTAMP '2025-07-22' AND SAFE_CAST(t0.rundate AS DATETIME) < TIMESTAMP_ADD(TIMESTAMP '2025-08-21', INTERVAL 1 DAY)","Implement dynamic date filtering using Looker Studio's built-in date range controls. For specific reporting periods, utilize parameters or a dedicated date dimension table to allow users to select or define the desired time frame. For a 'Churn Score' dashboard, it's generally more valuable to focus on the most recent available data or a rolling window (e.g., last 30 days, current month) unless the dashboard's explicit purpose is future prediction.",357,81522b56-4697-49ac-93da-6faed306d799
"All metrics (e.g., sum_day_target_website_2025_06_03, sum_day_target_website_2025_06_19, etc.)",Hardcoded Logic / Anti-Pattern,"All metrics on this dashboard are defined with hardcoded specific dates (e.g., '2025-06-03', '2025-06-19'). This approach leads to metric proliferation, making the dashboard inflexible for analyzing trends over time or for different dates without creating new, redundant metrics. The `structure_sql` confirms the underlying table has 2192 unique target dates, indicating the potential for dynamic date selection.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE 'YYYY-MM-DD'","Consolidate these into a single 'Daily Website Target' metric. Implement a date range filter or a specific date parameter on the Looker Studio dashboard to allow users to select the desired date(s) dynamically, rather than hardcoding them into individual metrics.",358,abe67573-53fb-4cc2-a622-5cb9aa208166
"All metrics (e.g., sum_day_target_website_2025_06_03, sum_day_target_website_2025_06_19, etc.)",Hardcoded Logic / Anti-Pattern,All metrics are hardcoded to filter for `t0.website = 'The Weekly Times'`. The `structure_sql` shows that the `subscription_targets` table contains data for 18 unique websites. This hardcoding limits the dashboard's reusability and requires creating entirely new sets of metrics if targets for other websites need to be displayed.,AND t0.website = 'The Weekly Times',"Consolidate these into a single 'Daily Website Target' metric. Implement a website filter control on the Looker Studio dashboard to allow users to select the desired website dynamically, enabling a single dashboard to serve multiple website reporting needs.",358,abe67573-53fb-4cc2-a622-5cb9aa208166
"sum_day_target_website_2025_05_26_XsKDPs6_jsdKTIfFXTVSUb6PB2Z2, sum_day_target_website_2025_05_26_x82PpsIe329mvwkWLQH3ItUAIufP",Duplication / Anti-Pattern,"Two distinct metric IDs exist for the exact same business logic, target date (2025-05-26), and website ('The Weekly Times'). This indicates unnecessary duplication of metrics, which can lead to confusion, increased maintenance overhead, and potential inconsistencies if one is updated and the other is not.","SELECT SUM(t0.day_target_website) AS sum_day_target_website FROM `ncau-data-newsquery-prd.cdm_reference_data.subscription_targets` AS t0 WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = DATE '2025-05-26' AND t0.website = 'The Weekly Times'","Consolidate these two metrics into a single, unique metric definition. Investigate the process that led to the creation of duplicate metrics to prevent future occurrences.",358,abe67573-53fb-4cc2-a622-5cb9aa208166
app_unique_visitors_sport_july2025,Hardcoded Logic,"All content interaction metrics (App Unique Visitors, Total Page Views, Web Unique Visitors, AMP Unique Visitors) are hardcoded to a specific month (July 2025). This makes the 'monthly snapshot' dashboard static and requires manual updates for each new reporting period, severely limiting its utility and reusability.",WHERE (t0.month >= DATE '2025-07-01' AND t0.month <= DATE '2025-07-31' ...),"Implement dynamic date parameters (e.g., Looker Studio date range controls) or leverage a data model that automatically filters to the current/previous month. This would allow the dashboard to update automatically without manual SQL changes.",359,58dce9a4-ca60-474d-bf3a-733ee23e565b
audience_current_month_smartphone_sport_april2025,Hardcoded Logic,"All IPSOS audience metrics are hardcoded to a specific month (April 2025). Similar to content metrics, this design makes the dashboard static and unsustainable for ongoing monthly reporting.",WHERE (t0.Month >= DATE '2025-04-01' AND t0.Month <= DATE '2025-04-30' ...),Introduce dynamic date parameters or a data model that handles current/previous month logic automatically. This is crucial for a 'monthly snapshot' dashboard.,359,58dce9a4-ca60-474d-bf3a-733ee23e565b
app_unique_visitors_sport_july2025,Hardcoded Logic,"Content interaction metrics are hardcoded to `site_section = 'sport'`. While this aligns with the dashboard's name, it prevents reuse for other site sections without creating duplicate metrics. The `NOT(t0.brand_name IS NULL)` filter is also consistently applied, suggesting it could be part of a base view or model.",t0.site_section IN ('sport') AND NOT(t0.brand_name IS NULL),"If the intent is to analyze other site sections, consider parameterizing `site_section` or creating a more flexible data model. If `site_section = 'sport'` is a fixed requirement for *this* dashboard, ensure it's clearly documented. The `NOT(t0.brand_name IS NULL)` filter should be pushed down to the data model layer if it's a universal requirement for these metrics.",359,58dce9a4-ca60-474d-bf3a-733ee23e565b
audience_current_month_smartphone_sport_april2025,Hardcoded Logic,"IPSOS audience metrics are extensively hardcoded with specific values for `Gender`, `Age`, `Category`, `Subcategory`, and `Device`. This makes the metrics highly specific and not reusable for different audience segments or devices without creating new, redundant metrics.","t0.Gender IN ('All', 'ALL') AND t0.Age IN ('All', 'ALL') AND t0.Category = 'Sports' AND t0.Subcategory = 'Not Available' AND t0.Device = 'Smartphone'",Refactor the underlying data model to allow for dynamic filtering on these dimensions within Looker Studio. This would enable users to slice and dice audience data without requiring new hardcoded metrics for every combination.,359,58dce9a4-ca60-474d-bf3a-733ee23e565b
"os_level_4_jan_2025_mer_externals, os_level_6_apr_2025_monthly_expenses, sum_tm1_net_revenue_aug_2025, sum_tableau_actual_revenue_aug_2025, revenue_variance_tableau_tm1_aug_2025, is_print_digital_flag_2025, month_short_name_2025, sum_actual_amount_2025, os_level_3_2025_finance_agg, os_level_6_jul_2025_monthly_revenue",Hardcoded Logic,"All metrics contain hardcoded `fiscal_year = 2025` and/or specific `month_short_name` values (Jan, Apr, Aug, Jul). This makes the dashboard static and requires manual updates for each new fiscal year or reporting period, severely limiting its reusability and dynamic reporting capability for 'Month End Reporting'.","WHERE t0.fiscal_year = 2025 AND t0.month_short_name = 'Jan'
WHERE SUBSTR(SAFE_CAST(t0.fiscal_week_id AS STRING), 1, 4) = '2025'","Implement dynamic date parameters or controls within Looker Studio to allow users to select the fiscal year and month. Alternatively, leverage a robust date dimension table in BigQuery to filter data based on relative dates (e.g., current fiscal year, previous month) for automated updates.",360,906ca8a7-1733-4a1a-b2f5-2660551f3d3a
"sum_tm1_net_revenue_aug_2025, sum_tableau_actual_revenue_aug_2025, revenue_variance_tableau_tm1_aug_2025",Anti-Pattern,"The `SAFE.REGEXP_CONTAINS(t0.publication_code, '^(^[0-9]+$)$')` filter is repeated across multiple revenue metrics. This repetitive and somewhat redundant regex logic (the inner `^` and `$` are not strictly necessary) indicates a lack of reusability and potential for inconsistencies if the definition of 'numeric publication codes' changes.","AND SAFE.REGEXP_CONTAINS(t0.publication_code, '^(^[0-9]+$)$')","Define this common filtering logic as a reusable calculated field within the Looker Studio data source, or ideally, push this data quality/type definition upstream into the BigQuery view/table as a boolean flag or a pre-filtered column for better performance and maintainability.",360,906ca8a7-1733-4a1a-b2f5-2660551f3d3a
"os_level_4_jan_2025_mer_externals, os_level_6_apr_2025_monthly_expenses, sum_tm1_net_revenue_aug_2025, sum_tableau_actual_revenue_aug_2025, revenue_variance_tableau_tm1_aug_2025, is_print_digital_flag_2025, month_short_name_2025, sum_actual_amount_2025, os_level_3_2025_finance_agg, os_level_6_jul_2025_monthly_revenue",Anti-Pattern,"All SQL queries include a `LIMIT 10` clause. This severely restricts the number of rows returned for each metric, making the dashboard incapable of displaying comprehensive data for 'Month End Reporting Reconciliation'. This suggests the queries are either for testing/preview purposes or represent a fundamental misunderstanding of how Looker Studio queries should be constructed for full data display.",LIMIT 10,"Remove the `LIMIT 10` clause from all production queries. If these queries were intended for testing or data exploration, ensure that separate, full-data queries are used for the actual dashboard components. Investigate the original intent behind this limitation.",360,906ca8a7-1733-4a1a-b2f5-2660551f3d3a
total_incidents_by_category_filtered_created_date,Hardcoded Logic,The metric uses a hardcoded date range ('2023-09-01' to '2024-09-30') and a hardcoded `LIMIT 100`. This makes the dashboard static and prevents dynamic analysis over different time periods or viewing all relevant categories.,"SAFE_CAST(t0.Created AS DATE) >= DATE '2023-09-01'
  AND SAFE_CAST(t0.Created AS DATE) <= DATE '2024-09-30'
LIMIT 100;","Remove hardcoded date ranges and `LIMIT` clauses. Implement Looker Studio date range controls for dynamic filtering and allow all relevant data to be displayed. If a limit is truly necessary for performance, it should be a configurable parameter.",363,ec3c813c-6c23-4a43-926c-73a56c6df69e
total_incidents_by_category_filtered_created_date,Anti-Pattern,"The metric joins to a lookup table (`incident_category`) located in a development dataset (`ncau-data-newsquery-dev.ntntemp`). Referencing development environments in production dashboards is a significant governance and stability risk, as changes in dev could break the production dashboard.","LEFT JOIN
  `ncau-data-newsquery-dev`.ntntemp.incident_category AS ic
  ON t0.short_description LIKE ic.incident_subject","Migrate the `incident_category` lookup table to a governed production dataset (e.g., `ncau-data-newsquery-prd.cdm_governance`) to ensure stability, reliability, and proper data governance.",363,ec3c813c-6c23-4a43-926c-73a56c6df69e
total_incidents_by_category_filtered_created_date,Hardcoded Logic,"The SQL contains repeated hardcoded filters for `assignment_group`, `task_type`, and `sla`. These filters are likely common across multiple metrics in the dashboard, leading to redundancy and maintenance overhead.","AND assignment_group = ""News Corp Australia - NewsQuery""
      AND task_type = ""incident""
      AND sla NOT LIKE '%Trial%'","Consolidate common filters into a shared BigQuery view or a CTE that can be reused across metrics. Alternatively, leverage Looker Studio's filtering capabilities or parameters to allow users to dynamically select these values, reducing hardcoding in the SQL.",363,ec3c813c-6c23-4a43-926c-73a56c6df69e
sla_achievement_rate_resolution_monthly,Hardcoded Logic,"The metric uses a hardcoded `LIMIT 12`, restricting the analysis to only the last 12 months. This limits historical trend analysis and flexibility for users.",LIMIT 12;,"Remove the hardcoded `LIMIT 12` to allow for a full historical trend. If performance is a concern, consider optimizing the underlying data model or implementing incremental loads. If a specific period is desired, use Looker Studio's date range controls.",363,ec3c813c-6c23-4a43-926c-73a56c6df69e
sla_achievement_rate_resolution_monthly,Hardcoded Logic,"Similar to other metrics, this metric contains repeated hardcoded filters for `assignment_group`, `task_type`, `sla`, and specific SLA types (`resolution`, `resolve`).","AND assignment_group = ""News Corp Australia - NewsQuery""
      AND task_type = ""incident""
      AND sla NOT LIKE '%Trial%'
      AND (lower(sla) LIKE ""%resolution%"" OR lower(sla) LIKE ""%resolve%"")","Consolidate common filters into a shared BigQuery view or a CTE. For the SLA type filter, consider creating a governed lookup table for SLA types or using Looker Studio parameters if dynamic selection is desired.",363,ec3c813c-6c23-4a43-926c-73a56c6df69e
total_service_requests_monthly,Hardcoded Logic,"The metric uses a hardcoded `LIMIT 12`, restricting the analysis to only the last 12 months, similar to the SLA achievement rate metric.",LIMIT 12;,Remove the hardcoded `LIMIT 12` to enable comprehensive historical analysis. Use Looker Studio's date range controls for user-defined timeframes.,363,ec3c813c-6c23-4a43-926c-73a56c6df69e
total_service_requests_monthly,Hardcoded Logic,The SQL contains repeated hardcoded filters for `task_type` and `assignment_group`.,"task_type = ""sc_req_item""
  AND assignment_group = ""News Corp Australia - NewsQuery""",Consolidate common filters into a shared BigQuery view or a CTE that can be reused across metrics. Leverage Looker Studio's filtering capabilities or parameters for dynamic selection.,363,ec3c813c-6c23-4a43-926c-73a56c6df69e
all_metrics,Anti-Pattern,"All metrics use `dw_partition_date = (SELECT max(dw_partition_date) FROM ...)` to select the latest partition. While common for daily snapshots, this pattern is repeated across all metrics and could be consolidated if the underlying table is always partitioned by date and the intent is always the latest data.","dw_partition_date = (
        SELECT
          max(dw_partition_date)
        FROM
          `ncau-data-newsquery-prd`.cdm_snow.servicenow
      )","If the `servicenow` table is consistently partitioned by `dw_partition_date` and the dashboard always requires the latest complete partition, consider creating a view on top of `servicenow` that automatically selects the max partition, simplifying downstream queries. Ensure this logic aligns with the dashboard's overall time-series requirements, especially when combined with `sys_created_on` filters.",363,ec3c813c-6c23-4a43-926c-73a56c6df69e
current_year_gross_revenue_q5_client_digital_freenews_adsize_content,Data Mismatch,"Multiple metrics (all 'Q5 Context' and 'Financial Week' metrics) contain a `(CASE WHEN (false = true) THEN 1 ELSE 0 END) = 1` condition in their WHERE clause. This condition will always evaluate to false, causing these metrics to return no results. This severely impacts the dashboard's functionality and data accuracy for these sections.",AND (CASE WHEN (false = true) THEN 1 ELSE 0 END) = 1,Remove or correct the `(CASE WHEN (false = true) THEN 1 ELSE 0 END) = 1` condition. Investigate the original intent behind this logic to ensure the correct filter is applied and data is returned as expected.,364,e63c5845-a981-4540-bb6d-0aba73a2dd3f
current_year_gross_revenue_q3_client_digital_freenews_display_gm,Hardcoded Logic,"Numerous filter values (e.g., `Sales_Group = 'Client'`, `product_group IN ('Free News & Lifestyle')`, `adtype_l1 IN ('Display')`, `sales_segment_gm_name_sync`, and specific financial periods) are hardcoded directly into the SQL of multiple metrics. This makes the dashboard inflexible and difficult to maintain, as any change to these business rules requires updating every affected metric individually.","t0.Sales_Group = 'Client'
    AND t0.product_group IN ('Free News & Lifestyle')
    AND t0.adtype_l1 IN ('Display')
    AND t0.sales_segment_gm_name_sync IN ('Belinda MacPherson', 'Lou Barrett', 'Vacant')","Centralize common filter logic. Consider using Looker Studio parameters, data source filters, or a more robust data model (e.g., a view or a dedicated dimension table) to manage these filters dynamically and consistently across metrics.",364,e63c5845-a981-4540-bb6d-0aba73a2dd3f
current_year_gross_revenue_q5_client_digital_freenews_adsize_content,Anti-Pattern,"The SQL contains highly complex and hardcoded `CASE` statements for mapping `fin_adtype_name` to `adtype_l1` categories (e.g., 'CONTENT INTEGRATION', 'NON TARGETED'). This logic is prone to errors (e.g., inconsistent spacing like ' NON TARGETED' vs ' NON TARGETED'), difficult to read, and inflexible to changes in business definitions. Similar issues exist for `revenue_type` and `product_group` mappings.","(CASE WHEN (STRPOS(t0.fin_adtype_name, 'CONTENT INTEGRATION') > 0) THEN 'CONTENT INTEGRATION' WHEN (STRPOS(t0.fin_adtype_name, 'NON-TARGETED') > 0) THEN ' NON TARGETED' WHEN (t0.fin_adtype_name IN ('XTEND', 'UNKNOWN', 'ECOMMERCE', 'EDMEDIA', 'FINDA', 'TABOOLA')) THEN ' NON TARGETED' WHEN (STRPOS(t0.fin_adtype_name, 'TARGETED') > 0) THEN '   TARGETED' WHEN (t0.fin_adtype_name IN ('CLASSIFIED', 'COLOUR MAGAZINES', 'CREATIVE PRODUCTION', 'CREATIVES', 'DISPLAY', 'NMG CLASSIFIED (NON-TARGETED)')) THEN '  PRINT' ELSE '     OTHER' END) IN ('Content Integration')","Extract complex mapping logic into a dedicated lookup table or a pre-processed view in the data warehouse. This improves maintainability, readability, and ensures consistency across all dashboards and reports that rely on these categorizations. Review and standardize string literals (e.g., remove inconsistent spacing).",364,e63c5845-a981-4540-bb6d-0aba73a2dd3f
current_year_gross_revenue_q3_client_digital_freenews_display_gm,Anti-Pattern,"The financial period filtering uses a complex `CONCAT` and `CASE` statement to construct a string like 'Apr Q4 H2'. This logic is repeated across all metrics and is not easily adaptable if financial period definitions change or if different granularities are needed. It also relies on string matching for date filtering, which is less efficient and robust than proper date/time functions.","CONCAT(SAFE_CAST(t0.financial_short_month AS STRING),' ',CONCAT('Q',SAFE_CAST(t0.financial_quarter AS STRING)),' ',CASE WHEN (SAFE_CAST(t0.financial_quarter AS INT64) >= 1 AND SAFE_CAST(t0.financial_quarter AS INT64) <= 2) THEN 'H1' WHEN (SAFE_CAST(t0.financial_quarter AS INT64) >= 3 AND SAFE_CAST(t0.financial_quarter AS INT64) <= 4) THEN 'H2' ELSE SAFE_CAST(t0.financial_quarter AS STRING) END) IN ('Apr Q4 H2', 'May Q4 H2', 'Jun Q4 H2')","Implement a dedicated date dimension table that includes pre-calculated financial periods (e.g., `financial_year`, `financial_quarter`, `financial_month`, `financial_half`, `financial_period_string`). This allows for simpler, more efficient, and more flexible date filtering and aggregation.",364,e63c5845-a981-4540-bb6d-0aba73a2dd3f
digital_gross_revenue_2025_by_product_group,Hardcoded Logic|Anti-Pattern,"This metric uses extremely long and brittle `NOT IN` clauses to exclude specific `unified_publication_name` and `publication_name` values. This hardcoding makes the query difficult to read, maintain, and update. Any change to these exclusion lists requires a direct modification of the SQL, increasing the risk of errors and making it challenging to apply consistent exclusion rules across multiple metrics or dashboards. It also indicates a lack of a centralized, governed list of excluded publications.","t0.unified_publication_name NOT IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Punters.com.au', 'odds.com.au', 'RACENET', 'Racenet App', 'SKYNEWS.ADMIN', 'SUDDENLY.CW', 'SUDDENLY.OTHER', 'SUDDENLY.TGG', 'SUPERCOACH', 'Sky News', 'Stellar.Admin', 'Taste.Admin', 'TAUS.ADMIN', 'Vogue.Admin', 'Vogueliving.Admin')
    AND t0.publication_name NOT IN ('Vogueliving.Admin', 'Vogue.Admin', 'ADMIN.ADV', 'ADMIN.DTM', 'ADMIN.HWT', 'ADMIN.SALES', 'ADMIN.SPORT', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'Taste.Admin', 'TAUS.ADMIN', 'TASTE.ADMIN', 'STELLAR.ADMIN', 'ADMIN.TCM', 'NEWS.ADMIN', 'SKYNEWS.ADMIN', 'National Tabloid Preprint', 'News.Admin', 'Admin.DTM', 'Admin.International', 'BODYANDSOUL.ADMIN', 'Bestrecipes.Admin', 'ESCAPE.ADMIN', 'Admin.Sales', 'Admin.TCM', 'Kidspot.Admin', 'BESTRECIPES.ADMIN', 'Bodyandso","Replace the hardcoded `NOT IN` lists with a join to a dedicated, governed lookup table (e.g., `dim_excluded_publications`) that contains all publication names to be excluded. This centralizes the exclusion logic, improves maintainability, and ensures consistency across reports. Similarly, `source_system_code` and `booking_number` exclusions should be managed via lookup tables or configuration.",365,f65a9149-93b4-4aa9-aef6-d12002853222
unique_booking_numbers_content_native_2025_2026,Hardcoded Logic,"The metric relies on a hardcoded list of `fin_adtype_name` values to define 'Content Discovery' and 'Native' ad types. While shorter than other lists, this still represents a fixed definition within the query itself. If the business definitions of these ad types evolve or new sub-types are introduced, the SQL will need manual modification.","t0.fin_adtype_name IN ('Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)')","Consider creating a `dim_ad_type_category` lookup table or a view that maps granular `fin_adtype_name` values to broader business categories like 'Content Discovery' or 'Native'. This would allow the query to filter on the category, making it more robust to changes in underlying ad type names.",365,f65a9149-93b4-4aa9-aef6-d12002853222
financial_years_display_video_q4,Hardcoded Logic,"Similar to the previous metric, this dimension uses a hardcoded list of `fin_adtype_name` values to define 'Display' and 'Video' ad types. This approach is inflexible and does not scale well if the definitions of these ad types change or expand.","t0.fin_adtype_name IN ('Display', 'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Non-Targeted)', 'Social Display (Targeted)', 'Standard Display (Non-Targeted)', 'Standard Display (Targeted)', 'TTIV (Targeted)', 'Video (Non-Targeted)')","Implement a `dim_ad_type_category` lookup table or a view, as suggested for the 'Unique Booking Numbers' metric. This would allow for a more dynamic and maintainable way to group and filter ad types based on business definitions.",365,f65a9149-93b4-4aa9-aef6-d12002853222
"paid_impressions_video_ssp_daily, revenue_net_video_ssp_daily, ssp_group_dimension",Hardcoded Logic / Anti-Pattern,"The logic for grouping Supply-Side Platforms (SSPs) into 'EBDA' (Index Exchange, OpenX, PubMatic, Rubicon) is hardcoded directly within the `WHERE` and `GROUP BY` clauses of the `paid_impressions_video_ssp_daily` and `revenue_net_video_ssp_daily` metrics, and also explicitly defined in the `ssp_group_dimension`. This duplication of logic makes the dashboard brittle; any change to the SSP grouping rules would require modifying multiple SQL queries, increasing the risk of inconsistencies and maintenance overhead.",(CASE WHEN (t0.Source = 'Index Exchange' OR t0.Source = 'OpenX' OR t0.Source = 'PubMatic' OR t0.Source = 'Rubicon') THEN 'EBDA' ELSE SAFE_CAST(t0.Source AS STRING) END),"Centralize the SSP grouping logic. This can be achieved by creating a dedicated lookup table in BigQuery that maps `Source` values to `SSP Group` values, or by creating a BigQuery view that pre-calculates the `SSP Group` dimension. All metrics can then join to this lookup table/view, ensuring a single source of truth for SSP grouping and simplifying future updates.",366,b15d856f-e3ce-4991-bf2a-92395390524f
"paid_impressions_video_ssp_daily, revenue_net_video_ssp_daily, revenue_net_by_product_type, ssp_group_dimension",Anti-Pattern,"All provided SQL queries for the dashboard's metrics and dimensions include a `LIMIT 10` clause. For a 'Rolling 60 Day Overview' dashboard, this is highly unusual for core aggregation metrics (like total impressions or revenue) as it would only return a subset of the data, potentially leading to misleading or incomplete insights. While it might be appropriate for 'Top N' lists, its presence on all queries suggests a potential misunderstanding of dashboard data requirements or a placeholder that was never removed.",LIMIT 10;,"Review the intended purpose of each visualization on the dashboard. For metrics meant to display full aggregations or trends over the 60-day period, the `LIMIT 10` clause should be removed. If specific visualizations are designed to show 'Top N' results, ensure this is clearly communicated in the dashboard's design and documentation.",366,b15d856f-e3ce-4991-bf2a-92395390524f
"paid_impressions_video_ssp_daily, revenue_net_video_ssp_daily",Hardcoded Logic / Data Mismatch,"The `SSPDate` filter in the `paid_impressions_video_ssp_daily` and `revenue_net_video_ssp_daily` metrics uses a hardcoded date range (`BETWEEN DATE '2025-05-25' AND DATE '2025-07-22'`). This is a future date range, which contradicts the 'Rolling 60 Day Overview' nature of the dashboard. This suggests either a placeholder in the provided SQL, an error in the SQL generation, or that the dashboard is not currently displaying live, relevant data.",t0.SSPDate BETWEEN DATE '2025-05-25' AND DATE '2025-07-22',"Update the SQL logic to use dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to ensure the 'rolling 60 day' window is always current relative to the execution date. For example, `t0.SSPDate BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY) AND CURRENT_DATE()`.",366,b15d856f-e3ce-4991-bf2a-92395390524f
multiple_revenue_metrics,Anti-Pattern,"A very long and complex `WHERE` clause, defining what constitutes an 'Open Contra Account,' is duplicated verbatim across 8 different revenue metrics (e.g., `total_gross_revenue_open_contra`, `gross_revenue_previous_fy_open_contra`, `gross_revenue_digital_open_contra`). This makes maintenance extremely difficult; any change to the 'Open Contra Account' definition requires updating 8 separate SQL queries. It also significantly increases the risk of inconsistencies if updates are not applied uniformly.","lower(SAFE_CAST(t0.advertiser_name AS STRING)) LIKE 'ctr%' AND SAFE_CAST(t0.adpoint_account_number AS STRING) != '20696' AND NOT(SAFE_CAST(t0.cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(t0.revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(t0.revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(t0.style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(t0.source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(t0.publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(t0.publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(t0.account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(t0.adtype_name AS STRING) = '-'))) AND (CASE WHEN SAFE_CAST(t0.adpoint_account_number AS STRING) IN (SELECT DISTINCT NMBS_T_Number FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data` WHERE SAFE_CAST(Status AS STRING) = 'Closed') THEN 'Closed' ELSE 'Open' END) = 'Open'","Create a dedicated, governed data model layer (e.g., a BigQuery view or a dbt model) that pre-filters `v_adsales_revenue_client_daily` to include only 'Open Contra Accounts' based on these common conditions. All dependent metrics should then query this consolidated view. This centralizes the business logic, improves maintainability, and ensures consistency.",367,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
multiple_revenue_metrics,Performance Anti-Pattern,"The 'Open' or 'Closed' status of an account is determined by a subquery within a `CASE` statement in the `WHERE` clause. This subquery (`SELECT DISTINCT NMBS_T_Number FROM ... WHERE Status = 'Closed'`) is executed for every row in the main table (`v_adsales_revenue_client_daily`), which can lead to significant performance degradation, especially on large datasets. This logic is repeated across 8 revenue metrics.",(CASE WHEN SAFE_CAST(t0.adpoint_account_number AS STRING) IN (SELECT DISTINCT NMBS_T_Number FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data` WHERE SAFE_CAST(Status AS STRING) = 'Closed') THEN 'Closed' ELSE 'Open' END) = 'Open',Refactor this logic to avoid a correlated subquery in the `WHERE` clause. Consider: 1) Joining `v_adsales_revenue_client_daily` with `sbx_dcp.contra_sheet_data` directly on `adpoint_account_number` and `NMBS_T_Number`. 2) Creating a pre-computed lookup table or CTE for closed accounts and then using a `LEFT JOIN` with a `WHERE` clause check for `NULL` to identify open accounts. 3) Pushing this status determination logic upstream into the data model if `contra_sheet_data` is a stable source.,367,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
account_record_count_specific_ctr_advertisers,Hardcoded Logic,"The `account_record_count_specific_ctr_advertisers` metric uses a hardcoded list of specific advertiser names. If this list is subject to frequent changes or is managed externally, updating the dashboard becomes a manual and error-prone process, requiring direct SQL modification.","SAFE_CAST(t0.advertiser_name AS STRING) IN ('CTR_2023_AFL SPORT', 'CTR_2023_GWS GIANTS', 'CTR_2023_SYDNEY SWANS', 'CTR_2025_Greater Western Sydney Giants', 'CTR_2025_Raising Literacy Australia')","If this list is dynamic or originates from a business-managed source, consider storing these specific advertiser names in a dedicated lookup table in BigQuery. The SQL query can then join to this lookup table, making the list easily manageable without requiring dashboard SQL modifications.",367,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
multiple_metrics,Code Verbosity/Potential Schema Mismatch,"Many columns are `SAFE_CAST` to `STRING` (e.g., `advertiser_name`, `adpoint_account_number`, `revenue_transaction_status`) or `INT64` (e.g., `relative_fy_year_offset`). While `SAFE_CAST` prevents errors, its pervasive use can indicate underlying schema inconsistencies or a defensive coding style that adds unnecessary verbosity and potential performance overhead if the columns are already of the target type.","SAFE_CAST(t0.advertiser_name AS STRING), SAFE_CAST(t0.relative_fy_year_offset AS INT64)","Review the schema of the source tables (`v_adsales_revenue_client_daily`, `details_dashboard`, `contra_sheet_data`). Ensure columns have appropriate data types defined at the source. If a column is already a `STRING`, `SAFE_CAST(... AS STRING)` is redundant and can be removed. If type conversions are genuinely needed, ensure they are efficient and necessary, and consider if the upstream data pipeline can enforce correct types.",367,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
total_sends_valid_newsletters_filtered_q1,Hardcoded Logic|Anti-Pattern,"This metric, along with 'Total Clicks (Valid Newsletters, Q1 Filter)' and 'Total Unique Opens (Valid Newsletters, Q1 Filter)', relies on an extremely complex and hardcoded `CASE WHEN` statement with multiple `SAFE.REGEXP_CONTAINS` clauses to define 'valid newsletter types'. This logic is duplicated across several related metrics, making it difficult to maintain, prone to errors, and opaque to business users. Any change to the definition of a 'valid newsletter' requires modifying multiple SQL queries.","WHERE
    (CASE WHEN (t0_sub1.clmn13_ AND NOT(t0_sub1.clmn17_)) THEN true WHEN (t0_sub1.clmn7_ AND NOT(t0_sub1.clmn11_)) THEN true WHEN (t0_sub1.clmn10_ AND NOT(t0_sub1.clmn11_)) THEN true WHEN (t0_sub1.clmn8_ AND t0_sub1.clmn14_) THEN true WHEN (t0_sub1.clmn9_ AND NOT(t0_sub1.clmn15_)) THEN true ELSE false END) = true","Externalize the 'valid newsletter type' logic into a dedicated lookup table or a pre-calculated field in the data model. This would allow for centralized management of business rules, improve readability, and simplify metric definitions.",368,d410ca5f-3513-4250-ae00-7f18c6347e8c
total_clicks_dt_subject_filtered_q5,Data Mismatch|Anti-Pattern,"This metric, and 'Total Opens (Daily Telegraph, Subject Filtered, Q5)', contains a logically contradictory filter: `t0_sub1.newsletter_brand = 'DailyTelegraph' AND t0_sub1.newsletter_brand IN ('TheAustralian')`. A single `newsletter_brand` cannot simultaneously be 'DailyTelegraph' and 'TheAustralian'. This filter will always result in zero rows, making the metric display 0 and rendering it useless. The business description correctly identifies this issue, but it remains in the SQL.","AND t0_sub1.newsletter_brand = 'DailyTelegraph'
    AND t0_sub1.newsletter_brand IN ('TheAustralian')","Correct the filter logic to reflect the intended business requirement. If the goal is to show data for *either* 'DailyTelegraph' *or* 'TheAustralian', change `AND` to `OR`. If it's meant to be for 'DailyTelegraph' only, remove the `IN ('TheAustralian')` clause. If it's a comparison, it needs to be structured differently.",368,d410ca5f-3513-4250-ae00-7f18c6347e8c
newsletter_value_score_q1,Hardcoded Logic|Anti-Pattern,"This calculated field, along with 'Total Cost of Clicks (Q1 Filter)' and 'Total Cost of Unique Opens (Q1 Filter)', embeds extremely complex business logic for categorization and value/cost calculation directly into the SQL using extensive `CASE WHEN` statements with numerous `SAFE.REGEXP_CONTAINS` patterns. This logic is highly specific, difficult to audit, and duplicated across multiple calculated fields. Any change to the scoring or cost model requires direct SQL modification.","SUM(CASE WHEN (SAFE.REGEXP_CONTAINS(t0_sub2.clmn2_, 'ADV_CRIME_CUR_02|ADV_FRONT-PAGE_CUR_01|...')) THEN 0 WHEN ((CASE WHEN (SAFE.REGEXP_CONTAINS(t0_sub1.clmn2_, 'BREAKING|LATESTNEWS_ALERT')) THEN 'Breaking' ... ELSE 'Other' END) = 'Breaking') THEN 25 ELSE 50 END)","Move this complex business logic into a dedicated data model layer (e.g., a BigQuery view or a derived table) where newsletter types, categories, and their associated values/costs are defined and maintained. This would simplify the Looker Studio calculated fields to simple aggregations or joins, improving maintainability, transparency, and performance.",368,d410ca5f-3513-4250-ae00-7f18c6347e8c
total_opens_by_activity_type_q2,Hardcoded Logic|Anti-Pattern,"This metric, and 'Total Delivered Count (Q2 Filter)', uses a complex `CASE WHEN` statement with `REGEXP_CONTAINS` to derive a 'publication_group_alias' directly within the query. This logic is also duplicated in the `publication_group_dimension`. This hardcoded categorization is brittle and difficult to manage, especially with the extensive list of brands and email name patterns.","SAFE.REGEXP_CONTAINS(SAFE_CAST(CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_brand, 'BallaratNews|BassCoastLeader|...')) THEN 'Leader' ... ELSE t0.newsletter_brand END AS publication_group_alias), 'TheAdvertiser|TheAustralian|CourierMail|HeraldSun|DailyTelegraph')","Implement a proper dimension table for 'Publication Group' in the underlying data warehouse. This table should map `newsletter_brand` and `newsletter_send_email_name` to their respective publication groups, allowing for a simple join instead of complex, repeated `CASE` statements.",368,d410ca5f-3513-4250-ae00-7f18c6347e8c
newsletter_brand_group_dimension,Hardcoded Logic / Anti-Pattern,"The `newsletter_brand_group` dimension uses a hardcoded `CASE` statement with `REGEXP_CONTAINS` to categorize newsletter brands. This approach is brittle; any new brands or changes to existing brand names will require manual updates to the SQL, increasing maintenance overhead and risk of errors. The `ELSE 'other'` clause can mask unclassified data.","SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_brand, 'CourierMail|DailyTelegraph|HeraldSun|TheAdvertiser')) THEN 'Metro' WHEN (t0.newsletter_brand = 'TheAustralian') THEN 'The Australian' WHEN (t0.newsletter_brand = 'News') THEN 'News.com.au' ELSE 'other' END AS newsletter_brand_group","Implement a dedicated lookup table for `newsletter_brand` to `newsletter_brand_group` mapping. This table can be easily updated and maintained by data stewards, ensuring consistency and reducing reliance on SQL code changes.",369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
is_solus_email_flag,Hardcoded Logic / Anti-Pattern,"Multiple boolean flag dimensions (`is_solus_email`, `is_sport_email`, `is_weekday_weekend_email`, `is_edm_email`, `is_mkt_email`) rely on hardcoded `REGEXP_CONTAINS` patterns against `newsletter_send_email_name`. This makes it difficult to manage and update the classification rules, especially as new email types or naming conventions emerge.","SELECT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered')) AS is_solus_email","Centralize email classification rules. Consider a lookup table that maps `newsletter_send_email_name` patterns to various email type flags. Alternatively, define these flags in a data modeling layer (e.g., LookML, dbt) for better reusability and maintainability.",369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
is_publisher_email_flag,Extreme Hardcoded Logic / Anti-Pattern / Maintainability Nightmare,"This flag uses an extremely long and complex `REGEXP_CONTAINS` pattern, making it unreadable, highly error-prone, and virtually impossible to maintain. The sheer volume of hardcoded strings indicates a severe lack of data governance for email naming conventions or a missing lookup mechanism.","SELECT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape |Delicious |Beauty EDM|Vogue Living Weekly|BSL_|VA newsletter')) AS is_publisher_email","This is a critical area for refactoring. Implement a comprehensive lookup table for `newsletter_send_email_name` patterns, mapping them to `is_publisher_email`. This table should be managed and updated by business or data governance teams, not directly in SQL logic.",369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
is_test_or_system_email_flag,Extreme Hardcoded Logic / Anti-Pattern / Maintainability Nightmare,"Similar to `is_publisher_email_flag`, this flag uses an extremely long and complex `REGEXP_CONTAINS` pattern. This makes the logic difficult to understand, prone to errors, and very hard to maintain or extend as new test/system email patterns emerge.","SELECT (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT|MARKETING|Special Offer|EVENT|Not Available|_Suspend|_Failed|Abandon|Reinforcement|System|Connect|_Lead_Nurture|Rewards_|_Wave|Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Delivery_Issue|Decommission|Switch|Modify|Cancellation|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause|Triggered|Journey|Winback|WINBACK|Newspass|NEWSPASS|Feature-led')) AS is_test_or_system_email","Implement a comprehensive lookup table for `newsletter_send_email_name` patterns, mapping them to `is_test_or_system_email`. This table should be managed and updated by business or data governance teams, not directly in SQL logic.",369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
newsletter_brand_subgroup_dimension,Complex Hardcoded Logic / Anti-Pattern,"This dimension uses a very long `CASE WHEN` statement with multiple `REGEXP_CONTAINS` clauses to define granular brand subgroups. This is a common anti-pattern for hierarchical or complex categorizations. The order of `WHEN` clauses can subtly affect results, and adding new subgroups or modifying existing ones is cumbersome and risky.","SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_brand, 'BallaratNews|BassCoastLeader|CranbourneLeader|FrankstonLeader|GreaterDandenong|MorningtonPeninsula|StonningtonLeader|TheAlburyWodongaNews|TheBendigoNews|TheGoulburnValleyNews|TheMelbourneCityNews|TheMilduraNews|TheWarrnamboolNews|WhitehorseLeader|Whittlesea|WyndhamLeader')) THEN 'Leader' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_brand, 'BarossaClareGawlerNews|Messenger|PortLincolnNews|TheMessengerNorthNews|TheMessengerSouthNews|TheMountGambierNews')) THEN 'Messenger' ... ELSE t0.newsletter_brand END AS newsletter_brand_subgroup",Create a lookup table for `newsletter_brand` to `newsletter_brand_subgroup` mapping. This allows for external management of the hierarchy and simplifies the SQL to a simple join.,369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
is_marketing_email_combined_flag_dimension,Highly Complex & Nested Hardcoded Logic / Anti-Pattern / Performance Risk,"This metric combines several other hardcoded `REGEXP_CONTAINS` flags using complex `AND NOT` and `OR` logic. This creates an extremely difficult-to-read and maintain SQL statement. Any change in the definition of its constituent flags (e.g., `is_publisher_email`, `is_solus_email`) necessitates a complex update here, increasing the likelihood of introducing bugs.","SELECT (
  (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape |Delicious |Beauty EDM|Vogue Living Weekly|BSL_|VA newsletter') AND NOT(SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT|MARKETING|Special Offer|EVENT|Not Available|_Suspend|_Failed|Abandon|Reinforcement|System|Connect|_Lead_Nurture|Rewards_|_Wave|Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Delivery_Issue|Decommission|Switch|Modify|Cancellation|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause|Triggered|Journey|Winback|WINBACK|Newspass|NEWSPASS|Feature-led')))
  OR ((t0.newsletter_brand = 'Taste.com.au') AND NOT(SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered')))
  OR ((t0.newsletter_brand = 'Australia\'s Best Recipes') AND NOT(SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered')))
  OR ((t0.newsletter_brand = 'Delicious') AND (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Weekday eDM|Weekend eDM|Delicious Weekly')))
  OR ((t0.newsletter_brand = 'Escape') AND NOT(SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'EDM')))
) AS is_marketing_email_combined_flag","This metric should be derived from a well-defined data model where the constituent flags are themselves properly managed (e.g., via lookup tables). The logic for combining these flags should ideally reside in a semantic layer (like LookML) or a transformation layer (like dbt) rather than being hardcoded in a single SQL statement.",369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
newsletter_type_category_dimension,Complex Hardcoded Logic / Anti-Pattern,This dimension uses a very long `CASE WHEN` with numerous `REGEXP_CONTAINS` clauses to categorize newsletter types. This is highly unmaintainable and prone to overlap or gaps in categorization.,"SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'BREAKING|LATESTNEWS_ALERT')) THEN 'Breaking' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'FRONT')) THEN 'Front page' ... ELSE 'Other' END AS newsletter_type_category",Implement a lookup table for `newsletter_send_email_name` patterns to `newsletter_type_category` mapping. This allows for external management and clearer definition of categories.,369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
newsletter_source_category_dimension,Extreme Hardcoded Logic / Anti-Pattern / Nested Logic / Performance Risk,This is the most problematic dimension. It contains an extremely long hardcoded `REGEXP_CONTAINS` for 'Automated' and then *re-evaluates* the entire `newsletter_type_category_dimension` logic within its own `CASE WHEN` for 'Curated'. This nested re-evaluation is highly inefficient and makes the SQL virtually unreadable and unmaintainable. It violates the DRY (Don't Repeat Yourself) principle.,"SELECT CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'ADV_CRIME_CUR_02|ADV_FRONT-PAGE_CUR_01|ADV_FRONT-PAGE_SAT-CUR_01|ADV_FRONT-PAGE_SUN-CUR_01|ADV_LATESTNEWS_PM_01|ADV_LATESTNEWS_SAT-AM_01|ADV_LATESTNEWS_SAT-PM_01|ADV_LATESTNEWS_SUN-AM_01|ADV_LATESTNEWS_SUN-PM_01|ADV_PREM-PM_CUR_01|CM_CRIME_CUR_03|CM_FRONT-PAGE_CUR_01|CM_FRONT-PAGE_SUN-CUR_01|CS_CRICKET_WEEKLY_01|CS_New_DAILY_01|CS_New_SUN_01|DT_CRIME_CUR_02|DT_FRONT-PAGE_CUR_01|DT_FRONT-PAGE_SAT-CUR_01|DT_FRONT-PAGE_SUN-CUR_01|DT_REAL-ESTATE_CUR_02|DT_SPORT_CUR_02|GAD_FRONT-PAGE_CUR_01|GCB_FRONT-PAGE_CUR_01|GCB_LATESTNEWS_AM_01|GCB_LATESTNEWS_PM_01|HS_CRIME_CUR_03|HS_FRONT-PAGE_CUR_01|HS_FRONT-PAGE_SUN-CUR_01|HS_SPORT_CUR_01|LDR_AFL_CUR_01|LDR-AWN_LATESTNEWS_CUR_02|LDR-BC_LATESTNEWS_CUR_02|LDR-BEN_LATESTNEWS_CUR_02|LDR-BL_LATESTNEWS_CUR_01|LDR-CRL_LATESTNEWS_CUR_01|LDR-FL_LATESTNEWS_CUR_01|LDR-GDL_LATESTNEWS_CUR_02|LDR-GVN_LATESTNEWS_CUR_02|LDR-MCN_LATESTNEWS_CUR_02|LDR-MDN_LATESTNEWS_CUR_02|LDR-MNE_LATESTNEWS_CUR_01|LDR-MON_LATESTNEWS_CUR_01|LDR-MPL_LATESTNEWS_CUR_01|LDR-MRE_LATESTNEWS_CUR_01|LDR-STO_LATESTNEWS_CUR_01|LDR-WHI_LATESTNEWS_CUR_01|LDR-WL_LATESTNEWS_CUR_01|LDR-WYN_LATESTNEWS_CUR_01|MERC_CRIME_CUR_01|MERC_FRONT-PAGE_CUR_01|MERC_FRONT-PAGE_SUN-CUR_01|MERC_LATESTNEWS_PM-CUR_01|MERC-LN_LATESTNEWS_CUR_03|MERC-NWC_LATESTNEWS_CUR_01|MSG_LATESTNEWS_CUR_011|MSG-BCG_LATESTNEWS_CUR_03|MSG-MSG_LATESTNEWS_CUR_02|MSG-PLN_LATESTNEWS_CUR_04|NL-BA_LATESTNEWS_CUR_02|NL-CCE_LATESTNEWS_CUR_01|NL-CS_LATESTNEWS_CUR_01|NL-DUB_LATESTNEWS_CUR_03|NL-HA_LATESTNEWS_CUR_01|NL-HST_LATESTNEWS_CUR_02|NL-IWC_LATESTNEWS_CUR_01|NL-MD_LATESTNEWS_CUR_01|NL-MNC_LATESTNEWS_CUR_02|NL-MOS_LATESTNEWS_CUR_01|NL-NN_LATESTNEWS_CUR_02|NL-NST_LATESTNEWS_CUR_01|NL-PA_LATESTNEWS_CUR_01|NL-SC_LATESTNEWS_CUR_02|NL-SGS_LATESTNEWS_CUR_01|NL-WC_LATESTNEWS_CUR_02|NSW-BSA_LATESTNEWS_CUR_01|NSW-BSN_LATESTNEWS_CUR_01|NSW-GDE_LATESTNEWS_CUR_01|NSW-TCCA_LATESTNEWS_CUR_01|NSW-TDN_LATESTNEWS_CUR_01|NSW-TNS_LATESTNEWS_CUR_01|NSW-TNS_LATESTNEWS_PM_01|QLD-CNBT_LATESTNEWS_CUR_01|QLD-CNMA_LATESTNEWS_CUR_01|QLD-CQN_LATESTNEWS_CUR_01|QLD-DH_LATESTNEWS_CUR_01|QLD-DM_LATESTNEWS_CUR_01|QLD-DM_LATESTNEWS_PM_01|QLD-FCC_LATESTNEWS_CUR_01|QLD-NM_LATESTNEWS_CUR_01|QLD-NN_LATESTNEWS_CUR_01|QLD-SBT_LATESTNEWS_CUR_01|QLD-SCD_LATESTNEWS_CUR_01|QLD-SCD_LATESTNEWS_PM_01|QLD-TGO_LATESTNEWS_CUR_01|QLD-TGT_LATESTNEWS_CUR_01|QLD-TMB_LATESTNEWS_CUR_01|QLD-TMB_LATESTNEWS_PM_01|QLD-TQT_LATESTNEWS_CUR_01|QLD-TQT_LATESTNEWS_PM_01|QLD-TSBP_LATESTNEWS_CUR_01|QLD-TWS_LATESTNEWS_CUR_01|QLD-WHT_LATESTNEWS_CUR_01|QST-BCH_LATESTNEWS_CUR_02|QST-BNR_LATESTNEWS_CUR_02|QST-LGN_LATESTNEWS_CUR_01|QST-MN_LATESTNEWS_CUR_03|QST-RBH_LATESTNEWS_CUR_02|QST-RC_LATESTNEWS_CUR_01|QST-SEN_LATESTNEWS_CUR_03|QST-SPN_LATESTNEWS_CUR_02|QST-SWN_LATESTNEWS_CUR_02|QST-WST_LATESTNEWS_CUR_02|QST-WYH_LATESTNEWS_CUR_02|SN_DAILY_PM_01|TC_AM-PM_MIX_02|TC_FRONT-PAGE_CUR_01|TCP_FRONT-PAGE_CUR_01|TCP_FRONT-PAGE_SAT-CUR_01|TWT_FRONT-PAGE_CUR_01')) THEN 'Automated' WHEN (SAFE.REGEXP_CONTAINS((CASE WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'BREAKING|LATESTNEWS_ALERT')) THEN 'Breaking' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'FRONT')) THEN 'Front page' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_subject, 'front page')) THEN 'Front page' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'PREM|EDITORS|AMEX')) THEN 'Subscriber only' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'LATESTNEWS|_WKD|TC_AM-PM|TWT_WEEKLY|THEOZ_DAILY|SN_DAILY|TA_DAILY')) THEN 'Latest news' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'CRIME')) THEN 'True Crime Australia' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'LIFESTYLE|SEALEDSEC|WINE')) THEN 'Lifestyle' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'BUSINESS|BIZ|FINANCE')) THEN 'Business/Finance' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'POLITICS')) THEN 'Politics' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'SPORT|NRL|AFL|CS_|PUNT_RACING|RACE|RACING') AND NOT(SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, '_MKT'))) THEN 'Sport' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'COSTOFLIVING|DT_New_CUR')) THEN 'Cost of living' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'ENTERTAINMENT|HOROSCOPE')) THEN 'Entertainment' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'EDUCATION')) THEN 'Education' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'PROPERTY|REAL-ESTATE')) THEN 'Property' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TECH')) THEN 'Tech' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'MEDIA')) THEN 'Media' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'COMMONWEALTH')) THEN 'Commonwealth Games' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'FED-ELECTION')) THEN 'Federal election' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'RETENTION')) THEN 'Retention' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'NURTURE')) THEN 'Nurture' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'ONBOARDING')) THEN 'Onboarding' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'SpecialOffer')) THEN 'Special offer' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'EVENTS')) THEN 'Events' WHEN (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Cashed Up')) THEN 'Cashed Up' ELSE 'Other' END), 'Breaking')) THEN 'Curated' ELSE 'Curated' END AS newsletter_source_category","This metric urgently needs refactoring. The `newsletter_type_category` should be calculated once (e.g., in a CTE or a preceding data model layer) and then referenced. Both 'Automated' and 'Curated' classifications should be driven by a lookup table that maps `newsletter_send_email_name` patterns to source categories, or by a more robust data model that defines these attributes upstream.",369,f0af9ebe-dbaa-4690-9e9b-fba30a7e514d
sum_subscriber_ids_by_sitesection,Anti-Pattern,"The metric 'Sum of Subscriber IDs by Site Section' calculates the sum of `subscriber_id_SRC`. If `subscriber_id_SRC` is a unique identifier (as is common for 'ID' fields), summing it does not yield a meaningful business value and represents an anti-pattern. The initial AI analysis correctly identified this potential issue.",SUM(t0.subscriber_id_SRC),"Confirm the nature of `subscriber_id_SRC`. If it is a unique identifier, consider replacing `SUM` with `COUNT(DISTINCT t0.subscriber_id_SRC)` to count unique subscribers per site section, or remove the metric if it serves no valid business purpose. If a sum is truly intended, clarify the business meaning of summing subscriber IDs.",370,5f09cf50-19d6-4027-80de-69b30aba367e
unique_subscribers_by_spv_bucket,Hardcoded Logic,"The 'Unique Subscribers by Current Month SPV Bucket' metric uses a hardcoded `CASE` statement to define engagement buckets based on `Current_month_spv`. This approach makes the logic difficult to maintain, update, or reuse across other dashboards or reports if the bucket definitions change. It also lacks flexibility for future adjustments or dynamic bucketing.",CASE WHEN SAFE_CAST(t0.Current_month_spv AS INT64) BETWEEN 1 AND 4 THEN '1 Low' WHEN SAFE_CAST(t0.Current_month_spv AS INT64) BETWEEN 5 AND 8 THEN '2 Medium' WHEN SAFE_CAST(t0.Current_month_spv AS INT64) BETWEEN 9 AND 25 THEN '3 High' WHEN SAFE_CAST(t0.Current_month_spv AS INT64) > 25 THEN '4 Very High Breach' ELSE '0 Dormant' END,"Externalize the SPV bucketing logic. Consider creating a dedicated lookup table for SPV ranges and their corresponding bucket names, or a BigQuery view that pre-calculates the `spv_bucket` column. This promotes reusability, maintainability, and improved data governance by centralizing business logic.",370,5f09cf50-19d6-4027-80de-69b30aba367e
"total_open_filtered_newsletter_activity, total_delivered_filtered_newsletter_activity, total_unsubscribe_filtered_newsletter_activity, unique_click_filtered_newsletter_activity, total_send_filtered_newsletter_activity, total_click_filtered_newsletter_activity, unique_open_filtered_newsletter_activity, total_bounce_filtered_newsletter_activity, newsletter_activity_record_count",Anti-Pattern: Duplicated Complex Logic & Hardcoded Values,"Eight out of ten detailed metrics (excluding the dimension and the specific 'Total Sends by Email Name') share an identical, highly complex `WHERE` clause. This clause defines 'valid' newsletters using extensive `SAFE.REGEXP_CONTAINS` patterns for `newsletter_send_email_name` and `newsletter_brand`, along with hardcoded date ranges (`2024-07-01` to `2025-05-31`), a specific email name (`TA_FRONT-PAGE_CUR_03`), and a `total_send > 1` filter. This duplication creates a significant maintenance burden; any change to the definition of 'valid' newsletters requires updating multiple metric definitions, increasing the risk of inconsistencies and errors. The hardcoded date range will also lead to stale data over time.","WHERE t0.newsletter_send_date BETWEEN DATE '2024-07-01' AND DATE '2025-05-31' AND ( (SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'TA_|HS_|ADV_|CM_|DT_|NEWS_|TC_|TVB_|TCP_|NTN_|GCB_|GAD_|CS_|TWT_|KST_|QLD-WDN_|SN_|MERC_|QST-RC_|QLD-SCD_|QLD-TMB_|RACE_|PUNT_|QLD-|NSW-|NL-|MSG_|QST-|LDR_|VOG_|MERC-|ESC_|TAST_|DEL_|GQ Daily |VA Newsletter|Escape |Delicious |Beauty EDM|Vogue Living Weekly|BSL_|VA newsletter') AND NOT SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'UAT_|_TEST_|_Test_|testSend|_TESTING_|_DEV_|Not Available|TestSend|_MKT|MARKETING|Special Offer|Rewards|EVENT|Not Available|_Suspend|_Failed|Abandon|Reinforcement|System|Connect|_Lead_Nurture|Rewards_|_Wave|Welcome|HEARTBEAT|_Heartbeat|_Onboarding|WebFeatures|_Breadth|Delivery_Issue|Decommission|Switch|Modify|Cancellation|Essentials|AiQ|_Renew|_Contract|SOLUS|Solus|solus|Opt-|Opt_|Tips_|Deals|competition|Competition|CVM|Address_Update|Payment_Issue|Delivery_Pause|Triggered|Journey|Winback|WINBACK|Newspass|NEWSPASS|Feature-led')) OR (t0.newsletter_brand = 'Taste.com.au' AND NOT SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered')) OR (t0.newsletter_brand = 'Australia\'s Best Recipes' AND NOT SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Solus|SOLUS|solus|Welcome|Journey|Triggered')) OR (t0.newsletter_brand = 'Delicious' AND SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'Weekday eDM|Weekend eDM|Delicious Weekly')) OR (t0.newsletter_brand = 'Escape' AND NOT SAFE.REGEXP_CONTAINS(t0.newsletter_send_email_name, 'EDM')) ) AND t0.total_send > 1 AND t0.newsletter_send_email_name IN ('TA_FRONT-PAGE_CUR_03')","Create a consolidated, governed view or a common data model layer (e.g., a BigQuery view) that encapsulates the complex 'valid newsletter' filtering logic. This view would pre-filter the `newsletter_activity` table based on these rules. All dependent metrics would then query this simplified view, ensuring consistency and ease of maintenance. Parameterize date ranges and specific email names where possible, or define them at a higher Looker Studio level if the underlying data model cannot support it. Consider externalizing the `REGEXP_CONTAINS` patterns into a lookup table if they are subject to frequent changes or represent business classifications.",371,3c56145d-9022-4a17-8a57-ba6fd911e013
total_send_by_email_name_and_brand_list,Hardcoded Logic & Potential Stale Data,"This metric uses a hardcoded single date (`DATE '2025-03-16'`) and a long, hardcoded list of `newsletter_brand` values. While specific, this approach makes the metric static and prone to becoming outdated quickly without manual updates. The long list of brands is also difficult to manage and verify.","WHERE t0.newsletter_send_date = DATE '2025-03-16' AND t0.newsletter_brand IN ('The Wagga News', 'The Bowral News', 'ManlyDaily', ...)","If the date is intended to be dynamic (e.g., 'today' or 'yesterday'), replace the hardcoded date with a dynamic date function or a date parameter. For the `newsletter_brand` list, consider if these brands represent a specific category. If so, define this category in a lookup table or a dimension within the data model, allowing for more flexible and maintainable filtering (e.g., `t0.newsletter_brand_category = 'Regional News'`).",371,3c56145d-9022-4a17-8a57-ba6fd911e013
"total_monitored_tables_count, tables_not_in_critical_alert_count",Anti-Pattern,"Both 'Total Monitored Tables' and 'Tables Not in Critical Alert' metrics utilize almost identical, extensive SQL logic (including all CTEs: `table_list`, `table_update_list`, `load_stats`, `alert_sts`, `final_data`), differing only in their final `SELECT` statement. This significant code duplication increases maintenance overhead, makes updates prone to errors, and hinders reusability.","WITH
  table_list AS (
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'advertising_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'circulation_budget_forecast_fct' AS tableid
    ...
  ),
  table_update_list AS (
    SELECT
      dataset_id,
      table_id,
      datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
      row_count,
      size_bytes / power(2, 30) AS size_gb,
      table_list.update_frequency
    FROM
      `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
      JOIN
      table_list
      ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
  ),
  load_stats AS (
    SELECT
      * EXCEPT (last_update_time),
      CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time_str,
      last_update_time,
      `current_datetime`(""Australia/Sydney"") AS time_now,
      datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) AS updated_minutes_ago,
      `if`(datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) > update_frequency,
        'Y', 'N') AS delayed
    FROM
      table_update_list
  ),
  alert_sts AS (
    SELECT
      *,
      CASE
        WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) >
        update_frequency THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
        (updated_minutes_ago - update_frequency) > 30 THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency > 1440 AND update_frequency <= 44640 AND
        (updated_minutes_ago - update_frequency) > 1440 THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
        update_frequency THEN -1
        WHEN row_count = 0 THEN -3
        ELSE 0
      END AS alert_status
    FROM
      load_stats
  ),
  final_data AS (
    SELECT
      *,
      CASE
        WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
          ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
        ELSE alert_status
      END AS alert_status_final
    FROM
      alert_sts
  )
SELECT
  COUNT(table_id) AS total_monitored_tables
FROM
  final_data","Refactor the common SQL logic into a shared BigQuery view or a common Looker Studio data source. This would allow both metrics to query the same pre-processed data, improving maintainability, consistency, and potentially query performance.",372,8f848270-688f-4455-82a6-3bc9a7d39cce
"total_monitored_tables_count, tables_not_in_critical_alert_count",Hardcoded Logic,"The `table_list` CTE hardcodes a list of 25 specific table names and their corresponding `update_frequency` values using a long series of `UNION ALL` statements. This approach is inflexible; any change to the monitored tables or their update frequencies requires manual modification of the SQL query, which is error-prone and difficult to scale.","  table_list AS (
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'advertising_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'circulation_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'external_sundry_expenses_budget_forecast_fct' AS tableid
    ...
  )","Create a dedicated metadata table in BigQuery (e.g., `bdm_finance.monitored_tables_metadata`) to store the `datasetid`, `tableid`, and `update_frequency`. The SQL query can then join with this table, making the list dynamic and centrally managed. This would significantly reduce maintenance effort and improve data governance.",372,8f848270-688f-4455-82a6-3bc9a7d39cce
"total_monitored_tables_count, tables_not_in_critical_alert_count",Hardcoded Logic,"The `final_data` CTE contains a hardcoded `CASE` statement that specifically overrides the `alert_status` to -1 for five 'budget forecast' tables, regardless of their calculated `alert_status`. This business rule is embedded directly in the SQL, making it difficult to discover, manage, and update without modifying the query.","  final_data AS (
    SELECT
      *,
      CASE
        WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
          ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
        ELSE alert_status
      END AS alert_status_final
    FROM
      alert_sts
  )",Externalize this business rule. These 'special' tables and their override rules should ideally be managed in a metadata table alongside the `update_frequency` data. This allows business rules to be updated by data configuration rather than SQL code changes.,372,8f848270-688f-4455-82a6-3bc9a7d39cce
vv_content_starts_daily,Hardcoded Logic|Anti-Pattern,"The SQL logic for 'Daily Video Views Content Starts' uses a hardcoded `visit_date` ('2025-06-04'). This makes the metric static and prevents the dashboard from automatically reflecting current daily data, requiring manual updates to the SQL. Furthermore, this date is inconsistent with the other metric on the dashboard.",WHERE visit_date = '2025-06-04',"Replace the hardcoded date with a dynamic date filter (e.g., Looker Studio's `_DATA_DATE` field, `CURRENT_DATE()` in BigQuery, or a dashboard date parameter) to ensure the metric consistently displays data for the current or selected day.",373,41dda2e0-7935-4eca-9a86-1b0e763c2657
total_page_views_daily,Hardcoded Logic|Anti-Pattern|Data Mismatch,"The SQL logic for 'Daily Total Page Views' also uses a hardcoded `visit_date` ('2025-06-12'). This is an anti-pattern for a 'Daily Update' dashboard. More critically, the date used here is different from the 'Daily Video Views Content Starts' metric, meaning the dashboard presents data from two distinct days, rendering its 'Daily Update' title misleading and potentially confusing to users.",WHERE visit_date = '2025-06-12',"Replace the hardcoded date with a dynamic date filter, ensuring consistency with other metrics on the dashboard. All 'daily' metrics should refer to the same logical day, ideally driven by a dashboard-level date control.",373,41dda2e0-7935-4eca-9a86-1b0e763c2657
total_articles_base,Hardcoded Logic,"The majority of metrics in the dashboard (e.g., 'Total Articles', 'Articles by Scored Status', 'Article Score', 'Subscriber Page Views', 'Total Page Views', 'CLV Amount Default Package', 'CLV Amount From Package') use a hardcoded `articledateupdated` (e.g., '20250513' or '20250404'). This design choice makes the dashboard static and incapable of dynamically displaying current or historical data, severely limiting its utility for ongoing reporting.","articledateupdated = PARSE_DATE('%Y%m%d', '20250513')","Replace hardcoded dates with a dynamic date parameter or a Looker Studio date filter. Ideally, the underlying BigQuery view (`v_masthead_performance_summary`) should support dynamic date partitioning or filtering (e.g., `_LATEST_DATE_` or `CURRENT_DATE()`) to ensure the dashboard always reflects the most recent data.",374,39513a1d-8a62-4150-ab05-06786b4ecda1
articles_by_scored_status,Anti-Pattern,"The complex CLV-derived article scoring logic, including the `SAFE_CAST` operations and the multi-tiered `CASE` statement for categorization, is duplicated across `article_score_calculated`, `articles_by_scored_status`, and `article_score_category_dimension`. This repetition violates the DRY (Don't Repeat Yourself) principle, making maintenance cumbersome and increasing the risk of inconsistencies if the scoring methodology changes.",CASE WHEN ((((SAFE_CAST(t0.clv_amount_default_pkg AS FLOAT64)+SAFE_CAST(t0.clv_amount_from_pkg AS FLOAT64))+(t0.SubscriberPV*0.160000000000000))+(t0.TotalPV*0.020000000000000)) >= 10000) THEN '5' ... ELSE '0' END,"Centralize the article score calculation. The most robust solution would be to pre-calculate the 'article_score' and 'article_score_category' as dedicated columns within the `v_masthead_performance_summary` BigQuery view. Alternatively, define this complex logic as a reusable calculated field at the Looker Studio data source level.",374,39513a1d-8a62-4150-ab05-06786b4ecda1
total_articles_base,Hardcoded Logic,"The exclusion criteria for `publicationgroup` and `section` fields (`publicationgroup NOT IN (...)`, `section1 != 'real-estate'`, `section3 != 'hyperlocal'`, `section2 != 'hyperlocal'`) are hardcoded and repeated across almost all metrics. This approach makes it difficult to manage and update business rules for content exclusions, potentially leading to inconsistencies if not uniformly applied during future modifications.","publicationgroup NOT IN ('Fox Sports', 'News.com.au', 'Wires', 'Escape', 'Global syndication', 'Whimn Network', 'Kids News', 'Other', 'News Prestige Network', 'News Regional Media', 'PerthNow', 'Stellar') AND section1 != 'real-estate' AND section3 != 'hyperlocal' AND section2 != 'hyperlocal'","Encapsulate these common filtering rules. This could involve refining the `v_masthead_performance_summary` view to pre-filter these exclusions, or by creating a dedicated lookup table for publication groups and sections that can be joined to filter out unwanted entries, thereby centralizing the business logic.",374,39513a1d-8a62-4150-ab05-06786b4ecda1
total_paying_subscriber_adds_digital_bundles_dpe_essentials_metered_non_switch_by_gender,Hardcoded Logic,"The metric's SQL logic contains a hardcoded date range (July 9-15, 2025). This makes the dashboard static and unsuitable for ongoing performance monitoring without manual SQL updates, which is an anti-pattern for dynamic dashboards.",SAFE_CAST(t0.subscriber_movement_date AS DATE) >= DATE '2025-07-09' AND SAFE_CAST(t0.subscriber_movement_date AS DATE) <= DATE '2025-07-15',"Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to allow for flexible reporting periods.",375,464dbd27-97f1-4665-bd93-22b4e9520bfe
total_paying_subscriber_adds_digital_bundles_dpe_essentials_metered_masthead_ta,Hardcoded Logic,"Similar to the first metric, this metric's SQL logic also uses a hardcoded single date (August 31, 2025). This severely limits the utility of the dashboard for trend analysis or current performance tracking.",SAFE_CAST(t0.subscriber_movement_date AS DATE) >= DATE '2025-08-31' AND SAFE_CAST(t0.subscriber_movement_date AS DATE) <= DATE '2025-08-31',Implement dynamic date parameters or relative date functions to enable flexible and up-to-date reporting.,375,464dbd27-97f1-4665-bd93-22b4e9520bfe
total_paying_subscriber_adds_digital_bundles_dpe_essentials_metered_non_switch_by_gender,Anti-Pattern / Repeated Logic,"The filtering logic for `classification_level_2`, `is_paying_flag`, `member_type`, and exclusion of 'Print-only' is identical to the second metric. This repetition indicates a lack of consolidation at the data model or view level.","(SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Digital'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Bundles'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'DPE only'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Essentials'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Metered Access')
  AND SAFE_CAST(t0_subscription_details.is_paying_flag AS STRING) = 'Y'
  AND SAFE_CAST(t0.member_type AS STRING) = 'subscriber'
  AND SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) != 'Print-only'","Create a consolidated BigQuery view or a Looker Studio data source field that pre-applies these common filters. This would centralize the definition of 'Paying Digital/Bundles/DPE/Essentials/Metered Adds', reduce redundancy, improve maintainability, and ensure consistency across metrics.",375,464dbd27-97f1-4665-bd93-22b4e9520bfe
total_paying_subscriber_adds_digital_bundles_dpe_essentials_metered_masthead_ta,Anti-Pattern / Repeated Logic,"The filtering logic for `classification_level_2`, `is_paying_flag`, `member_type`, and exclusion of 'Print-only' is identical to the first metric. This repetition indicates a lack of consolidation at the data model or view level.","(SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Digital'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Bundles'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'DPE only'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Essentials'
    OR SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) = 'Metered Access')
  AND SAFE_CAST(t0_subscription_details.is_paying_flag AS STRING) = 'Y'
  AND SAFE_CAST(t0.member_type AS STRING) = 'subscriber'
  AND SAFE_CAST(t0_subscription_details.classification_level_2 AS STRING) != 'Print-only'","As above, create a consolidated BigQuery view or a Looker Studio data source field to encapsulate these common filtering conditions. This would simplify metric definitions and enhance data governance.",375,464dbd27-97f1-4665-bd93-22b4e9520bfe
all_metrics_affected_by_redundant_cte,Anti-Pattern: Redundant SQL Logic / Data Model Duplication,"The `OSandFACT` CTE, which performs a series of `LEFT JOIN` operations to consolidate data from `v_asl_FCT_finance_os_aggregated` with various dimension tables (`v_asl_DIM_os_publication_hierachy`, `v_asl_DIM_calendar`, `v_asl_DIM_period_control`, `v_asl_DIM_gl_department`), is copied verbatim into the SQL definition of every single measure and dimension on this dashboard. This duplication forces the underlying data platform (BigQuery) to re-process these joins for each individual metric request, even when they are part of the same dashboard view. This significantly increases query execution time, consumes more computational resources (leading to higher costs), and makes the dashboard's data model brittle and difficult to maintain. Any change to the underlying join logic or table schemas would necessitate manual updates across all 15 metric definitions.","WITH
  OSandFACT AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_year AS int) AS fy_year
        FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
        JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep ON os.os_level_12 = dep.department_code
  )","Implement a consolidated, pre-joined base view or table in BigQuery (e.g., `v_asl_FCT_finance_os_dashboard_base`) that materializes the `OSandFACT` logic. This single, optimized view should then serve as the primary data source for all metrics within the Looker Studio dashboard. This approach will centralize the complex join logic, significantly improve query performance by reducing redundant computations, lower BigQuery costs, and drastically simplify future maintenance and data model governance. Alternatively, explore Looker Studio's data blending capabilities to create a single blended data source if direct view creation is not feasible.",376,cbab66df-64cb-4ec6-a112-088557684b7e
total_federal_election_registrations_march_24_30_2025,Hardcoded Logic|Anti-Pattern,"This metric, along with 'total_federal_election_registrations_april_01_2025', represents the same base measure ('total_federal_election_registrations') but is duplicated with a hardcoded date range. This practice prevents dynamic date selection on the dashboard and necessitates creating a new metric definition for every specific date or date range required, leading to significant redundancy and maintenance burden.","t0.SubscriptionDateTime >= TIMESTAMP '2025-03-24' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-03-30', INTERVAL 1 DAY)","Consolidate these into a single 'Total Federal Election Registrations' metric. Implement date filtering at the Looker Studio dashboard level using date range controls, allowing users to select their desired period dynamically. This would eliminate the need for multiple, nearly identical metric definitions.",377,d3b51d1f-8b66-440f-9bc3-cc96429075bd
total_federal_election_registrations_april_01_2025,Hardcoded Logic|Anti-Pattern,"This metric, along with 'total_federal_election_registrations_march_24_30_2025', represents the same base measure ('total_federal_election_registrations') but is duplicated with a hardcoded date range. This practice prevents dynamic date selection on the dashboard and necessitates creating a new metric definition for every specific date or date range required, leading to significant redundancy and maintenance burden.","t0.SubscriptionDateTime >= TIMESTAMP '2025-04-01' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-01', INTERVAL 1 DAY)","Consolidate these into a single 'Total Federal Election Registrations' metric. Implement date filtering at the Looker Studio dashboard level using date range controls, allowing users to select their desired period dynamically. This would eliminate the need for multiple, nearly identical metric definitions.",377,d3b51d1f-8b66-440f-9bc3-cc96429075bd
total_federal_election_registrations_march_24_30_2025,Hardcoded Logic|Anti-Pattern,"Both registration metrics use a hardcoded regular expression to filter for specific news websites. This makes the metric rigid; any change to the list of relevant websites (e.g., adding a new publication, renaming an existing one) would require manual modification of the SQL logic for every affected metric. This is prone to errors and difficult to scale.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')","Create a dedicated lookup table or a managed list (e.g., a BigQuery table) containing the 'Federal Election Websites'. Join this table to `t_registration_details_snapshot_summary` to filter websites dynamically. Alternatively, if Looker Studio supports it, use a parameter or control to allow users to select from a predefined list of websites, or filter based on a 'Website Group' dimension if one can be derived upstream.",377,d3b51d1f-8b66-440f-9bc3-cc96429075bd
total_federal_election_registrations_april_01_2025,Hardcoded Logic|Anti-Pattern,"Both registration metrics use a hardcoded regular expression to filter for specific news websites. This makes the metric rigid; any change to the list of relevant websites (e.g., adding a new publication, renaming an existing one) would require manual modification of the SQL logic for every affected metric. This is prone to errors and difficult to scale.","SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')","Create a dedicated lookup table or a managed list (e.g., a BigQuery table) containing the 'Federal Election Websites'. Join this table to `t_registration_details_snapshot_summary` to filter websites dynamically. Alternatively, if Looker Studio supports it, use a parameter or control to allow users to select from a predefined list of websites, or filter based on a 'Website Group' dimension if one can be derived upstream.",377,d3b51d1f-8b66-440f-9bc3-cc96429075bd
sms_total_sent_monthly_by_sender,Hardcoded Logic,"The SQL query for 'Total SMS Sent' uses a hardcoded date range (`2024-07-01` to `2025-06-18`). This prevents the dashboard from dynamically updating for current or historical periods without manual intervention, making it static and difficult to maintain for ongoing monthly reporting.","WHERE t0.actiondatetime >= DATE '2024-07-01' AND t0.actiondatetime < DATETIME_ADD(DATE '2025-06-18', INTERVAL 1 DAY)","Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls, or BigQuery `CURRENT_DATE()` and `DATE_TRUNC()` functions) to ensure the dashboard always displays relevant, up-to-date data.",378,c902dea7-7c03-4995-a4f5-56ff4f6f5635
sms_total_sent_monthly_by_sender,Data Mismatch,"The business description states that 'Total SMS Sent' is 'typically aggregated monthly and broken down by the sender's name (fromname)'. However, the provided SQL logic only calculates a `SUM(t0.sent)` without including `fromname` in the SELECT clause or a `GROUP BY` clause. This suggests the SQL is incomplete or misaligned with the described dashboard visualization, as it would only return a grand total.",SELECT SUM(t0.sent) AS total_sms_sent FROM `ncau-data-newsquery-prd.cdm_sfmc.smsdetailsummary` AS t0,"If the dashboard indeed shows a breakdown by sender, the SQL query must be updated to `SELECT t0.fromname, SUM(t0.sent) AS total_sms_sent FROM ... GROUP BY t0.fromname`. If the dashboard only displays a grand total, the business description should be updated to accurately reflect this aggregation level.",378,c902dea7-7c03-4995-a4f5-56ff4f6f5635
newsletter_total_send_monthly_by_brand,Hardcoded Logic,"Similar to the SMS metric, the SQL query for 'Total Newsletter Sends' also uses a hardcoded date range (`2024-07-01` to `2025-06-19`). This makes the dashboard static and requires manual updates for ongoing reporting, hindering its utility for dynamic analysis.",WHERE t0.newsletter_send_date >= DATE '2024-07-01' AND t0.newsletter_send_date <= DATE '2025-06-19',Implement dynamic date filtering using Looker Studio parameters or BigQuery date functions to ensure the dashboard remains current and relevant without manual intervention.,378,c902dea7-7c03-4995-a4f5-56ff4f6f5635
newsletter_total_send_monthly_by_brand,Data Mismatch,"The business description indicates that 'Total Newsletter Sends' is 'typically aggregated monthly and broken down by newsletter brand'. However, the SQL query only performs a `SUM(t0.total_send)` without selecting `newsletter_brand` or including a `GROUP BY` clause. This implies the SQL is not aligned with the described visualization, as it would only provide a grand total.",SELECT SUM(t0.total_send) AS total_newsletter_send FROM `ncau-data-newsquery-prd.prstn_consumer.newsletter_activity` AS t0,"To support the described breakdown, the SQL query should be modified to `SELECT t0.newsletter_brand, SUM(t0.total_send) AS total_newsletter_send FROM ... GROUP BY t0.newsletter_brand`. Alternatively, if the dashboard only shows a total, the business description needs to be corrected.",378,c902dea7-7c03-4995-a4f5-56ff4f6f5635
gross_revenue_current_fy_000s,Anti-Pattern,Redundant metric definition for display formatting. The '000s' version of gross revenue is created as a separate metric by dividing the base metric by 1000. This leads to metric proliferation and makes the dashboard less flexible if different scaling factors are needed.,"SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_current_fy_000s","Define a single 'Gross Revenue' metric and handle display formatting (e.g., '000s', currency symbols) directly within Looker Studio's field settings or chart properties. This reduces the number of distinct metrics and improves reusability.",379,bb75f9e0-40f6-44f7-b17c-7441e71c90e5
gross_revenue_previous_fy_000s,Anti-Pattern,"Redundant metric definition for display formatting, identical issue as 'gross_revenue_current_fy_000s' but for the previous financial year.","SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_previous_fy_000s","Define a single 'Gross Revenue' metric and handle display formatting (e.g., '000s', currency symbols) directly within Looker Studio's field settings or chart properties. This reduces the number of distinct metrics and improves reusability.",379,bb75f9e0-40f6-44f7-b17c-7441e71c90e5
gross_revenue_current_fy_non_future_000s,Anti-Pattern,"Combines a filter (`is_future_period_flag = 'N'`) and a display formatting (`_000s`) into a single metric. While the filtering is valid, the `_000s` part contributes to metric proliferation.","SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N' THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS gross_revenue_current_fy_non_future_000s","Separate the core business logic (e.g., 'Gross Revenue - Current FY Non-Future') from display formatting. Handle '000s' formatting at the Looker Studio display layer. Consider defining `is_future_period_flag` as a dimension for filtering rather than embedding it directly into multiple metric definitions.",379,bb75f9e0-40f6-44f7-b17c-7441e71c90e5
gross_revenue_digital_date_conditional_000s,Hardcoded Logic|Anti-Pattern,"This metric exhibits severe anti-patterns due to its highly complex, nested, and hardcoded logic. It combines multiple business rules (publication types, date comparisons, revenue types, sales segments, advertiser exclusions) within a single `CASE` statement. Most critically, it contains a hardcoded `TIMESTAMP '2025-05-18 22:02:56.843973+00'` which makes the metric static and will lead to incorrect results as time progresses. The hardcoded list of publication types ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') is also prone to maintenance issues.","SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND SAFE_CAST(CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-05-18 22:02:56.843973+00', 'Australia/Sydney'), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE NULL END, 1000)) AS gross_revenue_digital_date_conditional_000s","This metric requires significant refactoring. 
1. **Dynamic Dates:** Replace the hardcoded timestamp with dynamic date functions (e.g., `CURRENT_DATE()`, `CURRENT_TIMESTAMP()`) or leverage Looker Studio's date range controls/parameters.
2. **Lookup Tables:** Externalize hardcoded lists (e.g., publication types, revenue types, sales segments) into dedicated lookup tables. Join to these tables to define categories, improving flexibility and maintainability.
3. **Modular Logic:** Break down the complex `CASE` statement into smaller, more manageable calculated fields or flags in the underlying data model (e.g., `is_outstream_revenue`, `is_digital_other_segment_revenue`). This improves readability, testability, and reusability.
4. **Base Metric & Formatting:** Define a base 'Gross Revenue' metric and apply conditional logic and '000s' formatting at the Looker Studio layer or as separate, simpler calculated fields.",379,bb75f9e0-40f6-44f7-b17c-7441e71c90e5
max_is_digital_other_segment,Hardcoded Logic,"Uses a hardcoded string comparison (`sales_segment_l_2_name_sync = 'Digital Other'`) to derive a boolean flag. While functional, if 'Digital Other' changes or needs to be part of a broader category, this metric would need manual updates.",SELECT MAX(t0.sales_segment_l_2_name_sync = 'Digital Other') AS max_is_digital_other_segment,Consider defining 'Digital Other' as a distinct value in a dimension table or a configuration table if such categorizations are subject to change or part of a larger hierarchy. This allows for centralized management of business rules.,379,bb75f9e0-40f6-44f7-b17c-7441e71c90e5
"opportunity_id_dim, opportunity_sfdc_id_dim, opportunity_owner_id_dim, opportunity_probability_dim, opportunity_amount_raw, opportunity_total_amount_sum, opportunity_close_date_dim, opportunity_created_datetime_truncated_second, opportunity_last_activity_date_dim, opportunity_name_dim, opportunity_age_dim, opportunity_owner_division_dim, opportunity_stage_name_dim, opportunity_type_dim",Hardcoded Logic,"All opportunity-related metrics are filtered by a hardcoded `dw_partition_date` range (2024-07-01 to 2025-06-30). This design choice makes the dashboard static for a single fiscal year, preventing historical analysis or future reporting without manual intervention. This is a significant maintainability burden and limits the dashboard's dynamic capabilities.","WHERE dw_partition_date >= PARSE_DATE('%Y%m%d', '20240701') AND dw_partition_date <= PARSE_DATE('%Y%m%d', '20250630')","Implement dynamic date filtering using Looker Studio's built-in date range controls or BigQuery's `CURRENT_DATE()` and date functions (e.g., `DATE_TRUNC`, `DATE_SUB`) to define relative periods (e.g., current fiscal year, last 30 days). Consider creating a dedicated date dimension table for more robust and flexible date filtering.",380,3f582360-cbc4-4ee3-80a7-14fa61b2f1fd
"All metrics, critically opportunity_total_amount_sum",Anti-Pattern / Data Integrity Risk,"The `sql_logic` for all metrics, including the 'Total Opportunity Amount' KPI (which is a `SUM` aggregation), contains a `LIMIT 1` clause. If this SQL is literally executed by the dashboard, it would result in incorrect or incomplete data (e.g., only the sum of the first row's amount for the KPI). This strongly suggests the provided `sql_logic` might be a simplified representation for data source field definition (e.g., for schema inference) rather than the actual query executed by dashboard components. This discrepancy poses a significant data integrity risk if misinterpreted or if the dashboard indeed executes these queries as-is.",LIMIT 1,"Investigate how these metrics are actually queried by the dashboard in a live environment. If `LIMIT 1` is part of the executed query for aggregated metrics, it must be immediately removed. Document the actual query patterns used by Looker Studio to ensure clarity and prevent future misinterpretations.",380,3f582360-cbc4-4ee3-80a7-14fa61b2f1fd
"account_created_datetime_truncated_second, opportunity_created_datetime_truncated_second",Anti-Pattern / Complexity,"The SQL for truncating created datetimes involves multiple nested casting and parsing functions (`SAFE_CAST`, `FORMAT_TIMESTAMP`, `PARSE_DATETIME`, `LOOKER_STUDIO.AUTO_DETECT_TO_DATETIME`). This indicates potential underlying data type inconsistencies in the source or an overly complex approach to what should be a straightforward datetime truncation. Such complexity can hinder readability, maintainability, and potentially performance.","DATETIME_TRUNC(PARSE_DATETIME('%Y-%m-%dT%H:%M:%S', FORMAT_TIMESTAMP('%Y-%m-%dT%H:%M:%S', SAFE_CAST(LOOKER_STUDIO.AUTO_DETECT_TO_DATETIME(SAFE_CAST(createddate AS STRING)) AS TIMESTAMP))), SECOND)","Review the native data type of the `createddate` column in the source `account` and `opportunity` tables. If the source column is already a `TIMESTAMP` or `DATETIME`, simplify the casting and parsing. Consider pre-processing this in the data model (e.g., a BigQuery view or materialized view) to provide a clean, correctly typed datetime column, reducing complexity in the Looker Studio calculated field.",380,3f582360-cbc4-4ee3-80a7-14fa61b2f1fd
adobe_core_record_count,Hardcoded Logic,The `p_brand_controller` array is hardcoded with a specific list of brand names. This makes the query inflexible and requires manual updates if the set of relevant brands changes or expands. This hardcoding pattern is consistently applied across all Adobe Core metrics.,"ARRAY['newscomau', 'best recipes', 'escape', 'delicious', 'body and soul', 'taste', 'kidspot'] AS p_brand_controller",Externalize the brand list into a dedicated configuration table or leverage Looker Studio parameters/fields to allow dynamic selection and management of brands. This significantly improves maintainability and scalability.,381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
adobe_core_unique_users,Hardcoded Logic,The `p_brand_controller` array is hardcoded with a specific list of brand names. This makes the query inflexible and requires manual updates if the set of relevant brands changes or expands. This hardcoding pattern is consistently applied across all Adobe Core metrics.,"ARRAY['newscomau', 'best recipes', 'escape', 'delicious', 'body and soul', 'taste', 'kidspot'] AS p_brand_controller",Externalize the brand list into a dedicated configuration table or leverage Looker Studio parameters/fields to allow dynamic selection and management of brands. This significantly improves maintainability and scalability.,381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
adobe_core_total_page_views,Hardcoded Logic,The `p_brand_controller` array is hardcoded with a specific list of brand names. This makes the query inflexible and requires manual updates if the set of relevant brands changes or expands. This hardcoding pattern is consistently applied across all Adobe Core metrics.,"ARRAY['newscomau', 'best recipes', 'escape', 'delicious', 'body and soul', 'taste', 'kidspot'] AS p_brand_controller",Externalize the brand list into a dedicated configuration table or leverage Looker Studio parameters/fields to allow dynamic selection and management of brands. This significantly improves maintainability and scalability.,381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
total_subscriptions_acquisition_reactivation,Hardcoded Logic,"The `masthead IN (...)` clause is hardcoded with a fixed list of 16 masthead values. This is an anti-pattern that makes the query brittle, difficult to maintain, and prone to missing data if new mastheads are introduced or existing ones change. This hardcoding pattern is consistently applied across all subscription metrics.","mv.masthead IN ('TA', 'DT', 'HS', 'CM', 'AA', 'WT', 'GA', 'GC', 'CP', 'TB', 'NT', 'TM', 'TC', 'CS', 'PU', 'RN')","Replace the hardcoded masthead list with a join to a governed lookup table for mastheads or use a Looker Studio parameter/field to manage the list dynamically, ensuring data consistency and ease of updates.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
total_subscriptions_acquisition_reactivation,Hardcoded Logic,"The `subscription_tenure_start_datetime >= DATE(""2023-07-03"")` filter is hardcoded. This restricts the data to a fixed historical start date, preventing dynamic date range selection by users and limiting the dashboard's analytical flexibility. This hardcoding pattern is consistently applied across all subscription metrics.","mv.subscription_tenure_start_datetime >= DATE(""2023-07-03"")","Replace the hardcoded date with a dynamic date range filter provided by Looker Studio, allowing users to select their desired reporting period.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_bau_always_on_digital,Hardcoded Logic,"The `masthead IN (...)` clause is hardcoded with a fixed list of 16 masthead values. This is an anti-pattern that makes the query brittle, difficult to maintain, and prone to missing data if new mastheads are introduced or existing ones change. This hardcoding pattern is consistently applied across all subscription metrics.","mv.masthead IN ('TA', 'DT', 'HS', 'CM', 'AA', 'WT', 'GA', 'GC', 'CP', 'TB', 'NT', 'TM', 'TC', 'CS', 'PU', 'RN')","Replace the hardcoded masthead list with a join to a governed lookup table for mastheads or use a Looker Studio parameter/field to manage the list dynamically, ensuring data consistency and ease of updates.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_bau_always_on_digital,Hardcoded Logic,"The `subscription_tenure_start_datetime >= DATE(""2023-07-03"")` filter is hardcoded. This restricts the data to a fixed historical start date, preventing dynamic date range selection by users and limiting the dashboard's analytical flexibility. This hardcoding pattern is consistently applied across all subscription metrics.","mv.subscription_tenure_start_datetime >= DATE(""2023-07-03"")","Replace the hardcoded date with a dynamic date range filter provided by Looker Studio, allowing users to select their desired reporting period.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_bau_always_on_digital,Anti-Pattern,"This metric uses `COUNT(CASE WHEN mv.sold_in_channel = 'Bau Always On Digital' THEN 1 END)` to filter by a specific channel. This pattern is repeated for other channel-specific metrics ('Premium Breach', 'External Display'). Creating separate metrics for each channel is inefficient and leads to redundant SQL logic. It also limits the ability to analyze all channels dynamically.",COUNT(CASE WHEN mv.sold_in_channel = 'Bau Always On Digital' THEN 1 END),"Instead of creating distinct metrics for each channel, define a single base metric for subscription counts and use Looker Studio's dimension filtering or grouping capabilities on the `sold_in_channel` field. This allows for flexible analysis across all channels without modifying the underlying SQL.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_premium_breach,Hardcoded Logic,"The `masthead IN (...)` clause is hardcoded with a fixed list of 16 masthead values. This is an anti-pattern that makes the query brittle, difficult to maintain, and prone to missing data if new mastheads are introduced or existing ones change. This hardcoding pattern is consistently applied across all subscription metrics.","mv.masthead IN ('TA', 'DT', 'HS', 'CM', 'AA', 'WT', 'GA', 'GC', 'CP', 'TB', 'NT', 'TM', 'TC', 'CS', 'PU', 'RN')","Replace the hardcoded masthead list with a join to a governed lookup table for mastheads or use a Looker Studio parameter/field to manage the list dynamically, ensuring data consistency and ease of updates.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_premium_breach,Hardcoded Logic,"The `subscription_tenure_start_datetime >= DATE(""2023-07-03"")` filter is hardcoded. This restricts the data to a fixed historical start date, preventing dynamic date range selection by users and limiting the dashboard's analytical flexibility. This hardcoding pattern is consistently applied across all subscription metrics.","mv.subscription_tenure_start_datetime >= DATE(""2023-07-03"")","Replace the hardcoded date with a dynamic date range filter provided by Looker Studio, allowing users to select their desired reporting period.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_premium_breach,Anti-Pattern,"This metric uses `COUNT(CASE WHEN mv.sold_in_channel = 'Premium Breach' THEN 1 END)` to filter by a specific channel. This pattern is repeated for other channel-specific metrics ('Bau Always On Digital', 'External Display'). Creating separate metrics for each channel is inefficient and leads to redundant SQL logic. It also limits the ability to analyze all channels dynamically.",COUNT(CASE WHEN mv.sold_in_channel = 'Premium Breach' THEN 1 END),"Instead of creating distinct metrics for each channel, define a single base metric for subscription counts and use Looker Studio's dimension filtering or grouping capabilities on the `sold_in_channel` field. This allows for flexible analysis across all channels without modifying the underlying SQL.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_external_display_bau_always_on_digital,Hardcoded Logic,"The `masthead IN (...)` clause is hardcoded with a fixed list of 16 masthead values. This is an anti-pattern that makes the query brittle, difficult to maintain, and prone to missing data if new mastheads are introduced or existing ones change. This hardcoding pattern is consistently applied across all subscription metrics.","mv.masthead IN ('TA', 'DT', 'HS', 'CM', 'AA', 'WT', 'GA', 'GC', 'CP', 'TB', 'NT', 'TM', 'TC', 'CS', 'PU', 'RN')","Replace the hardcoded masthead list with a join to a governed lookup table for mastheads or use a Looker Studio parameter/field to manage the list dynamically, ensuring data consistency and ease of updates.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_external_display_bau_always_on_digital,Hardcoded Logic,"The `subscription_tenure_start_datetime >= DATE(""2023-07-03"")` filter is hardcoded. This restricts the data to a fixed historical start date, preventing dynamic date range selection by users and limiting the dashboard's analytical flexibility. This hardcoding pattern is consistently applied across all subscription metrics.","mv.subscription_tenure_start_datetime >= DATE(""2023-07-03"")","Replace the hardcoded date with a dynamic date range filter provided by Looker Studio, allowing users to select their desired reporting period.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
subscriptions_external_display_bau_always_on_digital,Anti-Pattern,This metric uses `COUNT(CASE WHEN mv.sold_in_source_channel = 'External Display' AND mv.sold_in_channel = 'Bau Always On Digital' THEN 1 END)` to filter by specific source and sold channels. This pattern is repeated for other channel-specific metrics. Creating separate metrics for each channel combination is inefficient and leads to redundant SQL logic. It also limits the ability to analyze all channels dynamically.,COUNT(CASE WHEN mv.sold_in_source_channel = 'External Display' AND mv.sold_in_channel = 'Bau Always On Digital' THEN 1 END),"Instead of creating distinct metrics for each channel combination, define a single base metric for subscription counts and use Looker Studio's dimension filtering or grouping capabilities on `sold_in_source_channel` and `sold_in_channel` fields. This allows for flexible analysis across all channels without modifying the underlying SQL.",381,a8df8e47-f86a-4a5a-8cee-13dd26cc367f
social_page_views_daily_telegraph_20250628,Hardcoded Logic,"This metric is hardcoded to a specific date ('2025-06-28') and brand ('daily telegraph'). For a dashboard titled 'Daily Update', this approach is unsustainable and requires manual modification or creation of new metrics for each day and brand, severely limiting its dynamic utility and increasing maintenance overhead.",WHERE (SAFE_CAST(t0.visit_date AS DATE) = DATE '2025-06-28' AND t0.brand_name = 'daily telegraph'),"Refactor this metric to utilize Looker Studio parameters or filters for dynamic date selection and brand filtering. This would allow a single, reusable metric to serve for any date and brand, significantly improving dashboard flexibility and reducing maintenance.",382,ed91d3f4-4175-4293-a648-e8dbca4cea93
web_page_views_daily_telegraph_20250803_by_day_of_week,Hardcoded Logic,"Similar to the previous metric, this one is hardcoded to a specific date range ('2025-08-03') and brand ('daily telegraph'). While it includes a useful 'day_of_week' grouping, the static date filter makes it impractical for a daily update dashboard, necessitating constant manual adjustments.",WHERE (SAFE_CAST(t0.visit_date AS DATETIME) >= DATETIME '2025-08-03T00:00:00' AND SAFE_CAST(t0.visit_date AS DATETIME) <= DATETIME '2025-08-03T23:59:59.999999' AND t0.brand_name = 'daily telegraph'),"Implement dynamic date range parameters (e.g., 'Today', 'Yesterday', 'Last 7 Days') and brand filters within Looker Studio. This would transform this specific metric into a versatile component that can be applied across various dates and brands without requiring SQL changes.",382,ed91d3f4-4175-4293-a648-e8dbca4cea93
"gross_revenue_total, impressions_total, net_revenue_total",Anti-Pattern,"The core data retrieval and transformation logic, encapsulated within the 'ssp_date_summary' Common Table Expression (CTE), is duplicated verbatim across all three metrics. This includes multiple joins to dimension tables (`v_cdm_admk_dimension_dictionary`) and a currency rates table (`v_cdm_admk_currency_rates`), as well as an inner aggregation. This redundancy leads to increased maintenance overhead, potential for inconsistencies if logic changes are required, and inefficient query compilation/execution.","WITH
      ssp_date_summary AS (
        SELECT
          q1.ssp_date,
          q1.platform_id,
          p.source_label AS source_platform_name,
          created_date,
          report_id,
          q1.created_at_utc AS created_datetime,
          q1.created_at_dtau AS created_datetime_dtau,
          seat_id,
          seat.source_code AS seat_source_code,
          seat.source_label AS seat_source_name,
          q1.target_platform_id,
          tp.source_label AS target_platform_name,
          revenue AS net_revenue,
          revenue * cr.rate AS net_revenue_aud,
          revenue_gross AS gross_revenue,
          revenue_gross * cr.rate AS gross_revenue_aud,
          impressions,
          no_of_records
        FROM
          (
            SELECT
              ssp_date,
              platform_id,
              CAST(created_at_utc AS DATE) AS created_date,
              report_id,
              created_at_utc,
              created_at_dtau,
              seat_id,
              target_platform_id,
              sum(revenue) AS revenue,
              sum(revenue_gross) AS revenue_gross,
              sum(impressions) AS impressions,
              sum(no_of_records) AS no_of_records
            FROM
              `your-gcp-project-id.cdm_adomik_src_views.v_cdm_admk_advertising_data_daily_incl_direct`
            WHERE
              1 = 1
            GROUP BY 1, 2, 3, 4, 5, 6, 7, 8
          ) AS q1
          LEFT JOIN
          `your-gcp-project-id.cdm_adomik_src_views.v_cdm_admk_dimension_dictionary` AS tp
          ON q1.target_platform_id = tp.id AND tp.dimension_name = 'platform_id'
          LEFT JOIN
          `your-gcp-project-id.cdm_adomik_src_views.v_cdm_admk_dimension_dictionary` AS p
          ON q1.platform_id = p.id AND p.dimension_name = 'platform_id'
          LEFT JOIN
          `your-gcp-project-id.cdm_adomik_src_views.v_cdm_admk_dimension_dictionary` AS seat
          ON q1.seat_id = seat.id AND seat.dimension_name = 'seat_id'
          LEFT JOIN
          `your-gcp-project-id.cdm_adomik_src_views.v_cdm_admk_currency_rates` AS cr
          ON q1.ssp_date = cr.ssp_date
      )","Consolidate the common 'ssp_date_summary' logic into a single, dedicated BigQuery view (e.g., `v_cdm_admk_advertising_daily_summary`) or a Looker Studio data source. This view would pre-process the data, making it available for all metrics to simply select and aggregate from, promoting a single source of truth, improving maintainability, and potentially optimizing query performance.",383,73e125c7-5447-4e59-9560-ed12d7c7f153
adds_standard_paid_digital_cs,Hardcoded Logic,"Multiple metrics across the dashboard use repeated hardcoded string literals for filtering dimensions like 'class_lvl_1', 'delivery_medium', 'masthead', 'is_paying', and 'dw_source_system_code'. While functional, this approach can lead to maintenance overhead if these values change or if new categories are introduced. It also makes it harder to ensure consistent application of business rules across different metrics.",WHERE SAFE_CAST(t0.class_lvl_1 AS STRING) = 'Standard Paid' AND SAFE_CAST(t0.delivery_medium AS STRING) != 'Print' AND SAFE_CAST(t0.masthead AS STRING) = 'CS',"Consider externalizing these common filter criteria into a centralized semantic layer (e.g., LookML, dbt models, or BigQuery views) or by creating dedicated dimension tables. This would allow for single-point updates, improve consistency, and make the SQL logic cleaner and more readable.",384,68765694-fddc-495e-a598-2a5b1e78e2c9
total_subscriber_count_consumer_digital_cs,Anti-Pattern,"The use of `STRPOS` for filtering on `combined_customer_type` and `combined_masthead` (e.g., `STRPOS(..., 'Consumer') > 0`) suggests that these fields might contain concatenated values or require partial string matching. If these are intended to be distinct categorical values, `STRPOS` can be less precise than direct equality (`=`) or `LIKE` with exact patterns, potentially leading to unintended matches or making it difficult to manage new categories.","STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0 AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CS') > 0","Investigate the underlying data structure of `combined_customer_type` and `combined_masthead`. If they are meant to be distinct categories, consider normalizing these fields into separate columns or using exact string matching. If they are indeed concatenated strings, evaluate if a more robust parsing or array-based approach (e.g., `ARRAY_CONTAINS`) would be more appropriate for future scalability and data integrity.",384,68765694-fddc-495e-a598-2a5b1e78e2c9
masthead_group_description_list_filtered_by_date,Hardcoded Logic,"Numerous metrics, including key performance indicators (Spend, Impressions, Link Clicks, Subscriptions) and one dimension, are hardcoded to a specific future date range (April 15 - May 14, 2025). This makes the dashboard static and unsuitable for dynamic, ongoing performance analysis, which is typically expected for a 'Digital Campaign Performance' dashboard.",WHERE report_date >= DATE '2025-04-15' AND report_date <= DATE '2025-05-14',"Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio's built-in date range controls) or relative date logic (e.g., `CURRENT_DATE() - INTERVAL 30 DAY`) to enable real-time and flexible performance monitoring. If this dashboard is specifically for a future, fixed validation, this should be clearly documented.",385,d7dcf866-1b93-48f8-a0c3-56c743029896
total_spend_amount_by_dimensions_filtered_by_date,Anti-Pattern,"Several aggregate metrics (e.g., Total Spend, Total Impression Count, Total Breach Count, Total Link Click Count, Total Subscription Count) are defined with very broad `GROUP BY` clauses, including up to 10 different dimensions. While this offers flexibility, it can lead to inefficient queries and large result sets if the dashboard only utilizes a subset of these dimensions for visualization, potentially impacting dashboard load times and query costs.","GROUP BY account_name, ad_status, buying_objective_description, campaign_id, campaign_name, campaign_status, funnel_description, masthead_description, masthead_group_description, source_system_name","Evaluate if all 10 dimensions are consistently used together in the dashboard's visualizations. Consider creating more specific aggregated metrics for common groupings or relying on Looker Studio's native aggregation capabilities for dimensions not always used in conjunction, to optimize query performance and reduce data transfer overhead.",385,d7dcf866-1b93-48f8-a0c3-56c743029896
total_spend_amount_filtered_by_date,Data Quality/Robustness,"All measure calculations consistently use `SAFE_CAST(<column> AS FLOAT64)`. While `SAFE_CAST` is a good defensive coding practice to prevent query failures from malformed data, its pervasive use suggests that the underlying source columns (`spend_amount`, `impression_count`, `breach_count`, `link_click_count`, `subscription_count`) may not consistently contain valid numeric data. This indicates a potential upstream data quality issue.",SUM(SAFE_CAST(spend_amount AS FLOAT64)),"Investigate the data quality of the source columns (`spend_amount`, `impression_count`, etc.) in the `campaign_performance_fct` table. Implement data validation and cleansing processes upstream (e.g., during ETL) to ensure these columns are consistently numeric, reducing reliance on `SAFE_CAST` for core aggregations and improving data reliability.",385,d7dcf866-1b93-48f8-a0c3-56c743029896
formatted_month,Hardcoded Logic|Anti-Pattern,The `formatted_month` dimension uses a lengthy `CASE` statement to assign a numerical prefix for sorting. This is a classic example of hardcoding lookup logic that should ideally reside in a dedicated lookup table or be handled by a more dynamic date formatting function if the underlying `financial_short_month` is a date type.,"CASE
        WHEN (t0.financial_short_month = 'Jul') THEN '1.Jul'
        WHEN (t0.financial_short_month = 'Aug') THEN '2.Aug'
        WHEN (t0.financial_short_month = 'Sep') THEN '3.Sep'
        WHEN (t0.financial_short_month = 'Oct') THEN '4.Oct'
        WHEN (t0.financial_short_month = 'Nov') THEN '5.Nov'
        WHEN (t0.financial_short_month = 'Dec') THEN '6.Dec'
        WHEN (t0.financial_short_month = 'Jan') THEN '7.Jan'
        WHEN (t0.financial_short_month = 'Feb') THEN '8.Feb'
        WHEN (t0.financial_short_month = 'Mar') THEN '9.Mar'
        WHEN (t0.financial_short_month = 'Apr') THEN '10.Apr'
        WHEN (t0.financial_short_month = 'May') THEN '11.May'
        WHEN (t0.financial_short_month = 'Jun') THEN '12.Jun'
        ELSE NULL
    END","Create a dedicated dimension table for fiscal months with their corresponding sort keys. Alternatively, if `financial_short_month` can be derived from a proper date column, use date formatting functions to achieve the desired output without hardcoding.",386,470fb761-78c5-4d29-9791-1f9b5fa3ce10
sales_segment_gm_name_formatted,Hardcoded Logic|Anti-Pattern,"The `sales_segment_gm_name_formatted` dimension uses a `CASE` statement to format GM names, including adding leading spaces for sorting. This hardcodes business logic and display rules directly into the metric definition. Any change in GM names, new GMs, or changes in sorting requirements would necessitate manual updates to this metric and any others that replicate this logic.","CASE
        WHEN (t0.sales_segment_gm_name_sync = 'Renee Sycamore') THEN 'Renee Sycamore'
        WHEN (t0.sales_segment_gm_name_sync = 'Ian Paterson') THEN ' Ian Paterson'
        WHEN (t0.sales_segment_gm_name_sync = 'Natalie Grabbe') THEN '  Natalie Grabbe'
        WHEN (t0.sales_segment_gm_name_sync = 'Kelly Healy') THEN '   Kelly Healy'
        WHEN (t0.sales_segment_gm_name_sync = 'Belinda MacPherson') THEN '    Belinda MacPherson'
        WHEN (t0.sales_segment_gm_name_sync = 'Lou Barrett') THEN '     Lou Barrett'
        WHEN (t0.sales_segment_gm_name_sync = 'Vacant') THEN '      Vacant'
        WHEN (t0.sales_segment_gm_name_sync = '') THEN '       null'
        ELSE NULL
    END","Implement a lookup table for sales segment GM names and their display/sort order. This centralizes the logic, improves maintainability, and allows for dynamic updates. The leading spaces for sorting are also an anti-pattern; consider using a dedicated sort key column in the lookup table.",386,470fb761-78c5-4d29-9791-1f9b5fa3ce10
current_fy_not_future_gross_revenue_print_k,Anti-Pattern|Repeated Logic,"Multiple metrics (e.g., `current_fy_current_week_prorated_ss_lgb_print`, `current_fy_past_week_ss_lgb_print`) apply the same `(CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END) IN ('PRINT')` filter. This logic for deriving 'revenue_type_xtend' is repeated across several metrics instead of being defined once as a derived column in the underlying table or a common calculated field.",(CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END) IN ('PRINT'),"Define `revenue_type_xtend` as a persistent derived column in the `adsales_performance` table or as a common calculated field in the Looker Studio data source. This centralizes the logic, reduces redundancy, and ensures consistency across all dependent metrics.",386,470fb761-78c5-4d29-9791-1f9b5fa3ce10
last_fy_gross_revenue_filtered_k,Data Mismatch|Potential Calculation Error,"The SQL logic for `last_fy_gross_revenue_filtered_k` contains a potential double division by 1000. In one `WHEN` clause, `t0.gross_revenue_amount / 1000` is already applied, and then the entire `CASE` statement result is again wrapped in `SAFE_DIVIDE(..., 1000)`. This could lead to incorrect values (e.g., values being 1000 times smaller than intended).","SAFE_DIVIDE(
            CASE
                WHEN (t0.relative_fy_year_offset = -1 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))
                THEN t0.gross_revenue_amount / 1000
                WHEN (t0.relative_fy_year_offset = -1 AND t0.ly_is_future_period_flag = 'N')
                THEN t0.gross_revenue_amount
                ELSE NULL
            END, 1000
        )","Review and correct the SQL logic for `last_fy_gross_revenue_filtered_k` to ensure `gross_revenue_amount` is divided by 1000 only once. The division by 1000 should ideally be handled consistently at the display layer (Looker Studio formatting) or as a single, explicit calculation if the base metric is not available in the desired unit.",386,470fb761-78c5-4d29-9791-1f9b5fa3ce10
current_fy_gross_revenue_k,Anti-Pattern|Redundant Calculation,"Numerous metrics are defined simply as a base metric (e.g., `gross_revenue_amount`, `ss_lgb`, `pub_lgb`) divided by 1000 (e.g., `current_fy_gross_revenue_k`, `current_fy_ss_lgb_k`). This creates redundant metrics that only differ by a scaling factor. This can lead to metric sprawl and makes it harder to manage and understand the core business metrics.","SAFE_DIVIDE(
            CASE
                WHEN (t0.relative_fy_year_offset = 0)
                THEN t0.gross_revenue_amount
                ELSE 0
            END, 1000
        )","Expose the base metrics (e.g., `current_fy_gross_revenue`) and apply the 'K' (thousands) formatting directly within Looker Studio's field settings. This reduces the number of distinct metrics, simplifies the data source, and improves maintainability.",386,470fb761-78c5-4d29-9791-1f9b5fa3ce10
updated_minutes_ago_base,Anti-Pattern / Ambiguous Logic,"The `updated_minutes_ago_base` metric, described as 'Minutes Since Last Update' for a data table, includes a `LIMIT 1` clause in its SQL logic. This means it arbitrarily selects the `last_modified_time` from only one table within the `sdm_newscycle.__TABLES__` metadata. While this metric serves as a subquery for other aggregated metrics, its standalone definition is misleading if it's intended to represent a general status or be displayed as a single, representative value on the dashboard. It does not provide a comprehensive 'last update' for the dataset.","SELECT timestamp_diff(CURRENT_TIMESTAMP(), TIMESTAMP_MILLIS(last_modified_time), MINUTE) AS updated_minutes_ago FROM `ncau-data-newsquery-prd.sdm_newscycle.__TABLES__` WHERE table_id NOT LIKE 'v_%' LIMIT 1","If this metric is intended for display as a single value, revise its logic to provide a meaningful aggregate (e.g., `MAX`, `MIN`, or `AVG` last update across all relevant tables) or specify which table it refers to. If it's purely an internal building block, consider marking it as non-KPI or clarifying its purpose in the business description.",387,8a5e8eb0-fe0e-40f6-9131-e7a564f5e60b
"count_updated_minutes_ago_delta, sum_updated_minutes_ago_delta, sum_updated_minutes_ago_full",Anti-Pattern / Imprecise Filtering,"The SQL logic for aggregating delta and full load types uses `LIKE '%delta%'` and `LIKE '%full%'` respectively. While functional, if the `load_type` column in the `sdm_ctl_load_types` control table contains exact, enumerated values (e.g., 'delta', 'full', 'incremental'), using exact equality (`= 'delta'`, `= 'full'`) would be more precise, potentially more performant, and less prone to unintended matches (e.g., matching 'superdelta' if such a type existed).",a.load_type LIKE '%delta%',"Review the distinct values of `load_type` in the `sdm_ctl_load_types` table. If they are exact strings, change `LIKE` to `=` for improved precision and clarity. If there are variations (e.g., 'delta_daily', 'delta_hourly'), consider if a more specific `LIKE` pattern or a separate lookup for load type categories would be beneficial for future maintainability.",387,8a5e8eb0-fe0e-40f6-9131-e7a564f5e60b
all_metrics,Hardcoded Logic,"All metrics (Current Month Audience, Previous Month Audience, Audience Change (Absolute), Audience Change (Percentage)) have their `Month` filter hardcoded to `DATE '2025-07-01'`. This makes the 'News monthly snapshot' dashboard static, preventing it from automatically updating to the current month or allowing users to select historical periods. The `structure_sql` confirms the table contains 29 unique months of data, from '2023-03-01' to '2025-07-01', indicating a wealth of historical data that is currently inaccessible.",t0.Month = DATE '2025-07-01',"Replace the hardcoded date with a dynamic date parameter (e.g., Looker Studio's date range control or `CURRENT_DATE()` and `DATE_SUB()` functions) to enable dynamic monthly reporting and historical analysis.",389,ae8a7e4a-6850-4617-aca7-de689047229d
all_metrics,Hardcoded Logic / Anti-Pattern,"All metrics are hardcoded to specific dimension values: `Category = 'News'`, `Subcategory = 'Travel'`, `Device = 'PC/Laptop, Smartphone, Tablet'`, and `Gender IN ('ALL', 'All') AND Age IN ('ALL', 'All')`. The `business_rules_sql` and `primary_analysis_sql` sample data clearly show the `ipsos_mom_audience_view` table contains a wider array of categories (e.g., 'Entertainment', 'Lifestyle', 'Sports') and subcategories. This severe hardcoding limits the dashboard's scope to a very narrow segment, contradicting the broader 'News monthly snapshot' title and preventing exploration of other relevant data within the same source.","t0.Category = 'News' AND t0.Subcategory = 'Travel' AND t0.Device = 'PC/Laptop, Smartphone, Tablet' AND t0.Gender IN ('ALL', 'All') AND t0.Age IN ('ALL', 'All')","Introduce Looker Studio parameters or filters for `Category`, `Subcategory`, `Device`, `Gender`, and `Age` to allow users to dynamically select and analyze different segments. This would significantly enhance the dashboard's utility and align it with a broader 'snapshot' purpose. Consider creating a dimension table for these attributes if they are complex or frequently change.",389,ae8a7e4a-6850-4617-aca7-de689047229d
"total_adds_20250520, total_adds_20250526, total_cancels_20250520, total_cancels_20250526, net_adds_cancels_20250520, net_adds_cancels_20250526",Hardcoded Logic / Metric Proliferation,"Six metrics are defined with identical filter conditions (`class_lvl_1 = 'Standard Paid'`, `delivery_medium != 'Print'`, `masthead = 'DT'`) but differ only by a hardcoded `report_date`. This leads to redundant metric definitions and makes the dashboard inflexible for analyzing different dates or date ranges without manual metric creation.",WHERE report_date = DATE 'YYYY-MM-DD' AND class_lvl_1 = 'Standard Paid' AND delivery_medium != 'Print' AND masthead = 'DT',"Consolidate these into a single 'Total Adds', 'Total Cancels', and 'Net Adds/Cancels' metric. Utilize Looker Studio's date range controls and filter controls (e.g., for `class_lvl_1`, `delivery_medium`, `masthead`) to allow users to dynamically select the desired date and filter criteria. If these filters are truly fixed for this dashboard, consider creating a pre-filtered view or a semantic layer (e.g., LookML model, dbt model) that applies these common filters upstream, simplifying the metric definitions.",390,acf4223b-efb2-4a6e-961d-a2f5fe0e004e
"daily_website_target_20250520, daily_website_target_20250526, daily_website_target_ytd_20240701_20250526",Hardcoded Logic / Metric Proliferation,"Similar to the subscription metrics, the 'Daily Website Target' metrics are duplicated for specific hardcoded dates or date ranges. This prevents dynamic analysis of targets for arbitrary periods.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(targetdate AS STRING)) = DATE 'YYYY-MM-DD' OR WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(targetdate AS STRING)) >= DATE 'YYYY-MM-DD' AND PARSE_DATE('%Y%m%d', SAFE_CAST(targetdate AS STRING)) <= DATE 'YYYY-MM-DD'","Consolidate these into a single 'Daily Website Target' metric. Implement Looker Studio date range controls to allow users to select any desired period. Additionally, investigate if the `targetdate` column in `subscription_targets` can be stored as a `DATE` type directly to avoid repeated `PARSE_DATE(SAFE_CAST(...))` operations in queries, which can impact performance and readability.",390,acf4223b-efb2-4a6e-961d-a2f5fe0e004e
total_emotion_count_by_emotion_negative_category,Hardcoded Logic,"All three metrics on the dashboard contain hardcoded date ranges in their WHERE clauses (e.g., '2025-02-09' to '2025-03-08'). This makes the dashboard static, prevents users from selecting custom date ranges, and requires manual updates to view current or historical data, significantly hindering its utility as a dynamic reporting tool.",SAFE_CAST(t0.ArticleDate AS DATE) >= DATE '2025-02-09' AND SAFE_CAST(t0.ArticleDate AS DATE) <= DATE '2025-03-08',"Replace hardcoded date ranges with Looker Studio's built-in date parameters (`_DS_START_DATE`, `_DS_END_DATE`) or custom date parameters to enable dynamic date filtering by dashboard users. This will make the dashboard interactive and reusable.",391,3dba3db1-7b70-4bd1-9c89-c78fd19832ac
total_emotion_count_by_category,Anti-Pattern,"The `PublicationGroup` filter (`'News.com.au'`) is consistently hardcoded across all metrics. While this ensures consistency for the current scope, it limits the dashboard's flexibility. If the business ever needs to analyze emotion counts for other publication groups, each metric's SQL would require modification.",SAFE_CAST(t0.PublicationGroup AS STRING) = 'News.com.au',"If there's a future possibility of analyzing other publication groups, consider introducing a dashboard-level filter or parameter for `PublicationGroup`. If 'News.com.au' is the sole focus, this hardcoding is acceptable but still a point of inflexibility.",391,3dba3db1-7b70-4bd1-9c89-c78fd19832ac
total_emotion_count_by_emotion_positive_category,Anti-Pattern (Potential),"The extensive and repeated use of `SAFE_CAST` (e.g., for `PublicationGroup`, `emotion_count`, `ArticleDate`, `Count`, `category`, `Emotion`) suggests potential underlying data type inconsistencies or a lack of strict schema enforcement in the source tables. While `SAFE_CAST` prevents query failures, it can add overhead and indicates a potential opportunity for upstream data quality improvements.","SAFE_CAST(PublicationGroup AS STRING), SAFE_CAST(emotion_count AS INT64), SAFE_CAST(t0.ArticleDate AS DATE), SAFE_CAST(t0.Count AS INT64)","Investigate the schema definitions of `ncau-data-newsquery-prd.prstn_verity.t_content_summary` and `ncau-data-newsquery-betauser.comments_genai.emotion_mapping`. If data types are frequently mismatched or ambiguous, consider enforcing stricter data types at the ingestion or data modeling layer to reduce the need for pervasive `SAFE_CAST` operations in downstream queries, improving query readability and potentially performance.",391,3dba3db1-7b70-4bd1-9c89-c78fd19832ac
"total_day_target_by_publication_group, total_day_target_by_section_team",Potential Data Type Inefficiency,"Both metrics use `PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = CURRENT_DATE()` for date filtering. While functional, the `SAFE_CAST` and `PARSE_DATE` combination suggests that the `targetdate` column in `cdm_reference_data.subscription_targets` might not be stored as a native DATE type. If `targetdate` is already a string or a date-formatted integer, this conversion could be redundant or inefficient. If it's a true DATE type, a direct comparison `t0.targetdate = CURRENT_DATE()` would be more performant and cleaner.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) = CURRENT_DATE()","Investigate the actual data type of the `targetdate` column in `ncau-data-newsquery-prd.cdm_reference_data.subscription_targets`. If it's a DATE type, simplify the WHERE clause to `t0.targetdate = CURRENT_DATE()`. If it's an integer representing YYYYMMDD, the current approach is acceptable but consider if a direct integer comparison `t0.targetdate = CAST(FORMAT_DATE('%Y%m%d', CURRENT_DATE()) AS INT64)` might be more efficient depending on indexing.",392,70dc50c7-72fe-4268-8e22-6de00e463d20
sum_day_target_by_publication_group_weekly,Hardcoded Logic,"This metric, part of a 'weekly report' dashboard, uses a hardcoded date range (May 5-11, 2025). This prevents the dashboard from dynamically updating for new weeks, requiring manual SQL modifications for each reporting period, which is inefficient and prone to error. This contradicts the 'weekly report' naming convention.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-05-05' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-11'","Replace the hardcoded date range with dynamic date parameters. Leverage Looker Studio's built-in date range controls to allow users to select the reporting week, or implement BigQuery functions like `CURRENT_DATE()` and `DATE_TRUNC` to automatically derive the current week's start and end dates. Additionally, consider consolidating this metric with 'Total Weekly Target by Website' into a single, more flexible data source or view that allows filtering by dimension (publication group vs. website).",393,c9529742-6e47-4644-ae3e-87ace36730cc
sum_day_target_website_weekly,Hardcoded Logic,"Similar to the 'Publication Group' metric, this metric also uses a hardcoded date range (May 5-11, 2025). This design flaw means the 'weekly report' is static and does not automatically reflect current week's data, necessitating manual updates for ongoing reporting, which is an anti-pattern for a recurring report.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-05-05' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-11'","Implement dynamic date filtering using Looker Studio's date range parameters or BigQuery's date functions to ensure the dashboard automatically displays data for the current or selected week, eliminating the need for manual SQL adjustments. The high similarity between this metric and 'Total Weekly Target by Publication Group' suggests an opportunity for data model optimization, potentially by pivoting the data or using a single metric with a dimension filter.",393,c9529742-6e47-4644-ae3e-87ace36730cc
active_subscriber_count_ta_consumer_non_print_active_status_specific_date,Hardcoded Logic,"This metric, along with 'Subscriptions Held Count', uses a hardcoded future date ('2025-07-17') for filtering. This will cause the metric to become static and eventually incorrect, failing to reflect current data.",WHERE t0.report_date = DATE '2025-07-17',"Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls, or BigQuery's `CURRENT_DATE()` and `DATE_SUB()` functions) to ensure the metric reflects current data and is maintainable.",394,3cf1c516-8797-455b-913a-8722b604bbfe
total_subscribers_daily_movement_ta_consumer_non_print_date_range,Hardcoded Logic,"This metric, along with 'Weekly Active Subscribers', uses a hardcoded date range ('2024-05-18' AND '2024-08-10') for filtering. Similar to hardcoded single dates, this will render the metric static and outdated over time.",WHERE t0c1d0.report_date BETWEEN DATE '2024-05-18' AND DATE '2024-08-10',"Replace hardcoded date ranges with dynamic date parameters (e.g., Looker Studio date range controls, or BigQuery's `CURRENT_DATE()` and `DATE_SUB()` functions) to ensure the metric reflects current data and is maintainable.",394,3cf1c516-8797-455b-913a-8722b604bbfe
multiple_metrics,Anti-Pattern,"There is inconsistent filtering logic for 'customer_type' and 'masthead' across different metrics. Some use `STRPOS` (e.g., 'DT' masthead, 'Consumer' customer type), some use `=` (e.g., 'TA' masthead), and some use `REGEXP_CONTAINS` for 'customer_type'. This indicates a lack of standardized definitions or a robust semantic layer, leading to potential data discrepancies and increased maintenance overhead.","Examples: STRPOS(SAFE_CAST(t0_subscriber_details.customer_type AS STRING), 'Consumer') > 0; SAFE_CAST(t0_subscriber_details.masthead AS STRING) = 'TA'; SAFE.REGEXP_CONTAINS(SAFE_CAST(t0c1d0.combined_customer_type AS STRING), 'Consumer')","Standardize filtering logic for common dimensions. For exact matches, use `=` instead of `STRPOS`. Consider creating a common data model or a semantic layer with predefined dimensions and measures to ensure consistency and reusability. If partial matching is truly required, ensure it's documented and consistently applied.",394,3cf1c516-8797-455b-913a-8722b604bbfe
multiple_metrics,Anti-Pattern,"All SQL queries include `LIMIT 100`. This is highly unusual for production dashboard metrics and would severely restrict the data displayed, potentially leading to misleading or incomplete insights. This suggests these queries might be for testing or development purposes rather than live reporting.",LIMIT 100;,"Remove `LIMIT 100` from production dashboard queries unless there's a specific, well-justified reason for sampling (which should typically be handled at the data source or visualization layer, not within the core metric definition).",394,3cf1c516-8797-455b-913a-8722b604bbfe
all_metrics,Hardcoded Logic / Anti-Pattern,"All 7 metrics on this dashboard define age group categories ('Under 35', '35 - 49', '50 - 74', '75+') and gender categories ('Female', 'Male') using identical, complex `CASE WHEN` statements. This logic is hardcoded directly into each metric's SQL, leading to extensive duplication. Any change to these business rules (e.g., adjusting age group boundaries, adding new gender categories) would require manual modification of every single metric, introducing significant maintenance overhead and a high risk of inconsistencies or errors across the dashboard.","CASE WHEN (t0.subscriber_individual_age IN ('Age 30 to 34', 'Age 25 to 29', 'Age 20 to 24', 'Age 18 to 19')) THEN 'Under 35' WHEN (t0.subscriber_individual_age IN ('Age 45 to 49', 'Age 40 to 44', 'Age 35 to 39')) THEN '35 - 49' WHEN (t0.subscriber_individual_age IN ('Age 70 to 74', 'Age 65 to 69', 'Age 60 to 64', 'Age 55 to 59', 'Age 50 to 54')) THEN '50 - 74' WHEN (t0.subscriber_individual_age IN ('Age 75 to 79', 'Age 80 to 84', 'Age 85 and over')) THEN '75+' ELSE NULL END AS age_group_category,
CASE WHEN (t0.subscriber_individual_gender IN ('F', 'f')) THEN 'Female' WHEN (t0.subscriber_individual_gender IN ('M', 'm')) THEN 'Male' ELSE NULL END AS gender_category","Centralize the age and gender categorization logic. This can be achieved by:
1.  **Creating a dedicated dimension table:** A lookup table (e.g., `dim_demographics`) that maps raw `subscriber_individual_age` and `subscriber_individual_gender` values to their respective categories and potentially ordinal values. This table would be joined to `reward_subscription`.
2.  **Implementing a BigQuery UDF (User-Defined Function) or View:** Encapsulate the `CASE WHEN` logic within a UDF or a view that can be reused across all metrics. This promotes the DRY (Don't Repeat Yourself) principle and ensures consistency.
3.  **Leveraging Looker Studio's data source level calculated fields:** If the raw `subscriber_individual_age` and `subscriber_individual_gender` fields are available in the Looker Studio data source, these categories could be defined once as calculated fields at the data source level, making them reusable across all charts.",395,f9d4736d-1798-45d3-90c2-150a93d50e55
all_metrics,Hardcoded Date Range,"All metrics within the dashboard utilize a fixed, hardcoded date range (`2025-04-09` to `2025-04-15`) in their `WHERE` clauses. This design makes the dashboard static and unsuitable for ongoing operational monitoring, trend analysis, or historical comparisons. Dashboards typically require dynamic date ranges (e.g., 'last 7 days', 'current month', or user-selectable periods) to provide current and relevant insights.","SAFE_CAST(t0.transaction_date AS DATE) >= DATE '2025-04-09'
AND SAFE_CAST(t0.transaction_date AS DATE) < DATETIME_ADD(DATE '2025-04-15', INTERVAL 1 DAY)","Replace the hardcoded date range with dynamic date parameters. In Looker Studio, this is typically achieved by adding a date range control to the dashboard, which then passes the selected date range as parameters to the underlying BigQuery queries. For BigQuery, this means using functions like `CURRENT_DATE()`, `DATE_SUB()`, `DATE_TRUNC()` or accepting parameters from the dashboard's query.",395,f9d4736d-1798-45d3-90c2-150a93d50e55
"record_count_by_age_gender, unique_members_by_age_gender, sum_age_ordinal_by_age_gender",Redundant Filtering,"Metrics that group by both age and gender categories include redundant filtering conditions in their `WHERE` clauses. Specifically, they re-evaluate the complex `CASE WHEN` expressions with `AND (CASE WHEN ... END) IN ('Under 35', '35 - 49', '50 - 74', '75+')` or similar for gender. These conditions are largely redundant if the `CASE WHEN ... IS NOT NULL` filters are already applied and the `CASE` statement itself is designed to only produce the desired categories or `NULL`. While not functionally incorrect, it adds unnecessary complexity to the SQL and can potentially lead to minor performance inefficiencies by re-processing the same logic.","AND (CASE WHEN (t0.subscriber_individual_age IN ('Age 30 to 34', 'Age 25 to 29', 'Age 20 to 24', 'Age 18 to 19')) THEN 'Under 35' WHEN (t0.subscriber_individual_age IN ('Age 45 to 49', 'Age 40 to 44', 'Age 35 to 39')) THEN '35 - 49' WHEN (t0.subscriber_individual_age IN ('Age 70 to 74', 'Age 65 to 69', 'Age 60 to 64', 'Age 55 to 59', 'Age 50 to 54')) THEN '50 - 74' WHEN (t0.subscriber_individual_age IN ('Age 75 to 79', 'Age 80 to 84', 'Age 85 and over')) THEN '75+' ELSE NULL END) IN ('Under 35', '35 - 49', '50 - 74', '75+')","Remove redundant `IN` clauses for derived categories in the `WHERE` clause. The `IS NOT NULL` checks for the derived categories are generally sufficient if the `CASE` statements correctly assign `NULL` for unmappable values. For improved readability and potential performance, consider defining the age and gender categories in a subquery or CTE, then filtering on the derived columns in the outer query.",395,f9d4736d-1798-45d3-90c2-150a93d50e55
"referrer_group_dimension, total_breach_views_by_referrer_group, unique_visits_by_referrer_group, total_subscription_signup_starts_by_referrer_group, total_subscription_signups_complete_by_referrer_group",Hardcoded Logic|Anti-Pattern,"The 'Referrer Group' dimension is defined using an identical hardcoded `CASE` statement across five different metrics. This anti-pattern creates a significant maintenance burden, as any change to the referrer grouping logic (e.g., adding new domains, reclassifying existing ones) requires updating each of these five metric definitions individually. This also increases the risk of data inconsistencies if updates are not applied uniformly across all instances.",CASE WHEN (t0.visit_referrer_domain = 'direct') THEN '1) Direct' WHEN (t0.visit_referrer_domain = 'google.com') THEN '2) Search' WHEN (t0.visit_referrer_domain = 'facebook.com') THEN '3) Social' ELSE '4) Other' END AS referrer_group,"Centralize the 'Referrer Group' logic. This can be achieved by: 
1. Creating a dedicated, governed lookup table in BigQuery that maps `visit_referrer_domain` to `referrer_group`. 
2. Defining 'Referrer Group' as a calculated field directly within the Looker Studio data source, ensuring all dependent metrics reference this single definition. 
3. Creating a BigQuery view that pre-calculates the `referrer_group` column, which the dashboard then queries.",396,8087886f-b3c5-4337-a45e-f51b8819a362
"total_breach_views_by_brand, total_breach_views_by_referrer_group, unique_visits_by_referrer_group, total_subscription_signup_starts_by_referrer_group, total_subscription_signups_complete_by_referrer_group",Hardcoded Logic,"Several measure metrics include a hardcoded `WHERE` clause for `visit_start_date` (e.g., `BETWEEN '2024-09-01' AND '2024-09-21'`). This makes the dashboard static and requires manual updates to view current or historical data outside of this specific range, severely limiting its utility for ongoing analysis and trend monitoring. It indicates that the dashboard is not leveraging Looker Studio's dynamic date range controls effectively.",WHERE t0.visit_start_date BETWEEN '2024-09-01' AND '2024-09-21',"Remove hardcoded date ranges from SQL queries. Instead, rely on Looker Studio's built-in date range controls, which dynamically filter data based on user selection. Ensure the `visit_start_date` column is correctly configured as a date dimension in the Looker Studio data source and that all charts are set to use the dashboard's default date range or a specific date range control.",396,8087886f-b3c5-4337-a45e-f51b8819a362
multiple_measure_metrics,Hardcoded Logic,"Seven high-criticality measure metrics (Subscription Add Volume, Closing Base, Earned Amount, Opening Base, Reduction Volume, Transfer In, Transfer Out) are hardcoded to filter data for `fiscal_week_id = '202535'`. The `sql_execution_summary` reveals that the `dv_tm1_pbf_subscriptions` table contains 61 unique fiscal weeks, ranging from '202501' to '202609'. This hardcoding prevents the dashboard from being dynamic, showing trends, or allowing users to select different periods, significantly limiting its business value and requiring manual updates for each new period.",WHERE SAFE_CAST(fiscal_week_id AS STRING) = '202535',"Implement a dynamic date parameter or filter in Looker Studio to allow users to select the `fiscal_week_id` or a date range. If a 'current week' is required, define it as a derived field or data source parameter that updates automatically, rather than a static hardcoded value.",397,23c8b213-a9f0-4158-b8fa-bff14425abb5
multiple_dimension_metrics,Anti-Pattern,"Thirteen dimension metrics (e.g., Subscription Category Name, Fiscal Week ID, GL Publication Code, Business Unit Code, etc.) use `LIMIT 10` in their SQL logic. While potentially intended for preview, this artificially restricts the distinct values available for filtering and display in the dashboard. The `sql_execution_summary` confirms that dimensions like `fiscal_week_id` have 61 unique values and `business_unit_code` has 27,716 unique values, far exceeding the imposed limit.",LIMIT 10,"Remove `LIMIT 10` from all dimension metrics. Looker Studio's UI is designed to handle large numbers of distinct values through pagination and search, making this SQL-level limitation unnecessary and counterproductive for comprehensive data exploration.",397,23c8b213-a9f0-4158-b8fa-bff14425abb5
fiscal_week_id_subscriptions,Redundant Casting,"The `fiscal_week_id` column is consistently `SAFE_CAST` to `STRING` before comparison with a string literal. While `SAFE_CAST` is generally good for robustness, if `fiscal_week_id` is already a string type in the source table (which is implied by the 'YYYYWW' format and sample data), this cast is redundant and adds unnecessary processing overhead.",SAFE_CAST(fiscal_week_id AS STRING),"Verify the actual data type of `fiscal_week_id` in the `dv_tm1_pbf_subscriptions` table. If it is already a string, remove the `SAFE_CAST` for cleaner and potentially more performant SQL. If it's numeric, consider casting the literal to numeric for comparison, e.g., `fiscal_week_id = 202535`.",397,23c8b213-a9f0-4158-b8fa-bff14425abb5
gross_revenue_fy2026_specific_bookings_not_cancelled,Hardcoded Logic,"The metric uses a hardcoded list of `booking_number` values in its WHERE clause. This list contains a duplicate entry ('620930') and an empty string (''), making the metric difficult to maintain, prone to errors, and lacking flexibility. The empty string could lead to unexpected matches or indicate underlying data quality issues.","SAFE_CAST(t0.booking_number AS STRING) IN ('632526', '620930', '621383', '626236', '622699', '629831', '625342', '620930', '')","Replace the hardcoded list with a join to a dedicated lookup table for specific booking numbers. This improves maintainability, allows for dynamic updates, and centralizes business logic. Address the duplicate and empty string entries in the source data or lookup table.",398,e83da1de-4227-43e6-bcc6-73051c66914b
dashboard_wide_pattern,Anti-Pattern,"All three 'Gross Revenue' metrics, despite representing a core business concept and sharing a `base_metric_id`, pull data from different underlying tables (`v_adsales_revenue_client`, `v_adsales_revenue_client_daily`, `event_revenue`) across two distinct datasets (`asl_advertising`, `sbx_fda_noncorefin`). This fragmentation indicates a lack of a consolidated, canonical data model for core revenue figures. This can lead to inconsistencies in reporting, increased maintenance overhead, and difficulty in comparing 'like-for-like' revenue across different contexts or time periods.","FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.event_revenue`","Investigate consolidating revenue data into a single, well-modeled table or view that can serve as the authoritative source for all gross revenue calculations. This unified model should incorporate necessary dimensions (e.g., financial_year, month, transaction_status, booking_number) to allow for flexible filtering and consistent reporting, rather than relying on distinct source tables for each specific slice of revenue.",398,e83da1de-4227-43e6-bcc6-73051c66914b
dashboard_wide_pattern,Anti-Pattern,"All three SQL queries include `LIMIT 1` after a `SUM` aggregation without a `GROUP BY` clause. While functionally harmless for a scalar sum (as `SUM` on its own returns a single value), it is redundant and can be misleading if the intent was to limit rows from a larger result set. It suggests a potential misunderstanding of SQL aggregation behavior or copy-pasting from a different query pattern.",LIMIT 1;,Remove the `LIMIT 1` clause from these scalar aggregation queries as it serves no functional purpose and can be confusing to future developers.,398,e83da1de-4227-43e6-bcc6-73051c66914b
"prstn_consumer_table_name, prstn_consumer_update_time_aest, prstn_consumer_row_count, prstn_consumer_overall_status, prstn_consumer_row_check",Hardcoded Logic / Anti-Pattern,"Five different metrics (`prstn_consumer_table_name`, `prstn_consumer_update_time_aest`, `prstn_consumer_row_count`, `prstn_consumer_overall_status`, `prstn_consumer_row_check`) all contain the exact same hardcoded list of 13 `prstn_consumer` table names within their `WHERE table_name IN (...)` clauses. This creates a significant maintenance burden, as any change to the set of monitored tables requires updating five separate metric definitions.","table_name IN ('subscription_engagement_breadth', 'payment_revenue_fct', 'b2b_subscription_engagement', 'campaign_performance_fct', 'b2c_subscription_engagement', 'consumer_activity_daily_summary', 'subscription_movement', 'subscription_base_movement_agg', 'subscription_base', 'prestige_digi_top_contents', 'prestige_digi_visits', 'newsletter_activity', 'newsletter_clicks')","Create a dedicated BigQuery lookup table (e.g., `prstn_consumer_monitored_tables`) containing the list of tables to be monitored. All relevant metrics should then join to this lookup table, centralizing the list and simplifying maintenance.",399,25db1e50-2b08-468d-8b46-c06dc1308920
prstn_consumer_overall_status,Anti-Pattern / Complex Logic,"The `prstn_consumer_overall_status` metric uses an extremely complex and deeply nested `CASE` statement to determine data freshness. The logic varies significantly by specific table groups and includes intricate time-of-day checks. This makes the SQL difficult to read, understand, debug, and maintain. Additionally, the use of an empty string (' ') for an intermediate status is unclear and lacks descriptive value.","CASE WHEN SAFE.DATE(DATETIME(main_data.last_modified_time, ""Australia/Sydney"")) = CURRENT_DATE(""Australia/Sydney"") AND main_data.table_name IN ('subscription_engagement_breadth', 'payment_revenue_fct', 'b2b_subscription_engagement', 'b2c_subscription_engagement', 'consumer_activity_daily_summary', 'subscription_movement', 'subscription_base_movement_agg', 'subscription_base') THEN CASE WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), TIMESTAMP(DATETIME(main_data.last_modified_time, ""Australia/Sydney"")), HOUR) <= 25 THEN 'Success' ELSE CASE WHEN TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), TIMESTAMP(DATETIME(main_data.last_modified_time, ""Australia/Sydney"")), HOUR) > 25 AND TIMESTAMP_DIFF(CURRENT_TIMESTAMP(), TIMESTAMP(DATETIME(main_data.last_modified_time, ""Australia/Sydney"")), HOUR) <= 26 THEN ' ' ELSE 'Need a check' END END ... (and subsequent WHEN clauses for other table groups)",Refactor this complex logic. Consider moving the specific freshness rules into a separate data model or view that pre-calculates the status for each table. This could leverage the suggested `prstn_consumer_monitored_tables` lookup table to store expected refresh schedules. Replace the ambiguous ' ' status with a more descriptive value like 'Pending Update' or 'Within Refresh Window'.,399,25db1e50-2b08-468d-8b46-c06dc1308920
prstn_consumer_refresh_rate,Hardcoded Logic / Inefficient Design,"The `prstn_consumer_refresh_rate` metric hardcodes the refresh frequencies for all `prstn_consumer` tables using a series of `UNION ALL` statements. More critically, the `WHERE TableName = 'subscription_engagement_breadth' LIMIT 1` clause means this metric will *only ever return* the refresh rate for the `subscription_engagement_breadth` table, making it ineffective for a dashboard intended to monitor the refresh rates of *all* listed tables.","SELECT RefreshRate FROM (SELECT ""subscription_engagement_breadth"" AS TableName, ""Every 24 Hours"" AS RefreshRate UNION ALL SELECT ""payment_revenue_fct"", ""Every 24 Hours"" ... ) WHERE TableName = 'subscription_engagement_breadth' LIMIT 1","This refresh rate information should be integrated into the proposed `prstn_consumer_monitored_tables` lookup table. The dashboard should then be designed to display this information for *all* monitored tables, likely in a table visualization, by removing the restrictive `WHERE` clause and `LIMIT 1` from the metric's SQL.",399,25db1e50-2b08-468d-8b46-c06dc1308920
"prstn_consumer_table_name, prstn_consumer_update_time_aest, prstn_consumer_row_count, prstn_consumer_row_check",Inefficient Design / Misleading Metric,"These metrics consistently use `ROW_NUMBER() OVER (ORDER BY ...)` in conjunction with `LIMIT 1`. This design means that regardless of the number of tables being monitored, these metrics will only ever return a single value, corresponding to one arbitrary table based on the `ORDER BY` clause. If the dashboard's purpose is to provide a 'Health Check' for *all* 13 `prstn_consumer` tables, this design is fundamentally flawed and will only show partial or misleading information.",ROW_NUMBER() OVER (ORDER BY table_name) as rn ... WHERE rn = 1 LIMIT 1 (or similar for other metrics using `last_modified_time` for ordering),"Redesign these metrics and the dashboard visualization to display data for *all* monitored tables, typically in a table or list format. Remove the `LIMIT 1` and the `ROW_NUMBER()` logic if the goal is to show all. If the dashboard *is* intended to show one table at a time (e.g., via a user filter), ensure the filter is applied *before* any `LIMIT` clause to guarantee the correct table's data is displayed.",399,25db1e50-2b08-468d-8b46-c06dc1308920
fiscal_week_month_dimension,Hardcoded Logic|Anti-Pattern,The 'Fiscal Week and Month String' metric uses an extremely long and repetitive `CASE` statement to map fiscal weeks to month names. The fiscal year '2025' and the fiscal year start date '2024-07-03' are hardcoded. This logic is highly inflexible and prone to errors with each new fiscal year or change in fiscal calendar definition. The same complex `DATETIME_DIFF` calculation is repeated for each `WHEN` clause.,"SELECT MIN(CONCAT('FY ','2025',' Week ',SAFE_CAST(DATETIME_DIFF(SAFE_CAST(clmn0_ AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS STRING),' (',CASE WHEN (CASE WHEN (DATETIME_DIFF(SAFE_CAST(clmn0_ AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 4) THEN 1 ... ELSE NULL END = 1) THEN 'July' ... ELSE NULL END,')')","Implement a dedicated fiscal calendar dimension table in the data warehouse. This table should contain fiscal year, week number, month name, and start/end dates. The metric should then join to this table based on the date column (`clmn0_`) to retrieve the fiscal period string, making it dynamic and maintainable.",400,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
record_volume_by_comparison_type,Anti-Pattern|Data Mismatch,"The 'Record Volume by Comparison Type and Period' metric's business description states it's a 'count of records', but the SQL logic `SUM(DATETIME_DIFF(SAFE_CAST(t0.clmn1_ AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK))` indicates it is summing a week number difference. This is a fundamental miscalculation for a 'record volume' and will not yield an accurate count of records. The start date '2024-07-03' is also hardcoded.","SELECT SUM(DATETIME_DIFF(SAFE_CAST(t0.clmn1_ AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)) AS record_volume","Correct the SQL logic to accurately count records, likely using `COUNT(*)` or `COUNT(DISTINCT some_identifier_column)`. Investigate the `clmn1_` column's purpose and ensure it's appropriate for a date calculation in this context. The hardcoded date should be replaced with a dynamic fiscal year start date from a calendar table.",400,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
comparison_type_budget,Anti-Pattern|Inefficient Query,"Metrics like 'Comparison Type: Budget', 'Comparison Type: Forecast', 'Gross Cancellations Type', and 'Gross Acquisitions Type' are designed to return constant string values ('BUD', 'FCT', 'Gross Cancellations', 'Gross Acquisitions'). However, their SQL logic unnecessarily queries the `digital_subscriptions` table and applies complex filtering, even though the `MIN(CASE WHEN (1 = 1) THEN 'BUD' ...)` structure ensures a constant output. This is highly inefficient.",SELECT MIN(CASE WHEN (1 = 1) THEN 'BUD' WHEN (1 = 2) THEN 'FCT' WHEN (1 = 3) THEN 'YOY' WHEN (1 = 4) THEN 'BUD NY' ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0 WHERE (CASE WHEN (CASE WHEN (t0.gl_publication_code = 'The Australian') THEN 'The Australian' ... ELSE 'Discontinued' END != 'Discontinued' AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' ... ELSE 'Digital Recognition' END = 'Digital Recognition'),"For constant string dimensions, consider creating them directly in Looker Studio as calculated fields with the constant value, or if they must be SQL-based, use a `SELECT 'CONSTANT_VALUE'` from a dummy table or a single-row table to avoid unnecessary table scans and complex filtering.",400,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
budget_opening_base_fy2025_current_week,Hardcoded Logic|Anti-Pattern,"Multiple KPI metrics (e.g., 'Budget Opening Base', 'Budget Earned Amount', 'NY Budget Opening Base', 'NY Budget Closing Base', 'Closing Base', 'Earned Amount') share identical, complex, and hardcoded filtering logic within their `WHERE` clauses. This includes `t0.masthead_group != 'Discontinued'`, the extensive `CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' ... ELSE 'Digital Recognition' END = 'Digital Recognition'`, and `t0.masthead_group IN ('02.Metros')`. The fiscal year '2025' is also hardcoded for current year metrics.",WHERE (t0.masthead_group != 'Discontinued' AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (CASE WHEN (t0.subscriber_has_email_flag = 'subsnapfact') THEN 'Y' WHEN (t0.classification_level_1_description = 'Standard Paid' AND t0.delivery_medium_type = 'Bundle') THEN t0.subscriber_has_email_flag ELSE 'Y' END = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition' AND t0.masthead_group IN ('02.Metros')),Centralize common filtering logic. This can be achieved by: 1) Creating a base view or CTE in BigQuery that applies these common filters. 2) Using Looker Studio's data blending or filter controls more effectively if the filters are meant to be dynamic. 3) Parameterizing the fiscal year and masthead group filters if they are meant to be user-selectable. The hardcoded '02.Metros' should be managed via a parameter or a lookup table if it represents a group that might change.,400,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
closing_base_forecast_split_fy2025_current_week,Hardcoded Logic|Anti-Pattern,"Metrics like 'Closing Base (FY2025, Current Week, Split by Week 22)', 'Opening Base (FY2025, Current Week, Split by Week 22)', and 'Earned Amount (Budget/Forecast, FY2025, Current Week, Split by Week 22)' implement a hardcoded business rule for splitting actuals and forecasts based on `t0.fy_week_of_year <= 22`. This threshold is embedded directly in the SQL, making it difficult to update if the business rule changes.","WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (SELECT MAX(fy_week_of_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` WHERE fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`)) AND t0.fy_week_of_year <= 22) THEN CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (SELECT MAX(fy_week_of_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` WHERE fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`)) AND t0.fy_week_of_year > 22) THEN t0.ForecastClosingBase ELSE 0 END","Externalize the actuals/forecast cutoff week. This could be a configuration parameter in the data model, a separate lookup table, or a Looker Studio parameter that can be updated centrally. This would allow for dynamic adjustment without modifying numerous metric definitions.",400,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
opening_base_fy2024_week52_if_current_week_is_1,Hardcoded Logic|Anti-Pattern,"Metrics handling specific edge cases like 'Opening Base (FY2024, Week 52, if Current Week is 1)' contain highly specific and complex logic to address a particular scenario (current week is 1, so look at previous FY's week 52). This indicates a lack of a robust, generalized fiscal period handling mechanism.",CASE WHEN ((SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`) = t0.fy_year AND t0.fy_week_of_year = 52) AND (SELECT MAX(fy_week_of_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` WHERE fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`)) = 1 THEN CASE WHEN (t0.table_union_source = 'bmasnap_open') THEN t0.OpeningBase ELSE 0 END,"Refactor fiscal period calculations to use a comprehensive fiscal calendar dimension table that can handle year-over-year, week-over-week, and specific period lookups dynamically. This would eliminate the need for complex, hardcoded conditional logic for edge cases.",400,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
"All metrics (e.g., actual_revenue_excl_future_weeks, actual_vs_forecast_revenue_difference_ytd_excl_future_weeks)",Anti-Pattern,"A large, identical subquery named `main` is repeated across all metrics. This subquery re-calculates various date flags (e.g., `previous_year_flag`, `latest_year_flag`, `future_week_flag`) by re-querying the base table (`tableau_operating_statement_query`) to find the `MAX(fiscal_week_end_date)` and then applying `CASE` statements. This redundant computation is highly inefficient and makes maintenance cumbersome.","main AS (
    SELECT
      fiscal_week_end_date,
      ...
      CASE
        WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 1 = (
          SELECT
            EXTRACT(YEAR FROM MAX(fiscal_week_end_date))
          FROM
            (
              SELECT
                fiscal_week_end_date,
                sum(actual) AS actuals,
                sum(actual_volume) AS volume
              FROM
                `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query`
              GROUP BY fiscal_week_end_date
            )
          WHERE
            actuals > 0 AND volume > 0
        ) THEN 1
        ELSE 0
      END AS previous_year_flag,
      ... (similar for other date flags)
    FROM
      `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query`
    WHERE
      month_end_flag = false AND os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES')
)","Create a centralized, materialized view or a common data model layer (e.g., a BigQuery view) that pre-calculates all necessary date flags and filters. This view should serve as the single source for all dashboard metrics, significantly reducing query complexity, improving performance, and centralizing date logic for easier maintenance and consistency.",401,415199ee-c67c-4b55-85f1-38b4aa291931
"All metrics (e.g., actual_revenue_excl_future_weeks, actual_vs_forecast_revenue_difference_ytd_excl_future_weeks)",Hardcoded Logic,"The `os_l7` filter, containing a hardcoded list of specific business unit values, is repeated identically within the `main` subquery of every metric. This approach is inflexible and prone to errors; any change in business unit names or the addition of new units requires manual updates across all affected metrics, risking inconsistencies.","WHERE
      month_end_flag = false AND os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES')","Externalize the list of `os_l7` values into a dedicated lookup table or a configuration table. The main data model/view should then join to this lookup table or use a parameterized filter, ensuring consistency, scalability, and ease of maintenance when business units evolve.",401,415199ee-c67c-4b55-85f1-38b4aa291931
"revenue_latest_year_date_adjusted_forecast_actual_ml, revenue_latest_week_date_adjusted_forecast_actual_ml",Hardcoded Logic,"These revenue metrics use hardcoded dates (`'2023-09-24'`, `'2023-11-12'`, `'2024-06-01'`) and static multipliers (`0.98`, `0.96`) within `CASE` statements to determine which revenue type (forecast, actual, ML forecast) and adjustment factor to apply. This logic is static and will quickly become outdated, requiring manual SQL modifications every time fiscal periods or adjustment rules change, leading to stale data and high maintenance burden.",SUM(CASE WHEN (t0.fiscal_week_end_date <= DATE('2023-09-24')) THEN t0.forecast WHEN (t0.fiscal_week_end_date <= DATE('2023-11-12')) THEN t0.actual * 0.98 WHEN (t0.fiscal_week_end_date < DATE('2024-06-01')) THEN t0.ml_forecast_rev * 0.96 ELSE 0 END),"Refactor these metrics to use dynamic date logic (e.g., based on `CURRENT_DATE()` or a fiscal calendar table) and store adjustment factors in a separate configuration table. This will allow the logic to automatically adapt to changing periods and business rules without requiring manual SQL updates, ensuring data freshness and reducing maintenance.",401,415199ee-c67c-4b55-85f1-38b4aa291931
"All metrics (e.g., actual_revenue_excl_future_weeks, actual_vs_forecast_revenue_difference_ytd_excl_future_weeks)",Anti-Pattern,"The `ML.FORECAST` calls for `model_rev` and `model_vol` are repeated within the `model_rev` CTE of every metric. While BigQuery might optimize some aspects, conceptually, re-running or re-defining ML model forecasting within each metric's query is inefficient and adds unnecessary complexity and potential for redundant computation.","model_rev AS (
    SELECT
      CAST(forecast_timestamp AS date) AS fiscal_week_end_date,
      forecast_value AS ml_forecast_rev,
      prediction_interval_lower_bound AS ml_forecast_rev_lb,
      prediction_interval_upper_bound AS ml_forecast_rev_ub,
      ml_forecast_vol,
      ml_forecast_vol_lb,
      ml_forecast_vol_ub
    FROM
      ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_rev`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) AS a
      INNER JOIN
      (
        SELECT
          CAST(forecast_timestamp AS date) AS fiscal_week_end_date,
          forecast_value AS ml_forecast_vol,
          prediction_interval_lower_bound AS ml_forecast_vol_lb,
          prediction_interval_upper_bound AS ml_forecast_vol_ub
        FROM
          ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_vol`, STRUCT(20 AS horizon, 0.9 AS confidence_level))
      ) AS b
      ON CAST(a.forecast_timestamp AS date) = CAST(b.fiscal_week_end_date AS date)
)","If these ML forecasts are stable and used consistently across multiple metrics, consider materializing their output into a separate, dedicated table or view. This materialized output can then be joined by the main data model, preventing redundant computation and improving overall query performance and maintainability.",401,415199ee-c67c-4b55-85f1-38b4aa291931
total_spend_current_period_k,Anti-Pattern / Redundant Logic,"The SQL logic for calculating current/previous period metrics (e.g., `total_spend_current_period_k`, `news_corp_spend_current_period_k`, `record_count`) is almost entirely duplicated across multiple metrics. This includes complex CTEs (`adex_data`, `union_table`, `TEMP1`, `TEMP2`) responsible for determining 'this year' (ty) and 'last year' (ly) periods based on different time granularities (Rolling 12 months, Calendar Year, Financial Year). This extensive duplication makes maintenance, debugging, and updates highly inefficient and error-prone, increasing the risk of inconsistencies.","WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for example
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(EXTRACT(YEAR FROM latest_date) AS STRING), '-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(max_fin_year - 1 AS STRING), '-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )","Refactor the common date period logic into a single, reusable BigQuery view or a Looker Studio blended data source. This view/source should pre-calculate the `ty_ly_embed` flag and other common time-based dimensions. This would significantly reduce SQL complexity, improve maintainability, and potentially optimize query performance across all dependent metrics.",402,601ed0d2-e944-4189-8170-d593c8e72026
total_spend_current_period_k,Hardcoded Logic / Potential Data Mismatch,"Within the `TEMP2` CTE, the `CASE` statement for `ty_ly_embed` explicitly hardcodes `'Rolling 12 months'` as the condition to evaluate. This means the logic for 'Calendar Year' and 'Financial Year' is effectively dead code in the provided SQL snippets. While the business description implies dynamic period selection, the current SQL will *always* use 'Rolling 12 months' logic. This creates a discrepancy between expected functionality and actual implementation, and severely limits the dashboard's flexibility if not addressed by a dashboard-level parameter.","CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for example
  WHEN 'Rolling 12 months' THEN
  CASE
    WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
    WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
    ELSE NULL
  END
  WHEN 'Calendar Year' THEN
  CASE
    WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(EXTRACT(YEAR FROM latest_date) AS STRING), '-1-1')) THEN 'ty'
    WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
    ELSE NULL
  END
  WHEN 'Financial Year' THEN
  CASE
    WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(max_fin_year - 1 AS STRING), '-7-1')) THEN 'ty'
    WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(SAFE_CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
    ELSE NULL
  END
  ELSE NULL
END AS ty_ly_embed","Implement a Looker Studio parameter for 'Time Period Type' (e.g., 'Rolling 12 months', 'Calendar Year', 'Financial Year'). Pass this parameter into the SQL query to dynamically select the appropriate `ty_ly_embed` logic. If the dashboard is truly fixed to 'Rolling 12 months', remove the unused `CASE` branches to simplify the SQL and clarify intent.",402,601ed0d2-e944-4189-8170-d593c8e72026
total_spend_current_period_k,Anti-Pattern / Redundant CTEs,"The `adex_data` and `union_table` CTEs are defined identically, both selecting all columns from `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource with `WHERE source = 'Adex'`. The `union_table` CTE is then used in `TEMP1`, making `adex_data` redundant except for its use in the `MAX(date)` and `MAX(financial_year)` subqueries. This adds unnecessary complexity and potential for confusion.","WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),","Consolidate `adex_data` and `union_table` into a single CTE or directly use the base table with the `WHERE` clause. Ensure the `MAX(date)` and `MAX(financial_year)` subqueries correctly reference the filtered data if that's the intent, or consider pre-calculating these max dates in a separate metadata table if they are static or updated infrequently.",402,601ed0d2-e944-4189-8170-d593c8e72026
news_corp_spend_current_period_k,Hardcoded Logic / Anti-Pattern,"Metrics like 'News Corp Spend' and 'Nine Spend' hardcode specific `Media_Network` values ('NEWS CORP', 'NINE') directly in the `WHERE` clause of the final `SUM` aggregation. This approach is not scalable; if new media networks are added or existing ones change names, these metrics will require manual SQL updates. This increases maintenance burden and the risk of data discrepancies.","SUM(CASE WHEN ty_ly_embed = 'ty' AND Media_Network = 'NEWS CORP' THEN SAFE_DIVIDE(COALESCE(Spend, 0), 1000) ELSE NULL END)","Consider creating a dimension for `Media_Network` and allowing users to filter or select specific networks dynamically within the dashboard. If specific networks are always required as separate metrics, explore using a more dynamic approach (e.g., a Looker Studio parameter for `Media_Network` if the dashboard structure allows, or a pre-aggregated view that pivots on `Media_Network` if performance is a concern).",402,601ed0d2-e944-4189-8170-d593c8e72026
cancellation_type_filter,Hardcoded Logic|Anti-Pattern,"This metric, intended as a filter, uses a `CASE WHEN (1=1)` statement, which hardcodes its output to 'Gross Cancellations'. This prevents users from dynamically selecting other cancellation types (e.g., 'Net Cancellations') and makes the filter non-functional.",SELECT CASE WHEN (1 = 1) THEN 'Gross Cancellations' WHEN (1 = 2) THEN 'Net Cancellations' ELSE NULL END AS cancellation_type FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 LIMIT 1,"Replace the hardcoded `CASE` statement with a direct reference to a `cancellation_type` dimension column from the `dt_digital_subscriptions` table, or a dedicated lookup table for cancellation types. If this is meant to be a parameter, it should be implemented as such.",403,bb49fa78-5abe-4e68-a9c1-8172a832e724
view_type_filter,Hardcoded Logic|Anti-Pattern,"Similar to `cancellation_type_filter`, this metric uses `CASE WHEN (1=1)` to hardcode its output to 'BUD'. This prevents dynamic selection of view types (FCT, YOY, BUD NY) and renders the filter ineffective.",SELECT CASE WHEN (1 = 1) THEN 'BUD' WHEN (1 = 2) THEN 'FCT' WHEN (1 = 3) THEN 'YOY' WHEN (1 = 4) THEN 'BUD NY' ELSE NULL END AS view_type FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 LIMIT 1,"Replace the hardcoded `CASE` statement with a direct reference to a `view_type` dimension column, or a dedicated lookup table for view types. Implement as a parameter if intended for user input.",403,bb49fa78-5abe-4e68-a9c1-8172a832e724
date_metric_type_filter,Hardcoded Logic|Anti-Pattern|Excessive Complexity,"This metric exhibits the most severe hardcoding issue. It uses a very long `CASE WHEN (1=1)` statement to always return 'Week to Date & Budget View'. This complex logic is entirely bypassed by the `(1=1)` condition, making it impossible to select any of the 15 other defined date/metric type combinations. This is a significant governance and usability flaw.",SELECT CASE WHEN (1 = 1) THEN 'Week to Date & Budget View' WHEN (1 = 2) THEN 'Week to Date & Forecast View' WHEN (1 = 3) THEN 'Week to Date & Year on Year View' WHEN (1 = 4) THEN 'Week to Date & NY Budget View' WHEN (1 = 5) THEN 'Month to Date & Budget View' WHEN (1 = 6) THEN 'Month to Date & Forecast View' WHEN (1 = 7) THEN 'Week to Date & Year on Year View' WHEN (1 = 8) THEN 'Month to Date & NY Budget View' WHEN (1 = 9) THEN 'Quarter to Date & Budget View' WHEN (1 = 10) THEN 'Quarter to Date & Forecast View' WHEN (1 = 11) THEN 'Quarter to Date & Year on Year View' WHEN (1 = 12) THEN 'Quarter to Date & NY Budget View' WHEN (1 = 13) THEN 'Year to Date & Budget View' WHEN (1 = 14) THEN 'Year to Date & Forecast View' WHEN (1 = 15) THEN 'Year to Date & Year on Year View' WHEN (1 = 16) THEN 'Year to Date & NY Budget View' ELSE NULL END AS date_metric_type FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 LIMIT 1,"This filter likely represents a combination of two or more independent filters (e.g., 'Date Granularity' and 'Financial View Type'). It should be refactored into separate, functional dimension filters or parameters, potentially driven by a well-governed lookup table that defines valid combinations. The current implementation is completely broken.",403,bb49fa78-5abe-4e68-a9c1-8172a832e724
multiple_metrics,Anti-Pattern|Lack of Consolidation,"The core financial metrics (`budget_earned_amount_cw_2025`, `closing_base_cw_2025`, `opening_base_cw_2025`, `earned_amount_cw_2025`, `net_change_py_cw`) all query the same table (`dt_digital_subscriptions`) with nearly identical `WHERE` clauses (`masthead_group != 'Discontinued'`, `finance_recognition = 'Digital Recognition'`, `fy_week_of_year = 38`). Only the `fy_year` and the aggregated column change. This indicates redundant SQL definitions and a missed opportunity for consolidation.",Example from `budget_earned_amount_cw_2025`: SELECT SUM(t0.BudgetEarnedAmount) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE t0.masthead_group != 'Discontinued' AND t0.finance_recognition = 'Digital Recognition' AND t0.fy_year = 2025 AND t0.fy_week_of_year = 38,"Consolidate these metrics by creating a single, parameterized data source or a more robust Looker model that allows for dynamic selection of the aggregated column, fiscal year, and fiscal week. This would significantly improve maintainability, reduce development effort, and ensure consistency across related metrics. Consider using Looker's native parameter features or a more advanced data modeling approach (e.g., a view in BigQuery) to abstract the common filtering logic.",403,bb49fa78-5abe-4e68-a9c1-8172a832e724
N/A (applies to all metrics),Hardcoded Logic|Anti-Pattern,"A highly complex `CASE` statement is repeatedly used across all metrics to derive a 'revenue type' or 'cost model category' from `unified_publication_name` and `cost_model_type`. This duplication makes the SQL verbose, difficult to read, prone to errors if the business logic for revenue type classification changes, and inefficient as the calculation is performed for every metric. This contradicts the initial AI assessment of '0' governance issues.",CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG' WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP' THEN 'PMP' WHEN (CASE WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'Y' ELSE 'N' END) = 'Y' THEN 'PERFORMANCE' ELSE NULL END,"Materialize this derived 'revenue_type' or 'cost_model_category' as a new, governed column directly within the `asl_finance_derived.details_dashboard` table during the ETL process. Alternatively, create a BigQuery `VIEW` that encapsulates this logic, allowing all metrics to query the view, or define it as a LookML dimension if a LookML model is in use. This will centralize the logic, improve maintainability, and potentially enhance query performance.",404,5491badf-5ec0-4b4f-a427-b12a3a3395dd
gross_revenue_current_fy_performance_past_dates_perf_prog_q1,Hardcoded Logic,"Metrics intended to show 'Past Dates' (e.g., `gross_revenue_current_fy_performance_past_dates_perf_prog_q1`) use a hardcoded timestamp for filtering the `reporting_date`. This means the 'past dates' context will not dynamically update relative to the current date, leading to stale data unless the SQL is manually updated. Furthermore, the hardcoded date differs between 'Q1' and 'Q2 filtered' metrics (July 2nd vs July 20th), which could lead to inconsistent interpretations of 'past dates' if not explicitly intended and documented.","t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney')","Replace hardcoded dates with dynamic date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`) or leverage Looker Studio's built-in date range controls/parameters. If specific historical snapshots are required, ensure these dates are clearly labeled and the intent is well-documented.",404,5491badf-5ec0-4b4f-a427-b12a3a3395dd
N/A (applies to all metrics),Anti-Pattern,"The `UPPER(SAFE_CAST(t0.cost_model_type AS STRING))` operation is repeated multiple times within the same `CASE` statement for deriving revenue types. While `SAFE_CAST` is a good practice, applying `UPPER` repeatedly on the same column within the same logical block is redundant and adds unnecessary processing overhead.",UPPER(SAFE_CAST(t0.cost_model_type AS STRING)),"If `cost_model_type` is consistently a string, `SAFE_CAST` might be unnecessary. If not, cast and apply `UPPER` once to a temporary expression or a pre-calculated column/view before using it multiple times within the `CASE` statement. This is a minor optimization but contributes to cleaner code.",404,5491badf-5ec0-4b4f-a427-b12a3a3395dd
"gross_revenue_current_fy_tubi_past_dates_perf_prog_q1, gross_revenue_current_fy_tubi_perf_prog_q2_filtered",Inconsistency,"Most metrics use `ELSE NULL` within their `SUM(CASE WHEN ... THEN gross_revenue_amount ELSE NULL END)` logic, which is standard for `SUM` to ignore non-matching rows. However, two specific 'TUBI' metrics use `ELSE 0`. While `SUM` typically treats `NULL` as 0 for aggregation, this inconsistency could lead to unexpected behavior in more complex scenarios or with other aggregate functions, and it deviates from the pattern established by other metrics.",THEN t0.gross_revenue_amount ELSE 0 END),"Standardize the `ELSE` clause to either `NULL` or `0` across all `SUM(CASE WHEN ...)` metrics based on the desired aggregation behavior. For `SUM`, `NULL` is generally preferred as it explicitly indicates that the row does not contribute to the sum for that specific condition.",404,5491badf-5ec0-4b4f-a427-b12a3a3395dd
N/A (applies to all metrics),Hardcoded Logic,"All metrics within the dashboard utilize identical, hardcoded filter values for `Gender`, `Age`, `Category`, `Subcategory`, and `Device` directly within their SQL `WHERE` clauses. This approach, while ensuring consistency for the current 'Food & Beverage' and 'PC/Laptop' scope, makes the dashboard inflexible. Any change to these demographic or content filters would require manual modification of the SQL for every single metric, leading to high maintenance costs and potential for errors.","WHERE t0.Gender IN ('All', 'ALL') AND t0.Age IN ('All', 'ALL') AND t0.Category = 'Lifestyle' AND t0.Subcategory = 'Food & Beverage' AND t0.Device = 'PC/Laptop'","Introduce dashboard-level parameters or controls for `Category`, `Subcategory`, `Device`, `Gender`, and `Age`. Alternatively, if these are fixed business rules, consider creating a more specific view or a dimension table that can be joined to filter the data, centralizing the definition of these segments. This would allow for easier updates and potentially enable users to dynamically filter the dashboard without requiring SQL changes.",405,647e7eab-0b9d-4a55-8429-becd2ee551d1
multiple_metrics,Hardcoded Logic|Anti-Pattern,"A pervasive anti-pattern is the repeated use of `CASE WHEN (t0.relative_fy_year_offset = X)` or `relative_fy_month_offset` / `relative_fy_week_offset` across numerous metrics (e.g., Current Year Gross Revenue, Previous Year Gross Revenue, Next Year Gross Revenue, Current Year SS LGB, Current Year Pipeline). This hardcoded approach for time-relative calculations creates significant redundancy, makes fiscal year/period definition updates cumbersome, and increases the risk of inconsistencies if the underlying logic needs to change. It also indicates a lack of a centralized, dynamic date dimension or fiscal calendar logic.",SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) FROM ... (and similar for other offsets and metrics),"Implement a robust date dimension table or a semantic layer (e.g., LookML) that defines fiscal periods and offsets dynamically. This would allow metrics to reference these definitions, reducing hardcoding and improving maintainability. Looker's native date filtering capabilities should be leveraged where possible.",406,67786617-e360-4dd1-a220-285d379e356f
multiple_k_metrics,Anti-Pattern,"Several metrics are simply scaled versions of others (e.g., 'Current Year Gross Revenue' vs 'Current Year Gross Revenue (k)'). The division by 1000 using `SAFE_DIVIDE` is repeated in the SQL logic for each 'k' metric. This leads to metric proliferation and unnecessary complexity in the data model, as scaling for presentation should ideally be handled at the visualization layer.","SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM ...","Define base metrics without scaling (e.g., `gross_revenue_amount`). Apply 'thousands' formatting directly within the Looker Studio dashboard's field settings or through a LookML `value_format_name` property. This separates data logic from presentation logic.",406,67786617-e360-4dd1-a220-285d379e356f
"current_year_actual_gross_revenue_k, previous_year_stly_gross_revenue, is_digital_other_segment_flag",Hardcoded Logic,"Metrics rely on hardcoded string values for filtering, such as `is_future_period_flag = 'N'`, `stly_flag = 'Y'`, and `sales_segment_l_2_name_sync = 'Digital Other'`. While functional, this approach is brittle. If these flag values or segment names change in the source system, or if new categories are introduced, the metric definitions will break or become inaccurate without manual updates.","CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN ...
CASE WHEN (t0.relative_fy_year_offset = -1 AND t0.stly_flag = 'Y') THEN ...
MAX(CASE WHEN t0.sales_segment_l_2_name_sync = 'Digital Other' THEN 1 ELSE 0 END)","For flags, consider converting them to boolean types if possible, or use a lookup table for flag definitions. For categorical fields like `sales_segment_l_2_name_sync`, ensure they are exposed as dimensions in the data model, allowing users to filter dynamically rather than hardcoding specific values into metrics. This promotes flexibility and data governance.",406,67786617-e360-4dd1-a220-285d379e356f
current_year_current_week_weighted_ss_lgb,Anti-Pattern|Data Mismatch,"This metric uses `t0.DOW_Today` in its calculation, implying a dependency on a column that likely represents the current day of the week. This makes the metric's value dynamic and dependent on the day it's queried, which can lead to non-reproducible results for historical analysis and makes auditing challenging. It also suggests a potential data pipeline dependency for `DOW_Today` to be consistently updated.","SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.relative_fy_week_offset = 0) THEN (t0.ss_lgb * t0.DOW_Today) ELSE 0 END, 7)) FROM ...","Clarify the business requirement for this real-time weighting. If historical consistency is needed, `DOW_Today` should be replaced with a static value or a date-specific calculation that doesn't change based on the query execution date. Ensure the data pipeline reliably populates `DOW_Today` if it's intended for real-time reporting.",406,67786617-e360-4dd1-a220-285d379e356f
pub_lgb_current_future_months,Data Mismatch,"Unlike most other sum-based metrics that use `ELSE 0` in their `CASE` statements, this metric uses `ELSE NULL`. While `SUM()` ignores `NULL` values, using `ELSE NULL` can lead to the entire sum returning `NULL` if no rows match the `WHEN` condition, which might be an unexpected behavior compared to returning `0` (as other metrics would). This inconsistency can cause confusion and potential errors in downstream calculations or visualizations.",SELECT SUM(CASE WHEN (t0.relative_fy_month_offset > -1) THEN t0.pub_lgb ELSE NULL END) FROM ...,"Standardize the `ELSE` clause in `CASE` statements for sum aggregations. For measures, `ELSE 0` is generally preferred to ensure that non-matching rows contribute zero to the sum, providing a consistent and predictable result (e.g., a sum of 0 instead of NULL when no data matches the filter).",406,67786617-e360-4dd1-a220-285d379e356f
multiple_metrics_fy_offset,Anti-Pattern,"Numerous metrics are created by applying simple `CASE WHEN` filters on the `relative_fy_year_offset` column (e.g., -1 for previous FY, 0 for current FY, 1 for next FY) to the same base measures like `gross_revenue_amount` and `ss_lgb`. This leads to significant metric proliferation (e.g., 'Gross Revenue Amount (Previous FY)', 'Gross Revenue Amount (Current FY)', 'SS LGB (Current FY, Past Week)') instead of leveraging dynamic filtering or parameters in the dashboard tool. This approach makes the dashboard less flexible and increases the overhead for metric management.",SUM(CASE WHEN (t0.relative_fy_year_offset = -1) THEN t0.gross_revenue_amount ELSE 0 END),"Consolidate these metrics into a single base metric (e.g., 'Gross Revenue Amount') and enable dynamic filtering by `relative_fy_year_offset` at the dashboard or chart level. Implement a robust date dimension table that pre-calculates relative periods, allowing for more flexible and performant time-based analysis without hardcoding in each metric.",407,18fdc9a7-66dc-49aa-909e-dd751e5ba491
multiple_metrics_in_k,Anti-Pattern,"Several metrics include `SAFE_DIVIDE(..., 1000)` directly in their SQL logic to present values 'in K' (thousands). This is primarily a presentation formatting concern that should ideally be handled at the visualization layer of the dashboard tool (e.g., Looker Studio's formatting options) rather than hardcoded into the metric's SQL definition. This practice creates redundant metrics (e.g., 'Gross Revenue Amount (Current FY)' vs. 'Gross Revenue Amount (Current FY) in K') and makes it cumbersome to change display units or introduce new scaling requirements.","SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)","Define base metrics without hardcoded scaling. Utilize the dashboard tool's formatting capabilities to display values in thousands, millions, etc. This centralizes presentation logic and reduces the number of distinct metrics required.",407,18fdc9a7-66dc-49aa-909e-dd751e5ba491
gross_revenue_amount_previous_fy_complex_digital_other_date,Hardcoded Logic,"The SQL logic for this metric contains a highly complex and hardcoded date condition, including a specific timestamp (`2025-04-14 22:39:04.688082+00`) and multiple nested `CASE WHEN` statements combined with `SAFE_CAST`, `PARSE_DATE`, and `DATETIME_ADD`. This makes the metric extremely inflexible, difficult to understand, and prone to breakage if the fixed date or the underlying business rules (e.g., 'Digital Other' segment definition) change. It also mixes business logic (revenue type, segment) with date calculation in a single, opaque expression.","SAFE_CAST(CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-04-14 22:39:04.688082+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY)","Refactor this complex logic into a dedicated derived view or a robust date dimension table that pre-calculates relevant date flags and business-specific period definitions. Avoid hardcoding specific dates/timestamps. Parameterize or externalize the complex business rules (e.g., 'Digital Other' criteria) into a lookup table or a more manageable configuration.",407,18fdc9a7-66dc-49aa-909e-dd751e5ba491
current_financial_week_number,Anti-Pattern,"This dimension is defined with a hardcoded `WHERE` clause that restricts its values to specific `sales_segment_l_2_name_sync` categories ('BDM Campaigns', 'SMB Direct', 'SMB Real Estate', 'SMB Transactional'). While potentially serving a specific dashboard need, defining a dimension with such an intrinsic filter limits its reusability across other parts of the dashboard or other reports that might require the financial week number for different segments. This can lead to incomplete data representation or unexpected behavior if not clearly understood by users.","WHERE t0.sales_segment_l_2_name_sync IN ('BDM Campaigns', 'SMB Direct', 'SMB Real Estate', 'SMB Transactional')","Dimensions should generally represent the full range of their possible values. Apply filtering for specific segments at the dashboard or chart level using controls, rather than embedding it directly into the dimension's SQL definition. If this specific filtered dimension is absolutely necessary, consider renaming it to clearly indicate its limited scope (e.g., 'Current Financial Week Number (Selected Segments)').",407,18fdc9a7-66dc-49aa-909e-dd751e5ba491
"sales_2024_metro_q1, traffic_2024_metro_q1",Data Mismatch,"The business description for 'Sales Total FY2024 (Metro, Q1 2025)' and 'Traffic Total FY2024 (Metro, Q1 2025)' explicitly states 'for comparison with FY2025'. However, the SQL logic applies the exact same calendar date range (March 3, 2025 to April 13, 2025) to both FY2024 and FY2025 metrics. This means the FY2024 metrics are attempting to sum data from a future calendar period, which will result in zero or incorrect values, rendering the year-over-year comparison invalid. A true year-over-year comparison requires comparing the equivalent fiscal period in the prior year.","WHERE
      SAFE_CAST(agg.au_activity_date AS DATE) >= DATE '2025-03-03'
      AND SAFE_CAST(agg.au_activity_date AS DATE) <= DATE '2025-04-13'
      AND SAFE_CAST(agg.masthead_group AS STRING) IN ('Metro')","Adjust the date filtering for FY2024 metrics to dynamically select the equivalent fiscal period in FY2024. This typically involves calculating the start and end dates of the corresponding Q1 in FY2024 based on the fiscal year definition. For example, if Q1 2025 is March 3 - April 13, 2025, then Q1 2024 should be March 3 - April 13, 2024, or the actual fiscal Q1 dates for FY2024.",408,af564bd3-ec49-4836-9e6f-2040699aa76b
"All metrics (sales_2025_metro_q1, sales_2024_metro_q1, traffic_2025_metro_q1, traffic_2024_metro_q1, sales_2025_taus, sales_2024_taus, traffic_2025_taus, traffic_2024_taus, fiscal_year_dimension)",Anti-Pattern,"The core logic for deriving fiscal year (`fy_start_end` CTE) and joining with the main aggregation table (`agg` subquery) is duplicated verbatim across all nine metrics. This leads to highly verbose, inefficient, and difficult-to-maintain SQL. Any change to the fiscal year definition or the underlying `t_weekly_report_dp_traffic_sales_agg` schema would require updating every single metric individually.","WITH
      fy_start_end AS (
        SELECT
          fy_year,
          MIN(report_date) AS start_of_fy,
          MAX(report_date) AS end_of_fy
        FROM
          `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_base_movement_agg`
        WHERE
          1 = 1
        GROUP BY 1
      ),
      agg AS (
        SELECT
          agg.*,
          fy.fy_year
        FROM
          `nau-data-nprod-dataservices.dynamic_pricing.t_weekly_report_dp_traffic_sales_agg` AS agg
          LEFT JOIN
          fy_start_end AS fy
          ON agg.au_activity_date BETWEEN fy.start_of_fy AND fy.end_of_fy
      )","Create a consolidated BigQuery view (or a dbt model) that pre-joins `t_weekly_report_dp_traffic_sales_agg` with the fiscal year lookup (`v_subscription_base_movement_agg`) and includes all necessary dimensions (e.g., `au_activity_date`, `fy_year`, `masthead_group`, `sales_total`, `traffic_total`). All dashboard metrics should then query this single, well-defined view, simplifying their logic to simple `SUM` and `WHERE` clauses. This significantly improves maintainability, readability, and potentially query performance through BigQuery's optimization of views.",408,af564bd3-ec49-4836-9e6f-2040699aa76b
"sales_2025_metro_q1, sales_2024_metro_q1, traffic_2025_metro_q1, traffic_2024_metro_q1, sales_2025_taus, sales_2024_taus, traffic_2025_taus, traffic_2024_taus",Hardcoded Logic,"The `masthead_group` values ('Metro', 'TAUS') are hardcoded within the SQL logic of individual metrics. If the list of masthead groups changes or expands, new metrics would need to be created or existing ones modified, leading to metric proliferation and maintenance overhead.",SAFE_CAST(agg.masthead_group AS STRING) IN ('Metro'),"Leverage Looker Studio's filtering capabilities or parameters to allow users to select masthead groups dynamically. Alternatively, if the masthead groups are fixed but numerous, consider creating a single base metric that can be filtered by a 'Masthead Group' dimension in the dashboard, rather than creating separate metrics for each group.",408,af564bd3-ec49-4836-9e6f-2040699aa76b
"sales_2025_taus, sales_2024_taus, traffic_2025_taus, traffic_2024_taus",Inconsistency,"Unlike the 'Metro' metrics which are filtered by a specific date range (March 3, 2025 to April 13, 2025), the 'TAUS' metrics lack any date range filter in their `WHERE` clause. This means they aggregate sales/traffic for the *entire* fiscal year (FY2025 or FY2024). This inconsistency in date filtering between different masthead groups within the same dashboard can lead to misinterpretation of data if not clearly communicated to users.","FROM
      agg
    WHERE
      SAFE_CAST(agg.masthead_group AS STRING) IN ('TAUS')","Clarify the business requirement for 'TAUS' metrics. If they are intended to be full fiscal year totals, ensure this is clearly documented and communicated. If they should align with specific periods like the 'Metro' metrics, apply appropriate date filters. Consider standardizing period definitions across all masthead groups for consistent reporting.",408,af564bd3-ec49-4836-9e6f-2040699aa76b
weekly_health_section_team_target_excl_australian,Hardcoded Logic,"The metric uses a hardcoded date range ('2025-07-28' to '2025-08-03'). This contradicts the dashboard's 'Last Week' naming convention, implying the dashboard will not automatically update and requires manual SQL modification weekly to remain current.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-07-28' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-08-03'","Replace hardcoded dates with dynamic date functions (e.g., `CURRENT_DATE()` and `DATE_SUB()`) or leverage Looker Studio's built-in date range parameters (e.g., `_DS_LAST_WEEK`) to ensure the dashboard always reflects the 'last week' without manual intervention.",409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_registrations_by_social_referrer_regional,Hardcoded Logic,"This metric also uses a hardcoded date range ('2025-04-21' to '2025-04-27'), suffering from the same issue as the target metric regarding dynamic updates.","WHERE t0.SubscriptionDateTime >= TIMESTAMP '2025-04-21' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-04-27', INTERVAL 1 DAY)",Implement dynamic date filtering using Looker Studio date parameters or BigQuery's `CURRENT_TIMESTAMP()` and `TIMESTAMP_SUB()` functions to align with the 'Last Week' requirement.,409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_registrations_regional_overall,Hardcoded Logic,"Similar to the other metrics, this one uses a hardcoded date range ('2025-03-10' to '2025-03-16'), making it static and requiring manual updates.","WHERE t0.SubscriptionDateTime >= TIMESTAMP '2025-03-10' AND t0.SubscriptionDateTime < TIMESTAMP_ADD(TIMESTAMP '2025-03-16', INTERVAL 1 DAY)",Adopt dynamic date filtering mechanisms to ensure the dashboard remains current without manual SQL modifications.,409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_registrations_by_social_referrer_regional,Anti-Pattern,"The identification of 'regional sites' relies on a hardcoded `REGEXP_CONTAINS` list of website names. This approach is brittle, difficult to maintain, and does not scale. Any change in website names or the addition of new regional sites requires manual updates across all affected metrics.","AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')","Create a governed dimension table or a lookup table that categorizes websites (e.g., 'Regional', 'National'). Join to this table in the SQL queries or define a calculated field in Looker Studio based on this dimension for more robust and maintainable filtering.",409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_registrations_regional_overall,Anti-Pattern,"This metric duplicates the hardcoded `REGEXP_CONTAINS` logic for regional sites, exacerbating the maintenance burden and risk of inconsistency.","AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.Website AS STRING), 'Courier|Telegraph|Herald|Advertiser|Bulletin|Cairns|NTNews|Chronicle|Mercury')",Apply the same recommendation as above: centralize website categorization using a dimension table to ensure consistency and ease of maintenance across all metrics.,409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_registrations_by_social_referrer_regional,Hardcoded Logic,The 'Health' content filter is hardcoded using `REGEXP_CONTAINS` on `categorytopic_path` or `ArticleDominantSection1`. This lacks flexibility for evolving content taxonomies or if the definition of 'Health' content needs to be refined.,"AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'Health|health') OR t0.ArticleDominantSection1 = 'health')",Consider using a governed content taxonomy dimension or a lookup table for content categories. This allows for centralized management of content definitions and more flexible filtering.,409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_registrations_regional_overall,Hardcoded Logic,"This metric duplicates the hardcoded 'Health' content filter, leading to redundant logic and increased maintenance overhead.","AND (SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.categorytopic_path AS STRING), 'Health|health') OR t0.ArticleDominantSection1 = 'health')",Apply the same recommendation as above: centralize content categorization logic to improve maintainability and consistency.,409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
weekly_health_section_team_target_excl_australian,Hardcoded Logic,"The exclusion of 'The Australian' website is hardcoded. While specific, this approach is less flexible than managing inclusions/exclusions via a dimension or parameter.",AND t0.website != 'The Australian',"If 'The Australian' is a consistent exclusion, consider a 'Website Type' dimension (e.g., 'Included in Target', 'Excluded from Target') or a parameter to manage such filters dynamically.",409,b456ee91-66d6-4bcb-b3a7-c752a3e02170
multiple_metrics,Anti-Pattern,"Multiple metrics (e.g., Current Year Gross Revenue, Last Year Gross Revenue, STLY Gross Revenue, Next Year Gross Revenue, Pub LGB YTD/MTD) utilize repetitive `CASE WHEN` statements to filter data based on `relative_fy_year_offset` and `relative_fy_month_offset`. This pattern, while functional, leads to redundant SQL logic across metrics, increasing maintenance overhead and potential for inconsistencies if the definition of 'current year' or 'STLY' changes. It suggests that time-based calculations are being hardcoded at the metric level rather than being abstracted in a more consolidated data model.","Example from 'Current Year Gross Revenue': SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END)
Example from 'STLY Gross Revenue': SUM(CASE WHEN (t0.relative_fy_year_offset = -1 AND t0.stly_flag = 'Y') THEN t0.gross_revenue_amount ELSE 0 END)","Implement a robust date dimension table that pre-calculates or flags fiscal year/month offsets and 'Same Time Last Year' indicators. Alternatively, if a semantic layer (e.g., LookML) is available, define these time-based filters as reusable dimensions or parameters, allowing metrics to simply reference these definitions rather than embedding `CASE WHEN` logic directly. This would significantly improve maintainability and reduce redundancy.",410,0aff66b8-3b9d-4830-96ec-abef5f7eb7ef
adpoint_account_dimension,Anti-Pattern,"Four key dimension metrics (Adpoint Account, Genera Booking Account, Medium Rare Debtor Account, National Debtor Account) are defined with a `LIMIT 1` clause in their SQL logic. This prevents them from returning a full set of unique values, making them unusable for their stated purpose of 'mapping' accounts or for any meaningful aggregation/filtering within a dashboard. If the intent was to display an example value, the metric type and naming are misleading. Given the dashboard's name 'Debtor to Account Mapping', these dimensions are expected to provide a comprehensive list of accounts for cross-referencing.",SELECT SAFE_CAST(Adpoint_Account AS STRING) AS Adpoint_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` LIMIT 1,"Remove the `LIMIT 1` clause from all account mapping dimension metrics to allow them to return all relevant account IDs. If a single example value is truly needed for display, consider creating a separate metric with appropriate naming (e.g., 'Sample Adpoint Account') or adjust the metric type to a 'single value' display rather than a 'dimension'.",411,258a722d-9b6e-45df-ba00-1b9954ec36b2
total_clicks,Hardcoded Logic,"The 'Total Clicks' metric contains hardcoded values for the `visit_date` (fixed to February 2025), `brand` ('Vogue Austraila'), and a specific `query` exclusion (`STRPOS(query, 'vogue') <= 0`). This severely limits the reusability and dynamic nature of the dashboard, making it unsuitable for general SEO reporting or trend analysis beyond a very specific, fixed context. It contradicts the concept of a 'suite' of reports.","WHERE visit_date BETWEEN DATE '2025-02-01' AND DATE '2025-02-28' AND SAFE_CAST(brand AS STRING) = 'Vogue Austraila' AND STRPOS(SAFE_CAST(query AS STRING), 'vogue') <= 0;",Replace hardcoded date ranges with Looker Studio date parameters. Replace hardcoded brand and query filters with dashboard filters or parameters to allow users to select their desired brand and query criteria. This will enable the metric to be dynamic and reusable across the entire 'SEO Reporting Suite'.,412,4e74297f-bdb0-426c-9c82-d42067eef9ee
total_impressions,Hardcoded Logic,"Similar to 'Total Clicks', the 'Total Impressions' metric also uses hardcoded values for `visit_date`, `brand`, and `query` exclusion. This prevents the dashboard from being a flexible 'SEO Reporting Suite' and instead makes it a static report for a single, specific scenario. This anti-pattern undermines the dashboard's utility and scalability.","WHERE visit_date BETWEEN DATE '2025-02-01' AND DATE '2025-02-28' AND SAFE_CAST(brand AS STRING) = 'Vogue Austraila' AND STRPOS(SAFE_CAST(query AS STRING), 'vogue') <= 0;","Implement dynamic filtering using Looker Studio parameters for date ranges, brand selection, and query filtering. This will enable the dashboard to serve a broader range of analytical needs and truly function as a 'suite' by providing relevant data based on user selections.",412,4e74297f-bdb0-426c-9c82-d42067eef9ee
current_fy_gross_revenue,Anti-Pattern,"All SQL queries for the dashboard's metrics, including 'Current FY Gross Revenue', redundantly include a `LIMIT 1` clause. While harmless for single-row aggregate results (like `SUM`), it is unnecessary and can be misleading, implying a row limit where none is functionally required for a simple aggregation. This suggests a potential boilerplate query generation or a lack of optimization awareness.",SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 LIMIT 1,Remove the `LIMIT 1` clause from all metric SQL definitions as it serves no functional purpose for these aggregate queries and can be confusing to future maintainers.,413,9461b1c8-5b2b-4267-882b-42b427c26abb
current_fy_gross_revenue,Hardcoded Logic,"Metrics like 'Current FY Gross Revenue' and 'Previous FY Gross Revenue' repeatedly use `SUM(CASE WHEN t0.relative_fy_year_offset = X THEN ... ELSE 0 END)` to define financial year periods. While functional for current and previous years, this pattern hardcodes the time-period logic within each metric's SQL. If the definition of 'current' or 'previous' FY changes, or if additional time periods (e.g., 'next FY', 'FY-2') are required, each metric's SQL would need individual modification, increasing maintenance overhead and potential for error.",SUM(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END),"Consider centralizing time-period definitions. This could involve: 1) Defining `is_current_fy`, `is_previous_fy` flags in a dedicated date dimension table joined to `adsales_performance`. 2) If using Looker Studio, defining these as calculated fields at the data source level, referencing base `gross_revenue_amount` and `pipeline` fields, making the logic more reusable and manageable across metrics.",413,9461b1c8-5b2b-4267-882b-42b427c26abb
All Metrics,Hardcoded Logic,"All metrics within the dashboard contain hardcoded date ranges directly embedded in their SQL queries (e.g., `WHERE t0.date >= DATE '2025-01-01' AND t0.date <= DATE '2025-08-24'`). This anti-pattern makes the dashboard static, prevents dynamic date filtering by users, and necessitates manual code changes for any period-over-period analysis or future date updates. This is a significant governance issue, as it introduces maintenance overhead and limits the dashboard's utility, directly contradicting the initial assessment of '0 governance issues'. Furthermore, the date ranges differ between video content metrics and article content metrics, indicating inconsistent data scoping.","Example from 'Video Content Starts': `WHERE t0.date >= DATE '2025-01-01' AND t0.date <= DATE '2025-08-24'`
Example from 'Article Content Starts': `WHERE t0.visit_date >= DATE '2025-05-07' AND t0.visit_date <= DATE '2025-08-04'`","Implement dynamic date parameters using Looker Studio's built-in date range controls. This involves replacing the hardcoded `DATE 'YYYY-MM-DD'` values with parameters that Looker Studio can pass to the underlying BigQuery queries, allowing users to select their desired date ranges. For consistency, a single, unified date dimension should be used across all tables where possible, or a clear strategy for handling different date dimensions should be documented and implemented.",414,40ca2399-e61c-42bd-874c-ea7be0681a4b
"cumulative_cancels_filtered_retention_source, total_acquisitions_filtered_retention_source, delivery_medium_type_filtered_standard_paid_australian, retention_month_highly_filtered",Anti-Pattern,"All four metrics on the dashboard utilize identical and complex CTEs (`data_core_prep`, `data_core`, `total_acq`) and a subsequent `t0` subquery. This results in massive SQL duplication, redundant data processing for each metric, and significant maintenance burden. Any change to the core logic requires updating four separate metric definitions.","WITH
  data_core_prep AS (
    SELECT
      a.subscription_id_src,
      a.masthead,
      d.masthead_desc,
      d.masthead_group,
      a.rate_plan_code,
      a.rate_plan_description,
      a.offer_category_name,
      a.offer_category_group_name,
      a.frontbook_backbook_group_name,
      a.sold_in_source_channel,
      a.sold_in_channel,
      a.classification_level_1,
      a.classification_level_2,
      a.delivery_medium_type,
      a.delivery_schedule_group,
      CASE
        WHEN a.classification_level_2 = 'App Subscribers' AND (a.rate_plan_description LIKE '%Apple%' OR a.sold_in_source LIKE '%Apple%') THEN 'Apple App'
        WHEN a.classification_level_2 = 'App Subscribers' AND (a.rate_plan_description LIKE '%Google%' OR a.sold_in_source LIKE '%Google%') THEN 'Google App'
        WHEN a.dw_billing_system_code = 'SWG' THEN 'Subscribe with Google'
        ELSE 'NCA'
      END AS platform_name,
      CASE
        WHEN a.classification_level_2 = 'App Subscribers' OR a.dw_billing_system_code = 'SWG' THEN 'Third Party (Apple App, Google App, Subscribe with Google)'
        WHEN a.classification_level_1 IN ('Free Staff', 'Free Trials', 'Complimentary') THEN 'Free'
        WHEN a.classification_level_1 = 'Standard Paid' THEN 'Standard Paid'
        WHEN(a.classification_level_1 IN ('Corporate', 'Campus') OR REGEXP_CONTAINS(a.classification_level_2, '(Campus|Corp|Uni|Teacher)')) THEN 'Corporate'
        ELSE 'Other'
      END AS subscription_classification_type,
      CASE
        WHEN a.local_publication_name = 'KTVSport' THEN 'Y'
        ELSE 'N'
      END AS KTV_flag,
      date(a.report_date) AS retention_start_date,
      CASE
        WHEN coalesce(date(b.report_date), `current_date`('Australia/Sydney')) > `current_date`('Australia/Sydney') THEN `current_date`('Australia/Sydney')
        ELSE coalesce(date(b.report_date), `current_date`('Australia/Sydney'))
      END AS retention_end_date,
      a.subscription_movement_count,
      b.subscription_movement_count AS cancellation_count
    FROM
      `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS a
      LEFT JOIN
      `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS b
      ON a.dw_subscription_id = b.dw_subscription_id AND b.subscription_movement_count_type = 'cancellation'
      LEFT JOIN
      `ncau-data-newsquery-prd.qvr_consumer.masthead_description` AS d
      ON a.masthead = d.masthead
    WHERE
      a.subscription_movement_count_type = 'acquisition' AND a.dw_source_system_code = 'THINK' AND date(a.movement_datetime) BETWEEN PARSE_DATE('%Y%m%d', '20230101') AND PARSE_DATE('%Y%m%d', '20230131')
  ),","Consolidate the common SQL logic into a single, well-defined base view or a Looker Studio data source. This base view should pre-calculate all necessary dimensions and intermediate metrics (like `total_acquisitions` and `cumulative_cancels` before final aggregation) and expose them for consumption by individual dashboard metrics. This will drastically reduce query complexity, improve performance, and simplify maintenance.",415,5b6fc742-e514-4052-9c56-1d7a44f755f6
"cumulative_cancels_filtered_retention_source, total_acquisitions_filtered_retention_source, delivery_medium_type_filtered_standard_paid_australian, retention_month_highly_filtered",Hardcoded Logic,"The `WHERE` clause in the `data_core_prep` CTE hardcodes the `movement_datetime` to a static range (January 2023). This means the dashboard will always display data only for that specific month, making it obsolete for current or ongoing analysis.","WHERE
      a.subscription_movement_count_type = 'acquisition' AND a.dw_source_system_code = 'THINK' AND date(a.movement_datetime) BETWEEN PARSE_DATE('%Y%m%d', '20230101') AND PARSE_DATE('%Y%m%d', '20230131')","Replace the hardcoded date range with dynamic date parameters (e.g., Looker Studio's `_SDATE` and `_EDATE`) or relative date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)` for last month's data). This will allow the dashboard to display up-to-date information and enable flexible date range selection by users.",415,5b6fc742-e514-4052-9c56-1d7a44f755f6
"cumulative_cancels_filtered_retention_source, total_acquisitions_filtered_retention_source, delivery_medium_type_filtered_standard_paid_australian, retention_month_highly_filtered",Hardcoded Logic,"Business classification logic for `platform_name`, `subscription_classification_type`, and `KTV_flag` is embedded directly within complex `CASE` statements in the `data_core_prep` CTE. This makes the logic difficult to manage, prone to errors if business rules change, and inconsistent if similar logic is needed elsewhere.","CASE
        WHEN a.classification_level_2 = 'App Subscribers' AND (a.rate_plan_description LIKE '%Apple%' OR a.sold_in_source LIKE '%Apple%') THEN 'Apple App'
        WHEN a.classification_level_2 = 'App Subscribers' AND (a.rate_plan_description LIKE '%Google%' OR a.sold_in_source LIKE '%Google%') THEN 'Google App'
        WHEN a.dw_billing_system_code = 'SWG' THEN 'Subscribe with Google'
        ELSE 'NCA'
      END AS platform_name,
      CASE
        WHEN a.classification_level_2 = 'App Subscribers' OR a.dw_billing_system_code = 'SWG' THEN 'Third Party (Apple App, Google App, Subscribe with Google)'
        WHEN a.classification_level_1 IN ('Free Staff', 'Free Trials', 'Complimentary') THEN 'Free'
        WHEN a.classification_level_1 = 'Standard Paid' THEN 'Standard Paid'
        WHEN(a.classification_level_1 IN ('Corporate', 'Campus') OR REGEXP_CONTAINS(a.classification_level_2, '(Campus|Corp|Uni|Teacher)')) THEN 'Corporate'
        ELSE 'Other'
      END AS subscription_classification_type,","Extract these classification rules into a dedicated lookup table or a governed dimension table. Join this table to the `v_subscription_movement` table to derive the classification fields. This centralizes business logic, improves data governance, and makes updates much easier without modifying complex SQL queries.",415,5b6fc742-e514-4052-9c56-1d7a44f755f6
"cumulative_cancels_filtered_retention_source, total_acquisitions_filtered_retention_source",Anti-Pattern,"The two primary KPI metrics (`Cumulative Cancels` and `Total Acquisitions`) apply an identical and extensive set of hardcoded `WHERE` clause filters. While filtering is necessary, the exact duplication of these specific filter values across two distinct metrics is redundant and increases the risk of inconsistencies if filter criteria need to be adjusted.","WHERE
  t0.subscription_classification_type IN ('Standard Paid', 'Third Party (Apple App, Google App, Subscribe with Google)')
  AND t0.classification_level_1 IN ('Standard Paid', 'Other Paid', 'Complimentary')
  AND t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'DPE only', 'Digital', 'Essentials', 'Mind Games', 'Print-only')
  AND SAFE_CAST(t0.retention_month AS FLOAT64) IN (1.000000, 2.000000)
  AND t0.sold_in_source_channel IN ('Premium Breach', 'Facebook', 'Google Amp', 'Google', 'Inbound', 'Inbound Saves', 'Web Nav Bar', 'Marketing Placements', 'Sem', 'Nav Bar')","If these filters are always intended to be applied together for these KPIs, consider applying them within the consolidated base view (as suggested in the first recommendation). Alternatively, if these filters are user-selectable, ensure they are managed via Looker Studio controls that apply consistently across relevant charts, rather than hardcoding them into each metric's SQL.",415,5b6fc742-e514-4052-9c56-1d7a44f755f6
"gross_revenue_raw, gross_revenue_k, gross_revenue_current_fy_raw, gross_revenue_current_fy_k, gross_revenue_prior_fy_raw, gross_revenue_prior_fy_k, gross_revenue_prior_fy_stly_raw, gross_revenue_prior_fy_stly_k",Anti-Pattern,"Multiple gross revenue metrics are defined with highly repetitive SQL logic, differing only by scaling (raw vs. thousands) and fiscal year filtering (current, prior, STLY). This leads to a proliferation of similar metrics, making maintenance cumbersome and increasing the likelihood of inconsistencies if the base logic needs to change. The scaling factor (1000) is hardcoded into several metrics, which should ideally be handled at the presentation layer or as a derived metric from a single base value.","Example: 
- `SELECT SUM(t0.gross_revenue_amount) FROM ...`
- `SELECT SUM(SAFE_DIVIDE(t0.gross_revenue_amount, 1000)) FROM ...`
- `SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) FROM ...`","Define a single, base `gross_revenue` metric. Leverage Looker Studio's calculated fields or a semantic layer to create derived metrics for 'Thousands' versions. For fiscal year filtering, consider implementing a robust date dimension table with `relative_fy_year_offset` and `stly_flag` attributes. This would allow users to dynamically filter by fiscal year without requiring separate hardcoded metrics for each period, significantly reducing the total number of metrics and improving reusability.",416,50a98d01-2d0b-4834-8bb2-02b4e4bd1a32
sales_segment_gm_name_categorized_dim,Hardcoded Logic,"The 'Sales Segment GM Name (Categorized)' dimension relies on a complex, hardcoded `CASE` statement to categorize GM names. This approach is inflexible and highly susceptible to breakage if GM names change, new GMs are added, or categorization rules evolve. The varying number of leading spaces in the `THEN` clauses (e.g., ' Renee Sycamore', '  Natalie Grabbe') is also an anti-pattern that could lead to unexpected sorting or display issues in the dashboard. The `ELSE NULL` clause means any `sales_segment_gm_name_sync` values not explicitly listed will result in `NULL`, potentially hiding valid data.",SELECT DISTINCT CASE WHEN t0.sales_segment_gm_name_sync = 'Renee Sycamore' THEN 'Renee Sycamore' WHEN t0.sales_segment_gm_name_sync = 'Ian Paterson' THEN ' Ian Paterson' WHEN t0.sales_segment_gm_name_sync = 'Natalie Grabbe' THEN '  Natalie Grabbe' WHEN t0.sales_segment_gm_name_sync = 'Kelly Healy' THEN '   Kelly Healy' WHEN (t0.sales_segment_gm_name_sync = 'Vacant' AND t0.sales_segment_l_2_name_sync = 'Cairns') THEN '   Kelly Healy' WHEN t0.sales_segment_gm_name_sync = 'Belinda MacPherson' THEN '    Belinda MacPherson' WHEN t0.sales_segment_gm_name_sync = 'Lou Barrett' THEN '     Lou Barrett' WHEN t0.sales_segment_gm_name_sync = 'Vacant' THEN '      Vacant' WHEN t0.sales_segment_gm_name_sync = '' THEN '       null' ELSE NULL END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0,"Replace the hardcoded `CASE` statement with a join to a dedicated lookup or dimension table for `sales_segment_gm_name`. This table should map raw GM names to their categorized versions, allowing for centralized management, easier updates, and improved data governance. Investigate and remove the inconsistent leading spaces in the `THEN` clauses unless they serve a specific, documented purpose (e.g., intentional sorting). Ensure all possible `sales_segment_gm_name_sync` values are accounted for in the lookup table to prevent data loss.",416,50a98d01-2d0b-4834-8bb2-02b4e4bd1a32
"total_cancellations_sc_tenure_buckets_2025, sum_cancellation_tenure_sc_tenure_buckets_2025, count_cancellation_tenure_sc_tenure_buckets_2025",Anti-Pattern,"A highly verbose and complex `CASE` statement for `tenure_bucket` is identically repeated across three distinct cancellation metrics. This hardcoded logic is difficult to read, maintain, and prone to inconsistencies if the bucketing rules need to be adjusted. The use of floating-point literals for what appear to be integer-based day boundaries adds unnecessary precision and verbosity.","CASE
    WHEN (c.subscription_tenure_days >= 0.000000 AND c.subscription_tenure_days < 365.000000) THEN 0.000000
    WHEN (c.subscription_tenure_days >= 365.000000 AND c.subscription_tenure_days < 730.000000) THEN 365.000000
    ... (many more lines)
    WHEN (c.subscription_tenure_days >= 9855.000000 AND c.subscription_tenure_days <= 10000.000000) THEN 9855.000000
    WHEN (c.subscription_tenure_days < 0.000000) THEN -1.000000
    WHEN (c.subscription_tenure_days > 10000.000000) THEN 10001.000000
    ELSE SAFE_CAST(c.subscription_tenure_days AS FLOAT64)
  END AS tenure_bucket","Centralize the `tenure_bucket` logic. This can be achieved by: 1) Creating a dedicated dimension table for tenure buckets that can be joined to, or 2) Implementing a BigQuery User-Defined Function (UDF) to encapsulate this complex bucketing logic. This would improve maintainability, ensure consistency, and simplify the metric SQL.",417,6e8b534b-485a-48dd-842d-13dc6bebb01a
"total_acquisitions_sc_channel_dimension, total_cancellations_sc_tenure_buckets_2025, sum_cancellation_tenure_sc_tenure_buckets_2025, count_cancellation_tenure_sc_tenure_buckets_2025, cross_masthead_acquisitions_sc_to_other_source_masthead_dimension, total_cancellations_by_subscription_type_2024, sum_cancellation_tenure_by_subscription_type_2024, count_cancellation_tenure_by_subscription_type_2024",Hardcoded Logic,"Multiple metrics hardcode specific lists of `sold_in_rate_plan_code` values directly within their `WHERE` clauses. Two distinct sets of rate plans are used across the dashboard. This approach makes the dashboard inflexible to changes in rate plan definitions or the introduction of new plans, requiring manual SQL modifications for updates.","c.sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12')
-- and another set:
sold_in_rate_plan_code IN ('SC_FDO_AFLD0418W52', 'SC_FDO_AFLC0418W52', 'SC_FDO_NRLD0418W52', 'SC_FDO_NRLC0418W52', 'SC_DO_BBL16W52', 'SC_DO_NBL23W52')","Externalize rate plan definitions. Create a `dim_rate_plan` lookup table that includes `rate_plan_code` and relevant attributes (e.g., `rate_plan_type`, `is_supercoach_sdo`, `is_supercoach_fdo`). Queries can then join to this dimension table and filter based on these attributes, making the logic dynamic and easily updatable.",417,6e8b534b-485a-48dd-842d-13dc6bebb01a
"total_acquisitions_sc_channel_dimension, total_cancellations_sc_tenure_buckets_2025, cross_masthead_acquisitions_sc_to_other_source_masthead_dimension, total_cancellations_by_subscription_type_2024, sum_cancellation_tenure_by_subscription_type_2024, count_cancellation_tenure_by_subscription_type_2024",Hardcoded Logic,"Fiscal years (e.g., `fy_year = 2025`, `fy_year = 2024`) and specific date ranges (e.g., `movement_datetime >= DATE '2024-08-20'`) are hardcoded in several metric queries. This severely limits the dashboard's utility for historical analysis or future reporting periods without manual SQL modifications.","c.fy_year = 2025
-- or
t0.movement_datetime >= DATE '2024-08-20' AND t0.movement_datetime < DATETIME_ADD(DATE '2025-01-20', INTERVAL 1 DAY)","Implement dynamic date and fiscal year filtering. Utilize Looker Studio's built-in date range controls and parameters. For fiscal years, ensure the underlying `v_subscription_movement` view or a `dim_date` table contains a `fiscal_year` column, allowing for flexible filtering based on user selection or current date logic.",417,6e8b534b-485a-48dd-842d-13dc6bebb01a
"total_cancellations_by_subscription_type_2024, sum_cancellation_tenure_by_subscription_type_2024, count_cancellation_tenure_by_subscription_type_2024, cross_masthead_acquisitions_sc_to_other_source_masthead_dimension",Hardcoded Logic,"The logic to categorize subscriptions as 'New' or 'Existing' is hardcoded using `CASE` statements, with different criteria depending on the metric (e.g., `a.fy_year = c.fy_year` vs. `sc.movement_datetime >= '2025-01-21'`). This indicates a lack of a standardized definition for 'subscription type' across the dashboard.","CASE WHEN a.fy_year = c.fy_year THEN 'New' ELSE 'Existing' END AS Subscription_Type
-- or
CASE WHEN sc.movement_datetime >= '2025-01-21' THEN 'New' ELSE 'Existing' END AS subscription_type","Standardize the 'New' vs. 'Existing' subscription type definition. This logic should ideally be pre-calculated and stored as a column in the `v_subscription_movement` view or a related dimension table, ensuring consistency and simplifying metric queries.",417,6e8b534b-485a-48dd-842d-13dc6bebb01a
cross_masthead_acquisitions_sc_to_other_source_masthead_dimension,Hardcoded Logic,"The list of 'other' mastheads (`CM`, `DT`, `HS`, etc.) is hardcoded within the `WHERE` clause of the `cross_masthead_acquisitions` metric. Any changes to the masthead portfolio or the definition of 'other' mastheads will necessitate manual SQL updates.","masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')","Manage masthead lists in a lookup table. Create a `dim_masthead` table with a flag (e.g., `is_other_masthead_for_cross_acquisition`) that can be used for filtering. This allows business users or data engineers to update the list without modifying SQL queries.",417,6e8b534b-485a-48dd-842d-13dc6bebb01a
"event_occurrences_2025_08_11_week, event_occurrences_2025_03_03_week, event_occurrences_2025_07_07_week",Hardcoded Logic|Anti-Pattern,"Three distinct metrics are used to count events for specific, hardcoded weeks in 2025. This approach is not scalable or maintainable for a dashboard intended to show 'My week last week', which implies a dynamic, relative date range. Each new week would necessitate the creation of a new metric. Additionally, the SQL for these metrics includes an unnecessary subquery (`SELECT t0c0d1.event_date AS clmn0_ FROM ...`) which adds complexity and potential overhead without providing any functional benefit, as `event_date` could be directly referenced.","SELECT COUNT(1) AS event_occurrences_week_2025_08_11 FROM (SELECT t0c0d1.event_date AS clmn0_ FROM `ncau-data-newsquery-prd.analytics_309894138.events_intraday_*` AS t0c0d1) WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(clmn0_ AS STRING)) >= DATE '2025-08-11' AND PARSE_DATE('%Y%m%d', SAFE_CAST(clmn0_ AS STRING)) <= DATE '2025-08-17'","Refactor these three metrics into a single, dynamic metric that utilizes relative date filtering (e.g., `DATE_TRUNC(CURRENT_DATE(), WEEK) - INTERVAL 1 WEEK` for 'last full week'). Leverage Looker Studio's built-in date range controls or parameters to allow users to select arbitrary weeks. The redundant subquery should be removed, directly referencing `event_date` for parsing.",418,56624f8b-0974-4212-b3ef-46f11233c639
all_metrics_with_hardcoded_dates,Hardcoded Logic,"All metrics within this dashboard contain hardcoded date ranges (e.g., `DATE '2025-06-23' AND DATE '2025-06-29'`). This practice makes the dashboard static and requires manual modification of the SQL for each reporting period, which is highly inefficient for a dashboard titled 'Weekly'. This severely impacts the dashboard's maintainability and scalability.",Example from multiple metrics: `t0.dw_tgt_partition_date >= DATE '2025-06-23' AND t0.dw_tgt_partition_date <= DATE '2025-06-29'` or `t0.report_date >= DATE '2025-08-10' AND t0.report_date <= DATE '2025-08-10'`,"Implement dynamic date parameters in Looker Studio (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or utilize BigQuery's date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC`, `DATE_SUB`) to automatically adjust the reporting period. This will make the dashboard truly dynamic and reduce maintenance overhead.",419,2be6f653-1c32-4515-8ede-29ea3e3eb6db
multiple_metrics_with_hardcoded_categories,Hardcoded Logic,"Several metrics hardcode specific categorical values in their WHERE clauses (e.g., `think_masthead = 'CS'`, `scenario_type = 'Budget'`, `class_lvl_1 = 'Standard Paid'`). While these may represent specific business contexts for this dashboard, hardcoding limits the reusability of these metrics for different segments or scenarios without creating duplicate metrics or modifying SQL. This reduces the flexibility and analytical depth of the dashboard.","Example from `total_additions_planning_budget_cs_consumer_weekly_20250623`: `t0.think_masthead = 'CS' AND t0.tm1_product_category = 'Consumer' AND t0.scenario_type = 'Budget'`
Example from `total_additions_activity_standard_paid_non_print_paying_think_daily_20250810`: `t0.class_lvl_1 = 'Standard Paid' AND t0.delivery_medium != 'Print' AND t0.is_paying = 'Y' AND t0.dw_source_system_code = 'THINK'`","Consider using Looker Studio parameters for these categorical filters, allowing users to dynamically select different values. For fixed sets of categories (e.g., `scenario_type`), these could be managed via a lookup table joined to the main data, or as Looker Studio parameters, enhancing flexibility and reducing hardcoding.",419,2be6f653-1c32-4515-8ede-29ea3e3eb6db
website_daily_target_monthly_20250315,Anti-Pattern / Data Type Handling,"The `website_daily_target_monthly` metric uses `PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))` to convert `targetdate` to a date. This implies that `targetdate` is not stored as a native `DATE` type in the `subscription_targets` table, but rather as an integer or string in 'YYYYMMDD' format. While functional, this conversion adds unnecessary processing overhead and can be less efficient than using native date types.","PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING))","Investigate the schema of the `subscription_targets` table. If `targetdate` is intended to represent a date, it should ideally be stored as a `DATE` type in BigQuery. If direct modification is not feasible, consider creating a BigQuery view that pre-casts this column to a `DATE` type once, simplifying downstream queries.",419,2be6f653-1c32-4515-8ede-29ea3e3eb6db
"total_additions_planning_budget_cs_consumer_weekly_20250623, total_cancels_planning_budget_cs_consumer_weekly_20250623, net_additions_planning_budget_cs_consumer_weekly_20250623",Data Quality / Defensive Coding,"The use of `SAFE_CAST` for `total_additions` and `total_cancels` columns in the `consumer_planning` table suggests that these columns may not consistently contain valid numeric data, or their source type is not strictly numeric. While `SAFE_CAST` prevents query failures by returning `NULL` for invalid conversions, it points to potential underlying data quality issues that could impact data accuracy or consistency.",SUM(SAFE_CAST(t0.total_additions AS FLOAT64)),"Investigate the data ingestion and transformation processes for the `consumer_planning` table. Ensure that `total_additions` and `total_cancels` are consistently validated and stored as appropriate numeric types (e.g., `INT64`, `BIGNUMERIC`, `FLOAT64`) at the source or during ETL. Addressing this upstream would remove the need for `SAFE_CAST` in queries and improve data reliability.",419,2be6f653-1c32-4515-8ede-29ea3e3eb6db
"dim_product, dim_product_group, dim_finance_recognition, dim_masthead_group, measure_total_subscription_count_vsub",Anti-Pattern (Duplicated Logic),"A complex `WITH base_data AS (...)` Common Table Expression (CTE) is repeated verbatim across five different metrics, including critical dimensions and a key KPI. This duplication makes maintenance extremely difficult; any change to the underlying data filtering or joining logic (e.g., the `day_name = 'Sunday'` filter or the `classification_level_1` filter) would require updating five separate metric definitions, increasing the risk of errors and inconsistencies.","WITH base_data AS (
  SELECT
    ...
  FROM
    `ncau-data-newsquery-prd`.prstn_finance.calendar_dim AS a
    JOIN
    `ncau-data-newsquery-prd`.prstn_consumer_views.v_subscription_base AS b
    ON calendar_date BETWEEN DATE(b.dw_effective_start_datetime) AND LEAST(DATE(b.dw_effective_end_datetime),
        `CURRENT_DATE`('Australia/Sydney'))
  WHERE
    day_name = 'Sunday'
    AND b.classification_level_1 IN ('Standard Paid', 'Other Paid', 'Offplatform - Paid')
)","Create a consolidated, governed view or a persistent derived table (PDT) in the data warehouse (e.g., `prstn_consumer_views.v_subscription_base_filtered_sunday`) that encapsulates this common `base_data` logic. All dependent metrics should then query this single, centralized source, ensuring consistency and simplifying maintenance.",420,cabfc5e4-47f1-4952-a8f3-4d888c5c71e
dim_product,Hardcoded Logic / Anti-Pattern,"The 'Product' dimension is defined by a deeply nested and extensive `CASE` statement that hardcodes numerous business rules and values (e.g., specific masthead codes, billing system codes, delivery schedule groups, customer segments). This makes the logic brittle, difficult to read, and highly susceptible to breakage if source data values change or new categories are introduced. It violates the principle of separating business logic from presentation/reporting layers.","CASE
  WHEN b.customer_segment_group = 'B2B' THEN b.customer_segment
  WHEN b.masthead = 'AP' THEN 'Apple Podcast: Crime X'
  WHEN b.masthead = 'CS' THEN 'Code'
  ...
  WHEN b.customer_segment_group = 'B2C' THEN
  CASE
    WHEN b.classification_level_2 = 'Essentials' THEN 'Essentials'
    WHEN b.delivery_medium_type = 'Digital' THEN 'Digital'
    ELSE CONCAT(b.delivery_medium_type, ' ',
      CASE
        WHEN b.delivery_schedule_group IN ('budgetforecast', ...) THEN b.delivery_schedule_group
        WHEN b.delivery_schedule_group IN ('Weekend (1 Day)', ...) THEN 'Weekend'
        WHEN b.delivery_schedule_group IN ('6 Days', ...) THEN '7 Day'
        ELSE NULL
      END)
  END
  WHEN b.customer_segment = 'Education' THEN b.customer_segment
  ELSE b.customer_segment
END AS Product","Implement a dedicated `product_dimension` lookup table in the data warehouse. This table should contain mappings from raw attributes (e.g., `customer_segment_group`, `masthead`, `delivery_medium_type`) to the 'Product' categories. The `dim_product` metric should then perform a simple JOIN to this lookup table, centralizing the business logic and allowing for easier updates by data governance teams without modifying SQL.",420,cabfc5e4-47f1-4952-a8f3-4d888c5c71e
dim_product_group,Hardcoded Logic / Anti-Pattern,"The 'Product Group' dimension is derived from the 'Product' dimension using another hardcoded `CASE` statement with explicit lists of 'Product' values. This duplicates the categorization logic and creates a dependency chain where changes to 'Product' categories might necessitate changes here, increasing maintenance overhead.","CASE WHEN (Product IN ('3rd Party and Others', '3rd Party and Other', 'Bundle 7 Day', ...)) THEN 'Core Consumer' WHEN (Product IN ('Campus', 'Corporate', ...)) THEN 'B2B' ELSE 'Deep Niche Products' END AS Product_Group","Extend the proposed `product_dimension` lookup table to include the 'Product Group' as an attribute, or create a separate `product_group_dimension` table that maps 'Product' to 'Product Group'. This ensures a single source of truth for product categorization hierarchies.",420,cabfc5e4-47f1-4952-a8f3-4d888c5c71e
dim_finance_recognition,Hardcoded Logic / Anti-Pattern,"The 'Finance Recognition' dimension uses a `CONCAT` function and a `CASE` statement with hardcoded combinations of `delivery_medium_type` and `subscriber_has_email_flag`. While less complex than 'Product', this still represents hardcoded business logic that should ideally reside in a governed lookup table.","CASE
  WHEN concat(delivery_medium_type, ' ', subscriber_has_email_flag) IN ('Digital Y', 'Digital N', 'Bundle Y') THEN 'Digital Subscription'
  WHEN concat(delivery_medium_type, ' ', subscriber_has_email_flag) IN ('Print Y', 'Print N', 'Bundle N') THEN 'Print Subscription'
  ELSE NULL
END AS Finance_Recognition",Create a `finance_recognition_dimension` lookup table that maps combinations of `delivery_medium_type` and `subscriber_has_email_flag` to the 'Finance Recognition' types. This centralizes the mapping logic.,420,cabfc5e4-47f1-4952-a8f3-4d888c5c71e
"dim_masthead_group, measure_agg_sunday_subscription_count_acqcan",Hardcoded Logic / Anti-Pattern (Duplicated and Inconsistent Potential),The 'Masthead Group' categorization logic is hardcoded using a `CASE WHEN` statement with specific masthead codes. This exact same logic is duplicated in two different metrics: `dim_masthead_group` (which uses `v_subscription_base`) and `measure_agg_sunday_subscription_count_acqcan` (which uses `acquisitions_cancellations_movements`). This duplication across different base tables for a high-criticality KPI creates a significant risk of inconsistency if the business rules for masthead grouping change in one place but not the other.,"CASE WHEN (masthead = 'TA') THEN 'The Australian' WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals' WHEN (masthead = 'WT') THEN 'Other Publications' WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications' WHEN (masthead IS NULL) THEN 'check' ELSE 'Exclude' END AS Masthead_Group","Create a governed `masthead_dimension` lookup table in the data warehouse that includes `Masthead Group` mappings. All metrics requiring masthead grouping should then join to this single, authoritative dimension. This ensures consistency across all reports and simplifies updates to masthead categorization.",420,cabfc5e4-47f1-4952-a8f3-4d888c5c71e
fiscal_week_label_dimension,Hardcoded Logic,"This metric uses specific hardcoded dates (`2025-06-23`, `2024-07-03`) and a hardcoded fiscal year (`2025`) within its calculation. This design makes the metric static and non-reusable for future periods without manual updates, severely limiting its general applicability for time-series analysis.","MIN(CONCAT('FY','2025',' ','Week ',SAFE_CAST(
        CASE WHEN (0 = 0) THEN (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-06-23 03:41:24.482123+00', 'Australia/Sydney'))) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 03:41:24.482123+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 03:41:24.482123+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) ELSE 0 END","Replace hardcoded dates and fiscal years with dynamic date functions (e.g., `CURRENT_DATE()`, `EXTRACT(YEAR FROM CURRENT_DATE())`) or leverage a dedicated fiscal calendar lookup table. Implement dashboard-level date parameters in Looker Studio to allow users to select the desired period.",421,ff4058c3-43f5-4324-a3ce-0c1aa455d67b
masthead_group_dimension,Hardcoded Logic,"The `masthead_group_dimension` metric, and consequently other metrics that filter by it, contain hardcoded filters for `fy_year IN (2026)` and `fy_week_of_year IN (1)`. This restricts the data to a single, specific fiscal week, making the dashboard non-dynamic and requiring manual updates for any time-series analysis.","AND t0.fy_year IN (2026)
    AND t0.fy_week_of_year IN (1)","Remove hardcoded fiscal year/week filters from the metric definition. Instead, implement these as dashboard-level filters or parameters in Looker Studio, allowing users to dynamically select the desired time period.",421,ff4058c3-43f5-4324-a3ce-0c1aa455d67b
"sold_in_source_channel_dimension, sold_in_channel_categorized_dimension, classification_level_2_categorized_dimension, masthead_group_dimension, product_type_dimension, subscription_type_dimension, total_acquisitions_by_subscription_type",Anti-Pattern,"The complex `CASE` statement logic for categorizing `masthead` (e.g., 'TA' to 'The Australian', 'CM' to 'Metro') is duplicated verbatim across almost all metrics, both in the `SELECT` clause for `masthead_group_dimension` itself and in the `WHERE` clauses of other metrics. Similar duplication exists for `classification_level_2` and `subscription_type` categorizations. This creates a significant maintenance burden; any change to these grouping rules requires updating multiple SQL queries, increasing the risk of inconsistencies and errors.","(CASE WHEN t0.masthead = 'TA' THEN 'The Australian' WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro' WHEN t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC') THEN 'Regionals' WHEN t0.masthead = 'WT' THEN 'Other Publications' WHEN t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU') THEN 'Deep Niche Publications' WHEN t0.masthead IS NULL THEN 'check' ELSE 'Exclude' END)","Create a centralized lookup table or a BigQuery view/function for common categorizations like `masthead_group`, `classification_level_2_categorized`, and `subscription_type`. This view/function should encapsulate the categorization logic, allowing other metrics to simply join to it or call the function, ensuring consistency and ease of maintenance. This would also simplify the `WHERE` clauses.",421,ff4058c3-43f5-4324-a3ce-0c1aa455d67b
product_type_dimension,Anti-Pattern,"The `product_type_dimension` metric uses deeply nested and highly complex `CASE` statements that re-evaluate `classification_level_2` and `masthead` categorizations multiple times within its own logic. This makes the SQL extremely difficult to read, understand, debug, and maintain, and is a prime example of logic duplication and excessive complexity.","SELECT
    CASE
        WHEN (
            CASE
                WHEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas' THEN 'Corporate Enterprise Activation - Qantas' WHEN t0.classification_level_2 = 'Corporate Sub' THEN 'Corporate Sub' WHEN t0.classification_level_2 IN ('Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'SMB Digital' ELSE NULL END) WHEN (CASE WHEN t0.masthead = 'TA' THEN 'The Australian' WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro' WHEN t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC') THEN 'Regionals' WHEN t0.masthead = 'WT' THEN 'Other Publications' WHEN t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU') THEN 'Deep Niche Publications' WHEN t0.masthead IS NULL THEN 'check' ELSE 'Exclude' END) = 'Deep Niche Publications' THEN (CASE WHEN t0.masthead = 'AA' THEN 'The Advertiser' WHEN t0.masthead = 'AP' THEN 'Apple Podcast: Crime X' WHEN t0.masthead = 'CM' THEN 'Courier Mail' WHEN t0.masthead = 'CP' THEN 'Cairns Post' WHEN t0.masthead = 'CS' THEN 'Code' WHEN t0.masthead = 'DT' THEN 'Daily Telegraph' WHEN t0.masthead = 'GA' THEN 'Geelong' WHEN t0.masthead = 'GC' THEN 'Gold Coast' WHEN t0.masthead = 'HS' THEN 'Herald Sun' WHEN t0.masthead = 'NT' THEN 'NT News' WHEN t0.masthead = 'NW' THEN 'News.com.au' WHEN t0.masthead = 'PU' THEN 'Punters' WHEN t0.RN = 'Racenet' THEN 'Racenet' WHEN t0.SC = 'Supercoach Plus' THEN 'Supercoach Plus' WHEN t0.TA = 'The Australian' THEN 'The Australian' WHEN t0.TB = 'Townsville' THEN 'Townsville' WHEN t0.TC = 'Toowoomba' THEN 'Toowoomba' WHEN t0.TM = 'The Mercury' THEN 'The Mercury' WHEN t0.TS = 'Taste Online' THEN 'Taste Online' WHEN t0.WT = 'Weekly Times' THEN 'Weekly Times' ELSE NULL END) WHEN t0.dw_billing_system_code = 'WINE' THEN 'Wine Club' WHEN t0.classification_level_1 = 'Offplatform - Paid' THEN '3rd Party and Other' WHEN t0.table_nm IN ('budfor_cancel', 'budfor_acq') THEN t0.budfor_product WHEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) = 'Consumer' THEN (CASE WHEN t0.classification_level_2 = 'Essentials' THEN 'Essentials' WHEN (CASE WHEN t0.delivery_medium_type = 'Not Available' THEN 'Digital' ELSE t0.delivery_medium_type END) = 'Digital' THEN 'Digital' ELSE CONCAT(SAFE_CAST((CASE WHEN t0.delivery_medium_type = 'Not Available' THEN 'Digital' ELSE t0.delivery_medium_type END) AS STRING),' ',SAFE_CAST((CASE WHEN t0.delivery_schedule_group = 'Not Available' THEN 'Only' WHEN (t0.delivery_schedule_group = 'Weekend (1 Day)' OR t0.delivery_schedule_group = 'Weekend (2 Days)') THEN 'Weekend' ELSE '7 Day' END) AS STRING)) END) WHEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) = 'Education' THEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) ELSE (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) END
                ) IN ('3rd Party and Others', '3rd Party and Other', 'Bundle 7 Day', 'Bundle 7 day and Other', 'Bundle Only', 'Bundle Weekend', 'Bundle Weekend Only', 'Digital', 'Digital Only', 'Essentials', 'Print 7 Day', 'Print 7 day and Other', 'Print Weekend', 'Print Weekend Only') THEN 'Core Consumer'
                WHEN (
                    CASE
                        WHEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas' THEN 'Corporate Enterprise Activation - Qantas' WHEN t0.classification_level_2 = 'Corporate Sub' THEN 'Corporate Sub' WHEN t0.classification_level_2 IN ('Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'SMB Digital' ELSE NULL END) WHEN (CASE WHEN t0.masthead = 'TA' THEN 'The Australian' WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro' WHEN t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC') THEN 'Regionals' WHEN t0.masthead = 'WT' THEN 'Other Publications' WHEN t0.masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU') THEN 'Deep Niche Publications' WHEN t0.masthead IS NULL THEN 'check' ELSE 'Exclude' END) = 'Deep Niche Publications' THEN (CASE WHEN t0.masthead = 'AA' THEN 'The Advertiser' WHEN t0.masthead = 'AP' THEN 'Apple Podcast: Crime X' WHEN t0.masthead = 'CM' THEN 'Courier Mail' WHEN t0.masthead = 'CP' THEN 'Cairns Post' WHEN t0.masthead = 'CS' THEN 'Code' WHEN t0.masthead = 'DT' THEN 'Daily Telegraph' WHEN t0.masthead = 'GA' THEN 'Geelong' WHEN t0.masthead = 'GC' THEN 'Gold Coast' WHEN t0.masthead = 'HS' THEN 'Herald Sun' WHEN t0.masthead = 'NT' THEN 'NT News' WHEN t0.masthead = 'NW' THEN 'News.com.au' WHEN t0.masthead = 'PU' THEN 'Punters' WHEN t0.RN = 'Racenet' THEN 'Racenet' WHEN t0.SC = 'Supercoach Plus' THEN 'Supercoach Plus' WHEN t0.TA = 'The Australian' THEN 'The Australian' WHEN t0.TB = 'Townsville' THEN 'Townsville' WHEN t0.TC = 'Toowoomba' THEN 'Toowoomba' WHEN t0.TM = 'The Mercury' THEN 'The Mercury' WHEN t0.TS = 'Taste Online' THEN 'Taste Online' WHEN t0.WT = 'Weekly Times' THEN 'Weekly Times' ELSE NULL END) WHEN t0.dw_billing_system_code = 'WINE' THEN 'Wine Club' WHEN t0.classification_level_1 = 'Offplatform - Paid' THEN '3rd Party and Other' WHEN t0.table_nm IN ('budfor_cancel', 'budfor_acq') THEN t0.budfor_product WHEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) = 'Consumer' THEN (CASE WHEN t0.classification_level_2 = 'Essentials' THEN 'Essentials' WHEN (CASE WHEN t0.delivery_medium_type = 'Not Available' THEN 'Digital' ELSE t0.delivery_medium_type END) = 'Digital' THEN 'Digital' ELSE CONCAT(SAFE_CAST((CASE WHEN t0.delivery_medium_type = 'Not Available' THEN 'Digital' ELSE t0.delivery_medium_type END) AS STRING),' ',SAFE_CAST((CASE WHEN t0.delivery_schedule_group = 'Not Available' THEN 'Only' WHEN (t0.delivery_schedule_group = 'Weekend (1 Day)' OR t0.delivery_schedule_group = 'Weekend (2 Days)') THEN 'Weekend' ELSE '7 Day' END) AS STRING)) END) WHEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) = 'Education' THEN (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) ELSE (CASE WHEN t0.classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club') THEN 'Consumer' WHEN t0.classification_level_2 IN ('Campus Activation', 'Campus Sub') THEN 'Campus' WHEN t0.classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital') THEN 'Corporate excluding IP' WHEN t0.classification_level_2 = 'Free Staff' THEN 'Staff' WHEN t0.classification_level_2 = 'IP Access' THEN 'Corporate IP' WHEN t0.classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital') THEN 'Education' ELSE NULL END) END
                ) IN ('Campus', 'Corporate', 'Corporate IP', 'Corporate excluding IP', 'IP Access', 'SMB') THEN 'B2B'
                ELSE 'Deep Niche Products'
            END AS product_type_dimension","Refactor this logic by leveraging the proposed centralized `masthead_group` and `classification_level_2_categorized` views/functions. Break down the `product_type` logic into smaller, more manageable `CASE` statements or a series of joins to lookup tables that define product type rules. Consider creating a dedicated `product_type` dimension in the underlying data model.",421,ff4058c3-43f5-4324-a3ce-0c1aa455d67b
all_metrics_with_date_filters,Hardcoded Logic,"Multiple metrics across the dashboard (e.g., 'Daily Publication Group Target', 'Daily Website Target', 'C-Score Target') use hardcoded date ranges (e.g., '2021-06-28' to '2025-05-07' for long range, '2025-05-05' to '2025-05-11' for current week, and specific FYs like FY23/FY22). This makes the metrics static and requires manual updates as time progresses, leading to stale data or broken dashboards if not regularly maintained.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2021-06-28' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-07'","Implement Looker Studio date range controls or parameters to allow users to dynamically select the desired period. For 'current week' or 'current FY' logic, use dynamic SQL functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC()`) within a single metric definition, allowing the dashboard to automatically update without manual intervention.",422,97531177-92c7-4a87-a050-5ca4ddc02025
"daily_pub_group_target_national_sports_newsroom_current_week, daily_pub_group_target_national_sports_newsroom_fy23, c_score_target_national_sports_newsroom_fy22",Hardcoded Logic,"Specific publication groups (e.g., 'National Sports Newsroom') are hardcoded within the SQL logic using `STRPOS` or direct equality. This limits the reusability of the metric and necessitates creating new metrics for each specific group, hindering scalability and increasing maintenance overhead.","STRPOS(t0.publication_group, 'National Sports Newsroom') > 0","Leverage Looker Studio filter controls or parameters for publication group selection. Define a single, more generic metric that can be filtered by the user, reducing the total number of distinct metrics required and improving flexibility.",422,97531177-92c7-4a87-a050-5ca4ddc02025
all_metrics,Anti-Pattern,"The dashboard defines multiple distinct metrics (e.g., 'Daily Publication Group Target', 'Daily Website Target', 'C-Score Target') that differ primarily by their hardcoded date range or specific filter values. This creates an anti-pattern of 'metric proliferation' where a single underlying business concept is represented by many slightly varied definitions, making the dashboard complex to manage and prone to inconsistencies.",N/A - This issue applies to the overall structure and repetition across multiple metric definitions.,"Consolidate these into fewer, more flexible metrics. For example, define a single 'Daily Publication Group Target' metric that accepts date range and publication group as parameters or dashboard filters. This would significantly reduce maintenance overhead, improve dashboard performance by reducing the number of distinct queries, and enhance user experience by providing dynamic filtering capabilities.",422,97531177-92c7-4a87-a050-5ca4ddc02025
"total_critical_jobs_monitored, updated_critical_jobs_count, not_updated_critical_jobs_count",Anti-Pattern,"The same, highly complex SQL subquery, involving multiple `UNION ALL` operations across numerous BigQuery tables and intricate filtering logic, is duplicated verbatim across three distinct metrics. This practice severely impacts maintainability, increases the likelihood of inconsistencies if logic needs to be updated, and can lead to inefficient query execution due to redundant processing.","FROM (WITH InitialResult AS (SELECT *, DATETIME(last_modified_time, ""Australia/Sydney"") AS last_modified_time_AEST, CASE WHEN alert_flag = 1 THEN ""Updated"" ELSE ""Not Updated"" END AS job_status FROM ((SELECT DETAILS.*, TIMESTAMP_MILLIS(last_modified_time) AS last_modified_time, TIMESTAMP_DIFF(`CURRENT_TIMESTAMP`(), TIMESTAMP_MILLIS(last_modified_time), MINUTE) AS time_diff FROM sdm_adobe_amp.__TABLES__ AS TAB JOIN `ncau-data-newsquery-dev.ntntemp.critical_job_details` AS DETAILS ON TAB.dataset_id = DETAILS.database_name WHERE TAB.table_id = DETAILS.table_name) UNION ALL(... many more UNION ALLs ...)))","Create a dedicated BigQuery view or a persistent derived table (PDT) that encapsulates the entire complex job monitoring logic. All three metrics should then query this single, consolidated data source. This will drastically improve maintainability, ensure consistency, and potentially optimize query performance.",423,b200db65-c2e7-4ec3-9e73-bb31875b15dc
available_platforms_count,Hardcoded Logic,"The metric uses a hardcoded string literal ('Available') to filter `platform_status`. This makes the metric brittle; if the 'Available' status name changes or new relevant statuses are introduced, the SQL logic must be manually updated.",COUNT(CASE WHEN t0.platform_status = 'Available' THEN t0.platform_name ELSE NULL END),"Consider externalizing status definitions. If 'Available' is part of a larger set of statuses, a lookup table for `platform_status` could be used. Alternatively, if the status is dynamic, a Looker Studio parameter could allow users to select statuses, or a more robust data model that includes status definitions.",423,b200db65-c2e7-4ec3-9e73-bb31875b15dc
"profisee_atlan_platform_statuses, ascend_platform_statuses",Hardcoded Logic,"These metrics rely on hardcoded string matching (`STRPOS`) for specific platform names ('Profisee', 'Atlan', 'Ascend'). This approach is not scalable; adding new platforms or renaming existing ones requires direct modification of the SQL, increasing maintenance overhead and risk of error.","(STRPOS(t0.platform_name, 'Profisee') > 0 OR STRPOS(t0.platform_name, 'Atlan') > 0)","Implement a platform dimension table or a configuration table that lists all relevant platforms and their associated properties (e.g., `is_critical_platform`, `platform_group`). Join to this table to filter platforms, providing a more flexible and maintainable solution.",423,b200db65-c2e7-4ec3-9e73-bb31875b15dc
total_day_target_website_the_australian_weekly,Hardcoded Logic,"The metric's SQL logic hardcodes a specific date range (2022-11-28 to 2023-04-23). This makes the dashboard static and requires manual updates for current data, severely limiting its utility for ongoing analysis and increasing maintenance burden.","WHERE
    PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2022-11-28'
    AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2023-04-23'","Replace hardcoded dates with dynamic date parameters (e.g., Looker Studio date range controls) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`) to allow users to select their desired period. This would transform the dashboard from a static snapshot to a dynamic reporting tool.",424,e6db873d-657f-40e8-87a0-007d41f68a55
total_day_target_website_the_australian_weekly,Hardcoded Logic,"The metric's SQL logic hardcodes the `website` filter to 'The Australian'. This makes the metric non-reusable for other websites and necessitates creating separate metrics or dashboards for each website, hindering consolidation and leading to redundant development efforts.",AND SAFE_CAST(t0.website AS STRING) = 'The Australian',"Introduce a parameter or filter for the 'website' dimension in the Looker Studio dashboard, allowing users to select or compare different websites within a single, generalized metric. This would enable a single dashboard to serve multiple website analyses.",424,e6db873d-657f-40e8-87a0-007d41f68a55
N/A (applies to all metrics from v_subscription_movement),Anti-Pattern,"All metrics derived from `v_subscription_movement` (e.g., 'Total Subscriptions (Movement)', 'Subscriptions: BAU Always On Digital') repeat the exact same extensive WHERE clause for filtering mastheads, subscription types, corporate flags, delivery medium, start date, classification levels, and fiscal year. This creates significant maintenance overhead and risk of inconsistency.","WHERE SAFE_CAST(masthead AS STRING) IN ('CP', 'GA', 'GC', 'NT', 'TB', 'TC', 'TM') AND (SAFE_CAST(subscription_movement_count_sub_type AS STRING) = 'acquisition' OR SAFE_CAST(subscription_movement_count_sub_type AS STRING) = 'reactivation_30day_acquisition' OR SAFE_CAST(subscription_movement_count_sub_type AS STRING) = 'switch_acquisition') AND SAFE_CAST(is_corporate_b2b_flag AS STRING) = 'N' AND SAFE_CAST(delivery_medium_type AS STRING) != 'Print' AND SAFE_CAST(subscription_tenure_start_datetime AS DATE) >= DATE(""2023-07-03"") AND SAFE_CAST(classification_level_2 AS STRING) != 'University Digital' AND SAFE_CAST(classification_level_2 AS STRING) != 'Metered Access' AND SAFE_CAST(classification_level_1 AS STRING) != 'Free Trials' AND SAFE_CAST(fy_year AS INT64) = 2024","Centralize common filtering logic by creating a dedicated BigQuery view (e.g., `v_fy24_marketing_subscriptions`) that encapsulates these base filters. All dashboard metrics should then query this consolidated view. Consider using BigQuery parameters or Looker Studio parameters for dynamic fiscal year and date range selection instead of hardcoding.",425,f66cffd5-1632-45cb-a645-f5c18f7b730e
N/A (applies to all metrics from campaign_performance_consol),Anti-Pattern,"All metrics derived from `campaign_performance_consol` (e.g., 'Total Subscriptions (Campaign)', 'Total Spend') repeat the exact same WHERE clause for filtering masthead codes, campaign name patterns, date, and fiscal year. This mirrors the issue found in `v_subscription_movement` metrics.","WHERE SAFE_CAST(masthead_code AS STRING) IN ('GA', 'GC', 'NT', 'TM', 'TB', 'CP', 'TC') AND SAFE_CAST(campaign_name AS STRING) LIKE 'AOD%' AND SAFE_CAST(date AS DATE) >= DATE('2023-07-03') AND SAFE_CAST(fy_year AS STRING) = 'FY24'","Similar to the `v_subscription_movement` metrics, create a consolidated BigQuery view (e.g., `v_fy24_campaign_performance`) to centralize these filters. This improves maintainability and ensures consistent application of base filters across all campaign-related metrics.",425,f66cffd5-1632-45cb-a645-f5c18f7b730e
subscriptions_other_channels,Hardcoded Logic,The 'Subscriptions: Other Channels' metric defines 'other' by explicitly excluding a hardcoded list of known channels. This approach is fragile; any new channel or change in naming convention will require manual updates to this metric and potentially others.,"SAFE_CAST(sold_in_channel AS STRING) NOT IN ('Bau Always On Digital', 'Premium Breach', 'Bau General Offer', 'Connect')","Implement a governed dimension table for `sold_in_channel` that includes a 'channel_group' or 'channel_category' attribute. This allows for dynamic categorization (e.g., 'Other' can be defined by channels not explicitly assigned to a specific group) and easier maintenance without modifying SQL logic.",425,f66cffd5-1632-45cb-a645-f5c18f7b730e
subscriptions_source_other_bau,Hardcoded Logic,"The 'Subscriptions: Other BAU Source' metric defines 'other' by explicitly excluding a very long, hardcoded list of known source channels. This is highly prone to errors and difficult to maintain as new sources emerge or existing ones are renamed.","SAFE_CAST(sold_in_source_channel AS STRING) NOT IN ('External Display', 'Facebook - Content Amplification', 'Sem', 'General Online', 'Facebook', 'Microsoft Ads Bing - Creative', 'Google - Performance Max', 'Google - Content Amplification', 'Rokt - Creative', 'LinkedIn - Creative Centre', 'Microsoft Ads - Pmax', 'Reddit - Creative', 'Reddit - Content Amplification', 'Not Available')","Create a governed dimension table for `sold_in_source_channel` with a 'source_category' attribute. This enables a more flexible and maintainable way to group and define 'other' sources, reducing the need for hardcoded `NOT IN` lists in metric definitions.",425,f66cffd5-1632-45cb-a645-f5c18f7b730e
N/A (general observation),Anti-Pattern,"Many metrics use `COUNT(CASE WHEN condition THEN 1 END)` to count specific subsets. While functional, this pattern, especially when combined with hardcoded values, can be less readable and maintainable than alternative approaches like pre-filtering in views or using a more robust data model with dimension tables.",COUNT(CASE WHEN SAFE_CAST(sold_in_channel AS STRING) = 'Bau Always On Digital' AND SAFE_CAST(offer_category_group_name AS STRING) != 'Non Consumer Offer' THEN 1 END),"For complex categorizations, consider pushing the logic upstream into the data warehouse using dedicated views or materialized views that pre-categorize data. This can improve query performance and simplify metric definitions in Looker Studio. Alternatively, if the categories are fixed, a `GROUP BY` on the relevant dimension (e.g., `sold_in_channel`) combined with a filter in Looker Studio might be more efficient.",425,f66cffd5-1632-45cb-a645-f5c18f7b730e
N/A (general observation),Data Mismatch,"The pervasive use of `SAFE_CAST` for almost every column in the WHERE clauses and SELECT statements (e.g., `SAFE_CAST(masthead AS STRING)`, `SAFE_CAST(subscriptions AS BIGNUMERIC)`) suggests potential underlying data type inconsistencies or a lack of confidence in the source table's schema. While `SAFE_CAST` prevents query failures, it can mask data quality issues.",SAFE_CAST(masthead AS STRING),"Conduct a thorough review of the `v_subscription_movement` and `campaign_performance_consol` table schemas. Ensure that data types are correctly defined and consistently enforced at the source. If casting is truly necessary due to mixed types, document the reasons and consider data cleansing or transformation steps upstream to standardize types.",425,f66cffd5-1632-45cb-a645-f5c18f7b730e
total_subscriber_count_daily_base,Anti-Pattern,"Common filtering logic for 'subscriber' member type, 'Consumer' customer type, and 'CM' masthead is repeated across all three metrics. While consistent, this hardcoded repetition makes maintenance cumbersome and error-prone if the definition of a 'Courier-Mail Consumer Subscriber' needs to evolve.","WHERE SAFE_CAST(t0.member_type AS STRING) = 'subscriber' AND STRPOS(SAFE_CAST(t0.combined_customer_type AS STRING), 'Consumer') > 0 AND STRPOS(SAFE_CAST(t0.combined_masthead AS STRING), 'CM') > 0","Encapsulate common filtering logic in a shared view or a dbt model. Alternatively, define these attributes as standard dimensions in a semantic layer (e.g., LookML) to promote reusability and single source of truth.",426,b084f975-486d-4a17-af39-3c20dd915f63
active_weekly_subscriber_count_daily_base,Hardcoded Logic,The definition of 'active' (4 weeks out of the last 28 days) is hardcoded directly within the SQL query using a CASE statement. This makes the definition inflexible and difficult to manage if the business definition of 'active' changes or if this logic needs to be applied to other metrics.,SUM(CASE WHEN SAFE_CAST(t0.subscriber_last_28_days_active_weeks_count AS INT64) = 4 THEN SAFE_CAST(t0.subscriber_count AS INT64) ELSE 0 END),"Define 'active' as a derived boolean flag or a separate metric in a semantic layer. If applicable, pre-calculate this status in the underlying data model to improve query performance and reusability.",426,b084f975-486d-4a17-af39-3c20dd915f63
total_active_subscriber_count_agg_base,Hardcoded Logic,"The exclusion of 'Not Available' and 'f' gender entries is hardcoded in the SQL query. This specific filtering might be business-driven but is embedded directly, making it less adaptable if gender categorization changes or if these exclusions need to be applied inconsistently.",SAFE_CAST(t0.subscriber_individual_gender AS STRING) != 'Not Available' AND SAFE_CAST(t0.subscriber_individual_gender AS STRING) != 'f',"Consider defining standard gender categories and exclusions in a lookup table or a data quality rule. If 'f' represents 'female' and is being excluded, this warrants a business review to understand the rationale and potential data bias.",426,b084f975-486d-4a17-af39-3c20dd915f63
paying_consumer_subscriber_count_by_source_referrer_and_count_range,Hardcoded Logic,"This metric's SQL logic contains hardcoded lists for `subscriber_count` ranges (1-10) and specific `sold_in_source_referrer` values. This approach is inflexible, requiring manual updates whenever business definitions for subscriber count ranges change or new source referrers emerge. It also assumes a static and exhaustive list of referrers, which is rarely the case in dynamic business environments.","t0.subscriber_count IN (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) AND t0_subscription_detail.sold_in_source_referrer IN ('Not Available', 'Google', 'Facebook', 'Google AMP', 'Newsletter', 'Twitter', 'News.com.au', 'LinkedIn', 'Reddit', 'Facebook Messenger Bot')","For `sold_in_source_referrer`, implement a governed lookup table in BigQuery and join to it, allowing for dynamic updates and centralized management of valid source referrers. For `subscriber_count` ranges, consider defining these ranges as parameters within Looker Studio or as a configuration in the underlying data model to allow for more flexible analysis without modifying SQL.",427,50bcb0d7-8e55-40a5-817c-2770ca32256a
daily_active_consumer_subscriber_count,Anti-Pattern,"The `customer_type` filter uses a partial string match (`STRPOS`) instead of an exact equality check (`=`). While functional, this can be less precise and potentially lead to unintended matches if `customer_type` values are not strictly controlled (e.g., 'SuperConsumer' matching 'Consumer'). This also creates an inconsistency with other metrics that use an exact match for 'Consumer'.","STRPOS(t0_subscription_detail.customer_type, 'Consumer') > 0","If 'Consumer' is intended to be an exact category, change the filter to `t0_subscription_detail.customer_type = 'Consumer'` for precision and consistency across the dashboard. If `customer_type` can genuinely contain multiple values, consider a more robust parsing mechanism or a dedicated dimension for primary customer type.",427,50bcb0d7-8e55-40a5-817c-2770ca32256a
report_date_for_combined_consumer_subscribers,Data Mismatch,"This metric's SQL logic uses `t0.combined_customer_type` for filtering, whereas other consumer-related metrics (e.g., `report_date_for_paying_consumer_subscribers`, `daily_active_consumer_subscriber_count`) rely on `t0_subscription_detail.customer_type`. This inconsistency in the source field for the 'customer type' concept can lead to differing results and confusion, even if both fields are intended to represent similar data. It violates the principle of a single source of truth.","STRPOS(t0.combined_customer_type, 'Consumer') > 0","Harmonize the definition and source field for 'customer type' across all metrics. If `combined_customer_type` and `customer_type` are truly distinct concepts, their usage should be clearly documented and justified. Ideally, a single, authoritative source for customer type should be established and used consistently.",427,50bcb0d7-8e55-40a5-817c-2770ca32256a
report_date_for_combined_consumer_subscribers,Anti-Pattern,"Similar to `daily_active_consumer_subscriber_count`, this metric uses a partial string match (`STRPOS`) for `combined_customer_type`. This introduces the same precision and consistency concerns as noted for the `daily_active_consumer_subscriber_count` metric.","STRPOS(t0.combined_customer_type, 'Consumer') > 0","If 'Consumer' is an exact category, change to `t0.combined_customer_type = 'Consumer'` for precision. If `combined_customer_type` can contain multiple values, consider a more robust parsing or a dedicated dimension for primary customer type.",427,50bcb0d7-8e55-40a5-817c-2770ca32256a
new_subscribers_count,Data Type Consistency (Minor),"The metric relies on a string-based flag ('Yes'/'No') for boolean logic, which is then `SAFE_CAST` to an INT64. While functional, storing boolean values as actual boolean types or integers (0/1) can improve data consistency and reduce the need for explicit string comparisons and casting in downstream queries.",SUM(SAFE_CAST(CASE WHEN t0.new_subscriber_flag = 'Yes' THEN 1 ELSE 0 END AS INT64)),Consider standardizing boolean flags to native boolean types or integer (0/1) representation at the data source level to simplify SQL logic and improve type safety.,428,5c2ab8ff-72ab-4387-bbb9-f29746fc7985
existing_subscribers_count,Data Type Consistency (Minor),"The metric relies on a string-based flag ('Yes'/'No') for boolean logic, which is then `SAFE_CAST` to an INT64. While functional, storing boolean values as actual boolean types or integers (0/1) can improve data consistency and reduce the need for explicit string comparisons and casting in downstream queries.",SUM(SAFE_CAST(CASE WHEN t0.existing_subscriber_flag = 'Yes' THEN 1 ELSE 0 END AS INT64)),Consider standardizing boolean flags to native boolean types or integer (0/1) representation at the data source level to simplify SQL logic and improve type safety.,428,5c2ab8ff-72ab-4387-bbb9-f29746fc7985
cancelled_subscribers_count,Data Type Consistency (Minor),"The metric relies on a string-based flag ('Yes'/'No') for boolean logic, which is then `SAFE_CAST` to an INT64. While functional, storing boolean values as actual boolean types or integers (0/1) can improve data consistency and reduce the need for explicit string comparisons and casting in downstream queries.",SUM(SAFE_CAST(CASE WHEN t0.cancelled_subscriber_flag = 'Yes' THEN 1 ELSE 0 END AS INT64)),Consider standardizing boolean flags to native boolean types or integer (0/1) representation at the data source level to simplify SQL logic and improve type safety.,428,5c2ab8ff-72ab-4387-bbb9-f29746fc7985
"total_returns_volume_2025, total_draw_volume_2025, total_volume_draw_returns_adjustment_2025",Hardcoded Logic / Anti-Pattern,"Multiple metrics (`Total Returns Volume`, `Total Draw Volume`, `Total Volume (Draw + Returns + Adjustment)`) use hardcoded `CASE` statements to filter `route_volume` based on specific `charge_type` values ('RETURNS', 'DRAW', 'ADJUSTMENT'). This leads to repetitive SQL logic and makes the dashboard inflexible to changes in charge types or the addition of new categories. It also complicates maintenance if the business definitions of these charge types evolve.","SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'RETURNS' THEN t0.route_volume ELSE 0 END)
SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'DRAW' THEN t0.route_volume ELSE 0 END)
SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) IN ('DRAW', 'RETURNS', 'ADJUSTMENT') THEN t0.route_volume ELSE 0 END)","Consider defining `charge_type` categories and their aggregations within a data modeling layer (e.g., LookML, dbt) or a consolidated view. Alternatively, if the dashboard allows, define a single `route_volume` metric and apply filters for `charge_type` at the visualization layer. For fixed categories, a pre-aggregated view could simplify queries.",429,c441950c-1e3f-432c-9838-847d1d315b9e
"total_returns_volume_2025, total_draw_volume_2025, total_volume_draw_returns_adjustment_2025, total_charge_amount_2025",Hardcoded Logic,"All metrics are hardcoded to filter data for `fiscal year 2025` using `SAFE_CAST(LEFT(SAFE_CAST(t0.fiscal_week_id AS STRING), 4) AS INT64) = 2025;`. This means the dashboard will become outdated after FY2025 and will require manual updates to each metric's SQL for subsequent fiscal years, posing a significant maintenance burden.","WHERE SAFE_CAST(LEFT(SAFE_CAST(t0.fiscal_week_id AS STRING), 4) AS INT64) = 2025;","Implement a dynamic fiscal year filter. This could involve using a Looker Studio parameter for user selection, a data model variable that automatically updates to the current fiscal year, or a relative date calculation based on `CURRENT_DATE()` within the underlying view or metric definition.",429,c441950c-1e3f-432c-9838-847d1d315b9e
"total_returns_volume_2025, total_draw_volume_2025, total_volume_draw_returns_adjustment_2025, total_charge_amount_2025",Anti-Pattern / Unused Join,"All metric SQL queries include a `LEFT JOIN` to `v_calendar_dim` (`prstn_finance.v_calendar_dim`) on `charge_date`, but the `cal` alias from this join is not utilized in the `SELECT` clause or `WHERE` clause for filtering. This unnecessary join adds overhead to the query execution without contributing to the result, potentially impacting performance.",LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON t0.charge_date = cal.calendar_date,"Remove the unused `LEFT JOIN` to `v_calendar_dim`. If the calendar dimension is intended for future use (e.g., for fiscal year filtering or other date-based aggregations), ensure its fields are actively used in the query or consider integrating fiscal year logic directly into the `v_asl_circualtion_insights` view if appropriate.",429,c441950c-1e3f-432c-9838-847d1d315b9e
"earned_amount_fy25_wk42_subsnapfact, nfearned_amount_fy24_wk42_nfmanualhist, forecast_budget_earned_amount_fy25_wk42",Anti-Pattern,"The SQL for all three metrics is extremely deeply nested (over 10 levels of subqueries) and uses generic, auto-generated column names (e.g., `clmn175_`, `clmn106_`). This structure severely impacts readability, maintainability, and debugging efforts. It strongly suggests the SQL was generated by a visual query builder without subsequent optimization or abstraction, or is a result of poor data modeling.","SELECT SUM(clmn175_) AS earned_amount_fy25_wk42_subsnapfact FROM (
SELECT CASE WHEN (2 = 1) THEN clmn173_ WHEN (2 = 2) THEN clmn174_ WHEN (2 = 3) THEN clmn170_ WHEN (2 = 4) THEN clmn172_ ELSE NULL END AS clmn176_, clmn170_, clmn175_, clmn148_, clmn156_, clmn109_ FROM (
SELECT CASE WHEN (clmn171_ AND clmn23_) THEN clmn107_ WHEN (clmn171_ AND clmn24_) THEN clmn4_ ELSE NULL END AS clmn174_, CASE WHEN (clmn29_ AND clmn171_) THEN clmn107_ ELSE NULL END AS clmn175_, clmn172_, clmn173_, clmn170_, clmn148_, clmn156_, clmn109_ FROM (
SELECT CASE WHEN (clmn168_ = true) THEN clmn107_ ELSE 0 END AS clmn170_, (clmn169_ = true) AS clmn171_, CASE WHEN (clmn169_ = true) THEN clmn6_ ELSE 0 END AS clmn172_, CASE WHEN (clmn169_ = true) THEN clmn0_ ELSE 0 END AS clmn173_, clmn23_, clmn24_, clmn29_, clmn4_, clmn107_, clmn148_, clmn156_, clmn109_ FROM (
SELECT CASE WHEN (1 = 1) THEN clmn157_ WHEN (1 = 2) THEN clmn166_ WHEN (1 = 3) THEN clmn164_ WHEN (1 = 4) THEN clmn159_ ELSE NULL END AS clmn168_, CASE WHEN (1 = 1) THEN clmn158_ WHEN (1 = 2) THEN clmn167_ WHEN (1 = 3) THEN clmn165_ WHEN (1 = 4) THEN clmn160_ ELSE NULL END AS clmn169_, clmn0_, clmn23_, clmn24_, clmn29_, clmn4_, clmn6_, clmn107_, clmn148_, clmn156_, clmn109_ FROM (
SELECT (clmn161_ AND clmn152_ AND clmn28_) AS clmn164_, (clmn161_ AND clmn153_ AND clmn27_) AS clmn165_, (clmn162_ AND clmn152_ AND clmn28_) AS clmn166_, (clmn163_ AND clmn153_ AND clmn27_) AS clmn167_, clmn0_, clmn23_, clmn160_, clmn24_, clmn159_, clmn158_, clmn157_, clmn29_, clmn4_, clmn6_, clmn107_, clmn148_, clmn156_, clmn109_ FROM (
SELECT (clmn150_ AND clmn28_) AS clmn157_, (clmn151_ AND clmn27_) AS clmn158_, (clmn152_ AND clmn28_) AS clmn159_, (clmn153_ AND clmn27_) AS clmn160_, (clmn154_ = clmn11_) AS clmn161_, (clmn155_ = clmn10_) AS clmn162_, (clmn155_ = clmn10_) AS clmn163_, clmn0_, clmn23_, clmn24_, clmn152_, clmn27_, clmn28_, clmn29_, clmn153_, clmn4_, clmn6_, clmn107_, clmn148_, clmn156_, clmn109_ FROM (
SELECT (clmn147_ = clmn12_) AS clmn150_, (clmn147_ = clmn12_) AS clmn151_, (clmn12_ <= clmn147_) AS clmn152_, (clmn12_ <= clmn147_) AS clmn153_, CASE WHEN (clmn147_ <= 13) THEN 1 WHEN (clmn147_ <= 26) THEN 2 WHEN (clmn147_ <= 39) THEN 3 WHEN (clmn147_ <= 53) THEN 4 ELSE NULL END AS clmn154_, CASE WHEN (clmn147_ <= 4) THEN 1 WHEN (clmn147_ <= 9) THEN 2 WHEN (clmn147_ <= 13) THEN 3 WHEN (clmn147_ <= 17) THEN 4 WHEN (clmn147_ <= 22) THEN 5 WHEN (clmn147_ <= 26) THEN 6 WHEN (clmn147_ <= 30) THEN 7 WHEN (clmn147_ <= 35) THEN 8 WHEN (clmn147_ <= 39) THEN 9 WHEN (clmn147_ <= 43) THEN 10 WHEN (clmn147_ <= 48) THEN 11 WHEN (clmn147_ <= 53) THEN 12 ELSE NULL END AS clmn155_, CASE WHEN ('All Mastheads' = 'All Mastheads') THEN true WHEN ('All Mastheads' = clmn149_) THEN true ELSE NULL END AS clmn156_, clmn0_, clmn23_, clmn24_, clmn27_, clmn28_, clmn29_, clmn4_, clmn6_, clmn107_, clmn10_, clmn11_, clmn148_, clmn109_ FROM (
SELECT CASE WHEN (0 = 0) THEN clmn108_ ELSE 0 END AS clmn147_, CASE WHEN (clmn106_ = 'The Australian') THEN 'The Australian' WHEN (clmn142_ OR clmn134_ OR clmn123_ OR clmn135_) THEN 'Metros' WHEN (clmn139_ OR clmn125_ OR clmn140_ OR clmn143_ OR clmn128_ OR clmn124_ OR clmn120_) THEN 'Regionals' WHEN (clmn106_ = 'Weekly Times') THEN 'Others' WHEN (clmn119_ OR clmn121_ OR clmn145_ OR clmn144_ OR clmn117_ OR clmn131_ OR clmn118_) THEN 'Deep Niche Publications' ELSE 'Discontinued' END AS clmn148_, CASE WHEN (clmn129_ OR clmn49_ OR clmn72_) THEN 'The Australian and Prestige' WHEN (clmn116_ OR clmn112_ OR clmn136_ OR clmn130_ OR clmn113_ OR clmn126_ OR clmn146_ OR clmn110_ OR clmn141_ OR clmn132_ OR clmn138_ OR clmn115_ OR clmn122_ OR clmn111_ OR clmn137_ OR clmn78_ OR clmn33_) THEN 'States & Community' WHEN (clmn127_ OR clmn133_) THEN 'Commercial Content' WHEN (clmn114_ OR clmn69_) THEN 'Free & Lifestyle' ELSE 'Discontinued' END AS clmn149_, clmn0_, clmn23_, clmn24_, clmn27_, clmn28_, clmn29_, clmn4_, clmn6_, clmn107_, clmn10_, clmn11_, clmn12_, clmn109_ FROM (
SELECT CASE WHEN (clmn18_ <= 2) THEN clmn104_ ELSE clmn19_ END AS clmn108_, CASE WHEN (clmn9_ = 'Print') THEN 'Print Recognition' WHEN (clmn105_ = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END AS clmn109_, (clmn106_ = 'NT News') AS clmn110_, (clmn106_ = 'Code') AS clmn111_, (clmn106_ = 'Daily Telegraph') AS clmn112_, (clmn106_ = 'Cairns Post') AS clmn113_, (clmn106_ = 'Taste Online') AS clmn114_, (clmn106_ = 'Weekly Times') AS clmn115_, (clmn106_ = 'Courier Mail') AS clmn116_, (clmn106_ = 'Racenet') AS clmn117_, (clmn106_ = 'Others') AS clmn118_, (clmn106_ = 'Supercoach Plus') AS clmn119_, (clmn106_ = 'Townsville') AS clmn120_, (clmn106_ = 'Code') AS clmn121_, (clmn106_ = 'Supercoach Plus') AS clmn122_, (clmn106_ = 'Herald Sun') AS clmn123_, (clmn106_ = 'Toowoomba') AS clmn124_, (clmn106_ = 'Geelong') AS clmn125_, (clmn106_ = 'Geelong') AS clmn126_, (clmn106_ = 'Racenet') AS clmn127_, (clmn106_ = 'The Mercury') AS clmn128_, (clmn106_ = 'The Australian') AS clmn129_, (clmn106_ = 'The Advertiser') AS clmn130_, (clmn106_ = 'Punters') AS clmn131_, (clmn106_ = 'Toowoomba') AS clmn132_, (clmn106_ = 'Punters') AS clmn133_, (clmn106_ = 'Daily Telegraph') AS clmn134_, (clmn106_ = 'The Advertiser') AS clmn135_, (clmn106_ = 'Herald Sun') AS clmn136_, (clmn106_ = 'Apple Podcast: Crime X') AS clmn137_, (clmn106_ = 'Townsville') AS clmn138_, (clmn106_ = 'Cairns Post') AS clmn139_, (clmn106_ = 'Gold Coast') AS clmn140_, (clmn106_ = 'The Mercury') AS clmn141_, (clmn106_ = 'Courier Mail') AS clmn142_, (clmn106_ = 'NT News') AS clmn143_, (clmn106_ = 'Apple Podcast: Crime X') AS clmn144_, (clmn106_ = 'Taste Online') AS clmn145_, (clmn106_ = 'Gold Coast') AS clmn146_, clmn0_, clmn23_, clmn33_, clmn49_, clmn24_, clmn27_, clmn28_, clmn69_, clmn72_, clmn29_, clmn78_, clmn4_, clmn6_, clmn107_, clmn106_, clmn10_, clmn11_, clmn12_ FROM (
SELECT (clmn19_-1) AS clmn104_, CASE WHEN (clmn16_ = 'subsnapfact') THEN 'Y' WHEN (clmn20_ AND clmn22_) THEN clmn16_ ELSE 'Y' END AS clmn105_, CASE WHEN (clmn58_ OR clmn35_ OR clmn87_) THEN 'The Australian' WHEN (clmn56_ OR clmn46_ OR clmn36_ OR clmn84_) THEN 'Courier Mail' WHEN (clmn43_ OR clmn59_ OR clmn32_ OR clmn85_) THEN 'Daily Telegraph' WHEN (clmn37_ OR clmn73_ OR clmn63_ OR clmn100_) THEN 'Herald Sun' WHEN (clmn68_ OR clmn42_ OR clmn80_ OR clmn90_) THEN 'The Advertiser' WHEN (clmn67_ OR clmn52_ OR clmn94_) THEN 'Cairns Post' WHEN (clmn79_ OR clmn74_ OR clmn101_) THEN 'Geelong' WHEN (clmn38_ OR clmn66_ OR clmn97_) THEN 'Gold Coast' WHEN (clmn57_ OR clmn76_ OR clmn30_ OR clmn82_) THEN 'NT News' WHEN (clmn64_ OR clmn54_ OR clmn71_ OR clmn92_) THEN 'The Mercury' WHEN (clmn41_ OR clmn55_ OR clmn98_) THEN 'Toowoomba' WHEN (clmn53_ OR clmn77_ OR clmn93_) THEN 'Townsville' WHEN (clmn39_ OR clmn60_ OR clmn99_) THEN 'Weekly Times' WHEN (clmn70_ OR clmn96_) THEN 'Code' WHEN (clmn75_ OR clmn62_ OR clmn91_) THEN 'Punters' WHEN (clmn31_ OR clmn65_ OR clmn95_) THEN 'Racenet' WHEN (clmn34_ OR clmn83_) THEN 'Supercoach Plus' WHEN (clmn51_ OR clmn88_) THEN 'Taste Online' WHEN (clmn44_ OR clmn81_) THEN 'Apple Podcast: Crime X' WHEN (clmn40_ OR clmn21_) THEN 'The Oz' WHEN (clmn45_ OR clmn89_) THEN 'news.com.au' WHEN (clmn14_ = '121') THEN 'Others' WHEN (clmn61_ OR clmn86_) THEN 'Brain Games' WHEN (clmn33_ OR clmn69_ OR clmn49_ OR clmn48_ OR clmn72_ OR clmn47_ OR clmn50_) THEN 'Others' WHEN (clmn14_ = '9644') THEN 'Suddenly' WHEN (clmn14_ = '9903') THEN 'News Corporate' WHEN (clmn14_ = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital' ELSE NULL END AS clmn106_, CASE WHEN (clmn25_ AND clmn102_) THEN clmn5_ WHEN (clmn26_ AND clmn103_) THEN clmn3_ ELSE NULL END AS clmn107_, clmn0_, clmn23_, clmn18_, clmn33_, clmn19_, clmn49_, clmn24_, clmn27_, clmn28_, clmn69_, clmn72_, clmn29_, clmn78_, clmn4_, clmn6_, clmn9_, clmn10_, clmn11_, clmn12_ FROM (
SELECT t0.BudgetEarnedAmount AS clmn0_, DATE(TIMESTAMP '2025-04-24 03:55:34.959250+00', 'Australia/Sydney') AS clmn1_, (2025-1) AS clmn2_, t0.EarnedAmount AS clmn3_, t0.ForecastBudgetEarnedAmount AS clmn4_, t0.NFEarnedAmount AS clmn5_, t0.NYBudgetEarnedAmount AS clmn6_, t0.classification_level_1_description AS clmn7_, t0.classification_level_2_description AS clmn8_, t0.delivery_medium_type AS clmn9_, t0.fy_month_of_year AS clmn10_, t0.fy_quarter_of_year AS clmn11_, t0.fy_week_of_year AS clmn12_, t0.fy_year AS clmn13_, t0.gl_publication_code AS clmn14_, t0.masthead_code AS clmn15_, t0.subscriber_has_email_flag AS clmn16_, t0.table_union_source AS clmn17_ FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
)
)
)
)
)
)
)
)
)
)
)
) WHERE (clmn109_ = 'Digital Recognition' AND clmn156_ = true AND clmn148_ != 'Discontinued') LIMIT 1","Refactor the SQL using Common Table Expressions (CTEs) with descriptive aliases for each subquery and column. This will significantly improve readability and maintainability. Ideally, push this complex logic upstream into a well-modeled data warehouse layer (e.g., a dbt model or a BigQuery view) to provide a clean, pre-calculated base table for Looker Studio.",430,449b9707-f939-42e1-b6f5-11998369f473
"earned_amount_fy25_wk42_subsnapfact, nfearned_amount_fy24_wk42_nfmanualhist, forecast_budget_earned_amount_fy25_wk42",Hardcoded Logic,"Extensive `CASE` statements are used to categorize mastheads/publications into various groups (e.g., `clmn106_` for masthead names, `clmn148_` for 'Metros', 'Regionals', etc., and `clmn149_` for 'The Australian and Prestige', 'States & Community', etc.). This hardcoding is highly inflexible, error-prone, and difficult to maintain. Any changes to masthead names or group definitions require manual updates across all affected metrics.",CASE WHEN (clmn106_ = 'The Australian') THEN 'The Australian' WHEN (clmn142_ OR clmn134_ OR clmn123_ OR clmn135_) THEN 'Metros' ... ELSE 'Discontinued' END AS clmn148_,"Implement a dedicated `masthead_dimension` or `publication_lookup` table in the data warehouse. This table should contain `masthead_code`, `masthead_name`, and all relevant categorization attributes (e.g., `masthead_group_1`, `masthead_group_2`). The `digital_subscriptions` table should then join to this dimension table, replacing the complex `CASE` statements with simple joins and column selections.",430,449b9707-f939-42e1-b6f5-11998369f473
"earned_amount_fy25_wk42_subsnapfact, nfearned_amount_fy24_wk42_nfmanualhist, forecast_budget_earned_amount_fy25_wk42",Hardcoded Logic,Fiscal calendar logic (mapping weeks to quarters and months via `clmn154_` and `clmn155_`) is hardcoded within `CASE` statements. This approach is brittle and requires manual updates if fiscal year definitions or week-to-month/quarter mappings change.,CASE WHEN (clmn147_ <= 13) THEN 1 WHEN (clmn147_ <= 26) THEN 2 WHEN (clmn147_ <= 39) THEN 3 WHEN (clmn147_ <= 53) THEN 4 ELSE NULL END AS clmn154_,"Create a comprehensive `date_dimension` table that includes all necessary date attributes, such as `date`, `fiscal_year`, `fiscal_quarter`, `fiscal_week`, `fiscal_month`, etc. This table should be joined to the `digital_subscriptions` table, allowing for flexible and accurate date-based filtering and aggregations without hardcoded logic.",430,449b9707-f939-42e1-b6f5-11998369f473
"earned_amount_fy25_wk42_subsnapfact, nfearned_amount_fy24_wk42_nfmanualhist, forecast_budget_earned_amount_fy25_wk42",Anti-Pattern,"All three metrics include a `LIMIT 1` clause at the very end of the SQL query, after the `SUM` aggregation. For a single aggregated value, this clause is redundant and serves no functional purpose. While harmless in this specific context (as `SUM` already produces a single row), it indicates a potential copy-paste error or a lack of understanding of SQL aggregation behavior.",) LIMIT 1,"Remove the `LIMIT 1` clause from these aggregation queries, as it is unnecessary and can be misleading.",430,449b9707-f939-42e1-b6f5-11998369f473
total_day_target_by_publication_group_by_website_and_group_q1,Hardcoded Logic,"This metric, along with several others, uses hardcoded date ranges in its WHERE clause (e.g., June 9-15, 2025). This practice creates redundant metrics for different time periods, making the dashboard inflexible for dynamic date analysis and increasing maintenance burden as new periods require new metric definitions.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-06-09' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-06-15'","Consolidate these metrics into a single, generic 'Total Daily Target' metric. Leverage Looker Studio's built-in date range controls to allow users to dynamically select the reporting period. Consider using BigQuery's `_PARTITIONTIME` or `CURRENT_DATE()` functions for relative date filtering if applicable.",431,e4d96e98-6c86-47ca-b925-612919b2907b
total_day_target_website_by_website_and_group_q1,Hardcoded Logic,"Similar to the publication group metric, this metric also hardcodes the date range, leading to the same issues of inflexibility and redundancy.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-06-09' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-06-15'","Consolidate these metrics into a single, generic 'Total Daily Target' metric. Leverage Looker Studio's built-in date range controls to allow users to dynamically select the reporting period. Consider using BigQuery's `_PARTITIONTIME` or `CURRENT_DATE()` functions for relative date filtering if applicable.",431,e4d96e98-6c86-47ca-b925-612919b2907b
total_day_target_website_advertiser_april_2025_q2,Hardcoded Logic,"This metric hardcodes both a specific date range and a specific website ('Advertiser'). This pattern is repeated across multiple metrics, indicating a need for a more dynamic filtering approach rather than creating a new metric for each combination of date and website.","WHERE PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) >= DATE '2025-04-28' AND PARSE_DATE('%Y%m%d', SAFE_CAST(t0.targetdate AS STRING)) <= DATE '2025-05-04' AND t0.website = 'Advertiser'","Consolidate into a single 'Total Daily Target by Website' metric. Utilize Looker Studio's filters (e.g., dropdowns, input boxes) for the 'website' dimension and date range controls for the 'targetdate' dimension. This allows users to select any website and date range without requiring new metric definitions.",431,e4d96e98-6c86-47ca-b925-612919b2907b
total_day_target_website_punters_july_2024_march_2025_q4,Hardcoded Logic,"This metric uses `REGEXP_CONTAINS` for a specific website group ('Punters') in addition to a hardcoded date range. While `REGEXP_CONTAINS` is functional, if 'Punters' represents a fixed logical grouping of websites, it would be more maintainable to define this grouping in a lookup table or a derived field in the data source rather than hardcoding it within each metric's SQL.","AND SAFE.REGEXP_CONTAINS(SAFE_CAST(t0.website AS STRING), 'Punters')","If 'Punters' is a static group, define a 'Website Group' dimension in the data model (e.g., via a CASE statement in a view or a lookup table join) that categorizes websites. This allows for cleaner filtering and avoids repeating complex regex logic across multiple metrics. Then, use Looker Studio filters on this new dimension.",431,e4d96e98-6c86-47ca-b925-612919b2907b
total_day_target_website_advertiser_june_2025_q5,Anti-Pattern (Redundant Metrics),"The dashboard contains five distinct metrics (`total_day_target_website_by_website_and_group_q1`, `total_day_target_website_advertiser_april_2025_q2`, `total_day_target_website_advertiser_august_2025_q3`, `total_day_target_website_punters_july_2024_march_2025_q4`, `total_day_target_website_advertiser_june_2025_q5`) that all calculate `total_day_target_website` but differ only by hardcoded date and website filters. This is a clear anti-pattern of metric proliferation.",N/A (applies to the overall metric structure),"Consolidate all 'Total Daily Target' metrics into one or two generic metrics (e.g., 'Total Daily Target by Publication Group' and 'Total Daily Target by Website'). Empower users to filter by date range and website/publication group using Looker Studio's native filtering capabilities. This significantly reduces metric count, improves maintainability, and enhances dashboard flexibility.",431,e4d96e98-6c86-47ca-b925-612919b2907b
