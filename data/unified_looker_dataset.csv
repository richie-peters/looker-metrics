record_id,record_type,dashboard_id,dashboard_name,full_context
5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26_summary,dashboard,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26,Optimizing Digital Subscriptions Report,"Dashboard Summary for 'Optimizing Digital Subscriptions Report' (ID: 5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: High complexity due to deeply nested subqueries, extensive `CASE` statements for dynamic dimension and measure selection, and complex masthead/recognition type categorizations. High consolidation potential as core dimension logic (masthead groups, recognition types, comparison periods) and date calculations are duplicated across multiple queries. Many financial metrics are derived similarly, indicating a need for a consolidated data model or view. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions;ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions. Contains 29 metrics. - Metric: 'Masthead Group' (masthead_group_dimension). Description: Categorization of publications into broader groups like 'The Australian', 'Metros', 'Regionals', 'Deep Niche Publications', 'Others', 'Discontinued'.. Executable SQL: SELECT
    CASE
        WHEN (masthead_name_derived = 'The Australian') THEN 'The Australian'
        WHEN (t0.masthead_code = 'CM' OR t0.classification_level_2_description = 'Daily Telegraph' OR t0.classification_level_2_description = 'Herald Sun' OR t0.classification_level_2_description = 'The Advertiser') THEN 'Metros'
        WHEN (t0.classification_level_2_description = 'Cairns Post' OR t0.classification_level_2_description = 'Geelong' OR t0.classification_level_2_description = 'Gold Coast' OR t0.classification_level_2_description = 'NT News' OR t0.classification_level_2_description = 'The Mercury' OR t0.classification_level_2_description = 'Toowoomba' OR t0.classification_level_2_description = 'Townsville') THEN 'Regionals'
        WHEN (masthead_name_derived = 'Weekly Times') THEN 'Others'
        WHEN (t0.classification_level_2_description = 'Supercoach Plus' OR t0.classification_level_2_description = 'Code' OR t0.classification_level_2_description = 'Taste Online' OR t0.classification_level_2_description = 'Apple Podcast: Crime X' OR t0.classification_level_2_description = 'Racenet' OR t0.classification_level_2_description = 'Punters' OR t0.classification_level_2_description = 'Others') THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
    END AS masthead_group
FROM
    (
        SELECT
            t0.classification_level_1_description,
            t0.classification_level_2_description,
            t0.delivery_medium_type,
            t0.gl_publication_code,
            t0.masthead_code,
            t0.subscriber_has_email_flag,
            CASE
                WHEN (t0.gl_publication_code = '101' OR t0.gl_publication_code = '100' OR t0.gl_publication_code = '402') THEN 'The Australian'
                WHEN (t0.gl_publication_code = '400' OR t0.gl_publication_code = '401' OR t0.gl_publication_code = '110' OR t0.gl_publication_code = '111') THEN 'Daily Telegraph'
                WHEN (t0.gl_publication_code = '301' OR t0.gl_publication_code = '302' OR t0.gl_publication_code = '303') THEN 'Herald Sun'
                WHEN (t0.gl_publication_code = '500' OR t0.gl_publication_code = '501' OR t0.gl_publication_code = '560') THEN 'The Advertiser'
                WHEN (t0.gl_publication_code = '450' OR t0.gl_publication_code = '460') THEN 'Cairns Post'
                WHEN (t0.gl_publication_code = '350' OR t0.gl_publication_code = '351') THEN 'Geelong'
                WHEN (t0.gl_publication_code = '670' OR t0.gl_publication_code = '685') THEN 'Gold Coast'
                WHEN (t0.gl_publication_code = '961' OR t0.gl_publication_code = '962' OR t0.gl_publication_code = '963') THEN 'NT News'
                WHEN (t0.gl_publication_code = '850' OR t0.gl_publication_code = '851' OR t0.gl_publication_code = '852') THEN 'The Mercury'
                WHEN (t0.gl_publication_code = '5053' OR t0.gl_publication_code = '5253') THEN 'Toowoomba'
                WHEN (t0.gl_publication_code = '475' OR t0.gl_publication_code = '490') THEN 'Townsville'
                WHEN (t0.gl_publication_code = '305' OR t0.gl_publication_code = '307') THEN 'Weekly Times'
                WHEN (t0.gl_publication_code = '9001' OR t0.gl_publication_code = '9002') THEN 'Code'
                WHEN (t0.gl_publication_code = '8821' OR t0.gl_publication_code = '8822' OR t0.gl_publication_code = 'Punters.com.au') THEN 'Punters'
                WHEN (t0.gl_publication_code = 'Racenet' OR t0.masthead_code = 'RN') THEN 'Racenet'
                WHEN (t0.gl_publication_code = '9653' OR t0.masthead_code = 'SC') THEN 'Supercoach Plus'
                WHEN (t0.gl_publication_code = '9600' OR t0.masthead_code = 'TS') THEN 'Taste Online'
                WHEN (t0.gl_publication_code = '9003' OR t0.masthead_code = 'AP') THEN 'Apple Podcast: Crime X'
                WHEN (t0.gl_publication_code = '103' OR t0.classification_level_2_description = 'The Oz') THEN 'The Oz'
                WHEN (t0.gl_publication_code = '9000' OR t0.masthead_code = 'NW') THEN 'news.com.au'
                WHEN (t0.gl_publication_code = '121') THEN 'Others'
                WHEN (t0.gl_publication_code = '9002' OR t0.masthead_code = 'BG') THEN 'Brain Games'
                WHEN (t0.gl_publication_code = '9504' OR t0.gl_publication_code = '9514' OR t0.gl_publication_code = '9556' OR t0.gl_publication_code = '9558' OR t0.gl_publication_code = '9560' OR t0.gl_publication_code = '9603' OR t0.gl_publication_code = '9623') THEN 'Others'
                WHEN (t0.gl_publication_code = '9644') THEN 'Suddenly'
                WHEN (t0.gl_publication_code = '9903') THEN 'News Corporate'
                WHEN (t0.gl_publication_code = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
                ELSE NULL
            END AS masthead_name_derived
        FROM
            `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    ) AS subquery_t0
LIMIT 1 - Metric: 'Recognition Type' (recognition_type_dimension). Description: Classification of subscription recognition as 'Print Recognition' or 'Digital Recognition' based on delivery medium and email flag.. Executable SQL: SELECT
    CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END AS recognition_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1 - Metric: 'Fiscal Week and Month' (fiscal_week_month_dimension). Description: A concatenated string representing the Fiscal Year, Week, and corresponding Fiscal Month. Used for time-based grouping.. Executable SQL: SELECT
    CONCAT('FY ','2025',' Week ',SAFE_CAST(fiscal_week_num AS STRING),' (',SAFE_CAST(fiscal_month_name AS STRING),')') AS fiscal_week_month
FROM
    (
        SELECT
            CASE WHEN (day_of_week_num <= 2) THEN fiscal_week_num_minus_1 ELSE fiscal_week_num END AS fiscal_week_num,
            CASE WHEN (fiscal_week_num <= 4) THEN 'July' WHEN (fiscal_week_num <= 9) THEN 'August' WHEN (fiscal_week_num <= 13) THEN 'September' WHEN (fiscal_week_num <= 17) THEN 'October' WHEN (fiscal_week_num <= 22) THEN 'November' WHEN (fiscal_week_num <= 26) THEN 'December' WHEN (fiscal_week_num <= 30) THEN 'January' WHEN (fiscal_week_num <= 35) THEN 'February' WHEN (fiscal_week_num <= 39) THEN 'March' WHEN (fiscal_week_num <= 43) THEN 'April' WHEN (fiscal_week_num <= 48) THEN 'May' WHEN (fiscal_week_num <= 53) THEN 'June' ELSE NULL END AS fiscal_month_name
        FROM
            (
                SELECT
                    (EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE '2025-03-23')) - 1) AS day_of_week_num,
                    DATETIME_DIFF(SAFE_CAST(DATE '2025-03-23' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS fiscal_week_num,
                    (DATETIME_DIFF(SAFE_CAST(DATE '2025-03-23' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) AS fiscal_week_num_minus_1
            )
    )
LIMIT 1 - Metric: 'Comparison Period Type' (comparison_period_type_dimension). Description: Defines different comparison periods for metrics (e.g., 'vs LW' (Last Week), 'vs LM' (Last Month), 'vs LQ' (Last Quarter), 'vs LY' (Last Year), 'vs BUD' (Budget), 'vs FCT' (Forecast), 'vs YOY' (Year-over-Year), 'vs BUD NY' (Budget Next Year)).. Executable SQL: SELECT
    CASE WHEN (2 = 1) THEN 'vs BUD' WHEN (2 = 2) THEN 'vs FCT' WHEN (2 = 3) THEN 'vs YOY' WHEN (2 = 4) THEN 'vs BUD NY' ELSE NULL END AS comparison_period_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1 - Metric: 'Record Count' (record_count_measure). Description: Total number of records/subscriptions. Often used as a base for other calculations.. Executable SQL: SELECT
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Cancellation Type' (cancellation_type_dimension). Description: Categorization of cancellations as 'Gross Cancellations' or 'Net Cancellations'.. Executable SQL: SELECT
    CASE WHEN (1 = 1) THEN 'Gross Cancellations' WHEN (1 = 2) THEN 'Net Cancellations' ELSE NULL END AS cancellation_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1 - Metric: 'Acquisition Type' (acquisition_type_dimension). Description: Categorization of acquisitions as 'Gross Acquisitions' or 'Net Acquisitions'.. Executable SQL: SELECT
    CASE WHEN (1 = 1) THEN 'Gross Acquisitions' WHEN (1 = 2) THEN 'Net Acquisitions' ELSE NULL END AS acquisition_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1 - Metric: 'Budget Opening Base (FY2025, Selected Week)' (budget_opening_base_fy2025_selected_week). Description: The budgeted opening base for the fiscal year 2025, filtered by a dynamically selected week.. Executable SQL: SELECT
    SUM(CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 13) THEN 1 WHEN (t0.fy_week_of_year <= 26) THEN 2 WHEN (t0.fy_week_of_year <= 39) THEN 3 WHEN (t0.fy_week_of_year <= 53) THEN 4 ELSE NULL END)) THEN t0.BudgetOpeningBase ELSE 0 END) AS budget_opening_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Budget Earned Amount (Dynamic)' (budget_earned_amount_dynamic). Description: The budgeted earned amount, dynamically selected based on dashboard controls.. Executable SQL: SELECT
    SUM(CASE WHEN (TRUE) THEN t0.BudgetEarnedAmount ELSE 0 END) AS budget_earned_amount
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Closing Base (Filtered by Source)' (closing_base_filtered_by_source). Description: The closing base amount, filtered by specific `table_union_source` values ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS').. Executable SQL: SELECT
    SUM(CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) AS closing_base_filtered
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Opening Base (Filtered by Source)' (opening_base_filtered_by_source). Description: The opening base amount, filtered by specific `table_union_source` value ('bmasnap_open').. Executable SQL: SELECT
    SUM(CASE WHEN (t0.table_union_source = 'bmasnap_open') THEN t0.OpeningBase ELSE 0 END) AS opening_base_filtered
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Budget Closing Base (FY2025, Selected Week)' (budget_closing_base_fy2025_selected_week). Description: The budgeted closing base for the fiscal year 2025, filtered by a dynamically selected week.. Executable SQL: SELECT
    SUM(CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (0 = 0) THEN t0.fy_week_of_year ELSE 0 END)) THEN t0.BudgetClosingBase ELSE 0 END) AS budget_closing_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Closing Base (FY+1, Selected Week)' (closing_base_fy_plus_1_selected_week). Description: The closing base amount for the fiscal year after the current one (FY+1), filtered by a dynamically selected week.. Executable SQL: SELECT
    SUM(CASE WHEN ((t0.fy_year + 1) = 2025 AND t0.fy_week_of_year = (CASE WHEN (0 = 0) THEN t0.fy_week_of_year ELSE 0 END)) THEN (CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) ELSE 0 END) AS closing_base_fy_plus_1
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Filtered by Year & Source)' (earned_amount_filtered_by_year_source). Description: Earned amount, filtered based on fiscal year and `table_union_source` (e.g., `nfmanualhist`, `subsnapfact`).. Executable SQL: SELECT
    SUM(CASE WHEN ((t0.fy_year <= 2024) AND (t0.table_union_source = 'nfmanualhist')) THEN t0.NFEarnedAmount WHEN ((t0.fy_year > 2024) AND (t0.table_union_source = 'subsnapfact')) THEN t0.EarnedAmount ELSE NULL END) AS earned_amount_filtered
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Forecast Closing Base' (forecast_closing_base_measure). Description: The forecast closing base amount.. Executable SQL: SELECT
    SUM(t0.ForecastClosingBase) AS forecast_closing_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Forecast Opening Base' (forecast_opening_base_measure). Description: The forecast opening base amount.. Executable SQL: SELECT
    SUM(t0.ForecastOpeningBase) AS forecast_opening_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Forecast Budget Earned Amount' (forecast_budget_earned_amount_measure). Description: The forecast budgeted earned amount.. Executable SQL: SELECT
    SUM(t0.ForecastBudgetEarnedAmount) AS forecast_budget_earned_amount
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Next Year Budget Closing Base' (ny_budget_closing_base_measure). Description: The budgeted closing base for the next fiscal year.. Executable SQL: SELECT
    SUM(t0.NYBudgetClosingBase) AS ny_budget_closing_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Next Year Budget Earned Amount' (ny_budget_earned_amount_measure). Description: The budgeted earned amount for the next fiscal year.. Executable SQL: SELECT
    SUM(t0.NYBudgetEarnedAmount) AS ny_budget_earned_amount
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Next Year Budget Opening Base' (ny_budget_opening_base_measure). Description: The budgeted opening base for the next fiscal year.. Executable SQL: SELECT
    SUM(t0.NYBudgetOpeningBase) AS ny_budget_opening_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Budget Earned Amount (Dynamic clmn242)' (budget_earned_amount_dynamic_clmn242). Description: A dynamically selected budgeted earned amount, potentially based on a boolean flag (clmn240_).. Executable SQL: SELECT
    SUM(CASE WHEN (CASE WHEN (TRUE) THEN (CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (0 = 0) THEN t0.fy_week_of_year ELSE 0 END)) THEN (CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) ELSE 0 END) WHEN (TRUE) THEN (CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 13) THEN 1 WHEN (t0.fy_week_of_year <= 26) THEN 2 WHEN (t0.fy_week_of_year <= 39) THEN 3 WHEN (t0.fy_week_of_year <= 53) THEN 4 ELSE NULL END)) THEN t0.BudgetOpeningBase ELSE 0 END) WHEN (TRUE) THEN (CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 4) THEN 1 WHEN (t0.fy_week_of_year <= 9) THEN 2 WHEN (t0.fy_week_of_year <= 13) THEN 3 WHEN (t0.fy_week_of_year <= 17) THEN 4 WHEN (t0.fy_week_of_year <= 22) THEN 5 WHEN (t0.fy_week_of_year <= 26) THEN 6 WHEN (t0.fy_week_of_year <= 30) THEN 7 WHEN (t0.fy_week_of_year <= 35) THEN 8 WHEN (t0.fy_week_of_year <= 39) THEN 9 WHEN (t0.fy_week_of_year <= 43) THEN 10 WHEN (t0.fy_week_of_year <= 48) THEN 11 WHEN (t0.fy_week_of_year <= 53) THEN 12 ELSE NULL END)) THEN t0.BudgetOpeningBase ELSE 0 END) WHEN (TRUE) THEN t0.ClosingBase ELSE NULL END = TRUE) THEN (CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) ELSE 0 END) AS budget_earned_amount_dynamic_clmn242
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn243)' (earned_amount_dynamic_clmn243). Description: A dynamically selected earned amount, potentially based on a boolean flag (clmn241_).. Executable SQL: SELECT
    SUM(CASE WHEN (CASE WHEN (TRUE) THEN (CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (0 = 0) THEN t0.fy_week_of_year ELSE 0 END)) THEN (CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) WHEN (TRUE) THEN (CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 13) THEN 1 WHEN (t0.fy_week_of_year <= 26) THEN 2 WHEN (t0.fy_week_of_year <= 39) THEN 3 WHEN (t0.fy_week_of_year <= 53) THEN 4 ELSE NULL END)) THEN t0.BudgetOpeningBase ELSE 0 END) WHEN (TRUE) THEN (CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 4) THEN 1 WHEN (t0.fy_week_of_year <= 9) THEN 2 WHEN (t0.fy_week_of_year <= 13) THEN 3 WHEN (t0.fy_week_of_year <= 17) THEN 4 WHEN (t0.fy_week_of_year <= 22) THEN 5 WHEN (t0.fy_week_of_year <= 26) THEN 6 WHEN (t0.fy_week_of_year <= 30) THEN 7 WHEN (t0.fy_week_of_year <= 35) THEN 8 WHEN (t0.fy_week_of_year <= 39) THEN 9 WHEN (t0.fy_week_of_year <= 43) THEN 10 WHEN (t0.fy_week_of_year <= 48) THEN 11 WHEN (t0.fy_week_of_year <= 53) THEN 12 ELSE NULL END)) THEN t0.BudgetOpeningBase ELSE 0 END) WHEN (TRUE) THEN (CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) ELSE NULL END = TRUE) THEN (CASE WHEN (t0.table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS')) THEN t0.ClosingBase ELSE 0 END) ELSE 0 END) AS earned_amount_dynamic_clmn243
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Budget Earned Amount (Dynamic clmn223)' (budget_earned_amount_dynamic_clmn223). Description: A dynamically selected budgeted earned amount, potentially based on a boolean flag (clmn213_).. Executable SQL: SELECT
    SUM(CASE WHEN (CASE WHEN (TRUE) THEN (CASE WHEN (t0.fy_week_of_year = (CASE WHEN (0 = 0) THEN t0.fy_week_of_year ELSE 0 END)) THEN t0.NYBudgetEarnedAmount WHEN (TRUE) THEN (CASE WHEN (t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 13) THEN 1 WHEN (t0.fy_week_of_year <= 26) THEN 2 WHEN (t0.fy_week_of_year <= 39) THEN 3 WHEN (t0.fy_week_of_year <= 53) THEN 4 ELSE NULL END)) THEN t0.NYBudgetEarnedAmount ELSE 0 END) WHEN (TRUE) THEN (CASE WHEN (t0.fy_week_of_year = (CASE WHEN (t0.fy_week_of_year <= 4) THEN 1 WHEN (t0.fy_week_of_year <= 9) THEN 2 WHEN (t0.fy_week_of_year <= 13) THEN 3 WHEN (t0.fy_week_of_year <= 17) THEN 4 WHEN (t0.fy_week_of_year <= 22) THEN 5 WHEN (t0.fy_week_of_year <= 26) THEN 6 WHEN (t0.fy_week_of_year <= 30) THEN 7 WHEN (t0.fy_week_of_year <= 35) THEN 8 WHEN (t0.fy_week_of_year <= 39) THEN 9 WHEN (t0.fy_week_of_year <= 43) THEN 10 WHEN (t0.fy_week_of_year <= 48) THEN 11 WHEN (t0.fy_week_of_year <= 53) THEN 12 ELSE NULL END)) THEN t0.NYBudgetEarnedAmount ELSE 0 END) WHEN (TRUE) THEN t0.NYBudgetEarnedAmount ELSE NULL END = TRUE) THEN (CASE WHEN ((t0.fy_year <= 2024) AND (t0.table_union_source = 'nfmanualhist')) THEN t0.NFEarnedAmount WHEN ((t0.fy_year > 2024) AND (t0.table_union_source = 'subsnapfact')) THEN t0.EarnedAmount ELSE NULL END) ELSE 0 END) AS budget_earned_amount_dynamic_clmn223
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn237)' (earned_amount_dynamic_clmn237). Description: A dynamically selected earned amount, potentially based on a boolean flag (clmn224_) and week/quarter conditions.. Executable SQL: SELECT
    SUM(CASE WHEN (TRUE AND t0.fy_week_of_year <= 22) THEN (CASE WHEN ((t0.fy_year <= 2024) AND (t0.table_union_source = 'nfmanualhist')) THEN t0.NFEarnedAmount WHEN ((t0.fy_year > 2024) AND (t0.table_union_source = 'subsnapfact')) THEN t0.EarnedAmount ELSE NULL END) WHEN (TRUE AND t0.fy_week_of_year > 22) THEN t0.EarnedAmount ELSE NULL END) AS earned_amount_dynamic_clmn237
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn238)' (earned_amount_dynamic_clmn238). Description: A dynamically selected earned amount, potentially based on a boolean flag (clmn224_) and fiscal year 2025.. Executable SQL: SELECT
    SUM(CASE WHEN (t0.fy_year = 2025 AND TRUE) THEN (CASE WHEN ((t0.fy_year <= 2024) AND (t0.table_union_source = 'nfmanualhist')) THEN t0.NFEarnedAmount WHEN ((t0.fy_year > 2024) AND (t0.table_union_source = 'subsnapfact')) THEN t0.EarnedAmount ELSE NULL END) ELSE NULL END) AS earned_amount_dynamic_clmn238
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn225)' (earned_amount_dynamic_clmn225). Description: A dynamically selected earned amount, potentially based on a boolean flag (clmn214_) and NYBudgetEarnedAmount.. Executable SQL: SELECT
    SUM(CASE WHEN (TRUE) THEN t0.NYBudgetEarnedAmount ELSE 0 END) AS earned_amount_dynamic_clmn225
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn229)' (earned_amount_dynamic_clmn229). Description: A dynamically selected earned amount, potentially based on a boolean flag (clmn215_) and FY2025.. Executable SQL: SELECT
    SUM(CASE WHEN (t0.fy_year = 2025 AND TRUE) THEN (CASE WHEN (t0.table_union_source = 'bmasnap_open') THEN t0.OpeningBase ELSE 0 END) ELSE 0 END) AS earned_amount_dynamic_clmn229
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn230)' (earned_amount_dynamic_clmn230). Description: A dynamically selected earned amount, potentially based on a boolean flag (clmn215_) and NYBudgetOpeningBase.. Executable SQL: SELECT
    SUM(CASE WHEN (t0.fy_year = 2025 AND TRUE) THEN t0.NYBudgetOpeningBase ELSE 0 END) AS earned_amount_dynamic_clmn230
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1 - Metric: 'Earned Amount (Dynamic clmn231)' (earned_amount_dynamic_clmn231). Description: A dynamically selected earned amount, potentially based on boolean flags (clmn216_, clmn48_, clmn44_) and FY2025.. Executable SQL: SELECT
    SUM(CASE WHEN (t0.fy_year = 2025 AND TRUE AND t0.fy_week_of_year <= 22) THEN (CASE WHEN (t0.table_union_source = 'bmasnap_open') THEN t0.OpeningBase ELSE 0 END) WHEN (t0.fy_year = 2025 AND TRUE AND t0.fy_week_of_year > 22) THEN t0.ForecastOpeningBase ELSE 0 END) AS earned_amount_dynamic_clmn231
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    CASE WHEN (t0.masthead_group = 'The Australian') THEN '01.The Australian' WHEN (t0.masthead_group = 'Metros') THEN '02.Metros' WHEN (t0.masthead_group = 'Regionals') THEN '03.Regionals' WHEN (t0.masthead_group = 'Others') THEN '04.Others' WHEN (t0.masthead_group = 'Deep Niche Publications') THEN '05.Deep Niche Publications' ELSE NULL END = '02.Metros'
    AND CASE WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END = 'Digital Recognition'
LIMIT 1"
f353b933-30eb-4853-9976-0d35371db7d7_summary,dashboard,f353b933-30eb-4853-9976-0d35371db7d7,Month End Reporting Reconcilation,"Dashboard Summary for 'Month End Reporting Reconcilation' (ID: f353b933-30eb-4853-9976-0d35371db7d7). Business Domain: finance. Complexity Score: 3/10. Consolidation Score: 2/10. Reasoning: The dashboard uses simple aggregation queries on two distinct financial datasets. Complexity is low due to direct table access and basic aggregations (SUM, COUNT). Consolidation opportunities are limited as the primary data sources are different, though internal consistency within each source's metrics is present. Primary Data Sources: ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_MER_budgets_forecasts;ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation. Contains 3 metrics. - Metric: 'Estimated Actual Amount (Jan 2025)' (actual_amount_sum_jan_2025_estimate). Description: The sum of actual amounts for January 2025, specifically for 'Estimate' scenarios, typically used for month-end reporting and reconciliation.. Executable SQL: SELECT SUM(t0.Actual_Amount) AS estimated_actual_amount FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_MER_budgets_forecasts` AS t0 WHERE SAFE_CAST(t0.fiscal_year AS BIGNUMERIC) = 2025 AND SAFE_CAST(t0.month_short_name AS STRING) = 'Jan' AND SAFE_CAST(t0.scenario AS STRING) = 'Estimate' - Metric: 'Count of FY Month Number' (fy_month_num_count_total). Description: The count of fiscal month numbers from the GL reconciliation data, potentially used for internal data quality checks or to count records associated with fiscal months.. Executable SQL: SELECT COUNT(t0.fy_month_num) AS count_fy_month_num FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0 - Metric: 'Sum of FY Month Number' (fy_month_num_sum_total). Description: The sum of fiscal month numbers from the GL reconciliation data, likely used for internal data processing, validation, or specific calculations within the reconciliation process.. Executable SQL: SELECT SUM(t0.fy_month_num) AS sum_fy_month_num FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0"
b9dfd2f4-92fa-4f81-a5b1-17de880470f9_summary,dashboard,b9dfd2f4-92fa-4f81-a5b1-17de880470f9,Contra Report,"Dashboard Summary for 'Contra Report' (ID: b9dfd2f4-92fa-4f81-a5b1-17de880470f9). Business Domain: advertising. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The dashboard queries exhibit high complexity due to deeply nested subqueries, extensive and repetitive `WHERE` clauses, and complex `CASE` statements used for both data categorization and conditional aggregation. Multiple variations of the core 'gross revenue amount' metric are derived using similar logic, indicating significant opportunities for consolidation into a more unified data model or set of calculated fields. The dashboard also pulls from multiple related but distinct data sources. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily;ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly;ncau-data-newsquery-prd.asl_finance_derived.details_dashboard;ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data. Contains 8 metrics. - Metric: 'Total Gross Contra Revenue' (total_gross_contra_revenue). Description: The total gross revenue amount attributed to 'Contra' advertisers, based on specific filtering criteria for revenue type, status, and publication details.. Executable SQL: SELECT SUM(gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) LIMIT 1 - Metric: 'Gross Contra Revenue - Current Financial Year' (gross_contra_revenue_current_fy). Description: The gross revenue amount for 'Contra' advertisers specifically for the current financial year (relative_fy_year_offset = 0).. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(relative_fy_year_offset AS INT64) = 0 THEN gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) LIMIT 1 - Metric: 'Gross Contra Revenue - Previous Financial Year' (gross_contra_revenue_previous_fy). Description: The gross revenue amount for 'Contra' advertisers specifically for the previous financial year (relative_fy_year_offset = -1).. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(relative_fy_year_offset AS INT64) = -1 THEN gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) LIMIT 1 - Metric: 'Gross Contra Revenue - Digital' (gross_contra_revenue_digital). Description: The gross revenue amount for 'Contra' advertisers where the revenue type is 'Digital'.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(revenue_type AS STRING) = 'Digital' THEN gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) LIMIT 1 - Metric: 'Gross Contra Revenue - Open Accounts' (gross_contra_revenue_open_accounts). Description: The total gross revenue amount for 'Contra' advertisers whose accounts are classified as 'Open' based on the contra sheet data.. Executable SQL: SELECT SUM(gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND SAFE_CAST(adpoint_account_number AS STRING) != '20696' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) AND (CASE WHEN SAFE_CAST(adpoint_account_number AS STRING) IN (SELECT DISTINCT SAFE_CAST(NMBS_T_Number AS STRING) FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data` WHERE SAFE_CAST(Status AS STRING) = 'Closed') THEN 'Closed' ELSE 'Open' END) = 'Open' LIMIT 1 - Metric: 'Total Contra Accounts by Specific Advertiser Name' (total_contra_accounts_by_advertiser_name). Description: A count of distinct contra accounts associated with a specific list of advertiser names.. Executable SQL: SELECT COUNT(1) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE SAFE_CAST(advertiser_name AS STRING) IN ('CTR_2023_AFL SPORT', 'CTR_2023_GWS GIANTS', 'CTR_2023_SYDNEY SWANS', 'CTR_2025_Greater Western Sydney Giants', 'CTR_2025_Raising Literacy Australia') LIMIT 1 - Metric: 'Contra Owner List (Weekly Revenue Source)' (contra_owner_list_weekly_revenue). Description: A list of distinct full names of portfolio owners associated with 'Contra' advertisers, derived from the weekly revenue data.. Executable SQL: SELECT DISTINCT IFNULL(SAFE_CAST(current_portfolio_conformed_owner_full_name_current AS STRING), 'VACANT') FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly` WHERE lower(SAFE_CAST(LEFT(advertiser_name, 3) AS STRING)) = 'ctr' AND NOT(SAFE_CAST(cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(revenue_group_name AS STRING) = 'Exchange') AND UPPER(IFNULL(SAFE_CAST(revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(SAFE_CAST(style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(SAFE_CAST(source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(SAFE_CAST(publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(SAFE_CAST(publication_name AS STRING)) LIKE 'SUDDENLY%' AND (SAFE_CAST(account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(adtype_name AS STRING) = '-'))) LIMIT 1 - Metric: 'Contra Owner List (Finance Dashboard Source)' (contra_owner_list_finance_dashboard). Description: A list of distinct full names of portfolio owners where the industry pillar is 'Contra' and the sales segment GM name is 'Renee Sycamore', derived from the finance dashboard data.. Executable SQL: SELECT DISTINCT SAFE_CAST(current_portfolio_conformed_owner_full AS STRING) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE SAFE_CAST(nca_industry_pillar AS STRING) = 'Contra' AND SAFE_CAST(sales_segment_gm_name AS STRING) IN ('Renee Sycamore') LIMIT 1"
1a5f7b4e-ea3a-46e4-8b77-b428f4178510_summary,dashboard,1a5f7b4e-ea3a-46e4-8b77-b428f4178510,Team Sales Performance,"Dashboard Summary for 'Team Sales Performance' (ID: 1a5f7b4e-ea3a-46e4-8b77-b428f4178510). Business Domain: sales. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The SQL queries exhibit high complexity due to deeply nested subqueries, extensive use of CASE statements for conditional logic and metric definition, and the application of window functions. There's significant redundancy in metric calculations (e.g., multiple aliases for the same 'Last Year Revenue' metric) and variations (e.g., 'in Thousands' versions), indicating a strong opportunity for consolidation into a more streamlined metric layer. The fixed date logic for YTD calculations also adds to the complexity. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly;ncau-data-newsquery-prd.prstn_advertising_views.v_user_dim. Contains 6 metrics. - Metric: 'Gross Revenue (Current Year)' (gross_revenue_current_year). Description: Total gross revenue for the current financial year, based on the 'relative_fy_year_offset' being 0. Filtered for 'Client' sales group.. Executable SQL: SELECT
  SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) AS gross_revenue_current_year
FROM
  (
    WITH
      SFCE_USER AS (
        SELECT
          TEMP1.network_user_name AS login_name,
          TEMP1.user_name AS full_name
        FROM
          (
            SELECT
              UPPER(network_user_name) AS network_user_name,
              UPPER(user_name) AS user_name,
              ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
            FROM
              `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
            WHERE
              dw_source_system_code = 'SFCE'
          ) AS TEMP1
        WHERE
          TEMP1.RN = 1
      ),
      CTE2 AS (
        SELECT
          financial_year,
          relative_fy_year_offset,
          gross_revenue_amount,
          CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
          UPPER(revenue_type) AS revenue_type,
          UPPER(revenue_group_subtype) AS revenue_group_subtype,
          sales_segment_l_2_name_sync,
          advertiser_parent,
          CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
        FROM
          `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
          LEFT JOIN
          SFCE_USER AS GSD_JOIN
          ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
        WHERE
          relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
        GROUP BY ALL
      )
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  ) AS t0
WHERE
  t0.Sales_Group = 'Client' - Metric: 'Gross Revenue (Last Year)' (gross_revenue_last_year). Description: Total gross revenue for the previous financial year, based on the 'relative_fy_year_offset' being -1. Filtered for 'Client' sales group.. Executable SQL: SELECT
  SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) AS gross_revenue_last_year
FROM
  (
    WITH
      SFCE_USER AS (
        SELECT
          TEMP1.network_user_name AS login_name,
          TEMP1.user_name AS full_name
        FROM
          (
            SELECT
              UPPER(network_user_name) AS network_user_name,
              UPPER(user_name) AS user_name,
              ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
            FROM
              `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
            WHERE
              dw_source_system_code = 'SFCE'
          ) AS TEMP1
        WHERE
          TEMP1.RN = 1
      ),
      CTE2 AS (
        SELECT
          financial_year,
          relative_fy_year_offset,
          gross_revenue_amount,
          CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
          UPPER(revenue_type) AS revenue_type,
          UPPER(revenue_group_subtype) AS revenue_group_subtype,
          sales_segment_l_2_name_sync,
          advertiser_parent,
          CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
        FROM
          `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
          LEFT JOIN
          SFCE_USER AS GSD_JOIN
          ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
        WHERE
          relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
        GROUP BY ALL
      )
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  ) AS t0
WHERE
  t0.Sales_Group = 'Client' - Metric: 'Gross Revenue (Last Year YTD)' (gross_revenue_last_year_ytd). Description: Total gross revenue for the previous financial year, year-to-date, up to a specific fixed date (Jan 2nd, 2024). This calculation includes complex logic for digital revenue and advertiser type. Filtered for 'Client' sales group.. Executable SQL: SELECT
  SUM(
    CASE
      WHEN t0.relative_fy_year_offset = -1
      AND (
        CASE
          WHEN (UPPER(t0.revenue_type) = 'DIGITAL' AND UPPER(t0.revenue_group_subtype) = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod
          ELSE t0.booking_line_created_date
        END
      ) <= DATE '2024-01-02' THEN t0.gross_revenue_amount
      ELSE 0
    END
  ) AS gross_revenue_last_year_ytd
FROM
  (
    WITH
      SFCE_USER AS (
        SELECT
          TEMP1.network_user_name AS login_name,
          TEMP1.user_name AS full_name
        FROM
          (
            SELECT
              UPPER(network_user_name) AS network_user_name,
              UPPER(user_name) AS user_name,
              ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
            FROM
              `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
            WHERE
              dw_source_system_code = 'SFCE'
          ) AS TEMP1
        WHERE
          TEMP1.RN = 1
      ),
      CTE2 AS (
        SELECT
          financial_year,
          relative_fy_year_offset,
          gross_revenue_amount,
          CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
          UPPER(revenue_type) AS revenue_type,
          UPPER(revenue_group_subtype) AS revenue_group_subtype,
          sales_segment_l_2_name_sync,
          advertiser_parent,
          CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
        FROM
          `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
          LEFT JOIN
          SFCE_USER AS GSD_JOIN
          ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
        WHERE
          relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
        GROUP BY ALL
      )
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  ) AS t0
WHERE
  t0.Sales_Group = 'Client' - Metric: 'Gross Revenue (Current Year, in Thousands)' (gross_revenue_current_year_thousands). Description: Total gross revenue for the current financial year, expressed in thousands. Not filtered by 'Client' sales group.. Executable SQL: SELECT
  SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) / 1000 AS gross_revenue_current_year_thousands
FROM
  (
    WITH
      SFCE_USER AS (
        SELECT
          TEMP1.network_user_name AS login_name,
          TEMP1.user_name AS full_name
        FROM
          (
            SELECT
              UPPER(network_user_name) AS network_user_name,
              UPPER(user_name) AS user_name,
              ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
            FROM
              `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
            WHERE
              dw_source_system_code = 'SFCE'
          ) AS TEMP1
        WHERE
          TEMP1.RN = 1
      ),
      CTE2 AS (
        SELECT
          financial_year,
          relative_fy_year_offset,
          gross_revenue_amount,
          CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
          UPPER(revenue_type) AS revenue_type,
          UPPER(revenue_group_subtype) AS revenue_group_subtype,
          sales_segment_l_2_name_sync,
          advertiser_parent,
          CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
        FROM
          `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
          LEFT JOIN
          SFCE_USER AS GSD_JOIN
          ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
        WHERE
          relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
        GROUP BY ALL
      )
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  ) AS t0 - Metric: 'Gross Revenue (Last Year, in Thousands)' (gross_revenue_last_year_thousands). Description: Total gross revenue for the previous financial year, expressed in thousands. Not filtered by 'Client' sales group.. Executable SQL: SELECT
  SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) / 1000 AS gross_revenue_last_year_thousands
FROM
  (
    WITH
      SFCE_USER AS (
        SELECT
          TEMP1.network_user_name AS login_name,
          TEMP1.user_name AS full_name
        FROM
          (
            SELECT
              UPPER(network_user_name) AS network_user_name,
              UPPER(user_name) AS user_name,
              ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
            FROM
              `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
            WHERE
              dw_source_system_code = 'SFCE'
          ) AS TEMP1
        WHERE
          TEMP1.RN = 1
      ),
      CTE2 AS (
        SELECT
          financial_year,
          relative_fy_year_offset,
          gross_revenue_amount,
          CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
          UPPER(revenue_type) AS revenue_type,
          UPPER(revenue_group_subtype) AS revenue_group_subtype,
          sales_segment_l_2_name_sync,
          advertiser_parent,
          CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
        FROM
          `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
          LEFT JOIN
          SFCE_USER AS GSD_JOIN
          ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
        WHERE
          relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
        GROUP BY ALL
      )
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  ) AS t0 - Metric: 'Max Gross Revenue (Last Year)' (max_gross_revenue_last_year). Description: The maximum gross revenue recorded for the previous financial year. This is an unusual aggregation for revenue and might be used for specific visualization purposes. Filtered for 'Client' sales group.. Executable SQL: SELECT
  MAX(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) AS max_gross_revenue_last_year
FROM
  (
    WITH
      SFCE_USER AS (
        SELECT
          TEMP1.network_user_name AS login_name,
          TEMP1.user_name AS full_name
        FROM
          (
            SELECT
              UPPER(network_user_name) AS network_user_name,
              UPPER(user_name) AS user_name,
              ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
            FROM
              `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
            WHERE
              dw_source_system_code = 'SFCE'
          ) AS TEMP1
        WHERE
          TEMP1.RN = 1
      ),
      CTE2 AS (
        SELECT
          financial_year,
          relative_fy_year_offset,
          gross_revenue_amount,
          CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
          UPPER(revenue_type) AS revenue_type,
          UPPER(revenue_group_subtype) AS revenue_group_subtype,
          sales_segment_l_2_name_sync,
          advertiser_parent,
          CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
        FROM
          `ncau-data-newsquery-prd`.asl_advertising.v_adsales_revenue_client_weekly
          LEFT JOIN
          SFCE_USER AS GSD_JOIN
          ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
        WHERE
          relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
        GROUP BY ALL
      )
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod
    FROM
      CTE2
  ) AS t0
WHERE
  t0.Sales_Group = 'Client'"
9269e9c6-1ad0-4415-96c3-aca8a710ba01_summary,dashboard,9269e9c6-1ad0-4415-96c3-aca8a710ba01,Team Sales Performance - FY26 (Interim),"Dashboard Summary for 'Team Sales Performance - FY26 (Interim)' (ID: 9269e9c6-1ad0-4415-96c3-aca8a710ba01). Business Domain: sales. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: High complexity due to deeply nested subqueries and intricate CASE statements used for deriving dimensions and metrics, including conditional unit conversions and complex date logic. High consolidation potential exists because many reported metrics are either identical or simple unit conversions (e.g., /1000) of a few core underlying calculations. These unit conversions should ideally be handled at the display layer rather than as distinct metrics. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 16 metrics. - Metric: 'Current FY Gross Revenue' (current_fy_gross_revenue_base). Description: Total gross revenue amount for the current financial year (relative_fy_year_offset = 0).. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Future FY Gross Revenue' (future_fy_gross_revenue_base). Description: Total gross revenue amount for the next financial year (relative_fy_year_offset = 1).. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) AS future_fy_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Digital Other Revenue (Current FY)' (digital_other_revenue_current_fy_base). Description: Gross revenue for the current financial year from specific digital publication types ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') OR from 'Digital Other' sales segments with a booking date before a specific prior year date.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END) AS digital_other_revenue_current_fy FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Future FY Gross Revenue (Alias 1)' (t0_D12053088556904836537). Description: Alias for Future FY Gross Revenue.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) AS t0_D12053088556904836537 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Future FY Gross Revenue (K)' (t0_D13127430284364395010). Description: Future FY Gross Revenue, potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_D13127430284364395010 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Future FY Gross Revenue (Alias 2)' (t0_D469974475720501639). Description: Alias for Future FY Gross Revenue.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) AS t0_D469974475720501639 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Digital Other Revenue (Current FY, K)' (t0_D4738130869125385060). Description: Digital Other Revenue (Current FY), potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_D4738130869125385060 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue (Alias 1)' (t0_D490438671038474012). Description: Alias for Current FY Gross Revenue.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) AS t0_D490438671038474012 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue (Alias 2)' (t0_D7475520517164422435). Description: Alias for Current FY Gross Revenue.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) AS t0_D7475520517164422435 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue (K)' (t0_D8701941302587511228). Description: Current FY Gross Revenue, potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_D8701941302587511228 FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Future FY Gross Revenue (K, Alias 1)' (t0_qt_n6qe4wi3rd). Description: Future FY Gross Revenue, potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_qt_n6qe4wi3rd FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue (K, Alias 1)' (t0_qt_o6qe4wi3rd). Description: Current FY Gross Revenue, potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_qt_o6qe4wi3rd FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Digital Other Revenue (Current FY, K, Alias 1)' (t0_qt_r6qe4wi3rd). Description: Digital Other Revenue (Current FY), potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_qt_r6qe4wi3rd FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Future FY Gross Revenue (K, Alias 2)' (t0_qt_1ooq8wi3rd). Description: Future FY Gross Revenue, potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_qt_1ooq8wi3rd FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue (K, Alias 2)' (t0_qt_2ooq8wi3rd). Description: Current FY Gross Revenue, potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_qt_2ooq8wi3rd FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Digital Other Revenue (Current FY, K, Alias 2)' (t0_qt_5ooq8wi3rd). Description: Digital Other Revenue (Current FY), potentially divided by 1000 for display.. Executable SQL: SELECT SUM(CASE WHEN ('$\'000' = '$') THEN (CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END) ELSE SAFE_DIVIDE((CASE WHEN (t0.relative_fy_year_offset = 0 AND UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN t0.gross_revenue_amount WHEN (t0.relative_fy_year_offset = 0 AND (CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE() AS DATETIME), INTERVAL -365 DAY)) THEN t0.gross_revenue_amount ELSE 0 END), 1000) END) AS t0_qt_5ooq8wi3rd FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0"
bb49fa78-5abe-4e68-a9c1-8172a832e724_summary,dashboard,bb49fa78-5abe-4e68-a9c1-8172a832e724,optimization,"Dashboard Summary for 'optimization' (ID: bb49fa78-5abe-4e68-a9c1-8172a832e724). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 7/10. Reasoning: High complexity due to deeply nested subqueries and intricate CASE statements that dynamically select values based on hardcoded dates and boolean flags. High consolidation potential as multiple queries calculate very similar metrics (e.g., EarnedAmount, ClosingBase, OpeningBase) for slightly different 'current week' definitions, and filter/dropdown queries are highly redundant, often just returning a single hardcoded string. Primary Data Sources: ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions. Contains 10 metrics. - Metric: 'Current Week Budget Earned Amount (FY2025 W37)' (current_week_budget_earned_amount_fy2025_w37). Description: Total Budget Earned Amount for the specific financial year (FY 2025) and week (Week 37), filtered for 'Digital Recognition' and non-'Discontinued' masthead groups. This metric represents the budgeted revenue for the current reporting week.. Executable SQL: SELECT SUM(CASE WHEN ((t0.fy_week_of_year = 37) AND (t0.fy_year = 2025)) THEN t0.BudgetEarnedAmount ELSE 0 END) AS current_week_budget_earned_amount FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE t0.masthead_group != 'Discontinued' AND t0.finance_recognition = 'Digital Recognition' - Metric: 'Current Week Closing Base (FY2025 W37)' (current_week_closing_base_fy2025_w37). Description: Total Closing Base for the specific financial year (FY 2025) and week (Week 37), filtered for 'Digital Recognition' and non-'Discontinued' masthead groups. This represents the total active base at the end of the current reporting week.. Executable SQL: SELECT SUM(CASE WHEN ((t0.fy_year = 2025) AND (t0.fy_week_of_year = 37)) THEN t0.ClosingBase ELSE 0 END) AS current_week_closing_base FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE t0.masthead_group != 'Discontinued' AND t0.finance_recognition = 'Digital Recognition' - Metric: 'Current Week Opening Base (FY2025 W37)' (current_week_opening_base_fy2025_w37). Description: Total Opening Base for the specific financial year (FY 2025) and week (Week 37), filtered for 'Digital Recognition' and non-'Discontinued' masthead groups. This represents the total active base at the beginning of the current reporting week.. Executable SQL: SELECT SUM(CASE WHEN ((t0.fy_year = 2025) AND (t0.fy_week_of_year = 37)) THEN t0.OpeningBase ELSE 0 END) AS current_week_opening_base FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE t0.masthead_group != 'Discontinued' AND t0.finance_recognition = 'Digital Recognition' - Metric: 'Current Week Earned Amount (FY2025 W37)' (current_week_earned_amount_fy2025_w37). Description: Total Earned Amount for the specific financial year (FY 2025) and week (Week 37), filtered for 'Digital Recognition' and non-'Discontinued' masthead groups. This represents the actual revenue earned for the current reporting week.. Executable SQL: SELECT SUM(CASE WHEN ((t0.fy_year = 2025) AND (t0.fy_week_of_year = 37)) THEN t0.EarnedAmount ELSE 0 END) AS current_week_earned_amount FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE t0.masthead_group != 'Discontinued' AND t0.finance_recognition = 'Digital Recognition' - Metric: 'Previous Year Current Week Net Change in Base (FY2024 W37)' (previous_year_current_week_net_change_in_base_fy2024_w37). Description: The difference between Closing Base and Opening Base for the previous financial year (FY 2024), Week 37, filtered for 'Digital Recognition' and non-'Discontinued' masthead groups. This indicates the net change in active base for the corresponding week in the prior year.. Executable SQL: SELECT SUM(CASE WHEN ((t0.fy_year = 2024) AND (t0.fy_week_of_year = 37)) THEN t0.ClosingBase ELSE 0 END - CASE WHEN ((t0.fy_year = 2024) AND (t0.fy_week_of_year = 37)) THEN t0.OpeningBase ELSE 0 END) AS previous_year_current_week_net_change_in_base FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 WHERE t0.masthead_group != 'Discontinued' AND t0.finance_recognition = 'Digital Recognition' - Metric: 'Masthead Group' (masthead_group_dimension). Description: Categorization of digital subscriptions by masthead group, used as a primary dimension for analysis and filtering.. Executable SQL: SELECT DISTINCT t0.masthead_group FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 LIMIT 10 - Metric: 'Finance Recognition Type' (finance_recognition_dimension). Description: Type of financial recognition for subscriptions, used as a filter in many dashboard queries.. Executable SQL: SELECT DISTINCT t0.finance_recognition FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0 LIMIT 10 - Metric: 'Cancellations Type Filter' (cancellations_type_filter). Description: A categorical filter for different types of cancellations (Gross or Net), likely used in a dashboard control.. Executable SQL: SELECT 'Gross Cancellations' AS cancellations_type UNION ALL SELECT 'Net Cancellations' AS cancellations_type LIMIT 2 - Metric: 'Budget/Forecast Type Filter' (budget_forecast_type_filter). Description: A categorical filter for different financial projection types (Budget, Forecast, Year-on-Year, Next Year Budget), likely used in a dashboard control.. Executable SQL: SELECT 'BUD' AS budget_forecast_type UNION ALL SELECT 'FCT' UNION ALL SELECT 'YOY' UNION ALL SELECT 'BUD NY' LIMIT 4 - Metric: 'Date View & Budget/Forecast Type Filter' (date_view_budget_forecast_type_filter). Description: A categorical filter combining date aggregation views (Week to Date, Month to Date, Quarter to Date, Year to Date) and financial projection types, likely used in a dashboard control.. Executable SQL: SELECT 'Week to Date & Budget View' AS date_view_type UNION ALL SELECT 'Week to Date & Forecast View' UNION ALL SELECT 'Week to Date & Year on Year View' UNION ALL SELECT 'Week to Date & NY Budget View' UNION ALL SELECT 'Month to Date & Budget View' UNION ALL SELECT 'Month to Date & Forecast View' UNION ALL SELECT 'Month to Date & NY Budget View' UNION ALL SELECT 'Quarter to Date & Budget View' UNION ALL SELECT 'Quarter to Date & Forecast View' UNION ALL SELECT 'Quarter to Date & Year on Year View' UNION ALL SELECT 'Quarter to Date & NY Budget View' UNION ALL SELECT 'Year to Date & Budget View' UNION ALL SELECT 'Year to Date & Forecast View' UNION ALL SELECT 'Year to Date & Year on Year View' UNION ALL SELECT 'Year to Date & NY Budget View' LIMIT 12"
6de90f2a-b3f3-46fe-a4fe-13474b2d6618_summary,dashboard,6de90f2a-b3f3-46fe-a4fe-13474b2d6618,PACMAN AND EXCLUDE LOD,"Dashboard Summary for 'PACMAN AND EXCLUDE LOD' (ID: 6de90f2a-b3f3-46fe-a4fe-13474b2d6618). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 7/10. Reasoning: The dashboard uses nested subqueries and complex CASE statements for dynamic dimensions and calculated metrics (e.g., various Running_Expense metrics). There are also unusual metrics like SUM(Fiscal_Year) which may indicate misconfiguration. Consolidation potential exists for core revenue metrics and the repeated 'sum of fiscal year' metric across different tables and filters. Primary Data Sources: ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4;ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense. Contains 13 metrics. - Metric: 'Total Product Revenue (Merged One Row) by Margin Level and Dynamic Category' (product_revenue_merged_one_row_by_margin_level_and_dynamic_category). Description: Aggregated product revenue from 'Product_Revenue_Merged_OneRow' field, grouped by Margin Level and a dynamically selected product/category dimension (Category, Product_Name, Product_L1-L4). This metric originates from the `dv_exclude_product_l3_and_l4` table.. Executable SQL: SELECT
  t0.Margin_Level AS Margin_Level,
  CASE
    WHEN ('Category' = 'Category') THEN t0.Category
    WHEN ('Category' = 'Product_Name') THEN t0.Product_Name
    WHEN ('Category' = 'Product_L1') THEN t0.Product_L1
    WHEN ('Category' = 'Product_L2') THEN t0.Product_L2
    WHEN ('Category' = 'Product_L3') THEN t0.Product_L3
    WHEN ('Category' = 'Product_L4') THEN t0.Product_L4
    ELSE t0.Category
  END AS Dynamic_Category_Product_Level,
  SUM(t0.Product_Revenue_Merged_OneRow) AS Total_Product_Revenue_Merged_OneRow
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
GROUP BY 1, 2 - Metric: 'Total Product Revenue by Margin Level and Dynamic Category' (product_revenue_by_margin_level_and_dynamic_category). Description: Aggregated product revenue from 'Product_Revenue' field, grouped by Margin Level and a dynamically selected product/category dimension (Category, Product_Name, Product_L1-L4). This metric originates from the `dv_exclude_product_l3_and_l4` table.. Executable SQL: SELECT
  t0.Margin_Level AS Margin_Level,
  CASE
    WHEN ('Category' = 'Category') THEN t0.Category
    WHEN ('Category' = 'Product_Name') THEN t0.Product_Name
    WHEN ('Category' = 'Product_L1') THEN t0.Product_L1
    WHEN ('Category' = 'Product_L2') THEN t0.Product_L2
    WHEN ('Category' = 'Product_L3') THEN t0.Product_L3
    WHEN ('Category' = 'Product_L4') THEN t0.Product_L4
    ELSE t0.Category
  END AS Dynamic_Category_Product_Level,
  SUM(t0.Product_Revenue) AS Total_Product_Revenue
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
GROUP BY 1, 2 - Metric: 'Sum of Fiscal Year Value by Product L3 (2025, Exclude LOD)' (sum_fiscal_year_by_product_l3_2025_exclude_lod). Description: The sum of the Fiscal_Year column, grouped by Product_L3, specifically for Fiscal Year 2025. This metric's calculation (summing the year itself) is unusual and may indicate a misconfiguration or a proxy for a count. This metric originates from the `dv_exclude_product_l3_and_l4` table.. Executable SQL: SELECT
  t0.Product_L3 AS Product_L3,
  SUM(SAFE_CAST(t0.Fiscal_Year AS INT64)) AS Sum_Fiscal_Year_Value
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025)
GROUP BY 1 - Metric: 'Total Product Revenue (2025, PACMAN Running Expense)' (total_product_revenue_2025_pacman_expense). Description: Total Product Revenue for Fiscal Year 2025 from the `dv_pacman_running_expense` table.. Executable SQL: SELECT
  SUM(t0.Product_Revenue) AS Total_Product_Revenue
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) - Metric: 'Sum of Fiscal Year Value by Product L3 (Exclude LOD)' (sum_fiscal_year_by_product_l3_exclude_lod). Description: The sum of the Fiscal_Year column, grouped by Product_L3, without any fiscal year filter. This metric's calculation (summing the year itself) is unusual and may indicate a misconfiguration or a proxy for a count. This metric originates from the `dv_exclude_product_l3_and_l4` table.. Executable SQL: SELECT
  t0.Product_L3 AS Product_L3,
  SUM(SAFE_CAST(t0.Fiscal_Year AS INT64)) AS Sum_Fiscal_Year_Value
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
GROUP BY 1 - Metric: 'Sum of Fiscal Year Value by Product L3 (PACMAN Running Expense)' (sum_fiscal_year_by_product_l3_pacman_expense). Description: The sum of the Fiscal_Year column, grouped by Product_L3, from the `dv_pacman_running_expense` table. This metric's calculation (summing the year itself) is unusual and may indicate a misconfiguration or a proxy for a count.. Executable SQL: SELECT
  t0.Product_L3 AS Product_L3,
  SUM(SAFE_CAST(t0.Fiscal_Year AS INT64)) AS Sum_Fiscal_Year_Value
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
GROUP BY 1 - Metric: 'Total Product Revenue by Category (2025, Advertising, PACMAN Running Expense)' (total_product_revenue_by_category_2025_advertising_pacman_expense). Description: Total Product Revenue grouped by Category, filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  SUM(t0.Product_Revenue) AS Total_Product_Revenue
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1 - Metric: 'Running Expense Level 2 by Category (2025, Advertising, PACMAN Running Expense)' (running_expense_level_2_by_category_2025_advertising_pacman_expense). Description: Running Expense for Margin Level '2', dynamically selected based on Category (CONSUMER or ADVERTISING), filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  MAX(CASE WHEN (t0.Category = 'CONSUMER' AND SAFE_CAST(t0.Margin_Level AS STRING) = '2') THEN t0.Running_Expense_CONSUMER_2 WHEN (t0.Category = 'ADVERTISING' AND SAFE_CAST(t0.Margin_Level AS STRING) = '2') THEN t0.Running_Expense_ADVERTISING_2 ELSE 0 END) AS Running_Expense_Level_2
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1 - Metric: 'Running Expense Level 3 by Category (2025, Advertising, PACMAN Running Expense)' (running_expense_level_3_by_category_2025_advertising_pacman_expense). Description: Running Expense for Margin Level '3', dynamically selected based on Category (CONSUMER or ADVERTISING), filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  MAX(CASE WHEN (t0.Category = 'CONSUMER' AND SAFE_CAST(t0.Margin_Level AS STRING) = '3') THEN t0.Running_Expense_CONSUMER_3 WHEN (t0.Category = 'ADVERTISING' AND SAFE_CAST(t0.Margin_Level AS STRING) = '3') THEN t0.Running_Expense_ADVERTISING_3 ELSE 0 END) AS Running_Expense_Level_3
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1 - Metric: 'Running Expense Level 4 by Category (2025, Advertising, PACMAN Running Expense)' (running_expense_level_4_by_category_2025_advertising_pacman_expense). Description: Running Expense for Margin Level '4', dynamically selected based on Category (CONSUMER or ADVERTISING), filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  MAX(CASE WHEN (t0.Category = 'CONSUMER' AND SAFE_CAST(t0.Margin_Level AS STRING) = '4') THEN t0.Running_Expense_CONSUMER_4 WHEN (t0.Category = 'ADVERTISING' AND SAFE_CAST(t0.Margin_Level AS STRING) = '4') THEN t0.Running_Expense_ADVERTISING_4 ELSE 0 END) AS Running_Expense_Level_4
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1 - Metric: 'Running Expense Level 6 by Category (2025, Advertising, PACMAN Running Expense)' (running_expense_level_6_by_category_2025_advertising_pacman_expense). Description: Running Expense for Margin Level '6', dynamically selected based on Category (CONSUMER or ADVERTISING), filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  MAX(CASE WHEN (t0.Category = 'CONSUMER' AND SAFE_CAST(t0.Margin_Level AS STRING) = '6') THEN t0.Running_Expense_CONSUMER_6 WHEN (t0.Category = 'ADVERTISING' AND SAFE_CAST(t0.Margin_Level AS STRING) = '6') THEN t0.Running_Expense_ADVERTISING_6 ELSE 0 END) AS Running_Expense_Level_6
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1 - Metric: 'Running Expense Level 1 by Category (2025, Advertising, PACMAN Running Expense)' (running_expense_level_1_by_category_2025_advertising_pacman_expense). Description: Running Expense for Margin Level '1', dynamically selected based on Category (CONSUMER or ADVERTISING), filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  MAX(CASE WHEN (t0.Category = 'CONSUMER') THEN t0.Running_Expense_CONSUMER_1 WHEN (t0.Category = 'ADVERTISING') THEN t0.Running_Expense_ADVERTISING_1 ELSE 0 END) AS Running_Expense_Level_1
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1 - Metric: 'Running Expense Level 5 by Category (2025, Advertising, PACMAN Running Expense)' (running_expense_level_5_by_category_2025_advertising_pacman_expense). Description: Running Expense for Margin Level '5', dynamically selected based on Category (CONSUMER or ADVERTISING), filtered for Fiscal Year 2025 and 'ADVERTISING' category, from `dv_pacman_running_expense` table.. Executable SQL: SELECT
  t0.Category AS Category,
  MAX(CASE WHEN (t0.Category = 'CONSUMER') THEN t0.Running_Expense_CONSUMER_5 WHEN (t0.Category = 'ADVERTISING') THEN t0.Running_Expense_ADVERTISING_5 ELSE 0 END) AS Running_Expense_Level_5
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE SAFE_CAST(t0.Fiscal_Year AS INT64) IN (2025) AND t0.Category IN ('ADVERTISING')
GROUP BY 1"
87651b69-c43e-471f-9c4b-98df1208a844_summary,dashboard,87651b69-c43e-471f-9c4b-98df1208a844,Programmatic Sales Patches ,"Dashboard Summary for 'Programmatic Sales Patches ' (ID: 87651b69-c43e-471f-9c4b-98df1208a844). Business Domain: advertising. Complexity Score: 4/10. Consolidation Score: 7/10. Reasoning: The queries are straightforward aggregations and dimension lookups. There is high consolidation potential as multiple queries calculate variations of revenue and impressions, differing only by specific filter conditions (e.g., Advertiser, TransactionType, Date). Primary Data Sources: ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month. Contains 7 metrics. - Metric: 'Gross Revenue for The Smith Family' (revenue_gross_smith_family). Description: Total gross revenue generated specifically from 'The Smith Family *' advertiser.. Executable SQL: SELECT SUM(t0.RevenueGross) AS revenue_gross_smith_family FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 WHERE t0.Advertiser IN ('The Smith Family *') - Metric: 'Distinct DSPs' (distinct_dsp). Description: List of unique Demand-Side Platforms (DSPs) present in the data.. Executable SQL: SELECT DISTINCT t0.DSP AS distinct_dsp FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 - Metric: 'Distinct Sources' (distinct_source). Description: List of unique advertising sources present in the data.. Executable SQL: SELECT DISTINCT t0.Source AS distinct_source FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 - Metric: 'Paid Impressions (Guaranteed, Chemist Warehouse, Jun 2025)' (paid_impressions_guaranteed_chemist_warehouse_202506). Description: Total paid impressions for 'Guaranteed' transaction type from 'Chemist Warehouse *' advertiser for June 2025.. Executable SQL: SELECT SUM(t0.PaidImpressions) AS paid_impressions_guaranteed_chemist_warehouse_202506 FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 WHERE t0.TransactionType IN ('Guaranteed') AND t0.Advertiser IN ('Chemist Warehouse *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) = DATE '2025-06-01' - Metric: 'Gross Revenue (Guaranteed, Chemist Warehouse, Jun 2025)' (revenue_gross_guaranteed_chemist_warehouse_202506). Description: Total gross revenue for 'Guaranteed' transaction type from 'Chemist Warehouse *' advertiser for June 2025.. Executable SQL: SELECT SUM(t0.RevenueGross) AS revenue_gross_guaranteed_chemist_warehouse_202506 FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 WHERE t0.TransactionType IN ('Guaranteed') AND t0.Advertiser IN ('Chemist Warehouse *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) = DATE '2025-06-01' - Metric: 'Net Revenue by Buyer (Filtered Transaction Types)' (net_revenue_by_buyer_filtered_transaction_type). Description: Total net revenue aggregated by buyer, including only 'Deal', 'Direct', 'Guaranteed', and 'Open Auction' transaction types.. Executable SQL: SELECT t0.Buyer, SUM(t0.RevenueNet) AS net_revenue_by_buyer FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 WHERE t0.TransactionType IN ('Deal', 'Direct', 'Guaranteed', 'Open Auction') GROUP BY t0.Buyer - Metric: 'Distinct Calendar Month Start Dates' (distinct_calendar_month_start). Description: List of unique month start dates present in the data, derived from CalendarYear and CalendarMonth.. Executable SQL: SELECT DISTINCT SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS month_start_date FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0"
a17622e2-ad43-49cc-b3c5-19c95036fd14_summary,dashboard,a17622e2-ad43-49cc-b3c5-19c95036fd14,Advertising Rebates Dashboard,"Dashboard Summary for 'Advertising Rebates Dashboard' (ID: a17622e2-ad43-49cc-b3c5-19c95036fd14). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: Queries are similar, primarily differing by specific filters (e.g., financial month, account number) or the specific rebate column selected (rebate_2 vs rebate_3). This indicates strong potential for consolidation using dashboard parameters or a more unified data model. The SQL itself uses subqueries and SAFE_CAST, indicating moderate complexity. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client. Contains 16 metrics. - Metric: 'Total Gross Revenue (FY2025, Oct, Rebate 3)' (total_gross_revenue_fy2025_oct_rebate3). Description: Total gross revenue for booked or billed transactions in Financial Year 2025, October, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 - Metric: 'Total Gross Revenue Excl. Adj. (FY2025, Oct, Rebate 3)' (total_gross_revenue_ex_adj_fy2025_oct_rebate3). Description: Total gross revenue excluding adjustments for booked or billed transactions in Financial Year 2025, October, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 - Metric: 'Total Adjustment Amount (FY2025, Oct, Rebate 3)' (total_adjustment_amount_fy2025_oct_rebate3). Description: Total adjustment amount for booked or billed transactions in Financial Year 2025, October, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(adjustment_amount) AS total_adjustment_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 - Metric: 'Total Rebate 3 Amount (FY2025, Oct)' (total_rebate3_amount_fy2025_oct_nonzero). Description: Total Rebate 3 amount for booked or billed transactions in Financial Year 2025, October, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(rebate_3_amount) AS total_rebate_3_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 10.000000 - Metric: 'Total Gross Revenue (FY2025)' (total_gross_revenue_fy2025). Description: Total gross revenue for booked or billed transactions in Financial Year 2025, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes.. Executable SQL: SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND SAFE_CAST(financial_year AS STRING) = '2025' - Metric: 'Total Gross Revenue Excl. Adj. (FY2025)' (total_gross_revenue_ex_adj_fy2025). Description: Total gross revenue excluding adjustments for booked or billed transactions in Financial Year 2025, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes.. Executable SQL: SELECT SUM(gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND SAFE_CAST(financial_year AS STRING) = '2025' - Metric: 'Total Adjustment Amount (FY2025)' (total_adjustment_amount_fy2025). Description: Total adjustment amount for booked or billed transactions in Financial Year 2025, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes.. Executable SQL: SELECT SUM(adjustment_amount) AS total_adjustment_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND SAFE_CAST(financial_year AS STRING) = '2025' - Metric: 'Total Rebate 2 Amount (FY2025)' (total_rebate2_amount_fy2025_nonzero). Description: Total Rebate 2 amount for booked or billed transactions in Financial Year 2025, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 2 amount is non-zero.. Executable SQL: SELECT SUM(rebate_2_amount) AS total_rebate_2_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_2_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' - Metric: 'Total Rebate 3 Amount (FY2025)' (total_rebate3_amount_fy2025_nonzero). Description: Total Rebate 3 amount for booked or billed transactions in Financial Year 2025, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(rebate_3_amount) AS total_rebate_3_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' - Metric: 'Total Gross Revenue (FY2025, Sep, Rebate 3)' (total_gross_revenue_fy2025_sep_rebate3). Description: Total gross revenue for booked or billed transactions in Financial Year 2025, September, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 9.000000 - Metric: 'Total Gross Revenue Excl. Adj. (FY2025, Sep, Rebate 3)' (total_gross_revenue_ex_adj_fy2025_sep_rebate3). Description: Total gross revenue excluding adjustments for booked or billed transactions in Financial Year 2025, September, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 9.000000 - Metric: 'Total Adjustment Amount (FY2025, Sep, Rebate 3)' (total_adjustment_amount_fy2025_sep_rebate3). Description: Total adjustment amount for booked or billed transactions in Financial Year 2025, September, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(adjustment_amount) AS total_adjustment_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 9.000000 - Metric: 'Total Rebate 3 Amount (FY2025, Sep)' (total_rebate3_amount_fy2025_sep_nonzero). Description: Total Rebate 3 amount for booked or billed transactions in Financial Year 2025, September, excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes, specifically where Rebate 3 amount is non-zero.. Executable SQL: SELECT SUM(rebate_3_amount) AS total_rebate_3_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND rebate_3_amount != 0.000000 AND SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(financial_month AS FLOAT64) = 9.000000 - Metric: 'Total Gross Revenue (Account 4039072)' (total_gross_revenue_account_4039072). Description: Total gross revenue for booked or billed transactions for account number '4039072', excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes.. Executable SQL: SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND account_number = '4039072' - Metric: 'Total Gross Revenue Excl. Adj. (Account 4039072)' (total_gross_revenue_ex_adj_account_4039072). Description: Total gross revenue excluding adjustments for booked or billed transactions for account number '4039072', excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes.. Executable SQL: SELECT SUM(gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND account_number = '4039072' - Metric: 'Total Adjustment Amount (Account 4039072)' (total_adjustment_amount_account_4039072). Description: Total adjustment amount for booked or billed transactions for account number '4039072', excluding 'Medium Rare Content Agency', for Print/Digital revenue types and group subtypes.. Executable SQL: SELECT SUM(adjustment_amount) AS total_adjustment_amount FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND financial_year IS NOT NULL AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND revenue_type IN ('Print', 'Digital') AND revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital') AND account_number = '4039072'"
d3bcf796-2396-4a6f-b0a3-da0b7f299a58_summary,dashboard,d3bcf796-2396-4a6f-b0a3-da0b7f299a58,Publisher and Product Performance Dashboard - FY25 v2,"Dashboard Summary for 'Publisher and Product Performance Dashboard - FY25 v2' (ID: d3bcf796-2396-4a6f-b0a3-da0b7f299a58). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The SQL queries exhibit moderate complexity with nested subqueries, extensive use of CASE statements for conditional logic, and SAFE_DIVIDE for calculations. This indicates a well-structured but potentially complex data model. The dashboard would benefit significantly from consolidation as multiple queries derive variations of core revenue metrics and dimensions from the same base table, often with similar filtering logic. Consolidating these into fewer, more comprehensive metrics could improve maintainability and performance. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 10 metrics. - Metric: 'Advertiser Group' (advertiser_group_dim). Description: Groups advertisers for performance analysis, often used to filter or segment revenue data.. Executable SQL: SELECT DISTINCT advertiser_group FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE product_group IN ('Commercial Content', 'Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') - Metric: 'Product Group' (product_group_dim). Description: Categorizes products for sales and performance tracking, used for filtering and aggregation.. Executable SQL: SELECT DISTINCT product_group FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE product_group NOT IN ('Unknown') OR product_group IS NULL - Metric: 'Financial Ad Type Name' (fin_adtype_name_dim). Description: Describes the type of advertisement for financial reporting and analysis.. Executable SQL: SELECT DISTINCT fin_adtype_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE product_group NOT IN ('Unknown') OR product_group IS NULL - Metric: 'Unified Publication Name' (unified_publication_name_dim). Description: The consolidated name of the publication, used for reporting and filtering.. Executable SQL: SELECT DISTINCT unified_publication_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` - Metric: 'Financial Week' (financial_week_dim). Description: The financial week number for reporting, used for time-based analysis.. Executable SQL: SELECT DISTINCT SAFE_CAST(financial_week AS INT64) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE product_group IN ('Free News & Lifestyle', 'State & Communities', '') - Metric: 'Current FY Gross Revenue (k AUD)' (current_fy_gross_revenue_k_aud). Description: Total gross revenue for the current financial year, in thousands of AUD. This metric is derived from the 'gross_revenue_amount' column where 'relative_fy_year_offset' is 0.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE t0.product_group IN ('Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') - Metric: 'Current FY Non-Future Gross Revenue (k AUD)' (current_fy_non_future_gross_revenue_k_aud). Description: Total gross revenue for the current financial year, excluding amounts flagged as future periods, in thousands of AUD.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE t0.product_group IN ('Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') - Metric: 'STLY Gross Revenue (k AUD)' (stly_gross_revenue_k_aud). Description: Total gross revenue for the Same Time Last Year (STLY), in thousands of AUD. This is identified by 'relative_fy_year_offset' being -1 and 'stly_flag' being 'Y'.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = -1 AND t0.stly_flag = 'Y') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE t0.product_group IN ('Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') - Metric: 'Current FY Past Weeks Pub LGB' (current_fy_past_weeks_pub_lgb). Description: The 'pub_lgb' value (likely 'Publisher Look-ahead Gross Bookings' or similar) for the current financial year, aggregated for past weeks (relative_fy_week_offset < 0).. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.relative_fy_week_offset < 0) THEN t0.pub_lgb ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE t0.relative_fy_month_offset = 0 - Metric: 'Current FY Current Week Avg Pub LGB' (current_fy_current_week_avg_pub_lgb). Description: The average 'pub_lgb' value for the current financial year and current week, calculated as (pub_lgb * DOW_Today) / 7. 'DOW_Today' likely represents Day of Week Today.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.relative_fy_week_offset = 0) THEN SAFE_DIVIDE((t0.pub_lgb * t0.DOW_Today), 7) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE t0.relative_fy_month_offset = 0"
57d87efe-c112-4d42-be1b-045f0c8ca73e_summary,dashboard,57d87efe-c112-4d42-be1b-045f0c8ca73e,Commercial Finance Scorecards,"Dashboard Summary for 'Commercial Finance Scorecards' (ID: 57d87efe-c112-4d42-be1b-045f0c8ca73e). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The dashboard uses a single primary data source but generates highly complex, deeply nested SQL with dynamic column aliasing (`clmnX_`) and intricate date/week calculations. This boilerplate makes the queries difficult to parse manually. The high number of `SUM(clmnX_)` aliases for different variations of the same base metric (e.g., `Total_Revenue_B`, `Total_Revenue_V`, `Total_Revenue_6W`, `Total_Revenue`) indicates significant consolidation opportunities, as many metrics are just variations of a core concept. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard. Contains 129 metrics. - Metric: 'Always-on Digital Sales (Budget, Current Week)' (always_on_digital_sales_budget_current_week). Description: The budgeted sales volume for always-on digital products for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Always_on_Digital_Sales_B) AS always_on_digital_sales_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Always-on Digital Sales (Variance, Current Week)' (always_on_digital_sales_variance_current_week). Description: The variance in sales volume for always-on digital products for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Always_on_Digital_Sales_V) AS always_on_digital_sales_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Always-on Digital Sales (Actual, Current Week)' (always_on_digital_sales_actual_current_week). Description: The actual sales volume for always-on digital products for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Always_on_Digital_Sales) AS always_on_digital_sales_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Always-on Digital Sales (6-Week Rolling)' (always_on_digital_sales_6w_rolling). Description: The sum of always-on digital sales over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Always_on_Digital_Sales_6W) AS always_on_digital_sales_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Always-on Digital Sales (Actual, By Week)' (always_on_digital_sales_actual_by_week). Description: The actual sales volume for always-on digital products, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Always_on_Digital_Sales) AS always_on_digital_sales_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Breach Sales (Budget, Current Week)' (breach_sales_budget_current_week). Description: The budgeted sales volume from breaches for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Breach_Sales_B) AS breach_sales_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Breach Sales (Variance, Current Week)' (breach_sales_variance_current_week). Description: The variance in sales volume from breaches for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Breach_Sales_V) AS breach_sales_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Breach Sales (Actual, Current Week)' (breach_sales_actual_current_week). Description: The actual sales volume from breaches for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Breach_Sales) AS breach_sales_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Breach Sales (6-Week Rolling)' (breach_sales_6w_rolling). Description: The sum of breach sales over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Breach_Sales_6W) AS breach_sales_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Breach Sales (Actual, By Week)' (breach_sales_actual_by_week). Description: The actual sales volume from breaches, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Breach_Sales) AS breach_sales_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Closing Base 3rd Party (Budget, Current Week)' (closing_base_3rd_party_budget_current_week). Description: The budgeted closing base for 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_B) AS closing_base_3rd_party_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party (Variance, Current Week)' (closing_base_3rd_party_variance_current_week). Description: The variance in closing base for 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_V) AS closing_base_3rd_party_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party (Actual, Current Week)' (closing_base_3rd_party_actual_current_week). Description: The actual closing base for 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party) AS closing_base_3rd_party_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party (6-Week Rolling)' (closing_base_3rd_party_6w_rolling). Description: The sum of closing base for 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_6W) AS closing_base_3rd_party_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party (Actual, By Week)' (closing_base_3rd_party_actual_by_week). Description: The actual closing base for 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party) AS closing_base_3rd_party_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Closing Base 3rd Party APLS (Actual, Current Week)' (closing_base_3rd_party_apls_actual_current_week). Description: The actual closing base for APLS 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_APLS) AS closing_base_3rd_party_apls_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party APLS (6-Week Rolling)' (closing_base_3rd_party_apls_6w_rolling). Description: The sum of closing base for APLS 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_APLS_6W) AS closing_base_3rd_party_apls_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party APLS (Actual, By Week)' (closing_base_3rd_party_apls_actual_by_week). Description: The actual closing base for APLS 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_APLS) AS closing_base_3rd_party_apls_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Closing Base 3rd Party GPLA (Actual, Current Week)' (closing_base_3rd_party_gpla_actual_current_week). Description: The actual closing base for GPLA 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_GPLA) AS closing_base_3rd_party_gpla_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party GPLA (6-Week Rolling)' (closing_base_3rd_party_gpla_6w_rolling). Description: The sum of closing base for GPLA 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_GPLA_6W) AS closing_base_3rd_party_gpla_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base 3rd Party GPLA (Actual, By Week)' (closing_base_3rd_party_gpla_actual_by_week). Description: The actual closing base for GPLA 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_3rd_Party_GPLA) AS closing_base_3rd_party_gpla_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Closing Base Consumer (Actual, Current Week)' (closing_base_consumer_actual_current_week). Description: The actual closing base for consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_Consumer) AS closing_base_consumer_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base Consumer (6-Week Rolling)' (closing_base_consumer_6w_rolling). Description: The sum of closing base for consumer subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_Consumer) AS closing_base_consumer_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Closing Base Consumer (Actual, By Week)' (closing_base_consumer_actual_by_week). Description: The actual closing base for consumer subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Closing_Base_Consumer) AS closing_base_consumer_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Essentials (Budget, Current Week)' (essentials_budget_current_week). Description: The budgeted volume for essential products/services for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Essentials_B) AS essentials_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Essentials (Variance, Current Week)' (essentials_variance_current_week). Description: The variance in volume for essential products/services for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Essentials_V) AS essentials_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Essentials (Actual, Current Week)' (essentials_actual_current_week). Description: The actual volume for essential products/services for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Essentials) AS essentials_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Essentials (6-Week Rolling)' (essentials_6w_rolling). Description: The sum of essential products/services volume over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Essentials_6W) AS essentials_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Essentials (Actual, By Week)' (essentials_actual_by_week). Description: The actual volume for essential products/services, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Essentials) AS essentials_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Failed Payment Volume (Actual, Current Week)' (failed_payment_volume_actual_current_week). Description: The actual volume of failed payments for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Failed_Payment_Volume) AS failed_payment_volume_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Failed Payment Volume (6-Week Rolling)' (failed_payment_volume_6w_rolling). Description: The sum of failed payment volume over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Failed_Payment_Volume_6W) AS failed_payment_volume_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Failed Payment Volume (Actual, By Week)' (failed_payment_volume_actual_by_week). Description: The actual volume of failed payments, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Failed_Payment_Volume) AS failed_payment_volume_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'General Offer Sales (Budget, Current Week)' (general_offer_sales_budget_current_week). Description: The budgeted sales volume from general offers for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.General_Offer_Sales_B) AS general_offer_sales_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'General Offer Sales (Variance, Current Week)' (general_offer_sales_variance_current_week). Description: The variance in sales volume from general offers for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.General_Offer_Sales_V) AS general_offer_sales_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'General Offer Sales (Actual, Current Week)' (general_offer_sales_actual_current_week). Description: The actual sales volume from general offers for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.General_Offer_Sales) AS general_offer_sales_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'General Offer Sales (6-Week Rolling)' (general_offer_sales_6w_rolling). Description: The sum of general offer sales over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.General_Offer_Sales_6W) AS general_offer_sales_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'General Offer Sales (Actual, By Week)' (general_offer_sales_actual_by_week). Description: The actual sales volume from general offers, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.General_Offer_Sales) AS general_offer_sales_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Net Cancels (Budget, Current Week)' (net_cancels_budget_current_week). Description: The budgeted net cancellations for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Cancels_B) AS net_cancels_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Cancels (Variance, Current Week)' (net_cancels_variance_current_week). Description: The variance in net cancellations for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Cancels_V) AS net_cancels_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Cancels (Actual, Current Week)' (net_cancels_actual_current_week). Description: The actual net cancellations for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Cancels) AS net_cancels_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Cancels (6-Week Rolling)' (net_cancels_6w_rolling). Description: The sum of net cancellations over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Cancels_6W) AS net_cancels_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Cancels (Actual, By Week)' (net_cancels_actual_by_week). Description: The actual net cancellations, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Cancels) AS net_cancels_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Net Growth 3rd Party (Budget, Current Week)' (net_growth_3rd_party_budget_current_week). Description: The budgeted net growth for 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_B) AS net_growth_3rd_party_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party (Variance, Current Week)' (net_growth_3rd_party_variance_current_week). Description: The variance in net growth for 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_V) AS net_growth_3rd_party_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party (Actual, Current Week)' (net_growth_3rd_party_actual_current_week). Description: The actual net growth for 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party) AS net_growth_3rd_party_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party (6-Week Rolling)' (net_growth_3rd_party_6w_rolling). Description: The sum of net growth for 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_6W) AS net_growth_3rd_party_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party (Actual, By Week)' (net_growth_3rd_party_actual_by_week). Description: The actual net growth for 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party) AS net_growth_3rd_party_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Net Growth 3rd Party APLS (Actual, Current Week)' (net_growth_3rd_party_apls_actual_current_week). Description: The actual net growth for APLS 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_APLS) AS net_growth_3rd_party_apls_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party APLS (6-Week Rolling)' (net_growth_3rd_party_apls_6w_rolling). Description: The sum of net growth for APLS 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_APLS_6W) AS net_growth_3rd_party_apls_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party APLS (Actual, By Week)' (net_growth_3rd_party_apls_actual_by_week). Description: The actual net growth for APLS 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_APLS) AS net_growth_3rd_party_apls_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Net Growth 3rd Party GPLA (Actual, Current Week)' (net_growth_3rd_party_gpla_actual_current_week). Description: The actual net growth for GPLA 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_GPLA) AS net_growth_3rd_party_gpla_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party GPLA (6-Week Rolling)' (net_growth_3rd_party_gpla_6w_rolling). Description: The sum of net growth for GPLA 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_GPLA_6W) AS net_growth_3rd_party_gpla_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth 3rd Party GPLA (Actual, By Week)' (net_growth_3rd_party_gpla_actual_by_week). Description: The actual net growth for GPLA 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_3rd_Party_GPLA) AS net_growth_3rd_party_gpla_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Net Growth Consumer (Budget, Current Week)' (net_growth_consumer_budget_current_week). Description: The budgeted net growth for consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_Consumer_B) AS net_growth_consumer_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Consumer (Variance, Current Week)' (net_growth_consumer_variance_current_week). Description: The variance in net growth for consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_Consumer_V) AS net_growth_consumer_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Consumer (Actual, Current Week)' (net_growth_consumer_actual_current_week). Description: The actual net growth for consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_Consumer) AS net_growth_consumer_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Consumer (6-Week Rolling)' (net_growth_consumer_6w_rolling). Description: The sum of net growth for consumer subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_Consumer_6W) AS net_growth_consumer_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Consumer (Actual, By Week)' (net_growth_consumer_actual_by_week). Description: The actual net growth for consumer subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_Consumer) AS net_growth_consumer_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Net Growth Incl. 3rd Party (Budget, Current Week)' (net_growth_incl_3rd_party_budget_current_week). Description: The budgeted net growth including 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_incl_3rd_Party_B) AS net_growth_incl_3rd_party_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Incl. 3rd Party (Variance, Current Week)' (net_growth_incl_3rd_party_variance_current_week). Description: The variance in net growth including 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_incl_3rd_Party_V) AS net_growth_incl_3rd_party_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Incl. 3rd Party (Actual, Current Week)' (net_growth_incl_3rd_party_actual_current_week). Description: The actual net growth including 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_incl_3rd_Party) AS net_growth_incl_3rd_party_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Incl. 3rd Party (6-Week Rolling)' (net_growth_incl_3rd_party_6w_rolling). Description: The sum of net growth including 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_incl_3rd_party_6W) AS net_growth_incl_3rd_party_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Net Growth Incl. 3rd Party (Actual, By Week)' (net_growth_incl_3rd_party_actual_by_week). Description: The actual net growth including 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Net_Growth_incl_3rd_Party) AS net_growth_incl_3rd_party_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Other Sales (Budget, Current Week)' (other_sales_budget_current_week). Description: The budgeted sales volume from other sources for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Other_Sales_B) AS other_sales_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Other Sales (Variance, Current Week)' (other_sales_variance_current_week). Description: The variance in sales volume from other sources for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Other_Sales_V) AS other_sales_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Other Sales (Actual, Current Week)' (other_sales_actual_current_week). Description: The actual sales volume from other sources for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Other_Sales) AS other_sales_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Other Sales (6-Week Rolling)' (other_sales_6w_rolling). Description: The sum of other sales volume over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Other_Sales_6W) AS other_sales_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Other Sales (Actual, By Week)' (other_sales_actual_by_week). Description: The actual sales volume from other sources, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Other_Sales) AS other_sales_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue 3rd Party (Budget, Current Week)' (revenue_3rd_party_budget_current_week). Description: The budgeted revenue from 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_B) AS revenue_3rd_party_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party (Variance, Current Week)' (revenue_3rd_party_variance_current_week). Description: The variance in revenue from 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_V) AS revenue_3rd_party_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party (Actual, Current Week)' (revenue_3rd_party_actual_current_week). Description: The actual revenue from 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party) AS revenue_3rd_party_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party (6-Week Rolling)' (revenue_3rd_party_6w_rolling). Description: The sum of revenue from 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_6W) AS revenue_3rd_party_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party (Actual, By Week)' (revenue_3rd_party_actual_by_week). Description: The actual revenue from 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party) AS revenue_3rd_party_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue 3rd Party APLS (Actual, Current Week)' (revenue_3rd_party_apls_actual_current_week). Description: The actual revenue from APLS 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_APLS) AS revenue_3rd_party_apls_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party APLS (6-Week Rolling)' (revenue_3rd_party_apls_6w_rolling). Description: The sum of revenue from APLS 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_APLS_6W) AS revenue_3rd_party_apls_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party APLS (Actual, By Week)' (revenue_3rd_party_apls_actual_by_week). Description: The actual revenue from APLS 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_APLS) AS revenue_3rd_party_apls_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue 3rd Party GPLA (Actual, Current Week)' (revenue_3rd_party_gpla_actual_current_week). Description: The actual revenue from GPLA 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_GPLA) AS revenue_3rd_party_gpla_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party GPLA (6-Week Rolling)' (revenue_3rd_party_gpla_6w_rolling). Description: The sum of revenue from GPLA 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_GPLA_6W) AS revenue_3rd_party_gpla_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue 3rd Party GPLA (Actual, By Week)' (revenue_3rd_party_gpla_actual_by_week). Description: The actual revenue from GPLA 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_3rd_Party_GPLA) AS revenue_3rd_party_gpla_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue Campus (Budget, Current Week)' (revenue_campus_budget_current_week). Description: The budgeted revenue from campus subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Campus_B) AS revenue_campus_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Campus (Variance, Current Week)' (revenue_campus_variance_current_week). Description: The variance in revenue from campus subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Campus_V) AS revenue_campus_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Campus (Actual, Current Week)' (revenue_campus_actual_current_week). Description: The actual revenue from campus subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Campus) AS revenue_campus_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Campus (6-Week Rolling)' (revenue_campus_6w_rolling). Description: The sum of revenue from campus subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Campus_6W) AS revenue_campus_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Campus (Actual, By Week)' (revenue_campus_actual_by_week). Description: The actual revenue from campus subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Campus) AS revenue_campus_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue Consumer (Budget, Current Week)' (revenue_consumer_budget_current_week). Description: The budgeted revenue from consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Consumer_B) AS revenue_consumer_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Consumer (Variance, Current Week)' (revenue_consumer_variance_current_week). Description: The variance in revenue from consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Consumer_V) AS revenue_consumer_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Consumer (Actual, Current Week)' (revenue_consumer_actual_current_week). Description: The actual revenue from consumer subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Consumer) AS revenue_consumer_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Consumer (6-Week Rolling)' (revenue_consumer_6w_rolling). Description: The sum of revenue from consumer subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Consumer_6W) AS revenue_consumer_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Consumer (Actual, By Week)' (revenue_consumer_actual_by_week). Description: The actual revenue from consumer subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Consumer) AS revenue_consumer_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue Corp (Budget, Current Week)' (revenue_corp_budget_current_week). Description: The budgeted revenue from corporate subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Corp_B) AS revenue_corp_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Corp (Variance, Current Week)' (revenue_corp_variance_current_week). Description: The variance in revenue from corporate subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Corp_V) AS revenue_corp_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Corp (Actual, Current Week)' (revenue_corp_actual_current_week). Description: The actual revenue from corporate subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Corp) AS revenue_corp_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Corp (6-Week Rolling)' (revenue_corp_6w_rolling). Description: The sum of revenue from corporate subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Corp_6W) AS revenue_corp_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Corp (Actual, By Week)' (revenue_corp_actual_by_week). Description: The actual revenue from corporate subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Corp) AS revenue_corp_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Revenue Other (Budget, Current Week)' (revenue_other_budget_current_week). Description: The budgeted revenue from other sources for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Other_B) AS revenue_other_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Other (Variance, Current Week)' (revenue_other_variance_current_week). Description: The variance in revenue from other sources for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Other_V) AS revenue_other_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Other (Actual, Current Week)' (revenue_other_actual_current_week). Description: The actual revenue from other sources for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Other) AS revenue_other_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Other (6-Week Rolling)' (revenue_other_6w_rolling). Description: The sum of revenue from other sources over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Other_6W) AS revenue_other_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Revenue Other (Actual, By Week)' (revenue_other_actual_by_week). Description: The actual revenue from other sources, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Revenue_Other) AS revenue_other_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Switches (Budget, Current Week)' (switches_budget_current_week). Description: The budgeted volume of switches for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Switches_B) AS switches_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Switches (Variance, Current Week)' (switches_variance_current_week). Description: The variance in volume of switches for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Switches_V) AS switches_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Switches (Actual, Current Week)' (switches_actual_current_week). Description: The actual volume of switches for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Switches) AS switches_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Switches (6-Week Rolling)' (switches_6w_rolling). Description: The sum of switches volume over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Switches_6W) AS switches_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Switches (Actual, By Week)' (switches_actual_by_week). Description: The actual volume of switches, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Switches) AS switches_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Total Cancels Excl. 3rd Party (Budget, Current Week)' (total_cancels_excluding_3rd_party_budget_current_week). Description: The budgeted total cancellations excluding 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_excluding_3rd_Party_B) AS total_cancels_excluding_3rd_party_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Excl. 3rd Party (Variance, Current Week)' (total_cancels_excluding_3rd_party_variance_current_week). Description: The variance in total cancellations excluding 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_excluding_3rd_Party_V) AS total_cancels_excluding_3rd_party_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Excl. 3rd Party (Actual, Current Week)' (total_cancels_excluding_3rd_party_actual_current_week). Description: The actual total cancellations excluding 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_excluding_3rd_Party) AS total_cancels_excluding_3rd_party_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Excl. 3rd Party (6-Week Rolling)' (total_cancels_excluding_3rd_party_6w_rolling). Description: The sum of total cancellations excluding 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_excluding_3rd_Party_6W) AS total_cancels_excluding_3rd_party_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Excl. 3rd Party (Actual, By Week)' (total_cancels_excluding_3rd_party_actual_by_week). Description: The actual total cancellations excluding 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_excluding_3rd_Party) AS total_cancels_excluding_3rd_party_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Total Cancels Incl. 3rd Party (Budget, Current Week)' (total_cancels_including_3rd_party_budget_current_week). Description: The budgeted total cancellations including 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_including_3rd_Party_B) AS total_cancels_including_3rd_party_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Incl. 3rd Party (Variance, Current Week)' (total_cancels_including_3rd_party_variance_current_week). Description: The variance in total cancellations including 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_including_3rd_Party_V) AS total_cancels_including_3rd_party_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Incl. 3rd Party (Actual, Current Week)' (total_cancels_including_3rd_party_actual_current_week). Description: The actual total cancellations including 3rd party subscriptions for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_including_3rd_Party) AS total_cancels_including_3rd_party_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Incl. 3rd Party (6-Week Rolling)' (total_cancels_including_3rd_party_6w_rolling). Description: The sum of total cancellations including 3rd party subscriptions over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_including_3rd_Party_6W) AS total_cancels_including_3rd_party_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Cancels Incl. 3rd Party (Actual, By Week)' (total_cancels_including_3rd_party_actual_by_week). Description: The actual total cancellations including 3rd party subscriptions, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Cancels_including_3rd_Party) AS total_cancels_including_3rd_party_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Total Closing Base (Budget, Current Week)' (total_closing_base_budget_current_week). Description: The budgeted total closing base for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Closing_Base_B) AS total_closing_base_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Closing Base (Variance, Current Week)' (total_closing_base_variance_current_week). Description: The variance in total closing base for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Closing_Base_V) AS total_closing_base_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Closing Base (Actual, Current Week)' (total_closing_base_actual_current_week). Description: The actual total closing base for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Closing_Base) AS total_closing_base_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Closing Base (6-Week Rolling)' (total_closing_base_6w_rolling). Description: The sum of total closing base over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Closing_Base_6W) AS total_closing_base_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Closing Base (Actual, By Week)' (total_closing_base_actual_by_week). Description: The actual total closing base, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Closing_Base) AS total_closing_base_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Total Revenue (Budget, Current Week)' (total_revenue_budget_current_week). Description: The budgeted total revenue for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Revenue_B) AS total_revenue_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Revenue (Variance, Current Week)' (total_revenue_variance_current_week). Description: The variance in total revenue for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Revenue_V) AS total_revenue_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Revenue (Actual, Current Week)' (total_revenue_actual_current_week). Description: The actual total revenue for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Revenue) AS total_revenue_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Revenue (6-Week Rolling)' (total_revenue_6w_rolling). Description: The sum of total revenue over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Revenue_6W) AS total_revenue_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Revenue (Actual, By Week)' (total_revenue_actual_by_week). Description: The actual total revenue, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Revenue) AS total_revenue_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10; - Metric: 'Total Weekly Sales (Budget, Current Week)' (total_weekly_sales_budget_current_week). Description: The budgeted total weekly sales for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Weekly_Sales_B) AS total_weekly_sales_budget_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 31 /* Adjusted week number for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Weekly Sales (Variance, Current Week)' (total_weekly_sales_variance_current_week). Description: The variance in total weekly sales for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Weekly_Sales_V) AS total_weekly_sales_variance_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Weekly Sales (Actual, Current Week)' (total_weekly_sales_actual_current_week). Description: The actual total weekly sales for the current fiscal week, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Weekly_Sales) AS total_weekly_sales_actual_current_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year = 38 /* Adjusted week number for 2025-03-30 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Weekly Sales (6-Week Rolling)' (total_weekly_sales_6w_rolling). Description: The sum of total weekly sales over the last 6 fiscal weeks, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Weekly_Sales_6W) AS total_weekly_sales_6w_rolling
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025
  AND t0.fy_week_of_year BETWEEN (31 - 5) AND 31 /* 6-week rolling period ending adjusted week 31 for 2025-02-10 */
  AND TRUE /* Dashboard filter set to 'All Mastheads' */
LIMIT 1; - Metric: 'Total Weekly Sales (Actual, By Week)' (total_weekly_sales_actual_by_week). Description: The actual total weekly sales, broken down by fiscal week and year, filtered for all mastheads.. Executable SQL: SELECT SUM(t0.Total_Weekly_Sales) AS total_weekly_sales_actual_by_week, t0.fy_week_of_year, t0.fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE TRUE /* Dashboard filter set to 'All Mastheads' */
GROUP BY t0.fy_week_of_year, t0.fy_year
LIMIT 10;"
8956e94b-f6d1-46a3-9c7f-87a91fbe98b5_summary,dashboard,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5,LODs,"Dashboard Summary for 'LODs' (ID: 8956e94b-f6d1-46a3-9c7f-87a91fbe98b5). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The dashboard queries utilize nested subqueries, a CTE, and complex conditional logic (CASE statements) for metric derivation, indicating a high technical complexity. Multiple identical queries and varied aliases for the same underlying metrics suggest significant opportunities for consolidation, potentially through a unified data model or more extensive use of calculated fields within the dashboarding tool. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly. Contains 4 metrics. - Metric: 'Gross Revenue (Current FY)' (gross_revenue_current_fy). Description: Total gross revenue for the current financial year (relative_fy_year_offset = 0), considering only 'BILLED' or 'BOOKED' transactions, excluding 'ROP COMPOSITE' style, 'MEDIUM RARE CONTENT AGENCY' division, and specific 'SUDDENLY%' publications.. Executable SQL: SELECT SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS gross_revenue_current_fy FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly` WHERE relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) - Metric: 'Pipeline (Current FY)' (pipeline_current_fy). Description: Total pipeline amount for the current financial year (relative_fy_year_offset = 0), considering only 'BILLED' or 'BOOKED' transactions, excluding 'ROP COMPOSITE' style, 'MEDIUM RARE CONTENT AGENCY' division, and specific 'SUDDENLY%' publications.. Executable SQL: SELECT SUM(CASE WHEN relative_fy_year_offset = 0 THEN pipeline ELSE 0 END) AS pipeline_current_fy FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly` WHERE relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) - Metric: 'Total Pipeline' (total_pipeline). Description: Total pipeline amount across all relevant financial years (-1, 0, 1), considering only 'BILLED' or 'BOOKED' transactions, excluding 'ROP COMPOSITE' style, 'MEDIUM RARE CONTENT AGENCY' division, and specific 'SUDDENLY%' publications.. Executable SQL: SELECT SUM(pipeline) AS total_pipeline FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly` WHERE relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) - Metric: 'Is Digital Other Segment Present' (is_digital_other_segment_present). Description: Indicates if 'Digital Other' is present in the sales segment L2 name sync for any record within the aggregated group, considering only 'BILLED' or 'BOOKED' transactions, excluding 'ROP COMPOSITE' style, 'MEDIUM RARE CONTENT AGENCY' division, and specific 'SUDDENLY%' publications.. Executable SQL: SELECT MAX(sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_segment_present FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly` WHERE relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))"
c441950c-1e3f-432c-9838-847d1d315b9e_summary,dashboard,c441950c-1e3f-432c-9838-847d1d315b9e,Circulation Insights for Analysis,"Dashboard Summary for 'Circulation Insights for Analysis' (ID: c441950c-1e3f-432c-9838-847d1d315b9e). Business Domain: finance. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: Queries involve multiple levels of subqueries, complex CASE statements for dimension mapping (`gl_publication_code` to publication names) and metric derivation (`route_volume` by `charge_type`), and various filtering combinations. This indicates moderate to high technical complexity. The repetition of CASE logic for both publication mapping and charge type breakdown across different queries suggests significant opportunities for consolidation into more reusable components or a more robust data model. Primary Data Sources: ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights;ncau-data-newsquery-prd.prstn_finance.v_calendar_dim. Contains 8 metrics. - Metric: 'Fiscal Week ID' (fiscal_week_id_dimension). Description: Unique identifier for a fiscal week, typically in YYYYWW format.. Executable SQL: SELECT DISTINCT fiscal_week_id FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` WHERE SAFE_CAST(LEFT(SAFE_CAST(fiscal_week_id AS STRING), 4) AS INT64) = 2025 LIMIT 100 - Metric: 'Fiscal Week ID (Estimate, Alternate Channels)' (fiscal_week_id_filtered_scenario_sales_channel). Description: Fiscal week IDs relevant to 'Estimate' scenarios and 'Alternate Channels' sales channel for fiscal year 2025.. Executable SQL: SELECT DISTINCT t0.fiscal_week_id FROM ( SELECT ci.fiscal_week_id, ci.sales_channel_l4, ci.scenario FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.scenario AS STRING) = 'Estimate' AND SAFE_CAST(t0.sales_channel_l4 AS STRING) = 'Alternate Channels' LIMIT 100 - Metric: 'Returns Volume (Retail, Friday)' (returns_volume_retail_friday). Description: Total volume of returned circulation items for the 'Retail' sales channel on 'Friday' for fiscal year 2025.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'RETURNS' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END) AS returns_volume_retail_friday FROM ( SELECT ci.charge_type, ci.route_volume, ci.sales_channel_l4, cal.day_short_name AS day_of_week, ci.fiscal_week_id FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.sales_channel_l4 AS STRING) = 'Retail' AND SAFE_CAST(t0.day_of_week AS STRING) = 'Fri' LIMIT 1 - Metric: 'Draw Volume (Filtered Publications, Specific Weeks)' (draw_volume_filtered_pubs_specific_weeks). Description: Total volume of drawn circulation items for specific publications (NTN, TCP, TVB, GCB, CM) during fiscal weeks 202543-202546.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'DRAW' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END) AS draw_volume_filtered_pubs FROM ( SELECT ci.charge_type, ci.route_volume, ci.fiscal_week_id, ci.gl_publication_code FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.fiscal_week_id AS INT64) IN (202543, 202544, 202545, 202546) AND (CASE WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('500', '560') THEN 'ADV' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '100' THEN 'AUS' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('400', '402') THEN 'CM' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9504' THEN 'Delicious' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9505' THEN 'Delicious Specials' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('110', '116') THEN 'DT' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '350' THEN 'GAD' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '670' THEN 'GCB' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '180' THEN 'Group Shared Services' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '156' THEN 'Hobart Print Services' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('301', '303') THEN 'HS' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '5003' THEN 'MDM' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('850', '852') THEN 'MERCURY' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('961', '963') THEN 'NTN' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '158' THEN 'Perth Print Services' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = 'Post Courier' THEN 'Post Courier' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '5024' THEN 'SC' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('9514', '9515') THEN 'Taste' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '5053' THEN 'TCHRN' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '450' THEN 'TCP' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '475' THEN 'TVB' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9560' THEN 'Vogue' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9556' THEN 'Vogue Living' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '305' THEN 'WT' ELSE 'Other' END) IN ('NTN', 'TCP', 'TVB', 'GCB', 'CM') LIMIT 1 - Metric: 'Total Returns Volume (Sunday)' (total_returns_volume_sunday). Description: Total volume of returned circulation items on 'Sunday' for fiscal year 2025.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'RETURNS' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END) AS total_returns_volume_sunday FROM ( SELECT ci.charge_type, ci.route_volume, cal.day_short_name AS day_of_week, ci.fiscal_week_id FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.day_of_week AS STRING) = 'Sun' LIMIT 1 - Metric: 'Total Draw Volume (Sunday)' (total_draw_volume_sunday). Description: Total volume of drawn circulation items on 'Sunday' for fiscal year 2025.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'DRAW' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END) AS total_draw_volume_sunday FROM ( SELECT ci.charge_type, ci.route_volume, cal.day_short_name AS day_of_week, ci.fiscal_week_id FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.day_of_week AS STRING) = 'Sun' LIMIT 1 - Metric: 'Total Route Volume (Sunday)' (total_route_volume_sunday). Description: Sum of Draw, Returns, and Adjustment volumes on 'Sunday' for fiscal year 2025.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'DRAW' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END + CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'ADJUSTMENT' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END + CASE WHEN SAFE_CAST(t0.charge_type AS STRING) = 'RETURNS' THEN SAFE_CAST(t0.route_volume AS BIGNUMERIC) ELSE 0 END) AS total_route_volume_sunday FROM ( SELECT ci.charge_type, ci.route_volume, cal.day_short_name AS day_of_week, ci.fiscal_week_id FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.day_of_week AS STRING) = 'Sun' LIMIT 1 - Metric: 'Total Charge Amount (Subscriptions, DT Pub, Specific Weeks)' (total_charge_amount_subscriptions_dt_specific_weeks). Description: Total financial charge amount for 'Subscriptions' sales channel and 'DT' publication during fiscal weeks 202533-202540.. Executable SQL: SELECT SUM(SAFE_CAST(t0.charge_amount AS BIGNUMERIC)) AS total_charge_amount FROM ( SELECT ci.charge_amount, ci.fiscal_week_id, ci.gl_publication_code, ci.sales_channel_l4 FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci LEFT JOIN `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal ON ci.charge_date = cal.calendar_date WHERE SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 ) AS t0 WHERE SAFE_CAST(t0.fiscal_week_id AS INT64) IN (202533, 202534, 202535, 202536, 202537, 202538, 202539, 202540) AND SAFE_CAST(t0.sales_channel_l4 AS STRING) = 'Subscriptions' AND (CASE WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('500', '560') THEN 'ADV' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '100' THEN 'AUS' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('400', '402') THEN 'CM' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9504' THEN 'Delicious' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9505' THEN 'Delicious Specials' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('110', '116') THEN 'DT' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '350' THEN 'GAD' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '670' THEN 'GCB' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '180' THEN 'Group Shared Services' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '156' THEN 'Hobart Print Services' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('301', '303') THEN 'HS' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '5003' THEN 'MDM' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('850', '852') THEN 'MERCURY' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('961', '963') THEN 'NTN' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '158' THEN 'Perth Print Services' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = 'Post Courier' THEN 'Post Courier' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '5024' THEN 'SC' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) IN ('9514', '9515') THEN 'Taste' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '5053' THEN 'TCHRN' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '450' THEN 'TCP' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '475' THEN 'TVB' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9560' THEN 'Vogue' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '9556' THEN 'Vogue Living' WHEN SAFE_CAST(t0.gl_publication_code AS STRING) = '305' THEN 'WT' ELSE 'Other' END) = 'DT' LIMIT 1"
4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3_summary,dashboard,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3,Copy of Interim Adsales Performance Dashboard for FY26,"Dashboard Summary for 'Copy of Interim Adsales Performance Dashboard for FY26' (ID: 4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The SQL queries exhibit extensive use of nested subqueries, complex CASE statements for conditional aggregations and derived dimensions, and date arithmetic. This indicates a high level of complexity in defining metrics and dimensions. The dashboard heavily reuses the `gross_revenue_amount` and `pipeline` fields with different filtering and year-over-year logic, suggesting a strong potential for consolidating these variations into fewer, more flexible base metrics with applied filters/parameters. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 22 metrics. - Metric: 'Gross Revenue Amount (Raw)' (gross_revenue_amount_raw). Description: The raw gross revenue amount before any transformations or conditional logic.. Executable SQL: SELECT SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current Financial Year Gross Revenue' (current_fy_gross_revenue). Description: Gross revenue amount for the current financial year (relative_fy_year_offset = 0).. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Prior Financial Year Gross Revenue' (prior_fy_gross_revenue). Description: Gross revenue amount for the prior financial year (relative_fy_year_offset = 1).. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current Financial Year Gross Revenue (in '000s)' (current_fy_gross_revenue_k). Description: Gross revenue amount for the current financial year, divided by 1000.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Prior Financial Year Gross Revenue (in '000s)' (prior_fy_gross_revenue_k). Description: Gross revenue amount for the prior financial year, divided by 1000.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Prior Financial Year Pipeline' (prior_fy_pipeline). Description: Pipeline amount for the prior financial year (relative_fy_year_offset = 1).. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 1) THEN t0.pipeline ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Conditional Gross Revenue (Type 1)' (conditional_gross_revenue_1). Description: Gross revenue amount based on complex conditions: current FY AND (unified_publication_name is OUTSTREAM/XTEND/EDMEDIA/ECOMMERCE) OR current FY AND (complex date condition relative to prior year reference date).. Executable SQL: SELECT SUM(CASE WHEN ((t0.relative_fy_year_offset = 0) AND (UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))) THEN t0.gross_revenue_amount WHEN ((t0.relative_fy_year_offset = 0) AND (SAFE_CAST(CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-17 07:12:26.397969+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Conditional Gross Revenue (Type 1, in '000s)' (conditional_gross_revenue_1_k). Description: Conditional Gross Revenue (Type 1) divided by 1000.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN ((t0.relative_fy_year_offset = 0) AND (UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))) THEN t0.gross_revenue_amount WHEN ((t0.relative_fy_year_offset = 0) AND (SAFE_CAST(CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-17 07:12:26.397969+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE NULL END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Conditional Gross Revenue (Type 2, in '000s)' (conditional_gross_revenue_2_k). Description: Gross revenue amount based on complex conditions (Type 2): current FY AND (unified_publication_name is OUTSTREAM/XTEND/EDMEDIA/ECOMMERCE) OR current FY AND (complex date condition relative to prior year reference date, different fixed date). Divided by 1000.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN ((t0.relative_fy_year_offset = 0) AND (UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))) THEN t0.gross_revenue_amount WHEN ((t0.relative_fy_year_offset = 0) AND (SAFE_CAST(CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-05-21 06:08:55.271540+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE NULL END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Non-Future Gross Revenue (in '000s)' (current_fy_not_future_gross_revenue_k). Description: Gross revenue amount for the current financial year, not marked as a future period, divided by 1000.. Executable SQL: SELECT SUM(CASE WHEN ((t0.relative_fy_year_offset = 0) AND (t0.is_future_period_flag = 'N')) THEN SAFE_DIVIDE(t0.gross_revenue_amount, 1000) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Minimum Data Load Timestamp' (min_load_timestamp). Description: The earliest timestamp when data was loaded into the table, truncated to the second. Useful for data freshness checks.. Executable SQL: SELECT MIN(DATETIME_TRUNC(t0.dw_asl_load_timestamp, SECOND)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Max Is Digital Other Sales Segment Sync' (max_is_digital_other_sales_segment_sync). Description: Maximum value of the boolean flag indicating if sales_segment_l_2_name_sync is 'Digital Other'. Used as a flag in some contexts.. Executable SQL: SELECT MAX(CASE WHEN (t0.sales_segment_l_2_name_sync = 'Digital Other') THEN 1 ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Short Month' (financial_short_month). Description: Short name of the financial month.. Executable SQL: SELECT DISTINCT t0.financial_short_month FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Quarter' (financial_quarter). Description: The financial quarter number.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.financial_quarter AS INT64) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Month' (financial_month). Description: The financial month number.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.financial_month AS INT64) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Year' (financial_year). Description: The financial year.. Executable SQL: SELECT DISTINCT t0.financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Product Group' (product_group). Description: The product group associated with the ad sales.. Executable SQL: SELECT DISTINCT t0.product_group FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Relative Financial Year Month Offset' (relative_fy_month_offset). Description: Offset of the financial month relative to the current financial year.. Executable SQL: SELECT MIN(t0.relative_fy_month_offset) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Sales GM Name (Formatted)' (sales_gm_name_formatted). Description: General Manager name for sales segment, with specific formatting for display.. Executable SQL: SELECT DISTINCT CASE WHEN (t0.sales_segment_gm_name = 'Renee Sycamore') THEN 'Renee Sycamore' WHEN (t0.sales_segment_gm_name = 'Ian Paterson') THEN ' Ian Paterson' WHEN (t0.sales_segment_gm_name = 'Natalie Grabbe') THEN '  Natalie Grabbe' WHEN (t0.sales_segment_gm_name = 'Kelly Healy') THEN '   Kelly Healy' WHEN (t0.sales_segment_gm_name = 'Belinda MacPherson') THEN '    Belinda MacPherson' WHEN (t0.sales_segment_gm_name = 'Lou Barrett') THEN '     Lou Barrett' WHEN (t0.sales_segment_gm_name = 'Vacant') THEN '      Vacant' WHEN (t0.sales_segment_gm_name = '') THEN '       null' ELSE NULL END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Revenue Type or XTEND Flag' (revenue_type_or_xtend). Description: The revenue type, or 'XTEND' if the xtend_flag is 'Y'.. Executable SQL: SELECT DISTINCT CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Sales Segment L2 Name' (sales_segment_l_2_name). Description: Level 2 name for the sales segment.. Executable SQL: SELECT DISTINCT t0.sales_segment_l_2_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Publication Group' (publication_group). Description: Categorization of unified publication names into 'Sundry Pubs' or 'Non Sundry Pubs'.. Executable SQL: SELECT DISTINCT CASE WHEN (t0.unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin')) THEN 'Sundry Pubs' ELSE 'Non Sundry Pubs' END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0"
2104a3f5-9424-4087-a928-e67fecae789a_summary,dashboard,2104a3f5-9424-4087-a928-e67fecae789a,Circulation Performance Dashboard_dev_20250415,"Dashboard Summary for 'Circulation Performance Dashboard_dev_20250415' (ID: 2104a3f5-9424-4087-a928-e67fecae789a). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 8/10. Reasoning: High complexity due to deeply nested subqueries and intricate CASE statements for deriving dimensions and metrics. High consolidation potential as many metrics are variations of core financial/volume data, differentiated primarily by filtering and time calculations, suggesting opportunities for pre-calculated dimensions or views. Primary Data Sources: ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_rel_timeperiod_weekly. Contains 12 metrics. - Metric: 'Current Week Actual Amount by Publication Group (Filtered)' (current_week_actual_amount_by_publication_group_filtered). Description: Total actual amount for the current fiscal week, grouped by a specific set of publication categories, excluding 'Other' and certain specific publications, for 'All Sales Channels'.. Executable SQL: SELECT
  CASE WHEN (t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times')) THEN '      Regionals' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN '     The Advertiser' WHEN (t0.publication_name IN ('The Australian')) THEN ' The Australian' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN '    The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN '   The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN '  The Herald Sun' ELSE '        Other' END AS publication_group,
  SUM(t0.Actual_Amount) AS current_week_actual_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.os_level_7 AS STRING) = 'All Sales Channels'
  AND (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times')) THEN '      Regionals' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN '     The Advertiser' WHEN (t0.publication_name IN ('The Australian')) THEN ' The Australian' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN '    The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN '   The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN '  The Herald Sun' ELSE '        Other' END) != '        Other'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) NOT IN ('Advertiser', 'Cairns Post', 'Courier Mail', 'Ed Media', 'Food', 'Gold Coast Bulletin', 'Group Support', 'Mackay', 'Northern Territory')
GROUP BY
  publication_group
LIMIT 10; - Metric: 'Current Week Actual Amount (Filtered Publications)' (current_week_actual_amount_filtered_publications). Description: Total actual amount for the current fiscal week, excluding specific publications, for 'All Sales Channels'.. Executable SQL: SELECT
  SUM(t0.Actual_Amount) AS current_week_actual_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_7 AS STRING) = 'All Sales Channels'
LIMIT 1; - Metric: 'Current Week Volume (Filtered Publications)' (current_week_volume_filtered_publications). Description: Total volume for the current fiscal week, excluding specific publications, for 'All Sales Channels'.. Executable SQL: SELECT
  SUM(t0.volume) AS current_week_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_7 AS STRING) = 'All Sales Channels'
LIMIT 1; - Metric: 'Budgeted Average Daily Volume (6/7 Day Pubs)' (budgeted_average_daily_volume_6_7_day_pubs). Description: Budgeted volume adjusted to an average daily volume based on whether the publication is a 6-day or 7-day publication, for the current fiscal week, for 'Subscriptions' sales channel, excluding specific publications.. Executable SQL: SELECT
  SUM(CASE
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = 'PNG' THEN 0
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = '6 Day Pubs' THEN SAFE_DIVIDE(t0.Budget_Volume, 6)
    ELSE SAFE_DIVIDE(t0.Budget_Volume, 7)
  END) AS budgeted_avg_daily_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_10 AS STRING) = 'Subscriptions'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('Sunday Tasmanian', 'Mercury')) THEN 'Mercury' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Geelong Advertiser', 'Mercury', 'Sunday Magazine (NSW)', 'Sunday Magazine (VIC)', 'Sunshine Coast', 'Sydney Suburbans', 'The Herald Sun', 'Weekly Times')
LIMIT 1; - Metric: 'Budgeted Average Daily Volume (6/7 Day Pubs, Alt Calc)' (budgeted_average_daily_volume_6_7_day_pubs_alt_calc). Description: Another calculation of budgeted volume adjusted to an average daily volume based on whether the publication is a 6-day or 7-day publication, for the current fiscal week, for 'Subscriptions' sales channel, excluding specific publications.. Executable SQL: SELECT
  SUM(CASE
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = 'PNG' THEN 0
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = '6 Day Pubs' THEN SAFE_DIVIDE(t0.Budget_Volume, 6)
    ELSE SAFE_DIVIDE(t0.Budget_Volume, 7)
  END) AS budgeted_avg_daily_volume_alt
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_10 AS STRING) = 'Subscriptions'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('Sunday Tasmanian', 'Mercury')) THEN 'Mercury' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Geelong Advertiser', 'Mercury', 'Sunday Magazine (NSW)', 'Sunday Magazine (VIC)', 'Sunshine Coast', 'Sydney Suburbans', 'The Herald Sun', 'Weekly Times')
LIMIT 1; - Metric: 'Adjusted Budget Volume (6/7 Day Pubs)' (adjusted_budget_volume_6_7_day_pubs). Description: Budget volume adjusted by complex rules involving 6/7 day publications and other factors, for the current fiscal week, for 'Subscriptions' sales channel, excluding specific publications.. Executable SQL: SELECT
  SUM(CASE
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = 'PNG' THEN 0
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = '6 Day Pubs' THEN SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.fy_year AS INT64) = 2025 AND SAFE_CAST(t0.publication_name AS STRING) = 'The Australian') THEN SAFE_DIVIDE(t0.Budget_Volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Sportsman') THEN SAFE_DIVIDE(t0.Budget_Volume, 2) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'Weekly Times') THEN t0.Budget_Volume * 5
        ELSE t0.Budget_Volume
      END), 6)
    ELSE SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.fy_year AS INT64) = 2025 AND SAFE_CAST(t0.publication_name AS STRING) = 'The Australian') THEN SAFE_DIVIDE(t0.Budget_Volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Sportsman') THEN SAFE_DIVIDE(t0.Budget_Volume, 2) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'Weekly Times') THEN t0.Budget_Volume * 5
        ELSE t0.Budget_Volume
      END), 7)
  END) AS adjusted_budget_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_10 AS STRING) = 'Subscriptions'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('Sunday Tasmanian', 'Mercury')) THEN 'Mercury' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Geelong Advertiser', 'Mercury', 'Sunday Magazine (NSW)', 'Sunday Magazine (VIC)', 'Sunshine Coast', 'Sydney Suburbans', 'The Herald Sun', 'Weekly Times')
LIMIT 1; - Metric: 'Adjusted Volume (6/7 Day Pubs)' (adjusted_volume_6_7_day_pubs). Description: Actual volume adjusted by complex rules involving 6/7 day publications and other factors, for the current fiscal week, for 'Subscriptions' sales channel, excluding specific publications.. Executable SQL: SELECT
  SUM(CASE
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = '6 Day Pubs' THEN SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.fy_year AS INT64) = 2025 AND SAFE_CAST(t0.publication_name AS STRING) = 'The Australian') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Sportsman') THEN SAFE_DIVIDE(t0.volume, 2) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'Weekly Times') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        ELSE t0.volume
      END), 6)
    ELSE SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.fy_year AS INT64) = 2025 AND SAFE_CAST(t0.publication_name AS STRING) = 'The Australian') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Sportsman') THEN SAFE_DIVIDE(t0.volume, 2) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'Weekly Times') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        ELSE t0.volume
      END), 7)
  END) AS adjusted_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_10 AS STRING) = 'Subscriptions'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('Sunday Tasmanian', 'Mercury')) THEN 'Mercury' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Geelong Advertiser', 'Mercury', 'Sunday Magazine (NSW)', 'Sunday Magazine (VIC)', 'Sunshine Coast', 'Sydney Suburbans', 'The Herald Sun', 'Weekly Times')
LIMIT 1; - Metric: 'Current Week Budget Amount by Publication Group (Filtered)' (current_week_budget_amount_by_publication_group_filtered). Description: Total budgeted amount for fiscal week 45, grouped by a specific set of publication categories, excluding 'Other', 'Weekly Times', and 'Regionals', for 'All Sales Channels'.. Executable SQL: SELECT
  CASE WHEN (t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG')) THEN '      Regionals' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN '     The Advertiser' WHEN (t0.publication_name IN ('The Australian')) THEN ' The Australian' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN '    The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN '   The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN '  The Herald Sun' WHEN (t0.publication_name IN ('Weekly Times')) THEN '       Weekly Times' ELSE '        Other' END AS publication_group,
  SUM(CASE WHEN SAFE_CAST(t0.fy_week_of_year AS INT64) = 45 THEN t0.Budget_Amount ELSE 0 END) AS current_week_budget_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) = (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.os_level_7 AS STRING) = 'All Sales Channels'
  AND (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG')) THEN '      Regionals' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN '     The Advertiser' WHEN (t0.publication_name IN ('The Australian')) THEN ' The Australian' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN '    The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN '   The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN '  The Herald Sun' WHEN (t0.publication_name IN ('Weekly Times')) THEN '       Weekly Times' ELSE '        Other' END) != '        Other'
  AND (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG')) THEN '      Regionals' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN '     The Advertiser' WHEN (t0.publication_name IN ('The Australian')) THEN ' The Australian' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN '    The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN '   The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN '  The Herald Sun' WHEN (t0.publication_name IN ('Weekly Times')) THEN '       Weekly Times' ELSE '        Other' END) != '       Weekly Times'
  AND (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG')) THEN '      Regionals' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN '     The Advertiser' WHEN (t0.publication_name IN ('The Australian')) THEN ' The Australian' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN '    The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN '   The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN '  The Herald Sun' WHEN (t0.publication_name IN ('Weekly Times')) THEN '       Weekly Times' ELSE '        Other' END) != '      Regionals'
GROUP BY
  publication_group
LIMIT 10; - Metric: 'CPTD Actual Average Daily Volume (6/7 Day Pubs)' (cptd_actual_average_daily_volume_6_7_day_pubs). Description: Actual volume adjusted to an average daily volume based on publication type (6-day/7-day), for the current period-to-date, for 'All Sales Channels', excluding specific publications.. Executable SQL: SELECT
  SUM(CASE
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = 'PNG' THEN 0
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = '6 Day Pubs' THEN SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Australian' OR SAFE_CAST(t0.publication_name AS STRING) = 'The Courier Mail') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1))
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Sportsman') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1) * 2) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'Weekly Times') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        WHEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN 'M-F' ELSE NULL END) = 'M-F' THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1) * 5) * 5
        ELSE SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1))
      END), 6)
    ELSE SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Australian' OR SAFE_CAST(t0.publication_name AS STRING) = 'The Courier Mail') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1))
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'The Sportsman') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1) * 2) * 5
        WHEN (SAFE_CAST(t0.publication_name AS STRING) = 'Weekly Times') THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)) * 5
        WHEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN 'M-F' ELSE NULL END) = 'M-F' THEN SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1) * 5) * 5
        ELSE SAFE_DIVIDE(t0.volume, (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1))
      END), 7)
  END) AS cptd_actual_avg_daily_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year AS INT64) = 2025
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) <= (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_7 AS STRING) = 'All Sales Channels'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Geelong Advertiser', 'Mercury', 'Sunday Tasmanian', 'Sunshine Coast', 'Sydney Suburbans', 'The Australian', 'The Daily Telegraph', 'The Herald Sun', 'Toowoomba', 'Townsville Bulletin', 'Weekly Times')
LIMIT 1; - Metric: 'CPTD Forecast/Actual Average Daily Volume (6/7 Day Pubs)' (cptd_forecast_actual_average_daily_volume_6_7_day_pubs). Description: Forecast or actual volume adjusted to an average daily volume based on publication type (6-day/7-day) and month of year, for the current period-to-date, for 'All Sales Channels', excluding specific publications.. Executable SQL: SELECT
  SUM(CASE
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = 'PNG' THEN 0
    WHEN (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) = '6 Day Pubs' THEN SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 4) THEN t0.volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 6) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) = 6) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 9) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) = 9) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 10) THEN t0.volume
        ELSE t0.Forecast_Volume
      END), 6)
    ELSE SAFE_DIVIDE(
      (CASE
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 4) THEN t0.volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 6) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) = 6) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 9) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) = 9) THEN t0.Forecast_Volume
        WHEN (SAFE_CAST(t0.fy_month_of_year AS INT64) < 10) THEN t0.volume
        ELSE t0.Forecast_Volume
      END), 7)
  END) AS cptd_forecast_actual_avg_daily_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(t0.fy_year AS INT64) = 2025
  AND SAFE_CAST(t0.fy_year_week_number AS INT64) <= (SELECT SAFE_CAST(source_week_number AS INT64) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` WHERE period_name = 'CP' LIMIT 1)
  AND SAFE_CAST(t0.publication_name AS STRING) NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND SAFE_CAST(t0.os_level_7 AS STRING) = 'All Sales Channels'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Geelong Advertiser', 'Mercury', 'Sunday Tasmanian', 'Sunshine Coast', 'Sydney Suburbans', 'The Australian', 'The Daily Telegraph', 'The Herald Sun', 'Toowoomba', 'Townsville Bulletin', 'Weekly Times')
LIMIT 1; - Metric: 'Count of Records for Advertiser Publication Group' (count_records_advertiser_publication_group). Description: Total number of records for the 'Advertiser' publication group.. Executable SQL: SELECT
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
  AND (CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('Sunday Tasmanian', 'Mercury')) THEN 'Mercury' ELSE SAFE_CAST(t0.publication_name AS STRING) END) IN ('Advertiser')
LIMIT 1; - Metric: 'Publication Group' (publication_group_dimension). Description: Categorization of publications into broader groups like 'Northern Territory', 'Others', 'The Daily Telegraph', 'The Herald Sun', 'Mercury', or original publication name.. Executable SQL: SELECT DISTINCT
  CASE WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'Northern Territory' WHEN (t0.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Others' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('Sunday Tasmanian', 'Mercury')) THEN 'Mercury' ELSE SAFE_CAST(t0.publication_name AS STRING) END AS publication_group
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND t0.l04_publication_code <> 'Free News & Lifestyle'
  AND t0.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
LIMIT 10;"
f65a9149-93b4-4aa9-aef6-d12002853222_summary,dashboard,f65a9149-93b4-4aa9-aef6-d12002853222,Digital Video Content Audio,"Dashboard Summary for 'Digital Video Content Audio' (ID: f65a9149-93b4-4aa9-aef6-d12002853222). Business Domain: advertising. Complexity Score: 4/10. Consolidation Score: 8/10. Reasoning: The dashboard queries primarily pull data from a single BigQuery table (`v_adsales_revenue_client`). Complexity arises from extensive `WHERE` clauses with long `IN` and `NOT IN` lists, and aliasing of columns within subqueries. Consolidation potential is high due to repeated use of `gross_revenue_amount` as a core measure and consistent filtering patterns across different ad types and financial years, suggesting a need for a more unified data model or parameterized reports. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client. Contains 6 metrics. - Metric: 'Total Gross Revenue - Video Content (FY 2025)' (total_gross_revenue_video_2025). Description: Total gross revenue generated from video content ad types (targeted and non-targeted, including growth and social video) for the 2025 financial year, excluding specific admin/ecommerce/betting publications and 'Medium Rare Content Agency', for booked or billed transactions.. Executable SQL: SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND publication_name NOT IN ('Vogueliving.Admin', 'Vogue.Admin', 'ADMIN.ADV', 'ADMIN.DTM', 'ADMIN.HWT', 'ADMIN.SALES', 'ADMIN.SPORT', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'Taste.Admin', 'TAUS.ADMIN', 'TASTE.ADMIN', 'STELLAR.ADMIN', 'ADMIN.TCM', 'NEWS.ADMIN', 'SKYNEWS.ADMIN', 'National Tabloid Preprint', 'News.Admin', 'Admin.DTM', 'Admin.International', 'BODYANDSOUL.ADMIN', 'Bestrecipes.Admin', 'ESCAPE.ADMIN', 'Admin.Sales', 'Admin.TCM', 'Kidspot.Admin', 'BESTRECIPES.ADMIN', 'Bodyandsoul.Admin', 'Delicious.admin', 'KIDSPOT.ADMIN', 'DELICIOUS.ADMIN', 'GQ.Admin', 'GQ.ADMIN', 'Escape.Admin', 'CODE', 'CODEBET', 'punters.com.au', 'odds.com.au', 'ODDS', 'RACENET', 'RACENET_FORMGUIDE', 'Racenet App', 'racenet.com.au', 'Sky News', 'Sky News App', 'SkyNews', 'Stockhead', 'SUDDENLY.TGG', 'SUDDENLY.SOUTH', 'SUDDENLY.QLD', 'SUDDENLY.OTHER', 'SUDDENLY.NSW', 'SUDDENLY.NORTH', 'SUDDENLY.CW', 'TABOOLA', 'Taboola', 'EdMedia', 'EDMEDIA', 'eCommerce', 'ECOMMERCEPARTNERS', 'ECOMMERCE.VOGUELIVING', 'ECOMMERCE.VOGUE', 'ECOMMERCE', 'ECOMMERCE.BODYANDSOUL', 'ECOMMERCE.TCM', 'ECOMMERCE.TASTE', 'ECOMMERCE.NEWS', 'ECOMMERCE.KIDSPOT', 'ECOMMERCE.GQ', 'ECOMMERCE.ESCAPE', 'ECOMMERCE.DELICIOUS') AND fin_adtype_name IN ('Video (Targeted)', 'Video (Non-Targeted)', 'Video Growth (Non-Targeted)', 'Video Growth (Targeted)', 'Social Video (Targeted)', 'Social Video (Non-Targeted)') AND financial_year IN ('2025') - Metric: 'Sales Segment L2 Name' (sales_segment_l2_name_filtered_ad_types). Description: The Level 2 sales segment name, filtered for booked or billed transactions, excluding 'Medium Rare Content Agency', and for specific ad types (Audio, Events, Rich Media, Social Display, Standard Display, TTIV). Used as a dimension.. Executable SQL: SELECT DISTINCT sales_segment_l_2_name_sync FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND fin_adtype_name IN ('Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)', 'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)', 'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)') - Metric: 'Booking Number (Content/Native)' (booking_number_content_native_2025_2026). Description: Unique booking numbers for content discovery and native ad types for financial years 2025 and 2026. Used as a dimension.. Executable SQL: SELECT DISTINCT booking_number FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE fin_adtype_name IN ('Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)') AND financial_year IN ('2026', '2025') - Metric: 'Sort Caption (Content/Native/Integration)' (sort_caption_content_native_integration_2025). Description: Unique sort captions for content discovery, content integration, and native ad types for financial year 2025. Used as a dimension.. Executable SQL: SELECT DISTINCT sort_caption FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE financial_year IN ('2025') AND fin_adtype_name IN ('Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Content Integration (Non-Targeted)', 'Content Integration (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)') - Metric: 'Ad Size Name' (adsize_name_filtered_ad_types_2025). Description: Unique ad size names, filtered for booked or billed transactions, excluding 'Medium Rare Content Agency', for specific ad types (Audio, Events, Native, Rich Media, Social Display, Standard Display, TTIV) for financial year 2025. Used as a dimension.. Executable SQL: SELECT DISTINCT adsize_name FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_transaction_status IN ('Booked', 'Billed') AND (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) AND fin_adtype_name IN ('Audio (Non-Targeted)', 'Audio (Targeted)', 'Events (Non-Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)', 'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Non-Targeted)', 'Social Display (Targeted)', 'Standard Display (Non-Targeted)', 'Standard Display (Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)') AND financial_year IN ('2025') - Metric: 'Total Gross Revenue - Digital (FY 2024-2025, Nov)' (total_gross_revenue_digital_2024_2025_nov). Description: Total gross revenue for digital revenue types for financial years 2024 and 2025, specifically for financial month 11 (November), excluding various admin/ecommerce/betting publications, specific source system codes, and certain ad types.. Executable SQL: SELECT SUM(gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` WHERE revenue_type = 'Digital' AND unified_publication_name NOT IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Punters.com.au', 'odds.com.au', 'RACENET', 'Racenet App', 'SKYNEWS.ADMIN', 'SUDDENLY.CW', 'SUDDENLY.OTHER', 'SUDDENLY.TGG', 'SUPERCOACH', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin') AND publication_name NOT IN ('Vogueliving.Admin', 'Vogue.Admin', 'ADMIN.ADV', 'ADMIN.DTM', 'ADMIN.HWT', 'ADMIN.SALES', 'ADMIN.SPORT', 'VOGUELIVING.ADMIN', 'VOGUE.ADMIN', 'Taste.Admin', 'TAUS.ADMIN', 'TASTE.ADMIN', 'STELLAR.ADMIN', 'ADMIN.TCM', 'NEWS.ADMIN', 'SKYNEWS.ADMIN', 'National Tabloid Preprint', 'News.Admin', 'Admin.DTM', 'Admin.International', 'BODYANDSOUL.ADMIN', 'Bestrecipes.Admin', 'ESCAPE.ADMIN', 'Admin.Sales', 'Admin.TCM', 'Kidspot.Admin', 'BESTRECIPES.ADMIN', 'Bodyandsoul.Admin', 'Delicious.admin', 'KIDSPOT.ADMIN', 'DELICIOUS.ADMIN', 'GQ.Admin', 'GQ.ADMIN', 'Escape.Admin', 'CODE', 'CODEBET', 'punters.com.au', 'odds.com.au', 'ODDS', 'RACENET', 'RACENET_FORMGUIDE', 'Racenet App', 'Sky News', 'Sky News App', 'SkyNews', 'Stockhead', 'SUDDENLY.TGG', 'SUDDENLY.SOUTH', 'SUDDENLY.QLD', 'SUDDENLY.OTHER', 'SUDDENLY.NSW', 'SUDDENLY.NORTH', 'SUDDENLY.CW', 'TABOOLA', 'Taboola', 'EdMedia', 'EDMEDIA', 'eCommerce', 'ECOMMERCEPARTNERS', 'ECOMMERCE.VOGUELIVING', 'ECOMMERCE.VOGUE', 'ECOMMERCE', 'ECOMMERCE.BODYANDSOUL', 'ECOMMERCE.TCM', 'ECOMMERCE.TASTE', 'ECOMMERCE.NEWS', 'ECOMMERCE.KIDSPOT', 'ECOMMERCE.GQ', 'ECOMMERCE.ESCAPE', 'ECOMMERCE.DELICIOUS') AND source_system_code NOT IN ('LGBSS', 'LGBPUB') AND booking_number NOT IN ('-1') AND financial_year IN ('2025', '2024') AND (fin_adtype_name NOT IN ('-', 'COLOUR MAGAZINES', 'Xtend') OR fin_adtype_name IS NULL) AND SAFE_CAST(financial_month AS FLOAT64) IN (11.0)"
fed70b12-c274-4cde-9920-592ca4c4dab0_summary,dashboard,fed70b12-c274-4cde-9920-592ca4c4dab0,Independent Agency Report,"Dashboard Summary for 'Independent Agency Report' (ID: fed70b12-c274-4cde-9920-592ca4c4dab0). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: High complexity due to deeply nested subqueries, extensive use of CASE statements for conditional logic, and intricate date calculations. Significant consolidation opportunity exists as many metrics are variations of base revenue figures filtered by different time periods, agency attributes, and financial flags. Primary Data Sources: ncau-data-newsquery-prd.sbx_dcp.ia;ncau-data-newsquery-prd.asl_finance_derived.revenue_movement. Contains 11 metrics. - Metric: 'Current FY Gross Revenue' (current_fy_gross_revenue). Description: Total gross revenue for the current financial year.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Previous FY Gross Revenue' (previous_fy_gross_revenue). Description: Total gross revenue for the previous financial year.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) AS previous_fy_gross_revenue FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Current CY Gross Revenue' (current_cy_gross_revenue). Description: Total gross revenue for the current calendar year.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_cal_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) AS current_cy_gross_revenue FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Previous CY Gross Revenue' (previous_cy_gross_revenue). Description: Total gross revenue for the previous calendar year.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_cal_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) AS previous_cy_gross_revenue FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Gross Revenue - CY Q4, Managed Service (Not Other), Xtend Flag N' (gross_revenue_cy_q4_ms_not_other_xtend_n). Description: Gross revenue for current calendar year, Q4, for managed services not classified as 'Other' and Xtend Flag 'N'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_cal_year_offset = 0 AND SAFE_CAST(t0.calendar_quarter AS INT64) = 4 AND t0.Managed_Service_Fl != 'Other' AND t0.xtend_flag = 'N' THEN t0.gross_revenue_amount ELSE NULL END) AS gross_revenue_cy_q4_ms_not_other_xtend_n FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Gross Revenue - CY Q4, Managed Service (Other), Xtend Flag N' (gross_revenue_cy_q4_ms_other_xtend_n). Description: Gross revenue for current calendar year, Q4, for managed services classified as 'Other' and Xtend Flag 'N'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_cal_year_offset = 0 AND SAFE_CAST(t0.calendar_quarter AS INT64) = 4 AND t0.Managed_Service_Fl = 'Other' AND t0.xtend_flag = 'N' THEN t0.gross_revenue_amount ELSE NULL END) AS gross_revenue_cy_q4_ms_other_xtend_n FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Gross Revenue - CY Q4, Xtend Flag Y' (gross_revenue_cy_q4_xtend_y). Description: Gross revenue for current calendar year, Q4, with Xtend Flag 'Y'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_cal_year_offset = 0 AND SAFE_CAST(t0.calendar_quarter AS INT64) = 4 AND t0.xtend_flag = 'Y' THEN t0.gross_revenue_amount ELSE NULL END) AS gross_revenue_cy_q4_xtend_y FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Gross Revenue - CY-1 Q2, Managed Service (Other), Xtend Flag N' (gross_revenue_cy_minus_1_q2_ms_other_xtend_n). Description: Gross revenue for previous calendar year, Q2, for managed services classified as 'Other' and Xtend Flag 'N'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_cal_year_offset = -1 AND SAFE_CAST(t0.calendar_quarter AS INT64) = 2 AND t0.Managed_Service_Fl = 'Other' AND t0.xtend_flag = 'N' THEN t0.gross_revenue_amount ELSE NULL END) AS gross_revenue_cy_minus_1_q2_ms_other_xtend_n FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Gross Revenue - FY Month Offset < -12 or Historical' (gross_revenue_fy_month_offset_lt_minus_12_or_historical). Description: Gross revenue based on a complex condition: either financial month offset is more than 12 months ago, or it's from the previous financial year and the booking date is very old (before 365 days from a specific report date). This is a very specific historical comparison.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_month_offset < -12 THEN (CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) ELSE (CASE WHEN t0.relative_fy_year_offset = -1 AND SAFE_CAST(t0.booking_line_created_date AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-05-23 01:19:32.916346+00', 'Australia/Sydney'), INTERVAL -365 DAY) THEN t0.gross_revenue_amount ELSE 0 END) END) AS gross_revenue_fy_month_offset_lt_minus_12_or_historical FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) - Metric: 'Gross Revenue - Frontier Agency' (gross_revenue_frontier_agency). Description: Total gross revenue specifically for the 'FRONTIER' agency, excluding programmatic exchange revenue.. Executable SQL: SELECT SUM(t0.gross_revenue_amount) AS gross_revenue_frontier_agency FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) AND UPPER(SAFE_CAST(t0.IA_MAPPING AS STRING)) IN ('FRONTIER') - Metric: 'Total Gross Amount Difference (Excluding Min Week)' (total_gross_amount_difference_excl_min_week). Description: The sum of gross amount differences, excluding data from the earliest financial week in the dataset, typically used for revenue movement analysis.. Executable SQL: SELECT SUM(t0.GROSS_AMOUNT_DIFF) AS total_gross_amount_difference_excl_min_week FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 WHERE t0.movement_financial_week != t0.min_week"
c560ed20-040d-4c6a-9c3f-ec8bce27d132_summary,dashboard,c560ed20-040d-4c6a-9c3f-ec8bce27d132,Xtend Details,"Dashboard Summary for 'Xtend Details' (ID: c560ed20-040d-4c6a-9c3f-ec8bce27d132). Business Domain: advertising. Complexity Score: 6/10. Consolidation Score: 8/10. Reasoning: The dashboard queries involve subqueries, multiple filtering conditions, and aggregations, indicating moderate complexity. A high consolidation score is given because all queries target the same base table and share several common filtering conditions (e.g., `source_publishing_division`, `revenue_transaction_status`, `revenue_group_subtype`). This suggests significant opportunities for creating consolidated views or standardized metrics to reduce query redundancy and improve performance/maintainability. The presence of a 'sum of calendar month numbers' metric also points to potential misconfigurations or unusual metric definitions that could benefit from review and standardization. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client. Contains 6 metrics. - Metric: 'Publication Name (FY 202)' (publication_name_fy202). Description: Lists distinct publication names for transactions in financial year '202' with 'Billed' or 'Booked' status, excluding 'Medium Rare Content Agency' division.. Executable SQL: SELECT DISTINCT t0.publication_name FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year = '202' AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') - Metric: 'Calendar Month (Specific Advertisers, Excl. 2022)' (calendar_month_advertiser_filtered). Description: Distinct calendar month numbers (as float) for transactions related to 'INTERNAL PUIG Oceania' or 'PUIG Oceania' advertisers, excluding calendar year 2022, with 'Billed' or 'Booked' status, for 'Digital' or 'Print' revenue, and excluding 'Medium Rare Content Agency' division.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.calendar_month AS FLOAT64) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') AND (t0.calendar_year NOT IN ('2022') OR t0.calendar_year IS NULL) AND t0.advertiser_name IN ('INTERNAL PUIG Oceania', 'PUIG Oceania') - Metric: 'Sum of Calendar Month Numbers by Calendar Year' (sum_calendar_month_by_calendar_year). Description: The sum of calendar month numbers, grouped by calendar year, for 'Billed' or 'Booked' transactions, 'Digital' or 'Print' revenue, excluding 'Medium Rare Content Agency'. This metric's direct business utility is unclear as summing month numbers is an unusual aggregation.. Executable SQL: SELECT t0.calendar_year, SUM(SAFE_CAST(t0.calendar_month AS FLOAT64)) AS sum_of_calendar_months FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') GROUP BY t0.calendar_year - Metric: 'Financial Month (FY 2024, 2025)' (financial_month_fy2024_2025). Description: Distinct financial month numbers (as float) for transactions in financial years 2024 or 2025, with 'Billed' or 'Booked' status, for 'Digital' or 'Print' revenue, and excluding 'Medium Rare Content Agency' division.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.financial_month AS FLOAT64) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') AND t0.financial_year IN ('2024', '2025') - Metric: 'Advertiser Group (FY 2024, 2025)' (advertiser_group_fy2024_2025). Description: Lists distinct advertiser groups for transactions in financial years 2024 or 2025, with 'Billed' or 'Booked' status, for 'Digital' or 'Print' revenue, and excluding 'Medium Rare Content Agency' division.. Executable SQL: SELECT DISTINCT t0.advertiser_group FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') AND t0.financial_year IN ('2024', '2025') - Metric: 'Total Gross Revenue (Detailed Breakdown)' (total_gross_revenue_detailed). Description: Aggregated gross revenue amount, broken down by advertiser group, advertiser name, booking number, calendar year, calendar month, revenue type, and unified publication name. Filtered for specific advertiser 'Greyhound Racing Victoria', calendar years 2024/2025, 'Billed'/'Booked' status, 'Digital'/'Print' revenue, and excluding 'Medium Rare Content Agency' division.. Executable SQL: SELECT t0.advertiser_group, t0.advertiser_name, t0.booking_number, t0.calendar_year, SAFE_CAST(t0.calendar_month AS FLOAT64) AS calendar_month_float, t0.revenue_type, t0.source_unified_publication_name, SUM(t0.gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_group_subtype IN ('Digital', 'Print') AND t0.calendar_year IN ('2024', '2025') AND t0.advertiser_name IN ('Greyhound Racing Victoria') GROUP BY t0.advertiser_group, t0.advertiser_name, t0.booking_number, t0.calendar_year, SAFE_CAST(t0.calendar_month AS FLOAT64), t0.revenue_type, t0.source_unified_publication_name"
a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f_summary,dashboard,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f,Pacing Dashboard,"Dashboard Summary for 'Pacing Dashboard' (ID: a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f). Business Domain: advertising. Complexity Score: 8/10. Consolidation Score: 8/10. Reasoning: The dashboard's SQL queries exhibit high complexity due to multiple levels of nested subqueries, intricate date arithmetic (e.g., DATETIME_SUB, DATETIME_TRUNC, hardcoded dates), and conditional aggregations using CASE statements. There's significant potential for consolidation as several queries extract similar dimensional data with minor variations in filtering (e.g., 'Kargo' vs. 'AdX' sources) and revenue metrics are highly specific variations of a base concept, suggesting a need for more generalized metric definitions or parameterized queries. Primary Data Sources: ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month;ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month. Contains 9 metrics. - Metric: 'Financial Month (Static Days) - Kargo - Current' (financial_month_static_days_kargo_current). Description: Represents the financial month and static days for the current month, specifically for the 'Kargo' source. Used as a dimension for filtering or grouping.. Executable SQL: SELECT CONCAT(SAFE_CAST(t0.StaticDays AS STRING),CONCAT(' (',SAFE_CAST(((t0.FinancialYear*100)+t0.FinancialMonthNumber) AS STRING)),' )') AS financial_month_static_days FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.CurrentMonthFlag = 1 AND t0.Source = 'Kargo' LIMIT 1 - Metric: 'Financial Month (Num Days) - Non-AdX - Current' (financial_month_num_days_non_adx_current). Description: Represents the financial month and number of days for the current month, excluding the 'AdX' source. Used as a dimension for filtering or grouping.. Executable SQL: SELECT CONCAT(SAFE_CAST(t0.NumDays AS STRING),CONCAT(' (',SAFE_CAST(((t0.FinancialYear*100)+t0.FinancialMonthNumber) AS STRING)),' )') AS financial_month_num_days FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.CurrentMonthFlag = 1 AND (t0.Source NOT IN ('AdX') OR t0.Source IS NULL) LIMIT 1 - Metric: 'Transaction Type' (transaction_type). Description: Categorization of transactions, used as a dimension.. Executable SQL: SELECT t0.TransactionType FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 LIMIT 1 - Metric: 'Revenue Net (Kargo) - Financial Month -6m = May 2024' (revenue_net_kargo_fin_minus_6m_eq_may2024). Description: Total net revenue for 'Kargo' where the financial month minus 6 months equals May 2024 (relative to a hardcoded dashboard date of 2025-05-12).. Executable SQL: SELECT SUM(t0.RevenueNet) FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.Source = 'Kargo' AND DATE(DATETIME_SUB(SAFE_CAST(DATE(t0.FinancialYear, t0.FinancialMonthNumber, 1) AS DATETIME), INTERVAL 6 MONTH)) = DATE(DATETIME_SUB(DATETIME_TRUNC(DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC'), MONTH), INTERVAL 1 YEAR)) LIMIT 1 - Metric: 'Adjusted Revenue (Kargo) - Financial Month -6m = May 2025' (adjusted_revenue_kargo_fin_minus_6m_eq_may2025). Description: Total adjusted revenue for 'Kargo' where the financial month minus 6 months equals May 2025 (relative to a hardcoded dashboard date of 2025-05-12). Adjusted revenue is calculated as (RevenueNet / NumDays) * StaticDays.. Executable SQL: SELECT SUM(SAFE_DIVIDE(t0.RevenueNet, t0.NumDays) * t0.StaticDays) FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.Source = 'Kargo' AND DATE(DATETIME_SUB(SAFE_CAST(DATE(t0.FinancialYear, t0.FinancialMonthNumber, 1) AS DATETIME), INTERVAL 6 MONTH)) = DATE(DATETIME_TRUNC(DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC'), MONTH)) LIMIT 1 - Metric: 'Revenue Net (Kargo) - Financial Month -6m = April 2025' (revenue_net_kargo_fin_minus_6m_eq_april2025). Description: Total net revenue for 'Kargo' where the financial month minus 6 months equals April 2025 (relative to a hardcoded dashboard date of 2025-05-12).. Executable SQL: SELECT SUM(t0.RevenueNet) FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.Source = 'Kargo' AND DATE(DATETIME_SUB(SAFE_CAST(DATE(t0.FinancialYear, t0.FinancialMonthNumber, 1) AS DATETIME), INTERVAL 6 MONTH)) = DATE(DATETIME_SUB(DATETIME_TRUNC(DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC'), MONTH), INTERVAL 1 MONTH)) LIMIT 1 - Metric: 'Buyer (Kargo)' (buyer_kargo). Description: Buyer names associated with the 'Kargo' source. Used as a dimension for filtering or grouping.. Executable SQL: SELECT t0.Buyer FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 WHERE t0.Source = 'Kargo' LIMIT 1 - Metric: 'Product Type' (product_type). Description: Categorization of products, used as a dimension.. Executable SQL: SELECT t0.ProductType FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0 LIMIT 1 - Metric: 'Revenue Net (Kargo) - Financial Month -6m = May 2024 (Duplicate)' (revenue_net_kargo_fin_minus_6m_eq_may2024_duplicate). Description: Identical to 'Revenue Net (Kargo) - Financial Month -6m = May 2024'. This appears to be a duplicate calculation within the original query.. Executable SQL: SELECT SUM(t0.RevenueNet) FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.Source = 'Kargo' AND DATE(DATETIME_SUB(SAFE_CAST(DATE(t0.FinancialYear, t0.FinancialMonthNumber, 1) AS DATETIME), INTERVAL 6 MONTH)) = DATE(DATETIME_SUB(DATETIME_TRUNC(DATETIME(TIMESTAMP '2025-05-12 05:05:50.817324+00', 'UTC'), MONTH), INTERVAL 1 YEAR)) LIMIT 1"
e83da1de-4227-43e6-bcc6-73051c66914b_summary,dashboard,e83da1de-4227-43e6-bcc6-73051c66914b,Ad Events Dashboard,"Dashboard Summary for 'Ad Events Dashboard' (ID: e83da1de-4227-43e6-bcc6-73051c66914b). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The queries utilize nested subqueries and complex CASE statements with REGEXP_CONTAINS for derived dimensions, indicating moderate technical complexity. The dashboard heavily reuses the 'gross_revenue_amount' metric with varying filters and groupings, suggesting significant opportunities for consolidation into a more flexible data model or parameterized reports to reduce redundancy. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client. Contains 6 metrics. - Metric: 'Total Gross Revenue by Ad Type, Financial Month, and FY Month Number (Q1 2025)' (total_gross_revenue_by_ad_type_and_month_q1_2025). Description: Total gross revenue generated from advertising sales, categorized by derived ad type (Sponsorship, Production, Media), financial short month, and fiscal year month number for Q1 2025.. Executable SQL: SELECT
  SAFE_CAST(financial_short_month AS STRING) AS financial_short_month,
  SAFE_CAST(fy_year_month_number AS INT64) AS fy_year_month_number,
  CASE
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
    ELSE 'Media'
  END AS ad_type,
  SUM(gross_revenue_amount) AS total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(financial_year AS STRING) IN ('2025')
  AND fy_year_month_number IN (202501, 202502, 202503)
GROUP BY
  1, 2, 3 - Metric: 'Total Gross Revenue by Source Unified Publication Name (Jan 2025)' (total_gross_revenue_by_publication_jan_2025). Description: Total gross revenue generated from advertising sales, broken down by the source unified publication name for January 2025.. Executable SQL: SELECT
  SAFE_CAST(source_unified_publication_name AS STRING) AS source_unified_publication_name,
  SUM(gross_revenue_amount) AS total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(financial_year AS STRING) IN ('2025')
  AND fy_year_month_number IN (202501)
GROUP BY
  1 - Metric: 'Total Gross Revenue by Revenue Transaction Status (2025)' (total_gross_revenue_by_transaction_status_2025). Description: Total gross revenue generated from advertising sales, categorized by its transaction status (e.g., 'Actual', 'Forecast') for the financial year 2025.. Executable SQL: SELECT
  SAFE_CAST(revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SUM(gross_revenue_amount) AS total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(financial_year AS STRING) IN ('2025')
GROUP BY
  1 - Metric: 'Total Gross Revenue by Financial Year for 'The Advertiser' Publication' (total_gross_revenue_by_year_for_advertiser). Description: Total gross revenue generated from advertising sales for 'The Advertiser' publication, aggregated by financial year.. Executable SQL: SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  SUM(gross_revenue_amount) AS total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(source_unified_publication_name AS STRING) IN ('The Advertiser')
GROUP BY
  1 - Metric: 'Total Gross Revenue by Revenue Transaction Status for Specific Bookings (2025)' (total_gross_revenue_by_transaction_status_for_specific_bookings_2025). Description: Total gross revenue generated from advertising sales, categorized by transaction status, specifically for a predefined list of booking names for the financial year 2025.. Executable SQL: SELECT
  SAFE_CAST(revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SUM(gross_revenue_amount) AS total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(financial_year AS STRING) IN ('2025')
  AND SAFE_CAST(booking_name AS STRING) IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series', 'Future Bradfield FY25 B1', 'Future Sydney Bradfield 2024')
GROUP BY
  1 - Metric: 'Total Gross Revenue by Ad Type, Ad Size Name, Financial Month, and FY Month Number (Jan 2025)' (total_gross_revenue_by_ad_type_adsize_month_jan_2025). Description: Total gross revenue generated from advertising sales, categorized by derived ad type, specific ad size name, financial short month, and fiscal year month number for January 2025.. Executable SQL: SELECT
  SAFE_CAST(adsize_name AS STRING) AS adsize_name,
  SAFE_CAST(financial_short_month AS STRING) AS financial_short_month,
  SAFE_CAST(fy_year_month_number AS INT64) AS fy_year_month_number,
  CASE
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
    ELSE 'Media'
  END AS ad_type,
  SUM(gross_revenue_amount) AS total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(financial_year AS STRING) IN ('2025')
  AND fy_year_month_number IN (202501)
GROUP BY
  1, 2, 3, 4"
6f1c8731-02da-464f-b146-bf2947860735_summary,dashboard,6f1c8731-02da-464f-b146-bf2947860735,Programmatic Sales_NQ Data,"Dashboard Summary for 'Programmatic Sales_NQ Data' (ID: 6f1c8731-02da-464f-b146-bf2947860735). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The dashboard queries a single, central financial table with complex date transformations (financial month to calendar month mapping) and various filtering combinations on dimensions like Portfolio, TransactionType, and Advertiser. This indicates moderate to high technical complexity. The repeated use of the same base table and similar metric calculations (e.g., RevenueGross) across different filters suggests significant opportunities for metric and dimension consolidation. Primary Data Sources: ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month. Contains 7 metrics. - Metric: 'Gross Revenue by Advertiser (Independent Agencies NSW, Non-Guaranteed)' (gross_revenue_by_advertiser_independent_agencies_nsw_non_guaranteed). Description: Total gross revenue attributed to specific advertisers within 'INDEPENDENT AGENCIES NSW' portfolio, excluding 'Guaranteed' transaction types.. Executable SQL: SELECT t0.Advertiser, SUM(t0.RevenueGross) AS gross_revenue FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.PortfolioParentGroup IN ('INDEPENDENT AGENCIES NSW') AND (t0.TransactionType NOT IN ('Guaranteed') OR t0.TransactionType IS NULL) GROUP BY t0.Advertiser - Metric: 'Product Type Dimension (Filtered)' (product_type_dimension_filtered). Description: A list of distinct product types available for a specific financial quarter (FY2025 - Q4), excluding 'Open Auction' transaction types, and limited to certain 'PortfolioChildGroup' values.. Executable SQL: SELECT DISTINCT t0.ProductType FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4') AND (t0.TransactionType NOT IN ('Open Auction') OR t0.TransactionType IS NULL) AND t0.PortfolioChildGroup IN ('QLD IA C2', 'QLD IA C1', 'QLD DIRECT A4', 'QLD CON A3', 'QLD CON A2', 'QLD CON A1', 'GC RAM A1') - Metric: 'Advertiser Dimension (Filtered by Financial Quarter)' (advertiser_dimension_filtered_by_financial_quarter). Description: A list of distinct advertisers active within a specific financial quarter (FY2025 - Q4).. Executable SQL: SELECT DISTINCT t0.Advertiser FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4') - Metric: 'Gross Revenue (VIC KA A2)' (gross_revenue_vic_ka_a2). Description: Total gross revenue specifically for the 'VIC KA A2' portfolio child group.. Executable SQL: SELECT SUM(t0.RevenueGross) AS gross_revenue FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE t0.PortfolioChildGroup IN ('VIC KA A2') - Metric: 'Financial Month Date Dimension (Filtered)' (financial_month_date_dimension_filtered). Description: A list of distinct financial month start dates, converted to calendar dates, filtered by specific portfolio groups, transaction type ('Deal'), and financial quarter (FY2025 - Q4), up to a specific date (2025-06-26).. Executable SQL: SELECT SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.FinancialYear, (CASE WHEN (t0.FinancialMonthNumber = 1) THEN 7 WHEN (t0.FinancialMonthNumber = 2) THEN 8 WHEN (t0.FinancialMonthNumber = 3) THEN 9 WHEN (t0.FinancialMonthNumber = 4) THEN 10 WHEN (t0.FinancialMonthNumber = 5) THEN 11 WHEN (t0.FinancialMonthNumber = 6) THEN 12 WHEN (t0.FinancialMonthNumber = 7) THEN 1 WHEN (t0.FinancialMonthNumber = 8) THEN 2 WHEN (t0.FinancialMonthNumber = 9) THEN 3 WHEN (t0.FinancialMonthNumber = 10) THEN 4 WHEN (t0.FinancialMonthNumber = 11) THEN 5 WHEN (t0.FinancialMonthNumber = 12) THEN 6 ELSE NULL END), 1) AS DATETIME), MONTH) AS DATE) AS financial_month_date FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE (DATE(t0.FinancialYear, (CASE WHEN (t0.FinancialMonthNumber = 1) THEN 7 WHEN (t0.FinancialMonthNumber = 2) THEN 8 WHEN (t0.FinancialMonthNumber = 3) THEN 9 WHEN (t0.FinancialMonthNumber = 4) THEN 10 WHEN (t0.FinancialMonthNumber = 5) THEN 11 WHEN (t0.FinancialMonthNumber = 6) THEN 12 WHEN (t0.FinancialMonthNumber = 7) THEN 1 WHEN (t0.FinancialMonthNumber = 8) THEN 2 WHEN (t0.FinancialMonthNumber = 9) THEN 3 WHEN (t0.FinancialMonthNumber = 10) THEN 4 WHEN (t0.FinancialMonthNumber = 11) THEN 5 WHEN (t0.FinancialMonthNumber = 12) THEN 6 ELSE NULL END), 1) <= DATE(DATETIME(TIMESTAMP '2025-06-26 07:36:48.083696+00', 'UTC'))) AND t0.PortfolioParentGroup IN ('CONSORTIUM VIC') AND CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4') AND t0.TransactionType IN ('Deal') AND t0.PortfolioChildGroup IN ('VIC CON B3', 'VIC CON B2', 'VIC CON B1') GROUP BY financial_month_date - Metric: 'Gross Revenue by State (Highly Filtered)' (gross_revenue_by_state_highly_filtered). Description: Total gross revenue grouped by State, for a specific financial quarter (FY2025 - Q4), specific portfolio child groups, non-'Open Auction' transaction types, a particular advertiser ('Amazon.com *'), and a specific financial month (May 2025).. Executable SQL: SELECT t0.State, SUM(t0.RevenueGross) AS gross_revenue FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4') AND t0.PortfolioChildGroup IN ('VIC KA C1', 'NSW CON A2', 'NSW CON A1') AND (t0.TransactionType NOT IN ('Open Auction') OR t0.TransactionType IS NULL) AND t0.Advertiser IN ('Amazon.com *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.FinancialYear, (CASE WHEN (t0.FinancialMonthNumber = 1) THEN 7 WHEN (t0.FinancialMonthNumber = 2) THEN 8 WHEN (t0.FinancialMonthNumber = 3) THEN 9 WHEN (t0.FinancialMonthNumber = 4) THEN 10 WHEN (t0.FinancialMonthNumber = 5) THEN 11 WHEN (t0.FinancialMonthNumber = 6) THEN 12 WHEN (t0.FinancialMonthNumber = 7) THEN 1 WHEN (t0.FinancialMonthNumber = 8) THEN 2 WHEN (t0.FinancialMonthNumber = 9) THEN 3 WHEN (t0.FinancialMonthNumber = 10) THEN 4 WHEN (t0.FinancialMonthNumber = 11) THEN 5 WHEN (t0.FinancialMonthNumber = 12) THEN 6 ELSE NULL END), 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-05-01') GROUP BY t0.State - Metric: 'Unique DSPs by State (Highly Filtered)' (unique_dsps_by_state_highly_filtered). Description: Count of distinct DSPs grouped by State, for a specific financial quarter (FY2025 - Q4), specific portfolio child groups, non-'Open Auction' transaction types, a particular advertiser ('Amazon.com *'), and a specific financial month (May 2025).. Executable SQL: SELECT t0.State, COUNT(DISTINCT t0.DSP) AS unique_dsps FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0 WHERE CONCAT('FY',SAFE_CAST(t0.FinancialYear AS STRING),' - ',SAFE_CAST(t0.FinancialQuarter AS STRING)) IN ('FY2025 - Q4') AND t0.PortfolioChildGroup IN ('VIC KA C1', 'NSW CON A2', 'NSW CON A1') AND (t0.TransactionType NOT IN ('Open Auction') OR t0.TransactionType IS NULL) AND t0.Advertiser IN ('Amazon.com *') AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.FinancialYear, (CASE WHEN (t0.FinancialMonthNumber = 1) THEN 7 WHEN (t0.FinancialMonthNumber = 2) THEN 8 WHEN (t0.FinancialMonthNumber = 3) THEN 9 WHEN (t0.FinancialMonthNumber = 4) THEN 10 WHEN (t0.FinancialMonthNumber = 5) THEN 11 WHEN (t0.FinancialMonthNumber = 6) THEN 12 WHEN (t0.FinancialMonthNumber = 7) THEN 1 WHEN (t0.FinancialMonthNumber = 8) THEN 2 WHEN (t0.FinancialMonthNumber = 9) THEN 3 WHEN (t0.FinancialMonthNumber = 10) THEN 4 WHEN (t0.FinancialMonthNumber = 11) THEN 5 WHEN (t0.FinancialMonthNumber = 12) THEN 6 ELSE NULL END), 1) AS DATETIME), MONTH) AS DATE) IN (DATE '2025-05-01') GROUP BY t0.State"
601ed0d2-e944-4189-8170-d593c8e72026_summary,dashboard,601ed0d2-e944-4189-8170-d593c8e72026,Adex,"Dashboard Summary for 'Adex' (ID: 601ed0d2-e944-4189-8170-d593c8e72026). Business Domain: advertising. Complexity Score: 8/10. Consolidation Score: 8/10. Reasoning: Complex nested subqueries and extensive use of `CASE` statements for time period (This Year/Last Year, Rolling 12 months, Calendar Year, Financial Year) and unit conversions. Multiple queries calculate similar 'Spend' metrics with slight variations or filters, indicating high consolidation potential. The `fixed_publisher_count` calculation also appears inconsistent across queries. Primary Data Sources: ncau-data-newsquery-prd.sbx_dcp.adex_datasource;ncau-data-newsquery-prd.sbx_dcp.adex_datasource_test. Contains 9 metrics. - Metric: 'Total Spend (This Year, in thousands)' (total_spend_k_ty). Description: Total advertising spend for the current period (This Year), in thousands of currency units, based on the selected time period (Rolling 12 months, Calendar Year, or Financial Year). Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  SUM(SAFE_DIVIDE(t0.Spend, 1000)) AS total_spend_k_ty
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ty' - Metric: 'Total Spend (Last Year, in thousands)' (total_spend_k_ly). Description: Total advertising spend for the previous period (Last Year), in thousands of currency units, based on the selected time period (Rolling 12 months, Calendar Year, or Financial Year). Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  SUM(SAFE_DIVIDE(t0.Spend, 1000)) AS total_spend_k_ly
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ly' - Metric: 'News Corp Spend (This Year, in thousands)' (news_corp_spend_k_ty). Description: Total advertising spend for News Corp media networks for the current period (This Year), in thousands of currency units. Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  SUM(SAFE_DIVIDE(t0.Spend, 1000)) AS news_corp_spend_k_ty
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ty' AND t0.Media_Network = 'NEWS CORP' - Metric: 'News Corp Spend (Last Year, in thousands)' (news_corp_spend_k_ly). Description: Total advertising spend for News Corp media networks for the previous period (Last Year), in thousands of currency units. Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  SUM(SAFE_DIVIDE(t0.Spend, 1000)) AS news_corp_spend_k_ly
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ly' AND t0.Media_Network = 'NEWS CORP' - Metric: 'Total Publisher Count' (total_publisher_count). Description: The total count of distinct media networks (publishers) present in the dataset.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  )
SELECT
  COUNT(DISTINCT t0.Media_Network) AS total_publisher_count
FROM
  TEMP1 AS t0 - Metric: 'Minimum Date (This Year)' (min_date_ty). Description: The earliest date recorded for the current period (This Year), based on the selected time period (Rolling 12 months, Calendar Year, or Financial Year). Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  MIN(t0.date) AS min_date_ty
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ty' - Metric: 'Maximum Date (This Year)' (max_date_ty). Description: The latest date recorded for the current period (This Year), based on the selected time period (Rolling 12 months, Calendar Year, or Financial Year). Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  MAX(t0.date) AS max_date_ty
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ty' - Metric: 'Minimum Date (Last Year)' (min_date_ly). Description: The earliest date recorded for the previous period (Last Year), based on the selected time period (Rolling 12 months, Calendar Year, or Financial Year). Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  MIN(t0.date) AS min_date_ly
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ly' - Metric: 'Maximum Date (Last Year)' (max_date_ly). Description: The latest date recorded for the previous period (Last Year), based on the selected time period (Rolling 12 months, Calendar Year, or Financial Year). Assumes 'Rolling 12 months' for time period calculation.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      source = 'Adex'
  ),
  union_table AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  TEMP1 AS (
    SELECT
      *,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      union_table
      CROSS JOIN
      (
        SELECT
          MAX(date) AS latest_date
        FROM
          adex_data
      )
      CROSS JOIN
      (
        SELECT
          MAX(financial_year) AS max_fin_year
        FROM
          adex_data
      )
  ),
  TEMP2 AS (
    SELECT
      *,
      CASE 'Rolling 12 months' -- Assuming 'Rolling 12 months' for @time_period
        WHEN 'Rolling 12 months' THEN
        CASE
          WHEN DATE_DIFF(latest_date, date, MONTH) <= 11 THEN 'ty'
          WHEN DATE_DIFF(latest_date, date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
          ELSE NULL
        END
        WHEN 'Calendar Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM latest_date) - 1 AS STRING), '-1-1')) THEN 'ly'
          ELSE NULL
        END
        WHEN 'Financial Year' THEN
        CASE
          WHEN date <= latest_date AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 1 AS STRING),'-7-1')) THEN 'ty'
          WHEN date <= DATETIME_ADD(latest_date, INTERVAL -1 YEAR) AND date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(max_fin_year - 2 AS STRING), '-7-1')) THEN 'ly'
          ELSE NULL
        END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      TEMP1
  )
SELECT
  MAX(t0.date) AS max_date_ly
FROM
  TEMP2 AS t0
WHERE
  t0.ty_ly_embed = 'ly'"
b1c5901f-a535-42eb-870d-05cc025f7c27_summary,dashboard,b1c5901f-a535-42eb-870d-05cc025f7c27,OS extract for month end rec,"Dashboard Summary for 'OS extract for month end rec' (ID: b1c5901f-a535-42eb-870d-05cc025f7c27). Business Domain: finance. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The dashboard queries involve multiple CTEs and joins, indicating moderate technical complexity. There's significant repetition of core financial metrics (Actual, Budget, Forecast Amounts) with slight variations in filters and grouping dimensions, suggesting high potential for metric consolidation into parameterized base metrics. Dimension-only queries are used for dashboard controls. Primary Data Sources: ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_rel_timeperiod_weekly. Contains 10 metrics. - Metric: 'Forecast Amount (FY2025, Rev/Exp, News Media Pub, Week 40)' (forecast_amount_fy25_rev_exp_news_media_pub_wk40). Description: The forecasted financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' within 'News Media Publishing' for fiscal week 40.. Executable SQL: SELECT
  SUM(t0.Forecast_Amount) AS forecast_amount
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND t0.l03_publication_code = 'News Media Publishing' AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40))
LIMIT 1 - Metric: 'Actual Amount (FY2025, Rev/Exp, News Media Pub, Week 40)' (actual_amount_fy25_rev_exp_news_media_pub_wk40). Description: The actual financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' within 'News Media Publishing' for fiscal week 40.. Executable SQL: SELECT
  SUM(t0.Actual_Amount) AS actual_amount
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND t0.l03_publication_code = 'News Media Publishing' AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40))
LIMIT 1 - Metric: 'Budget Amount (FY2025, Rev/Exp, News Media Pub, Week 40)' (budget_amount_fy25_rev_exp_news_media_pub_wk40). Description: The budgeted financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' within 'News Media Publishing' for fiscal week 40.. Executable SQL: SELECT
  SUM(t0.Budget_Amount) AS budget_amount
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND t0.l03_publication_code = 'News Media Publishing' AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40))
LIMIT 1 - Metric: 'Count of OS Level 5' (os_level_5_count). Description: Counts the occurrences of each unique value within the 'os_level_5' dimension, typically used for filtering or dropdown lists.. Executable SQL: SELECT
  t0.os_level_5, COUNT(1) AS os_level_5_count
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
GROUP BY
  t0.os_level_5
LIMIT 10 - Metric: 'Fiscal Year (Weeks 40, 41)' (fiscal_year_filter_wk40_41). Description: Lists distinct fiscal years for fiscal weeks 40 and 41, used as a filter option in the dashboard.. Executable SQL: SELECT
  t0.fy_year
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  SAFE_CAST(t0.fy_week_of_year AS INT) IN (40, 41)
GROUP BY
  t0.fy_year
ORDER BY
  t0.fy_year DESC
LIMIT 10 - Metric: 'Actual Amount (FY2025, Rev/Exp, Week 40, by OS Level 5)' (actual_amount_fy25_rev_exp_wk40_by_os_level_5). Description: The actual financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' for fiscal week 40, grouped by 'os_level_5' and other dimensions.. Executable SQL: SELECT
  SUM(t0.Actual_Amount) AS actual_amount,
  t0.fy_week_of_year,
  t0.is_print_digital_flag,
  t0.l12_publication_code,
  t0.os_level_5,
  t0.os_level_9,
  t0.publication_name
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40))
GROUP BY
  t0.fy_week_of_year, t0.is_print_digital_flag, t0.l12_publication_code, t0.os_level_5, t0.os_level_9, t0.publication_name
LIMIT 10 - Metric: 'Forecast Amount (FY2025, Rev/Exp, News Media Pub, Week 40, OS Level 6 Filter)' (forecast_amount_fy25_rev_exp_news_media_pub_wk40_os_level_6_filter). Description: The forecasted financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' within 'News Media Publishing' for fiscal week 40, further filtered by 'os_level_6' values like 'Circulation', 'Subscription', 'Content Licensing'.. Executable SQL: SELECT
  SUM(t0.Forecast_Amount) AS forecast_amount
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND t0.l03_publication_code = 'News Media Publishing' AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40) AND t0.os_level_6 IN ('Circulation', 'Subscription', 'Content Licensing'))
LIMIT 1 - Metric: 'Actual Amount (FY2025, Rev/Exp, News Media Pub, Week 40, OS Level 6 Filter)' (actual_amount_fy25_rev_exp_news_media_pub_wk40_os_level_6_filter). Description: The actual financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' within 'News Media Publishing' for fiscal week 40, further filtered by 'os_level_6' values like 'Circulation', 'Subscription', 'Content Licensing'.. Executable SQL: SELECT
  SUM(t0.Actual_Amount) AS actual_amount
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND t0.l03_publication_code = 'News Media Publishing' AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40) AND t0.os_level_6 IN ('Circulation', 'Subscription', 'Content Licensing'))
LIMIT 1 - Metric: 'Budget Amount (FY2025, Rev/Exp, News Media Pub, Week 40, OS Level 6 Filter)' (budget_amount_fy25_rev_exp_news_media_pub_wk40_os_level_6_filter). Description: The budgeted financial amount for Fiscal Year 2025, specifically for 'Total Revenue' and 'Total Expenses' within 'News Media Publishing' for fiscal week 40, further filtered by 'os_level_6' values like 'Circulation', 'Subscription', 'Content Licensing'.. Executable SQL: SELECT
  SUM(t0.Budget_Amount) AS budget_amount
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  (SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025' AND t0.os_level_4 IN ('Total Revenue', 'Total Expenses') AND t0.l03_publication_code = 'News Media Publishing' AND SAFE_CAST(t0.fy_week_of_year AS INT) IN (40) AND t0.os_level_6 IN ('Circulation', 'Subscription', 'Content Licensing'))
LIMIT 1 - Metric: 'Fiscal Year (Week 40)' (fiscal_year_filter_wk40). Description: Lists distinct fiscal years for fiscal week 40, used as a filter option in the dashboard.. Executable SQL: SELECT
  t0.fy_year
FROM
  (
    WITH
      OSandFACT AS (
        SELECT
          os.Actual_Amount,
          os.Budget_Amount,
          os.Forecast_Amount,
          os.gl_publication_code,
          os.os_level_4,
          os.os_level_5,
          os.os_level_6,
          os.os_level_7,
          os.os_level_9,
          pub.is_print_digital_flag,
          pub.l03_publication_code,
          pub.l12_publication_code,
          pub.publication_name,
          calendar.fy_week_of_year,
          calendar.fy_year,
          calendar.fy_year_week_number,
          os.fiscal_week_id,
          os.os_level_12,
          calendar.fy_last_day_of_week,
          calendar.fy_last_day_of_month,
          calendar.fy_first_day_of_week,
          calendar.fy_month_of_year,
          calendar.fy_year_month_number,
          calendar.relative_fisc_year_number,
          calendar.relative_fisc_week_number,
          calendar.fy_month_of_year_short_name,
          CASE WHEN calendar.fy_last_day_of_week = calendar.fy_last_day_of_month THEN 'Y' ELSE 'N' END AS month_end_flag,
          calendar.fy_quarter_of_year,
          `current_timestamp`() AS extract_time,
          os.source_system_name,
          os.sub_source_system_name,
          os.day_of_week,
          os.state,
          os.os_level_1,
          os.os_level_2,
          os.os_level_3,
          os.os_level_8,
          os.os_level_10,
          os.os_level_11,
          os.Estimate,
          os.True_Up_Adjustment,
          os.volume,
          os.Last_Year_Actual_Amount,
          os.Last_Year_volume,
          os.Budget_Draft_Amount,
          os.Budget_Draft_Volume,
          os.Budget_Volume,
          os.Forecast_Volume,
          os.Budget_Jan_Amount,
          os.Budget_Jan_Volume,
          os.Budget_Feb_Amount,
          os.Budget_Feb_Volume,
          os.Budget_Mar_Amount,
          os.Budget_Mar_Volume,
          os.Budget_Apr_Amount,
          os.Budget_Apr_Volume,
          os.Budget_May_Amount,
          os.Budget_May_Volume,
          os.Budget_Jun_Amount,
          os.Budget_Jun_Volume,
          os.Budget_Jul_Amount,
          os.Budget_Jul_Volume,
          os.Budget_Aug_Amount,
          os.Budget_Aug_Volume,
          os.Budget_Sep_Amount,
          os.Budget_Sep_Volume,
          os.Budget_Oct_Amount,
          os.Budget_Oct_Volume,
          os.Budget_Nov_Amount,
          os.Budget_Nov_Volume,
          os.Budget_Dec_Amount,
          os.Budget_Dec_Volume,
          os.Forecast_Q1F_Amount,
          os.Forecast_Q1F_Volume,
          os.Forecast_Q2F_Amount,
          os.Forecast_Q2F_Volume,
          os.Forecast_Q3F_Amount,
          os.Forecast_Q3F_Volume,
          os.Forecast_Q4F_Amount,
          os.Forecast_Q4F_Volume,
          os.Forecast_Q5F_Amount,
          os.Forecast_Q5F_Volume
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
          LEFT JOIN
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
          ON os.gl_publication_code = pub.publication_code
          LEFT JOIN
          (
            SELECT DISTINCT
              CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
              CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
              CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
              CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
              CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
              CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
              CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
              CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
              c.fy_month_of_year_short_name,
              CASE
                WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                ELSE 'N'
              END AS month_end_flag,
              CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
              CAST(c.fy_year AS int) AS fy_year,
              `current_timestamp`() AS extract_time
            FROM
              `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
              JOIN
              `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
              ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
            WHERE
              1 = 1
          ) AS calendar
          ON os.fiscal_week_id = calendar.fy_year_week_number
          LEFT JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
          ON os.os_level_12 = dep.department_code
      )
    SELECT
      *
    FROM
      OSandFACT
  ) AS t0
WHERE
  SAFE_CAST(t0.fy_week_of_year AS INT) IN (40)
GROUP BY
  t0.fy_year
ORDER BY
  t0.fy_year DESC
LIMIT 10"
155c4518-72bf-4309-a0e9-240dd564f421_summary,dashboard,155c4518-72bf-4309-a0e9-240dd564f421,Portfolio Performance Dashboard,"Dashboard Summary for 'Portfolio Performance Dashboard' (ID: 155c4518-72bf-4309-a0e9-240dd564f421). Business Domain: finance. Complexity Score: 9/10. Consolidation Score: 9/10. Reasoning: High complexity due to deeply nested subqueries, extensive use of CASE statements for conditional aggregation and data transformation, and window functions. High consolidation potential as many metrics are variations of 'gross_revenue_amount' or 'target' filtered by time periods (current year, last year, current quarter, last year same quarter) or specific digital criteria, and often scaled by 1000. These could be consolidated into fewer base metrics with dynamic filtering. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 11 metrics. - Metric: 'Current Year Gross Revenue' (current_year_gross_revenue). Description: Total gross revenue for the current financial year. This metric may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) AS current_year_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Last Year Gross Revenue' (last_year_gross_revenue). Description: Total gross revenue for the last financial year. This metric may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) AS last_year_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current Year Target' (current_year_target). Description: Total target amount for the current financial year. This metric may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.target ELSE 0 END) AS current_year_target FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Digital Gross Revenue Last Year (Date Filtered)' (digital_gross_revenue_last_year_date_filtered). Description: Gross revenue for the last financial year, specifically for Digital revenue types, filtered by a specific date condition (fix_date_lod <= current_date - 365 days) and other digital criteria (advertiser_parent not 'DOUBLECLICK', revenue_group_subtype 'DIGITAL', revenue_type 'DIGITAL', sales_segment_l_2_name_sync 'Digital Other'). This is a highly specific digital revenue metric and may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = -1 AND (SAFE_CAST(t0.fix_date_lod AS DATETIME) <= DATETIME_ADD(SAFE_CAST(CURRENT_DATE('Australia/Sydney') AS DATETIME), INTERVAL -365 DAY)) AND t0.advertiser_parent != 'DOUBLECLICK' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.revenue_type = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other') THEN t0.gross_revenue_amount ELSE 0 END) AS digital_revenue_ly_filtered FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current Year Current Quarter Gross Revenue' (current_year_current_quarter_gross_revenue). Description: Gross revenue for the current financial year and current financial quarter. This metric may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.relative_fy_quarter_offset = 0 THEN t0.gross_revenue_amount ELSE NULL END) AS cy_cq_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Last Year Same Quarter Gross Revenue' (last_year_same_quarter_gross_revenue). Description: Gross revenue for the last financial year, specifically for the same financial quarter as the current one. This metric may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 AND t0.relative_fy_quarter_offset = -4 THEN t0.gross_revenue_amount ELSE NULL END) AS ly_sq_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current Quarter Target' (current_quarter_target). Description: Target amount for the current financial quarter. This metric may appear scaled by 1000 in the dashboard depending on display settings.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_quarter_offset = 0 THEN t0.target ELSE NULL END) AS current_quarter_target FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Product Group Category Count' (product_group_category_count). Description: Count of records categorized by product group, mapped to an integer value (1-9) based on predefined categories like 'The Australian & Prestige', 'State & Communities', etc.. Executable SQL: SELECT COUNT(CASE WHEN t0.product_group = 'The Australian & Prestige' THEN 1 WHEN t0.product_group = 'State & Communities' THEN 2 WHEN t0.product_group = 'Free News & Lifestyle' THEN 3 WHEN t0.product_group = 'Client' THEN 4 WHEN t0.product_group = 'Commercial Content' THEN 5 WHEN t0.product_group = 'Group Functions' THEN 6 WHEN t0.product_group = 'Others' THEN 7 WHEN t0.product_group = 'Unknown' THEN 8 ELSE 9 END) AS product_group_category_count FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Product Group Category Sum' (product_group_category_sum). Description: Sum of integer values representing product group categories. The business value of summing these integer mappings is unclear without further context.. Executable SQL: SELECT SUM(CASE WHEN t0.product_group = 'The Australian & Prestige' THEN 1 WHEN t0.product_group = 'State & Communities' THEN 2 WHEN t0.product_group = 'Free News & Lifestyle' THEN 3 WHEN t0.product_group = 'Client' THEN 4 WHEN t0.product_group = 'Commercial Content' THEN 5 WHEN t0.product_group = 'Group Functions' THEN 6 WHEN t0.product_group = 'Others' THEN 7 WHEN t0.product_group = 'Unknown' THEN 8 ELSE 9 END) AS product_group_category_sum FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Month Category Count' (financial_month_category_count). Description: Count of records categorized by financial short month, mapped to an integer value (1-12) where July is 1, August is 2, etc.. Executable SQL: SELECT COUNT(CASE WHEN t0.financial_short_month = 'Jul' THEN 1 WHEN t0.financial_short_month = 'Aug' THEN 2 WHEN t0.financial_short_month = 'Sep' THEN 3 WHEN t0.financial_short_month = 'Oct' THEN 4 WHEN t0.financial_short_month = 'Nov' THEN 5 WHEN t0.financial_short_month = 'Dec' THEN 6 WHEN t0.financial_short_month = 'Jan' THEN 7 WHEN t0.financial_short_month = 'Feb' THEN 8 WHEN t0.financial_short_month = 'Mar' THEN 9 WHEN t0.financial_short_month = 'Apr' THEN 10 WHEN t0.financial_short_month = 'May' THEN 11 WHEN t0.financial_short_month = 'Jun' THEN 12 ELSE NULL END) AS financial_month_category_count FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Month Category Sum' (financial_month_category_sum). Description: Sum of integer values representing financial short month categories. The business value of summing these integer mappings is unclear without further context.. Executable SQL: SELECT SUM(CASE WHEN t0.financial_short_month = 'Jul' THEN 1 WHEN t0.financial_short_month = 'Aug' THEN 2 WHEN t0.financial_short_month = 'Sep' THEN 3 WHEN t0.financial_short_month = 'Oct' THEN 4 WHEN t0.financial_short_month = 'Nov' THEN 5 WHEN t0.financial_short_month = 'Dec' THEN 6 WHEN t0.financial_short_month = 'Jan' THEN 7 WHEN t0.financial_short_month = 'Feb' THEN 8 WHEN t0.financial_short_month = 'Mar' THEN 9 WHEN t0.financial_short_month = 'Apr' THEN 10 WHEN t0.financial_short_month = 'May' THEN 11 WHEN t0.financial_short_month = 'Jun' THEN 12 ELSE NULL END) AS financial_month_category_sum FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0"
783f341c-8660-4e90-bab8-9bc860119cf5_summary,dashboard,783f341c-8660-4e90-bab8-9bc860119cf5,Deals Dashboard,"Dashboard Summary for 'Deals Dashboard' (ID: 783f341c-8660-4e90-bab8-9bc860119cf5). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The dashboard uses deeply nested subqueries and complex date transformations to derive financial period dimensions. Multiple queries calculate the same base `revenuenet` metric with varying filters and group-by dimensions, indicating high potential for consolidation through parameterized queries or a more robust underlying data model. The date calculation involving a 6-month offset adds to the complexity. Primary Data Sources: ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master. Contains 4 metrics. - Metric: 'Total Revenue by Source and Transaction Type' (total_revenue_by_source_and_transaction_type). Description: Total net revenue generated from programmatic advertising deals, aggregated by the advertising source (e.g., DFP, AdX) and the type of transaction (e.g., DEAL, UFR).. Executable SQL: SELECT
    SUM(t0.revenuenet) AS total_revenue,
    t0.source,
    UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS source_transaction_type
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
    t0.source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor')
    AND UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
GROUP BY
    t0.source,
    UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) - Metric: 'Monthly Revenue for Specific Advertiser and FY25 Quarters by Source' (monthly_revenue_by_source_and_transaction_type_filtered_advertiser_fy25). Description: Monthly net revenue for 'The Smith Family *' advertiser, specifically for FY25 Q2, Q3, Q4, broken down by advertising source (DFP, Index Exchange, Rubicon) and transaction type. The financial month is derived by offsetting the raw financial month by 6 months.. Executable SQL: SELECT
    SUM(t0.revenuenet) AS total_revenue,
    SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS financial_month_date,
    t0.source
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
    t0.source IN ('DFP', 'Index Exchange', 'Rubicon')
    AND UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
    AND t0.advertiser IN ('The Smith Family *')
    AND CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) IN ('FY25 Q2', 'FY25 Q3', 'FY25 Q4')
    AND SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) IN (DATE '2024-11-01', DATE '2024-12-01', DATE '2025-01-01', DATE '2025-02-01', DATE '2025-03-01', DATE '2025-04-01', DATE '2025-05-01', DATE '2025-06-01')
GROUP BY
    financial_month_date,
    t0.source - Metric: 'Monthly Revenue by Source and Transaction Type (All Dates)' (monthly_revenue_by_source_and_transaction_type_all_dates). Description: Monthly net revenue aggregated by advertising source and transaction type, across a broad range of financial months. The financial month is derived by offsetting the raw financial month by 6 months.. Executable SQL: SELECT
    SUM(t0.revenuenet) AS total_revenue,
    SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS financial_month_date,
    t0.source
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
    t0.source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor')
    AND UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
    AND SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) IN (DATE '2023-04-01', DATE '2023-05-01', DATE '2023-06-01', DATE '2023-07-01', DATE '2023-08-01', DATE '2023-09-01', DATE '2023-10-01', DATE '2023-11-01', DATE '2023-12-01', DATE '2024-01-01', DATE '2024-02-01', DATE '2024-03-01', DATE '2024-04-01', DATE '2024-05-01', DATE '2024-06-01', DATE '2024-07-01', DATE '2024-08-01', DATE '2024-09-01', DATE '2024-10-01', DATE '2024-11-01', DATE '2024-12-01', DATE '2025-01-01', DATE '2025-02-01', DATE '2025-03-01', DATE '2025-04-01')
GROUP BY
    financial_month_date,
    t0.source - Metric: 'Distinct Buyers for Specific Advertisers in FY25 Q4' (distinct_buyers_by_advertiser_fy25q4). Description: Lists distinct buyers associated with specific advertisers (Kmart, Myer, Target) for transactions in FY25 Q4 (May 2025).. Executable SQL: SELECT
    DISTINCT t0.buyer
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
    UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
    AND CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) IN ('FY25 Q4')
    AND SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) IN (DATE '2025-05-01')
    AND t0.advertiser IN ('Kmart Corporation *', 'Myer *', 'Target Corporation *')"
6e8b534b-485a-48dd-842d-13dc6bebb01a_summary,dashboard,6e8b534b-485a-48dd-842d-13dc6bebb01a,SuperCoach Subscriptions,"Dashboard Summary for 'SuperCoach Subscriptions' (ID: 6e8b534b-485a-48dd-842d-13dc6bebb01a). Business Domain: consumer. Complexity Score: 6/10. Consolidation Score: 8/10. Reasoning: The dashboard primarily uses a single data source and repeatedly queries for distinct subscription counts with varying filters and groupings. This indicates significant opportunities for consolidating metrics, potentially through parameterized queries or more flexible underlying views. The SQL itself involves subqueries, window functions, and date manipulations, contributing to a moderate level of complexity. Primary Data Sources: ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement. Contains 5 metrics. - Metric: 'Total SuperCoach Acquisition Subscriptions' (distinct_acquisition_subscriptions_total_sc_acquisition). Description: The total count of distinct subscription IDs identified as 'acquisition' movements for the 'SuperCoach' masthead within a specified date range.. Executable SQL: SELECT COUNT(DISTINCT t0.subscription_id_src) AS total_sc_acquisition_subscriptions FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS t0 WHERE t0.masthead = 'SC' AND t0.subscription_movement_count_type = 'acquisition' AND t0.movement_datetime >= DATE '2024-07-01' AND t0.movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY) - Metric: 'SuperCoach Acquisition Subscriptions by Rate Plan' (distinct_acquisition_subscriptions_by_rate_plan). Description: The count of distinct subscription IDs identified as 'acquisition' movements for the 'SuperCoach' masthead, broken down by specific rate plans (SC_SDO_AP24AM12, SC_SDO_AP20AM12) within a specified date range.. Executable SQL: SELECT t0.sold_in_rate_plan_code, COUNT(DISTINCT t0.subscription_id_src) AS sc_acquisition_subscriptions FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS t0 WHERE t0.masthead = 'SC' AND t0.subscription_movement_count_type = 'acquisition' AND t0.sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12') AND t0.movement_datetime >= DATE '2025-01-21' AND t0.movement_datetime < DATETIME_ADD(DATE '2025-06-30', INTERVAL 1 DAY) GROUP BY t0.sold_in_rate_plan_code - Metric: 'SuperCoach Acquisition Subscriptions by Source Masthead' (distinct_acquisition_subscriptions_by_source_masthead). Description: The count of distinct subscription IDs identified as 'acquisition' movements for the 'SuperCoach' masthead, broken down by the source masthead (derived from sold_in_source_code) within a specified date range.. Executable SQL: SELECT SUBSTR(t0.sold_in_source_code, 1, 2) AS SourceMasthead, COUNT(DISTINCT t0.subscription_id_src) AS sc_acquisition_subscriptions FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS t0 WHERE t0.masthead = 'SC' AND t0.subscription_movement_count_type = 'acquisition' AND t0.sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12') AND t0.movement_datetime >= DATE '2024-07-01' AND t0.movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY) GROUP BY SourceMasthead - Metric: 'SuperCoach Acquisition Subscriptions for Specific Subscriber and Source' (distinct_acquisition_subscriptions_filtered_by_subscriber_and_source). Description: The count of distinct subscription IDs identified as 'acquisition' movements for the 'SuperCoach' masthead, specific rate plans, and specific source codes, for a particular subscriber within a date range. This is a highly filtered view.. Executable SQL: SELECT SUBSTR(t0.sold_in_source_code, 1, 2) AS SourceMasthead, t0.sold_in_source_code, COUNT(DISTINCT t0.subscription_id_src) AS sc_acquisition_subscriptions FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS t0 WHERE t0.masthead = 'SC' AND t0.subscription_movement_count_type = 'acquisition' AND t0.sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12') AND t0.subscriber_id_src = 2452260 AND SUBSTR(t0.sold_in_source_code, 1, 2) IN ('CS') AND t0.sold_in_source_code IN ('CSWEB_WBN1332_f') AND t0.movement_datetime >= DATE '2024-07-01' AND t0.movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY) GROUP BY SourceMasthead, t0.sold_in_source_code - Metric: 'List of Unique Subscribers' (unique_subscribers_list). Description: A list of all distinct subscriber IDs present in the v_subscription_movement table.. Executable SQL: SELECT DISTINCT t0.subscriber_id_src FROM `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS t0"
d4d68a71-2b12-4caf-bc6b-96fc2d18a025_summary,dashboard,d4d68a71-2b12-4caf-bc6b-96fc2d18a025,Adsales Details Dashboard,"Dashboard Summary for 'Adsales Details Dashboard' (ID: d4d68a71-2b12-4caf-bc6b-96fc2d18a025). Business Domain: finance. Complexity Score: 5/10. Consolidation Score: 8/10. Reasoning: The queries exhibit moderate complexity due to nested subqueries, conditional logic using `CASE` statements (e.g., for financial vs. calendar year, current vs. sync portfolio names, and custom revenue type logic), and diverse filtering conditions. The high consolidation score stems from the repetitive patterns of deriving 'preferred' versions of dimensions (like financial year or current portfolio names) using identical `CASE` logic, suggesting strong opportunities for standardization at the data source level. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.details_dashboard. Contains 10 metrics. - Metric: 'Day of Week (Formatted)' (dow_formatted). Description: The day of the week, formatted with leading spaces to ensure a specific display or sorting order in the dashboard.. Executable SQL: SELECT
  DISTINCT CASE
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Monday' THEN 'Monday'
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Tuesday' THEN ' Tuesday'
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Wednesday' THEN '  Wednesday'
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Thursday' THEN '   Thursday'
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Friday' THEN '    Friday'
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Saturday' THEN '     Saturday'
    WHEN SAFE_CAST(t0.dow AS STRING) = 'Sunday' THEN '      Sunday'
    ELSE NULL
  END AS formatted_dow
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
ORDER BY
  formatted_dow DESC - Metric: 'Account Number (Filtered by Finance Portfolio)' (account_number_filtered_by_finance_portfolio). Description: A list of distinct account numbers, specifically filtered by a financial year (2025), a parent portfolio group ('CONSORTIUM NSW'), and a specific portfolio group ('NSW CON B'). Used for specific drill-downs or filter options.. Executable SQL: SELECT
  DISTINCT t0.account_number
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  (SAFE_CAST(t0.financial_year AS STRING) = '2025'
    AND SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING) = 'CONSORTIUM NSW'
    AND SAFE_CAST(t0.portfolio_group_name_current AS STRING) = 'NSW CON B')
ORDER BY
  t0.account_number ASC - Metric: 'Revenue Type (with XTEND Flag)' (revenue_type_with_xtend_flag). Description: The type of revenue, where the value is overridden to 'XTEND' if the 'xtend_flag' is 'Y'. This metric is filtered by financial year, publication name, and day of week.. Executable SQL: SELECT
  DISTINCT CASE
    WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND'
    ELSE SAFE_CAST(t0.revenue_type AS STRING)
  END AS revenue_type_derived
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  ((SAFE_CAST(t0.financial_year AS STRING) NOT IN ('2026')
      OR t0.financial_year IS NULL)
    AND SAFE_CAST(t0.unified_publication_name AS STRING) = 'Wentworth Courier'
    AND SAFE_CAST(t0.dow AS STRING) = 'Wednesday')
ORDER BY
  revenue_type_derived ASC - Metric: 'Publication Date (Filtered by Finance & Advertiser)' (publication_date_filtered_by_finance_advertiser). Description: A list of distinct publication dates, filtered by specific financial year, financial months, portfolio, employee, and a list of advertisers. Used for date-based filtering in specific contexts.. Executable SQL: SELECT
  DISTINCT t0.publication_date
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  (SAFE_CAST(t0.financial_year AS STRING) = '2025'
    AND SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) = 'NSW IA C3'
    AND SAFE_CAST(t0.financial_short_month AS STRING) IN ('Feb', 'Mar', 'Apr', 'May', 'Jun')
    AND SAFE_CAST(t0.employee_name AS STRING) = 'Marley-Kale Kentia'
    AND SAFE_CAST(t0.advertiser_name AS STRING) IN ('Australian Meat Processor Corporation', 'Australian Pork', 'CMC Markets', 'Coco Republic', 'Dry July Limited', 'Fred Hollows Foundation', 'LGT Crestone'))
ORDER BY
  t0.publication_date ASC - Metric: 'Portfolio Group Name (Current, Filtered)' (portfolio_group_name_current_filtered_by_publication_finance). Description: A list of distinct current portfolio group names, filtered by a specific unified publication name ('Vogue Living') and financial year (2026).. Executable SQL: SELECT
  DISTINCT t0.portfolio_group_name_current
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  (SAFE_CAST(t0.unified_publication_name AS STRING) = 'Vogue Living'
    AND SAFE_CAST(t0.financial_year AS STRING) = '2026')
ORDER BY
  t0.portfolio_group_name_current ASC - Metric: 'Agency Group (Filtered by Finance & Publication)' (agency_group_filtered_by_finance_publication). Description: A list of distinct agency groups, filtered by specific financial months ('Jul', 'Aug', 'Sep'), financial year (excluding 2024), and unified publication name ('Vogue Australia').. Executable SQL: SELECT
  DISTINCT t0.agency_group
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  (SAFE_CAST(t0.financial_short_month AS STRING) IN ('Jul', 'Aug', 'Sep')
    AND (SAFE_CAST(t0.financial_year AS STRING) NOT IN ('2024')
      OR t0.financial_year IS NULL)
    AND SAFE_CAST(t0.unified_publication_name AS STRING) = 'Vogue Australia')
ORDER BY
  t0.agency_group ASC - Metric: 'Financial Year (Preferred)' (financial_year_preferred). Description: The preferred financial year, which is explicitly the 'financial_year' column based on dashboard configuration, otherwise it would default to 'calendar_year'.. Executable SQL: SELECT
  DISTINCT CASE
    WHEN ('Fin' = 'Fin') THEN SAFE_CAST(t0.financial_year AS STRING)
    ELSE SAFE_CAST(t0.calendar_year AS STRING)
  END AS preferred_financial_year
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
ORDER BY
  preferred_financial_year ASC - Metric: 'Portfolio Group Name (Current Preferred)' (portfolio_group_name_current_preferred). Description: The preferred portfolio group name, which is explicitly the 'portfolio_group_name_current' column based on dashboard configuration, otherwise it would default to 'portfolio_group_name_sync'.. Executable SQL: SELECT
  DISTINCT CASE
    WHEN ('Curr' = 'Curr') THEN SAFE_CAST(t0.portfolio_group_name_current AS STRING)
    ELSE SAFE_CAST(t0.portfolio_group_name_sync AS STRING)
  END AS preferred_portfolio_group_name
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
ORDER BY
  preferred_portfolio_group_name ASC - Metric: 'Portfolio Parent Group Name (Current Preferred)' (portfolio_parent_group_name_current_preferred). Description: The preferred portfolio parent group name, which is explicitly the 'portfolio_parent_group_name_current' column based on dashboard configuration, otherwise it would default to 'portfolio_parent_group_name_sync'.. Executable SQL: SELECT
  DISTINCT CASE
    WHEN ('Curr' = 'Curr') THEN SAFE_CAST(t0.portfolio_parent_group_name_current AS STRING)
    ELSE SAFE_CAST(t0.portfolio_parent_group_name_sync AS STRING)
  END AS preferred_portfolio_parent_group_name
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
ORDER BY
  preferred_portfolio_parent_group_name ASC - Metric: 'Financial Short Month (Preferred)' (financial_short_month_preferred). Description: The preferred financial short month, which is explicitly the 'financial_short_month' column based on dashboard configuration, otherwise it would default to 'calendar_month_short_name'.. Executable SQL: SELECT
  DISTINCT CASE
    WHEN ('Fin' = 'Fin') THEN SAFE_CAST(t0.financial_short_month AS STRING)
    ELSE SAFE_CAST(t0.calendar_month_short_name AS STRING)
  END AS preferred_financial_short_month
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
ORDER BY
  preferred_financial_short_month ASC"
80ca81f3-0671-40ef-a0a9-825a1580ca1b_summary,dashboard,80ca81f3-0671-40ef-a0a9-825a1580ca1b,Team Sales Performance,"Dashboard Summary for 'Team Sales Performance' (ID: 80ca81f3-0671-40ef-a0a9-825a1580ca1b). Business Domain: sales. Complexity Score: 9/10. Consolidation Score: 8/10. Reasoning: The dashboard uses deeply nested subqueries and complex CASE statements to derive dimensions and metrics, including dynamic date calculations and conditional aggregations. Multiple queries are dedicated to fetching distinct dimension values for dashboard filters, indicating potential for a more unified data model or pre-computed dimensions. Metric variations (e.g., raw vs. /1000) suggest display-level formatting rather than distinct business metrics, highlighting consolidation opportunities. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 10 metrics. - Metric: 'Gross Revenue (Current Year)' (gross_revenue_current_year). Description: The total gross revenue for the current financial year, based on the 'relative_fy_year_offset' field being 0.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) AS gross_revenue_current_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Gross Revenue (Prior Year)' (gross_revenue_prior_year). Description: The total gross revenue for the prior financial year, based on the 'relative_fy_year_offset' field being -1.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = -1) THEN t0.gross_revenue_amount ELSE 0 END) AS gross_revenue_prior_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Gross Revenue (Prior Year - Specific Date Filter)' (gross_revenue_prior_year_specific_date_filter). Description: Gross revenue for the prior financial year, specifically filtered by a complex set of conditions on revenue type, group subtype, sales segment, advertiser parent, and a comparison against a fixed date (April 2, 2024). This likely represents a very specific target or comparison period.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = -1 AND (SAFE_CAST(CASE WHEN ((t0.revenue_type = 'DIGITAL') AND (t0.revenue_group_subtype = 'DIGITAL') AND (t0.sales_segment_l_2_name_sync = 'Digital Other') AND (t0.advertiser_parent != 'DOUBLECLICK')) THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(DATE(TIMESTAMP '2025-04-02 23:25:34.704992+00', 'Australia/Sydney'), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE 0 END) AS gross_revenue_prior_year_specific_date_filter FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Advertiser Name' (advertiser_name). Description: The name of the advertiser associated with the sales performance data.. Executable SQL: SELECT DISTINCT t0.advertiser_name AS advertiser_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Portfolio Conformed Name' (portfolio_conformed_name_sync). Description: A synchronized name for the portfolio, used for consistent reporting.. Executable SQL: SELECT DISTINCT t0.portfolio_conformed_name_sync AS portfolio_conformed_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Sales Segment L2 Name' (sales_segment_l2_name_sync). Description: The synchronized name for the Level 2 sales segment.. Executable SQL: SELECT DISTINCT t0.sales_segment_l_2_name_sync AS sales_segment_l2_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Publishing Division Group' (publishing_division_group). Description: The group name for the publishing division.. Executable SQL: SELECT DISTINCT t0.publishing_division_group AS publishing_division_group FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Publishing Division Parent' (publishing_division_parent). Description: The parent name for the publishing division.. Executable SQL: SELECT DISTINCT t0.publishing_division_parent AS publishing_division_parent FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Sales Segment GM Name' (sales_segment_gm_name_sync). Description: The synchronized name of the General Manager for the sales segment.. Executable SQL: SELECT DISTINCT t0.sales_segment_gm_name_sync AS sales_segment_gm_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Revenue Type Grouping' (revenue_type_grouping). Description: A categorized grouping of revenue types based on various attributes like cost model, ad type, and revenue group subtype, used for high-level analysis of revenue streams.. Executable SQL: SELECT DISTINCT CASE WHEN (t0.fin_adtype_name = 'XTEND') THEN 'XTEND' WHEN ((t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (t0.revenue_group_subtype = 'DIGITAL')) THEN 'PROGRAMMATIC - DIGITAL OTHER' WHEN (t0.revenue_group_subtype = 'PROGRAMMATIC EXCHANGE') THEN 'PROGRAMMATIC - DIGITAL OTHER OFFSET' WHEN (SAFE.LEFT(t0.cost_model_type, 3) = 'GUA') THEN 'PROGRAMMATIC - GUARANTEED' WHEN (SAFE.LEFT(t0.cost_model_type, 3) = 'NON') THEN 'PROGRAMMATIC - OPEN EXCHANGE' WHEN (SAFE.LEFT(t0.cost_model_type, 3) = 'PMP') THEN 'PROGRAMMATIC - PMP' WHEN (t0.revenue_group_subtype = 'DIGITAL') THEN 'ADPT DIGITAL' WHEN (SAFE.LEFT(t0.revenue_group_subtype, 6) = 'SUNDRY') THEN 'SUNDRY' ELSE t0.revenue_group_subtype END AS revenue_type_grouping FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0"
5491badf-5ec0-4b4f-a427-b12a3a3395dd_summary,dashboard,5491badf-5ec0-4b4f-a427-b12a3a3395dd,Programmatic / Tubi Performance FY25,"Dashboard Summary for 'Programmatic / Tubi Performance FY25' (ID: 5491badf-5ec0-4b4f-a427-b12a3a3395dd). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The SQL queries exhibit high complexity due to deeply nested subqueries and extensive use of CASE statements to derive multiple variations of gross revenue. Metrics are filtered by various dimensions (cost_model_type, unified_publication_name, revenue_group_subtype) and timeframes (current FY, previous FY, YTD, specific financial month). This indicates significant opportunity for consolidation by defining core revenue metrics and applying filters/dimensions. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.details_dashboard. Contains 22 metrics. - Metric: 'Gross Revenue (Performance or Programmatic Source) Current FY' (gross_revenue_perf_prog_current_fy). Description: Total gross revenue for the current fiscal year, specifically from 'PERFORMANCE' classified revenue types or 'PROGRAMMATIC SOURCE' revenue group subtypes.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'Gross Revenue (Performance or Programmatic Source) Year-to-Date' (gross_revenue_perf_prog_ytd). Description: Total gross revenue year-to-date for the current fiscal year, specifically from 'PERFORMANCE' classified revenue types or 'PROGRAMMATIC SOURCE' revenue group subtypes. YTD is calculated up to the dashboard's fixed date (2025-07-02).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'PMP Revenue (Current FY, Performance/Programmatic Filtered)' (pmp_revenue_current_fy_perf_prog_filtered). Description: Gross revenue from PMP deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'PG Revenue (Current FY, Performance/Programmatic Filtered)' (pg_revenue_current_fy_perf_prog_filtered). Description: Gross revenue from PG deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PG' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'OMP Revenue (Current FY, Performance/Programmatic Filtered)' (omp_revenue_current_fy_perf_prog_filtered). Description: Gross revenue from OMP deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'OMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'Tubi Revenue (Current FY, Performance/Programmatic Filtered)' (tubi_revenue_current_fy_perf_prog_filtered). Description: Gross revenue from Tubi deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'TUBI' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'Performance Revenue (Current FY, Performance/Programmatic Filtered)' (performance_revenue_current_fy_perf_prog_filtered). Description: Gross revenue from Performance deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'PMP Revenue (YTD, Performance/Programmatic Filtered)' (pmp_revenue_ytd_perf_prog_filtered). Description: Gross revenue from PMP deals year-to-date for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'. YTD is calculated up to the dashboard's fixed date (2025-07-02).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'PG Revenue (YTD, Performance/Programmatic Filtered)' (pg_revenue_ytd_perf_prog_filtered). Description: Gross revenue from PG deals year-to-date for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'. YTD is calculated up to the dashboard's fixed date (2025-07-02).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PG' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'OMP Revenue (YTD, Performance/Programmatic Filtered)' (omp_revenue_ytd_perf_prog_filtered). Description: Gross revenue from OMP deals year-to-date for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'. YTD is calculated up to the dashboard's fixed date (2025-07-02).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'OMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'Tubi Revenue (YTD, Performance/Programmatic Filtered)' (tubi_revenue_ytd_perf_prog_filtered). Description: Gross revenue from Tubi deals year-to-date for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'. YTD is calculated up to the dashboard's fixed date (2025-07-02).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'TUBI' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'Performance Revenue (YTD, Performance/Programmatic Filtered)' (performance_revenue_ytd_perf_prog_filtered). Description: Gross revenue from Performance deals year-to-date for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE'. YTD is calculated up to the dashboard's fixed date (2025-07-02).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 - Metric: 'PMP Revenue (Previous FY, Performance/Programmatic Filtered, Financial Month 2)' (pmp_revenue_previous_fy_perf_prog_filtered_fm2). Description: Gross revenue from PMP deals for the previous fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'PG Revenue (Previous FY, Performance/Programmatic Filtered, Financial Month 2)' (pg_revenue_previous_fy_perf_prog_filtered_fm2). Description: Gross revenue from PG deals for the previous fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PG' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'OMP Revenue (Previous FY, Performance/Programmatic Filtered, Financial Month 2)' (omp_revenue_previous_fy_perf_prog_filtered_fm2). Description: Gross revenue from OMP deals for the previous fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'OMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'Tubi Revenue (Previous FY, Performance/Programmatic Filtered, Financial Month 2)' (tubi_revenue_previous_fy_perf_prog_filtered_fm2). Description: Gross revenue from Tubi deals for the previous fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'TUBI' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'Performance Revenue (Previous FY, Performance/Programmatic Filtered, Financial Month 2)' (performance_revenue_previous_fy_perf_prog_filtered_fm2). Description: Gross revenue from Performance deals for the previous fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'PMP Revenue (Current FY, Performance/Programmatic Filtered, Financial Month 2)' (pmp_revenue_current_fy_perf_prog_filtered_fm2). Description: Gross revenue from PMP deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'PG Revenue (Current FY, Performance/Programmatic Filtered, Financial Month 2)' (pg_revenue_current_fy_perf_prog_filtered_fm2). Description: Gross revenue from PG deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PG' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'OMP Revenue (Current FY, Performance/Programmatic Filtered, Financial Month 2)' (omp_revenue_current_fy_perf_prog_filtered_fm2). Description: Gross revenue from OMP deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'OMP' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'Tubi Revenue (Current FY, Performance/Programmatic Filtered, Financial Month 2)' (tubi_revenue_current_fy_perf_prog_filtered_fm2). Description: Gross revenue from Tubi deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'TUBI' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2 - Metric: 'Performance Revenue (Current FY, Performance/Programmatic Filtered, Financial Month 2)' (performance_revenue_current_fy_perf_prog_filtered_fm2). Description: Gross revenue from Performance deals for the current fiscal year, only including amounts that are also classified as 'PERFORMANCE' or 'PROGRAMMATIC SOURCE', specifically for financial month 2.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN (CASE WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(t0.cost_model_type) = 'GUARANTEED' THEN 'PG' WHEN UPPER(t0.cost_model_type) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(t0.cost_model_type) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' OR UPPER(t0.revenue_group_subtype) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END) ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_month AS INT64) = 2"
52dd1ac1-19b5-4695-a7e6-632ef7a9dba3_summary,dashboard,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3,Consumer Finance Landing Page,"Dashboard Summary for 'Consumer Finance Landing Page' (ID: 52dd1ac1-19b5-4695-a7e6-632ef7a9dba3). Business Domain: finance. Complexity Score: 2/10. Consolidation Score: 5/10. Reasoning: The SQL queries are very basic, primarily focused on counting records and listing distinct dimension values ('scenario'). There are duplicate queries for the same data retrieval patterns, indicating potential for minor consolidation of basic data access. No complex joins, aggregations, or window functions are present. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions. Contains 3 metrics. - Metric: 'Total Digital Subscriptions Records' (total_records_digital_subscriptions). Description: The total number of records available in the digital subscriptions dataset.. Executable SQL: SELECT COUNT(1) FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` - Metric: 'Subscription Scenario Dimension' (scenario_dimension). Description: A distinct list of all 'scenario' values present in the digital subscriptions data. This is used for filtering or grouping.. Executable SQL: SELECT DISTINCT SAFE_CAST(scenario AS STRING) AS scenario FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` - Metric: 'Digital Subscriptions Records by Scenario' (records_by_scenario). Description: The count of digital subscriptions records, broken down by each unique 'scenario' value.. Executable SQL: SELECT SAFE_CAST(scenario AS STRING) AS scenario, COUNT(1) AS record_count FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` GROUP BY scenario"
e9d8a216-4950-4d30-b344-5011776edbdf_summary,dashboard,e9d8a216-4950-4d30-b344-5011776edbdf,Adex Report,"Dashboard Summary for 'Adex Report' (ID: e9d8a216-4950-4d30-b344-5011776edbdf). Business Domain: advertising. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The SQL queries exhibit high complexity due to deeply nested subqueries, intricate date calculations (rolling periods, fixed periods derived from string parsing), and extensive use of CASE statements for conditional aggregation. The consolidation score is high because multiple metrics are variations of 'Spend' filtered by different date ranges (current, previous, rolling 12 months) and specific categories/media networks ('Digital', 'NEWS CORP', 'Retail'). These variations could be consolidated into fewer, more flexible metrics using parameters or a more robust date dimensioning strategy. Primary Data Sources: ncau-data-newsquery-prd.sbx_dcp.adex_datasource. Contains 8 metrics. - Metric: 'Rolling 12 Month Spend - Digital Media Group' (rolling_12_month_digital_spend). Description: Total advertising spend for the 'Digital' media group over the last 12 months ending on the latest available date in the dataset.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  DATETIME_TRUNC(SAFE_CAST(date AS DATETIME), MONTH) AS month_start_date,
  SUM(Spend) AS rolling_12_month_digital_spend
FROM
  base_data
WHERE
  Media_Group = 'Digital'
  AND SAFE_CAST(date AS DATETIME) > DATETIME_ADD(SAFE_CAST(latest_date AS DATETIME), INTERVAL -12 MONTH)
  AND SAFE_CAST(date AS DATETIME) <= SAFE_CAST(latest_date AS DATETIME)
GROUP BY
  1
ORDER BY
  1 ASC
LIMIT 12; - Metric: 'Current Period Spend (Aug 2023 - Jun 2024)' (current_period_spend_aug23_jun24). Description: Total advertising spend for the fixed current period from August 2023 to June 2024.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  SUM(Spend) AS current_period_spend
FROM
  base_data
WHERE
  SAFE_CAST(date AS DATETIME) BETWEEN PARSE_DATETIME('%Y-%m-%d', '2023-08-01') AND PARSE_DATETIME('%Y-%m-%d', '2024-06-01')
LIMIT 1; - Metric: 'Previous Period Spend (Aug 2022 - Jun 2023)' (previous_period_spend_aug22_jun23). Description: Total advertising spend for the fixed previous period from August 2022 to June 2023.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  SUM(Spend) AS previous_period_spend
FROM
  base_data
WHERE
  SAFE_CAST(date AS DATETIME) BETWEEN PARSE_DATETIME('%Y-%m-%d', '2022-08-01') AND PARSE_DATETIME('%Y-%m-%d', '2023-06-01')
LIMIT 1; - Metric: 'Current Period News Corp Spend (Aug 2023 - Jun 2024)' (current_period_newscorp_spend_aug23_jun24). Description: Total advertising spend for 'NEWS CORP' media network during the fixed current period from August 2023 to June 2024.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  SUM(CASE WHEN Media_Network = 'NEWS CORP' THEN Spend ELSE NULL END) AS current_period_newscorp_spend
FROM
  base_data
WHERE
  SAFE_CAST(date AS DATETIME) BETWEEN PARSE_DATETIME('%Y-%m-%d', '2023-08-01') AND PARSE_DATETIME('%Y-%m-%d', '2024-06-01')
LIMIT 1; - Metric: 'Previous Period News Corp Spend (Aug 2022 - Jun 2023)' (previous_period_newscorp_spend_aug22_jun23). Description: Total advertising spend for 'NEWS CORP' media network during the fixed previous period from August 2022 to June 2023.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  SUM(CASE WHEN Media_Network = 'NEWS CORP' THEN Spend ELSE NULL END) AS previous_period_newscorp_spend
FROM
  base_data
WHERE
  SAFE_CAST(date AS DATETIME) BETWEEN PARSE_DATETIME('%Y-%m-%d', '2022-08-01') AND PARSE_DATETIME('%Y-%m-%d', '2023-06-01')
LIMIT 1; - Metric: 'Current Period Retail Spend (Aug 2023 - Jun 2024)' (current_period_retail_spend_aug23_jun24). Description: Total advertising spend for the 'Retail' major category during the fixed current period from August 2023 to June 2024.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  SUM(CASE WHEN Major_Category = 'Retail' THEN Spend ELSE NULL END) AS current_period_retail_spend
FROM
  base_data
WHERE
  SAFE_CAST(date AS DATETIME) BETWEEN PARSE_DATETIME('%Y-%m-%d', '2023-08-01') AND PARSE_DATETIME('%Y-%m-%d', '2024-06-01')
LIMIT 1; - Metric: 'Total Spend by Media Type' (total_spend_by_media_type). Description: Overall advertising spend aggregated by Media Type, without specific date or category filters.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  )
SELECT
  Media_Type,
  SUM(Spend) AS total_spend
FROM
  base_data
GROUP BY
  Media_Type
ORDER BY
  total_spend DESC
LIMIT 12; - Metric: 'Total Spend Overall' (total_spend_overall). Description: The grand total of all advertising spend across all media types and periods available in the dataset.. Executable SQL: WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  )
SELECT
  SUM(Spend) AS total_spend_overall
FROM
  adex_full_date
LIMIT 1;"
258a722d-9b6e-45df-ba00-1b9954ec36b2_summary,dashboard,258a722d-9b6e-45df-ba00-1b9954ec36b2,Debtor to Account Mapping,"Dashboard Summary for 'Debtor to Account Mapping' (ID: 258a722d-9b6e-45df-ba00-1b9954ec36b2). Business Domain: advertising. Complexity Score: 2/10. Consolidation Score: 2/10. Reasoning: Queries are simple selections from a single view, primarily for displaying account mappings. No complex calculations, joins, or aggregations are present, indicating low complexity. Consolidation is already high as most queries target the same base view with minor filtering. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref;sdm_advertisingexternals.__TABLES__. Contains 5 metrics. - Metric: 'Adpoint Account' (adpoint_account). Description: Identifier for accounts in the Adpoint system, used for cross-referencing with other account types.. Executable SQL: SELECT t0.Adpoint_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1 - Metric: 'Genera Booking Account' (genera_booking_account). Description: Identifier for accounts in the Genera Booking system, used for cross-referencing with other account types.. Executable SQL: SELECT t0.Genera_Booking_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1 - Metric: 'Medium Rare Debtor Account' (medium_rare_debtor_account). Description: Identifier for debtor accounts specifically within the Medium Rare system, used for cross-referencing.. Executable SQL: SELECT t0.Medium_Rare_Debtor_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1 - Metric: 'National Debtor Account' (national_debtor_account). Description: Identifier for national debtor accounts, used for cross-referencing with other account types.. Executable SQL: SELECT t0.National_Debtor_Account FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0 LIMIT 1 - Metric: 'Table Last Update Time' (table_last_update_time). Description: The last time the primary account mapping table (`v_asl_gbaba_act_xref`) was updated, indicating data freshness.. Executable SQL: SELECT DATETIME_TRUNC(PARSE_DATETIME('%Y-%m-%dT%H:%M:%S', FORMAT_TIMESTAMP('%Y-%m-%dT%H:%M:%S', SAFE_CAST(t0.last_update_time AS TIMESTAMP))), SECOND) AS last_update_time FROM ( WITH abc AS ( SELECT datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time FROM `sdm_advertisingexternals.__TABLES__` WHERE table_id = ""gbaba_act_xref"" ) SELECT CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time FROM abc ) AS t0 LIMIT 1"
b15d856f-e3ce-4991-bf2a-92395390524f_summary,dashboard,b15d856f-e3ce-4991-bf2a-92395390524f,Programmatic Rolling 60 Day Overview_NQ Data,"Dashboard Summary for 'Programmatic Rolling 60 Day Overview_NQ Data' (ID: b15d856f-e3ce-4991-bf2a-92395390524f). Business Domain: advertising. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The dashboard uses nested subqueries and complex CASE statements for categorizing transaction types, indicating moderate technical complexity. There's significant repetition of the core 'RevenueNet' metric with different groupings and filters, and the transaction type categorization logic is duplicated across queries, suggesting high consolidation potential by creating reusable views or functions. Primary Data Sources: ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view. Contains 4 metrics. - Metric: 'Total Revenue Net by Transaction Type Category' (total_revenue_net_by_transaction_type_category). Description: The total net revenue grouped by a categorized transaction type (Guaranteed, Deal, Open Auction, or original type if uncategorized). This metric is a key indicator of revenue distribution across different programmatic deal types.. Executable SQL: SELECT
  CASE
    WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
    WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(t0.TransactionType AS STRING)
  END AS transaction_type_category,
  SUM(t0.RevenueNet) AS total_revenue_net
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
GROUP BY transaction_type_category
ORDER BY total_revenue_net DESC; - Metric: 'SSP Date (MMDD Format)' (ssp_date_mmdd_dimension). Description: The SSP Date formatted as an integer representing Month and Day (MMDD), used for chronological grouping or filtering within the dashboard, typically for rolling date ranges.. Executable SQL: SELECT
  SAFE_CAST(FORMAT_DATETIME('%m%d', SAFE_CAST(t0.SSPDate AS DATETIME)) AS INT64) AS ssp_date_mmdd
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
GROUP BY ssp_date_mmdd
ORDER BY ssp_date_mmdd ASC; - Metric: 'Total Revenue Net by Transaction Type Category and SSP Date (Filtered)' (total_revenue_net_by_transaction_type_category_and_ssp_date_filtered). Description: The total net revenue grouped by categorized transaction type and SSP Date (MMDD format), with specific filters applied to both dimensions. This metric provides a granular view of revenue trends for selected transaction types over a defined period.. Executable SQL: SELECT
  CASE
    WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
    WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(t0.TransactionType AS STRING)
  END AS transaction_type_category,
  SAFE_CAST(FORMAT_DATETIME('%m%d', SAFE_CAST(t0.SSPDate AS DATETIME)) AS INT64) AS ssp_date_mmdd,
  SUM(t0.RevenueNet) AS total_revenue_net
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
WHERE
  (SAFE_CAST(FORMAT_DATETIME('%m%d', SAFE_CAST(t0.SSPDate AS DATETIME)) AS INT64) IN (207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 401, 402, 403, 404, 405, 406) AND
  CASE
    WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
    WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(t0.TransactionType AS STRING)
  END IN ('Open Auction', 'Guaranteed', 'Deal', 'Direct', 'PMP', ' - Unspecified - '))
GROUP BY transaction_type_category, ssp_date_mmdd
ORDER BY ssp_date_mmdd ASC; - Metric: 'Total Revenue Net by Product Type' (total_revenue_net_by_product_type). Description: The total net revenue grouped by the product type. This metric helps understand revenue contribution from different product offerings.. Executable SQL: SELECT
  SAFE_CAST(t0.ProductType AS STRING) AS product_type,
  SUM(t0.RevenueNet) AS total_revenue_net
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
GROUP BY product_type
ORDER BY total_revenue_net DESC;"
6a26c78f-0070-4fb3-88b8-691ee4a4485a_summary,dashboard,6a26c78f-0070-4fb3-88b8-691ee4a4485a,Circ Budget Revenue Weekly Report,"Dashboard Summary for 'Circ Budget Revenue Weekly Report' (ID: 6a26c78f-0070-4fb3-88b8-691ee4a4485a). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 9/10. Reasoning: The dashboard's SQL queries exhibit high complexity due to deep nesting, extensive use of `CASE` statements for deriving dimensions and metrics, and intricate conditional logic for calculations like 'Average Daily Volume'. Many metrics are variations of core financial figures (Budget, Actual, Forecast, Volume) filtered or transformed in slightly different ways, indicating significant potential for consolidation into a more streamlined data model or set of views. The consistent base table and initial filtering across all queries further support this consolidation opportunity. Primary Data Sources: ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated. Contains 10 metrics. - Metric: 'Total Actual Amount' (total_actual_amount). Description: The sum of actual financial amounts for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for the current fiscal year (FY2025).. Executable SQL: SELECT SUM(t0.Actual_Amount) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Budget Volume (Current Period)' (budget_volume_current_period). Description: The total budgeted volume for circulation for the current fiscal period (FY2025), excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications.. Executable SQL: SELECT SUM(t0.Budget_Volume) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Prior Fiscal Week Budget Volume' (prior_fiscal_week_budget_volume). Description: The sum of budgeted volume for fiscal weeks prior to the current week (relative_fisc_week_number < 0), for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fisc_week_number < 0) THEN t0.Budget_Volume ELSE NULL END) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Current Volume' (current_volume). Description: The total actual volume for circulation for the current fiscal period (FY2025), excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications.. Executable SQL: SELECT SUM(t0.volume) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Current Volume vs Prior Budget Volume' (current_volume_vs_prior_budget_volume). Description: The difference between the current actual volume and the budgeted volume for prior fiscal weeks (relative_fisc_week_number < 0), for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(t0.volume - (CASE WHEN (t0.relative_fisc_week_number < 0) THEN t0.Budget_Volume ELSE NULL END)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Current Period Actual Amount' (current_period_actual_amount). Description: The sum of actual financial amounts for the current fiscal period, calculated by including amounts up to the current fiscal week number, for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(CASE WHEN ( (CASE WHEN ( (EXTRACT(DAYOFWEEK FROM TIMESTAMP(CURRENT_TIMESTAMP(), 'Australia/Sydney')) - 1) <= 2) THEN (DATETIME_DIFF(SAFE_CAST(CURRENT_TIMESTAMP() AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(CURRENT_TIMESTAMP() AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) <= t0.fy_year_week_number) THEN t0.Actual_Amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Prior Fiscal Week Budget Amount' (prior_fiscal_week_budget_amount). Description: The sum of budgeted financial amounts for fiscal weeks prior to the current week (relative_fisc_week_number < 0), for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fisc_week_number < 0) THEN t0.Budget_Amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Prior Fiscal Week Budget Amount (All Sales Channels)' (prior_fiscal_week_budget_amount_all_sales_channels). Description: The sum of budgeted financial amounts for fiscal weeks prior to the current week (relative_fisc_week_number < 0), specifically for 'ALL SALES CHANNELS', for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(CASE WHEN (UPPER(SAFE_CAST(t0.os_level_7 AS STRING)) = 'ALL SALES CHANNELS') THEN (CASE WHEN (t0.relative_fisc_week_number < 0) THEN t0.Budget_Amount ELSE 0 END) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Average Daily Budget Volume' (average_daily_budget_volume). Description: The calculated average daily budgeted volume, adjusted based on publication type (e.g., '6 Day Pubs', 'Weekly Times', 'The Sportsman', 'The Courier Mail', 'The Australian') and specific fiscal weeks (e.g., week 26, week 40), for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(CASE WHEN ( (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE t0.publication_name END) = 'PNG') THEN 0 WHEN ( (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE t0.publication_name END) = '6 Day Pubs') THEN SAFE_DIVIDE( (CASE WHEN ( (t0.fy_week_of_year = 26 OR t0.fy_week_of_year = 40) AND ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Courier Mail' OR (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Australian' ) ) THEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN SAFE_DIVIDE(t0.Budget_Volume, 4)*5 ELSE t0.Budget_Volume END) WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Sportsman') THEN SAFE_DIVIDE(t0.Budget_Volume, 2)*5 WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'Weekly Times') THEN t0.Budget_Volume*5 WHEN (t0.publication_code = 'Post Courier') THEN 0 ELSE t0.Budget_Volume END) , 6) ELSE SAFE_DIVIDE( (CASE WHEN ( (t0.fy_week_of_year = 26 OR t0.fy_week_of_year = 40) AND ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Courier Mail' OR (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Australian' ) ) THEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN SAFE_DIVIDE(t0.Budget_Volume, 4)*5 ELSE t0.Budget_Volume END) WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Sportsman') THEN SAFE_DIVIDE(t0.Budget_Volume, 2)*5 WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'Weekly Times') THEN t0.Budget_Volume*5 WHEN (t0.publication_code = 'Post Courier') THEN 0 ELSE t0.Budget_Volume END) , 7) END) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025' - Metric: 'Average Daily Forecast Volume' (average_daily_forecast_volume). Description: The calculated average daily forecast volume, adjusted based on publication type (e.g., '6 Day Pubs', 'Weekly Times', 'The Sportsman', 'The Courier Mail', 'The Australian') and specific fiscal weeks (e.g., week 26, week 40), for circulation, excluding 'Free News & Lifestyle', 'Food', and 'Prestige' publications, for FY2025.. Executable SQL: SELECT SUM(CASE WHEN ( (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE t0.publication_name END) = 'PNG') THEN 0 WHEN ( (CASE WHEN (t0.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs' WHEN (t0.publication_name IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas' WHEN (t0.publication_name IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian' WHEN (t0.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other' WHEN (t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun' ELSE t0.publication_name END) = '6 Day Pubs') THEN SAFE_DIVIDE( (CASE WHEN ( (t0.fy_week_of_year = 26 OR t0.fy_week_of_year = 40) AND ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Courier Mail' OR (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Australian' ) ) THEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN SAFE_DIVIDE(t0.Forecast_Volume, 4)*5 ELSE t0.Forecast_Volume END) WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Sportsman') THEN SAFE_DIVIDE(t0.Forecast_Volume, 2)*5 WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'Weekly Times') THEN t0.Forecast_Volume*5 WHEN (t0.publication_code = 'Post Courier') THEN 0 ELSE t0.Forecast_Volume END) , 6) ELSE SAFE_DIVIDE( (CASE WHEN ( (t0.fy_week_of_year = 26 OR t0.fy_week_of_year = 40) AND ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Courier Mail' OR (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Australian' ) ) THEN (CASE WHEN (t0.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN SAFE_DIVIDE(t0.Forecast_Volume, 4)*5 ELSE t0.Forecast_Volume END) WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'The Sportsman') THEN SAFE_DIVIDE(t0.Forecast_Volume, 2)*5 WHEN ( (CASE WHEN (t0.publication_name IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun' WHEN (t0.publication_name IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser' WHEN (t0.publication_name IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail' WHEN (t0.publication_name = 'The Australian') THEN 'The Australian' WHEN (t0.publication_name = 'The Sportsman') THEN 'The Sportsman' WHEN (t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph' WHEN (t0.publication_name = 'Weekly Times') THEN 'Weekly Times' ELSE NULL END) = 'Weekly Times') THEN t0.Forecast_Volume*5 WHEN (t0.publication_code = 'Post Courier') THEN 0 ELSE t0.Forecast_Volume END) , 7) END) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0 LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number WHERE upper(t0.os_level_6) = 'CIRCULATION' AND t0.l04_publication_code <> 'Free News & Lifestyle' AND t0.l06_publication_code NOT IN ('Food', 'Prestige') AND t0.gl_hierarchy_code = 'FY2025'"
52c11c9c-052a-4e45-9cda-8fecd87d7964_summary,dashboard,52c11c9c-052a-4e45-9cda-8fecd87d7964,Team Sales Performance - FY26 (Interim)(with Pluto Reporting Date),"Dashboard Summary for 'Team Sales Performance - FY26 (Interim)(with Pluto Reporting Date)' (ID: 52c11c9c-052a-4e45-9cda-8fecd87d7964). Business Domain: sales. Complexity Score: 9/10. Consolidation Score: 9/10. Reasoning: The SQL queries exhibit high complexity due to deeply nested subqueries, extensive CASE statements for deriving dimensions and metrics, and a large, repeated common WHERE clause. The dashboard would greatly benefit from consolidation by creating a base view or materialized view that encapsulates the common CTE logic and derived fields, reducing redundancy and improving maintainability. Many metrics are variations of a core 'gross_revenue_amount' based on fiscal year offsets and scaling. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily;ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 13 metrics. - Metric: 'Gross Revenue (Current FY)' (gross_revenue_current_fy). Description: The total gross revenue amount for the current fiscal year, based on billed or booked transactions.. Executable SQL: SELECT
  SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_current_fy
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  relative_fy_year_offset = 0
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Gross Revenue (Previous FY)' (gross_revenue_previous_fy). Description: The total gross revenue amount for the previous fiscal year, based on billed or booked transactions.. Executable SQL: SELECT
  SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_previous_fy
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  relative_fy_year_offset = -1
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Gross Revenue (Next FY)' (gross_revenue_next_fy). Description: The total gross revenue amount for the next fiscal year, based on billed or booked transactions.. Executable SQL: SELECT
  SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_next_fy
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  relative_fy_year_offset = 1
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Gross Revenue (Current FY) ('000 AUD)' (gross_revenue_current_fy_k_aud). Description: The total gross revenue amount for the current fiscal year, expressed in thousands of AUD.. Executable SQL: SELECT
  SAFE_DIVIDE(SUM(IFNULL(gross_revenue_amount, 0)), 1000) AS gross_revenue_current_fy_k_aud
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  relative_fy_year_offset = 0
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Gross Revenue (Previous FY) ('000 AUD)' (gross_revenue_previous_fy_k_aud). Description: The total gross revenue amount for the previous fiscal year, expressed in thousands of AUD.. Executable SQL: SELECT
  SAFE_DIVIDE(SUM(IFNULL(gross_revenue_amount, 0)), 1000) AS gross_revenue_previous_fy_k_aud
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  relative_fy_year_offset = -1
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Gross Revenue (Next FY) ('000 AUD)' (gross_revenue_next_fy_k_aud). Description: The total gross revenue amount for the next fiscal year, expressed in thousands of AUD.. Executable SQL: SELECT
  SAFE_DIVIDE(SUM(IFNULL(gross_revenue_amount, 0)), 1000) AS gross_revenue_next_fy_k_aud
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  relative_fy_year_offset = 1
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Adjustment Amount' (adjustment_amount). Description: The total amount of adjustments applied to revenue transactions.. Executable SQL: SELECT
  SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Pub LGB' (pub_lgb). Description: The total amount for 'LGB' (Likely Good Business) from the publisher's perspective.. Executable SQL: SELECT
  SUM(IFNULL(lgb_pub_amount, 0)) AS pub_lgb
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'SS LGB' (ss_lgb). Description: The total amount for 'LGB' (Likely Good Business) from the sales segment's perspective.. Executable SQL: SELECT
  SUM(IFNULL(lgb_ss_amount, 0)) AS ss_lgb
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Pipeline Amount' (pipeline_amount). Description: The total amount of revenue currently in the sales pipeline.. Executable SQL: SELECT
  SUM(IFNULL(pipeline_amount, 0)) AS pipeline_amount
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Target Amount' (target_amount). Description: The total target revenue amount set for sales performance.. Executable SQL: SELECT
  SUM(IFNULL(target_amount, 0)) AS target_amount
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Number of Classified Revenue Transactions' (number_of_classified_revenue_transactions). Description: The count of revenue transactions classified by specific revenue types (e.g., Print, Digital, Programmatic).. Executable SQL: SELECT
  COUNT(CASE
    WHEN UPPER(revenue_group_sub_type_code) = 'PRINT' THEN 1
    WHEN UPPER(revenue_group_sub_type_code) = 'DIGITAL' THEN 2
    WHEN UPPER(revenue_group_sub_type_code) = 'PROGRAMMATIC' THEN 3
    WHEN UPPER(revenue_group_sub_type_code) = 'PROGRAMMATIC EXCHANGE' THEN 4
    WHEN UPPER(revenue_group_sub_type_code) = 'PROGRAMMATIC SOURCE' THEN 5
    WHEN UPPER(revenue_group_sub_type_code) = 'SUNDRY ADSALES OVERLAY' THEN 6
    ELSE NULL
  END) AS number_of_classified_revenue_transactions
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-'))); - Metric: 'Ad Type Level 1' (adtype_l1_dimension). Description: The highest level classification of advertisement type.. Executable SQL: SELECT
  adtype_l1
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
  AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
  (UPPER(publication_name) LIKE 'SUDDENLY%' AND (SAFE_CAST(advertiser_id_src AS STRING) IN ('17114', '29172', '52809') OR ad_type_name = '-')))
GROUP BY
  adtype_l1
ORDER BY
  adtype_l1
LIMIT 10;"
61f1feb4-fc3e-4bee-b987-84c86cfe6425_summary,dashboard,61f1feb4-fc3e-4bee-b987-84c86cfe6425,Digital - Publications and Products Monthly ,"Dashboard Summary for 'Digital - Publications and Products Monthly ' (ID: 61f1feb4-fc3e-4bee-b987-84c86cfe6425). Business Domain: advertising. Complexity Score: 6/10. Consolidation Score: 8/10. Reasoning: The dashboard's SQL queries exhibit moderate complexity due to nested subqueries and repeated `CASE` statements for deriving revenue categories. The high consolidation score is driven by the frequent reuse of the same complex `CASE` logic and common filters (e.g., financial year) across multiple queries, indicating opportunities to centralize these derived fields or apply common filtering logic. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 6 metrics. - Metric: 'Unified Publication Name (Digital/Programmatic, FY24/25)' (unified_publication_name_digital_programmatic_2024_2025). Description: List of unified publication names for digital and programmatic revenue types in financial years 2024 and 2025.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.unified_publication_name AS STRING) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND SAFE_CAST(t0.revenue_group_subtype AS STRING) IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE') - Metric: 'Revenue Group Subtype (Digital excl. XTEND, FY24/25)' (revenue_group_subtype_digital_excl_xtend_2024_2025). Description: List of revenue group subtypes for digital revenue (excluding XTEND) in financial years 2024 and 2025.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.revenue_group_subtype AS STRING) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND (CASE WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) = 'DIGITAL (excl.XTEND)' - Metric: 'Revenue Group Subtype (Digital, FY24/25)' (revenue_group_subtype_digital_2024_2025). Description: List of revenue group subtypes for 'digital' revenue in financial years 2024 and 2025. Note: The filter value 'digital' might imply case-insensitivity or a specific category.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.revenue_group_subtype AS STRING) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND (CASE WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) = 'digital' - Metric: 'Financial Ad Type Name (Non-Print, FY24/25)' (fin_adtype_name_non_print_2024_2025). Description: List of financial ad type names for non-print revenue in financial years 2024 and 2025.. Executable SQL: SELECT DISTINCT SAFE_CAST(t0.fin_adtype_name AS STRING) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END NOT IN ('PRINT') OR CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END IS NULL) - Metric: 'Minimum Data Load Timestamp' (min_dw_asl_load_timestamp). Description: The earliest timestamp indicating when data was loaded into the ad sales performance table.. Executable SQL: SELECT MIN(DATETIME_TRUNC(t0.dw_asl_load_timestamp, SECOND)) AS min_load_timestamp FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Derived Revenue Type Category (FY24/25)' (derived_revenue_type_category_2024_2025). Description: Categorized revenue types (Digital excl. XTEND, Print, XTEND Only) for financial years 2024 and 2025.. Executable SQL: SELECT DISTINCT (CASE WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'PRINT') THEN 'PRINT' WHEN (CASE WHEN (SAFE_CAST(t0.xtend_flag AS STRING) = 'Y') THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) AS derived_revenue_type_category FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')"
f7a9efeb-df3c-45c9-899d-0bcada701572_summary,dashboard,f7a9efeb-df3c-45c9-899d-0bcada701572,Salaries & Wages Dashboard UAT Version,"Dashboard Summary for 'Salaries & Wages Dashboard UAT Version' (ID: f7a9efeb-df3c-45c9-899d-0bcada701572). Business Domain: finance. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The dashboard queries involve nested subqueries, conditional aggregations using CASE statements, and UNION ALL for metadata retrieval. This indicates moderate complexity. There's high potential for consolidation as core metrics (amount, volume) are used directly and also with specific filters (e.g., revenue_type = '03'), suggesting these could be derived from a single, more comprehensive query. Primary Data Sources: ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check;ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement;ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct. Contains 6 metrics. - Metric: 'Total Amount by FY Week' (total_amount_by_fy_week). Description: The total financial amount aggregated by fiscal year week number.. Executable SQL: SELECT SUM(SAFE_CAST(t0.amount AS BIGNUMERIC)) AS total_amount, SAFE_CAST(t0.fy_year_week_number AS STRING) AS fy_year_week_number FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0 GROUP BY fy_year_week_number ORDER BY fy_year_week_number DESC LIMIT 100; - Metric: 'Total Volume by FY Week' (total_volume_by_fy_week). Description: The total volume aggregated by fiscal year week number.. Executable SQL: SELECT SUM(SAFE_CAST(t0.volume AS BIGNUMERIC)) AS total_volume, SAFE_CAST(t0.fy_year_week_number AS STRING) AS fy_year_week_number FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0 GROUP BY fy_year_week_number ORDER BY fy_year_week_number DESC LIMIT 100; - Metric: 'Amount for Revenue Type '03' by FY Week' (amount_revenue_type_03_by_fy_week). Description: The total financial amount specifically for revenue types starting with '03', aggregated by fiscal year week number.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(SAFE.LEFT(t0.revenue_type, 2) AS STRING) = '03' THEN SAFE_CAST(t0.amount AS BIGNUMERIC) ELSE 0 END) AS amount_revenue_type_03, SAFE_CAST(t0.fy_year_week_number AS STRING) AS fy_year_week_number FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0 GROUP BY fy_year_week_number ORDER BY fy_year_week_number DESC LIMIT 100; - Metric: 'Volume for Revenue Type '03' by FY Week' (volume_revenue_type_03_by_fy_week). Description: The total volume specifically for revenue types starting with '03', aggregated by fiscal year week number.. Executable SQL: SELECT SUM(CASE WHEN SAFE_CAST(SAFE.LEFT(t0.revenue_type, 2) AS STRING) = '03' THEN SAFE_CAST(t0.volume AS BIGNUMERIC) ELSE 0 END) AS volume_revenue_type_03, SAFE_CAST(t0.fy_year_week_number AS STRING) AS fy_year_week_number FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0 GROUP BY fy_year_week_number ORDER BY fy_year_week_number DESC LIMIT 100; - Metric: 'Total Amount by Revenue Type' (total_amount_by_revenue_type). Description: The total financial amount aggregated by revenue type.. Executable SQL: SELECT SUM(SAFE_CAST(t0.amount AS BIGNUMERIC)) AS total_amount, SAFE_CAST(t0.revenue_type AS STRING) AS revenue_type FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0 GROUP BY revenue_type ORDER BY revenue_type ASC LIMIT 100; - Metric: 'Last Updated Timestamp' (last_updated_timestamp). Description: The most recent data load timestamp from the underlying finance and circulation snapshot tables, indicating data freshness.. Executable SQL: SELECT MIN(DATETIME_TRUNC(snap_load_time, SECOND)) AS last_updated_timestamp FROM (
  SELECT MAX(snap_load_time) AS snap_load_time FROM (
    SELECT datetime(max(dw_prstn_load_timestamp), 'Australia/Sydney') AS snap_load_time FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement` WHERE source_system_name = 'Circulation' AND scenario = 'Estimate' AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
    UNION ALL
    SELECT datetime(max(dw_bdm_load_timestamp), 'Australia/Sydney') AS snap_load_time FROM `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`
  ) AS load_time
) LIMIT 1;"
d7412673-0af1-4efe-8374-ca475b001fb6_summary,dashboard,d7412673-0af1-4efe-8374-ca475b001fb6,Finance OS datasource template report,"Dashboard Summary for 'Finance OS datasource template report' (ID: d7412673-0af1-4efe-8374-ca475b001fb6). Business Domain: finance. Complexity Score: 7/10. Consolidation Score: 3/10. Reasoning: The dashboard leverages a complex, pre-joined Common Table Expression (CTE) named 'OSandFACT' as its primary data source, which includes multiple joins and casting operations. This indicates a well-structured underlying data model. The queries themselves are variations (different aggregations/groupings) of this already consolidated base, hence the lower consolidation score. The complexity arises from the extensive joins and data transformations within the core CTE. Primary Data Sources: ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department;ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_rel_timeperiod_weekly. Contains 3 metrics. - Metric: 'Total Records by Source System' (total_records_by_source_system). Description: Counts the total number of records available for each source system in the finance data.. Executable SQL: WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS int) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      calendar.fy_year,
      calendar.fy_quarter_of_year,
      calendar.fy_month_of_year,
      calendar.fy_week_of_year,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.month_end_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
          CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
          CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE
            WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
            ELSE 'N'
          END AS month_end_flag,
          CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
          CAST(c.fy_year AS int) AS fy_year,
          `current_timestamp`() AS extract_time
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  COUNT(1) AS total_records,
  source_system_name
FROM
  OSandFACT
GROUP BY
  source_system_name
LIMIT 2000001; - Metric: 'Actual Amount by Source System' (actual_amount_by_source_system). Description: Sums the actual financial amount for each source system.. Executable SQL: WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS int) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      calendar.fy_year,
      calendar.fy_quarter_of_year,
      calendar.fy_month_of_year,
      calendar.fy_week_of_year,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.month_end_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
          CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
          CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE
            WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
            ELSE 'N'
          END AS month_end_flag,
          CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
          CAST(c.fy_year AS int) AS fy_year,
          `current_timestamp`() AS extract_time
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  SUM(Actual_Amount) AS actual_amount,
  source_system_name
FROM
  OSandFACT
GROUP BY
  source_system_name
LIMIT 2000001; - Metric: 'Actual Amount by Fiscal Year and Source System' (actual_amount_by_fiscal_year_and_source_system). Description: Sums the actual financial amount for each fiscal year and source system.. Executable SQL: WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS int) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      calendar.fy_year,
      calendar.fy_quarter_of_year,
      calendar.fy_month_of_year,
      calendar.fy_week_of_year,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.month_end_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_first_day_of_week AS date) AS fy_first_day_of_week,
          CAST(c.fy_last_day_of_week AS date) AS fy_last_day_of_week,
          CAST(c.fy_month_of_year AS int) AS fy_month_of_year,
          CAST(c.fy_year_month_number AS int) AS fy_year_month_number,
          CAST(c.relative_fisc_year_number AS int) AS relative_fisc_year_number,
          CAST(c.relative_fisc_week_number AS int) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE
            WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
            ELSE 'N'
          END AS month_end_flag,
          CAST(c.fy_quarter_of_year AS int) AS fy_quarter_of_year,
          CAST(c.fy_year AS int) AS fy_year,
          `current_timestamp`() AS extract_time
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
        WHERE
          1 = 1
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  SUM(Actual_Amount) AS actual_amount,
  fy_year,
  source_system_name
FROM
  OSandFACT
GROUP BY
  fy_year,
  source_system_name
LIMIT 2000001;"
705edcb5-737a-4600-b1a7-11870177f97a_summary,dashboard,705edcb5-737a-4600-b1a7-11870177f97a,Programmatic Impact Reporting,"Dashboard Summary for 'Programmatic Impact Reporting' (ID: 705edcb5-737a-4600-b1a7-11870177f97a). Business Domain: advertising. Complexity Score: 6/10. Consolidation Score: 8/10. Reasoning: The SQL queries exhibit a moderate level of complexity, utilizing subqueries, `DATETIME_TRUNC`, `SAFE_CAST`, and specific filtering logic for different revenue types and dimensions. There is a high potential for consolidation as all queries target the same large fact table (`v_adsales_revenue_client`) and share a significant portion of their `WHERE` clauses (e.g., filtering by publishing division, transaction status, and financial year). This suggests that a consolidated data model or pre-aggregated views could greatly improve efficiency and maintainability. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client. Contains 6 metrics. - Metric: 'Advertiser Name' (advertiser_name_dim). Description: The name of the advertising client.. Executable SQL: SELECT t0.advertiser_name FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') - Metric: 'Data Load Datetime' (data_load_datetime_dim). Description: The timestamp when the data was loaded into the system. Used for data freshness checks.. Executable SQL: SELECT DATETIME_TRUNC(t0.data_load_datetime, SECOND) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') - Metric: 'Cost Model Type' (cost_model_type_dim). Description: The type of cost model used for the advertising campaign (e.g., PMP, Non-Guaranteed).. Executable SQL: SELECT t0.cost_model_type FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') - Metric: 'Gross Revenue Amount (Base)' (gross_revenue_amount_base). Description: The total gross revenue generated from advertising sales, before any specific programmatic or advertiser-specific filters, but including standard dashboard filters (billed/booked status, publishing division).. Executable SQL: SELECT SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') - Metric: 'Programmatic Revenue (2025 FY)' (programmatic_revenue_2025). Description: Gross revenue specifically from programmatic advertising for the 2025 financial year, originating from the 'PLUTO' source system, with 'PMP' or 'Non-Guaranteed' cost models, and a revenue group subtype of 'Programmatic Source' or 'Digital'.. Executable SQL: SELECT SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_type_level2 = 'Programmatic' AND t0.revenue_group_subtype IN ('Programmatic Source', 'Digital') AND t0.source_system_code = 'PLUTO' AND t0.cost_model_type IN ('PMP', 'Non-Guaranteed') AND t0.financial_year IN ('2025') - Metric: 'Programmatic Revenue from Foxtel (2025 FY)' (programmatic_revenue_foxtel_2025). Description: Gross revenue specifically from programmatic advertising for the advertiser 'Foxtel Management Pty Ltd', for the 2025 financial year, originating from the 'PLUTO' source system, with a revenue group subtype of 'Programmatic Source' or 'Digital'.. Executable SQL: SELECT SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.financial_year IS NOT NULL AND t0.source_publishing_division != 'Medium Rare Content Agency' AND t0.revenue_transaction_status IN ('Billed', 'Booked') AND t0.revenue_type_level2 = 'Programmatic' AND t0.revenue_group_subtype IN ('Programmatic Source', 'Digital') AND t0.advertiser_name = 'Foxtel Management Pty Ltd' AND t0.source_system_code = 'PLUTO' AND t0.financial_year IN ('2025')"
3ee20092-1897-49b7-8bcd-4157d5f816eb_summary,dashboard,3ee20092-1897-49b7-8bcd-4157d5f816eb,AdSales Data for Pacing Report ,"Dashboard Summary for 'AdSales Data for Pacing Report ' (ID: 3ee20092-1897-49b7-8bcd-4157d5f816eb). Business Domain: sales. Complexity Score: 7/10. Consolidation Score: 8/10. Reasoning: The SQL queries involve multiple levels of nested subqueries, CASE statements for date ordering, and complex WHERE clauses with IN and NOT IN conditions, indicating a moderate to high technical complexity. There are several variations of revenue metrics and dimensions filtered by financial_year, revenue_group_subtype, style_name, and financial_week, suggesting a high potential for metric consolidation by defining base metrics and their specific filter contexts. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 12 metrics. - Metric: 'Financial Year (Sundry AdSales Overlay)' (financial_year_sundry_adsales_overlay). Description: The financial year for revenue categorized as 'Sundry AdSales Overlay'.. Executable SQL: SELECT financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' GROUP BY financial_year - Metric: 'Revenue Group Subtype Filter (Sundry AdSales Overlay)' (revenue_group_subtype_sundry_adsales_overlay_filter). Description: Filter for revenue group subtype 'SUNDRY ADSALES OVERLAY'.. Executable SQL: SELECT DISTINCT revenue_group_subtype FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' - Metric: 'Gross Revenue Amount (Nova Entertainment, FY2025, Digital/Print/Sundry, Excl. Production)' (gross_revenue_amount_nova_entertainment_2025_digital_print_sundry). Description: Total gross revenue for Nova Entertainment Pty Ltd in financial year 2025, including Digital, Print, and Sundry AdSales Overlay revenue groups, excluding 'PRODUCTION' style.. Executable SQL: SELECT SUM(gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE style_name != 'PRODUCTION' AND advertiser_name = 'Nova Entertainment Pty Ltd' AND financial_year = '2025' AND revenue_group_subtype IN ('DIGITAL', 'PRINT', 'SUNDRY ADSALES OVERLAY') - Metric: 'Financial Year (Nova Entertainment, FY2025)' (financial_year_nova_entertainment_2025). Description: The financial year for Nova Entertainment Pty Ltd, specifically 2025.. Executable SQL: SELECT financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE advertiser_name = 'Nova Entertainment Pty Ltd' AND financial_year = '2025' GROUP BY financial_year - Metric: 'Financial Short Month Order' (financial_short_month_order). Description: Numeric representation of financial short month for ordering (Jul=1, Aug=2, ..., Jun=12).. Executable SQL: SELECT CASE WHEN (financial_short_month = 'Jul') THEN 1 WHEN (financial_short_month = 'Aug') THEN 2 WHEN (financial_short_month = 'Sep') THEN 3 WHEN (financial_short_month = 'Oct') THEN 4 WHEN (financial_short_month = 'Nov') THEN 5 WHEN (financial_short_month = 'Dec') THEN 6 WHEN (financial_short_month = 'Jan') THEN 7 WHEN (financial_short_month = 'Feb') THEN 8 WHEN (financial_short_month = 'Mar') THEN 9 WHEN (financial_short_month = 'Apr') THEN 10 WHEN (financial_short_month = 'May') THEN 11 WHEN (financial_short_month = 'Jun') THEN 12 ELSE NULL END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` GROUP BY 1 - Metric: 'Revenue Group Subtype (FY2025)' (revenue_group_subtype_2025). Description: The revenue group subtype for financial year 2025.. Executable SQL: SELECT revenue_group_subtype FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE financial_year = '2025' GROUP BY revenue_group_subtype - Metric: 'Financial Year Filter (2025)' (financial_year_2025_filter). Description: Filter for financial year 2025.. Executable SQL: SELECT DISTINCT financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE financial_year = '2025' - Metric: 'Gross Revenue Amount (Digital, Excl. Admin/Production, FY2024/2025, Excl. EOY Weeks)' (gross_revenue_amount_digital_excl_admin_production_fy2024_2025_excl_eoy_weeks). Description: Total gross revenue for Digital revenue group, excluding 'PRODUCTION' style, specific 'Admin' publication names, and financial weeks 47-52, for financial years 2024 and 2025.. Executable SQL: SELECT SUM(gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE style_name != 'PRODUCTION' AND unified_publication_name NOT IN ('Admin.Sales', 'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Qantas Travel Insider', 'RACENET', 'SKYNEWS.ADMIN', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin', 'TOOWOOMBACUSTOM', 'odds.com.au', 'Shortlyster Managed Service NWN', 'Shortlyster Managed Service', 'Shortlyster Managed Service NQN', 'Shortlyster Managed Service GAD', 'SUDDENLY.TGG', 'SUDDENLY.CW', 'SUDDENLY.NORTH') AND financial_year IN ('2025', '2024') AND revenue_group_subtype = 'DIGITAL' AND (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(financial_week AS INT64) IS NULL) - Metric: 'Sum of Financial Week (Digital, Excl. Admin/Production, FY2024/2025, Excl. EOY Weeks)' (financial_week_sum_digital_excl_admin_production_fy2024_2025_excl_eoy_weeks). Description: Sum of financial week numbers, used as a dimension, for Digital revenue group, excluding 'PRODUCTION' style, specific 'Admin' publication names, and financial weeks 47-52, for financial years 2024 and 2025.. Executable SQL: SELECT SUM(SAFE_CAST(financial_week AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE style_name != 'PRODUCTION' AND unified_publication_name NOT IN ('Admin.Sales', 'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Qantas Travel Insider', 'RACENET', 'SKYNEWS.ADMIN', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin', 'TOOWOOMBACUSTOM', 'odds.com.au', 'Shortlyster Managed Service NWN', 'Shortlyster Managed Service', 'Shortlyster Managed Service NQN', 'Shortlyster Managed Service GAD', 'SUDDENLY.TGG', 'SUDDENLY.CW', 'SUDDENLY.NORTH') AND financial_year IN ('2025', '2024') AND revenue_group_subtype = 'DIGITAL' AND (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(financial_week AS INT64) IS NULL) - Metric: 'Financial Ad Type Name (Digital, Excl. Admin/Production, FY2024/2025, Excl. EOY Weeks)' (fin_adtype_name_digital_excl_admin_production_fy2024_2025_excl_eoy_weeks). Description: The financial ad type name for Digital revenue group, excluding 'PRODUCTION' style, specific 'Admin' publication names, and financial weeks 47-52, for financial years 2024 and 2025.. Executable SQL: SELECT fin_adtype_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE style_name != 'PRODUCTION' AND unified_publication_name NOT IN ('Admin.Sales', 'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'News.Admin', 'Qantas Travel Insider', 'RACENET', 'SKYNEWS.ADMIN', 'Sky News', 'Stellar.Admin', 'Stockhead', 'TAUS.ADMIN', 'Taste.Admin', 'Vogue.Admin', 'Vogueliving.Admin', 'TOOWOOMBACUSTOM', 'odds.com.au', 'Shortlyster Managed Service NWN', 'Shortlyster Managed Service', 'Shortlyster Managed Service NQN', 'Shortlyster Managed Service GAD', 'SUDDENLY.TGG', 'SUDDENLY.CW', 'SUDDENLY.NORTH') AND financial_year IN ('2025', '2024') AND revenue_group_subtype = 'DIGITAL' AND (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(financial_week AS INT64) IS NULL) GROUP BY fin_adtype_name - Metric: 'Financial Week (Digital, FY2024)' (financial_week_digital_fy2024). Description: The financial week for Digital revenue group in financial year 2024.. Executable SQL: SELECT SAFE_CAST(financial_week AS INT64) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE financial_year = '2024' AND revenue_group_subtype = 'DIGITAL' GROUP BY SAFE_CAST(financial_week AS INT64) - Metric: 'Revenue Group Subtype (FY2024/2025, Excl. EOY Weeks)' (revenue_group_subtype_fy2024_2025_excl_eoy_weeks). Description: The revenue group subtype for financial years 2024 and 2025, excluding financial weeks 47-52.. Executable SQL: SELECT revenue_group_subtype FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE financial_year IN ('2025', '2024') AND (SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(financial_week AS INT64) IS NULL) GROUP BY revenue_group_subtype"
77c68c35-20ce-477a-b216-0c781d43a8ca_summary,dashboard,77c68c35-20ce-477a-b216-0c781d43a8ca,Cecile - Adsales Adhoc Analysis,"Dashboard Summary for 'Cecile - Adsales Adhoc Analysis' (ID: 77c68c35-20ce-477a-b216-0c781d43a8ca). Business Domain: advertising. Complexity Score: 6/10. Consolidation Score: 8/10. Reasoning: The dashboard queries involve subqueries, date/time truncations, and multiple filtering conditions, indicating moderate complexity. There's high consolidation potential as the same base metrics (e.g., gross revenue, data load timestamp) are queried multiple times with slightly different filters, suggesting opportunities for parameterized queries or a more unified data model. Primary Data Sources: ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client;ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement. Contains 7 metrics. - Metric: 'Total Gross Revenue (Booked/Billed, ADPT, FY2025, Excl. MRCA, Excl. Zero/Near-Zero, Un-invoiced)' (gross_revenue_booked_billed_adpt_fy2025_un_invoiced). Description: The sum of gross revenue amounts for transactions that are 'Booked' or 'Billed', originate from the 'ADPT' system, are for financial year 2025, exclude 'Medium Rare Content Agency', have an invoice number of '-1' (likely un-invoiced), and are not near zero.. Executable SQL: SELECT SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE (t0.revenue_transaction_status IN ('Booked', 'Billed') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) AND t0.source_system_code IN ('ADPT') AND t0.invoice_number = '-1' AND NOT(t0.gross_revenue_amount BETWEEN -1.000000 AND 1.000000) AND t0.financial_year IN ('2025')) - Metric: 'Total Gross Revenue by Financial Year, Week, Source System (Booked/Billed, FY2025, Excl. MRCA, Un-invoiced)' (gross_revenue_by_fy_fw_source_system_booked_billed_fy2025_un_invoiced). Description: The sum of gross revenue amounts, grouped by financial year, financial week, and source system code, for transactions that are 'Booked' or 'Billed', exclude 'Medium Rare Content Agency', have an invoice number of '-1' (likely un-invoiced), and are for financial year 2025 from specific source systems.. Executable SQL: SELECT t0.financial_year, SAFE_CAST(t0.financial_week AS INT64) AS financial_week_id, t0.source_system_code, SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE (t0.revenue_transaction_status IN ('Booked', 'Billed') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) AND t0.invoice_number = '-1' AND t0.source_system_code IN ('PLUTO', 'CPQ', 'ADPT') AND t0.financial_year IN ('2025')) GROUP BY t0.financial_year, financial_week_id, t0.source_system_code - Metric: 'Sum of Financial Week ID (Booked/Billed, FY2025, Excl. MRCA, Un-invoiced)' (sum_financial_week_id_booked_billed_fy2025_un_invoiced). Description: The sum of financial week IDs, grouped by financial year, financial week, and source system code, for transactions that are 'Booked' or 'Billed', exclude 'Medium Rare Content Agency', have an invoice number of '-1' (likely un-invoiced), and are for financial year 2025 from specific source systems. This is an unusual aggregation, possibly used for ordering or internal calculation.. Executable SQL: SELECT t0.financial_year, SAFE_CAST(t0.financial_week AS INT64) AS financial_week_id, t0.source_system_code, SUM(SAFE_CAST(t0.financial_week AS INT64)) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE (t0.revenue_transaction_status IN ('Booked', 'Billed') AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) AND t0.invoice_number = '-1' AND t0.source_system_code IN ('PLUTO', 'CPQ', 'ADPT') AND t0.financial_year IN ('2025')) GROUP BY t0.financial_year, financial_week_id, t0.source_system_code - Metric: 'Record Count by OS Level 5 (Fiscal Week 202548-202551)' (record_count_by_os_level_5_fiscal_week_2025_end). Description: The count of records from the finance operating statement, grouped by 'os_level_5', for specific fiscal weeks at the end of 2025.. Executable SQL: SELECT t0.os_level_5, COUNT(1) FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement` AS t0 WHERE t0.fiscal_week_id IN ('202548', '202549', '202550', '202551') GROUP BY t0.os_level_5 - Metric: 'Data Load Timestamp (Excl. Digital Revenue Type)' (data_load_timestamp_excl_digital_revenue). Description: The truncated data load timestamp, used as a dimension, for revenue transactions that are not classified as 'Digital' revenue.. Executable SQL: SELECT DATETIME_TRUNC(t0.data_load_datetime, SECOND) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE (t0.revenue_type NOT IN ('Digital') OR t0.revenue_type IS NULL) GROUP BY DATETIME_TRUNC(t0.data_load_datetime, SECOND) - Metric: 'Total SS LGB by Advertiser, Booking, Publication (CW Media, SUDDENLY Pubs)' (total_ss_lgb_cw_media_suddenly_pubs). Description: The sum of 'ss_lgb' (likely a revenue or booking amount), grouped by advertiser name, booking line number, booking number, financial month, revenue transaction status, and unified publication name, specifically for 'CW Media Pty Ltd' and 'SUDDENLY.CW' or 'SUDDENLY.NORTH' publications.. Executable SQL: SELECT t0.advertiser_name, t0.booking_line_number, t0.booking_number, SAFE_CAST(t0.financial_month AS FLOAT64) AS financial_month_id, t0.revenue_transaction_status, t0.unified_publication_name, SUM(t0.ss_lgb) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE (t0.advertiser_name IN ('CW Media Pty Ltd') AND t0.unified_publication_name IN ('SUDDENLY.CW', 'SUDDENLY.NORTH')) GROUP BY t0.advertiser_name, t0.booking_line_number, t0.booking_number, financial_month_id, t0.revenue_transaction_status, t0.unified_publication_name - Metric: 'Data Load Timestamp (Filtered by Unified Publication GL Code)' (data_load_timestamp_by_unified_publication_gl_code). Description: The truncated data load timestamp, used as a dimension, for transactions associated with specific unified publication GL codes.. Executable SQL: SELECT DATETIME_TRUNC(t0.data_load_datetime, SECOND) FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0 WHERE t0.unified_publication_gl_code IN ('9707', '9655', '9658') GROUP BY DATETIME_TRUNC(t0.data_load_datetime, SECOND)"
23c8b213-a9f0-4158-b8fa-bff14425abb5_summary,dashboard,23c8b213-a9f0-4158-b8fa-bff14425abb5,TM1 NewsQuery Tables,"Dashboard Summary for 'TM1 NewsQuery Tables' (ID: 23c8b213-a9f0-4158-b8fa-bff14425abb5). Business Domain: finance. Complexity Score: 2/10. Consolidation Score: 4/10. Reasoning: Queries are simple direct column selections from single tables with basic filtering and grouping. No complex joins, subqueries, or advanced SQL features observed. Consolidation opportunities are moderate as metrics are spread across different, though related, financial tables. Primary Data Sources: ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions;ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_gr_digsubs_estimate;ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals. Contains 16 metrics. - Metric: 'Add Volume' (add_volume). Description: Volume added to subscriptions within a period.. Executable SQL: SELECT SUM(SAFE_CAST(add_volume AS BIGNUMERIC)) AS total_add_volume FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'Category Name' (category_name). Description: The name of the subscription category.. Executable SQL: SELECT DISTINCT category_name FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` LIMIT 100; - Metric: 'Closing Base' (closing_base). Description: The total number of subscriptions at the end of a fiscal period.. Executable SQL: SELECT SUM(SAFE_CAST(closing_base AS BIGNUMERIC)) AS total_closing_base FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'Earned Amount' (earned_amount). Description: The revenue earned from subscriptions.. Executable SQL: SELECT SUM(SAFE_CAST(earned_amount AS BIGNUMERIC)) AS total_earned_amount FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'Fiscal Week ID' (fiscal_week_id). Description: Identifier for the fiscal week (YYYYWW format).. Executable SQL: SELECT DISTINCT fiscal_week_id FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` ORDER BY fiscal_week_id DESC LIMIT 100; - Metric: 'GL Publication Code' (gl_publication_code). Description: General Ledger publication code associated with subscriptions.. Executable SQL: SELECT DISTINCT gl_publication_code FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` LIMIT 100; - Metric: 'Opening Base' (opening_base). Description: The total number of subscriptions at the beginning of a fiscal period.. Executable SQL: SELECT SUM(SAFE_CAST(opening_base AS BIGNUMERIC)) AS total_opening_base FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'Red Volume' (red_volume). Description: Volume reduced from subscriptions within a period.. Executable SQL: SELECT SUM(SAFE_CAST(red_volume AS BIGNUMERIC)) AS total_red_volume FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'Transfer In Volume' (transfer_in). Description: Volume of subscriptions transferred into the current category/publication.. Executable SQL: SELECT SUM(SAFE_CAST(transfer_in AS BIGNUMERIC)) AS total_transfer_in FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'Transfer Out Volume' (transfer_out). Description: Volume of subscriptions transferred out of the current category/publication.. Executable SQL: SELECT SUM(SAFE_CAST(transfer_out AS BIGNUMERIC)) AS total_transfer_out FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` WHERE fiscal_week_id IN (202535) LIMIT 1; - Metric: 'General Ledger Account' (gl_acc). Description: General Ledger account identifier for digital subscription estimates.. Executable SQL: SELECT DISTINCT gl_acc FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_gr_digsubs_estimate` LIMIT 100; - Metric: 'Channel' (channel). Description: Distribution channel for circulation actuals.. Executable SQL: SELECT DISTINCT channel FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` LIMIT 100; - Metric: 'Home Delivery Charge' (home_del_charge). Description: Amount charged for home delivery of circulation items.. Executable SQL: SELECT SUM(SAFE_CAST(home_del_charge AS BIGNUMERIC)) AS total_home_del_charge FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` LIMIT 1; - Metric: 'Returns Credit Amount' (returns_credit_amount). Description: Credit amount issued for returned circulation items.. Executable SQL: SELECT SUM(SAFE_CAST(returns_credit_amount AS BIGNUMERIC)) AS total_returns_credit_amount FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` LIMIT 1; - Metric: 'Revenue Adjustment' (rev_adjust). Description: Adjustments made to circulation revenue.. Executable SQL: SELECT SUM(SAFE_CAST(rev_adjust AS BIGNUMERIC)) AS total_rev_adjust FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` LIMIT 1; - Metric: 'State' (state). Description: Geographical state associated with circulation actuals.. Executable SQL: SELECT DISTINCT state FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` LIMIT 100;"
a1b901e6-c4fb-44bc-955a-3a7070c15829_summary,dashboard,a1b901e6-c4fb-44bc-955a-3a7070c15829,Revenue Movement,"Dashboard Summary for 'Revenue Movement' (ID: a1b901e6-c4fb-44bc-955a-3a7070c15829). Business Domain: finance. Complexity Score: 8/10. Consolidation Score: 8/10. Reasoning: High complexity due to deeply nested subqueries, extensive use of `CASE` statements for custom categorizations, and various string/date manipulations (`PARSE_DATE`, `CONCAT`, `SAFE_CAST`, `SAFE.LEFT`). High consolidation potential as the same core `GROSS_AMOUNT_DIFF` metric is calculated with identical derived dimensions (e.g., 'Revenue Category', 'Advertiser Group (Null Handled)') and similar filtering patterns across multiple queries, indicating significant redundancy in logic. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.revenue_movement. Contains 20 metrics. - Metric: 'Total Gross Amount Difference' (total_gross_amount_diff). Description: The total difference in gross amount, representing revenue movement. This is the core financial measure.. Executable SQL: SELECT SUM(t0.GROSS_AMOUNT_DIFF) AS total_gross_amount_diff FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 WHERE t0.movement_date = CURRENT_DATE() - Metric: 'Digital Gross Amount Difference' (digital_gross_amount_diff). Description: The gross amount difference specifically for revenue classified as 'DIGITAL' by revenue type.. Executable SQL: SELECT SUM(CASE WHEN t0.revenue_type = 'DIGITAL' THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS digital_gross_amount_diff FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 WHERE t0.movement_date = CURRENT_DATE() - Metric: 'Print Gross Amount Difference' (print_gross_amount_diff). Description: The gross amount difference specifically for revenue classified as 'PRINT' by revenue type.. Executable SQL: SELECT SUM(CASE WHEN t0.revenue_type = 'PRINT' THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS print_gross_amount_diff FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 WHERE t0.movement_date = CURRENT_DATE() - Metric: 'Revenue Category (Derived)' (revenue_category_derived). Description: A custom categorization of revenue based on xtend_flag, revenue_sub_type, and revenue_type, grouping into 'XTEND', 'PROGRAMMATIC', 'ADPT DIGITAL', 'SUNDRY', or the original revenue_sub_type.. Executable SQL: SELECT CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' WHEN (SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO' OR (t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND t0.revenue_sub_type = 'DIGITAL')) THEN 'PROGRAMMATIC' WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL' WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY' ELSE t0.revenue_sub_type END AS revenue_category FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Advertiser Group (Null Handled)' (advertiser_group_null_handled). Description: The advertiser group, with NULL values replaced by 'Nah' for consistent reporting.. Executable SQL: SELECT CASE WHEN t0.advertiser_group IS NULL THEN 'Nah' ELSE t0.advertiser_group END AS advertiser_group_handled FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Financial Month Start Date' (financial_month_start_date). Description: The calculated start date of the financial month, derived from financial year and short month.. Executable SQL: SELECT PARSE_DATE('%Y-%b-%d', CONCAT(SAFE_CAST(t0.financial_year AS STRING),'-',SAFE_CAST(t0.financial_short_month AS STRING),'-1')) AS financial_month_start_date FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Financial Year' (financial_year_dim). Description: The financial year associated with the revenue movement.. Executable SQL: SELECT t0.financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Movement Date' (movement_date_dim). Description: The specific date of the revenue movement.. Executable SQL: SELECT t0.movement_date FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Portfolio Parent Group Name (Sync)' (portfolio_parent_group_name_sync_dim). Description: The synchronized name of the parent portfolio group.. Executable SQL: SELECT t0.portfolio_parent_group_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Sales Segment GM Name (Sync)' (sales_segment_gm_name_sync_dim). Description: The synchronized name of the Sales Segment General Manager.. Executable SQL: SELECT t0.sales_segment_gm_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Advertiser Parent' (advertiser_parent_dim). Description: The parent advertiser entity.. Executable SQL: SELECT t0.advertiser_parent FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Booking Line ID' (booking_line_id_dim). Description: Unique identifier for a booking line item.. Executable SQL: SELECT t0.booking_line_id FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Booking Number' (booking_number_dim). Description: The unique identifier for a booking.. Executable SQL: SELECT t0.booking_number FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Financial Short Month' (financial_short_month_dim). Description: The abbreviated name of the financial month.. Executable SQL: SELECT t0.financial_short_month FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Portfolio Group Name (Sync)' (portfolio_group_name_sync_dim). Description: The synchronized name of the portfolio group.. Executable SQL: SELECT t0.portfolio_group_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Revenue Sub Type' (revenue_sub_type_dim). Description: The detailed sub-type of revenue.. Executable SQL: SELECT t0.revenue_sub_type FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Revenue Type' (revenue_type_dim). Description: The high-level type of revenue (e.g., DIGITAL, PRINT).. Executable SQL: SELECT t0.revenue_type FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'XTEND Flag' (xtend_flag_dim). Description: A flag indicating if the revenue is associated with XTEND.. Executable SQL: SELECT t0.xtend_flag FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Publishing Division Group' (publishing_division_group_dim). Description: The group of the publishing division.. Executable SQL: SELECT t0.publishing_division_group FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1 - Metric: 'Portfolio Conformed Name (Sync)' (portfolio_conformed_name_sync_dim). Description: The synchronized conformed name of the portfolio.. Executable SQL: SELECT t0.portfolio_conformed_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1"
4d8074b2-17a8-48ba-babe-c536359b1f64_summary,dashboard,4d8074b2-17a8-48ba-babe-c536359b1f64,Final_Draft Adsales Performance Dashboard - FY25 20241127,"Dashboard Summary for 'Final_Draft Adsales Performance Dashboard - FY25 20241127' (ID: 4d8074b2-17a8-48ba-babe-c536359b1f64). Business Domain: sales. Complexity Score: 8/10. Consolidation Score: 7/10. Reasoning: The dashboard uses deeply nested subqueries and complex CASE statements to derive many metrics and dimensions, indicating high technical complexity. There are numerous variations of core revenue and SS_LGB metrics (e.g., current FY, previous FY, future/non-future, with/without specific date conditions, and scaled by 1000), suggesting significant opportunities for metric consolidation into base definitions with clear variations. Primary Data Sources: ncau-data-newsquery-prd.asl_finance_derived.adsales_performance. Contains 30 metrics. - Metric: 'Product Group' (product_group_dimension). Description: Categorization of products offered.. Executable SQL: SELECT t0.product_group FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Unified Publication Name' (unified_publication_name_dimension). Description: The standardized name of the publication.. Executable SQL: SELECT t0.unified_publication_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Publishing Division Parent' (publishing_division_parent_dimension). Description: The parent division responsible for publishing.. Executable SQL: SELECT t0.publishing_division_parent FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Sales Segment GM Name Sync' (sales_segment_gm_name_sync_dimension). Description: Synchronized sales segment name for General Managers.. Executable SQL: SELECT t0.sales_segment_gm_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Short Month' (financial_short_month_dimension). Description: Abbreviated financial month.. Executable SQL: SELECT t0.financial_short_month FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Year' (financial_year_dimension). Description: The financial year.. Executable SQL: SELECT t0.financial_year FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Quarter' (financial_quarter_dimension). Description: The financial quarter.. Executable SQL: SELECT SAFE_CAST(t0.financial_quarter AS INT64) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Financial Month Order' (financial_month_order_dimension). Description: Ordered financial month for sorting purposes.. Executable SQL: SELECT CASE WHEN (t0.financial_short_month = 'Jul') THEN '1.Jul' WHEN (t0.financial_short_month = 'Aug') THEN '2.Aug' WHEN (t0.financial_short_month = 'Sep') THEN '3.Sep' WHEN (t0.financial_short_month = 'Oct') THEN '4.Oct' WHEN (t0.financial_short_month = 'Nov') THEN '5.Nov' WHEN (t0.financial_short_month = 'Dec') THEN '6.Dec' WHEN (t0.financial_short_month = 'Jan') THEN '7.Jan' WHEN (t0.financial_short_month = 'Feb') THEN '8.Feb' WHEN (t0.financial_short_month = 'Mar') THEN '9.Mar' WHEN (t0.financial_short_month = 'Apr') THEN '10.Apr' WHEN (t0.financial_short_month = 'May') THEN '11.May' WHEN (t0.financial_short_month = 'Jun') THEN '12.Jun' ELSE NULL END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Revenue Type or XTEND' (revenue_type_or_xtend_dimension). Description: Categorization of revenue, with 'XTEND' flag overriding revenue type.. Executable SQL: SELECT CASE WHEN (t0.xtend_flag = 'Y') THEN 'XTEND' ELSE t0.revenue_type END FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Relative FY Month Offset' (relative_fy_month_offset_dimension). Description: Offset of the financial month relative to a reference point (e.g., current month is 0).. Executable SQL: SELECT t0.relative_fy_month_offset FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Relative FY Year Offset' (relative_fy_year_offset_dimension). Description: Offset of the financial year relative to a reference point (e.g., current year is 0, previous is -1).. Executable SQL: SELECT t0.relative_fy_year_offset FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Sales Segment L2 Name Sync' (sales_segment_l_2_name_sync_dimension). Description: Synchronized sales segment name at Level 2.. Executable SQL: SELECT t0.sales_segment_l_2_name_sync FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Is Digital Other Sales Segment' (is_digital_other_sales_segment_flag). Description: Flag indicating if the sales segment is 'Digital Other'. Used as a boolean measure.. Executable SQL: SELECT MAX(t0.sales_segment_l_2_name_sync = 'Digital Other') FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Total Gross Revenue' (total_gross_revenue). Description: The sum of all gross revenue amounts.. Executable SQL: SELECT SUM(t0.gross_revenue_amount) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue' (current_fy_gross_revenue). Description: Gross revenue for the current financial year (relative_fy_year_offset = 0).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Gross Revenue (k)' (current_fy_gross_revenue_k). Description: Gross revenue for the current financial year, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Previous FY Gross Revenue' (previous_fy_gross_revenue). Description: Gross revenue for the previous financial year (relative_fy_year_offset = -1).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Previous FY Gross Revenue (k)' (previous_fy_gross_revenue_k). Description: Gross revenue for the previous financial year, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Next FY Gross Revenue (k)' (next_fy_gross_revenue_k). Description: Gross revenue for the next financial year, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Non-Future Gross Revenue (k)' (current_fy_non_future_gross_revenue_k). Description: Gross revenue for the current financial year, excluding future periods, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Previous FY Gross Revenue (Conditional Date)' (previous_fy_gross_revenue_conditional_date). Description: Gross revenue for the previous financial year, conditional on a complex date logic involving fixed dates and digital revenue types.. Executable SQL: SELECT SUM(CASE WHEN (t0.relative_fy_year_offset = -1 AND (SAFE_CAST(CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-01-06 02:37:12.747676+00', 'UTC') AS DATETIME), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Previous FY Gross Revenue (Conditional Date) (k)' (previous_fy_gross_revenue_conditional_date_k). Description: Gross revenue for the previous financial year, conditional on a complex date logic involving fixed dates and digital revenue types, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = -1 AND (SAFE_CAST(CASE WHEN (t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN t0.fix_date_lod ELSE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-01-06 02:37:12.747676+00', 'UTC') AS DATETIME), INTERVAL -365 DAY))) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Total SS_LGB' (total_ss_lgb). Description: The sum of all Sales Segment Last Good Booking amounts.. Executable SQL: SELECT SUM(t0.ss_lgb) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY SS_LGB (k)' (current_fy_ss_lgb_k). Description: Sales Segment Last Good Booking for the current financial year, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.ss_lgb ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Past Weeks SS_LGB' (current_fy_past_weeks_ss_lgb). Description: Sales Segment Last Good Booking for the current financial year, specifically for past weeks (relative_fy_week_offset < 0).. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.relative_fy_week_offset < 0 THEN t0.ss_lgb ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Current Week SS_LGB (Calculated)' (current_fy_current_week_ss_lgb_calculated). Description: Calculated Sales Segment Last Good Booking for the current financial year and current week, based on DOW_Today.. Executable SQL: SELECT SUM(CASE WHEN t0.relative_fy_year_offset = 0 AND t0.relative_fy_week_offset = 0 THEN SAFE_DIVIDE(t0.ss_lgb * t0.DOW_Today, 7) ELSE 0 END) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Total Pipeline' (total_pipeline). Description: The sum of all pipeline amounts.. Executable SQL: SELECT SUM(t0.pipeline) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Current FY Revenue vs SS_LGB Delta (k)' (current_fy_revenue_vs_ss_lgb_delta_k). Description: The difference between current FY gross revenue and current FY SS_LGB, in thousands.. Executable SQL: SELECT SUM(SAFE_DIVIDE(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END - CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.ss_lgb ELSE 0 END, 1000)) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Max Relative FY Month Offset' (max_relative_fy_month_offset). Description: The maximum relative financial month offset observed in the data.. Executable SQL: SELECT MAX(t0.relative_fy_month_offset) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 - Metric: 'Max Relative FY Year Offset' (max_relative_fy_year_offset). Description: The maximum relative financial year offset observed in the data.. Executable SQL: SELECT MAX(t0.relative_fy_year_offset) FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0"
