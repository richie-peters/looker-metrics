primary_analysis_sql,structure_sql,validation_sql,business_rules_sql,sample_data_sql,hardcoded_issues,parameterisation_recommendations,response_id,dashboard_id
"WITH
  adex_data AS (
    SELECT
      *,
      -- Add common derived fields early for clarity
      FORMAT_DATETIME('%b', SAFE_CAST(date AS DATETIME)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', SAFE_CAST(date AS DATETIME)) AS INT64) AS calendar_year,
      CASE WHEN Spend IS NULL THEN 0 ELSE Spend END AS spend_cleaned,
      SAFE_DIVIDE(CASE WHEN Spend IS NULL THEN 0 ELSE Spend END, 1000) AS spend_in_thousands,
      ('$\'000' = '$\'000') AS is_spend_in_thousands_flag, -- Assuming this is the dashboard setting
      ('$\'000' = '$') AS is_spend_in_dollars_flag -- Assuming this is the dashboard setting
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) -- Limit data for performance
  ),
  latest_info AS (
    SELECT
      MAX(SAFE_CAST(date AS DATE)) AS latest_date,
      MAX(financial_year) AS max_fin_year
    FROM
      adex_data
  ),
  temp_data AS (
    SELECT
      t1.*,
      li.latest_date,
      li.max_fin_year,
      -- Replicate the @time_period logic, assuming 'Rolling 12 months' as default for this query
      CASE 'Rolling 12 months' -- This should be a parameter in a real dashboard
        WHEN 'Rolling 12 months' THEN
          CASE
            WHEN DATE_DIFF(li.latest_date, SAFE_CAST(t1.date AS DATE), MONTH) <= 11 THEN 'ty'
            WHEN DATE_DIFF(li.latest_date, SAFE_CAST(t1.date AS DATE), MONTH) BETWEEN 12 AND 23 THEN 'ly'
            ELSE NULL
          END
        WHEN 'Calendar Year' THEN
          CASE
            WHEN SAFE_CAST(t1.date AS DATE) <= li.latest_date AND SAFE_CAST(t1.date AS DATE) >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM li.latest_date) AS STRING),'-01-01')) THEN 'ty'
            WHEN SAFE_CAST(t1.date AS DATE) <= DATETIME_ADD(li.latest_date, INTERVAL -1 YEAR) AND SAFE_CAST(t1.date AS DATE) >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM li.latest_date) - 1 AS STRING), '-01-01')) THEN 'ly'
            ELSE NULL
          END
        WHEN 'Financial Year' THEN
          CASE
            WHEN SAFE_CAST(t1.date AS DATE) <= li.latest_date AND SAFE_CAST(t1.date AS DATE) >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(li.max_fin_year - 1 AS STRING),'-07-01')) THEN 'ty'
            WHEN SAFE_CAST(t1.date AS DATE) <= DATETIME_ADD(li.latest_date, INTERVAL -1 YEAR) AND SAFE_CAST(t1.date AS DATE) >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(li.max_fin_year - 2 AS STRING), '-07-01')) THEN 'ly'
            ELSE NULL
          END
        ELSE NULL
      END AS period_type_flag,
      -- Quarter calculation (simplified, assuming calendar year quarters for example)
      CASE
        WHEN EXTRACT(MONTH FROM SAFE_CAST(t1.date AS DATETIME)) BETWEEN 1 AND 3 THEN 'Q1'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(t1.date AS DATETIME)) BETWEEN 4 AND 6 THEN 'Q2'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(t1.date AS DATETIME)) BETWEEN 7 AND 9 THEN 'Q3'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(t1.date AS DATETIME)) BETWEEN 10 AND 12 THEN 'Q4'
        ELSE NULL
      END AS calendar_quarter
    FROM
      adex_data AS t1
    CROSS JOIN
      latest_info AS li
  )
SELECT
  SAFE_CAST(t.date AS DATE) AS date_dim,
  t.Advertiser,
  t.Major_Category,
  t.Media_Network,
  t.Category,
  t.Sub_Category,
  t.portfolio_parent_group_name,
  t.calendar_year,
  t.financial_year,
  t.period_type_flag,
  t.calendar_quarter,
  -- Adjusted Spend TY
  SUM(CASE
    WHEN t.period_type_flag = 'ty' AND t.is_spend_in_thousands_flag THEN t.spend_in_thousands
    WHEN t.period_type_flag = 'ty' AND t.is_spend_in_dollars_flag THEN t.spend_cleaned
    ELSE 0
  END) AS total_spend_ty,
  -- Adjusted Spend LY
  SUM(CASE
    WHEN t.period_type_flag = 'ly' AND t.is_spend_in_thousands_flag THEN t.spend_in_thousands
    WHEN t.period_type_flag = 'ly' AND t.is_spend_in_dollars_flag THEN t.spend_cleaned
    ELSE 0
  END) AS total_spend_ly,
  -- Specific Media Network Spends (TY)
  SUM(CASE WHEN t.Media_Network = 'NEWS CORP' AND t.period_type_flag = 'ty' THEN t.spend_cleaned ELSE 0 END) AS total_spend_ty_news_corp,
  SUM(CASE WHEN t.Media_Network = 'youtube' AND t.period_type_flag = 'ty' THEN t.spend_cleaned ELSE 0 END) AS total_spend_ty_youtube,
  SUM(CASE WHEN t.Media_Network = 'facebook' AND t.period_type_flag = 'ty' THEN t.spend_cleaned ELSE 0 END) AS total_spend_ty_facebook,
  -- Fixed Publisher Count (as a global constant, aggregated here)
  MAX(fixed_publisher_count.fixed_publisher_count) AS fixed_publisher_count_global
FROM
  temp_data AS t
CROSS JOIN
  (
    SELECT
      COUNT(DISTINCT media_network) AS fixed_publisher_count
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
  ) AS fixed_publisher_count
WHERE
  t.period_type_flag IS NOT NULL -- Only include rows relevant to TY/LY periods
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
ORDER BY
  date_dim DESC, Advertiser
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(date AS DATE)) as unique_dates,
  COUNT(DISTINCT Advertiser) as unique_advertisers,
  COUNT(DISTINCT Media_Network) as unique_media_networks,
  COUNT(DISTINCT Major_Category) as unique_major_categories,
  MIN(SAFE_CAST(date AS DATE)) as earliest_date,
  MAX(SAFE_CAST(date AS DATE)) as latest_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(date AS STRING), Advertiser, Media_Network, Major_Category)) as approx_unique_rows_at_grain
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(Spend AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as total_spend_positive_test,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_present_test,
  CASE WHEN MAX(SAFE_CAST(date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(DISTINCT Media_Network) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_media_networks_test,
  CASE WHEN COUNT(DISTINCT financial_year) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_financial_years_test
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","WITH
  base_data AS (
    SELECT
      *,
      MAX(SAFE_CAST(date AS DATE)) OVER() AS latest_date_global,
      MAX(financial_year) OVER() AS max_fin_year_global
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
    WHERE
      SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
  )
SELECT
  'Business Rule Validation' as validation_type,
  'rolling_12_months_ty_ly_logic_check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE
    WHEN DATE_DIFF(latest_date_global, SAFE_CAST(date AS DATE), MONTH) <= 11 THEN 1 ELSE 0 END
  ) as records_matching_rolling_12_ty_logic,
  SUM(CASE
    WHEN DATE_DIFF(latest_date_global, SAFE_CAST(date AS DATE), MONTH) BETWEEN 12 AND 23 THEN 1 ELSE 0 END
  ) as records_matching_rolling_12_ly_logic,
  SUM(CASE WHEN portfolio_parent_group_name = 'KEY ACCOUNTS TRAVEL' THEN 1 ELSE 0 END) AS key_accounts_travel_records,
  SUM(CASE WHEN Advertiser IN ('NT Dept Of Trade Business & Innovation', 'NT Dept Of Chief Minister') THEN 1 ELSE 0 END) AS nt_dept_advertiser_records,
  SUM(CASE WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 4 AND 6 THEN 1 ELSE 0 END) AS q2_records_calendar_year
FROM
  base_data
LIMIT 1;","SELECT
  SAFE_CAST(date AS DATE) as date_column,
  Advertiser,
  Media_Network,
  Major_Category,
  Category,
  Sub_Category,
  portfolio_parent_group_name,
  SAFE_CAST(Spend AS NUMERIC) as spend_metric,
  SAFE_CAST(calendar_year AS INT64) as calendar_year,
  SAFE_CAST(financial_year AS INT64) as financial_year
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND Spend IS NOT NULL
ORDER BY
  SAFE_CAST(date AS DATE) DESC, SAFE_CAST(Spend AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Rolling 12 months'"", ""'Calendar Year'"", ""'Financial Year'""], 'context': ""Time period selection logic for 'ty'/'ly' calculation."", 'suggested_governance': 'Parameterize time period selection in Looker Studio or use a configuration table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'ty'"", ""'ly'""], 'context': ""Flags for 'this year' and 'last year' periods."", 'suggested_governance': 'These are internal flags, but their derivation logic should be robust and potentially configurable.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Q1'"", ""'Q2'"", ""'Q3'"", ""'Q4'""], 'context': 'Quarter definitions based on month numbers.', 'suggested_governance': 'Use a date dimension table with pre-calculated quarters or a UDF for quarter logic.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'display_format', 'hardcoded_values': [""'$'"", ""'$\\'000'""], 'context': 'Currency display format for spend metrics.', 'suggested_governance': 'Parameterize currency display or use a standard formatting function.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'KEY ACCOUNTS TRAVEL'""], 'context': 'Filtering on `portfolio_parent_group_name`.', 'suggested_governance': 'Use a Looker Studio filter control or parameter for dynamic selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'NEWS CORP'"", ""'youtube'"", ""'facebook'""], 'context': 'Conditional sums based on `Media_Network`.', 'suggested_governance': 'If these are dynamic, use a configuration table for media networks and loop through them or use a parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'NT Dept Of Trade Business & Innovation'"", ""'NT Dept Of Chief Minister'"", ""'NT Dept Of Infrastructure Planning & Logistics'"", ""'NT Dept Of Industry Tourism & Trade'"", ""'NT Dept Of Education Employment & Training'"", ""'NT Dept Of Tourism & Culture'"", ""'NT Dept Of Transport'"", ""'NT Dept Of Attorney-General & Justice'"", ""'NT Dept Of Environment & Natural Resources'"", ""'NT Dept Of Lands Planning & The Environment'"", ""'NT Dept Of Health'"", ""'NT Dept Of Police Fire & Emergency Services'"", ""'NT Dept Of Business'"", ""'NT Dept Of Territory Families, Housing & Communities'"", ""'NT Dept Of Primary Industry & Resources'"", ""'NT Dept Of Environment Parks & Water Security'"", ""'NT Dept Of Corporate & Information Services'""], 'context': 'Filtering on `Advertiser` names.', 'suggested_governance': ""Use a Looker Studio filter control or parameter for dynamic selection, or group these into a 'NT Government' category in a dimension table."", 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded date calculations (e.g., `DATE_ADD(CURRENT_DATE(), INTERVAL -1 YEAR)`) with dynamic parameters or relative date functions.', ""Introduce a dashboard parameter for `time_period_type` (e.g., 'Rolling 12 months', 'Calendar Year', 'Financial Year') to control the `ty_ly_embed` logic."", 'Use parameters for specific filter values like `Portfolio_Parent_Group_Name` and `Advertiser` names.', 'Externalize quarter definitions into a configuration table or a UDF for easier maintenance.', ""Parameterize the currency display format (e.g., 'Spend_Unit' parameter)."", ""Manage specific `Media_Network` names (e.g., 'NEWS CORP', 'youtube', 'facebook') through a lookup table or a parameter for dynamic analysis.""]",0,601ed0d2-e944-4189-8170-d593c8e72026
"WITH calendar_filtered AS (
  SELECT DISTINCT
    SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
    SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
    SAFE_CAST(c.fy_first_day_of_week AS DATE) AS fy_first_day_of_week,
    SAFE_CAST(c.fy_last_day_of_week AS DATE) AS fy_last_day_of_week,
    SAFE_CAST(c.fy_month_of_year AS INT64) AS fy_month_of_year,
    SAFE_CAST(c.fy_year_month_number AS INT64) AS fy_year_month_number,
    SAFE_CAST(c.relative_fisc_year_number AS INT64) AS relative_fisc_year_number,
    SAFE_CAST(c.relative_fisc_week_number AS INT64) AS relative_fisc_week_number,
    c.fy_month_of_year_short_name,
    CASE
      WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y'
      ELSE 'N'
    END AS month_end_flag,
    SAFE_CAST(c.fy_quarter_of_year AS INT64) AS fy_quarter_of_year,
    SAFE_CAST(c.fy_year AS INT64) AS fy_year,
    control.period_name
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
    JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
      ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
  WHERE
    control.period_name IN ('CP', 'PY')
),
OSandFACT AS (
  SELECT
    os.source_system_name,
    os.sub_source_system_name,
    SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
    os.gl_publication_code,
    os.day_of_week,
    os.state,
    os.os_level_1,
    os.os_level_2,
    os.os_level_3,
    os.os_level_4,
    os.os_level_5,
    os.os_level_6,
    os.os_level_7,
    os.os_level_8,
    os.os_level_9,
    os.os_level_10,
    os.os_level_11,
    os.os_level_12,
    SAFE_CAST(os.Actual_Amount AS NUMERIC) AS Actual_Amount,
    SAFE_CAST(os.volume AS NUMERIC) AS volume,
    SAFE_CAST(os.Estimate AS NUMERIC) AS Estimate,
    SAFE_CAST(os.True_Up_Adjustment AS NUMERIC) AS True_Up_Adjustment,
    SAFE_CAST(os.Last_Year_Actual_Amount AS NUMERIC) AS Last_Year_Actual_Amount,
    SAFE_CAST(os.Last_Year_volume AS NUMERIC) AS Last_Year_volume,
    SAFE_CAST(os.Budget_Draft_Amount AS NUMERIC) AS Budget_Draft_Amount,
    SAFE_CAST(os.Budget_Draft_Volume AS NUMERIC) AS Budget_Draft_Volume,
    SAFE_CAST(os.Budget_Amount AS NUMERIC) AS Budget_Amount,
    SAFE_CAST(os.Budget_Volume AS NUMERIC) AS Budget_Volume,
    SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS Forecast_Amount,
    SAFE_CAST(os.Forecast_Volume AS NUMERIC) AS Forecast_Volume,
    SAFE_CAST(os.Budget_Jan_Amount AS NUMERIC) AS Budget_Jan_Amount,
    SAFE_CAST(os.Budget_Jan_Volume AS NUMERIC) AS Budget_Jan_Volume,
    SAFE_CAST(os.Budget_Feb_Amount AS NUMERIC) AS Budget_Feb_Amount,
    SAFE_CAST(os.Budget_Feb_Volume AS NUMERIC) AS Budget_Feb_Volume,
    SAFE_CAST(os.Budget_Mar_Amount AS NUMERIC) AS Budget_Mar_Amount,
    SAFE_CAST(os.Budget_Mar_Volume AS NUMERIC) AS Budget_Mar_Volume,
    SAFE_CAST(os.Budget_Apr_Amount AS NUMERIC) AS Budget_Apr_Amount,
    SAFE_CAST(os.Budget_Apr_Volume AS NUMERIC) AS Budget_Apr_Volume,
    SAFE_CAST(os.Budget_May_Amount AS NUMERIC) AS Budget_May_Amount,
    SAFE_CAST(os.Budget_May_Volume AS NUMERIC) AS Budget_May_Volume,
    SAFE_CAST(os.Budget_Jun_Amount AS NUMERIC) AS Budget_Jun_Amount,
    SAFE_CAST(os.Budget_Jun_Volume AS NUMERIC) AS Budget_Jun_Volume,
    SAFE_CAST(os.Budget_Jul_Amount AS NUMERIC) AS Budget_Jul_Amount,
    SAFE_CAST(os.Budget_Jul_Volume AS NUMERIC) AS Budget_Jul_Volume,
    SAFE_CAST(os.Budget_Aug_Amount AS NUMERIC) AS Budget_Aug_Amount,
    SAFE_CAST(os.Budget_Aug_Volume AS NUMERIC) AS Budget_Aug_Volume,
    SAFE_CAST(os.Budget_Sep_Amount AS NUMERIC) AS Budget_Sep_Amount,
    SAFE_CAST(os.Budget_Sep_Volume AS NUMERIC) AS Budget_Sep_Volume,
    SAFE_CAST(os.Budget_Oct_Amount AS NUMERIC) AS Budget_Oct_Amount,
    SAFE_CAST(os.Budget_Oct_Volume AS NUMERIC) AS Budget_Oct_Volume,
    SAFE_CAST(os.Budget_Nov_Amount AS NUMERIC) AS Budget_Nov_Amount,
    SAFE_CAST(os.Budget_Nov_Volume AS NUMERIC) AS Budget_Nov_Volume,
    SAFE_CAST(os.Budget_Dec_Amount AS NUMERIC) AS Budget_Dec_Amount,
    SAFE_CAST(os.Budget_Dec_Volume AS NUMERIC) AS Budget_Dec_Volume,
    SAFE_CAST(os.Forecast_Q1F_Amount AS NUMERIC) AS Forecast_Q1F_Amount,
    SAFE_CAST(os.Forecast_Q1F_Volume AS NUMERIC) AS Forecast_Q1F_Volume,
    SAFE_CAST(os.Forecast_Q2F_Amount AS NUMERIC) AS Forecast_Q2F_Amount,
    SAFE_CAST(os.Forecast_Q2F_Volume AS NUMERIC) AS Forecast_Q2F_Volume,
    SAFE_CAST(os.Forecast_Q3F_Amount AS NUMERIC) AS Forecast_Q3F_Amount,
    SAFE_CAST(os.Forecast_Q3F_Volume AS NUMERIC) AS Forecast_Q3F_Volume,
    SAFE_CAST(os.Forecast_Q4F_Amount AS NUMERIC) AS Forecast_Q4F_Amount,
    SAFE_CAST(os.Forecast_Q4F_Volume AS NUMERIC) AS Forecast_Q4F_Volume,
    SAFE_CAST(os.Forecast_Q5F_Amount AS NUMERIC) AS Forecast_Q5F_Amount,
    SAFE_CAST(os.Forecast_Q5F_Volume AS NUMERIC) AS Forecast_Q5F_Volume,
    calendar.fy_year,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.month_end_flag,
    calendar.period_name
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
    LEFT JOIN calendar_filtered AS calendar
      ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep
      ON os.os_level_12 = dep.department_code
)
SELECT
  fy_year,
  source_system_name,
  fiscal_week_id,
  fy_first_day_of_week,
  fy_last_day_of_week,
  month_end_flag,
  period_name,
  SUM(Actual_Amount) AS total_actual_amount,
  SUM(volume) AS total_volume,
  SUM(Estimate) AS total_estimate,
  SUM(Budget_Amount) AS total_budget_amount,
  SUM(Forecast_Amount) AS total_forecast_amount,
  COUNT(DISTINCT gl_publication_code) AS distinct_publications,
  COUNT(1) AS record_count_per_group
FROM
  OSandFACT
WHERE
  fy_first_day_of_week >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
GROUP BY
  fy_year,
  source_system_name,
  fiscal_week_id,
  fy_first_day_of_week,
  fy_last_day_of_week,
  month_end_flag,
  period_name
ORDER BY
  fy_year DESC, fiscal_week_id DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(os.fiscal_week_id AS INT64)) as unique_fiscal_week_ids_fact,
  COUNT(DISTINCT os.source_system_name) as unique_source_systems,
  COUNT(DISTINCT os.gl_publication_code) as unique_publication_codes,
  MIN(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) as earliest_fiscal_week_date,
  MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) as latest_fiscal_week_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(os.fiscal_week_id AS STRING), os.gl_publication_code, os.source_system_name)) as approx_unique_fact_rows_at_grain,
  SUM(SAFE_CAST(os.Actual_Amount AS NUMERIC)) as total_actual_amount_sample,
  SUM(SAFE_CAST(os.volume AS NUMERIC)) as total_volume_sample
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(os.Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_data_present,
  CASE WHEN SUM(SAFE_CAST(os.Actual_Amount AS NUMERIC)) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as actual_amount_sum_calculates,
  CASE WHEN COUNT(DISTINCT os.source_system_name) > 0 THEN 'PASS' ELSE 'FAIL' END as source_system_data_present,
  CASE WHEN COUNT(DISTINCT control.period_name) = 2 THEN 'PASS' ELSE 'FAIL' END as cp_py_periods_found,
  CASE WHEN MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
    ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Period Control Filter' as rule_name,
  COUNT(DISTINCT control.period_name) as distinct_period_names_found,
  SUM(CASE WHEN control.period_name IN ('CP', 'PY') THEN 1 ELSE 0 END) as records_matching_cp_py,
  COUNT(1) as total_records_in_period_control_join,
  SAFE_DIVIDE(SUM(CASE WHEN control.period_name IN ('CP', 'PY') THEN 1 ELSE 0 END), COUNT(1)) * 100 as percentage_matching_cp_py,
  'Month End Flag Logic' as rule_name_2,
  SUM(CASE WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) AND (CASE WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y' ELSE 'N' END) = 'Y' THEN 1 ELSE 0 END) as month_end_flag_correct_y,
  SUM(CASE WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) != SAFE_CAST(c.fy_last_day_of_month AS DATE) AND (CASE WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y' ELSE 'N' END) = 'N' THEN 1 ELSE 0 END) as month_end_flag_correct_n,
  COUNT(1) as total_calendar_records_checked
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
  JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
    ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(c.fy_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","WITH calendar_filtered AS (
  SELECT DISTINCT
    SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
    SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
    SAFE_CAST(c.fy_first_day_of_week AS DATE) AS fy_first_day_of_week,
    SAFE_CAST(c.fy_last_day_of_week AS DATE) AS fy_last_day_of_week,
    SAFE_CAST(c.fy_month_of_year AS INT64) AS fy_month_of_year,
    SAFE_CAST(c.fy_year_month_number AS INT64) AS fy_year_month_number,
    SAFE_CAST(c.relative_fisc_year_number AS INT64) AS relative_fisc_year_number,
    SAFE_CAST(c.relative_fisc_week_number AS INT64) AS relative_fisc_week_number,
    c.fy_month_of_year_short_name,
    CASE
      WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y'
      ELSE 'N'
    END AS month_end_flag,
    SAFE_CAST(c.fy_quarter_of_year AS INT64) AS fy_quarter_of_year,
    SAFE_CAST(c.fy_year AS INT64) AS fy_year,
    control.period_name
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
    JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
      ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
  WHERE
    control.period_name IN ('CP', 'PY')
),
OSandFACT AS (
  SELECT
    os.source_system_name,
    os.sub_source_system_name,
    SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
    os.gl_publication_code,
    os.day_of_week,
    os.state,
    os.os_level_1,
    os.os_level_2,
    os.os_level_3,
    os.os_level_4,
    os.os_level_5,
    os.os_level_6,
    os.os_level_7,
    os.os_level_8,
    os.os_level_9,
    os.os_level_10,
    os.os_level_11,
    os.os_level_12,
    SAFE_CAST(os.Actual_Amount AS NUMERIC) AS Actual_Amount,
    SAFE_CAST(os.volume AS NUMERIC) AS volume,
    SAFE_CAST(os.Estimate AS NUMERIC) AS Estimate,
    SAFE_CAST(os.Budget_Amount AS NUMERIC) AS Budget_Amount,
    SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS Forecast_Amount,
    calendar.fy_year,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.month_end_flag,
    calendar.period_name,
    dep.department_name
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
    LEFT JOIN calendar_filtered AS calendar
      ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep
      ON os.os_level_12 = dep.department_code
)
SELECT
  fy_year,
  fiscal_week_id,
  fy_first_day_of_week,
  source_system_name,
  gl_publication_code,
  os_level_1,
  os_level_12,
  department_name,
  period_name,
  month_end_flag,
  Actual_Amount,
  volume,
  Estimate,
  Budget_Amount,
  Forecast_Amount
FROM
  OSandFACT
WHERE
  fy_first_day_of_week >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  AND Actual_Amount IS NOT NULL
ORDER BY
  fy_first_day_of_week DESC, Actual_Amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': 'period_name filter in the calendar join', 'suggested_governance': 'Use a parameter or a control table to define the current and prior periods dynamically.', 'impact': 'high', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded period names ('CP', 'PY') with dashboard parameters or a dynamic lookup from a control table."", 'Consider adding parameters for fiscal year or date ranges to allow users to select specific reporting periods.']",1,d7412673-0af1-4efe-8374-ca475b001fb6
"WITH base_data AS (
  SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    t0.offer_category_group_name,
    t0.offer_category_name,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_dimensions AS (
  SELECT
    fy_year,
    fy_week_of_year,
    masthead,
    offer_category_group_name,
    offer_category_name,
    sold_in_source_code,
    table_nm,
    -- Derived: delivery_medium_cleaned
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_cleaned,
    -- Derived: subscription_type
    CASE WHEN (CONCAT(delivery_medium_type,' ',subscriber_has_email_flag) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END AS subscription_type,
    -- Derived: masthead_grouping
    CASE
        WHEN (masthead = 'TA') THEN 'The Australian'
        WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
        WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
        WHEN (masthead = 'WT') THEN 'Other Publications'
        WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
        WHEN (masthead IS NULL) THEN 'check'
        ELSE 'Exclude'
    END AS masthead_grouping,
    -- Derived: masthead_category
    CASE
        WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
        WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
        WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
        WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
        ELSE 'Exclude'
    END AS masthead_category,
    -- Intermediate for classification_level_grouping
    CASE
        WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
        WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
        WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
        WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
        WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
        WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
        ELSE NULL
    END AS classification_level_2_raw,
    -- Derived: classification_level_grouping
    CASE
        WHEN (
            CASE
                WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
                WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
                WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
                WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
                WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
                WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
                ELSE NULL
            END IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
        WHEN (
            CASE
                WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
                WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
                WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
                WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
                WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
                WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
                ELSE NULL
            END IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
        ELSE 'Others'
    END AS classification_level_grouping,
    -- Derived: source_channel
    CASE
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CF') > 0) THEN 'Community Form'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CS') > 0) THEN 'Closing Speed'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FA') > 0) THEN 'Free Articles'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FF') > 0) THEN 'Form Finder'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_NA') > 0) THEN 'News Articles'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PC') > 0) THEN 'True Crime Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PE') > 0) THEN 'Punters Edge'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SL') > 0) THEN 'Shortlist'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SS') > 0) THEN 'Setting Speed'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TE') > 0) THEN 'Tippers Edge'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TH') > 0) THEN 'Todays Headlines'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TO') > 0) THEN 'The Oz'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_WS') > 0) THEN 'Why Subscribe'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 4), 'PRED') > 0) THEN 'Predictor'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'AMP') > 0) THEN 'Google AMP'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FBK') > 0) THEN 'Facebook'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGL') > 0) THEN 'Google'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGN') > 0) THEN 'Google News'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'LIN') > 0) THEN 'Linked In'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NEW') > 0) THEN 'news.com.au'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NWL') > 0) THEN 'Newsletter'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POD') > 0) THEN 'Podcasts'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POR') > 0) THEN 'Newsletter Sports'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'RED') > 0) THEN 'Reddit'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SCP') > 0) THEN 'Supercoach Plus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SEC') > 0) THEN 'Sectionals'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TCA') > 0) THEN 'True Crime Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TMP') > 0) THEN 'Tips Mrket Place'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWA') > 0) THEN 'The Weekend Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWT') > 0) THEN 'Twitter'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'WID') > 0) THEN 'Widget'
        WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
        WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
        WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
        WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
        WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
        ELSE NULL
    END AS source_channel
  FROM base_data
)
SELECT
  fy_year,
  fy_week_of_year,
  masthead,
  offer_category_group_name,
  offer_category_name,
  subscription_type,
  masthead_grouping,
  masthead_category,
  classification_level_grouping,
  source_channel,
  COUNT(1) AS acquisition_count
FROM derived_dimensions
WHERE
  fy_year = 2025
  AND table_nm != 'op'
  AND masthead_grouping != 'Exclude'
  AND masthead_category = 'The Australian and Prestige'
  AND subscription_type = 'Digital Subscriptions'
  AND source_channel IS NOT NULL
  AND classification_level_grouping IN ('B2C', '')
GROUP BY
  fy_year,
  fy_week_of_year,
  masthead,
  offer_category_group_name,
  offer_category_name,
  subscription_type,
  masthead_grouping,
  masthead_category,
  classification_level_grouping,
  source_channel
ORDER BY
  fy_year DESC, fy_week_of_year DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.fy_year AS INT64)) as unique_fiscal_years,
  COUNT(DISTINCT SAFE_CAST(t0.fy_week_of_year AS INT64)) as unique_fiscal_weeks_of_year,
  COUNT(DISTINCT t0.masthead) as unique_mastheads,
  COUNT(DISTINCT t0.sold_in_source_code) as unique_sold_in_source_codes,
  COUNT(DISTINCT t0.delivery_medium_type) as unique_delivery_medium_types,
  COUNT(DISTINCT t0.classification_level_2) as unique_classification_levels_2,
  COUNT(DISTINCT t0.offer_category_group_name) as unique_offer_category_groups,
  COUNT(DISTINCT t0.offer_category_name) as unique_offer_category_names,
  MIN(SAFE_CAST(t0.fy_year AS INT64)) as earliest_fy_year,
  MAX(SAFE_CAST(t0.fy_year AS INT64)) as latest_fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) >= 2020
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    t0.offer_category_group_name,
    t0.offer_category_name,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_dimensions AS (
  SELECT
    fy_year,
    fy_week_of_year,
    masthead,
    offer_category_group_name,
    offer_category_name,
    sold_in_source_code,
    table_nm,
    -- Derived: delivery_medium_cleaned
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_cleaned,
    -- Derived: subscription_type
    CASE WHEN (CONCAT(delivery_medium_type,' ',subscriber_has_email_flag) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END AS subscription_type,
    -- Derived: masthead_grouping
    CASE
        WHEN (masthead = 'TA') THEN 'The Australian'
        WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
        WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
        WHEN (masthead = 'WT') THEN 'Other Publications'
        WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
        WHEN (masthead IS NULL) THEN 'check'
        ELSE 'Exclude'
    END AS masthead_grouping,
    -- Derived: masthead_category
    CASE
        WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
        WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
        WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
        WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
        ELSE 'Exclude'
    END AS masthead_category,
    -- Intermediate for classification_level_grouping
    CASE
        WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
        WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
        WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
        WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
        WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
        WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
        ELSE NULL
    END AS classification_level_2_raw,
    -- Derived: classification_level_grouping
    CASE
        WHEN (
            CASE
                WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
                WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
                WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
                WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
                WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
                WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
                ELSE NULL
            END IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
        WHEN (
            CASE
                WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
                WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
                WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
                WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
                WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
                WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
                ELSE NULL
            END IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
        ELSE 'Others'
    END AS classification_level_grouping,
    -- Derived: source_channel
    CASE
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CF') > 0) THEN 'Community Form'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CS') > 0) THEN 'Closing Speed'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FA') > 0) THEN 'Free Articles'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FF') > 0) THEN 'Form Finder'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_NA') > 0) THEN 'News Articles'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PC') > 0) THEN 'True Crime Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PE') > 0) THEN 'Punters Edge'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SL') > 0) THEN 'Shortlist'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SS') > 0) THEN 'Setting Speed'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TE') > 0) THEN 'Tippers Edge'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TH') > 0) THEN 'Todays Headlines'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TO') > 0) THEN 'The Oz'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_WS') > 0) THEN 'Why Subscribe'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 4), 'PRED') > 0) THEN 'Predictor'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'AMP') > 0) THEN 'Google AMP'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FBK') > 0) THEN 'Facebook'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGL') > 0) THEN 'Google'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGN') > 0) THEN 'Google News'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'LIN') > 0) THEN 'Linked In'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NEW') > 0) THEN 'news.com.au'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NWL') > 0) THEN 'Newsletter'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POD') > 0) THEN 'Podcasts'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POR') > 0) THEN 'Newsletter Sports'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'RED') > 0) THEN 'Reddit'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SCP') > 0) THEN 'Supercoach Plus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SEC') > 0) THEN 'Sectionals'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TCA') > 0) THEN 'True Crime Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TMP') > 0) THEN 'Tips Mrket Place'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWA') > 0) THEN 'The Weekend Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWT') > 0) THEN 'Twitter'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'WID') > 0) THEN 'Widget'
        WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
        WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
        WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
        WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
        WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
        ELSE NULL
    END AS source_channel
  FROM base_data
)
SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_presence_test,
  CASE WHEN SUM(CASE WHEN masthead_category = 'The Australian and Prestige' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as masthead_category_filter_test,
  CASE WHEN SUM(CASE WHEN subscription_type = 'Digital Subscriptions' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as subscription_type_filter_test,
  CASE WHEN SUM(CASE WHEN source_channel IS NOT NULL THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as source_channel_not_null_test,
  CASE WHEN SUM(CASE WHEN fy_year = 2025 THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as fy_2025_data_test
FROM derived_dimensions
WHERE fy_year = 2025
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    t0.offer_category_group_name,
    t0.offer_category_name,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_dimensions AS (
  SELECT
    fy_year,
    fy_week_of_year,
    masthead,
    offer_category_group_name,
    offer_category_name,
    sold_in_source_code,
    table_nm,
    -- Derived: delivery_medium_cleaned
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_cleaned,
    -- Derived: subscription_type
    CASE WHEN (CONCAT(delivery_medium_type,' ',subscriber_has_email_flag) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions' ELSE 'Print Subscriptions' END AS subscription_type,
    -- Derived: masthead_grouping
    CASE
        WHEN (masthead = 'TA') THEN 'The Australian'
        WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
        WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
        WHEN (masthead = 'WT') THEN 'Other Publications'
        WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
        WHEN (masthead IS NULL) THEN 'check'
        ELSE 'Exclude'
    END AS masthead_grouping,
    -- Derived: masthead_category
    CASE
        WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
        WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
        WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
        WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
        ELSE 'Exclude'
    END AS masthead_category,
    -- Intermediate for classification_level_grouping
    CASE
        WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
        WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
        WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
        WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
        WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
        WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
        ELSE NULL
    END AS classification_level_2_raw,
    -- Derived: classification_level_grouping
    CASE
        WHEN (
            CASE
                WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
                WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
                WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
                WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
                WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
                WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
                ELSE NULL
            END IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
        WHEN (
            CASE
                WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
                WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
                WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
                WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
                WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
                WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
                ELSE NULL
            END IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
        ELSE 'Others'
    END AS classification_level_grouping,
    -- Derived: source_channel
    CASE
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CF') > 0) THEN 'Community Form'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CS') > 0) THEN 'Closing Speed'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FA') > 0) THEN 'Free Articles'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FF') > 0) THEN 'Form Finder'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_NA') > 0) THEN 'News Articles'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PC') > 0) THEN 'True Crime Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PE') > 0) THEN 'Punters Edge'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SL') > 0) THEN 'Shortlist'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SS') > 0) THEN 'Setting Speed'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TE') > 0) THEN 'Tippers Edge'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TH') > 0) THEN 'Todays Headlines'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TO') > 0) THEN 'The Oz'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_WS') > 0) THEN 'Why Subscribe'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 4), 'PRED') > 0) THEN 'Predictor'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'AMP') > 0) THEN 'Google AMP'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FBK') > 0) THEN 'Facebook'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGL') > 0) THEN 'Google'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGN') > 0) THEN 'Google News'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'LIN') > 0) THEN 'Linked In'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NEW') > 0) THEN 'news.com.au'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NWL') > 0) THEN 'Newsletter'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POD') > 0) THEN 'Podcasts'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POR') > 0) THEN 'Newsletter Sports'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'RED') > 0) THEN 'Reddit'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SCP') > 0) THEN 'Supercoach Plus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SEC') > 0) THEN 'Sectionals'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TCA') > 0) THEN 'True Crime Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TMP') > 0) THEN 'Tips Mrket Place'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWA') > 0) THEN 'The Weekend Aus'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWT') > 0) THEN 'Twitter'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'WID') > 0) THEN 'Widget'
        WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
        WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
        WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
        WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
        WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
        WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
        ELSE NULL
    END AS source_channel
  FROM base_data
)
SELECT
  'Business Rule Validation' as validation_type,
  'Masthead Category - The Australian and Prestige' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN masthead_category = 'The Australian and Prestige' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN masthead_category = 'The Australian and Prestige' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM derived_dimensions
WHERE fy_year = 2025
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Subscription Type - Digital Subscriptions' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN subscription_type = 'Digital Subscriptions' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN subscription_type = 'Digital Subscriptions' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM derived_dimensions
WHERE fy_year = 2025
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Source Channel Not Null' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN source_channel IS NOT NULL THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN source_channel IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM derived_dimensions
WHERE fy_year = 2025
LIMIT 3;","SELECT
  t0.fy_year,
  t0.fy_week_of_year,
  t0.masthead,
  t0.offer_category_group_name,
  t0.offer_category_name,
  t0.sold_in_source_code,
  t0.delivery_medium_type,
  t0.subscriber_has_email_flag,
  t0.table_nm,
  t0.classification_level_2
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) = 2025
ORDER BY RAND()
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': 'INT64', 'context': 'Fiscal Year filter (fy_year = 2025)', 'suggested_fix': 'Replace with a parameter or a dynamic fiscal year calculation (e.g., based on CURRENT_DATE()).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Digital Y'"", ""'Digital N'"", ""'Bundle Y'"", ""'Not Available Y'""], 'context': ""Defines 'Digital Subscriptions' vs 'Print Subscriptions' based on delivery_medium_type and subscriber_has_email_flag."", 'suggested_governance': 'Create a `subscription_type_mapping` reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'TA'"", ""'CM'"", ""'DT'"", ""'HS'"", ""'AA'"", ""'CP'"", ""'GA'"", ""'GC'"", ""'NT'"", ""'TM'"", ""'TB'"", ""'TC'"", ""'WT'"", ""'SC'"", ""'CS'"", ""'TS'"", ""'AP'"", ""'RN'"", ""'PU'""], 'context': 'Maps `masthead` codes to `Masthead Grouping` and `Masthead Category` dimensions.', 'suggested_governance': 'Create a `masthead_lookup` reference table with `masthead_grouping` and `masthead_category` columns.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'op'""], 'context': ""Excludes records where `table_nm` is 'op'."", 'suggested_governance': 'Define exclusion rules in a configuration table or parameter.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'_AB'"", ""'_BB'"", ""'_CF'"", ""'_CS'"", ""'_FA'"", ""'_FF'"", ""'_NA'"", ""'_PC'"", ""'_PE'"", ""'_SL'"", ""'_SS'"", ""'_TE'"", ""'_TH'"", ""'_TO'"", ""'_WS'"", ""'PRED'"", ""'AMP'"", ""'FBK'"", ""'FMB'"", ""'GGL'"", ""'GGN'"", ""'INS'"", ""'LIN'"", ""'NEW'"", ""'NWL'"", ""'POD'"", ""'POR'"", ""'RED'"", ""'SCP'"", ""'SEC'"", ""'TCA'"", ""'TMP'"", ""'TWA'"", ""'TWT'"", ""'WID'""], 'context': 'Extensive `STRPOS` logic to derive `Source/Channel` from `sold_in_source_code`.', 'suggested_governance': 'Create a `source_channel_mapping` reference table with regex patterns or `STRPOS` values and their corresponding channel names.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'App Subscribers'"", ""'Bundles'"", ""'Digital'"", ""'DPE only'"", ""'Essentials'"", ""'Gift Bundles Activation'"", ""'Gift Digital Activation'"", ""'Mind Games'"", ""'Press Reader'"", ""'Print-only'"", ""'Wine Club'"", ""'Campus Activation'"", ""'Campus Sub'"", ""'Corp Volume Print'"", ""'Corporate Activation'"", ""'Corporate Enterprise Sub'"", ""'Corporate Enterprise Activation'"", ""'Corporate Enterprise Activation - Amex'"", ""'Corporate Enterprise Activation - Qantas'"", ""'Corporate Sub'"", ""'Corporate Volume Activation'"", ""'Corporate Volume Sub'"", ""'SMB Activation'"", ""'SMB Digital'"", ""'Free Staff'"", ""'IP Access'"", ""'Teachers Bundle'"", ""'Teachers Digital'"", ""'Teachers Print'"", ""'University Bundle'"", ""'University Digital'""], 'context': 'Maps `classification_level_2` values to `Classification Level Grouping` (B2C/B2B/Others).', 'suggested_governance': 'Create a `classification_level_lookup` reference table.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded fiscal year (2025) with a parameter (e.g., `{{fiscal_year}}`) or a dynamic calculation based on `CURRENT_DATE()`.', 'Implement lookup tables for `masthead` codes, `sold_in_source_code` patterns, `classification_level_2` values, and `delivery_medium_type` flags to centralize business logic and improve maintainability.', ""Consider using a configuration table for exclusion rules like `table_nm != 'op'`.""]",2,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
"WITH base_data AS (
  SELECT
    t0.advertiser_name,
    t0.booking_name,
    t0.financial_year,
    t0.fy_year_month_number,
    t0.financial_short_month,
    t0.revenue_transaction_status,
    SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
    CASE
      WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*event sponsorship.*)$')) THEN 'Sponsorship'
      WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*production.*)$')) THEN 'Production'
      ELSE 'Media'
    END AS adsize_category
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.relative_fy_year_offset IN (-1, 0, 1)
),
-- Metric 1: Gross Revenue by Adsize Category and Financial Period (Q1 FY2025)
metric_adsize_category_fy_period AS (
  SELECT
    financial_year,
    fy_year_month_number,
    financial_short_month,
    adsize_category,
    SUM(gross_revenue_amount) AS gross_revenue_adsize_category_fy_period
  FROM base_data
  WHERE
    SAFE_CAST(financial_year AS STRING) = '2025'
    AND SAFE_CAST(fy_year_month_number AS INT64) IN (202501, 202502, 202503)
  GROUP BY
    financial_year,
    fy_year_month_number,
    financial_short_month,
    adsize_category
),
-- Metric 2: Gross Revenue by Revenue Transaction Status (FY2025)
metric_transaction_status_fy2025 AS (
  SELECT
    financial_year,
    revenue_transaction_status,
    SUM(gross_revenue_amount) AS gross_revenue_by_transaction_status_fy2025
  FROM base_data
  WHERE
    SAFE_CAST(financial_year AS STRING) = '2025'
  GROUP BY
    financial_year,
    revenue_transaction_status
),
-- Metric 3: Gross Revenue for Specific Bookings by Revenue Transaction Status (FY2025)
metric_specific_bookings_fy2025 AS (
  SELECT
    financial_year,
    revenue_transaction_status,
    SUM(gross_revenue_amount) AS gross_revenue_specific_bookings_by_transaction_status_fy2025
  FROM base_data
  WHERE
    SAFE_CAST(financial_year AS STRING) = '2025'
    AND SAFE_CAST(booking_name AS STRING) IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series', 'Future Bradfield FY25 B1', 'Future Sydney Bradfield 2024')
  GROUP BY
    financial_year,
    revenue_transaction_status
)
-- Combine all metrics using FULL OUTER JOIN on common dimensions
SELECT
  COALESCE(m1.financial_year, m2.financial_year, m3.financial_year) AS financial_year,
  m1.fy_year_month_number,
  m1.financial_short_month,
  m1.adsize_category,
  COALESCE(m2.revenue_transaction_status, m3.revenue_transaction_status) AS revenue_transaction_status,
  m1.gross_revenue_adsize_category_fy_period,
  m2.gross_revenue_by_transaction_status_fy2025,
  m3.gross_revenue_specific_bookings_by_transaction_status_fy2025
FROM metric_adsize_category_fy_period AS m1
FULL OUTER JOIN metric_transaction_status_fy2025 AS m2
  ON SAFE_CAST(m1.financial_year AS STRING) = SAFE_CAST(m2.financial_year AS STRING)
FULL OUTER JOIN metric_specific_bookings_fy2025 AS m3
  ON SAFE_CAST(m2.financial_year AS STRING) = SAFE_CAST(m3.financial_year AS STRING)
  AND SAFE_CAST(m2.revenue_transaction_status AS STRING) = SAFE_CAST(m3.revenue_transaction_status AS STRING)
WHERE
  COALESCE(m1.financial_year, m2.financial_year, m3.financial_year) IS NOT NULL
ORDER BY
  financial_year DESC,
  fy_year_month_number DESC,
  financial_short_month DESC,
  adsize_category,
  revenue_transaction_status
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(fy_year_month_number AS INT64)) as unique_fy_year_month_numbers,
  COUNT(DISTINCT SAFE_CAST(financial_short_month AS STRING)) as unique_financial_short_months,
  COUNT(DISTINCT SAFE_CAST(revenue_transaction_status AS STRING)) as unique_revenue_transaction_statuses,
  COUNT(DISTINCT SAFE_CAST(adsize_name AS STRING)) as unique_adsize_names,
  COUNT(DISTINCT SAFE_CAST(booking_name AS STRING)) as unique_booking_names,
  MIN(SAFE_CAST(financial_year AS STRING)) as earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) as latest_financial_year,
  SUM(CASE WHEN gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_amount_count,
  SUM(CASE WHEN net_revenue IS NULL THEN 1 ELSE 0 END) AS null_net_revenue_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_positive_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) >= 3 THEN 'PASS' ELSE 'FAIL' END as financial_year_range_test, -- Checks for -1, 0, 1 offset
  CASE WHEN COUNT(DISTINCT SAFE_CAST(revenue_transaction_status AS STRING)) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_transaction_statuses_test,
  CASE WHEN SUM(CASE WHEN SAFE_CAST(financial_year AS STRING) = '2025' THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as fy2025_data_present_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
LIMIT 1;","WITH base_data AS (
  SELECT
    financial_year,
    fy_year_month_number,
    financial_short_month,
    adsize_name,
    booking_name,
    CASE
      WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$')) THEN 'Sponsorship'
      WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$')) THEN 'Production'
      ELSE 'Media'
    END AS adsize_category_derived,
    gross_revenue_amount
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
  WHERE
    relative_fy_year_offset IN (-1, 0, 1)
)
SELECT
  'Business Rule Validation' as validation_type,
  'Adsize Category Derivation' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN adsize_category_derived IN ('Sponsorship', 'Production', 'Media') THEN 1 ELSE 0 END) as records_categorized,
  SAFE_DIVIDE(SUM(CASE WHEN adsize_category_derived IN ('Sponsorship', 'Production', 'Media') THEN 1 ELSE 0 END), COUNT(*)) * 100 as categorization_rate_percentage,
  'FY2025 Q1 Filter Coverage' as rule_name_2,
  SUM(CASE WHEN SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(fy_year_month_number AS INT64) IN (202501, 202502, 202503) THEN 1 ELSE 0 END) as records_in_fy2025_q1,
  'Specific Booking Names Filter Coverage' as rule_name_3,
  SUM(CASE WHEN SAFE_CAST(financial_year AS STRING) = '2025' AND SAFE_CAST(booking_name AS STRING) IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series', 'Future Bradfield FY25 B1', 'Future Sydney Bradfield 2024') THEN 1 ELSE 0 END) as records_in_specific_bookings_fy2025
FROM base_data
LIMIT 1;","SELECT
  SAFE_CAST(financial_year AS STRING) as financial_year,
  SAFE_CAST(fy_year_month_number AS INT64) as fy_year_month_number,
  SAFE_CAST(financial_short_month AS STRING) as financial_short_month,
  SAFE_CAST(adsize_name AS STRING) as adsize_name,
  SAFE_CAST(booking_name AS STRING) as booking_name,
  SAFE_CAST(revenue_transaction_status AS STRING) as revenue_transaction_status,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(net_revenue AS NUMERIC) as net_revenue,
  relative_fy_year_offset
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
ORDER BY
  financial_year DESC,
  fy_year_month_number DESC,
  gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': 'STRING', 'context': 'financial_year filter in all queries', 'suggested_fix': 'replace with a parameter or a function like GET_CURRENT_FINANCIAL_YEAR()', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202501, 202502, 202503', 'original_format': 'INT64', 'context': 'fy_year_month_number filter in query 1', 'suggested_fix': 'replace with parameters or relative month logic (e.g., first quarter of current FY)', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'^(.*event sponsorship.*)$'"", ""'^(.*production.*)$'""], 'context': ""adsize_name categorization into 'Sponsorship', 'Production', 'Media'"", 'suggested_governance': 'define adsize categories in a lookup table and join, or use a UDF for categorization logic', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'business_entities', 'hardcoded_values': [""'Future Bradfield 2024'"", ""'Sydney & Brisbane Future Series'"", ""'Future Bradfield FY25 B1'"", ""'Future Sydney Bradfield 2024'""], 'context': 'booking_name filter in query 3', 'suggested_governance': 'manage specific booking names in a reference table or allow dynamic selection via dashboard controls', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'relative_offset', 'hardcoded_values': ['-1', '0', '1'], 'context': 'relative_fy_year_offset filter in all queries', 'suggested_governance': 'while common, consider making the offset range configurable if business needs change frequently', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded financial years and months with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'Externalize adsize categorization rules into a configuration table or a UDF for easier maintenance and consistency.', 'Manage specific booking names in a reference table to avoid hardcoding and enable dynamic filtering.']",3,e83da1de-4227-43e6-bcc6-73051c66914b
"WITH
  circulation_data AS (
    SELECT
      t0.amount AS amount,
      t0.fy_year_week_number AS fy_year_week_number,
      t0.revenue_type AS revenue_type,
      t0.volume AS volume
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
    WHERE
      -- Assuming fy_year_week_number is a string like 'YYYYWW' or 'YYYY-WW'
      -- Filter for recent data, e.g., last 2 years (approx 104 weeks) based on year part
      SAFE_CAST(SUBSTR(t0.fy_year_week_number, 1, 4) AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
  ),
  calculated_metrics AS (
    SELECT
      fy_year_week_number,
      SAFE_CAST(amount AS NUMERIC) AS amount_numeric,
      SAFE_CAST(volume AS INT64) AS volume_int,
      SAFE.LEFT(revenue_type, 2) AS revenue_type_prefix
    FROM
      circulation_data
  )
SELECT
  fy_year_week_number,
  SUM(amount_numeric) AS total_amount,
  SUM(volume_int) AS total_volume,
  SUM(CASE WHEN revenue_type_prefix = '03' THEN amount_numeric ELSE 0 END) AS total_amount_type_03,
  SUM(CASE WHEN revenue_type_prefix = '03' THEN volume_int ELSE 0 END) AS total_volume_type_03
FROM
  calculated_metrics
GROUP BY
  fy_year_week_number
ORDER BY
  fy_year_week_number DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fy_year_week_number AS STRING)) AS unique_fy_year_weeks,
  COUNT(DISTINCT SAFE_CAST(revenue_type AS STRING)) AS unique_revenue_types,
  MIN(SAFE_CAST(fy_year_week_number AS STRING)) AS earliest_fy_year_week,
  MAX(SAFE_CAST(fy_year_week_number AS STRING)) AS latest_fy_year_week,
  AVG(SAFE_CAST(amount AS NUMERIC)) AS avg_amount,
  AVG(SAFE_CAST(volume AS INT64)) AS avg_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check`
WHERE
  -- Assuming fy_year_week_number is a string like 'YYYYWW' or 'YYYY-WW'
  SAFE_CAST(SUBSTR(fy_year_week_number, 1, 4) AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 1;","WITH
  circulation_data AS (
    SELECT
      t0.amount AS amount,
      t0.fy_year_week_number AS fy_year_week_number,
      t0.revenue_type AS revenue_type,
      t0.volume AS volume
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
    WHERE
      SAFE_CAST(SUBSTR(t0.fy_year_week_number, 1, 4) AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
  )
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_amount_test,
  CASE WHEN SUM(SAFE_CAST(volume AS INT64)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_volume_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(fy_year_week_number AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS week_dimension_test,
  CASE WHEN COUNT(CASE WHEN SAFE.LEFT(SAFE_CAST(revenue_type AS STRING), 2) = '03' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_type_03_test
FROM
  circulation_data
LIMIT 1;","WITH
  circulation_data AS (
    SELECT
      t0.amount AS amount,
      t0.fy_year_week_number AS fy_year_week_number,
      t0.revenue_type AS revenue_type,
      t0.volume AS volume
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
    WHERE
      SAFE_CAST(SUBSTR(t0.fy_year_week_number, 1, 4) AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'revenue_type_03_logic' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(revenue_type AS STRING), 2) = '03' THEN 1 ELSE 0 END) AS records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(revenue_type AS STRING), 2) = '03' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS percentage_matching_rule
FROM
  circulation_data
LIMIT 1;","SELECT
  SAFE_CAST(amount AS NUMERIC) AS amount,
  SAFE_CAST(fy_year_week_number AS STRING) AS fy_year_week_number,
  SAFE_CAST(revenue_type AS STRING) AS revenue_type,
  SAFE_CAST(volume AS INT64) AS volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check`
WHERE
  SAFE_CAST(SUBSTR(fy_year_week_number, 1, 4) AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
ORDER BY
  fy_year_week_number DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'03'""], 'context': 'Revenue type prefix used in CASE statement to filter amount and volume.', 'suggested_governance': 'Join to a `revenue_type_lookup` table that maps codes to descriptions.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Circulation'"", ""'Estimate'"", ""'RCTI'"", ""'THINK'"", ""'DTI'""], 'context': 'Filters applied to `finance_operating_statement` and `v_circulation_snapshot_fct` for data freshness metric.', 'suggested_governance': 'Use a configuration table for source system names, scenarios, and sub-source system names.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'timezone', 'hardcoded_values': [""'Australia/Sydney'""], 'context': 'Timezone used in `datetime` function for load timestamp.', 'suggested_governance': 'Parameterize timezone or use a global configuration setting.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded lookup values (e.g., '03', 'Circulation', 'Estimate', 'RCTI', 'THINK', 'DTI') with joins to governed reference tables or dashboard parameters."", ""Parameterize the timezone ('Australia/Sydney') if the dashboard is intended for users in multiple timezones or if the business operates globally."", 'Consider adding a date range parameter for the main circulation data to allow users to select specific periods.']",4,f7a9efeb-df3c-45c9-899d-0bcada701572
"WITH base_data AS (
  SELECT
    t0.advertiser_parent,
    t0.financial_quarter,
    t0.financial_short_month,
    t0.booking_line_created_date,
    t0.fix_date_lod,
    t0.gross_revenue_amount,
    t0.relative_fy_year_offset,
    t0.revenue_group_subtype,
    t0.revenue_type,
    t0.sales_segment_l_2_name,
    t0.sales_segment_l_2_name_sync,
    t0.unified_publication_name
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Apply a reasonable date filter for performance, assuming recent data is relevant.
  -- Given dashboard name ""FY26 (Interim)"", let's filter for data relevant to FY26.
  -- Assuming AU fiscal year starts July 1.
  WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE('2025-07-01')
    AND SAFE_CAST(t0.booking_line_created_date AS DATE) < DATE('2026-07-01')
    AND t0.gross_revenue_amount IS NOT NULL -- Exclude records without revenue for metric calculations
),
derived_dimensions AS (
  SELECT
    advertiser_parent,
    financial_quarter,
    financial_short_month,
    booking_line_created_date,
    fix_date_lod,
    gross_revenue_amount,
    relative_fy_year_offset,
    revenue_group_subtype,
    revenue_type,
    sales_segment_l_2_name,
    sales_segment_l_2_name_sync,
    unified_publication_name,

    -- Derived dimensions from Query 1/2
    CONCAT('Q',SAFE_CAST(financial_quarter AS STRING)) AS quarter_display,
    CASE
      WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1'
      WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2'
      ELSE SAFE_CAST(financial_quarter AS STRING)
    END AS half_year_display,
    CONCAT(SAFE_CAST(financial_short_month AS STRING),' ',CONCAT('Q',SAFE_CAST(financial_quarter AS STRING)),' ',(CASE WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1' WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2' ELSE SAFE_CAST(financial_quarter AS STRING) END)) AS combined_period_string,

    -- Helper flags/values from Query 3
    DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS report_reference_date,
    DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY) AS report_reference_date_minus_365d,
    (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
    PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS parsed_booking_line_created_date,
    (relative_fy_year_offset = 0) AS is_current_fy_offset,
    (relative_fy_year_offset = 1) AS is_previous_fy_offset,
    (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_group_subtype,
    (revenue_type = 'DIGITAL') AS is_digital_revenue_type,
    (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment,
    UPPER(SAFE_CAST(unified_publication_name AS STRING)) AS unified_publication_name_upper
  FROM base_data
),
calculated_metrics AS (
  SELECT
    *,
    -- Core revenue metrics
    CASE WHEN is_current_fy_offset THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue,
    CASE WHEN is_previous_fy_offset THEN gross_revenue_amount ELSE 0 END AS previous_fy_gross_revenue,

    -- Complex effective date for LOD
    CASE
      WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_sales_segment AND is_not_doubleclick_advertiser)
      THEN SAFE_CAST(fix_date_lod AS DATE)
      ELSE parsed_booking_line_created_date
    END AS effective_date_for_lod,

    -- Publication name category check
    (unified_publication_name_upper IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) AS is_ecommerce_outstream_media
  FROM derived_dimensions
)
SELECT
  advertiser_parent,
  financial_quarter,
  financial_short_month,
  quarter_display,
  half_year_display,
  combined_period_string,
  sales_segment_l_2_name,
  unified_publication_name,
  revenue_group_subtype,
  revenue_type,

  SUM(current_fy_gross_revenue) AS total_current_fy_gross_revenue,
  SUM(previous_fy_gross_revenue) AS total_previous_fy_gross_revenue,

  -- Display metrics (assuming the hardcoded string comparison '$\'000' = '$' evaluates to FALSE,
  -- meaning the division by 1000 is applied for 'k' display)
  SUM(CASE WHEN ('$\'000' = '$') THEN current_fy_gross_revenue ELSE SAFE_DIVIDE(current_fy_gross_revenue, 1000) END) AS total_current_fy_gross_revenue_display,
  SUM(CASE WHEN ('$\'000' = '$') THEN previous_fy_gross_revenue ELSE SAFE_DIVIDE(previous_fy_gross_revenue, 1000) END) AS total_previous_fy_gross_revenue_display,

  -- Conditional Gross Revenue (Display)
  SUM(
    CASE WHEN ('$\'000' = '$') THEN
      (CASE WHEN (CASE WHEN (is_current_fy_offset AND is_ecommerce_outstream_media) THEN gross_revenue_amount WHEN (is_current_fy_offset AND SAFE_CAST(effective_date_for_lod AS DATETIME) <= report_reference_date_minus_365d) THEN gross_revenue_amount ELSE NULL END) IS NULL THEN 0 ELSE (CASE WHEN (is_current_fy_offset AND is_ecommerce_outstream_media) THEN gross_revenue_amount WHEN (is_current_fy_offset AND SAFE_CAST(effective_date_for_lod AS DATETIME) <= report_reference_date_minus_365d) THEN gross_revenue_amount ELSE NULL END) END)
    ELSE
      SAFE_DIVIDE(
        (CASE WHEN (CASE WHEN (is_current_fy_offset AND is_ecommerce_outstream_media) THEN gross_revenue_amount WHEN (is_current_fy_offset AND SAFE_CAST(effective_date_for_lod AS DATETIME) <= report_reference_date_minus_365d) THEN gross_revenue_amount ELSE NULL END) IS NULL THEN 0 ELSE (CASE WHEN (is_current_fy_offset AND is_ecommerce_outstream_media) THEN gross_revenue_amount WHEN (is_current_fy_offset AND SAFE_CAST(effective_date_for_lod AS DATETIME) <= report_reference_date_minus_365d) THEN gross_revenue_amount ELSE NULL END) END), 1000)
    END
  ) AS total_conditional_gross_revenue_display

FROM calculated_metrics
GROUP BY
  advertiser_parent,
  financial_quarter,
  financial_short_month,
  quarter_display,
  half_year_display,
  combined_period_string,
  sales_segment_l_2_name,
  unified_publication_name,
  revenue_group_subtype,
  revenue_type
ORDER BY
  advertiser_parent ASC, financial_quarter ASC
LIMIT 100
;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.booking_line_created_date AS DATE)) as unique_booking_dates,
  COUNT(DISTINCT t0.advertiser_parent) as unique_advertiser_parents,
  COUNT(DISTINCT SAFE_CAST(t0.financial_quarter AS STRING)) as unique_financial_quarters,
  COUNT(DISTINCT t0.sales_segment_l_2_name) as unique_sales_segments,
  MIN(SAFE_CAST(t0.booking_line_created_date AS DATE)) as earliest_booking_date,
  MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) as latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(t0.advertiser_parent, SAFE_CAST(t0.booking_line_created_date AS STRING), SAFE_CAST(t0.gross_revenue_amount AS STRING))) as approx_unique_transactions
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0 
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_parent) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_parent_test,
  CASE WHEN MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN t0.relative_fy_year_offset = 0 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_offset_test,
  CASE WHEN COUNT(CASE WHEN t0.sales_segment_l_2_name = 'Consortium QLD' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as consortium_qld_data_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'digital_revenue_logic_check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (t0.revenue_group_subtype = 'DIGITAL' AND t0.revenue_type = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN 1 ELSE 0 END) as records_matching_digital_criteria,
  SAFE_DIVIDE(SUM(CASE WHEN (t0.revenue_group_subtype = 'DIGITAL' AND t0.revenue_type = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK') THEN 1 ELSE 0 END), COUNT(*)) * 100 as digital_criteria_pass_rate_percentage,
  'thousands_conversion_logic_check' as rule_name_2,
  SUM(CASE WHEN ('$\'000' = '$') THEN 1 ELSE 0 END) as records_not_divided_by_1000,
  SUM(CASE WHEN ('$\'000' != '$') THEN 1 ELSE 0 END) as records_divided_by_1000
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT 
  SAFE_CAST(t0.booking_line_created_date AS DATE) as booking_date,
  t0.advertiser_parent,
  SAFE_CAST(t0.financial_quarter AS STRING) as financial_quarter,
  t0.financial_short_month,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) as relative_fy_year_offset,
  t0.revenue_group_subtype,
  t0.revenue_type,
  t0.sales_segment_l_2_name,
  t0.sales_segment_l_2_name_sync,
  t0.unified_publication_name,
  t0.fix_date_lod
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY SAFE_CAST(t0.booking_line_created_date AS DATE) DESC, t0.gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-23', 'original_format': '2025-06-23 10:00:32.354880+00', 'context': ""Used as a fixed reference date for calculating relative dates (e.g., 365 days prior) and for filtering. This date seems to be the 'current' date for FY26 interim reporting."", 'suggested_fix': ""Replace with CURRENT_DATE() or a dashboard parameter for the reporting date. If it's a specific FY end date, it should be derived from a fiscal calendar table."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'$\\'000'"", ""'$'""], 'context': ""Controls whether revenue amounts are divided by 1000. This is an unusual way to implement a 'thousands' toggle."", 'suggested_governance': 'Implement a boolean parameter (e.g., `show_in_thousands BOOLEAN`) in Looker Studio or a configuration table to control this conversion.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'OUTSTREAM'"", ""'XTEND'"", ""'EDMEDIA'"", ""'ECOMMERCE'""], 'context': ""Specific categories of 'unified_publication_name' used in a filter for 'clmn27_'."", 'suggested_governance': ""Create a reference table for 'unified_publication_name_categories' or define these as a Looker Studio parameter list."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Consortium QLD'""], 'context': ""Specific 'sales_segment_l_2_name' used as a filter."", 'suggested_governance': ""Create a reference table for 'sales_segments' or define as a Looker Studio parameter."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'exclusions', 'hardcoded_values': [""'DOUBLECLICK'""], 'context': ""Specific 'advertiser_parent' excluded from some calculations."", 'suggested_governance': ""Create a reference table for 'excluded_advertisers' or define as a Looker Studio parameter."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '1'], 'context': ""Used for 'relative_fy_year_offset' to distinguish current (0) vs. previous (1) fiscal year revenue."", 'suggested_governance': ""Document these values clearly or derive them from a fiscal calendar table that explicitly defines 'current_fy_offset' and 'previous_fy_offset'."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'DIGITAL'"", ""'Digital Other'""], 'context': ""Used for 'revenue_group_subtype', 'revenue_type', and 'sales_segment_l_2_name_sync' in conditional logic."", 'suggested_governance': 'Define these categories in a lookup table if they are subject to change or need more detailed definitions.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Jul Q1 H1'""], 'context': 'Specific combined period string used as a filter for advertiser_parent.', 'suggested_governance': 'This complex string should be derived from date parameters (e.g., selected month, quarter, half-year) rather than hardcoded.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', ""Introduce a boolean parameter for 'Show in Thousands' to control the /1000 division."", ""Replace hardcoded lookup values for 'unified_publication_name' categories, 'sales_segment_l_2_name', and 'advertiser_parent' exclusions with joins to governed reference tables or Looker Studio parameters."", 'Define fiscal year logic (quarter to half-year mapping, relative year offsets) in a dedicated date dimension table.']",5,9269e9c6-1ad0-4415-96c3-aca8a710ba01
"WITH base_data AS (
  SELECT
    t0.BudgetEarnedAmount,
    t0.ClosingBase,
    t0.EarnedAmount,
    t0.ForecastBudgetEarnedAmount,
    t0.NFEarnedAmount,
    t0.NYBudgetEarnedAmount,
    t0.OpeningBase,
    t0.finance_recognition,
    t0.fy_month_of_year,
    t0.fy_quarter_of_year,
    t0.fy_week_of_year,
    t0.fy_year,
    t0.masthead_group,
    -- Derived week for Q1 (based on 2025-03-26, Wednesday, week 38)
    CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP('2025-03-26 03:31:44.896010+00', 'Australia/Sydney')) - 1) <= 2
         THEN DATETIME_DIFF(SAFE_CAST(DATE '2025-03-26' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1
         ELSE DATETIME_DIFF(SAFE_CAST(DATE '2025-03-26' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)
    END AS derived_week_q1,
    -- Derived week for Q2 (based on 2025-03-25, Tuesday, week 37)
    CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP('2025-03-25 23:59:29.736172+00', 'Australia/Sydney')) - 1) <= 2
         THEN DATETIME_DIFF(SAFE_CAST(DATE '2025-03-25' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1
         ELSE DATETIME_DIFF(SAFE_CAST(DATE '2025-03-25' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK)
    END AS derived_week_q2
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
  WHERE
    t0.masthead_group != 'Discontinued'
    AND t0.finance_recognition = 'Digital Recognition'
)
SELECT
  -- Metrics from Query 1 (FY2025, Week 38, and FY2024, Week 38)
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q1 THEN BudgetEarnedAmount ELSE 0 END) AS budget_earned_amount_fy25_wk38,
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q1 THEN EarnedAmount ELSE NULL END) AS earned_amount_fy25_wk38,
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q1 THEN ClosingBase ELSE 0 END) AS closing_base_fy25_wk38,
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q1 THEN OpeningBase ELSE 0 END) AS opening_base_fy25_wk38,
  (SUM(CASE WHEN fy_year = 2024 AND fy_week_of_year = derived_week_q1 THEN ClosingBase ELSE 0 END) - SUM(CASE WHEN fy_year = 2024 AND fy_week_of_year = derived_week_q1 THEN OpeningBase ELSE 0 END)) AS net_change_fy24_wk38,
  
  -- Metrics from Query 2 (FY2025, Week 37)
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q2 THEN ClosingBase ELSE 0 END) AS closing_base_fy25_wk37,
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q2 THEN OpeningBase ELSE 0 END) AS opening_base_fy25_wk37,
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q2 THEN EarnedAmount ELSE NULL END) AS earned_amount_fy25_wk37,
  MAX(CASE WHEN fy_year = 2025 AND fy_week_of_year = derived_week_q2 THEN 1 ELSE 0 END) AS current_week_flag_fy25_wk37,
  
  -- Metrics from Query 3 (Dashboard View Type)
  'Week to Date & Budget View' AS dashboard_view_type,
  COUNT(DISTINCT 'Week to Date & Budget View') AS distinct_view_types_count
FROM base_data
LIMIT 100;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fy_year AS STRING) || '-' || SAFE_CAST(fy_week_of_year AS STRING)) AS unique_fiscal_weeks,
  COUNT(DISTINCT masthead_group) AS unique_masthead_groups,
  COUNT(DISTINCT finance_recognition) AS unique_finance_recognitions,
  MIN(fy_year) AS earliest_fy_year,
  MAX(fy_year) AS latest_fy_year,
  APPROX_COUNT_DISTINCT(SAFE_CAST(fy_year AS STRING) || '-' || SAFE_CAST(fy_month_of_year AS STRING) || '-' || SAFE_CAST(fy_week_of_year AS STRING) || '-' || masthead_group || '-' || finance_recognition) AS approx_unique_grain_records
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(BudgetEarnedAmount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS budget_earned_amount_test,
  CASE WHEN SUM(SAFE_CAST(EarnedAmount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS earned_amount_test,
  CASE WHEN COUNT(DISTINCT masthead_group) > 1 THEN 'PASS' ELSE 'FAIL' END AS masthead_group_diversity_test,
  CASE WHEN MAX(fy_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(CASE WHEN masthead_group = 'Discontinued' THEN 1 END) = 0 THEN 'PASS' ELSE 'FAIL' END AS discontinued_filter_test,
  CASE WHEN COUNT(CASE WHEN finance_recognition = 'Digital Recognition' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS digital_recognition_filter_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'finance_recognition_filter' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE WHEN finance_recognition = 'Digital Recognition' THEN 1 ELSE 0 END) AS records_matching_digital_recognition,
  SAFE_DIVIDE(SUM(CASE WHEN finance_recognition = 'Digital Recognition' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS digital_recognition_percentage,
  'masthead_group_exclusion' AS rule_name_2,
  SUM(CASE WHEN masthead_group = 'Discontinued' THEN 1 ELSE 0 END) AS records_matching_discontinued,
  SAFE_DIVIDE(SUM(CASE WHEN masthead_group = 'Discontinued' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS discontinued_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 1;","SELECT
  SAFE_CAST(fy_year AS INT64) AS fy_year,
  SAFE_CAST(fy_month_of_year AS INT64) AS fy_month_of_year,
  SAFE_CAST(fy_week_of_year AS INT64) AS fy_week_of_year,
  masthead_group,
  finance_recognition,
  SAFE_CAST(BudgetEarnedAmount AS NUMERIC) AS BudgetEarnedAmount,
  SAFE_CAST(EarnedAmount AS NUMERIC) AS EarnedAmount,
  SAFE_CAST(ForecastBudgetEarnedAmount AS NUMERIC) AS ForecastBudgetEarnedAmount,
  SAFE_CAST(NFEarnedAmount AS NUMERIC) AS NFEarnedAmount,
  SAFE_CAST(NYBudgetEarnedAmount AS NUMERIC) AS NYBudgetEarnedAmount,
  SAFE_CAST(ClosingBase AS NUMERIC) AS ClosingBase,
  SAFE_CAST(OpeningBase AS NUMERIC) AS OpeningBase
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions`
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
  AND masthead_group != 'Discontinued'
  AND finance_recognition = 'Digital Recognition'
ORDER BY fy_year DESC, fy_week_of_year DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-03-26', 'original_format': '2025-03-26 03:31:44.896010+00', 'context': ""Used as the reference date for calculating 'current' fiscal week (Week 38) in Query 1."", 'suggested_fix': ""Replace with `CURRENT_DATE()` or a dashboard parameter for dynamic 'current week' calculation."", 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-03-25', 'original_format': '2025-03-25 23:59:29.736172+00', 'context': ""Used as the reference date for calculating 'current' fiscal week (Week 37) in Query 2."", 'suggested_fix': ""Replace with `CURRENT_DATE()` or a dashboard parameter for dynamic 'current week' calculation."", 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as the baseline date for `DATETIME_DIFF` to calculate week numbers from the start of a fiscal year/period.', 'suggested_fix': ""This might be a fixed fiscal year start date. If so, it should be documented. If it's meant to be dynamic, it should be parameterized or derived from a fiscal calendar table."", 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'filter_values', 'hardcoded_values': [""'Discontinued'"", ""'Digital Recognition'""], 'context': 'Used to filter `masthead_group` and `finance_recognition`.', 'suggested_governance': 'These values should be managed in a reference table (e.g., `dim_masthead_status`, `dim_finance_recognition_type`) and joined, or exposed as dashboard parameters.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'fiscal_years', 'hardcoded_values': ['2025', '2024'], 'context': 'Used to filter data for specific fiscal years (current and prior).', 'suggested_governance': 'Replace with dynamic calculations (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`, `EXTRACT(YEAR FROM CURRENT_DATE()) - 1`) or dashboard parameters for selecting fiscal years.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'conditional_logic_flags', 'hardcoded_values': ['1 = 1', '1 = 2', '1 = 3', '1 = 4', '0 = 0'], 'context': ""Used extensively in `CASE WHEN` statements to select specific branches of logic. In Query 3, this makes the 'Dashboard View Type' static."", 'suggested_governance': ""This pattern often indicates Looker Studio's internal parameter handling. If the dashboard is intended to be dynamic, these conditions should be replaced by actual parameter values passed from Looker Studio. If static, the `CASE WHEN` can be simplified."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'custom_fiscal_week_buckets', 'hardcoded_values': ['clmn30_ <= 4', 'clmn30_ <= 9', 'clmn30_ <= 13', 'clmn30_ <= 17', 'clmn30_ <= 22', 'clmn30_ <= 26', 'clmn30_ <= 30', 'clmn30_ <= 35', 'clmn30_ <= 39', 'clmn30_ <= 43', 'clmn30_ <= 48', 'clmn30_ <= 53'], 'context': 'Used to categorize fiscal weeks into custom periods (e.g., for reporting cycles).', 'suggested_governance': 'These bucketing rules should be defined in a dedicated fiscal calendar dimension table or a configuration table, rather than hardcoded in queries. This allows for easier updates and consistency across reports.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates (e.g., '2025-03-26', '2025-03-25') with Looker Studio date parameters or relative date functions like `CURRENT_DATE()` to ensure the dashboard always reflects current data."", 'Replace hardcoded fiscal years (e.g., 2025, 2024) with dynamic derivations (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`) or parameters to allow users to select reporting periods.', ""Externalize filter values ('Discontinued', 'Digital Recognition') into a configuration table or use Looker Studio controls for dynamic filtering."", ""Refactor the `1=X` conditional logic in Query 3 to leverage Looker Studio's native parameter and control features, enabling users to truly switch between 'view types' rather than having a static output.""]",6,bb49fa78-5abe-4e68-a9c1-8172a832e724
"WITH OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      pub.l04_publication_code,
      pub.l06_publication_code,
      pub.gl_hierarchy_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep
        ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND pub.l04_publication_code <> 'Free News & Lifestyle'
      AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
      AND pub.gl_hierarchy_code = 'FY2025'
),
pre_calculated_data AS (
    SELECT
        *,
        -- Derived clmn7_ (publication_name with PNG override)
        CASE WHEN publication_code = 'Post Courier' THEN 'PNG' ELSE publication_name END AS derived_publication_name_clmn7,

        -- Derived clmn8_, clmn9_ (Budget_Volume for past weeks)
        CASE WHEN relative_fisc_week_number < 0 THEN Budget_Volume ELSE NULL END AS budget_volume_past_weeks_clmn8_9,

        -- Derived clmn10_, clmn11_, clmn12_ (Standardized Publication Name)
        CASE
            WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
            WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times'
            WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
            WHEN publication_name = 'Toowoomba' THEN 'The Chronicle'
            WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin'
            WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB'
            WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser'
            WHEN publication_name = 'Cairns Post' THEN 'Cairns Post'
            WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast'
            WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail'
            WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury'
            WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News'
            WHEN publication_name = 'Mackay' THEN 'Daily Mercury'
            ELSE NULL
        END AS standardized_publication_name,

        -- Derived clmn13_ (State/Region from standardized publication name)
        CASE
            WHEN (CASE WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser' WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times' WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Toowoomba' THEN 'The Chronicle' WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin' WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB' WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser' WHEN publication_name = 'Cairns Post' THEN 'Cairns Post' WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast' WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail' WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury' WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News' WHEN publication_name = 'Mackay' THEN 'Daily Mercury' ELSE NULL END) = 'The Daily Telegraph' THEN ' NSW'
            WHEN (CASE WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser' WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times' WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Toowoomba' THEN 'The Chronicle' WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin' WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB' WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser' WHEN publication_name = 'Cairns Post' THEN 'Cairns Post' WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast' WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail' WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury' WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News' WHEN publication_name = 'Mackay' THEN 'Daily Mercury' ELSE NULL END) IN ('The Herald Sun', 'Geelong Advertiser', 'Weekly Times') THEN '  VIC'
            WHEN (CASE WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser' WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times' WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Toowoomba' THEN 'The Chronicle' WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin' WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB' WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser' WHEN publication_name = 'Cairns Post' THEN 'Cairns Post' WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast' WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail' WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury' WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News' WHEN publication_name = 'Mackay' THEN 'Daily Mercury' ELSE NULL END) = 'The Advertiser' THEN '   SA'
            WHEN (CASE WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser' WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times' WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Toowoomba' THEN 'The Chronicle' WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin' WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB' WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser' WHEN publication_name = 'Cairns Post' THEN 'Cairns Post' WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast' WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail' WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury' WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News' WHEN publication_name = 'Mackay' THEN 'Daily Mercury' ELSE NULL END) IN ('Courier Mail', 'Cairns Post', 'GCB', 'Townsville Bulletin', 'The Chronicle', 'Daily Mercury', 'Sunshine Coast') THEN '     QLD'
            WHEN (CASE WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser' WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times' WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Toowoomba' THEN 'The Chronicle' WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin' WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB' WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser' WHEN publication_name = 'Cairns Post' THEN 'Cairns Post' WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast' WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail' WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury' WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News' WHEN publication_name = 'Mackay' THEN 'Daily Mercury' ELSE NULL END) = 'Northern Territory News' THEN '      NT'
            WHEN (CASE WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser' WHEN publication_name IN ('Weekly Times') THEN 'Weekly Times' WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Toowoomba' THEN 'The Chronicle' WHEN publication_name = 'Townsville Bulletin' THEN 'Townsville Bulletin' WHEN publication_name = 'Gold Coast Bulletin' THEN 'GCB' WHEN publication_name = 'Geelong Advertiser' THEN 'Geelong Advertiser' WHEN publication_name = 'Cairns Post' THEN 'Cairns Post' WHEN publication_name = 'Sunshine Coast' THEN 'Sunshine Coast' WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'Courier Mail' WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury' WHEN publication_name IN ('Sunday Territorian', 'NT News') THEN 'Northern Territory News' WHEN publication_name = 'Mackay' THEN 'Daily Mercury' ELSE NULL END) = 'Mercury' THEN '    TAS'
            ELSE NULL
        END AS derived_state_region,

        -- Derived clmn24_ (Day of week from hardcoded date)
        EXTRACT(DAYOFWEEK FROM TIMESTAMP '2025-04-15 04:14:20.297382+00' AT TIME ZONE 'Australia/Sydney') - 1 AS derived_day_of_week_from_date,

        -- Derived clmn25_ (Weeks difference from hardcoded date)
        DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS derived_weeks_diff,

        -- Derived clmn28_ (Day of week group)
        CASE
            WHEN day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry') THEN 'M-F'
            WHEN day_of_week = 'Sat' THEN 'SAT'
            WHEN day_of_week = 'Sun' THEN 'Sun'
            ELSE NULL
        END AS day_of_week_group,

        -- Derived clmn34_ (Channel Group)
        CASE
            WHEN os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels') THEN 'Alternative Channels'
            WHEN os_level_10 IN ('Petrol and Convenience') THEN 'Convenience Stores / Service Stations'
            WHEN os_level_10 IN ('Agent & Dist') THEN 'Newsagencies'
            WHEN os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub') THEN 'Subscriptions'
            WHEN os_level_10 IN ('Supermarkets') THEN 'Supermarkets'
            ELSE 'Unspec Channel'
        END AS channel_group,

        -- Derived clmn35_ (os_level_7 uppercase)
        UPPER(SAFE_CAST(os_level_7 AS STRING)) AS os_level_7_upper,

        -- Derived clmn37_ (Budget_Amount if relative_fisc_week_number < 0)
        CASE WHEN relative_fisc_week_number < 0 THEN Budget_Amount ELSE 0 END AS budget_amount_past_weeks,

        -- Derived clmn38_ (Budget_Amount if relative_fisc_year_number = 0)
        CASE WHEN relative_fisc_year_number = 0 THEN Budget_Amount ELSE 0 END AS budget_amount_current_year,

        -- Derived clmn49_ (Publication Group)
        CASE
            WHEN publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin') THEN '6 Day Pubs'
            WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury and Sunday Tas'
            WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'NT News & Sunday Territorian'
            WHEN publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Other'
            WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
            WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
            WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
            ELSE publication_name
        END AS publication_group,

        -- Derived clmn52_ (Conditional week number)
        CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP '2025-04-15 04:14:20.297382+00' AT TIME ZONE 'Australia/Sydney') - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END AS conditional_week_num,

        -- Derived clmn54_ (Is Courier Mail)
        (CASE WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Advertiser', 'Sunday Mail') THEN 'The Advertiser' WHEN publication_name IN ('Courier Mail', 'The Sunday Mail') THEN 'The Courier Mail' WHEN publication_name = 'The Australian' THEN 'The Australian' WHEN publication_name = 'The Sportsman' THEN 'The Sportsman' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Weekly Times' THEN 'Weekly Times' ELSE NULL END) = 'The Courier Mail' AS is_courier_mail,

        -- Derived clmn55_ (Is The Australian)
        (CASE WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Advertiser', 'Sunday Mail') THEN 'The Advertiser' WHEN publication_name IN ('Courier Mail', 'The Sunday Mail') THEN 'The Courier Mail' WHEN publication_name = 'The Australian' THEN 'The Australian' WHEN publication_name = 'The Sportsman' THEN 'The Sportsman' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Weekly Times' THEN 'Weekly Times' ELSE NULL END) = 'The Australian' AS is_the_australian,

        -- Derived clmn61_ (Week number for calculations)
        CASE WHEN (0 = 0) THEN (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP '2025-04-15 04:14:20.297382+00' AT TIME ZONE 'Australia/Sydney') - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) ELSE 0 END AS week_num_for_calc,

        -- Derived clmn63_ (Is Courier Mail or Australian)
        ((CASE WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Advertiser', 'Sunday Mail') THEN 'The Advertiser' WHEN publication_name IN ('Courier Mail', 'The Sunday Mail') THEN 'The Courier Mail' WHEN publication_name = 'The Australian' THEN 'The Australian' WHEN publication_name = 'The Sportsman' THEN 'The Sportsman' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Weekly Times' THEN 'Weekly Times' ELSE NULL END) = 'The Australian' OR (CASE WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun' WHEN publication_name IN ('The Advertiser', 'Sunday Mail') THEN 'The Advertiser' WHEN publication_name IN ('Courier Mail', 'The Sunday Mail') THEN 'The Courier Mail' WHEN publication_name = 'The Australian' THEN 'The Australian' WHEN publication_name = 'The Sportsman' THEN 'The Sportsman' WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph' WHEN publication_name = 'Weekly Times' THEN 'Weekly Times' ELSE NULL END) = 'The Courier Mail') AS is_courier_mail_or_australian,

        -- Derived clmn64_ (Is week 26 or 40)
        ((CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP '2025-04-15 04:14:20.297382+00' AT TIME ZONE 'Australia/Sydney') - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) = 26 OR (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP '2025-04-15 04:14:20.297382+00' AT TIME ZONE 'Australia/Sydney') - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(TIMESTAMP '2025-04-15 04:14:20.297382+00' AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) = 40) AS is_week_26_or_40,

        -- Derived clmn70_ (Always 12 based on hardcoded 0)
        SAFE_CAST(CASE WHEN (0 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (0 <= 4) THEN '1' WHEN (0 <= 9) THEN '2' WHEN (0 <= 13) THEN '3' WHEN (0 <= 17) THEN '4' WHEN (0 <= 22) THEN '5' WHEN (0 <= 26) THEN '6' WHEN (0 <= 30) THEN '7' WHEN (0 <= 35) THEN '8' WHEN (0 <= 39) THEN '9' WHEN (0 <= 43) THEN '10' WHEN (0 <= 48) THEN '11' WHEN (0 <= 52) THEN '12' ELSE '12' END AS INT64) AS hardcoded_month_num_clmn70,

        -- Derived clmn71_, clmn72_ (Forecast Amount adjusted)
        CASE WHEN (TRUE) THEN (CASE WHEN conditional_week_num <= fy_year_week_number THEN Actual_Amount ELSE 0 END) ELSE 0 END AS forecast_amount_adjusted_clmn71_72,

        -- Derived clmn73_ (Budget Amount adjusted)
        CASE WHEN ('2' = '1') THEN (CASE WHEN fy_week_of_year = week_num_for_calc THEN Budget_Amount ELSE 0 END) WHEN (TRUE AND ('2' = '1')) THEN budget_amount_past_weeks WHEN ('2' = '2') THEN budget_amount_current_year WHEN ('2' = '3') THEN budget_amount_current_year ELSE 0 END AS budget_amount_adjusted_clmn73,

        -- Derived clmn74_ (Actual Amount adjusted based on month/week)
        CASE WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) < 4 THEN Actual_Amount WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) < 6 THEN Budget_Amount WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) = 6 THEN (CASE WHEN fy_month_of_year < 6 THEN Actual_Amount ELSE Forecast_Amount END) WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) < 9 THEN Budget_Amount WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) = 9 THEN (CASE WHEN fy_month_of_year < 9 THEN Actual_Amount ELSE Forecast_Amount END) WHEN fy_month_of_year < 10 THEN Actual_Amount ELSE Forecast_Amount END AS actual_amount_adjusted_clmn74,

        -- Derived clmn75_ (Volume adjusted based on month/week)
        CASE WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) < 4 THEN volume WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) < 6 THEN Budget_Volume WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) = 6 THEN (CASE WHEN fy_month_of_year < 6 THEN volume ELSE Forecast_Volume END) WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) < 9 THEN Budget_Volume WHEN SAFE_CAST(hardcoded_month_num_clmn70 AS INT64) = 9 THEN (CASE WHEN fy_month_of_year < 9 THEN volume ELSE Forecast_Volume END) WHEN fy_month_of_year < 10 THEN volume ELSE Forecast_Volume END AS volume_adjusted_clmn75
),
final_calculations AS (
    SELECT
        *,
        -- Derived clmn76_ (Final Actual Amount)
        CASE WHEN ('1' = '1') THEN budget_amount_adjusted_clmn73 WHEN ('1' = '2') THEN actual_amount_adjusted_clmn74 WHEN ('1' = '3') THEN Last_Year_Actual_Amount ELSE 0 END AS final_actual_amount_clmn76,

        -- Derived clmn77_ (Final Budget Volume)
        CASE WHEN ('1' = '1') THEN Budget_Volume WHEN ('1' = '2') THEN volume_adjusted_clmn75 WHEN ('1' = '3') THEN Last_Year_volume ELSE 0 END AS final_budget_volume_clmn77,

        -- Derived clmn78_ (Actual Amount for ALL SALES CHANNELS)
        CASE WHEN (os_level_7_upper = 'ALL SALES CHANNELS') THEN (CASE WHEN ('1' = '1') THEN budget_amount_adjusted_clmn73 WHEN ('1' = '2') THEN actual_amount_adjusted_clmn74 WHEN ('1' = '3') THEN Last_Year_Actual_Amount ELSE 0 END) ELSE 0 END AS actual_amount_all_sales_channels_clmn78,

        -- Derived clmn79_ (Forecast Volume for The Sportsman)
        SAFE_DIVIDE(final_budget_volume_clmn77, (week_num_for_calc*2))*5 AS forecast_volume_sportsman_clmn79,

        -- Derived clmn80_ (Budget Volume for Weekly Times)
        final_budget_volume_clmn77*5 AS budget_volume_weekly_times_clmn80,

        -- Derived clmn81_ (Budget Volume M-F)
        SAFE_DIVIDE(final_budget_volume_clmn77, 4)*5 AS budget_volume_mf_clmn81,

        -- Derived clmn82_ (Forecast Volume for Weekly Times)
        SAFE_DIVIDE(final_budget_volume_clmn77, week_num_for_calc)*5 AS forecast_volume_weekly_times_clmn82,

        -- Derived clmn83_ (Forecast Volume M-F)
        SAFE_DIVIDE(final_budget_volume_clmn77, (week_num_for_calc*5))*5 AS forecast_volume_mf_clmn83,

        -- Derived clmn84_ (Forecast Volume general)
        SAFE_DIVIDE(final_budget_volume_clmn77, week_num_for_calc) AS forecast_volume_general_clmn84,

        -- Derived clmn85_ (Budget Volume for The Sportsman)
        SAFE_DIVIDE(final_budget_volume_clmn77, 2)*5 AS budget_volume_sportsman_clmn85
)
, daily_adjusted_metrics AS (
    SELECT
        *,
        -- Derived clmn86_ (Budget Volume adjusted for M-F)
        CASE WHEN (day_of_week_group = 'M-F') THEN budget_volume_mf_clmn81 ELSE final_budget_volume_clmn77 END AS budget_volume_adjusted_mf_clmn86,

        -- Derived clmn87_ (Forecast Volume adjusted for M-F)
        CASE WHEN (day_of_week_group = 'M-F') THEN forecast_volume_mf_clmn83 ELSE forecast_volume_general_clmn84 END AS forecast_volume_adjusted_mf_clmn87
)
, final_daily_metrics AS (
    SELECT
        *,
        -- Derived clmn88_ (Final Budget Volume for daily calculation)
        CASE
            WHEN (is_week_26_or_40 AND is_courier_mail_or_australian) THEN budget_volume_adjusted_mf_clmn86
            WHEN (standardized_publication_name = 'The Sportsman') THEN budget_volume_sportsman_clmn85
            WHEN (standardized_publication_name = 'Weekly Times') THEN budget_volume_weekly_times_clmn80
            WHEN (publication_group = 'PNG') THEN 0
            ELSE final_budget_volume_clmn77
        END AS final_daily_budget_volume_clmn88,

        -- Derived clmn89_ (Final Forecast Volume for daily calculation)
        CASE
            WHEN (is_the_australian OR is_courier_mail) THEN forecast_volume_adjusted_mf_clmn87
            WHEN (standardized_publication_name = 'The Sportsman') THEN forecast_volume_sportsman_clmn79
            WHEN (standardized_publication_name = 'Weekly Times') THEN forecast_volume_weekly_times_clmn82
            WHEN (publication_group = 'PNG') THEN 0
            WHEN (day_of_week_group = 'M-F') THEN forecast_volume_mf_clmn83
            ELSE forecast_volume_general_clmn84
        END AS final_daily_forecast_volume_clmn89
)
SELECT
    fy_quarter_of_year AS fiscal_quarter,
    os_level_8 AS os_level_8_category,
    standardized_publication_name AS publication_standardized,
    derived_state_region AS state_region_derived,
    channel_group,
    publication_group,
    'YTD' AS period_label,
    day_of_week_group,
    fy_month_of_year AS fiscal_month,
    fy_week_of_year AS fiscal_week,
    relative_fisc_week_number,
    relative_fisc_year_number,
    fiscal_week_id,
    gl_publication_code,
    os_level_10,
    os_level_7,
    SUM(Actual_Amount) AS raw_actual_amount,
    SUM(Budget_Amount) AS raw_budget_amount,
    SUM(Budget_Volume) AS raw_budget_volume,
    SUM(Forecast_Amount) AS raw_forecast_amount,
    SUM(Forecast_Volume) AS raw_forecast_volume,
    SUM(Last_Year_Actual_Amount) AS raw_last_year_actual_amount,
    SUM(Last_Year_volume) AS raw_last_year_volume,
    SUM(volume) AS raw_volume,

    -- Metrics from Query 1
    SUM(budget_volume_past_weeks_clmn8_9) AS budget_volume_past_weeks,
    SUM(volume - budget_volume_past_weeks_clmn8_9) AS volume_vs_budget_past_weeks,
    SUM(volume) AS total_volume,

    -- Metrics from Query 2
    SUM(final_budget_volume_clmn77) AS total_budget_volume,
    SUM(final_actual_amount_clmn76) AS total_actual_amount,
    SUM(actual_amount_all_sales_channels_clmn78) AS actual_amount_all_sales_channels,
    SUM(CASE WHEN publication_group = 'PNG' THEN 0 WHEN publication_group = '6 Day Pubs' THEN SAFE_DIVIDE(final_daily_budget_volume_clmn88, 6) ELSE SAFE_DIVIDE(final_daily_budget_volume_clmn88, 7) END) AS daily_budget_volume_adjusted,
    SUM(forecast_amount_adjusted_clmn71_72) AS total_forecast_amount,
    SUM(CASE WHEN publication_group = '6 Day Pubs' THEN SAFE_DIVIDE(final_daily_forecast_volume_clmn89, 6) ELSE SAFE_DIVIDE(final_daily_forecast_volume_clmn89, 7) END) AS daily_forecast_volume_adjusted
FROM
    final_daily_metrics
WHERE
    os_level_8 != 'DTI Free Copies'
    AND NOT(standardized_publication_name IS NULL)
    AND channel_group = 'Retail'
GROUP BY
    fiscal_quarter,
    os_level_8_category,
    publication_standardized,
    state_region_derived,
    channel_group,
    publication_group,
    period_label,
    day_of_week_group,
    fiscal_month,
    fiscal_week,
    relative_fisc_week_number,
    relative_fisc_year_number,
    fiscal_week_id,
    gl_publication_code,
    os_level_10,
    os_level_7
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS STRING)) as unique_fiscal_weeks,
  COUNT(DISTINCT gl_publication_code) as unique_publication_codes,
  COUNT(DISTINCT os_level_8) as unique_os_level_8_categories,
  COUNT(DISTINCT os_level_10) as unique_os_level_10_channels,
  MIN(SAFE_CAST(fiscal_week_id AS INT64)) as earliest_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS INT64)) as latest_fiscal_week_id,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(fiscal_week_id AS STRING), gl_publication_code, os_level_8, os_level_10)) as approx_unique_record_combinations
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  upper(os_level_6) = 'CIRCULATION'
  AND gl_hierarchy_code = 'FY2025'
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_test,
  CASE WHEN SUM(SAFE_CAST(Budget_Volume AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as budget_volume_test,
  CASE WHEN MAX(SAFE_CAST(fiscal_week_id AS INT64)) >= (SELECT MAX(SAFE_CAST(fy_year_week_number AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` WHERE SAFE_CAST(fy_year AS INT64) = 2025) - 4 THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN upper(os_level_6) = 'CIRCULATION' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as circulation_filter_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  gl_hierarchy_code = 'FY2025'
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Circulation_FY2025_Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN upper(os.os_level_6) = 'CIRCULATION' AND pub.gl_hierarchy_code = 'FY2025' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN upper(os.os_level_6) = 'CIRCULATION' AND pub.gl_hierarchy_code = 'FY2025' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
WHERE
  SAFE_CAST(os.fiscal_week_id AS INT64) >= (SELECT MIN(SAFE_CAST(fy_year_week_number AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` WHERE SAFE_CAST(fy_year AS INT64) = 2025)
  AND SAFE_CAST(os.fiscal_week_id AS INT64) <= (SELECT MAX(SAFE_CAST(fy_year_week_number AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` WHERE SAFE_CAST(fy_year AS INT64) = 2025)
LIMIT 1;","SELECT
  SAFE_CAST(fiscal_week_id AS INT64) as fiscal_week_id,
  gl_publication_code,
  publication_name,
  os_level_8,
  os_level_10,
  Actual_Amount,
  Budget_Volume,
  Forecast_Amount,
  volume,
  relative_fisc_week_number,
  fy_quarter_of_year,
  fy_month_of_year,
  day_of_week
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  upper(os_level_6) = 'CIRCULATION'
  AND gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fy_year_week_number AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` WHERE SAFE_CAST(fy_year AS INT64) = 2025) - 4
ORDER BY
  fiscal_week_id DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-04-15', 'original_format': '2025-04-15 04:14:20.297382+00', 'context': 'Used as a reference date for calculating day of week and week differences. Appears in multiple nested calculations.', 'suggested_fix': 'Replace with CURRENT_TIMESTAMP() or a dashboard date parameter to allow dynamic reporting.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a baseline date in DATETIME_DIFF calculation for week differences. Appears in multiple nested calculations.', 'suggested_fix': 'Replace with a dynamic fiscal year start date from a calendar dimension table or a parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Daily Telegraph'"", ""'The Herald Sun'"", ""'The Advertiser'"", ""'Courier Mail'"", ""'Weekly Times'"", ""'The Australian'"", ""'The Sportsman'"", ""'Mercury'"", ""'Northern Territory News'"", ""'Geelong Advertiser'"", ""'Cairns Post'"", ""'GCB'"", ""'Townsville Bulletin'"", ""'The Chronicle'"", ""'Daily Mercury'"", ""'Sunshine Coast'""], 'context': 'Publication names are hardcoded in extensive CASE statements for standardization and grouping. This logic is duplicated across queries.', 'suggested_governance': ""Create a `dim_publication` table with `publication_code`, `publication_name`, `standardized_name`, `state_region`, `publication_group` (e.g., '6 Day Pubs', 'PNG'), and join to this dimension."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'CIRCULATION'"", ""'FY2025'"", ""'Free News & Lifestyle'"", ""'Food'"", ""'Prestige'"", ""'DTI Free Copies'"", ""'Retail'"", ""'ALL SALES CHANNELS'"", ""'6 Day Pubs'"", ""'PNG'"", ""'M-F'"", ""'SAT'"", ""'Sun'"", ""'YTD'""], 'context': 'Core business filters and categorization logic are hardcoded directly in WHERE clauses and CASE statements.', 'suggested_governance': ""Externalize these rules into configuration tables or flags within dimension tables. For example, a `dim_channel` table for 'Retail' or a `dim_product_category` for 'Food'/'Prestige'. Fiscal year 'FY2025' should be a parameter."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['0', '1', '2', '3', '4', '5', '6', '7', '9', '10', '12', '26', '40'], 'context': 'Numeric values used in conditional logic (e.g., `relative_fisc_week_number < 0`, `fy_month_of_year < 4`, `week_num_for_calc*2`, `week_num_for_calc*5`, `fy_week_of_year = 26`).', 'suggested_governance': 'Review if these are fixed business rules or configurable thresholds. If configurable, move to a configuration table. If fixed, add comments to explain their business meaning.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates (e.g., '2025-04-15', '2024-07-03') with dashboard date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`)."", 'Replace hardcoded lookup values (e.g., publication names, channel types, publication groups) with joins to governed reference tables (e.g., `dim_publication`, `dim_channel`).', ""Use a dashboard parameter for the fiscal year (e.g., 'FY2025') instead of hardcoding it in the WHERE clause."", 'Externalize complex business rules (e.g., daily volume adjustments based on publication type) into a dedicated business rule table or a more structured dimension table.']",7,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together
WITH
  base_data AS (
    SELECT
      t0.transaction_date, -- Assuming this is the actual transaction date column
      t0.classification_level_1_description,
      t0.classification_level_2_description,
      t0.delivery_medium_type,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.subscriber_has_email_flag,
      t0.subscription_id, -- Assuming this exists for counting subscriptions
      t0.revenue_amount -- Assuming this exists for summing revenue
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    WHERE
      SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) -- Filter for a reasonable date range
  ),
  derived_dimensions AS (
    SELECT
      transaction_date,
      subscription_id,
      revenue_amount,
      -- Derived from transaction_date
      EXTRACT(DAYOFWEEK FROM TIMESTAMP(transaction_date)) - 1 AS day_of_week_num,
      DATETIME_DIFF(SAFE_CAST(transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS fiscal_week_relative_num,
      (classification_level_1_description = 'Standard Paid') AS is_standard_paid,
      (classification_level_2_description = 'The Oz') AS is_the_oz,
      (delivery_medium_type = 'Bundle') AS is_bundle,
      -- Masthead Name (clmn86_ in Q1, clmn83_ in Q2, clmn85_ in Q3)
      CASE
        WHEN (gl_publication_code = '100' OR gl_publication_code = '101' OR masthead_code = 'TA') THEN 'The Australian'
        WHEN (gl_publication_code = '400' OR gl_publication_code = '401' OR gl_publication_code = '402' OR masthead_code = 'CM') THEN 'Courier Mail'
        WHEN (gl_publication_code = '110' OR gl_publication_code = '111' OR gl_publication_code = '116' OR masthead_code = 'DT') THEN 'Daily Telegraph'
        WHEN (gl_publication_code = '301' OR gl_publication_code = '302' OR gl_publication_code = '303' OR masthead_code = 'HS') THEN 'Herald Sun'
        WHEN (gl_publication_code = '500' OR gl_publication_code = '501' OR gl_publication_code = '560' OR masthead_code = 'AA') THEN 'The Advertiser'
        WHEN (gl_publication_code = '450' OR gl_publication_code = '460' OR masthead_code = 'CP') THEN 'Cairns Post'
        WHEN (gl_publication_code = '350' OR gl_publication_code = '351' OR masthead_code = 'GA') THEN 'Geelong'
        WHEN (gl_publication_code = '670' OR gl_publication_code = '685' OR masthead_code = 'GC') THEN 'Gold Coast'
        WHEN (gl_publication_code = '961' OR gl_publication_code = '962' OR gl_publication_code = '963' OR masthead_code = 'NT') THEN 'NT News'
        WHEN (gl_publication_code = '850' OR gl_publication_code = '851' OR gl_publication_code = '852' OR masthead_code = 'TM') THEN 'The Mercury'
        WHEN (gl_publication_code = '5053' OR gl_publication_code = '5253' OR masthead_code = 'TC') THEN 'Toowoomba'
        WHEN (gl_publication_code = '475' OR gl_publication_code = '490' OR masthead_code = 'TB') THEN 'Townsville'
        WHEN (gl_publication_code = '305' OR gl_publication_code = '307' OR masthead_code = 'WT') THEN 'Weekly Times'
        WHEN (gl_publication_code = '9001' OR masthead_code = 'CS') THEN 'Code'
        WHEN (gl_publication_code = '8821' OR gl_publication_code = 'Punters.com.au' OR masthead_code = 'PU') THEN 'Punters'
        WHEN (gl_publication_code = '8822' OR gl_publication_code = 'Racenet' OR masthead_code = 'RN') THEN 'Racenet'
        WHEN (gl_publication_code = '9653' OR masthead_code = 'SC') THEN 'Supercoach Plus'
        WHEN (gl_publication_code = '9600' OR masthead_code = 'TS') THEN 'Taste Online'
        WHEN (gl_publication_code = '9003' OR masthead_code = 'AP') THEN 'Apple Podcast: Crime X'
        WHEN (gl_publication_code = '103' OR masthead_code = 'OZ') THEN 'The Oz'
        WHEN (gl_publication_code = '9000' OR masthead_code = 'NW') THEN 'news.com.au'
        WHEN (gl_publication_code = '121') THEN 'Others'
        WHEN (gl_publication_code = '9002' OR masthead_code = 'BG') THEN 'Brain Games'
        WHEN (gl_publication_code IN ('9504', '9514', '9556', '9558', '9603', '9623', '9560')) THEN 'Others'
        WHEN (gl_publication_code = '9644') THEN 'Suddenly'
        WHEN (gl_publication_code = '9903') THEN 'News Corporate'
        WHEN (gl_publication_code = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
        ELSE 'Unknown Masthead'
      END AS masthead_name,
      -- Recognition Type (clmn88_ in Q1, clmn84_ in Q2, clmn86_ in Q3)
      CASE
        WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition'
        WHEN (subscriber_has_email_flag = 'N') THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS recognition_type,
      -- Masthead Group (clmn127_ in Q1, clmn103_ in Q2, clmn105_ in Q3)
      CASE
        WHEN (masthead_code = 'TA') THEN 'The Australian'
        WHEN (masthead_code IN ('NT', 'DT', 'HS', 'AA', 'CM')) THEN 'Metros'
        WHEN (masthead_code IN ('CP', 'GA', 'GC', 'TM', 'TC', 'TB')) THEN 'Regionals'
        WHEN (masthead_code = 'WT') THEN 'Others'
        WHEN (masthead_code IN ('SC', 'RN', 'PU', 'CS', 'AP', 'TS')) THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS masthead_group,
      -- Fiscal Week String (clmn133_ in Q1)
      CONCAT('FY ', '2025', ' Week ', SAFE_CAST(fiscal_week_relative_num AS STRING), ' (', SAFE_CAST(
        CASE
          WHEN (fiscal_week_relative_num <= 4) THEN 'July'
          WHEN (fiscal_week_relative_num <= 9) THEN 'August'
          WHEN (fiscal_week_relative_num <= 13) THEN 'September'
          WHEN (fiscal_week_relative_num <= 17) THEN 'October'
          WHEN (fiscal_week_relative_num <= 22) THEN 'November'
          WHEN (fiscal_week_relative_num <= 26) THEN 'December'
          WHEN (fiscal_week_relative_num <= 30) THEN 'January'
          WHEN (fiscal_week_relative_num <= 35) THEN 'February'
          WHEN (fiscal_week_relative_num <= 39) THEN 'March'
          WHEN (fiscal_week_relative_num <= 43) THEN 'April'
          WHEN (fiscal_week_relative_num <= 48) THEN 'May'
          WHEN (fiscal_week_relative_num <= 53) THEN 'June'
          ELSE NULL
        END AS STRING
      ), ')') AS fiscal_year_week_string,
      -- Hardcoded scenario/metric types (from Q2 and Q3)
      'FCT' AS period_type_scenario,
      'Gross Cancellations' AS metric_type_scenario_gross_cancellations,
      'Gross Acquisitions' AS metric_type_scenario_gross_acquisitions
    FROM
      base_data
  )
SELECT
  SAFE_CAST(transaction_date AS DATE) AS transaction_date,
  fiscal_year_week_string,
  masthead_name,
  masthead_group,
  recognition_type,
  period_type_scenario,
  metric_type_scenario_gross_cancellations,
  metric_type_scenario_gross_acquisitions,
  COUNT(DISTINCT subscription_id) AS digital_subscription_count,
  SUM(SAFE_CAST(revenue_amount AS NUMERIC)) AS digital_subscription_revenue
FROM
  derived_dimensions
WHERE
  recognition_type = 'Digital Recognition'
  AND masthead_group != 'Discontinued'
GROUP BY
  SAFE_CAST(transaction_date AS DATE),
  fiscal_year_week_string,
  masthead_name,
  masthead_group,
  recognition_type,
  period_type_scenario,
  metric_type_scenario_gross_cancellations,
  metric_type_scenario_gross_acquisitions
ORDER BY
  transaction_date DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.transaction_date AS DATE)) AS unique_transaction_dates,
  COUNT(DISTINCT t0.subscription_id) AS unique_subscriptions,
  COUNT(DISTINCT t0.gl_publication_code) AS unique_publication_codes,
  COUNT(DISTINCT t0.masthead_code) AS unique_masthead_codes,
  MIN(SAFE_CAST(t0.transaction_date AS DATE)) AS earliest_transaction_date,
  MAX(SAFE_CAST(t0.transaction_date AS DATE)) AS latest_transaction_date,
  APPROX_COUNT_DISTINCT(t0.subscription_id) AS approx_unique_subscription_ids,
  SUM(CASE WHEN t0.revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_revenue_count,
  SUM(CASE WHEN t0.delivery_medium_type IS NULL THEN 1 ELSE 0 END) AS null_delivery_medium_type_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE
  SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(CASE WHEN derived.recognition_type = 'Digital Recognition' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS digital_recognition_records_test,
  CASE WHEN SUM(CASE WHEN derived.masthead_group = 'Metros' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS metros_group_records_test,
  CASE WHEN MAX(SAFE_CAST(derived.transaction_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(DISTINCT derived.fiscal_year_week_string) > 0 THEN 'PASS' ELSE 'FAIL' END AS fiscal_week_string_generation_test
FROM
  (
    SELECT
      t0.transaction_date,
      t0.delivery_medium_type,
      t0.subscriber_has_email_flag,
      t0.gl_publication_code,
      t0.masthead_code,
      EXTRACT(DAYOFWEEK FROM TIMESTAMP(t0.transaction_date)) - 1 AS day_of_week_num,
      DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS fiscal_week_relative_num,
      CASE
        WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition'
        WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS recognition_type,
      CASE
        WHEN (t0.masthead_code = 'TA') THEN 'The Australian'
        WHEN (t0.masthead_code IN ('NT', 'DT', 'HS', 'AA', 'CM')) THEN 'Metros'
        WHEN (t0.masthead_code IN ('CP', 'GA', 'GC', 'TM', 'TC', 'TB')) THEN 'Regionals'
        WHEN (t0.masthead_code = 'WT') THEN 'Others'
        WHEN (t0.masthead_code IN ('SC', 'RN', 'PU', 'CS', 'AP', 'TS')) THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS masthead_group,
      CONCAT('FY ', '2025', ' Week ', SAFE_CAST(DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS STRING), ' (', SAFE_CAST(
        CASE
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 4) THEN 'July'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 9) THEN 'August'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 13) THEN 'September'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 17) THEN 'October'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 22) THEN 'November'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 26) THEN 'December'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 30) THEN 'January'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 35) THEN 'February'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 39) THEN 'March'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 43) THEN 'April'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 48) THEN 'May'
          WHEN (DATETIME_DIFF(SAFE_CAST(t0.transaction_date AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) <= 53) THEN 'June'
          ELSE NULL
        END AS STRING
      ), ')') AS fiscal_year_week_string
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    WHERE
      SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
  ) AS derived
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Digital Recognition Rule' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN derived.recognition_type = 'Digital Recognition' THEN 1 ELSE 0 END) AS digital_recognition_records,
  SUM(CASE WHEN derived.recognition_type = 'Print Recognition' THEN 1 ELSE 0 END) AS print_recognition_records,
  SAFE_DIVIDE(SUM(CASE WHEN derived.recognition_type = 'Digital Recognition' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS digital_recognition_percentage,
  'Masthead Grouping Rule' AS rule_name_2,
  SUM(CASE WHEN derived.masthead_group = 'Metros' THEN 1 ELSE 0 END) AS metros_records,
  SUM(CASE WHEN derived.masthead_group = 'Regionals' THEN 1 ELSE 0 END) AS regionals_records,
  SUM(CASE WHEN derived.masthead_group = 'Discontinued' THEN 1 ELSE 0 END) AS discontinued_records
FROM
  (
    SELECT
      t0.delivery_medium_type,
      t0.subscriber_has_email_flag,
      t0.masthead_code,
      CASE
        WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition'
        WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS recognition_type,
      CASE
        WHEN (t0.masthead_code = 'TA') THEN 'The Australian'
        WHEN (t0.masthead_code IN ('NT', 'DT', 'HS', 'AA', 'CM')) THEN 'Metros'
        WHEN (t0.masthead_code IN ('CP', 'GA', 'GC', 'TM', 'TC', 'TB')) THEN 'Regionals'
        WHEN (t0.masthead_code = 'WT') THEN 'Others'
        WHEN (t0.masthead_code IN ('SC', 'RN', 'PU', 'CS', 'AP', 'TS')) THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS masthead_group
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    WHERE
      SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  ) AS derived;","SELECT
  SAFE_CAST(t0.transaction_date AS DATE) AS transaction_date,
  t0.classification_level_1_description,
  t0.classification_level_2_description,
  t0.delivery_medium_type,
  t0.gl_publication_code,
  t0.masthead_code,
  t0.subscriber_has_email_flag,
  t0.subscription_id,
  SAFE_CAST(t0.revenue_amount AS NUMERIC) AS revenue_amount
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE
  SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND t0.subscription_id IS NOT NULL
ORDER BY
  SAFE_CAST(t0.transaction_date AS DATE) DESC, SAFE_CAST(t0.revenue_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-03-23', 'original_format': '2025-03-23 04:54:02.058726+00', 'context': 'Used as a fixed snapshot date for fiscal week calculations in Query 1. This implies a static report.', 'suggested_fix': 'Replace with a dynamic date (e.g., CURRENT_DATE()) or a Looker Studio date parameter to allow for flexible reporting periods.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as the baseline date for calculating fiscal week numbers (DATETIME_DIFF).', 'suggested_fix': 'Parameterize the fiscal year start date or derive it from a fiscal calendar table.', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '2025', 'original_format': ""'2025'"", 'context': ""Hardcoded fiscal year in the 'FY YYYY Week WW (Month Name)' string."", 'suggested_fix': 'Derive the fiscal year dynamically from the transaction date or a fiscal calendar table.', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'a' = 'a'"", '0 = 0', '1 = 1', '2 = 1', '2 = 2', '2 = 3', '2 = 4'], 'context': 'Redundant or hardcoded conditions used for scenario selection or simple pass-through logic.', 'suggested_governance': 'Remove redundant conditions. For scenario selection, use parameters or a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'All Mastheads'"", ""'Digital Recognition'"", ""'Print Recognition'"", ""'The Australian'"", ""'Metros'"", ""'Regionals'"", ""'Others'"", ""'Deep Niche Publications'"", ""'Discontinued'"", ""'The Australian and Prestige'"", ""'States & Community'"", ""'Commercial Content'"", ""'Free & Lifestyle'""], 'context': 'Categorical values for masthead groups, recognition types, and masthead categories are hardcoded within CASE statements.', 'suggested_governance': 'Create and join to a `masthead_lookup` or `category_master` table. This centralizes definitions and simplifies updates.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""specific gl_publication_code numbers (e.g., '100', '400', '301')"", ""specific masthead_code abbreviations (e.g., 'TA', 'CM', 'DT', 'HS')"", ""'Standard Paid'"", ""'The Oz'"", ""'Bundle'"", ""'subsnapfact'"", ""'Y'"", ""'N'""], 'context': 'Direct comparison of raw `gl_publication_code`, `masthead_code`, and other flags to derive human-readable masthead names and recognition types.', 'suggested_governance': 'Implement a `masthead_dimension` table that maps these codes to their descriptive names and categories. Join to this table instead of using complex CASE statements.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'scenario_types', 'hardcoded_values': [""'BUD'"", ""'FCT'"", ""'YOY'"", ""'BUD NY'"", ""'Gross Cancellations'"", ""'Net Cancellations'"", ""'Gross Acquisitions'"", ""'Net Acquisitions'""], 'context': 'Hardcoded strings representing period types (e.g., Forecast, Budget) and metric types (e.g., Gross Cancellations, Gross Acquisitions). These are used as labels or filters.', 'suggested_governance': 'Define these scenarios/metric types in a configuration table or use Looker Studio parameters to allow dynamic selection and management.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB`) to enable dynamic date range selection.', 'Replace hardcoded lookup values (e.g., masthead codes, publication codes, category names) with joins to governed reference tables. This centralizes data definitions and simplifies maintenance.', 'Externalize complex business rules (e.g., mapping fiscal weeks to months, or masthead codes to groups) into dedicated configuration tables or UDFs (User-Defined Functions) for better readability and maintainability.', ""Utilize Looker Studio parameters for scenario selection (e.g., 'FCT', 'BUD') and metric type selection ('Gross Acquisitions', 'Net Cancellations') instead of hardcoding them in queries.""]",8,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
"-- This query calculates the total net revenue by reporting month, source, advertiser, buyer, and transaction type, incorporating all common transformations and filters found in the provided queries.
-- It aims to provide a consolidated view of the core data used in the dashboard.

WITH base_data AS (
    SELECT
        t0.advertiser,
        t0.buyer,
        t0.financialmonthnumber,
        t0.financialquarter,
        t0.financialyear,
        t0.revenuenet,
        t0.source,
        t0.source_transactiontype,
        -- Derived columns as seen in the original queries
        DATE(t0.financialyear, t0.financialmonthnumber, 1) AS financial_month_start_date_raw
    FROM
        `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
    WHERE
        -- Apply a general date filter to limit data processed, assuming recent data is most relevant
        SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
),
transformed_data AS (
    SELECT
        advertiser,
        buyer,
        financialmonthnumber,
        financialquarter,
        financialyear,
        revenuenet,
        source,
        source_transactiontype,
        financial_month_start_date_raw,
        SUBSTR(SAFE_CAST(financialyear AS STRING), 3, 2) AS financial_year_short,
        UPPER(SAFE_CAST(source_transactiontype AS STRING)) AS transaction_type_upper,
        DATETIME_SUB(SAFE_CAST(financial_month_start_date_raw AS DATETIME), INTERVAL 6 MONTH) AS adjusted_date
    FROM
        base_data
),
final_data AS (
    SELECT
        advertiser,
        buyer,
        financialmonthnumber,
        financialquarter,
        financialyear,
        revenuenet,
        source,
        source_transactiontype,
        financial_month_start_date_raw,
        financial_year_short,
        transaction_type_upper,
        adjusted_date,
        CONCAT('FY', financial_year_short, ' ', SAFE_CAST(financialquarter AS STRING)) AS fiscal_year_quarter_label,
        SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(adjusted_date) AS DATETIME), MONTH) AS DATE) AS reporting_month
    FROM
        transformed_data
)
SELECT
    reporting_month,
    advertiser,
    buyer,
    source,
    transaction_type_upper,
    fiscal_year_quarter_label,
    SUM(SAFE_CAST(revenuenet AS NUMERIC)) AS total_revenue_net
FROM
    final_data
WHERE
    -- Combined filters from all queries. Note: The original query 1 had two 'source' filters, the second being a subset.
    -- The effective filter is the intersection, which is the narrower set: ('DFP', 'Index Exchange', 'Rubicon').
    -- Filters are made optional with 'OR <column> IS NULL' for a more flexible consolidated query.
    (source IN ('DFP', 'Index Exchange', 'Rubicon') OR source IS NULL)
    AND (transaction_type_upper IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT') OR transaction_type_upper IS NULL)
    AND (advertiser IN ('The Smith Family *', 'Kmart Corporation *', 'Target Corporation *', 'Myer *') OR advertiser IS NULL)
    AND (fiscal_year_quarter_label IN ('FY25 Q2', 'FY25 Q3', 'FY25 Q4') OR fiscal_year_quarter_label IS NULL)
    AND (reporting_month IN (DATE '2024-11-01', DATE '2024-12-01', DATE '2025-01-01', DATE '2025-02-01', DATE '2025-03-01', DATE '2025-04-01', DATE '2025-05-01', DATE '2025-06-01') OR reporting_month IS NULL)
GROUP BY
    reporting_month,
    advertiser,
    buyer,
    source,
    transaction_type_upper,
    fiscal_year_quarter_label
ORDER BY
    reporting_month DESC
LIMIT 1000;
","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.financialyear AS STRING) || '-' || SAFE_CAST(t0.financialmonthnumber AS STRING)) as unique_financial_months,
  COUNT(DISTINCT t0.advertiser) as unique_advertisers,
  COUNT(DISTINCT t0.buyer) as unique_buyers,
  COUNT(DISTINCT t0.source) as unique_sources,
  COUNT(DISTINCT t0.source_transactiontype) as unique_transaction_types,
  MIN(DATE(t0.financialyear, t0.financialmonthnumber, 1)) as earliest_financial_month_start,
  MAX(DATE(t0.financialyear, t0.financialmonthnumber, 1)) as latest_financial_month_start,
  SUM(CASE WHEN t0.revenuenet IS NULL THEN 1 ELSE 0 END) as null_revenuenet_count
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
  -- Sample recent data for structure analysis
  DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1000;
","-- Quick validation that all metric calculations work syntactically and data is present
WITH transformed_data AS (
    SELECT
        t0.advertiser,
        t0.buyer,
        t0.financialmonthnumber,
        t0.financialquarter,
        t0.financialyear,
        t0.revenuenet,
        t0.source,
        t0.source_transactiontype,
        DATE(t0.financialyear, t0.financialmonthnumber, 1) AS financial_month_start_date_raw,
        UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS transaction_type_upper,
        DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH) AS adjusted_date
    FROM
        `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
    WHERE
        DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
)
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(revenuenet AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_calculation_test,
  CASE WHEN COUNT(DISTINCT advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_dimension_test,
  CASE WHEN COUNT(DISTINCT buyer) > 0 THEN 'PASS' ELSE 'FAIL' END as buyer_dimension_test,
  CASE WHEN MAX(SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(adjusted_date) AS DATETIME), MONTH) AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 MONTH) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN transaction_type_upper IN ('DEAL', 'UFR') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_type_filter_test
FROM
  transformed_data
LIMIT 1;
","-- Query to validate key business logic, filters, and data quality
WITH transformed_data AS (
    SELECT
        t0.advertiser,
        t0.source,
        t0.source_transactiontype,
        UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS transaction_type_upper,
        CONCAT('FY', SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2), ' ', SAFE_CAST(t0.financialquarter AS STRING)) AS fiscal_year_quarter_label
    FROM
        `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
    WHERE
        DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
)
SELECT
  'Business Rule Validation' as validation_type,
  'transaction_type_coverage' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN transaction_type_upper IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT') THEN 1 ELSE 0 END) as records_matching_transaction_types,
  SAFE_DIVIDE(SUM(CASE WHEN transaction_type_upper IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT') THEN 1 ELSE 0 END), COUNT(*)) * 100 as transaction_type_match_percentage,
  'source_filter_coverage' as rule_name_2,
  SUM(CASE WHEN source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor') THEN 1 ELSE 0 END) as records_matching_sources,
  SAFE_DIVIDE(SUM(CASE WHEN source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor') THEN 1 ELSE 0 END), COUNT(*)) * 100 as source_match_percentage,
  'advertiser_wildcard_check' as rule_name_3,
  SUM(CASE WHEN advertiser LIKE '% *' THEN 1 ELSE 0 END) as advertisers_with_wildcard_pattern -- Check if '*' is actually part of the name
FROM
  transformed_data
LIMIT 1;
","-- Query to get representative sample data for further analysis, including all raw and key derived columns
SELECT
  t0.advertiser,
  t0.buyer,
  t0.financialmonthnumber,
  t0.financialquarter,
  t0.financialyear,
  SAFE_CAST(t0.revenuenet AS NUMERIC) AS revenuenet,
  t0.source,
  t0.source_transactiontype,
  DATE(t0.financialyear, t0.financialmonthnumber, 1) AS financial_month_start_date_raw,
  SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2) AS financial_year_short,
  UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS transaction_type_upper,
  DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH) AS adjusted_date,
  CONCAT('FY', SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2), ' ', SAFE_CAST(t0.financialquarter AS STRING)) AS fiscal_year_quarter_label,
  SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH) AS DATETIME), MONTH) AS DATE) AS reporting_month
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
  -- Sample recent data with non-null revenue
  DATE(t0.financialyear, t0.financialmonthnumber, 1) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
  AND t0.revenuenet IS NOT NULL
ORDER BY
  reporting_month DESC,
  revenuenet DESC
LIMIT 500;
","{'hardcoded_dates': [{'date_value': '2024-11-01', 'original_format': ""DATE '2024-11-01'"", 'context': 'Specific reporting month filter in query 1', 'suggested_fix': 'replace with date parameters (e.g., start_date, end_date) or relative date functions (e.g., DATE_TRUNC(CURRENT_DATE(), MONTH))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-01', 'original_format': ""DATE '2025-06-01'"", 'context': 'Specific reporting month filter in query 1', 'suggested_fix': 'replace with date parameters (e.g., start_date, end_date) or relative date functions (e.g., DATE_TRUNC(CURRENT_DATE(), MONTH))', 'impact': 'high', 'urgency': 'high'}, {'date_value': 'FY25 Q2', 'original_format': ""'FY25 Q2'"", 'context': 'Specific fiscal year quarter filter in query 1, 2, 3', 'suggested_fix': 'replace with parameters or derive dynamically based on current date and fiscal year logic', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'AdX'"", ""'AppNexus'"", ""'DFP'"", ""'Index Exchange'"", ""'InSkin'"", ""'Kargo'"", ""'Playground XYZ'"", ""'PubMatic'"", ""'Rubicon'"", ""'Tremor'""], 'context': 'Source platform filter in query 1 (broad set)', 'suggested_governance': 'join to a `source_platform_lookup` reference table', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'DFP'"", ""'Index Exchange'"", ""'Rubicon'""], 'context': 'Source platform filter in query 1 (narrower set, effectively the active filter)', 'suggested_governance': 'join to a `source_platform_lookup` reference table', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'DEAL'"", ""'UFR'"", ""'PG - CPD'"", ""'PG - CPM'"", ""'DIRECT'""], 'context': 'Transaction type filter in all queries', 'suggested_governance': 'join to a `transaction_type_lookup` reference table', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Smith Family *'"", ""'Kmart Corporation *'"", ""'Target Corporation *'"", ""'Myer *'""], 'context': ""Advertiser name filter in all queries. The '*' suggests a potential misunderstanding of `IN` vs `LIKE`."", 'suggested_governance': 'join to an `advertiser_master` table. If wildcard matching is intended, use `LIKE` operator.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters (e.g., `start_date`, `end_date`) or relative date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL X MONTH)`).', ""Replace hardcoded lookup values for 'source', 'transaction_type', and 'advertiser' with joins to governed reference tables. This allows for centralized management and avoids dashboard breakage when values change."", 'Consider using a configuration table for fiscal year definitions if the 6-month offset is not standard or might change.']",9,783f341c-8660-4e90-bab8-9bc860119cf5
"-- THIS IS THE MAIN SQL TO RUN --
-- This query consolidates all identified metrics and dimensions from the provided SQL samples.
-- It applies common filters and groupings to provide a unified view of the 'Team Sales Performance' dashboard data.
-- Note: The hardcoded date '2025-01-02' from the original query is retained for exact replication of the logic, but highlighted as a governance issue.

WITH SFCE_USER AS (
  SELECT
    UPPER(network_user_name) AS login_name,
    UPPER(user_name) AS full_name
  FROM
    `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
  WHERE
    dw_source_system_code = 'SFCE'
  QUALIFY ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) = 1
),
CTE2 AS (
  SELECT
    unified_publication_name,
    unified_publication_gl_code,
    fy_year_month_number,
    financial_year,
    financial_quarter,
    financial_month,
    financial_short_month,
    financial_week,
    revenue_transaction_status,
    is_print_digital_flag,
    current_financial_month,
    current_financial_week,
    fy_year_week_number,
    style_name,
    UPPER(fin_adtype_name) AS fin_adtype_name,
    CASE
      WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
      ELSE 'Client'
    END AS Sales_Group,
    EXTRACT(DAYOFWEEK FROM CURRENT_DATE()) AS DOW_Today,
    sales_segment_l_1_name,
    sales_segment_l_2_name,
    sales_segment_l_1_name_sync,
    sales_segment_l_2_name_sync,
    fy_quarter_of_year_name,
    relative_fy_year_offset,
    relative_fy_quarter_offset,
    relative_fy_month_offset,
    relative_fy_week_offset,
    advertiser_group,
    advertiser_parent,
    SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
    sales_segment_gm_name,
    CASE
      WHEN UPPER(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW',
        'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
      ELSE sales_segment_gm_name_sync
    END AS sales_segment_gm_name_sync,
    revenue_group_level_1_name,
    revenue_group_level_2_name,
    SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
    SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
    SUM(IFNULL(pipeline, 0)) AS pipeline,
    SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
    UPPER(revenue_type) AS revenue_type,
    UPPER(revenue_group_subtype) AS revenue_group_subtype,
    current_portfolio_group_owner_sync,
    portfolio_group_name_sync,
    portfolio_group_name_current,
    portfolio_parent_group_name_sync,
    nca_industry_pillar,
    publishing_division_group,
    publishing_division_parent,
    is_future_period_flag,
    ly_is_future_period_flag,
    ny_is_future_period_flag,
    cost_model_type,
    CASE
      WHEN source_system_code = 'PLUTO' THEN NULL
      ELSE booking_line_created_date
    END AS booking_line_created_date,
    advertiser_name,
    current_portfolio_conformed_owner_sync,
    portfolio_conformed_name_sync,
    publishing_division,
    booking_line_created_week,
    booking_line_created_month,
    booking_line_created_short_month,
    booking_line_created_quarter,
    booking_line_created_year,
    agency_parent,
    agency_group,
    agency_name,
    agency_number,
    calendar_month_name,
    calendar_year,
    classification_name,
    SUM(IFNULL(target, 0)) AS target,
    IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
    LEFT JOIN
    SFCE_USER AS GSD_JOIN
    ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
  WHERE
    relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED',
      'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division,
        'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
    (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
  GROUP BY
    unified_publication_name, unified_publication_gl_code, fy_year_month_number, financial_year, financial_quarter,
    financial_month, financial_short_month, financial_week, revenue_transaction_status, is_print_digital_flag,
    current_financial_month, current_financial_week, fy_year_week_number, style_name, fin_adtype_name, Sales_Group,
    DOW_Today, sales_segment_l_1_name, sales_segment_l_2_name, sales_segment_l_1_name_sync, sales_segment_l_2_name_sync,
    fy_quarter_of_year_name, relative_fy_year_offset, relative_fy_quarter_offset, relative_fy_month_offset,
    relative_fy_week_offset, advertiser_group, advertiser_parent, sales_segment_gm_name, sales_segment_gm_name_sync,
    revenue_group_level_1_name, revenue_group_level_2_name, revenue_type, revenue_group_subtype,
    current_portfolio_group_owner_sync, portfolio_group_name_sync, portfolio_group_name_current,
    portfolio_parent_group_name_sync, nca_industry_pillar, publishing_division_group, publishing_division_parent,
    is_future_period_flag, ly_is_future_period_flag, ny_is_future_period_flag, cost_model_type, booking_line_created_date,
    advertiser_name, current_portfolio_conformed_owner_sync, portfolio_conformed_name_sync, publishing_division,
    booking_line_created_week, booking_line_created_month, booking_line_created_short_month, booking_line_created_quarter,
    booking_line_created_year, agency_parent, agency_group, agency_name, agency_number, calendar_month_name,
    calendar_year, classification_name, GSD
),
final_data AS (
  SELECT
    *,
    MIN(
      CASE
        WHEN advertiser_parent = ""DOUBLECLICK"" THEN SAFE_CAST(booking_line_created_date AS DATE)
      END) OVER (PARTITION BY financial_year) AS fix_date_lod
  FROM
    CTE2
)
SELECT
  -- Dimensions
  fd.Sales_Group,
  fd.advertiser_parent,
  CASE WHEN fd.fin_adtype_name = 'XTEND' THEN 'XTEND' ELSE fd.revenue_type END AS fin_adtype_revenue_type_derived,
  fd.financial_year,
  fd.financial_quarter,
  fd.financial_month,
  fd.financial_short_month,
  fd.financial_week,
  fd.relative_fy_year_offset,
  fd.GSD,
  SAFE_CAST(fd.booking_line_created_date AS DATE) AS booking_created_date,
  SAFE_CAST(fd.fix_date_lod AS DATE) AS fix_date_lod_calculated,

  -- Metrics
  SUM(fd.gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(CASE WHEN fd.relative_fy_year_offset = -1 THEN fd.gross_revenue_amount ELSE 0 END) AS ly_gross_revenue_amount,
  SUM(CASE WHEN fd.relative_fy_year_offset = 0 THEN fd.gross_revenue_amount ELSE 0 END) AS cy_gross_revenue_amount,
  SUM(CASE WHEN fd.relative_fy_year_offset = -1 THEN fd.gross_revenue_amount ELSE 0 END) / 1000 AS ly_gross_revenue_amount_k,
  SUM(CASE WHEN fd.relative_fy_year_offset = 0 THEN fd.gross_revenue_amount ELSE 0 END) / 1000 AS cy_gross_revenue_amount_k,
  MAX(CASE WHEN fd.relative_fy_year_offset = -1 THEN fd.gross_revenue_amount ELSE 0 END) AS max_ly_gross_revenue_amount,

  -- Specific conditional metric from Query 1 (clmn31_/clmn32_ equivalent)
  SUM(
    CASE
      WHEN fd.relative_fy_year_offset = -1
      AND (
        CASE
          WHEN fd.revenue_type = 'DIGITAL'
          AND fd.revenue_group_subtype = 'DIGITAL'
          AND fd.sales_segment_l_2_name_sync = 'Digital Other'
          AND fd.advertiser_parent != 'DOUBLECLICK' THEN SAFE_CAST(fd.fix_date_lod AS DATETIME)
          ELSE SAFE_CAST(PARSE_DATE('%Y-%m-%d', fd.booking_line_created_date) AS DATETIME)
        END
      ) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-01-02 01:26:03.721975+00', 'UTC') AS DATETIME), INTERVAL -365 DAY)
      THEN fd.gross_revenue_amount
      ELSE 0
    END
  ) AS ly_gross_revenue_amount_conditional_date,

  SUM(fd.adjustment_amount) AS total_adjustment_amount,
  SUM(fd.pub_lgb) AS total_pub_lgb,
  SUM(fd.ss_lgb) AS total_ss_lgb,
  SUM(fd.pipeline) AS total_pipeline,
  SUM(fd.target) AS total_target

FROM
  final_data AS fd
WHERE
  fd.Sales_Group = 'Client' -- Filter applied in Query 1
GROUP BY
  fd.Sales_Group,
  fd.advertiser_parent,
  fin_adtype_revenue_type_derived,
  fd.financial_year,
  fd.financial_quarter,
  fd.financial_month,
  fd.financial_short_month,
  fd.financial_week,
  fd.relative_fy_year_offset,
  fd.GSD,
  booking_created_date,
  fix_date_lod_calculated
ORDER BY
  fd.financial_year DESC, fd.financial_month DESC
LIMIT 10000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(booking_line_created_date AS DATE)) AS unique_booking_dates,
  COUNT(DISTINCT advertiser_parent) AS unique_advertiser_parents,
  COUNT(DISTINCT Sales_Group) AS unique_sales_groups,
  COUNT(DISTINCT financial_year) AS unique_financial_years,
  MIN(SAFE_CAST(booking_line_created_date AS DATE)) AS earliest_booking_date,
  MAX(SAFE_CAST(booking_line_created_date AS DATE)) AS latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(booking_line_created_date AS STRING), advertiser_parent, Sales_Group)) AS approx_unique_combinations
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 * 2 DAY) -- Look back 2 years for relevant data
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS gross_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_parent) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_parent_test,
  CASE WHEN MAX(SAFE_CAST(booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(CASE WHEN UPPER(SAFE_CAST(revenue_transaction_status AS STRING)) IN ('BILLED', 'BOOKED') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_status_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Revenue Transaction Status Filter' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'Sales Group Client Filter' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN (CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END) = 'Client' THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END) = 'Client' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  SAFE_CAST(booking_line_created_date AS DATE) AS booking_date,
  advertiser_parent,
  gross_revenue_amount,
  relative_fy_year_offset,
  revenue_transaction_status,
  style_name,
  fin_adtype_name,
  revenue_type,
  sales_segment_l_2_name_sync,
  IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
  LEFT JOIN (
    SELECT
      UPPER(network_user_name) AS login_name,
      UPPER(user_name) AS full_name
    FROM
      `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
    WHERE
      dw_source_system_code = 'SFCE'
    QUALIFY ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) = 1
  ) AS GSD_JOIN
  ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(booking_line_created_date AS DATE) DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-01-02', 'original_format': '2025-01-02 01:26:03.721975+00', 'context': 'Used as a fixed reference point for date calculations (clmn0_ in query 1).', 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard parameter for dynamic reporting.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'BILLED'"", ""'BOOKED'""], 'context': 'Revenue transaction statuses used for filtering.', 'suggested_governance': 'Manage valid statuses in a reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'""], 'context': 'Specific style names and publishing divisions excluded from analysis.', 'suggested_governance': 'Manage exclusion lists in a configuration table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'""], 'context': 'Complex logic for publication names and associated account numbers.', 'suggested_governance': 'Define these exceptions in a dedicated business rule table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'MRCA'"", ""'Client'""], 'context': 'Categorization of Sales_Group.', 'suggested_governance': 'If these are fixed, they can remain; otherwise, consider a lookup.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'XTEND'""], 'context': 'Specific value used in `fin_adtype_name` derivation.', 'suggested_governance': 'If this is a dynamic category, manage in a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'CONSORTIUM NSW'"", ""'KEY ACCOUNTS NSW RETAIL'"", ""'DIRECT NSW'"", ""'INDEPENDENT AGENCIES NSW'"", ""'PRESTIGE'""], 'context': ""Specific sales segments mapped to 'Ian Paterson'."", 'suggested_governance': 'Manage GM assignments in a dedicated mapping table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'conditional_logic', 'hardcoded_values': [""'$' = '$'"", ""'$\\'000' = '$'"", ""'1' = '1'"", ""'1' = '2'"", ""'1' = '3'""], 'context': 'Redundant or always true/false conditions in CASE statements, indicating potential legacy or unused logic.', 'suggested_governance': 'Refactor queries to remove these redundant conditions for clarity and efficiency.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates (e.g., '2025-01-02') with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`)."", 'Replace hardcoded lookup values (e.g., revenue statuses, style names, publication exceptions) with joins to governed reference tables or dashboard parameters.', 'Use configuration tables for complex business rules (e.g., GM assignments, publication exceptions) instead of embedding them directly in SQL logic.']",10,1a5f7b4e-ea3a-46e4-8b77-b428f4178510
"WITH base_adsales_data AS (
  SELECT
    t0.financial_year,
    t0.financial_week,
    t0.revenue_group_subtype,
    -- Assuming 'revenue' is the primary metric for a Pacing Report
    SAFE_CAST(t0.revenue AS NUMERIC) AS revenue_amount
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE
    -- Filter from job_BUjTW7YGaSH0alMHKZZXNmosCioO (revenue_group_subtype filter)
    (t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' OR TRUE) -- Apply if specific filter is needed, otherwise TRUE for all
    AND
    -- Filter from job_Dq3y_fZwu5Vvm8AyidX7IeOMTGjP (financial_year filter)
    (SAFE_CAST(t0.financial_year AS STRING) = '2025' OR TRUE) -- Apply if specific filter is needed, otherwise TRUE for all
    AND
    -- Filters from job_kBhca8c_b2djBMHH3ux3prckr1Hr (financial_year and financial_week filters)
    (SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2024'))
    AND
    (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR t0.financial_week IS NULL)
)
SELECT
  financial_year,
  financial_week,
  revenue_group_subtype,
  SUM(revenue_amount) AS total_adsales_revenue,
  COUNT(*) AS record_count
FROM base_adsales_data
WHERE revenue_amount IS NOT NULL -- Ensure we only sum valid revenue figures
GROUP BY
  financial_year,
  financial_week,
  revenue_group_subtype
ORDER BY
  financial_year DESC,
  financial_week DESC
LIMIT 1000;
","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(financial_week AS INT64)) as unique_financial_weeks,
  COUNT(DISTINCT revenue_group_subtype) as unique_revenue_subtypes,
  MIN(SAFE_CAST(financial_year AS STRING)) as earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) as latest_financial_year,
  MIN(SAFE_CAST(financial_week AS INT64)) as earliest_financial_week,
  MAX(SAFE_CAST(financial_week AS INT64)) as latest_financial_week,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(financial_year AS STRING), '-', SAFE_CAST(financial_week AS STRING), '-', revenue_group_subtype)) as approx_unique_grain_combinations
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025') -- Focus on relevant years for structure analysis
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_presence_test,
  CASE WHEN SUM(CASE WHEN SAFE_CAST(financial_year AS STRING) = '2025' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as year_2025_data_test,
  CASE WHEN SUM(CASE WHEN revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as sundry_adsales_overlay_data_test,
  CASE WHEN SUM(CASE WHEN SAFE_CAST(financial_week AS INT64) IN (47, 48, 49, 50, 51, 52) THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_week_exclusion_data_test_presence
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025')
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'financial_week_exclusion_rule' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN SAFE_CAST(financial_week AS INT64) IN (47, 48, 49, 50, 51, 52) THEN 1 ELSE 0 END) as records_in_excluded_weeks,
  SUM(CASE WHEN SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR financial_week IS NULL THEN 1 ELSE 0 END) as records_passing_exclusion_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR financial_week IS NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025');","SELECT
  SAFE_CAST(financial_year AS STRING) as financial_year,
  SAFE_CAST(financial_week AS INT64) as financial_week,
  revenue_group_subtype,
  SAFE_CAST(revenue AS NUMERIC) as revenue_amount -- Assuming 'revenue' column exists
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025')
ORDER BY financial_year DESC, financial_week DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'SUNDRY ADSALES OVERLAY'""], 'context': 'Specific revenue group subtype used as a filter.', 'suggested_governance': 'Replace with a parameter or join to a `revenue_group_subtype_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'2025'"", ""'2024'""], 'context': 'Specific financial years used as filters.', 'suggested_governance': 'Replace with dynamic calculations (e.g., `CURRENT_FINANCIAL_YEAR`, `PREVIOUS_FINANCIAL_YEAR`) or dashboard parameters.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['47', '48', '49', '50', '51', '52'], 'context': 'Specific financial weeks excluded from analysis (likely end-of-year/holiday weeks).', 'suggested_governance': 'Define these weeks in a configuration table or derive them dynamically based on a financial calendar.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded financial years with dynamic calculations (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` for current year, or Looker Studio date parameters).', 'Replace hardcoded `revenue_group_subtype` values with dashboard parameters or values from a governed lookup table.', 'Replace hardcoded financial week exclusion lists with a configuration table or a derived list based on a financial calendar definition.']",11,3ee20092-1897-49b7-8bcd-4157d5f816eb
"DECLARE reporting_mth INT64 DEFAULT 0; -- Default to 0 for dynamic month selection (current month or -12)
DECLARE customer_retention_type STRING DEFAULT '0'; -- Default to '0' for detailed customer status, '1' for 'All'

WITH base_data AS (
  WITH CTE AS (
    SELECT
      *,
      CASE
        WHEN reporting_mth = 0 THEN
        CASE
          WHEN relative_fy_month_offset = 0 OR relative_fy_month_offset = -12 THEN SAFE_CAST(financial_month AS INT64)
        END
        ELSE reporting_mth
      END AS filter_reporting_month,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
  )
  SELECT
    t0.GSD,
    t0.advertiser_group,
    t0.portfolio_conformed_name_sync,
    t0.product_group,
    t0.fin_adtype_name,
    t0.revenue_type,
    t0.sales_segment_gm_name_sync,
    t0.gross_revenue_amount,
    t0.target,
    t0.relative_fy_year_offset,
    t0.relative_fy_quarter_offset,
    t0.financial_month,
    t0.financial_quarter,
    MAX(
      CASE
        WHEN filter_reporting_month = SAFE_CAST(financial_month AS INT64) THEN financial_quarter
        WHEN reporting_mth = 0 THEN IF(relative_fy_quarter_offset = 0, financial_quarter, null)
        ELSE NULL
      END) OVER (PARTITION BY filter_reporting_month) AS report_quarter,
    CASE
      WHEN customer_retention_type = '1' THEN 'All'
      ELSE
      CASE
        WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
        WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
        WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
        WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
        ELSE 'Other'
      END
    END AS customer_status_full,
    CASE
      WHEN SUM(SAFE_DIVIDE(gross_revenue_amount, 1000)) OVER (PARTITION BY portfolio_conformed_name_sync) > 0.01 OR SUM(SAFE_DIVIDE(gross_revenue_amount, 1000)) OVER (PARTITION BY portfolio_conformed_name_sync) < -0.01 OR SUM(IF(relative_fy_year_offset = 0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) != 0 THEN 'include'
      ELSE 'exclude'
    END AS blank_portfolio_flag
  FROM
    CTE AS t0
  WHERE
    -- Apply a general date filter for performance, e.g., last 2 fiscal years of data
    t0.relative_fy_year_offset BETWEEN -2 AND 0
)
SELECT
  GSD,
  advertiser_group,
  portfolio_conformed_name_sync,
  product_group,
  fin_adtype_name,
  revenue_type,
  sales_segment_gm_name_sync,
  customer_status_full,
  blank_portfolio_flag,
  -- Metrics from Query 1 (conditional sums)
  SUM(CASE WHEN (relative_fy_year_offset = 0 AND relative_fy_quarter_offset = 0) THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE NULL END) AS current_year_q1_revenue_k,
  SUM(CASE WHEN (relative_fy_year_offset = -1 AND relative_fy_quarter_offset = -4) THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE NULL END) AS last_year_q4_revenue_k,
  SUM(CASE WHEN (relative_fy_quarter_offset = 0) THEN SAFE_DIVIDE(target, 1000) ELSE NULL END) AS current_quarter_target_k,
  -- Record count (similar to Query 2's count, but generalized)
  COUNT(*) AS record_count_for_group,
  -- Raw values for deeper analysis
  SUM(gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(target) AS total_target_amount
FROM
  base_data
GROUP BY
  GSD,
  advertiser_group,
  portfolio_conformed_name_sync,
  product_group,
  fin_adtype_name,
  revenue_type,
  sales_segment_gm_name_sync,
  customer_status_full,
  blank_portfolio_flag
ORDER BY
  GSD, advertiser_group
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT GSD) as unique_gsds,
  COUNT(DISTINCT advertiser_group) as unique_advertiser_groups,
  COUNT(DISTINCT portfolio_conformed_name_sync) as unique_portfolios,
  COUNT(DISTINCT product_group) as unique_product_groups,
  COUNT(DISTINCT fin_adtype_name) as unique_fin_adtypes,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  MIN(relative_fy_year_offset) as min_fy_year_offset,
  MAX(relative_fy_year_offset) as max_fy_year_offset,
  MIN(financial_month) as min_financial_month,
  MAX(financial_month) as max_financial_month,
  AVG(gross_revenue_amount) as avg_gross_revenue_amount,
  AVG(target) as avg_target_amount
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  -- Filter to recent data for structure analysis
  relative_fy_year_offset BETWEEN -2 AND 0
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_group) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_group_test,
  CASE WHEN MAX(relative_fy_year_offset) >= 0 THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(product_group AS STRING) IS NOT NULL THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as product_group_data_test
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  relative_fy_year_offset = 0 -- Current fiscal year
LIMIT 1;","WITH CTE AS (
    SELECT
      *,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
    WHERE
      relative_fy_year_offset BETWEEN -1 AND 0 -- Only need current and last FY for retention logic
  )
SELECT
  'Business Rule Validation' as validation_type,
  'customer_status_full_logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN customer_status_full = 'NEW BUSINESS' THEN 1 ELSE 0 END) as new_business_count,
  SUM(CASE WHEN customer_status_full = 'RETAINED' THEN 1 ELSE 0 END) as retained_count,
  SUM(CASE WHEN customer_status_full = 'INACTIVE' THEN 1 ELSE 0 END) as inactive_count,
  SUM(CASE WHEN customer_status_full = 'LAPSED' THEN 1 ELSE 0 END) as lapsed_count,
  SUM(CASE WHEN customer_status_full = 'Other' THEN 1 ELSE 0 END) as other_count
FROM (
  SELECT
    CASE
      WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
      WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
      WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
      WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
      ELSE 'Other'
    END AS customer_status_full
  FROM CTE
) AS sub
LIMIT 1;","SELECT
  -- Cast all potentially problematic columns for safe viewing
  SAFE_CAST(GSD AS STRING) as GSD,
  SAFE_CAST(advertiser_group AS STRING) as advertiser_group,
  SAFE_CAST(portfolio_conformed_name_sync AS STRING) as portfolio_conformed_name_sync,
  SAFE_CAST(product_group AS STRING) as product_group,
  SAFE_CAST(fin_adtype_name AS STRING) as fin_adtype_name,
  SAFE_CAST(revenue_type AS STRING) as revenue_type,
  SAFE_CAST(sales_segment_gm_name_sync AS STRING) as sales_segment_gm_name_sync,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(target AS NUMERIC) as target,
  SAFE_CAST(relative_fy_year_offset AS INT64) as relative_fy_year_offset,
  SAFE_CAST(relative_fy_quarter_offset AS INT64) as relative_fy_quarter_offset,
  SAFE_CAST(financial_month AS INT64) as financial_month,
  SAFE_CAST(financial_quarter AS STRING) as financial_quarter
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  relative_fy_year_offset = 0 -- Sample from current fiscal year
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['0 (for @reporting_mth)', '1 (for @customer_retention_type)', '0.01 (for blank_portfolio_flag threshold)', '1 (for retention logic thresholds)'], 'context': 'Parameters and thresholds for derived dimensions and metrics are hardcoded in the SQL.', 'suggested_governance': 'These values should be externalized as Looker Studio parameters or configuration tables.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DESIREE DURRANT'"", ""'CHRIS JEFFS'"", ""'PRINT'"", ""'XTEND'"", ""'The Australian & Prestige'"", ""'State & Communities'"", ""'Free News & Lifestyle'"", ""'Client'"", ""'Commercial Content'"", ""'Group Functions'"", ""'Others'"", ""'Unknown'"", ""'NEW BUSINESS'"", ""'RETAINED'"", ""'INACTIVE'"", ""'LAPSED'"", ""'Other'"", ""'All'""], 'context': 'Specific GSD names, revenue/ad types, product group names, and customer status categories are hardcoded.', 'suggested_governance': 'Use Looker Studio filter controls for GSD names. Map product groups and customer statuses using governed reference tables.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded `@reporting_mth` and `@customer_retention_type` with Looker Studio parameters.', 'Externalize customer retention thresholds (e.g., `fix_ly_lgr <= 1`) into a configuration table or parameters.', 'Externalize product group integer mappings into a lookup table.', 'Allow GSD names and revenue/ad type exclusions to be selected via dashboard filters rather than hardcoding in queries.']",12,155c4518-72bf-4309-a0e9-240dd564f421
"-- This query consolidates key metrics and dimensions from the dashboard's underlying SQL.
-- It calculates current and previous fiscal year gross revenue (in thousands) and categorizes publications.
-- A general date filter is applied for performance, assuming 'dw_asl_load_timestamp' is the primary date column.
WITH base_data AS (
  SELECT
    t0.gross_revenue_amount,
    t0.product_group,
    t0.relative_fy_year_offset,
    t0.revenue_type,
    t0.unified_publication_name,
    t0.dw_asl_load_timestamp
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE SAFE_CAST(t0.dw_asl_load_timestamp AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) -- Filter for recent data
)
SELECT
  product_group,
  CASE
    WHEN unified_publication_name IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
      'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
      'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au',
      'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
      'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG',
      'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    ) THEN 'Sundry Pubs'
    ELSE 'Non Sundry Pubs'
  END AS publication_type,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE 0 END) AS current_fy_gross_revenue_000s,
  SUM(CASE WHEN relative_fy_year_offset = 1 THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE 0 END) AS previous_fy_gross_revenue_000s,
  MIN(DATETIME_TRUNC(dw_asl_load_timestamp, SECOND)) AS min_data_load_timestamp
FROM base_data
WHERE product_group IN ('The Australian & Prestige') -- Common filter from original revenue query
GROUP BY
  product_group,
  publication_type
ORDER BY
  product_group,
  publication_type
LIMIT 100;","-- Query to understand data structure, grain, and key dimensions with sampling.
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(dw_asl_load_timestamp AS DATE)) as unique_load_dates,
  COUNT(DISTINCT product_group) as unique_product_groups,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  COUNT(DISTINCT unified_publication_name) as unique_publication_names,
  COUNT(DISTINCT relative_fy_year_offset) as unique_fy_offsets,
  MIN(SAFE_CAST(dw_asl_load_timestamp AS DATE)) as earliest_load_date,
  MAX(SAFE_CAST(dw_asl_load_timestamp AS DATE)) as latest_load_date,
  SUM(CASE WHEN gross_revenue_amount IS NULL THEN 1 ELSE 0 END) as null_gross_revenue_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","-- Quick validation that all metric calculations work syntactically and data is present.
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN COUNT(DISTINCT product_group) > 0 THEN 'PASS' ELSE 'FAIL' END as product_group_test,
  CASE WHEN MAX(SAFE_CAST(dw_asl_load_timestamp AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN relative_fy_year_offset = 0 THEN 1 END) > 0 AND COUNT(CASE WHEN relative_fy_year_offset = 1 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as fy_offset_data_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","-- Query to validate key business logic, specifically the 'Sundry Pubs' classification.
SELECT
  'Business Rule Validation' as validation_type,
  'sundry_pubs_classification' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE
    WHEN unified_publication_name IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
      'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
      'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au',
      'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
      'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG',
      'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    ) THEN 1 ELSE 0 END
  ) as sundry_pubs_count,
  SUM(CASE
    WHEN unified_publication_name NOT IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
      'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
      'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au',
      'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
      'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG',
      'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    ) THEN 1 ELSE 0 END
  ) as non_sundry_pubs_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 100;","-- Query to get representative sample data for further analysis.
SELECT
  SAFE_CAST(dw_asl_load_timestamp AS DATETIME) as dw_asl_load_timestamp,
  product_group,
  revenue_type,
  unified_publication_name,
  relative_fy_year_offset,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND gross_revenue_amount IS NOT NULL
ORDER BY dw_asl_load_timestamp DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Admin.ADV'"", ""'Admin.DTM'"", ""'Admin.HWT'"", ""'Admin.International'"", ""'Admin.Sales'"", ""'Admin.Sport'"", ""'Admin.TCM'"", ""'Bestrecipes.Admin'"", ""'Bodyandsoul.Admin'"", ""'CODE'"", ""'CodeBet'"", ""'Delicious.admin'"", ""'Escape.Admin'"", ""'GQ.Admin'"", ""'Kidspot.Admin'"", ""'National Sundry'"", ""'National Tabloid PrePrint'"", ""'News.Admin'"", ""'odds.com.au'"", ""'Punters.com.au'"", ""'Qantas Travel Insider'"", ""'RACENET'"", ""'Shortlyster Managed Service'"", ""'Sky News'"", ""'SKYNEWS.ADMIN'"", ""'Stellar.Admin'"", ""'Stockhead'"", ""'SUDDENLY.CW'"", ""'SUDDENLY.NORTH'"", ""'SUDDENLY.TGG'"", ""'Taste.Admin'"", ""'TAUS.ADMIN'"", ""'The Sunday Times'"", ""'TOOWOOMBACUSTOM'"", ""'Vogue.Admin'"", ""'Vogueliving.Admin'""], 'context': ""List of unified_publication_name values used to classify 'Sundry Pubs'."", 'suggested_governance': 'Move this list to a dedicated reference table (e.g., `dim_publication_type`) and join to it.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '1'], 'context': 'Numeric offsets (0 for current FY, 1 for previous FY) used to determine fiscal year context.', 'suggested_governance': 'Derive fiscal year context from a fiscal calendar dimension table that maps dates to fiscal years and relative offsets.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'filters', 'hardcoded_values': [""'The Australian & Prestige'"", ""'PRINT'"", ""'GQ Mag'""], 'context': 'Specific values used to filter product_group, revenue_type, and unified_publication_name.', 'suggested_governance': 'Replace with Looker Studio parameters or allow dynamic selection by users.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'other', 'hardcoded_values': [""'$'000' = '$'""], 'context': 'Conditional logic for unit conversion (thousands) that evaluates to false, effectively hardcoding the output to thousands.', 'suggested_governance': 'Remove this dead code or implement a proper dynamic unit conversion mechanism.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded fiscal year offsets (0, 1) with dynamic calculations based on current date and a fiscal calendar.', ""Replace the hardcoded list of 'Sundry Pubs' with a join to a governed reference table."", 'Parameterize specific filter values for product groups, revenue types, and publication names in Looker Studio.']",13,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
"SELECT
  SAFE_CAST(t0.EventDate AS DATE) AS EventDate, -- Assuming 'EventDate' column exists for time-series context
  SAFE_CAST(t0.ProductType AS STRING) AS ProductType,
  SAFE_CAST(t0.RevenueNet AS NUMERIC) AS RevenueNet,
  SAFE_CAST(t0.TransactionType AS STRING) AS TransactionType,
  CASE
    WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
    WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(t0.TransactionType AS STRING)
  END AS TransactionTypeGroup
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
WHERE
  SAFE_CAST(t0.EventDate AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY) -- Filter for rolling 60 days
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(EventDate AS DATE)) AS unique_dates, -- Assuming 'EventDate' column exists
  COUNT(DISTINCT SAFE_CAST(ProductType AS STRING)) AS unique_product_types,
  COUNT(DISTINCT SAFE_CAST(TransactionType AS STRING)) AS unique_transaction_types,
  MIN(SAFE_CAST(EventDate AS DATE)) AS earliest_date,
  MAX(SAFE_CAST(EventDate AS DATE)) AS latest_date,
  SUM(CASE WHEN RevenueNet IS NULL THEN 1 ELSE 0 END) AS null_revenue_net_count
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
WHERE
  SAFE_CAST(EventDate AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(RevenueNet AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_positive_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(ProductType AS STRING)) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_product_types_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(TransactionType AS STRING)) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_transaction_types_test,
  CASE WHEN MAX(SAFE_CAST(EventDate AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test -- Assuming 'EventDate' column exists
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
WHERE
  SAFE_CAST(EventDate AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'transaction_type_grouping_coverage' AS rule_name,
  COUNT(*) AS total_records_tested,
  SUM(
    CASE
      WHEN (
        CASE
          WHEN (TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD') THEN 'Guaranteed'
          WHEN (TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR') THEN 'Deal'
          WHEN (TransactionType = 'Open Auction' OR TransactionType = 'RTB' OR TransactionType = 'Unknown') THEN 'Open Auction'
          ELSE SAFE_CAST(TransactionType AS STRING)
        END
      ) IS NOT NULL THEN 1
      ELSE 0
    END
  ) AS records_with_group,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN (
          CASE
            WHEN (TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD') THEN 'Guaranteed'
            WHEN (TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR') THEN 'Deal'
            WHEN (TransactionType = 'Open Auction' OR TransactionType = 'RTB' OR TransactionType = 'Unknown') THEN 'Open Auction'
            ELSE SAFE_CAST(TransactionType AS STRING)
          END
        ) IS NOT NULL THEN 1
        ELSE 0
      END
    ),
    COUNT(*)
  ) * 100 AS coverage_percentage,
  ARRAY_AGG(
    DISTINCT SAFE_CAST(TransactionType AS STRING) IGNORE NULLS
    ORDER BY SAFE_CAST(TransactionType AS STRING)
  ) AS all_distinct_transaction_types,
  ARRAY_AGG(
    DISTINCT SAFE_CAST(TransactionType AS STRING) IGNORE NULLS
    HAVING NOT (
      TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD' OR
      TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR' OR
      TransactionType = 'Open Auction' OR TransactionType = 'RTB' OR TransactionType = 'Unknown'
    )
    ORDER BY SAFE_CAST(TransactionType AS STRING)
    LIMIT 10
  ) AS sample_transaction_types_falling_into_else_clause
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
WHERE
  SAFE_CAST(EventDate AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY); -- Assuming 'EventDate' column exists","SELECT
  SAFE_CAST(EventDate AS DATE) AS EventDate, -- Assuming 'EventDate' column exists
  SAFE_CAST(ProductType AS STRING) AS ProductType,
  SAFE_CAST(RevenueNet AS NUMERIC) AS RevenueNet,
  SAFE_CAST(TransactionType AS STRING) AS TransactionType,
  CASE
    WHEN (TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD') THEN 'Guaranteed'
    WHEN (TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR') THEN 'Deal'
    WHEN (TransactionType = 'Open Auction' OR TransactionType = 'RTB' OR TransactionType = 'Unknown') THEN 'Open Auction'
    ELSE SAFE_CAST(TransactionType AS STRING)
  END AS TransactionTypeGroup
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view`
WHERE
  SAFE_CAST(EventDate AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) -- Assuming 'EventDate' column exists
  AND RevenueNet IS NOT NULL
ORDER BY
  SAFE_CAST(EventDate AS DATE) DESC,
  SAFE_CAST(RevenueNet AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Deal'"", ""'pmp'"", ""'PG - CPM'"", ""'AG'"", ""'PMP_DEAL'"", ""'RTB'"", ""'PG - CPD'"", ""'Open Auction'"", ""'Unknown'"", ""'UFR'""], 'context': 'TransactionType values hardcoded in CASE statement for grouping', 'suggested_governance': ""join to a `transaction_type_lookup` table with 'TransactionType' and 'TransactionTypeGroup' columns"", 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded dates (implied 60-day window) with date parameters or relative date functions in Looker Studio's data source configuration."", ""Replace hardcoded lookup values for 'TransactionTypeGroup' with joins to a governed reference table.""]",14,b15d856f-e3ce-4991-bf2a-92395390524f
"WITH base_data AS (
  SELECT
    SAFE_CAST(t0.date_column AS DATE) AS report_date, -- Assuming a date column exists
    t0.advertiser_name,
    t0.portfolio_conformed_name_sync,
    t0.sales_segment_l_2_name_sync,
    SAFE_CAST(t0.total_sales_amount AS NUMERIC) AS total_sales_amount, -- Inferred metric
    SAFE_CAST(t0.total_impressions AS NUMERIC) AS total_impressions -- Inferred metric
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE SAFE_CAST(t0.date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Example date filter
)
SELECT
  report_date,
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync,
  COUNT(*) AS record_count,
  SUM(total_sales_amount) AS sum_total_sales_amount,
  SUM(total_impressions) AS sum_total_impressions,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers
FROM base_data
WHERE portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9') -- Applying the hardcoded filter from one query
GROUP BY
  report_date,
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync
ORDER BY
  report_date DESC, sum_total_sales_amount DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.date_column AS DATE)) AS unique_dates, -- Assuming a date column exists
  COUNT(DISTINCT t0.advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT t0.portfolio_conformed_name_sync) AS unique_portfolios,
  COUNT(DISTINCT t0.sales_segment_l_2_name_sync) AS unique_sales_segments,
  MIN(SAFE_CAST(t0.date_column AS DATE)) AS earliest_date, -- Assuming a date column exists
  MAX(SAFE_CAST(t0.date_column AS DATE)) AS latest_date -- Assuming a date column exists
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY); -- Analyze last year of data","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.total_sales_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS sales_amount_test, -- Inferred metric
  CASE WHEN COUNT(DISTINCT t0.advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_test,
  CASE WHEN MAX(SAFE_CAST(t0.date_column AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test, -- Assuming a date column exists
  CASE WHEN COUNT(CASE WHEN t0.portfolio_conformed_name_sync IS NULL THEN 1 END) = 0 THEN 'PASS' ELSE 'FAIL' END AS portfolio_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Hardcoded Portfolio Values Coverage' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN t0.portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9') THEN 1 ELSE 0 END) AS records_matching_hardcoded_list,
  SAFE_DIVIDE(SUM(CASE WHEN t0.portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS match_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  SAFE_CAST(t0.date_column AS DATE) AS date_column, -- Assuming a date column exists
  t0.advertiser_name,
  t0.portfolio_conformed_name_sync,
  t0.sales_segment_l_2_name_sync,
  SAFE_CAST(t0.total_sales_amount AS NUMERIC) AS total_sales_amount, -- Inferred metric
  SAFE_CAST(t0.total_impressions AS NUMERIC) AS total_impressions -- Inferred metric
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) -- Sample recent data
  AND t0.advertiser_name IS NOT NULL
ORDER BY SAFE_CAST(t0.date_column AS DATE) DESC, SAFE_CAST(t0.total_sales_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'GAD RAM A1'"", ""'HBT RAM A1'"", ""'VIC DIRECT A7'"", ""'VIC DIRECT A8'"", ""'VIC DIRECT A9'""], 'context': 'portfolio_conformed_name_sync values hardcoded in WHERE clause for filtering `advertiser_name`.', 'suggested_governance': 'These values should be managed in a governed reference table (e.g., `portfolio_lookup`) and joined, or passed as parameters from the dashboard.', 'impact': 'medium', 'maintenance_risk': 'high'}]}","['Replace hardcoded portfolio names with a dynamic parameter or a join to a `portfolio_lookup` table.', 'Introduce date parameters for dashboard date range selection instead of relying on implicit or fixed date filters.']",15,80ca81f3-0671-40ef-a0a9-825a1580ca1b
"-- This query consolidates key metrics and dimensions from the dashboard's underlying data.
-- It applies common filters and aggregates the primary revenue metric.
-- Date filters are set to analyze recent data for performance and relevance.
SELECT
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.calendar_year AS INT64) AS calendar_year,
  SAFE_CAST(t0.calendar_month AS INT64) AS calendar_month,
  t0.publication_name AS publication_name,
  t0.source_publishing_division AS source_publishing_division,
  t0.revenue_transaction_status AS revenue_transaction_status,
  t0.revenue_group_subtype AS revenue_group_subtype,
  t0.advertiser_name AS advertiser_name,
  t0.advertiser_group AS advertiser_group,
  t0.revenue_type AS revenue_type,
  SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) AS total_gross_revenue,
  COUNT(DISTINCT t0.booking_number) AS distinct_bookings,
  COUNT(DISTINCT t0.advertiser_name) AS distinct_advertisers
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  t0.financial_year IS NOT NULL
  AND t0.source_publishing_division != 'Medium Rare Content Agency'
  AND t0.revenue_transaction_status IN ('Billed', 'Booked')
  AND t0.revenue_group_subtype IN ('Digital', 'Print')
  -- Example date filter for recent data, adjust as needed
  AND SAFE_CAST(t0.calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10
ORDER BY
  calendar_year DESC, calendar_month DESC
LIMIT 1000;","-- This query helps understand the data structure, grain, and key dimensions.
-- It provides counts, unique values, and date ranges for critical columns.
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS STRING)) AS unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(t0.calendar_year AS INT64)) AS unique_calendar_years,
  COUNT(DISTINCT t0.publication_name) AS unique_publication_names,
  COUNT(DISTINCT t0.advertiser_name) AS unique_advertiser_names,
  COUNT(DISTINCT t0.revenue_transaction_status) AS unique_transaction_statuses,
  COUNT(DISTINCT t0.revenue_group_subtype) AS unique_revenue_subtypes,
  MIN(SAFE_CAST(t0.calendar_year AS INT64)) AS earliest_calendar_year,
  MAX(SAFE_CAST(t0.calendar_year AS INT64)) AS latest_calendar_year,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3
LIMIT 1;","-- This query performs quick validation checks on data quality and freshness.
-- It verifies if key metrics are present and if data is recent.
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_count_test,
  CASE WHEN MAX(SAFE_CAST(t0.calendar_year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS freshness_year_test,
  CASE WHEN COUNT(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS transaction_status_filter_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 1;","-- This query validates specific business rules identified from the dashboard queries.
-- It checks the adherence to exclusion and inclusion criteria for key dimensions.
SELECT
  'Business Rule Validation' AS validation_type,
  'Medium Rare Content Agency Exclusion' AS rule_name,
  COUNT(*) AS total_records_checked,
  SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END) AS records_passing_exclusion,
  SAFE_DIVIDE(SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS exclusion_pass_rate_percent,
  'Billed/Booked Status Inclusion' AS rule_name_2,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END) AS records_passing_status_inclusion,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS status_inclusion_pass_rate_percent
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","-- This query retrieves a representative sample of raw data for further analysis.
-- It includes key dimensions and metrics, with appropriate type casting.
SELECT
  t0.advertiser_group,
  t0.advertiser_name,
  t0.booking_number,
  SAFE_CAST(t0.calendar_month AS INT64) AS calendar_month,
  SAFE_CAST(t0.calendar_year AS INT64) AS calendar_year,
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  t0.revenue_group_subtype,
  t0.revenue_transaction_status,
  t0.revenue_type,
  t0.source_publishing_division,
  t0.source_unified_publication_name,
  t0.publication_name
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(t0.calendar_year AS INT64) DESC, SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '202', 'original_format': 'string', 'context': 'financial_year filter in query 1', 'suggested_fix': 'Map to a standard date range or use a parameter for financial year selection.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2022', 'original_format': 'string', 'context': 'calendar_year exclusion in query 2', 'suggested_fix': 'Replace with relative date logic (e.g., `EXTRACT(YEAR FROM CURRENT_DATE()) - 2`) or a parameter.', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '2024', 'original_format': 'string', 'context': 'calendar_year inclusion in query 3', 'suggested_fix': 'Replace with relative date logic (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`) or a parameter.', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': '2025', 'original_format': 'string', 'context': 'calendar_year inclusion in query 3', 'suggested_fix': 'Replace with relative date logic (e.g., `EXTRACT(YEAR FROM CURRENT_DATE()) + 1`) or a parameter.', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'Exclusion filter for source_publishing_division across all queries.', 'suggested_governance': 'Manage excluded divisions in a configuration table or parameter.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Billed'"", ""'Booked'""], 'context': 'Inclusion filter for revenue_transaction_status across all queries.', 'suggested_governance': 'Use a lookup table for transaction statuses or a parameter for selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Digital'"", ""'Print'""], 'context': 'Inclusion filter for revenue_group_subtype in queries 2 and 3.', 'suggested_governance': 'Use a lookup table for revenue group subtypes or a parameter for selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'INTERNAL PUIG Oceania'"", ""'PUIG Oceania'"", ""'Greyhound Racing Victoria'""], 'context': 'Specific advertiser_name inclusions in queries 2 and 3.', 'suggested_governance': 'Manage advertiser lists in a reference table or use dashboard parameters for selection.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded financial and calendar years with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', 'Introduce parameters for `source_publishing_division` exclusions, `revenue_transaction_status` inclusions, `revenue_group_subtype` inclusions, and specific `advertiser_name` selections.', 'Utilize governed reference tables for categorical values (e.g., transaction statuses, revenue subtypes, publishing divisions, advertiser names) to ensure consistency and ease of maintenance.']",16,c560ed20-040d-4c6a-9c3f-ec8bce27d132
"-- This query consolidates key revenue metrics from the 'ia' table, which is used in two of the provided queries.
-- It calculates Current Fiscal Year Revenue, Previous Fiscal Year Revenue, and a conditional revenue metric.
-- It groups by agency parent, financial quarter, adjusted financial month, and financial year.
-- Note: The 'revenue_movement' table is distinct and not easily joinable with 'ia' without further business context.

WITH base_ia_data AS (
  SELECT
    t0.agency_parent,
    SAFE_CAST(t0.booking_line_created_date AS TIMESTAMP) AS booking_line_created_timestamp,
    SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
    SAFE_CAST(t0.relative_fy_month_offset AS INT64) AS relative_fy_month_offset,
    SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
    SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
    SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
    SAFE_CAST(t0.financial_year AS INT64) AS financial_year,
    t0.revenue_group_subtype
  FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
  WHERE (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL)
),

calculated_metrics AS (
  SELECT
    agency_parent,
    financial_quarter,
    financial_year,
    -- Adjusted Financial Month (from Query 2 logic)
    CASE WHEN financial_month > 6 THEN financial_month - 6 ELSE financial_month + 6 END AS adjusted_financial_month,
    
    -- Current Fiscal Year Revenue
    CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue,
    
    -- Previous Fiscal Year Revenue
    CASE WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount ELSE 0 END AS previous_fy_gross_revenue,
    
    -- Conditional Revenue (based on Query 1 & 2 logic)
    -- This logic is complex and relies on a hardcoded future date for comparison.
    -- For this consolidated query, we'll simplify the conditional revenue to focus on the FY month offset.
    -- The original logic: (clmn11_ < -12) THEN clmn17_ ELSE clmn20_ (Query 1)
    -- clmn17_ is Previous FY Revenue
    -- clmn20_ is Gross Revenue if relative_fy_year_offset is -1 AND Booking Line Created Date <= Previous Year Date Reference
    -- The hardcoded date reference makes this metric less generalizable without parameterization.
    -- We will use a simplified version for demonstration, focusing on the relative_fy_month_offset condition.
    CASE
      WHEN relative_fy_month_offset < -12 THEN (CASE WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount ELSE 0 END)
      ELSE (CASE WHEN relative_fy_year_offset = -1 AND SAFE_CAST(booking_line_created_timestamp AS DATE) <= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) THEN gross_revenue_amount ELSE 0 END)
    END AS conditional_revenue_metric

  FROM base_ia_data
)

SELECT
  agency_parent,
  financial_quarter,
  adjusted_financial_month,
  financial_year,
  SUM(current_fy_gross_revenue) AS total_current_fy_gross_revenue,
  SUM(previous_fy_gross_revenue) AS total_previous_fy_gross_revenue,
  SUM(conditional_revenue_metric) AS total_conditional_revenue_metric,
  COUNT(*) AS record_count
FROM calculated_metrics
GROUP BY
  agency_parent,
  financial_quarter,
  adjusted_financial_month,
  financial_year
ORDER BY
  total_current_fy_gross_revenue DESC
LIMIT 100;
","-- Query to understand data structure, grain, and key dimensions with sampling for both primary tables.
SELECT
  'sbx_dcp.ia' AS source_table,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.agency_parent) AS unique_agency_parents,
  COUNT(DISTINCT SAFE_CAST(t0.booking_line_created_date AS DATE)) AS unique_booking_dates,
  MIN(SAFE_CAST(t0.booking_line_created_date AS DATE)) AS earliest_booking_date,
  MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) AS latest_booking_date,
  AVG(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) AS avg_gross_revenue_amount
FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)

UNION ALL

SELECT
  'asl_finance_derived.revenue_movement' AS source_table,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.account_number) AS unique_account_numbers,
  COUNT(DISTINCT SAFE_CAST(t0.movement_date AS DATE)) AS unique_movement_dates,
  MIN(SAFE_CAST(t0.movement_date AS DATE)) AS earliest_movement_date,
  MAX(SAFE_CAST(t0.movement_date AS DATE)) AS latest_movement_date,
  AVG(SAFE_CAST(t0.GROSS_AMOUNT_DIFF AS NUMERIC)) AS avg_gross_amount_diff
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE SAFE_CAST(t0.movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY);
","-- Quick validation that all metric calculations work syntactically and return non-zero values for recent data.
SELECT
  'Validation Check - sbx_dcp.ia' AS test_type,
  CASE WHEN SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS current_fy_revenue_test,
  CASE WHEN SUM(CASE WHEN t0.relative_fy_year_offset = -1 THEN SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS previous_fy_revenue_test,
  CASE WHEN COUNT(DISTINCT t0.agency_parent) > 0 THEN 'PASS' ELSE 'FAIL' END AS agency_parent_test,
  CASE WHEN MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test
FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)

UNION ALL

SELECT
  'Validation Check - revenue_movement' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.GROSS_AMOUNT_DIFF AS NUMERIC)) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS gross_amount_diff_test,
  CASE WHEN COUNT(DISTINCT t0.account_number) > 0 THEN 'PASS' ELSE 'FAIL' END AS account_number_test,
  CASE WHEN MAX(SAFE_CAST(t0.movement_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  'N/A' AS dummy_column -- To match column count for UNION ALL
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE SAFE_CAST(t0.movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;
","-- Query to validate key business logic, filters, and data quality.
SELECT
  'Business Rule Validation - Revenue Group Subtype Exclusion' AS validation_type,
  'PROGRAMMATIC EXCHANGE exclusion' AS rule_name,
  COUNT(*) AS total_records_scanned,
  SUM(CASE WHEN t0.revenue_group_subtype = 'PROGRAMMATIC EXCHANGE' THEN 1 ELSE 0 END) AS records_matching_excluded_type,
  SUM(CASE WHEN t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL THEN 1 ELSE 0 END) AS records_passing_filter,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)

UNION ALL

SELECT
  'Business Rule Validation - Revenue Movement Min Week Exclusion' AS validation_type,
  'Movement Financial Week != Min Week' AS rule_name,
  COUNT(*) AS total_records_scanned,
  SUM(CASE WHEN SAFE_CAST(t0.movement_financial_week AS INT64) = SAFE_CAST(t0.min_week AS INT64) THEN 1 ELSE 0 END) AS records_matching_excluded_condition,
  SUM(CASE WHEN SAFE_CAST(t0.movement_financial_week AS INT64) != SAFE_CAST(t0.min_week AS INT64) THEN 1 ELSE 0 END) AS records_passing_filter,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(t0.movement_financial_week AS INT64) != SAFE_CAST(t0.min_week AS INT64) THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE SAFE_CAST(t0.movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);
","-- Query to get representative sample data for further analysis from both primary tables.
SELECT
  'sbx_dcp.ia' AS source_table,
  SAFE_CAST(t0.booking_line_created_date AS DATE) AS primary_date,
  t0.agency_parent,
  NULL AS account_number,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS primary_metric,
  t0.revenue_group_subtype,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
  SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
  SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
  SAFE_CAST(t0.financial_year AS INT64) AS financial_year
FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
ORDER BY SAFE_CAST(t0.booking_line_created_date AS DATE) DESC, SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) DESC
LIMIT 250

UNION ALL

SELECT
  'asl_finance_derived.revenue_movement' AS source_table,
  SAFE_CAST(t0.movement_date AS DATE) AS primary_date,
  t0.agency_parent,
  t0.account_number,
  SAFE_CAST(t0.GROSS_AMOUNT_DIFF AS NUMERIC) AS primary_metric,
  NULL AS revenue_group_subtype,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
  SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
  SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
  SAFE_CAST(t0.financial_year AS INT64) AS financial_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE SAFE_CAST(t0.movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
ORDER BY SAFE_CAST(t0.movement_date AS DATE) DESC, SAFE_CAST(t0.GROSS_AMOUNT_DIFF AS NUMERIC) DESC
LIMIT 250;
","{'hardcoded_dates': [{'date_value': '2025-05-23', 'original_format': ""DATE(TIMESTAMP '2025-05-23 01:19:32.916346+00', 'Australia/Sydney')"", 'context': ""Used as a fixed 'current date' reference point for calculating previous year dates (e.g., -365 days)."", 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter to make the report dynamic and current.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-22', 'original_format': ""DATE(TIMESTAMP '2025-06-22 22:46:58.786738+00', 'Australia/Sydney')"", 'context': ""Used as a fixed 'current date' reference point for calculating previous year dates (e.g., -365 days)."", 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter to make the report dynamic and current.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'PROGRAMMATIC EXCHANGE'""], 'context': 'Used in WHERE clause to exclude a specific revenue group subtype.', 'suggested_governance': 'Manage excluded revenue subtypes in a configuration table or a governed list that can be joined or referenced.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'""], 'context': 'Mapping calendar month short names to month numbers.', 'suggested_governance': 'While common, if month names or mappings change, this requires code modification. A date dimension table would contain this mapping.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Q1'"", ""'Q2'"", ""'Q3'"", ""'Q4'""], 'context': 'Mapping financial months to financial quarters.', 'suggested_governance': 'Similar to month names, if fiscal quarter definitions change, this requires code modification. A fiscal calendar dimension table would be ideal.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'FY'""], 'context': ""Used in `CASE WHEN ('FY' = 'FY') THEN ... ELSE ... END` which is always true. This indicates a redundant condition or a placeholder for a parameter that was never implemented."", 'suggested_governance': 'Remove the redundant `CASE WHEN` or replace with a dashboard parameter (e.g., `fiscal_year_flag`) if the intention was to switch between fiscal and calendar logic.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates (e.g., '2025-05-23') with `CURRENT_DATE()` or Looker Studio date parameters to ensure dynamic reporting."", ""Consider externalizing business rules like 'PROGRAMMATIC EXCHANGE' exclusion into a configuration table or a governed list."", ""If the 'FY' vs 'Calendar Year' logic is ever intended to be dynamic, implement a dashboard parameter to control it instead of the hardcoded 'FY' = 'FY' condition.""]",17,fed70b12-c274-4cde-9920-592ca4c4dab0
"WITH filtered_movements AS (
  SELECT
    SAFE_CAST(movement_datetime AS DATE) AS movement_date,
    masthead,
    subscription_id_src,
    subscriber_id_src,
    subscription_movement_count_type,
    sold_in_rate_plan_code,
    SUBSTR(sold_in_source_code, 1, 2) AS source_masthead_prefix
  FROM `prstn_consumer_views.v_subscription_movement`
  WHERE
    movement_datetime >= DATE '2024-07-01' -- Hardcoded start date
    AND movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY) -- Hardcoded end date
    AND masthead = 'SC'
    AND subscription_movement_count_type = 'acquisition'
)
SELECT
  movement_date,
  source_masthead_prefix,
  sold_in_rate_plan_code,
  subscriber_id_src,
  COUNT(DISTINCT subscription_id_src) AS daily_unique_acquisitions,
  COUNT(DISTINCT CASE
    WHEN
      sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12')
      AND subscriber_id_src = 2452260
      AND source_masthead_prefix = 'CS'
    THEN subscription_id_src
    ELSE NULL
  END) AS daily_unique_acquisitions_specific_filters
FROM filtered_movements
GROUP BY
  movement_date,
  source_masthead_prefix,
  sold_in_rate_plan_code,
  subscriber_id_src
ORDER BY movement_date DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(movement_datetime AS DATE)) as unique_movement_dates,
  COUNT(DISTINCT subscription_id_src) as unique_subscriptions,
  COUNT(DISTINCT subscriber_id_src) as unique_subscribers,
  COUNT(DISTINCT masthead) as unique_mastheads,
  COUNT(DISTINCT subscription_movement_count_type) as unique_movement_types,
  MIN(SAFE_CAST(movement_datetime AS DATE)) as earliest_movement_date,
  MAX(SAFE_CAST(movement_datetime AS DATE)) as latest_movement_date
FROM `prstn_consumer_views.v_subscription_movement`
WHERE SAFE_CAST(movement_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(DISTINCT subscription_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_subscriptions_test,
  CASE WHEN COUNT(DISTINCT subscriber_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_subscribers_test,
  CASE WHEN MAX(SAFE_CAST(movement_datetime AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN COUNT(CASE WHEN masthead = 'SC' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as supercoach_data_present_test,
  CASE WHEN COUNT(CASE WHEN subscription_movement_count_type = 'acquisition' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as acquisition_data_present_test
FROM `prstn_consumer_views.v_subscription_movement`
WHERE SAFE_CAST(movement_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'SuperCoach Acquisition Data' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage,
  COUNT(DISTINCT sold_in_rate_plan_code) as distinct_rate_plans_in_scope,
  COUNT(DISTINCT SUBSTR(sold_in_source_code, 1, 2)) as distinct_source_masthead_prefixes_in_scope
FROM `prstn_consumer_views.v_subscription_movement`
WHERE SAFE_CAST(movement_datetime AS DATE) >= DATE '2024-07-01' AND SAFE_CAST(movement_datetime AS DATE) < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
LIMIT 1;","SELECT
  SAFE_CAST(movement_datetime AS DATE) as movement_date,
  masthead,
  subscription_id_src,
  subscriber_id_src,
  subscription_movement_count_type,
  sold_in_rate_plan_code,
  sold_in_source_code,
  is_paying_flag
FROM `prstn_consumer_views.v_subscription_movement`
WHERE SAFE_CAST(movement_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND masthead = 'SC'
  AND subscription_movement_count_type = 'acquisition'
ORDER BY movement_datetime DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2024-07-01', 'original_format': ""DATE '2024-07-01'"", 'context': 'Start date for filtering subscription movements', 'suggested_fix': 'replace with dashboard date parameter or relative date function (e.g., DATE_SUB(CURRENT_DATE(), INTERVAL X DAY))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-08-19', 'original_format': ""DATE '2024-08-19'"", 'context': 'End date for filtering subscription movements', 'suggested_fix': 'replace with dashboard date parameter or relative date function (e.g., CURRENT_DATE())', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'SC'""], 'context': ""Filtering for 'SuperCoach' masthead"", 'suggested_governance': ""Use a parameter for masthead selection or join to a governed 'masthead_lookup' table if multiple mastheads are expected."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'acquisition'""], 'context': ""Filtering for 'acquisition' movement type"", 'suggested_governance': ""Use a parameter for movement type selection or join to a governed 'movement_type_lookup' table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'SC_SDO_AP24AM12'"", ""'SC_SDO_AP20AM12'""], 'context': 'Specific rate plan codes used for filtering', 'suggested_governance': ""These product/rate plan codes should be managed in a 'product_master' or 'rate_plan_lookup' table and joined, rather than hardcoded."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': ['2452260'], 'context': 'Specific subscriber ID used for filtering', 'suggested_governance': 'This is likely a specific filter selected by the user. It should be a dashboard parameter or filter control.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CS'""], 'context': 'Specific source masthead prefix used for filtering', 'suggested_governance': ""If 'CS' represents a category, it should be defined in a 'source_masthead_prefix_lookup' table and joined."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., CURRENT_DATE(), DATE_SUB())', 'Replace hardcoded lookup values (masthead, movement type, rate plan codes, source masthead prefix) with joins to governed reference tables or dashboard parameters.', 'Parameterize specific subscriber IDs for dynamic filtering.']",18,6e8b534b-485a-48dd-842d-13dc6bebb01a
"WITH OSandFACT AS (
    SELECT
      os.*,
      pub.publication_name,
      pub.publication_code,
      pub.l04_publication_code,
      pub.l06_publication_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND os.l04_publication_code <> 'Free News & Lifestyle'
      AND os.l06_publication_code NOT IN ('Food', 'Prestige')
      AND os.gl_hierarchy_code = 'FY2025'
      AND EXISTS (
        SELECT 1 FROM `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
        WHERE control.source_week_number = calendar.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      )
  ),
  CalculatedMetrics AS (
    SELECT
      osf.*,
      -- Common date calculations (from Q1 and Q3)
      EXTRACT(DAYOFWEEK FROM SAFE_CAST(osf.fy_first_day_of_week AS TIMESTAMP)) - 1 AS day_of_week_num,
      DATETIME_DIFF(SAFE_CAST(osf.fy_first_day_of_week AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS week_diff_from_baseline,
      -- Q1 specific derived columns for date alignment
      (2025 * 100) + (CASE WHEN (EXTRACT(DAYOFWEEK FROM SAFE_CAST(osf.fy_first_day_of_week AS TIMESTAMP)) - 1) <= 2 THEN DATETIME_DIFF(SAFE_CAST(osf.fy_first_day_of_week AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1 ELSE DATETIME_DIFF(SAFE_CAST(osf.fy_first_day_of_week AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END) = osf.fy_year_week_number AS is_aligned_week,
      -- Q2 specific publication categorization
      CASE
        WHEN osf.publication_code = 'Post Courier' THEN 'PNG'
        ELSE osf.publication_name
      END AS publication_name_q2_step1,
      CASE
        WHEN (CASE WHEN osf.publication_code = 'Post Courier' THEN 'PNG' ELSE osf.publication_name END) IN ('NT News', 'Sunday Territorian') THEN 'Northern Territory'
        WHEN (CASE WHEN osf.publication_code = 'Post Courier' THEN 'PNG' ELSE osf.publication_name END) IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Others'
        WHEN (CASE WHEN osf.publication_code = 'Post Courier' THEN 'PNG' ELSE osf.publication_name END) IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
        WHEN (CASE WHEN osf.publication_code = 'Post Courier' THEN 'PNG' ELSE osf.publication_name END) IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
        WHEN (CASE WHEN osf.publication_code = 'Post Courier' THEN 'PNG' ELSE osf.publication_name END) IN ('Sunday Tasmanian', 'Mercury') THEN 'Mercury'
        ELSE (CASE WHEN osf.publication_code = 'Post Courier' THEN 'PNG' ELSE osf.publication_name END)
      END AS publication_category_q2,
      -- Q3 specific day of week categorization
      CASE
        WHEN osf.day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry') THEN 'M-F'
        WHEN osf.day_of_week = 'Sat' THEN 'SAT'
        WHEN osf.day_of_week = 'Sun' THEN 'Sun'
        ELSE NULL
      END AS day_of_week_category,
      -- Q3 specific publication type categorization
      CASE
        WHEN osf.publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin') THEN '6 Day Pubs'
        WHEN osf.publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury and Sunday Tas'
        WHEN osf.publication_name IN ('NT News', 'Sunday Territorian') THEN 'NT News & Sunday Territorian'
        WHEN osf.publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Other'
        WHEN osf.publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
        WHEN osf.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
        WHEN osf.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
        WHEN osf.publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
        ELSE osf.publication_name
      END AS publication_type_q3,
      -- Q3 specific publication grouping for filters
      CASE
        WHEN osf.publication_name IN ('NT News', 'Sunday Territorian') THEN 'Northern Territory'
        WHEN osf.publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Others'
        WHEN osf.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
        WHEN osf.publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
        ELSE osf.publication_name
      END AS publication_group_q3,
      -- Q3 specific flags for Courier Mail and Australian
      (osf.publication_name = 'The Courier Mail') AS is_courier_mail,
      (osf.publication_name = 'The Australian') AS is_the_australian,
      -- Q3 specific period control logic (clmn50_)
      (osf.fy_year = 2025 AND osf.fy_year_week_number <= ((2025*100)+osf.fy_month_of_year)) AS is_current_period_q3,
      -- Q3 volume calculation (clmn54_ equivalent, choosing Forecast_Volume based on hardcoded '2')
      osf.Forecast_Volume AS selected_volume_for_calc,
      -- Q3 clmn38_ equivalent (fy_month_of_year or 48) - using fy_month_of_year as 48 is a hardcoded fallback
      CASE WHEN 48 = 0 THEN osf.fy_month_of_year ELSE 48 END AS fy_month_or_48,
      -- Q3 derived volume calculations (clmn56_, clmn57_, clmn58_, clmn59_)
      (SAFE_DIVIDE(osf.Forecast_Volume, (CASE WHEN 48 = 0 THEN osf.fy_month_of_year ELSE 48 END * 2)) * 5) AS sportsman_volume_calc,
      (SAFE_DIVIDE(osf.Forecast_Volume, CASE WHEN 48 = 0 THEN osf.fy_month_of_year ELSE 48 END) * 5) AS weekly_times_volume_calc,
      (SAFE_DIVIDE(osf.Forecast_Volume, (CASE WHEN 48 = 0 THEN osf.fy_month_of_year ELSE 48 END * 5)) * 5) AS mf_volume_calc,
      SAFE_DIVIDE(osf.Forecast_Volume, CASE WHEN 48 = 0 THEN osf.fy_month_of_year ELSE 48 END) AS default_volume_calc
    FROM OSandFACT AS osf
  )
SELECT
  -- Dimensions
  cm.publication_name,
  cm.os_level_7 AS sales_channel,
  cm.day_of_week,
  cm.fy_year_week_number AS fiscal_week,
  cm.fy_year AS fiscal_year,
  cm.publication_category_q2 AS publication_category_q2,
  cm.publication_type_q3 AS publication_type_q3,
  cm.publication_group_q3 AS publication_group_q3,
  cm.day_of_week_category AS day_of_week_category,
  -- Metrics
  SUM(SAFE_CAST(cm.Actual_Amount AS NUMERIC)) AS total_actual_amount,
  SUM(SAFE_CAST(cm.volume AS NUMERIC)) AS total_volume,
  SUM(SAFE_CAST(cm.Budget_Volume AS NUMERIC)) AS total_budget_volume,
  SUM(SAFE_CAST(cm.Forecast_Volume AS NUMERIC)) AS total_forecast_volume,
  SUM(SAFE_CAST(cm.Last_Year_volume AS NUMERIC)) AS total_last_year_volume,
  -- Q3 calculated volume (clmn55_ equivalent)
  SUM(CASE
    WHEN cm.publication_type_q3 = 'PNG' THEN 0
    WHEN cm.publication_type_q3 = '6 Day Pubs' THEN SAFE_DIVIDE(SAFE_CAST(cm.selected_volume_for_calc AS NUMERIC), 6)
    ELSE SAFE_DIVIDE(SAFE_CAST(cm.selected_volume_for_calc AS NUMERIC), 7)
  END) AS calculated_volume_q3,
  -- Q3 calculated volume per day (clmn64_ equivalent)
  SUM(CASE
    WHEN cm.is_the_australian OR cm.is_courier_mail THEN
      (CASE WHEN cm.day_of_week_category = 'M-F' THEN SAFE_CAST(cm.mf_volume_calc AS NUMERIC) ELSE SAFE_CAST(cm.default_volume_calc AS NUMERIC) END)
    WHEN cm.publication_name = 'The Sportsman' THEN SAFE_CAST(cm.sportsman_volume_calc AS NUMERIC)
    WHEN cm.publication_name = 'Weekly Times' THEN SAFE_CAST(cm.weekly_times_volume_calc AS NUMERIC)
    WHEN cm.publication_type_q3 = 'PNG' THEN 0
    WHEN cm.day_of_week_category = 'M-F' THEN SAFE_CAST(cm.mf_volume_calc AS NUMERIC)
    ELSE SAFE_CAST(cm.default_volume_calc AS NUMERIC)
  END) AS calculated_volume_per_day_q3
FROM CalculatedMetrics AS cm
WHERE
  -- Q1 filters
  cm.is_aligned_week = TRUE
  AND cm.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND cm.os_level_7 = 'All Sales Channels'
  -- Q3 filters (some duplicated from Q1 for clarity of original query logic)
  AND cm.is_current_period_q3 = TRUE
  AND cm.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
  AND cm.os_level_7 = 'All Sales Channels'
  AND cm.publication_group_q3 IN ('Geelong Advertiser', 'Mercury', 'Sunday Tasmanian', 'Sunshine Coast', 'Sydney Suburbans', 'The Australian', 'The Daily Telegraph', 'The Herald Sun', 'Toowoomba', 'Townsville Bulletin', 'Weekly Times')
GROUP BY
  cm.publication_name,
  cm.os_level_7,
  cm.day_of_week,
  cm.fy_year_week_number,
  cm.fy_year,
  cm.publication_category_q2,
  cm.publication_type_q3,
  cm.publication_group_q3,
  cm.day_of_week_category
ORDER BY
  cm.fy_year DESC, cm.fy_year_week_number DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(os.fiscal_week_id AS STRING)) as unique_fiscal_week_ids,
  COUNT(DISTINCT os.gl_publication_code) as unique_publication_codes,
  COUNT(DISTINCT os.os_level_7) as unique_sales_channels,
  MIN(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) as earliest_fiscal_week_date,
  MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) as latest_fiscal_week_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(os.fiscal_week_id AS STRING), os.gl_publication_code, os.os_level_7, os.day_of_week)) as approx_unique_grain_records
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  AND upper(os.os_level_6) = 'CIRCULATION'
LIMIT 1000;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(os.Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_test,
  CASE WHEN SUM(SAFE_CAST(os.volume AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as volume_test,
  CASE WHEN COUNT(DISTINCT os.gl_publication_code) > 0 THEN 'PASS' ELSE 'FAIL' END as publication_test,
  CASE WHEN MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN control.period_name IN ('CP', 'PY') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as period_control_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = calendar.fy_year_week_number
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND upper(os.os_level_6) = 'CIRCULATION'
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Circulation_Filter' as rule_name_1,
  SUM(CASE WHEN upper(os.os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END) as circulation_records,
  'Publication_Exclusion_Filter' as rule_name_2,
  SUM(CASE WHEN os.l04_publication_code <> 'Free News & Lifestyle' AND os.l06_publication_code NOT IN ('Food', 'Prestige') THEN 1 ELSE 0 END) as publication_exclusion_records,
  'FY2025_Filter' as rule_name_3,
  SUM(CASE WHEN os.gl_hierarchy_code = 'FY2025' THEN 1 ELSE 0 END) as fy2025_records,
  'Sales_Channel_Filter' as rule_name_4,
  SUM(CASE WHEN os.os_level_7 = 'All Sales Channels' THEN 1 ELSE 0 END) as all_sales_channels_records,
  'Period_Control_Filter' as rule_name_5,
  SUM(CASE WHEN control.period_name IN ('CP', 'PY') THEN 1 ELSE 0 END) as period_control_records
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = calendar.fy_year_week_number
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  SAFE_CAST(os.fiscal_week_id AS STRING) as fiscal_week_id,
  os.gl_publication_code,
  pub.publication_name,
  os.day_of_week,
  os.os_level_7,
  SAFE_CAST(os.Actual_Amount AS NUMERIC) as actual_amount,
  SAFE_CAST(os.volume AS NUMERIC) as volume,
  SAFE_CAST(os.Budget_Volume AS NUMERIC) as budget_volume,
  SAFE_CAST(os.Forecast_Volume AS NUMERIC) as forecast_volume,
  SAFE_CAST(os.Last_Year_volume AS NUMERIC) as last_year_volume,
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) as fy_first_day_of_week,
  SAFE_CAST(calendar.fy_year AS INT64) as fy_year,
  SAFE_CAST(calendar.fy_month_of_year AS INT64) as fy_month_of_year
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND upper(os.os_level_6) = 'CIRCULATION'
ORDER BY
  calendar.fy_first_day_of_week DESC, os.Actual_Amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a baseline date in DATETIME_DIFF calculations to determine week differences. This date is fixed and does not dynamically adjust.', 'suggested_fix': 'Replace with a dynamic fiscal year start date from a calendar dimension table or a parameter. E.g., `(SELECT MIN(fy_first_day_of_week) FROM v_asl_DIM_calendar WHERE fy_year = EXTRACT(YEAR FROM CURRENT_DATE()))` or a dashboard parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-23', 'original_format': '2025-06-23 04:08:01.229999+00', 'context': 'Used as a fixed date in a date alignment calculation (clmn1_ in Q1).', 'suggested_fix': 'Replace with a dynamic date, potentially `CURRENT_DATE()` or a fiscal period end date from a calendar dimension table or a parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-04', 'original_format': '2025-06-04 07:28:59.451817+00', 'context': 'Used as a fixed date in date calculations (clmn1_, clmn2_ in Q3).', 'suggested_fix': 'Replace with a dynamic date, potentially `CURRENT_DATE()` or a fiscal period end date from a calendar dimension table or a parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'CIRCULATION'""], 'context': ""Filter on `os_level_6` to 'CIRCULATION'. While often static, it could be managed via a configuration table if business units change."", 'suggested_governance': 'Consider a `business_unit_config` table if this filter needs to be dynamic or managed centrally.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'FY2025'""], 'context': ""Filter on `gl_hierarchy_code` to 'FY2025'. This will make the dashboard obsolete after FY2025."", 'suggested_governance': 'Replace with a dynamic fiscal year derived from `CURRENT_DATE()` and the fiscal calendar, or a dashboard parameter for fiscal year selection.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Free News & Lifestyle'"", ""'Food'"", ""'Prestige'"", ""'Weekly Times'"", ""'Sunshine Coast'"", ""'Mackay'""], 'context': 'Exclusions of specific publication codes/names. These are hardcoded in `WHERE` clauses and `CASE` statements.', 'suggested_governance': 'Create a `publication_exclusion_list` table or a `publication_master` dimension with an `is_excluded` flag. Join to this table for filtering.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'All Sales Channels'""], 'context': ""Filter on `os_level_7` to 'All Sales Channels'."", 'suggested_governance': 'Manage sales channel categories in a `sales_channel_dimension` table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': 'Filter on `period_name` in `v_asl_DIM_period_control`.', 'suggested_governance': 'These seem to be standard fiscal period types, but if they are subject to change or new types are introduced, a `period_type_dimension` table would be beneficial.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'NT News'"", ""'Sunday Territorian'"", ""'The Daily Telegraph'"", ""'Herald Sun'"", ""'Mercury'"", 'etc.'], 'context': ""Extensive `CASE` statements for categorizing `publication_name` into broader groups (e.g., 'Northern Territory', 'The Daily Telegraph', 'Others', '6 Day Pubs')."", 'suggested_governance': 'These categorizations should be defined in the `v_asl_DIM_os_publication_hierachy` table itself or a separate `publication_grouping_dimension` table. This avoids complex, hardcoded `CASE` logic in queries.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'M-F'"", ""'SAT'"", ""'Sun'"", ""'Mon'"", ""'Tue'"", ""'Wed'"", ""'Thu'"", ""'Fri'"", ""'Weekday Entry'""], 'context': 'Categorization of `day_of_week`.', 'suggested_governance': 'The `v_asl_DIM_calendar` table should ideally contain these categorizations as columns (e.g., `is_weekday`, `is_weekend`, `day_type_category`).', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'thresholds', 'hardcoded_values': ['2', '5', '6', '7', '48', '2025'], 'context': ""Numeric literals used in complex volume calculations (e.g., `SAFE_DIVIDE(volume, 6)` for 6-day pubs, `(2025*100)+clmn38_`, `(clmn38_*2)*5`). The '2' in `CASE WHEN ('2' = '1') THEN clmn0_ WHEN ('2' = '2') THEN clmn51_ WHEN ('2' = '3') THEN clmn4_ ELSE 0 END` is particularly problematic as it hardcodes the selection of `Forecast_Volume`."", 'suggested_governance': ""These calculation factors and selection logic should be externalized. The '2' for selecting Forecast_Volume should be a parameter or a dynamic lookup based on a 'current scenario' setting. Calculation factors (6, 7, 2, 5) could be in a `calculation_factors_config` table."", 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded dates (e.g., '2024-07-03') with dashboard date parameters or dynamic fiscal period start/end dates from the calendar dimension."", ""Replace hardcoded fiscal year ('FY2025') with a dashboard parameter or derive it dynamically from `CURRENT_DATE()` and the fiscal calendar."", 'Externalize publication exclusion lists and categorization logic into dedicated dimension tables or configuration tables, joining them to the main fact data.', ""Parameterize the 'scenario selection' (e.g., 'Actual', 'Budget', 'Forecast', 'Last Year') instead of hardcoding '2' to select 'Forecast_Volume'."", 'Move complex business rules for volume calculations (e.g., 6-day pubs, M-F adjustments, Sportsman/Weekly Times specific logic) into UDFs or a configuration table that defines the calculation logic per publication type/day type.']",20,2104a3f5-9424-4087-a928-e67fecae789a
"-- This query attempts to consolidate metrics from different sources by joining on a common 'year' dimension.
-- Due to disparate grouping keys in the original queries, many columns will show NULLs where data does not align.
-- This provides a high-level, year-based overview of the identified metrics.

WITH RevenueData AS (
  SELECT
    t0.financial_year AS financial_year,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week_id,
    t0.source_system_code AS source_system_code,
    t0.source_publishing_division AS source_publishing_division,
    SUM(t0.gross_revenue_amount) AS total_gross_revenue_amount,
    SUM(SAFE_CAST(t0.financial_week AS INT64)) AS sum_financial_week_id_for_ordering -- This metric is unusual, likely for internal sorting/ordering
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.invoice_number = '-1'
    AND t0.source_system_code IN ('PLUTO', 'CPQ', 'ADPT')
    AND t0.financial_year IN ('2025') -- Hardcoded year
  GROUP BY
    t0.financial_year,
    SAFE_CAST(t0.financial_week AS INT64),
    t0.source_system_code,
    t0.source_publishing_division
),
OperatingStatementData AS (
  SELECT
    SUBSTR(t0.fiscal_week_id, 1, 4) AS fiscal_year, -- Extract year from fiscal_week_id
    t0.os_level_5 AS os_level_5,
    COUNT(1) AS record_count_os_level_5
  FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement` AS t0
  WHERE
    t0.fiscal_week_id IN ('202548', '202549', '202550', '202551') -- Hardcoded fiscal weeks
  GROUP BY
    SUBSTR(t0.fiscal_week_id, 1, 4),
    t0.os_level_5
),
DataLoadData AS (
  SELECT
    CAST(EXTRACT(YEAR FROM t0.data_load_datetime) AS STRING) AS data_load_year, -- Extract year from datetime
    t0.unified_publication_gl_code AS unified_publication_gl_code,
    DATETIME_TRUNC(t0.data_load_datetime, SECOND) AS data_load_datetime_truncated -- This is a dimension, not a metric
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.unified_publication_gl_code IN ('9707', '9655', '9658') -- Hardcoded GL codes
  GROUP BY -- Grouping by a datetime truncated to second will result in many rows, essentially distinct values
    CAST(EXTRACT(YEAR FROM t0.data_load_datetime) AS STRING),
    t0.unified_publication_gl_code,
    DATETIME_TRUNC(t0.data_load_datetime, SECOND)
)
SELECT
  COALESCE(R.financial_year, OS.fiscal_year, DL.data_load_year) AS common_year,
  R.financial_week_id,
  R.source_system_code,
  R.source_publishing_division,
  R.total_gross_revenue_amount,
  R.sum_financial_week_id_for_ordering,
  OS.os_level_5,
  OS.record_count_os_level_5,
  DL.unified_publication_gl_code,
  DL.data_load_datetime_truncated
FROM RevenueData R
FULL OUTER JOIN OperatingStatementData OS
  ON R.financial_year = OS.fiscal_year
FULL OUTER JOIN DataLoadData DL
  ON COALESCE(R.financial_year, OS.fiscal_year) = DL.data_load_year
ORDER BY
  common_year DESC
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling from the primary revenue table.
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.data_load_datetime AS DATE)) as unique_data_load_dates,
  COUNT(DISTINCT t0.financial_year) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(t0.financial_week AS STRING)) as unique_financial_weeks,
  COUNT(DISTINCT t0.source_system_code) as unique_source_systems,
  COUNT(DISTINCT t0.source_publishing_division) as unique_publishing_divisions,
  COUNT(DISTINCT t0.revenue_transaction_status) as unique_transaction_statuses,
  MIN(SAFE_CAST(t0.data_load_datetime AS DATE)) as earliest_data_load_date,
  MAX(SAFE_CAST(t0.data_load_datetime AS DATE)) as latest_data_load_date,
  MIN(t0.financial_year) as earliest_financial_year,
  MAX(t0.financial_year) as latest_financial_year,
  APPROX_COUNT_DISTINCT(CONCAT(t0.invoice_number, '_', t0.financial_week, '_', t0.source_system_code)) as approx_unique_transactions
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
LIMIT 1;","-- Quick validation that key metric calculations and filters work syntactically and return expected data.
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_calculation_test,
  CASE WHEN COUNT(DISTINCT t0.financial_year) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_presence_test,
  CASE WHEN MAX(SAFE_CAST(t0.data_load_datetime AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN COUNT(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_filter_test,
  CASE WHEN COUNT(CASE WHEN t0.invoice_number = '-1' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as invoice_number_filter_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","-- Query to validate key business logic and filter effectiveness.
SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_status_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_status_percentage,
  'Source Publishing Division Exclusion' as rule_name_2,
  SUM(CASE WHEN (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_division_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_division_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","-- Query to get representative sample data for further analysis from the primary revenue table.
SELECT
  t0.financial_year,
  SAFE_CAST(t0.financial_week AS INT64) AS financial_week_id,
  t0.gross_revenue_amount,
  t0.invoice_number,
  t0.revenue_transaction_status,
  t0.source_publishing_division,
  t0.source_system_code,
  SAFE_CAST(t0.data_load_datetime AS DATETIME) AS data_load_datetime,
  t0.unified_publication_gl_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY SAFE_CAST(t0.data_load_datetime AS DATE) DESC, t0.gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""'2025'"", 'context': 'Used as a filter for financial_year in revenue calculation (Query 1).', 'suggested_fix': 'Replace with a Looker Studio date parameter (e.g., @DS_FINANCIAL_YEAR) or a relative date function (e.g., EXTRACT(YEAR FROM CURRENT_DATE())).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202548, 202549, 202550, 202551', 'original_format': ""('202548', '202549', '202550', '202551')"", 'context': 'Used as a filter for fiscal_week_id in operating statement calculation (Query 2).', 'suggested_fix': 'Replace with a Looker Studio date range parameter that can derive fiscal weeks, or a dynamic calculation based on CURRENT_DATE().', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'Revenue transaction statuses used as a filter (Query 1).', 'suggested_governance': 'Use a governed reference table for transaction statuses, or a Looker Studio parameter for user selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'Source publishing division excluded from revenue calculation (Query 1).', 'suggested_governance': 'Manage exclusions in a configuration table or allow parameterization for flexibility.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'-1'""], 'context': 'Invoice number filter (Query 1). This value likely represents a specific type of transaction (e.g., internal, placeholder).', 'suggested_governance': ""Document the meaning of '-1' in a data dictionary. If it's a type, use a descriptive code from a reference table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'"", ""'CPQ'"", ""'ADPT'""], 'context': 'Source system codes used as a filter (Query 1).', 'suggested_governance': 'Use a governed reference table for source system codes, or a Looker Studio parameter for user selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'9707'"", ""'9655'"", ""'9658'""], 'context': 'Unified publication GL codes used as a filter (Query 3).', 'suggested_governance': 'Use a governed reference table for GL codes, or a Looker Studio parameter for user selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates and fiscal periods with Looker Studio date range parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', 'Replace hardcoded lookup values (e.g., transaction statuses, source systems, GL codes) with joins to governed reference tables or Looker Studio parameters for dynamic filtering.', 'Consider externalizing business rules (like exclusions) into configuration tables for easier maintenance and transparency.']",21,77c68c35-20ce-477a-b216-0c781d43a8ca
"-- This query consolidates all identified metrics and dimensions from the dashboard's SQL queries.
-- It applies all transformations and aggregations found, using a dynamic date range for broader analysis.
WITH raw_data AS (
  SELECT
    t0.GROSS_AMOUNT_DIFF,
    t0.advertiser_group,
    t0.advertiser_parent,
    t0.booking_line_id,
    t0.booking_number,
    t0.financial_short_month,
    t0.financial_year,
    t0.movement_date,
    t0.portfolio_group_name_sync,
    t0.portfolio_parent_group_name_sync,
    t0.revenue_sub_type,
    t0.revenue_type,
    t0.xtend_flag,
    t0.portfolio_conformed_name_sync -- Included from Query 3, assumed to be in base table
  FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
  WHERE
    SAFE_CAST(t0.movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY) -- Dynamic date range for analysis
    AND SAFE_CAST(t0.movement_date AS DATE) <= CURRENT_DATE()
),
transformed_data AS (
  SELECT
    GROSS_AMOUNT_DIFF,
    -- Derived Dimension: advertiser_group_cleaned (from clmn13_ / clmn7_ in original queries)
    CASE WHEN (advertiser_group IS NULL) THEN 'Nah' ELSE advertiser_group END AS advertiser_group_cleaned,
    advertiser_parent,
    booking_line_id,
    booking_number,
    financial_short_month,
    financial_year,
    movement_date,
    portfolio_group_name_sync,
    portfolio_parent_group_name_sync,
    revenue_sub_type,
    revenue_type,
    xtend_flag,
    portfolio_conformed_name_sync,

    -- Intermediate for parsed_financial_date (from clmn14_)
    CONCAT(SAFE_CAST(financial_year AS STRING),'-',SAFE_CAST(financial_short_month AS STRING),'-1') AS financial_date_str,

    -- Derived Boolean: is_digital_other (from clmn15_)
    (portfolio_parent_group_name_sync = 'DIGITAL OTHER') AS is_digital_other,
    -- Derived String: revenue_sub_type_prefix_6 (from clmn16_)
    SAFE.LEFT(revenue_sub_type, 6) AS revenue_sub_type_prefix_6,
    -- Derived String: revenue_sub_type_prefix_3 (from clmn17_)
    SAFE.LEFT(revenue_sub_type, 3) AS revenue_sub_type_prefix_3,
    -- Derived Boolean: is_digital_revenue_sub_type (from clmn18_)
    (revenue_sub_type = 'DIGITAL') AS is_digital_revenue_sub_type,

    -- Derived Metric: digital_gross_amount_diff (from clmn19_)
    CASE WHEN (revenue_type = 'DIGITAL') THEN GROSS_AMOUNT_DIFF ELSE 0 END AS digital_gross_amount_diff,
    -- Derived Metric: print_gross_amount_diff (from clmn20_)
    CASE WHEN (revenue_type = 'PRINT') THEN GROSS_AMOUNT_DIFF ELSE 0 END AS print_gross_amount_diff
  FROM raw_data
),
final_transformed_data AS (
  SELECT
    GROSS_AMOUNT_DIFF,
    advertiser_group_cleaned,
    advertiser_parent,
    booking_line_id,
    booking_number,
    financial_short_month,
    financial_year,
    movement_date,
    portfolio_group_name_sync,
    portfolio_parent_group_name_sync,
    revenue_sub_type,
    revenue_type,
    xtend_flag,
    portfolio_conformed_name_sync,
    digital_gross_amount_diff,
    print_gross_amount_diff,

    -- Derived Dimension: parsed_financial_date (from clmn21_)
    PARSE_DATE('%Y-%b-%d', financial_date_str) AS parsed_financial_date,
    -- Derived Boolean: is_pro_revenue_sub_type (from clmn22_)
    (revenue_sub_type_prefix_3 = 'PRO') AS is_pro_revenue_sub_type,
    -- Derived Boolean: is_digital_other_and_digital (from clmn23_)
    (is_digital_other AND is_digital_revenue_sub_type) AS is_digital_other_and_digital,
    -- Derived Dimension: revenue_category (from clmn24_)
    CASE
      WHEN (xtend_flag = 'Y') THEN 'XTEND'
      WHEN (is_pro_revenue_sub_type OR is_digital_other_and_digital) THEN 'PROGRAMMATIC'
      WHEN (revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
      WHEN (revenue_sub_type_prefix_6 = 'SUNDRY') THEN 'SUNDRY'
      ELSE revenue_sub_type
    END AS revenue_category
  FROM transformed_data
)
SELECT
  SAFE_CAST(movement_date AS DATE) AS movement_date,
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  SAFE_CAST(financial_short_month AS STRING) AS financial_short_month,
  advertiser_group_cleaned,
  advertiser_parent,
  booking_line_id,
  booking_number,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  revenue_sub_type,
  revenue_type,
  xtend_flag,
  portfolio_conformed_name_sync,
  parsed_financial_date,
  revenue_category,
  SUM(SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC)) AS total_gross_amount_diff,
  SUM(SAFE_CAST(digital_gross_amount_diff AS NUMERIC)) AS total_digital_gross_amount_diff,
  SUM(SAFE_CAST(print_gross_amount_diff AS NUMERIC)) AS total_print_gross_amount_diff
FROM final_transformed_data
GROUP BY
  movement_date,
  financial_year,
  financial_short_month,
  advertiser_group_cleaned,
  advertiser_parent,
  booking_line_id,
  booking_number,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  revenue_sub_type,
  revenue_type,
  xtend_flag,
  portfolio_conformed_name_sync,
  parsed_financial_date,
  revenue_category
ORDER BY movement_date DESC
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling.
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(movement_date AS DATE)) as unique_movement_dates,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT advertiser_group) as unique_advertiser_groups,
  COUNT(DISTINCT portfolio_parent_group_name_sync) as unique_portfolio_parent_groups,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  MIN(SAFE_CAST(movement_date AS DATE)) as earliest_movement_date,
  MAX(SAFE_CAST(movement_date AS DATE)) as latest_movement_date,
  APPROX_COUNT_DISTINCT(booking_line_id) as approx_unique_booking_line_ids
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","-- Quick validation that all metric calculations work syntactically and data is present.
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_amount_diff_test,
  CASE WHEN SUM(CASE WHEN revenue_type = 'DIGITAL' THEN SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as digital_revenue_test,
  CASE WHEN MAX(SAFE_CAST(movement_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(DISTINCT portfolio_parent_group_name_sync) > 0 THEN 'PASS' ELSE 'FAIL' END as portfolio_group_presence_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","-- Query to validate key business logic, specifically the 'Revenue Category' derivation.
WITH transformed_data AS (
  SELECT
    GROSS_AMOUNT_DIFF,
    xtend_flag,
    portfolio_parent_group_name_sync,
    revenue_sub_type,
    SAFE.LEFT(revenue_sub_type, 6) AS revenue_sub_type_prefix_6,
    SAFE.LEFT(revenue_sub_type, 3) AS revenue_sub_type_prefix_3,
    (portfolio_parent_group_name_sync = 'DIGITAL OTHER') AS is_digital_other,
    (revenue_sub_type = 'DIGITAL') AS is_digital_revenue_sub_type,
    (SAFE.LEFT(revenue_sub_type, 3) = 'PRO') AS is_pro_revenue_sub_type
  FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
  WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
)
SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Category Logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN xtend_flag = 'Y' THEN 1 ELSE 0 END) as xtend_category_count,
  SUM(CASE WHEN (is_pro_revenue_sub_type OR (is_digital_other AND is_digital_revenue_sub_type)) THEN 1 ELSE 0 END) as programmatic_category_count,
  SUM(CASE WHEN revenue_sub_type = 'DIGITAL' AND NOT (xtend_flag = 'Y' OR (is_pro_revenue_sub_type OR (is_digital_other AND is_digital_revenue_sub_type))) THEN 1 ELSE 0 END) as adpt_digital_category_count,
  SUM(CASE WHEN revenue_sub_type_prefix_6 = 'SUNDRY' AND NOT (xtend_flag = 'Y' OR (is_pro_revenue_sub_type OR (is_digital_other AND is_digital_revenue_sub_type)) OR revenue_sub_type = 'DIGITAL') THEN 1 ELSE 0 END) as sundry_category_count,
  SUM(CASE WHEN NOT (xtend_flag = 'Y' OR (is_pro_revenue_sub_type OR (is_digital_other AND is_digital_revenue_sub_type)) OR revenue_sub_type = 'DIGITAL' OR revenue_sub_type_prefix_6 = 'SUNDRY') THEN 1 ELSE 0 END) as other_category_count
FROM transformed_data;","-- Query to get representative sample data for further analysis, casting columns for safety.
SELECT
  SAFE_CAST(movement_date AS DATE) as movement_date,
  SAFE_CAST(financial_year AS STRING) as financial_year,
  SAFE_CAST(financial_short_month AS STRING) as financial_short_month,
  advertiser_group,
  advertiser_parent,
  booking_line_id,
  booking_number,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  portfolio_conformed_name_sync,
  revenue_sub_type,
  revenue_type,
  xtend_flag,
  SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC) as gross_amount_diff
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND GROSS_AMOUNT_DIFF IS NOT NULL
ORDER BY SAFE_CAST(movement_date AS DATE) DESC, SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-05-29', 'original_format': ""DATE '2025-05-29'"", 'context': 'Used as a fixed date filter for movement_date in Query 1.', 'suggested_fix': 'Replace with a dashboard date parameter or relative date function (e.g., CURRENT_DATE()).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-23', 'original_format': ""DATE '2025-06-23'"", 'context': 'Used as a fixed date filter for movement_date in Query 2.', 'suggested_fix': 'Replace with a dashboard date parameter or relative date function (e.g., CURRENT_DATE()).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'2025'""], 'context': 'Financial year filter in all queries.', 'suggested_governance': 'Use a parameter for financial year or derive dynamically (e.g., EXTRACT(YEAR FROM CURRENT_DATE())).', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM SA'"", ""'DIRECT SA WA'"", ""'CONSORTIUM NSW'"", ""'QLD IA C2'""], 'context': 'Filters on portfolio_parent_group_name_sync and portfolio_conformed_name_sync.', 'suggested_governance': 'Manage these values in a governed reference table (e.g., `dim_portfolio_groups`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Y'"", ""'DIGITAL'"", ""'PRINT'"", ""'PRO'"", ""'SUNDRY'"", ""'DIGITAL OTHER'""], 'context': ""Values used in CASE statements for 'Revenue Category' derivation and direct filters on `xtend_flag`, `revenue_type`, `revenue_sub_type`."", 'suggested_governance': 'Define these business rules and categories in a configuration table or a dedicated business logic layer, rather than hardcoding in SQL.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'data_quality_handling', 'hardcoded_values': [""'Nah'""], 'context': 'Replacement for NULL `advertiser_group` values.', 'suggested_governance': ""Standardize NULL handling across the organization, potentially mapping to a generic 'Unknown' value from a reference table."", 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters (e.g., `start_date`, `end_date`) or relative date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`).', 'Replace hardcoded financial years with a parameter or `EXTRACT(YEAR FROM CURRENT_DATE())`.', 'Replace hardcoded lookup values for portfolio groups, revenue types, and flags with joins to governed reference tables.', ""Externalize complex business logic (like 'Revenue Category' derivation) into UDFs or a dedicated transformation layer if it becomes more complex or needs frequent updates.""]",22,a1b901e6-c4fb-44bc-955a-3d7070c15829
"-- This query identifies the distinct filter values presented to the user by the dashboard, along with their counts.
-- It consolidates the output of the three provided Looker Studio filter queries.
WITH FilterOptions_FinMonth AS (
  SELECT
    CONCAT(SAFE_CAST(t0.StaticDays AS STRING), CONCAT(' (', SAFE_CAST(((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS STRING)), ' )') AS financial_period_display_static_days,
    CONCAT(SAFE_CAST(t0.NumDays AS STRING), CONCAT(' (', SAFE_CAST(((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS STRING)), ' )') AS financial_period_display_num_days,
    t0.Source AS source_value,
    t0.CurrentMonthFlag AS current_month_flag,
    'programmatic_fin_month' AS source_table
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
),
FilterOptions_CalMonth AS (
  SELECT
    t0.ProductType AS product_type_value,
    'programmatic_cal_month' AS source_table
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
)
SELECT
  'Financial Period Filter (Kargo)' AS filter_type,
  fm.financial_period_display_static_days AS filter_value,
  COUNT(*) AS distinct_value_count
FROM FilterOptions_FinMonth AS fm
WHERE fm.current_month_flag = 1 AND fm.source_value = 'Kargo'
GROUP BY 1, 2
UNION ALL
SELECT
  'Financial Period Filter (Non-AdX)' AS filter_type,
  fm.financial_period_display_num_days AS filter_value,
  COUNT(*) AS distinct_value_count
FROM FilterOptions_FinMonth AS fm
WHERE fm.current_month_flag = 1 AND (fm.source_value NOT IN ('AdX') OR fm.source_value IS NULL)
GROUP BY 1, 2
UNION ALL
SELECT
  'Product Type Filter' AS filter_type,
  cm.product_type_value AS filter_value,
  COUNT(*) AS distinct_value_count
FROM FilterOptions_CalMonth AS cm
GROUP BY 1, 2
ORDER BY filter_type, distinct_value_count DESC
LIMIT 100;","SELECT
  'programmatic_fin_month' AS table_name,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialMonthNumber AS STRING)) AS unique_financial_periods,
  COUNT(DISTINCT Source) AS unique_sources,
  MIN(SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialMonthNumber AS STRING)) AS earliest_financial_period,
  MAX(SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialMonthNumber AS STRING)) AS latest_financial_period
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
UNION ALL
SELECT
  'programmatic_cal_month' AS table_name,
  COUNT(*) AS total_records,
  NULL AS unique_financial_periods,
  COUNT(DISTINCT ProductType) AS unique_product_types,
  NULL AS earliest_financial_period,
  NULL AS latest_financial_period
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`
LIMIT 100;","SELECT
  'Validation Check - programmatic_fin_month' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_presence_test,
  CASE WHEN SUM(CASE WHEN CurrentMonthFlag = 1 THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS current_month_flag_test,
  CASE WHEN COUNT(DISTINCT Source) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_sources_test,
  CASE WHEN MAX(FinancialYear) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_year_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
UNION ALL
SELECT
  'Validation Check - programmatic_cal_month' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_presence_test,
  NULL AS current_month_flag_test,
  CASE WHEN COUNT(DISTINCT ProductType) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_product_types_test,
  NULL AS data_freshness_year_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'CurrentMonthFlag_Filter_Kargo' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN CurrentMonthFlag = 1 AND Source = 'Kargo' THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN CurrentMonthFlag = 1 AND Source = 'Kargo' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'CurrentMonthFlag_Filter_NonAdX' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN CurrentMonthFlag = 1 AND (Source NOT IN ('AdX') OR Source IS NULL) THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN CurrentMonthFlag = 1 AND (Source NOT IN ('AdX') OR Source IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
LIMIT 1;","SELECT
  'programmatic_fin_month' AS source_table,
  SAFE_CAST(CurrentMonthFlag AS STRING) AS current_month_flag,
  SAFE_CAST(FinancialMonthNumber AS STRING) AS financial_month_number,
  SAFE_CAST(FinancialYear AS STRING) AS financial_year,
  Source AS source_dimension,
  SAFE_CAST(StaticDays AS STRING) AS static_days,
  SAFE_CAST(NumDays AS STRING) AS num_days,
  NULL AS product_type
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Sample recent data
LIMIT 250
UNION ALL
SELECT
  'programmatic_cal_month' AS source_table,
  NULL AS current_month_flag,
  NULL AS financial_month_number,
  NULL AS financial_year,
  NULL AS source_dimension,
  NULL AS static_days,
  NULL AS num_days,
  ProductType AS product_type
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`
LIMIT 250;","[{'date_value': None, 'original_format': None, 'context': None, 'suggested_fix': None, 'impact': None, 'urgency': None}, {'variable_type': 'business_rules', 'hardcoded_values': ['1'], 'context': 'CurrentMonthFlag = 1 used to filter for the current financial month', 'suggested_governance': ""derive from a date dimension table or use a dashboard parameter to allow dynamic selection of 'current' period"", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Kargo'""], 'context': ""Source IN ('Kargo') used to filter for a specific advertising source"", 'suggested_governance': ""join to a governed 'source_master' lookup table or use a dashboard parameter for source selection"", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'AdX'""], 'context': ""Source NOT IN ('AdX') used to exclude a specific advertising source"", 'suggested_governance': ""join to a governed 'source_master' lookup table or use a dashboard parameter for source exclusion"", 'impact': 'high', 'maintenance_risk': 'high'}]","[""Replace hardcoded 'CurrentMonthFlag = 1' with a dynamic calculation based on CURRENT_DATE() and a date dimension table, or a dashboard parameter."", ""Replace hardcoded 'Source' values ('Kargo', 'AdX') with values from a governed reference table for Source dimensions, or allow user selection via dashboard parameters."", 'Consider creating a unified date dimension table to manage financial periods and current flags.']",23,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
"WITH base_data AS (
  SELECT
    t0.DOW_Today,
    t0.advertiser_parent,
    SAFE_CAST(t0.booking_line_created_date AS DATE) AS booking_line_created_date,
    SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
    t0.financial_short_month,
    SAFE_CAST(t0.financial_year AS INT64) AS financial_year,
    t0.fix_date_lod,
    SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
    t0.is_future_period_flag,
    SAFE_CAST(t0.pipeline AS NUMERIC) AS pipeline,
    SAFE_CAST(t0.relative_fy_month_offset AS INT64) AS relative_fy_month_offset,
    SAFE_CAST(t0.relative_fy_week_offset AS INT64) AS relative_fy_week_offset,
    SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
    t0.revenue_group_subtype,
    t0.revenue_type,
    t0.sales_segment_l_2_name_sync,
    SAFE_CAST(t0.ss_lgb AS NUMERIC) AS ss_lgb,
    t0.xtend_flag,
    DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney') AS anchor_date_fy25,
    DATE_SUB(DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney'), INTERVAL 365 DAY) AS anchor_date_fy24
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Filter for recent data
),
derived_data AS (
  SELECT
    DOW_Today,
    advertiser_parent,
    booking_line_created_date,
    financial_quarter,
    financial_short_month,
    financial_year,
    fix_date_lod,
    gross_revenue_amount,
    is_future_period_flag,
    pipeline,
    relative_fy_month_offset,
    relative_fy_week_offset,
    relative_fy_year_offset,
    revenue_group_subtype,
    revenue_type,
    sales_segment_l_2_name_sync,
    ss_lgb,
    xtend_flag,
    anchor_date_fy25,
    anchor_date_fy24,
    -- Derived fields (clmnX_ equivalents)
    (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick,
    SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_amount_k,
    (is_future_period_flag = 'N') AS is_not_future_period,
    (relative_fy_week_offset = 0) AS is_current_fy_week,
    (relative_fy_week_offset < 0) AS is_past_fy_week,
    (relative_fy_year_offset = 0) AS is_current_fy,
    (relative_fy_year_offset = -1) AS is_previous_fy,
    (relative_fy_year_offset = 1) AS is_next_fy,
    (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_group_subtype,
    (revenue_type = 'DIGITAL') AS is_digital_revenue_type,
    (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment_flag,
    SAFE_DIVIDE((ss_lgb * DOW_Today), 7) AS ss_lgb_weekly_avg,
    SAFE_DIVIDE(ss_lgb, 1000) AS ss_lgb_k,
    CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_or_xtend_dim,
    CASE WHEN (financial_short_month = 'Jul') THEN '1.Jul' WHEN (financial_short_month = 'Aug') THEN '2.Aug' WHEN (financial_short_month = 'Sep') THEN '3.Sep' WHEN (financial_short_month = 'Oct') THEN '4.Oct' WHEN (financial_short_month = 'Nov') THEN '5.Nov' WHEN (financial_short_month = 'Dec') THEN '6.Dec' WHEN (financial_short_month = 'Jan') THEN '7.Jan' WHEN (financial_short_month = 'Feb') THEN '8.Feb' WHEN (financial_short_month = 'Mar') THEN '9.Mar' WHEN (financial_short_month = 'Apr') THEN '10.Apr' WHEN (financial_short_month = 'May') THEN '11.May' WHEN (financial_short_month = 'Jun') THEN '12.Jun' ELSE NULL END AS financial_short_month_formatted
  FROM base_data
)
SELECT
  financial_year,
  financial_short_month,
  financial_short_month_formatted,
  financial_quarter,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync,
  revenue_type_or_xtend_dim,
  SUM(CASE WHEN is_current_fy AND is_current_fy_week THEN ss_lgb_weekly_avg ELSE 0 END) AS current_fy_current_week_forecasted_revenue,
  MAX(is_digital_other_sales_segment_flag) AS is_digital_other_sales_segment,
  SUM(CASE WHEN is_current_fy THEN gross_revenue_amount_k ELSE 0 END) AS current_fy_gross_revenue_k,
  SUM(CASE WHEN is_current_fy THEN gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue,
  SUM(CASE WHEN is_current_fy AND is_not_future_period THEN gross_revenue_amount_k ELSE 0 END) AS current_fy_non_future_gross_revenue_k,
  MAX(relative_fy_month_offset) AS latest_fy_month_offset,
  SUM(pipeline) AS total_pipeline,
  SUM(CASE WHEN is_current_fy THEN ss_lgb_k ELSE 0 END) AS current_fy_ss_lgb_k,
  SUM(CASE WHEN is_current_fy AND is_past_fy_week THEN ss_lgb ELSE 0 END) AS current_fy_past_week_ss_lgb,
  MAX(relative_fy_year_offset) AS latest_fy_year_offset,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(CASE WHEN is_previous_fy THEN gross_revenue_amount ELSE 0 END) AS previous_fy_gross_revenue,
  SUM(ss_lgb) AS total_ss_lgb,
  SUM(CASE WHEN is_previous_fy AND (SAFE_CAST(CASE WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_sales_segment_flag AND is_not_doubleclick) THEN fix_date_lod ELSE booking_line_created_date END AS DATETIME) <= SAFE_CAST(anchor_date_fy24 AS DATETIME)) THEN gross_revenue_amount ELSE 0 END) AS previous_fy_gross_revenue_filtered_by_date,
  SUM(CASE WHEN is_next_fy THEN gross_revenue_amount_k ELSE 0 END) AS next_fy_gross_revenue_k,
  SUM(CASE WHEN is_current_fy THEN gross_revenue_amount_k ELSE 0 END) - SUM(CASE WHEN is_current_fy THEN ss_lgb_k ELSE 0 END) AS current_fy_gross_revenue_minus_ss_lgb_k,
  SUM(CASE WHEN is_previous_fy THEN gross_revenue_amount_k ELSE 0 END) AS previous_fy_gross_revenue_k,
  SUM(CASE WHEN is_previous_fy AND (SAFE_CAST(CASE WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_sales_segment_flag AND is_not_doubleclick) THEN fix_date_lod ELSE booking_line_created_date END AS DATETIME) <= SAFE_CAST(anchor_date_fy24 AS DATETIME)) THEN gross_revenue_amount_k ELSE 0 END) AS previous_fy_gross_revenue_filtered_by_date_k
FROM derived_data
GROUP BY
  financial_year,
  financial_short_month,
  financial_short_month_formatted,
  financial_quarter,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync,
  revenue_type_or_xtend_dim
ORDER BY financial_year DESC, financial_quarter DESC, financial_short_month_formatted DESC
LIMIT 1000","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.booking_line_created_date AS DATE)) AS unique_booking_dates,
  COUNT(DISTINCT t0.advertiser_parent) AS unique_advertiser_parents,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS INT64)) AS unique_financial_years,
  MIN(SAFE_CAST(t0.booking_line_created_date AS DATE)) AS earliest_booking_date,
  MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) AS latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(t0.booking_line_created_date, t0.advertiser_parent, t0.gross_revenue_amount)) AS approx_unique_records_combo
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_positive_test,
  CASE WHEN COUNT(DISTINCT t0.financial_year) >= 2 THEN 'PASS' ELSE 'FAIL' END AS multiple_fy_data_test,
  CASE WHEN MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = 0 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS current_fy_data_exists_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1","SELECT
  'Business Rule Validation' AS validation_type,
  'Financial Month Mapping Accuracy' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN t0.financial_short_month = 'Jul' AND (CASE WHEN (t0.financial_short_month = 'Jul') THEN '1.Jul' WHEN (t0.financial_short_month = 'Aug') THEN '2.Aug' WHEN (t0.financial_short_month = 'Sep') THEN '3.Sep' WHEN (t0.financial_short_month = 'Oct') THEN '4.Oct' WHEN (t0.financial_short_month = 'Nov') THEN '5.Nov' WHEN (t0.financial_short_month = 'Dec') THEN '6.Dec' WHEN (t0.financial_short_month = 'Jan') THEN '7.Jan' WHEN (t0.financial_short_month = 'Feb') THEN '8.Feb' WHEN (t0.financial_short_month = 'Mar') THEN '9.Mar' WHEN (t0.financial_short_month = 'Apr') THEN '10.Apr' WHEN (t0.financial_short_month = 'May') THEN '11.May' WHEN (t0.financial_short_month = 'Jun') THEN '12.Jun' ELSE NULL END) = '1.Jul' THEN 1 ELSE 0 END) AS jul_mapping_correct,
  SUM(CASE WHEN t0.revenue_type = 'DIGITAL' AND t0.revenue_group_subtype = 'DIGITAL' AND t0.sales_segment_l_2_name_sync = 'Digital Other' AND t0.advertiser_parent != 'DOUBLECLICK' THEN 1 ELSE 0 END) AS digital_revenue_complex_filter_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 1","SELECT
  SAFE_CAST(t0.booking_line_created_date AS DATE) AS booking_date,
  t0.advertiser_parent,
  SAFE_CAST(t0.financial_year AS INT64) AS financial_year,
  t0.financial_short_month,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  SAFE_CAST(t0.pipeline AS NUMERIC) AS pipeline,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
  t0.revenue_type,
  t0.sales_segment_l_2_name_sync,
  SAFE_CAST(t0.ss_lgb AS NUMERIC) AS ss_lgb,
  t0.xtend_flag
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
ORDER BY SAFE_CAST(t0.booking_line_created_date AS DATE) DESC
LIMIT 500","{'hardcoded_dates': [{'date_value': '2025-01-06', 'original_format': ""DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney')"", 'context': 'Used as an anchor date for current FY calculations and previous FY comparisons (via -365 days). This date is fixed and will not update automatically.', 'suggested_fix': ""Replace with CURRENT_DATE() or a dashboard parameter for the 'as-of' date."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'"", ""'N'"", ""'DIGITAL'"", ""'Digital Other'"", ""'Y'""], 'context': 'These string literals are used to filter or categorize data based on specific business rules (e.g., advertiser type, future flag, revenue type, sales segment, XTEND flag).', 'suggested_governance': 'Create and join to a small reference table for these categories, or define them as dashboard parameters/variables.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '-1', '1'], 'context': 'Numeric values representing relative financial year/week offsets (current, previous, next).', 'suggested_governance': ""While these are common offsets, consider defining them as named constants or parameters if the definition of 'current', 'previous', 'next' might change or need flexibility."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'"", ""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'""], 'context': ""Month names used in a CASE statement to create a sorted month dimension ('1.Jul', '2.Aug', etc.)."", 'suggested_governance': 'Implement a proper date dimension table that includes financial month names and their sort keys, then join to it. This avoids hardcoding and allows for flexible financial year starts.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace the hardcoded anchor date ('2025-01-06') with a Looker Studio date parameter (e.g., `_DS_LAST_REFRESH_DATE` or a user-defined date parameter) to ensure calculations are always relative to the current reporting period."", ""Externalize business logic values (e.g., 'DOUBLECLICK', 'DIGITAL', 'Y' for flags) into a small configuration table or Looker Studio parameters/fields. This allows for easier updates without modifying SQL."", 'For month sorting, consider a date dimension table in BigQuery that contains `financial_short_month` and its corresponding sort order. This is more robust than hardcoded CASE statements.']",24,4d8074b2-17a8-48ba-babe-c536359b1f64
"WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    t0.revenue_type,
    t0.xtend_flag,
    t0.dw_asl_load_timestamp,
    -- Assumed columns for a ""Publications and Products Monthly"" dashboard
    SAFE_CAST(t0.revenue_amount AS NUMERIC) AS revenue_amount,
    SAFE_CAST(t0.ad_impressions AS INT64) AS ad_impressions,
    SAFE_CAST(t0.transaction_date AS DATE) AS transaction_date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')
),
calculated_dimensions AS (
  SELECT
    financial_year,
    revenue_group_subtype,
    unified_publication_name,
    revenue_amount,
    ad_impressions,
    transaction_date,
    dw_asl_load_timestamp,
    -- Calculated dimension: revenue_type_adjusted_for_xtend
    CASE
      WHEN (xtend_flag = 'Y') THEN 'XTEND'
      ELSE revenue_type
    END AS revenue_type_adjusted_for_xtend
  FROM base_data
),
final_dimensions AS (
  SELECT
    financial_year,
    revenue_group_subtype,
    unified_publication_name,
    revenue_amount,
    ad_impressions,
    transaction_date,
    dw_asl_load_timestamp,
    -- Calculated dimension: revenue_group_category
    CASE
      WHEN (revenue_type_adjusted_for_xtend = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)'
      WHEN (revenue_type_adjusted_for_xtend = 'PRINT') THEN 'PRINT'
      WHEN (revenue_type_adjusted_for_xtend = 'XTEND') THEN 'XTEND ONLY'
      ELSE NULL
    END AS revenue_group_category
  FROM calculated_dimensions
)
SELECT
  financial_year,
  unified_publication_name,
  revenue_group_subtype,
  revenue_group_category,
  DATETIME_TRUNC(SAFE_CAST(transaction_date AS DATETIME), MONTH) AS month_start_date,
  SUM(revenue_amount) AS total_revenue,
  SUM(ad_impressions) AS total_ad_impressions,
  MIN(DATETIME_TRUNC(dw_asl_load_timestamp, SECOND)) AS min_load_timestamp
FROM final_dimensions
WHERE
  -- Apply filter from query 1
  revenue_group_subtype IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE')
  -- Apply filter from query 2, assuming case-insensitive match for 'digital' to 'DIGITAL (excl.XTEND)'
  AND LOWER(revenue_group_category) = 'digital (excl.xtend)'
GROUP BY
  financial_year,
  unified_publication_name,
  revenue_group_subtype,
  revenue_group_category,
  month_start_date
ORDER BY
  financial_year DESC,
  month_start_date DESC,
  unified_publication_name
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT t0.unified_publication_name) as unique_publications,
  COUNT(DISTINCT t0.revenue_group_subtype) as unique_revenue_subtypes,
  COUNT(DISTINCT t0.revenue_type) as unique_revenue_types,
  COUNT(DISTINCT t0.xtend_flag) as unique_xtend_flags,
  MIN(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) as earliest_load_timestamp,
  MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) as latest_load_timestamp,
  MIN(SAFE_CAST(t0.transaction_date AS DATE)) as earliest_transaction_date, -- Assumed
  MAX(SAFE_CAST(t0.transaction_date AS DATE)) as latest_transaction_date,   -- Assumed
  APPROX_COUNT_DISTINCT(t0.dw_asl_load_timestamp) as approx_unique_load_timestamps
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') -- Apply relevant filters for context
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test, -- Assumed
  CASE WHEN COUNT(DISTINCT t0.unified_publication_name) > 0 THEN 'PASS' ELSE 'FAIL' END as publication_data_test,
  CASE WHEN MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 1 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_filter_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.revenue_type,
    t0.xtend_flag
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')
),
calculated_dimensions AS (
  SELECT
    financial_year,
    revenue_type,
    xtend_flag,
    CASE
      WHEN (xtend_flag = 'Y') THEN 'XTEND'
      ELSE revenue_type
    END AS revenue_type_adjusted_for_xtend
  FROM base_data
)
SELECT
  'Business Rule Validation' as validation_type,
  'XTEND_revenue_type_logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN xtend_flag = 'Y' AND revenue_type_adjusted_for_xtend = 'XTEND' THEN 1 ELSE 0 END) as xtend_flag_correctly_applied,
  SUM(CASE WHEN xtend_flag != 'Y' AND revenue_type_adjusted_for_xtend = revenue_type THEN 1 ELSE 0 END) as non_xtend_flag_correctly_applied,
  SAFE_DIVIDE(
    SUM(CASE WHEN xtend_flag = 'Y' AND revenue_type_adjusted_for_xtend = 'XTEND' THEN 1 ELSE 0 END) +
    SUM(CASE WHEN xtend_flag != 'Y' AND revenue_type_adjusted_for_xtend = revenue_type THEN 1 ELSE 0 END),
    COUNT(*)
  ) * 100 as logic_pass_rate_percentage
FROM calculated_dimensions
LIMIT 1;","SELECT 
  SAFE_CAST(t0.financial_year AS STRING) as financial_year,
  t0.revenue_group_subtype,
  t0.unified_publication_name,
  t0.revenue_type,
  t0.xtend_flag,
  SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP) as dw_asl_load_timestamp,
  SAFE_CAST(t0.revenue_amount AS NUMERIC) as revenue_amount, -- Assumed
  SAFE_CAST(t0.ad_impressions AS INT64) as ad_impressions,   -- Assumed
  SAFE_CAST(t0.transaction_date AS DATE) as transaction_date -- Assumed
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')
ORDER BY SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'2024'"", ""'2025'""], 'context': 'financial years used in WHERE clause', 'suggested_governance': 'parameterize or derive from a date dimension table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'DIGITAL'"", ""'PROGRAMMATIC EXCHANGE'"", ""'PROGRAMMATIC SOURCE'""], 'context': 'revenue group subtypes used in WHERE clause', 'suggested_governance': 'join to a `dim_revenue_subtype` lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Y'"", ""'XTEND'"", ""'DIGITAL'"", ""'PRINT'""], 'context': 'logic for `revenue_type_adjusted_for_xtend` and `revenue_group_category`', 'suggested_governance': 'externalize logic into a governed view or configuration table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'digital'""], 'context': 'filter value for `revenue_group_category`', 'suggested_governance': 'use a parameter or join to a `dim_revenue_category` lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded financial years with date parameters or relative date functions (e.g., `CURRENT_FINANCIAL_YEAR()`)', 'Replace hardcoded lookup values for revenue subtypes and categories with joins to governed reference tables', 'Use configuration tables for business rules (like XTEND logic) instead of hardcoded CASE statements']",25,61f1feb4-fc3e-4bee-b987-84c86cfe6425
"-- This query consolidates the core metrics and dimensions from the dashboard's underlying queries.
-- It applies the most common filters observed across the queries to represent the dashboard's typical scope.
-- All non-aggregated columns are included in the GROUP BY clause.
-- SAFE_CAST is used for robust type handling.

WITH OSandFACT AS (
    SELECT
        os.source_system_name,
        os.sub_source_system_name,
        SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
        os.gl_publication_code,
        os.day_of_week,
        os.state,
        os.os_level_1,
        os.os_level_2,
        os.os_level_3,
        os.os_level_4,
        os.os_level_5,
        os.os_level_6,
        os.os_level_7,
        os.os_level_8,
        os.os_level_9,
        os.os_level_10,
        os.os_level_11,
        os.os_level_12,
        SAFE_CAST(os.Estimate AS NUMERIC) AS Estimate,
        SAFE_CAST(os.True_Up_Adjustment AS NUMERIC) AS True_Up_Adjustment,
        SAFE_CAST(os.Actual_Amount AS NUMERIC) AS Actual_Amount,
        SAFE_CAST(os.volume AS NUMERIC) AS volume,
        SAFE_CAST(os.Last_Year_Actual_Amount AS NUMERIC) AS Last_Year_Actual_Amount,
        SAFE_CAST(os.Last_Year_volume AS NUMERIC) AS Last_Year_volume,
        SAFE_CAST(os.Budget_Draft_Amount AS NUMERIC) AS Budget_Draft_Amount,
        SAFE_CAST(os.Budget_Draft_Volume AS NUMERIC) AS Budget_Draft_Volume,
        SAFE_CAST(os.Budget_Amount AS NUMERIC) AS Budget_Amount,
        SAFE_CAST(os.Budget_Volume AS NUMERIC) AS Budget_Volume,
        SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS Forecast_Amount,
        SAFE_CAST(os.Forecast_Volume AS NUMERIC) AS Forecast_Volume,
        SAFE_CAST(os.Budget_Jan_Amount AS NUMERIC) AS Budget_Jan_Amount,
        SAFE_CAST(os.Budget_Jan_Volume AS NUMERIC) AS Budget_Jan_Volume,
        SAFE_CAST(os.Budget_Feb_Amount AS NUMERIC) AS Budget_Feb_Amount,
        SAFE_CAST(os.Budget_Feb_Volume AS NUMERIC) AS Budget_Feb_Volume,
        SAFE_CAST(os.Budget_Mar_Amount AS NUMERIC) AS Budget_Mar_Amount,
        SAFE_CAST(os.Budget_Mar_Volume AS NUMERIC) AS Budget_Mar_Volume,
        SAFE_CAST(os.Budget_Apr_Amount AS NUMERIC) AS Budget_Apr_Amount,
        SAFE_CAST(os.Budget_Apr_Volume AS NUMERIC) AS Budget_Apr_Volume,
        SAFE_CAST(os.Budget_May_Amount AS NUMERIC) AS Budget_May_Amount,
        SAFE_CAST(os.Budget_May_Volume AS NUMERIC) AS Budget_May_Volume,
        SAFE_CAST(os.Budget_Jun_Amount AS NUMERIC) AS Budget_Jun_Amount,
        SAFE_CAST(os.Budget_Jun_Volume AS NUMERIC) AS Budget_Jun_Volume,
        SAFE_CAST(os.Budget_Jul_Amount AS NUMERIC) AS Budget_Jul_Amount,
        SAFE_CAST(os.Budget_Jul_Volume AS NUMERIC) AS Budget_Jul_Volume,
        SAFE_CAST(os.Budget_Aug_Amount AS NUMERIC) AS Budget_Aug_Amount,
        SAFE_CAST(os.Budget_Aug_Volume AS NUMERIC) AS Budget_Aug_Volume,
        SAFE_CAST(os.Budget_Sep_Amount AS NUMERIC) AS Budget_Sep_Amount,
        SAFE_CAST(os.Budget_Sep_Volume AS NUMERIC) AS Budget_Sep_Volume,
        SAFE_CAST(os.Budget_Oct_Amount AS NUMERIC) AS Budget_Oct_Amount,
        SAFE_CAST(os.Budget_Oct_Volume AS NUMERIC) AS Budget_Oct_Volume,
        SAFE_CAST(os.Budget_Nov_Amount AS NUMERIC) AS Budget_Nov_Amount,
        SAFE_CAST(os.Budget_Nov_Volume AS NUMERIC) AS Budget_Nov_Volume,
        SAFE_CAST(os.Budget_Dec_Amount AS NUMERIC) AS Budget_Dec_Amount,
        SAFE_CAST(os.Budget_Dec_Volume AS NUMERIC) AS Budget_Dec_Volume,
        SAFE_CAST(os.Forecast_Q1F_Amount AS NUMERIC) AS Forecast_Q1F_Amount,
        SAFE_CAST(os.Forecast_Q1F_Volume AS NUMERIC) AS Forecast_Q1F_Volume,
        SAFE_CAST(os.Forecast_Q2F_Amount AS NUMERIC) AS Forecast_Q2F_Amount,
        SAFE_CAST(os.Forecast_Q2F_Volume AS NUMERIC) AS Forecast_Q2F_Volume,
        SAFE_CAST(os.Forecast_Q3F_Amount AS NUMERIC) AS Forecast_Q3F_Amount,
        SAFE_CAST(os.Forecast_Q3F_Volume AS NUMERIC) AS Forecast_Q3F_Volume,
        SAFE_CAST(os.Forecast_Q4F_Amount AS NUMERIC) AS Forecast_Q4F_Amount,
        SAFE_CAST(os.Forecast_Q4F_Volume AS NUMERIC) AS Forecast_Q4F_Volume,
        SAFE_CAST(os.Forecast_Q5F_Amount AS NUMERIC) AS Forecast_Q5F_Amount,
        SAFE_CAST(os.Forecast_Q5F_Volume AS NUMERIC) AS Forecast_Q5F_Volume,
        pub.l03_publication_code,
        pub.l12_publication_code,
        calendar.fy_week_of_year,
        calendar.fy_year_week_number,
        calendar.fy_first_day_of_week,
        calendar.fy_last_day_of_week,
        calendar.fy_month_of_year,
        calendar.fy_year_month_number,
        calendar.relative_fisc_year_number,
        calendar.relative_fisc_week_number,
        calendar.fy_month_of_year_short_name,
        calendar.month_end_flag,
        calendar.fy_quarter_of_year,
        calendar.fy_year,
        dep.department_code,
        os.gl_hierarchy_code AS gl_hierarchy_code_from_os, -- Renamed to avoid conflict with calendar.fy_year
        os.is_print_digital_flag,
        os.publication_name
    FROM
        `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN
        `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
    LEFT JOIN
        (
            SELECT DISTINCT
                SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
                SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
                SAFE_CAST(c.fy_first_day_of_week AS DATE) AS fy_first_day_of_week,
                SAFE_CAST(c.fy_last_day_of_week AS DATE) AS fy_last_day_of_week,
                SAFE_CAST(c.fy_month_of_year AS INT64) AS fy_month_of_year,
                SAFE_CAST(c.fy_year_month_number AS INT64) AS fy_year_month_number,
                SAFE_CAST(c.relative_fisc_year_number AS INT64) AS relative_fisc_year_number,
                SAFE_CAST(c.relative_fisc_week_number AS INT64) AS relative_fisc_week_number,
                c.fy_month_of_year_short_name,
                CASE
                    WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
                    ELSE 'N'
                END AS month_end_flag,
                SAFE_CAST(c.fy_quarter_of_year AS INT64) AS fy_quarter_of_year,
                SAFE_CAST(c.fy_year AS INT64) AS fy_year
            FROM
                `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
            JOIN
                `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
                ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64) AND control.period_name IN ('CP', 'PY')
        ) AS calendar
        ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
    LEFT JOIN
        `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
        ON os.os_level_12 = dep.department_code
)
SELECT
    fy_week_of_year,
    gl_hierarchy_code_from_os AS gl_hierarchy_code,
    is_print_digital_flag,
    l12_publication_code,
    os_level_4,
    os_level_5,
    os_level_6,
    os_level_7,
    os_level_9,
    publication_name,
    l03_publication_code,
    fy_year,
    SUM(Actual_Amount) AS total_actual_amount,
    SUM(Budget_Amount) AS total_budget_amount,
    SUM(Forecast_Amount) AS total_forecast_amount
FROM
    OSandFACT
WHERE
    gl_hierarchy_code_from_os = 'FY2025' -- Common filter across queries
    AND fy_week_of_year = 40 -- Common filter across queries
    AND os_level_4 IN ('Total Revenue', 'Total Expenses') -- Common filter across queries
GROUP BY
    fy_week_of_year,
    gl_hierarchy_code_from_os,
    is_print_digital_flag,
    l12_publication_code,
    os_level_4,
    os_level_5,
    os_level_6,
    os_level_7,
    os_level_9,
    publication_name,
    l03_publication_code,
    fy_year
ORDER BY
    fy_year DESC, fy_week_of_year DESC
LIMIT 1000;
","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS INT64)) as unique_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(gl_publication_code AS STRING)) as unique_gl_publication_codes,
  COUNT(DISTINCT SAFE_CAST(os_level_4 AS STRING)) as unique_os_level_4_categories,
  MIN(SAFE_CAST(fiscal_week_id AS INT64)) as earliest_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS INT64)) as latest_fiscal_week_id,
  SUM(CASE WHEN Actual_Amount IS NULL THEN 1 ELSE 0 END) as null_actual_amount_count,
  SUM(CASE WHEN Budget_Amount IS NULL THEN 1 ELSE 0 END) as null_budget_amount_count,
  SUM(CASE WHEN Forecast_Amount IS NULL THEN 1 ELSE 0 END) as null_forecast_amount_count
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  SAFE_CAST(fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`) - 500000 -- Sample recent data
LIMIT 1;
","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_positive_test,
  CASE WHEN SUM(SAFE_CAST(Budget_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as budget_amount_positive_test,
  CASE WHEN SUM(SAFE_CAST(Forecast_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as forecast_amount_positive_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(gl_hierarchy_code AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as gl_hierarchy_code_present_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(fy_week_of_year AS INT64)) > 0 THEN 'PASS' ELSE 'FAIL' END as fy_week_of_year_present_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(os_level_4 AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as os_level_4_present_test
FROM
  (
    SELECT
      t0.Actual_Amount,
      t0.Budget_Amount,
      t0.Forecast_Amount,
      t0.gl_hierarchy_code,
      calendar.fy_week_of_year,
      t0.os_level_4
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
    LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
        JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64) AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON SAFE_CAST(t0.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
    WHERE
      SAFE_CAST(t0.fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`) - 500000 -- Sample recent data
  )
LIMIT 1;
","SELECT
  'Business Rule Validation' as validation_type,
  'Fiscal Year and Week Consistency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' AND SAFE_CAST(fy_week_of_year AS INT64) = 40 THEN 1 ELSE 0 END) as records_matching_dashboard_filters,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' AND SAFE_CAST(fy_week_of_year AS INT64) = 40 THEN 1 ELSE 0 END), COUNT(*)) * 100 as match_rate_percentage
FROM
  (
    SELECT
      t0.gl_hierarchy_code,
      calendar.fy_week_of_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
    LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
        JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64) AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON SAFE_CAST(t0.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
    WHERE
      SAFE_CAST(t0.fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`) - 500000 -- Sample recent data
  )
LIMIT 1;
","SELECT
  SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
  os.gl_publication_code,
  os.os_level_4,
  os.os_level_5,
  os.os_level_6,
  os.os_level_7,
  os.os_level_9,
  os.gl_hierarchy_code,
  os.is_print_digital_flag,
  pub.l03_publication_code,
  pub.l12_publication_code,
  os.publication_name,
  SAFE_CAST(os.Actual_Amount AS NUMERIC) AS Actual_Amount,
  SAFE_CAST(os.Budget_Amount AS NUMERIC) AS Budget_Amount,
  SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS Forecast_Amount,
  SAFE_CAST(calendar.fy_week_of_year AS INT64) AS fy_week_of_year,
  SAFE_CAST(calendar.fy_year AS INT64) AS fy_year
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
  ON os.gl_publication_code = pub.publication_code
LEFT JOIN
  (
    SELECT DISTINCT
      SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
      SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
      SAFE_CAST(c.fy_year AS INT64) AS fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
    JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64) AND control.period_name IN ('CP', 'PY')
  ) AS calendar
  ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(os.fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`) - 500000 -- Sample recent data
ORDER BY
  SAFE_CAST(os.fiscal_week_id AS INT64) DESC
LIMIT 500;
","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'FY2025'""], 'context': 'Fiscal year filter applied to gl_hierarchy_code.', 'suggested_governance': 'Replace with a dynamic fiscal year parameter or derive from a period control table based on current date.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['40'], 'context': 'Fiscal week filter applied to fy_week_of_year.', 'suggested_governance': 'Replace with a dynamic fiscal week parameter or derive from a period control table based on current date.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Total Revenue'"", ""'Total Expenses'""], 'context': 'OS Level 4 categories filtered.', 'suggested_governance': 'Join to a `dim_os_level_4` lookup table or use a parameter for category selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'News Media Publishing'""], 'context': 'L03 Publication Code filtered.', 'suggested_governance': 'Join to a `dim_publication_hierarchy` table and filter by publication key.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Circulation'"", ""'Subscription'"", ""'Content Licensing'""], 'context': 'OS Level 6 categories filtered.', 'suggested_governance': 'Join to a `dim_os_level_6` lookup table or use a parameter for category selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': 'Period names used in `v_asl_DIM_period_control` join.', 'suggested_governance': 'These are likely standard, but if period definitions change, they should be managed via a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded fiscal year ('FY2025') and fiscal week (40) with dashboard parameters or dynamic calculations based on `CURRENT_DATE()` and the fiscal calendar."", ""Replace hardcoded category values (e.g., 'Total Revenue', 'Circulation') with joins to dedicated dimension/lookup tables to ensure data integrity and flexibility."", ""Implement a robust period control mechanism that dynamically determines 'CP' (Current Period) and 'PY' (Prior Year) based on the current fiscal date, rather than relying on static values in the `v_asl_DIM_period_control` table if its content is not dynamically updated.""]",26,b1c5901f-a535-42eb-870d-05cc025f7c27
"WITH base_data AS (
  SELECT
    t0.Source AS source_dimension,
    t0.Advertiser AS advertiser_dimension,
    t0.TransactionType AS transaction_type_dimension,
    SAFE_CAST(t0.PaidImpressions AS NUMERIC) AS paid_impressions,
    SAFE_CAST(t0.RevenueGross AS NUMERIC) AS revenue_gross,
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS month_start_date_dimension
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
  -- Apply a general date filter for analysis, not the specific hardcoded one from the dashboard
  WHERE SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
)
SELECT
  month_start_date_dimension,
  source_dimension,
  advertiser_dimension,
  transaction_type_dimension,
  SUM(paid_impressions) AS total_paid_impressions,
  SUM(revenue_gross) AS total_revenue_gross,
  COUNT(*) AS record_count
FROM base_data
GROUP BY
  month_start_date_dimension,
  source_dimension,
  advertiser_dimension,
  transaction_type_dimension
ORDER BY
  month_start_date_dimension DESC,
  advertiser_dimension ASC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE)) as unique_month_start_dates,
  COUNT(DISTINCT Advertiser) as unique_advertisers,
  COUNT(DISTINCT Source) as unique_sources,
  COUNT(DISTINCT TransactionType) as unique_transaction_types,
  MIN(SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE)) as earliest_date,
  MAX(SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE)) as latest_date,
  SUM(CASE WHEN PaidImpressions IS NULL THEN 1 ELSE 0 END) as null_paid_impressions_count,
  SUM(CASE WHEN RevenueGross IS NULL THEN 1 ELSE 0 END) as null_revenue_gross_count
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`
WHERE SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(RevenueGross AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_test,
  CASE WHEN SUM(SAFE_CAST(PaidImpressions AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as impressions_test,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_test,
  CASE WHEN MAX(SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`
WHERE SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","WITH base_data AS (
  SELECT
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS month_start_date,
    Advertiser,
    TransactionType,
    PaidImpressions,
    RevenueGross
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month`
  WHERE SAFE_CAST(DATE(CalendarYear, CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
)
SELECT
  'Business Rule Validation' as validation_type,
  'Guaranteed Transaction Type Filter' as rule_name,
  COUNT(*) as total_records_in_period,
  SUM(CASE WHEN TransactionType = 'Guaranteed' THEN 1 ELSE 0 END) as records_matching_guaranteed_filter,
  SAFE_DIVIDE(SUM(CASE WHEN TransactionType = 'Guaranteed' THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_guaranteed,
  'Chemist Warehouse Advertiser Filter' as rule_name_2,
  SUM(CASE WHEN Advertiser = 'Chemist Warehouse *' THEN 1 ELSE 0 END) as records_matching_chemist_warehouse_filter,
  SAFE_DIVIDE(SUM(CASE WHEN Advertiser = 'Chemist Warehouse *' THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_chemist_warehouse,
  'Specific Date Filter (2025-06-01)' as rule_name_3,
  SUM(CASE WHEN month_start_date = DATE '2025-06-01' THEN 1 ELSE 0 END) as records_matching_specific_date_filter,
  SAFE_DIVIDE(SUM(CASE WHEN month_start_date = DATE '2025-06-01' THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_specific_date
FROM base_data
LIMIT 1;","SELECT
  t0.Source AS source_dimension,
  t0.Advertiser AS advertiser_dimension,
  t0.TransactionType AS transaction_type_dimension,
  SAFE_CAST(t0.PaidImpressions AS NUMERIC) AS paid_impressions,
  SAFE_CAST(t0.RevenueGross AS NUMERIC) AS revenue_gross,
  SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS month_start_date_dimension,
  t0.CalendarMonth,
  t0.CalendarYear
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
ORDER BY month_start_date_dimension DESC, t0.RevenueGross DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-01', 'original_format': ""DATE '2025-06-01'"", 'context': ""used as a specific filter for 'Month Start Date'"", 'suggested_fix': 'replace with a Looker Studio date parameter or relative date function (e.g., CURRENT_DATE())', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Guaranteed'""], 'context': 'TransactionType filter in one query', 'suggested_governance': 'use a Looker Studio parameter or join to a `transaction_type_master` reference table', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Chemist Warehouse *'""], 'context': 'Advertiser filter in one query', 'suggested_governance': 'use a Looker Studio parameter or join to an `advertiser_master` reference table', 'impact': 'medium', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)`).', ""Replace hardcoded lookup values for 'Advertiser' and 'TransactionType' with joins to governed reference tables or Looker Studio parameters for user selection."", 'Consider creating a configuration table for common business rules/filters to centralize management.']",27,87651b69-c43e-471f-9c4b-98df1208a844
"WITH base_filtered_data AS (
  SELECT
    t0.fin_adtype_name,
    t0.revenue_transaction_status,
    t0.sales_segment_l_2_name_sync,
    t0.source_publishing_division,
    t0.booking_number,
    t0.financial_year,
    t0.adsize_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Booked', 'Billed')
    AND (SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026') -- Filter for relevant years
)
SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year_dimension,
  COUNT(*) AS total_records_in_filtered_scope,
  COUNT(DISTINCT
    CASE
      WHEN SAFE_CAST(fin_adtype_name AS STRING) IN (
        'Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)',
        'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)',
        'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)'
      )
      THEN SAFE_CAST(sales_segment_l_2_name_sync AS STRING)
    END
  ) AS distinct_sales_segments_q1_scope,
  COUNT(DISTINCT
    CASE
      WHEN SAFE_CAST(fin_adtype_name AS STRING) IN (
        'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)'
      )
      AND SAFE_CAST(financial_year AS STRING) IN ('2026', '2025')
      THEN SAFE_CAST(booking_number AS STRING)
    END
  ) AS distinct_booking_numbers_q2_scope,
  COUNT(DISTINCT
    CASE
      WHEN SAFE_CAST(fin_adtype_name AS STRING) IN (
        'Audio (Non-Targeted)', 'Audio (Targeted)', 'Events (Non-Targeted)',
        'Native (Non-Targeted)', 'Native (Targeted)',
        'Rich Media (Non-Targeted)', 'Rich Media (Targeted)',
        'Social Display (Non-Targeted)', 'Social Display (Targeted)',
        'Standard Display (Non-Targeted)', 'Standard Display (Targeted)',
        'TTIV (Targeted)', 'TTIV (Non-Targeted)'
      )
      AND SAFE_CAST(financial_year AS STRING) = '2025'
      THEN SAFE_CAST(adsize_name AS STRING)
    END
  ) AS distinct_ad_sizes_q3_scope
FROM
  base_filtered_data
GROUP BY
  financial_year_dimension
ORDER BY
  financial_year_dimension DESC
LIMIT 100","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(fin_adtype_name AS STRING)) as unique_ad_types,
  COUNT(DISTINCT SAFE_CAST(revenue_transaction_status AS STRING)) as unique_transaction_statuses,
  COUNT(DISTINCT SAFE_CAST(source_publishing_division AS STRING)) as unique_publishing_divisions,
  COUNT(DISTINCT SAFE_CAST(sales_segment_l_2_name_sync AS STRING)) as unique_sales_segments,
  COUNT(DISTINCT SAFE_CAST(booking_number AS STRING)) as unique_booking_numbers,
  COUNT(DISTINCT SAFE_CAST(adsize_name AS STRING)) as unique_ad_sizes,
  MIN(SAFE_CAST(financial_year AS STRING)) as earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) as latest_financial_year
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) >= SAFE_CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 2 AS STRING)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as records_exist_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) >= 2 THEN 'PASS' ELSE 'FAIL' END as multiple_financial_years_test,
  CASE WHEN COUNT(DISTINCT CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as booked_billed_status_test,
  CASE WHEN COUNT(DISTINCT CASE WHEN SAFE_CAST(fin_adtype_name AS STRING) IS NOT NULL THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as ad_type_data_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Common Filter Application Rate' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_booked_billed,
  SUM(CASE WHEN (SAFE_CAST(source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_not_medium_rare,
  SUM(CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') AND (SAFE_CAST(source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_common_filters,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') AND (SAFE_CAST(source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as common_filters_pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
LIMIT 1;","SELECT
  SAFE_CAST(financial_year AS STRING) as financial_year,
  SAFE_CAST(fin_adtype_name AS STRING) as fin_adtype_name,
  SAFE_CAST(revenue_transaction_status AS STRING) as revenue_transaction_status,
  SAFE_CAST(source_publishing_division AS STRING) as source_publishing_division,
  SAFE_CAST(sales_segment_l_2_name_sync AS STRING) as sales_segment_l_2_name_sync,
  SAFE_CAST(booking_number AS STRING) as booking_number,
  SAFE_CAST(adsize_name AS STRING) as adsize_name
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
ORDER BY financial_year DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2026', 'original_format': 'STRING', 'context': 'Used as a specific financial year filter in query 2.', 'suggested_fix': 'Replace with a dynamic calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE()) + 1` for next financial year) or a parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025', 'original_format': 'STRING', 'context': 'Used as a specific financial year filter in query 2 and query 3.', 'suggested_fix': 'Replace with a dynamic calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` for current financial year) or a parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'Transaction statuses used as a filter.', 'suggested_governance': 'Join to a `transaction_status_lookup` table or use a configuration table for valid statuses.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'Specific publishing division excluded from results.', 'suggested_governance': ""Join to a `publishing_division_lookup` table with an 'is_excluded' flag, or use a configuration table for excluded divisions."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Audio (Targeted)'"", ""'Audio (Non-Targeted)'"", ""'Events (Non-Targeted)'"", ""'Events (Targeted)'"", ""'Rich Media (Non-Targeted)'"", ""'Rich Media (Targeted)'"", ""'Social Display (Targeted)'"", ""'Social Display (Non-Targeted)'"", ""'Standard Display (Targeted)'"", ""'Standard Display (Non-Targeted)'"", ""'TTIV (Targeted)'"", ""'TTIV (Non-Targeted)'"", ""'Content Discovery (Non-Targeted)'"", ""'Content Discovery (Targeted)'"", ""'Native (Non-Targeted)'"", ""'Native (Targeted)'""], 'context': 'Specific ad type names used as filters across multiple queries.', 'suggested_governance': 'Create a `fin_adtype_name_lookup` table with categories and join to it, or use a configuration table for ad type groupings.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded financial years with date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'Replace hardcoded lookup values for `fin_adtype_name`, `revenue_transaction_status`, and `source_publishing_division` with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., excluded divisions, valid statuses) instead of hardcoded logic within queries.']",28,f65a9149-93b4-4aa9-aef6-d12002853222
"WITH base_data AS (
  SELECT
    t0.scenario AS scenario_dimension
  FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
)
SELECT
  scenario_dimension,
  COUNT(1) AS count_by_scenario,
  SUM(COUNT(1)) OVER () AS total_records_count
FROM base_data
GROUP BY scenario_dimension
ORDER BY count_by_scenario DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.scenario AS STRING)) as unique_scenarios,
  'No date columns identified in provided queries' as date_column_status
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(1) > 0 THEN 'PASS' ELSE 'FAIL' END as records_exist_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.scenario AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as scenarios_exist_test,
  'No date freshness test possible without date column' as date_freshness_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'scenario_null_check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.scenario IS NOT NULL THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.scenario IS NOT NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1;","SELECT
  SAFE_CAST(t0.scenario AS STRING) as scenario_dimension
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': []}",[],29,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
"WITH base_data AS (
  SELECT
    t0.publication_date AS publication_date,
    t0.advertiser_name AS advertiser_name,
    t0.agency_group AS agency_group,
    t0.employee_name AS employee_name,
    t0.financial_year AS financial_year,
    t0.financial_short_month AS financial_short_month,
    t0.portfolio_conformed_name_current AS portfolio_conformed_name_current,
    t0.unified_publication_name AS unified_publication_name,
    t0.dow AS day_of_week,
    -- Inferred metrics based on dashboard type (Adsales Details) and common finance/adsales data
    SAFE_CAST(t0.total_booked_value AS NUMERIC) AS total_booked_value, -- Assuming this column exists
    SAFE_CAST(t0.total_impressions AS NUMERIC) AS total_impressions -- Assuming this column exists
  FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
  WHERE SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Filter for recent data
)
SELECT
  publication_date,
  advertiser_name,
  agency_group,
  employee_name,
  financial_year,
  financial_short_month,
  portfolio_conformed_name_current,
  unified_publication_name,
  day_of_week,
  SUM(total_booked_value) AS sum_total_booked_value,
  SUM(total_impressions) AS sum_total_impressions,
  COUNT(DISTINCT advertiser_name) AS distinct_advertisers,
  COUNT(DISTINCT employee_name) AS distinct_employees,
  COUNT(*) AS record_count
FROM base_data
GROUP BY
  publication_date,
  advertiser_name,
  agency_group,
  employee_name,
  financial_year,
  financial_short_month,
  portfolio_conformed_name_current,
  unified_publication_name,
  day_of_week
ORDER BY publication_date DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.publication_date AS DATE)) AS unique_publication_dates,
  COUNT(DISTINCT t0.advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT t0.agency_group) AS unique_agency_groups,
  COUNT(DISTINCT t0.employee_name) AS unique_employees,
  COUNT(DISTINCT t0.financial_year) AS unique_financial_years,
  COUNT(DISTINCT t0.financial_short_month) AS unique_financial_months,
  MIN(SAFE_CAST(t0.publication_date AS DATE)) AS earliest_publication_date,
  MAX(SAFE_CAST(t0.publication_date AS DATE)) AS latest_publication_date,
  SUM(CASE WHEN t0.total_booked_value IS NULL THEN 1 ELSE 0 END) AS null_total_booked_value_count, -- Inferred column
  SUM(CASE WHEN t0.total_impressions IS NULL THEN 1 ELSE 0 END) AS null_total_impressions_count -- Inferred column
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY);","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.total_booked_value AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_booked_value_test,
  CASE WHEN SUM(SAFE_CAST(t0.total_impressions AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_impressions_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS distinct_advertiser_test,
  CASE WHEN MAX(SAFE_CAST(t0.publication_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(*) > 1000 THEN 'PASS' ELSE 'FAIL' END AS sufficient_data_volume_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Financial vs Calendar Month/Year and Current vs Sync Portfolio Selection' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN t0.financial_short_month IS NOT NULL THEN 1 ELSE 0 END) AS financial_month_populated_count,
  SUM(CASE WHEN t0.calendar_month_short_name IS NOT NULL THEN 1 ELSE 0 END) AS calendar_month_populated_count,
  SUM(CASE WHEN t0.financial_year IS NOT NULL THEN 1 ELSE 0 END) AS financial_year_populated_count,
  SUM(CASE WHEN t0.calendar_year IS NOT NULL THEN 1 ELSE 0 END) AS calendar_year_populated_count,
  SUM(CASE WHEN t0.portfolio_conformed_name_current IS NOT NULL THEN 1 ELSE 0 END) AS current_portfolio_populated_count,
  SUM(CASE WHEN t0.portfolio_conformed_name_sync IS NOT NULL THEN 1 ELSE 0 END) AS sync_portfolio_populated_count,
  -- Validate that the hardcoded 'Fin'/'Curr' logic effectively selects the intended columns
  SUM(CASE WHEN 'Fin' = 'Fin' AND t0.financial_short_month IS NOT NULL THEN 1 ELSE 0 END) AS effective_month_is_financial_month_count,
  SUM(CASE WHEN 'Fin' = 'Fin' AND t0.financial_year IS NOT NULL THEN 1 ELSE 0 END) AS effective_year_is_financial_year_count,
  SUM(CASE WHEN 'Curr' = 'Curr' AND t0.portfolio_conformed_name_current IS NOT NULL THEN 1 ELSE 0 END) AS effective_portfolio_is_current_portfolio_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  SAFE_CAST(t0.publication_date AS DATE) AS publication_date,
  t0.advertiser_name,
  t0.agency_group,
  t0.employee_name,
  t0.financial_year,
  t0.financial_short_month,
  t0.portfolio_conformed_name_current,
  t0.unified_publication_name,
  t0.dow,
  SAFE_CAST(t0.total_booked_value AS NUMERIC) AS total_booked_value, -- Inferred column
  SAFE_CAST(t0.total_impressions AS NUMERIC) AS total_impressions -- Inferred column
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND t0.total_booked_value IS NOT NULL -- Ensure some data with values
ORDER BY SAFE_CAST(t0.publication_date AS DATE) DESC, SAFE_CAST(t0.total_booked_value AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'Used as a specific financial year filter for publication dates.', 'suggested_fix': 'Replace with a dashboard parameter or dynamic calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE()) + 1`).', 'impact': 'high', 'urgency': 'medium'}, {'date_value': '2024', 'original_format': '2024', 'context': 'Used as an exclusion financial year filter.', 'suggested_fix': 'Replace with a dashboard parameter or dynamic calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'impact': 'high', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Fin'"", ""'Curr'""], 'context': 'Constants in CASE statements that effectively hardcode the selection of financial period columns (`financial_short_month`, `financial_year`) over calendar ones, and `portfolio_conformed_name_current` over `portfolio_conformed_name_sync`.', 'suggested_governance': ""If the choice is truly static, simplify the SQL by removing the `CASE` statement. If it's meant to be dynamic, parameterize the selection (e.g., `CASE WHEN @period_type = 'Fin' THEN ...`)."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Monday'"", ""'Tuesday'"", ""'Wednesday'"", ""'Thursday'"", ""'Friday'"", ""'Saturday'"", ""'Sunday'""], 'context': 'Used for custom sorting/display of day of week.', 'suggested_governance': ""Use a dedicated lookup table for day names and their sort order, or use BigQuery's built-in date formatting functions with appropriate locale settings."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'NSW IA C3'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Marley-Kale Kentia'"", ""'Australian Meat Processor Corporation'"", ""'Australian Pork'"", ""'CMC Markets'"", ""'Coco Republic'"", ""'Dry July Limited'"", ""'Fred Hollows Foundation'"", ""'LGT Crestone'"", ""'Vogue Australia'""], 'context': 'Specific values used in `IN` or `=` filters for dimensions like portfolio, month, employee, advertiser, and publication.', 'suggested_governance': 'These values should be driven by dashboard parameters (e.g., dropdowns) or joined from governed reference tables (e.g., `advertiser_master`, `employee_directory`, `publication_list`).', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates (years) with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'Replace hardcoded lookup values for dimensions (e.g., advertiser names, employee names, publication names, portfolio names, months) with dashboard parameters or joins to governed reference tables.', ""Consider parameterizing the 'Fin'/'Curr' selection logic if there's a business need to dynamically switch between financial/calendar or current/sync views.""]",30,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
"WITH base_data AS (
  SELECT
    t0.account_number,
    t0.advertiser_name,
    t0.advertiser_parent,
    SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
    SAFE_CAST(t0.financial_year AS INT64) AS financial_year,
    t0.invoice_number,
    t0.revenue_group_subtype,
    t0.revenue_transaction_status,
    t0.revenue_type,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.unified_publication_name,
    SAFE_CAST(t0.gross_revenue_ex_adj_amount AS NUMERIC) AS gross_revenue_ex_adj_amount,
    SAFE_CAST(t0.rebate_3_amount AS NUMERIC) AS rebate_3_amount,
    SAFE_CAST(t0.adjustment_amount AS NUMERIC) AS adjustment_amount,
    SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND t0.financial_year IS NOT NULL
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.revenue_type IN ('Print', 'Digital')
    AND t0.revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital')
    AND SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)) -- Dynamic filter for recent data
)
SELECT
  financial_year,
  financial_month,
  account_number,
  advertiser_name,
  advertiser_parent,
  revenue_type,
  source_publishing_division,
  SUM(gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj,
  SUM(rebate_3_amount) AS total_rebate_3_amount,
  SUM(adjustment_amount) AS total_adjustment_amount,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  COUNT(DISTINCT invoice_number) AS distinct_invoices,
  COUNT(DISTINCT account_number) AS distinct_accounts
FROM base_data
GROUP BY
  financial_year,
  financial_month,
  account_number,
  advertiser_name,
  advertiser_parent,
  revenue_type,
  source_publishing_division
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.account_number) as unique_account_numbers,
  COUNT(DISTINCT t0.advertiser_name) as unique_advertiser_names,
  COUNT(DISTINCT t0.invoice_number) as unique_invoice_numbers,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS INT64)) as unique_financial_years,
  MIN(SAFE_CAST(t0.financial_year AS INT64)) as earliest_financial_year,
  MAX(SAFE_CAST(t0.financial_year AS INT64)) as latest_financial_year,
  COUNT(DISTINCT t0.revenue_transaction_status) as unique_transaction_statuses,
  COUNT(DISTINCT t0.revenue_type) as unique_revenue_types,
  COUNT(DISTINCT t0.revenue_group_subtype) as unique_revenue_subtypes,
  COUNT(DISTINCT t0.source_publishing_division) as unique_publishing_divisions,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) as null_gross_revenue_amount_count,
  SUM(CASE WHEN t0.rebate_3_amount IS NULL THEN 1 ELSE 0 END) as null_rebate_3_amount_count
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR))
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_positive_test,
  CASE WHEN SUM(SAFE_CAST(t0.rebate_3_amount AS NUMERIC)) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as rebate_3_amount_exists_test,
  CASE WHEN COUNT(DISTINCT t0.account_number) > 0 THEN 'PASS' ELSE 'FAIL' END as distinct_accounts_test,
  CASE WHEN MAX(SAFE_CAST(t0.financial_year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as booked_billed_status_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Filter' as rule_name_1,
  COUNT(*) as records_tested_1,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_status_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as status_pass_rate_percentage,
  'Source Publishing Division Filter' as rule_name_2,
  SUM(CASE WHEN (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_division_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as division_pass_rate_percentage,
  'Revenue Type Filter' as rule_name_3,
  SUM(CASE WHEN t0.revenue_type IN ('Print', 'Digital') THEN 1 ELSE 0 END) as records_passing_revenue_type_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_type IN ('Print', 'Digital') THEN 1 ELSE 0 END), COUNT(*)) * 100 as revenue_type_pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))
LIMIT 1;","SELECT
  t0.account_number,
  t0.advertiser_name,
  t0.advertiser_parent,
  SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
  SAFE_CAST(t0.financial_year AS INT64) AS financial_year,
  t0.invoice_number,
  t0.revenue_group_subtype,
  t0.revenue_transaction_status,
  t0.revenue_type,
  t0.source_publishing_division,
  t0.source_system_code,
  t0.unified_publication_name,
  SAFE_CAST(t0.gross_revenue_ex_adj_amount AS NUMERIC) AS gross_revenue_ex_adj_amount,
  SAFE_CAST(t0.rebate_3_amount AS NUMERIC) AS rebate_3_amount,
  SAFE_CAST(t0.adjustment_amount AS NUMERIC) AS adjustment_amount,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS INT64) >= EXTRACT(YEAR FROM DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))
ORDER BY SAFE_CAST(t0.financial_year AS INT64) DESC, SAFE_CAST(t0.financial_month AS INT64) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': 'STRING', 'context': ""Used as a specific financial year filter (clmn5_ IN ('2025'))"", 'suggested_fix': 'Replace with a parameter or relative year function (e.g., EXTRACT(YEAR FROM CURRENT_DATE()))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '10.000000', 'original_format': 'FLOAT64', 'context': 'Used as a specific financial month filter (clmn17_ IN (10.000000))', 'suggested_fix': 'Replace with a parameter or relative month function (e.g., EXTRACT(MONTH FROM CURRENT_DATE()))', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'Revenue transaction status filter (clmn11_ IN (...))', 'suggested_governance': ""Join to a 'revenue_transaction_status_lookup' table or use a configuration table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'Exclusion filter for source publishing division (clmn13_ != ...)', 'suggested_governance': 'Manage excluded divisions in a configuration table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Print'"", ""'Digital'""], 'context': 'Revenue type filter (clmn12_ IN (...))', 'suggested_governance': ""Join to a 'revenue_type_lookup' table or use a configuration table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic Source'"", ""'Print'"", ""'Digital'""], 'context': 'Revenue group subtype filter (clmn10_ IN (...))', 'suggested_governance': ""Join to a 'revenue_group_subtype_lookup' table or use a configuration table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'4039072'""], 'context': 'Specific account number filter (clmn0_ = ...)', 'suggested_governance': 'Parameterize the account number or manage specific accounts in a configuration table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['0.000000'], 'context': 'Rebate amount filter (clmn9_ != 0.000000)', 'suggested_governance': 'If this threshold can change, parameterize it or manage in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded financial years and months with date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`, `EXTRACT(MONTH FROM CURRENT_DATE())`).', 'Replace hardcoded lookup values (e.g., transaction statuses, revenue types, publishing divisions) with joins to governed reference tables or configuration tables.', 'Parameterize specific identifiers like `account_number` to allow dynamic filtering without query modification.', 'Consider externalizing business rules (e.g., specific exclusions or thresholds) into configuration tables for easier maintenance and transparency.']",31,a17622e2-ad43-49cc-b3c5-19c95036fd14
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together
WITH
  base_data AS (
    SELECT
      ad_type_name,
      is_xtend_flag AS xtend_flag,
      unified_publication_name,
      unified_publication_gl_code,
      CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag,
      fy_year_month_number,
      CAST(RIGHT(CAST(fy_year_month_number AS STRING), 2) AS INT) AS fiscal_month_number,
      fy_year AS financial_year,
      fy_quarter_of_year AS financial_quarter,
      fy_month_of_year AS financial_month,
      fy_month_short_name AS financial_short_month,
      fy_week_of_year AS financial_week,
      revenue_transaction_status_code AS revenue_transaction_status,
      is_print_digital_flag,
      current_fy_month_of_year AS current_financial_month,
      current_fy_week_of_year AS current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(ASL.fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sync_sales_segment_l2_name = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE('Australia/Sydney')) AS DOW_Today,
      sales_segment_l1_name AS sales_segment_l_1_name,
      sales_segment_l2_name AS sales_segment_l_2_name,
      sync_sales_segment_l1_name AS sales_segment_l_1_name_sync,
      sync_sales_segment_l2_name AS sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      customer_group_name AS advertiser_group,
      customer_group_parent_name AS advertiser_parent,
      IFNULL(adjustment_amount, 0) AS adjustment_amount,
      curr_sales_segment_gm_name AS sales_segment_gm_name,
      sync_sales_segment_gm_name AS sales_segment_gm_name_sync,
      revenue_group_level1_name AS revenue_group_level_1_name,
      revenue_group_level2_name AS revenue_group_level_2_name,
      IFNULL(lgb_pub_amount, 0) AS pub_lgb,
      IFNULL(lgb_ss_amount, 0) AS ss_lgb,
      IFNULL(pipeline_amount, 0) AS pipeline,
      IFNULL(gross_revenue_amount, 0) AS gross_revenue_amount,
      UPPER(revenue_group_type_code) AS revenue_type,
      UPPER(revenue_type_level2_code) AS revenue_type_Level2,
      UPPER(ASL.revenue_group_sub_type_code) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      sync_portfolio_group_name AS portfolio_group_name_sync,
      current_portfolio_group_name AS portfolio_group_name_current,
      sync_portfolio_parent_group_name AS portfolio_parent_group_name_sync,
      industry_level1_name AS aszsic_industry_level_1_name,
      industry_level1_code AS anzsic_industry_level_1_code,
      industry_level2_code AS anzsic_industry_level_2_code,
      industry_level2_name AS aszsic_industry_level_2_name,
      industry_level3_code AS anzsic_industry_level_3_code,
      industry_level3_name AS anzsic_industry_level_3_name,
      industry_level4_code AS anzsic_industry_level_4_code,
      industry_level4_name AS anzsic_industry_level_4_name,
      industry_pillar_name AS nca_industry_pillar,
      industry_pillar_group_name AS nca_industry_anzsic_pillar_group,
      ASL.product_group_name AS product_group,
      division_group_name AS publishing_division_group,
      division_parent_group_name AS publishing_division_parent,
      CASE
        WHEN client_reporting_date >= CURRENT_DATE('Australia/Sydney') THEN 'Y'
        ELSE 'N'
      END AS is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ly_is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ny_is_future_period_flag,
      cost_model_type_code AS cost_model_type,
      CASE
        WHEN dw_source_system_code = 'PLUTO' THEN SAFE_CAST(client_reporting_date AS STRING)
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      sync_portfolio_conformed_name AS portfolio_conformed_name_sync,
      publishing_division_name AS publishing_division,
      booking_line_created_week_of_year AS booking_line_created_week,
      booking_line_created_month_of_year AS booking_line_created_month,
      booking_line_created_month_short_name AS booking_line_created_short_month,
      booking_line_created_quarter_of_year AS booking_line_created_quarter,
      booking_line_created_year,
      agency_group_parent_name AS agency_parent,
      agency_group_name AS agency_group,
      agency_name,
      agency_id_src AS agency_number,
      cal_month_name AS calendar_month_name,
      cal_year AS calendar_year,
      section_l5_name AS classification_name,
      IFNULL(target_amount, 0) AS target,
      IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD,
      IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS portfolio_full_name_sync,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS sync_portfolio_conformed_owner_full,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      adtype_l1,
      adtype_l2,
      legacy_growth_flag,
      relative_cal_year_offset,
      cal_quarter_of_year_name AS calendar_quarter_of_year,
      cal_year_week_number AS calendar_week
    FROM
      `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
    WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
          'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
      '-')))
  ),
  derived_data AS (
    SELECT
      *,
      MIN(
        CASE
          WHEN advertiser_parent = ""DOUBLECLICK"" THEN SAFE_CAST(booking_line_created_date AS DATE)
        END) OVER (PARTITION BY financial_year) AS fix_date_lod,
      DATETIME(TIMESTAMP(CURRENT_TIMESTAMP()), ""Australia/Sydney"") AS dw_asl_load_timestamp,
      -- Derived dimensions for grouping
      CASE
        WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC'
        ELSE revenue_group_subtype
      END AS Derived_Ad_Type_Category,
      -- Conditional Gross Revenue calculation (clmn45_ / clmn36_ equivalent)
      CASE
        WHEN relative_fy_year_offset = 0 AND UPPER(unified_publication_name) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') THEN gross_revenue_amount
        WHEN relative_fy_year_offset = 0 AND (
          SAFE_CAST(
            CASE
              WHEN (UPPER(revenue_type) = 'DIGITAL' AND UPPER(revenue_group_subtype) = 'DIGITAL' AND sales_segment_l_2_name_sync = 'Digital Other' AND advertiser_parent != 'DOUBLECLICK') THEN fix_date_lod
              ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
            END AS DATETIME)
          <= DATETIME_ADD(CURRENT_DATETIME('Australia/Sydney'), INTERVAL -365 DAY)
        )
        THEN gross_revenue_amount
        ELSE 0
      END AS Conditional_Gross_Revenue_Amount
    FROM
      base_data
  )
SELECT
  financial_year,
  financial_quarter,
  financial_month,
  financial_short_month,
  financial_week,
  calendar_year,
  calendar_month_name,
  calendar_quarter_of_year,
  calendar_week,
  adtype_l1,
  fin_adtype_name,
  revenue_group_subtype,
  revenue_type,
  portfolio_parent_group_name_sync,
  sales_segment_l_2_name_sync,
  unified_publication_name,
  cost_model_type,
  advertiser_parent,
  Derived_Ad_Type_Category,
  SUM(gross_revenue_amount) AS Total_Gross_Revenue,
  SUM(IF(relative_fy_year_offset = 0, gross_revenue_amount, 0)) AS Current_FY_Gross_Revenue,
  SUM(IF(relative_fy_year_offset = 1, gross_revenue_amount, 0)) AS Next_FY_Gross_Revenue,
  SUM(Conditional_Gross_Revenue_Amount) AS Conditional_Gross_Revenue,
  SUM(adjustment_amount) AS Total_Adjustment_Amount,
  SUM(pub_lgb) AS Total_Pub_LGB,
  SUM(ss_lgb) AS Total_SS_LGB,
  SUM(pipeline) AS Total_Pipeline,
  SUM(target) AS Total_Target
FROM
  derived_data
GROUP BY
  financial_year,
  financial_quarter,
  financial_month,
  financial_short_month,
  financial_week,
  calendar_year,
  calendar_month_name,
  calendar_quarter_of_year,
  calendar_week,
  adtype_l1,
  fin_adtype_name,
  revenue_group_subtype,
  revenue_type,
  portfolio_parent_group_name_sync,
  sales_segment_l_2_name_sync,
  unified_publication_name,
  cost_model_type,
  advertiser_parent,
  Derived_Ad_Type_Category
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 1000","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(client_reporting_date AS DATE)) AS unique_client_reporting_dates,
  COUNT(DISTINCT SAFE_CAST(booking_line_created_date AS DATE)) AS unique_booking_dates,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT unified_publication_name) AS unique_publications,
  MIN(SAFE_CAST(client_reporting_date AS DATE)) AS earliest_client_reporting_date,
  MAX(SAFE_CAST(client_reporting_date AS DATE)) AS latest_client_reporting_date,
  MIN(SAFE_CAST(booking_line_created_date AS DATE)) AS earliest_booking_date,
  MAX(SAFE_CAST(booking_line_created_date AS DATE)) AS latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(client_reporting_date AS STRING), '-', SAFE_CAST(advertiser_id_src AS STRING), '-', SAFE_CAST(ad_type_name AS STRING))) AS approx_unique_transactions
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  SAFE_CAST(client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 90 DAY)
LIMIT 100;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS gross_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS unique_advertiser_test,
  CASE WHEN MAX(SAFE_CAST(client_reporting_date AS DATE)) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(CASE WHEN UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS transaction_status_filter_test,
  CASE WHEN COUNT(CASE WHEN relative_fy_year_offset = 0 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS current_fy_data_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  SAFE_CAST(client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Excluded Publication Check' AS rule_name,
  COUNT(*) AS total_records_in_scope,
  SUM(CASE WHEN UPPER(IFNULL(publication_name, 'XXX')) LIKE 'SUDDENLY%' AND NOT (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-') THEN 1 ELSE 0 END) AS records_excluded_by_suddenly_rule,
  SUM(CASE WHEN UPPER(IFNULL(style_name, 'XXX')) = 'ROP COMPOSITE' THEN 1 ELSE 0 END) AS records_excluded_by_style_name_rule,
  SUM(CASE WHEN UPPER(IFNULL(source_publishing_division_name, 'XXX')) = 'MEDIUM RARE CONTENT AGENCY' THEN 1 ELSE 0 END) AS records_excluded_by_division_rule,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) NOT IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) AS records_excluded_by_status_rule,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN 1 ELSE 0 END) AS current_fy_records,
  SUM(CASE WHEN relative_fy_year_offset = -1 THEN 1 ELSE 0 END) AS previous_fy_records,
  SUM(CASE WHEN relative_fy_year_offset = 1 THEN 1 ELSE 0 END) AS next_fy_records
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  SAFE_CAST(client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 * 2 DAY);","SELECT
  SAFE_CAST(client_reporting_date AS DATE) AS client_reporting_date,
  SAFE_CAST(booking_line_created_date AS DATE) AS booking_line_created_date,
  financial_year,
  financial_month,
  advertiser_name,
  advertiser_parent,
  unified_publication_name,
  fin_adtype_name,
  revenue_type,
  revenue_group_subtype,
  gross_revenue_amount,
  adjustment_amount,
  pipeline_amount,
  target_amount,
  relative_fy_year_offset,
  relative_cal_year_offset,
  dw_source_system_code,
  cost_model_type_code
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  SAFE_CAST(client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 14 DAY)
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(client_reporting_date AS DATE) DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-05-08', 'original_format': ""DATE(TIMESTAMP '2025-05-08 01:48:02.510465+00', 'Australia/Sydney')"", 'context': 'Used as a fixed reference point for calculating relative dates (e.g., in the complex date comparison for `Conditional_Gross_Revenue`). This date is effectively `CURRENT_DATE()` at the time the query was generated/saved.', 'suggested_fix': ""Replace with `CURRENT_DATE('Australia/Sydney')` or a dashboard date parameter to ensure calculations are always relative to the current day."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'BILLED'"", ""'BOOKED'""], 'context': 'Revenue transaction status codes used for filtering.', 'suggested_governance': 'Define valid transaction statuses in a reference table (e.g., `dim_transaction_status`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'ROP COMPOSITE'""], 'context': 'Specific style name excluded from results.', 'suggested_governance': 'Manage excluded style names in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'MEDIUM RARE CONTENT AGENCY'""], 'context': 'Specific source publishing division name excluded from results.', 'suggested_governance': 'Manage excluded division names in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'17114'"", ""'29172'"", ""'52809'""], 'context': ""Specific advertiser IDs used in a conditional filter for 'SUDDENLY%' publications."", 'suggested_governance': 'Store these special advertiser IDs in a reference table (e.g., `dim_special_advertisers`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'-'""], 'context': ""Specific ad type name used in a conditional filter for 'SUDDENLY%' publications."", 'suggested_governance': 'Store special ad type names in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'""], 'context': 'Specific advertiser parent used in `fix_date_lod` calculation.', 'suggested_governance': 'Manage special advertiser parents in a reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': [""'$\\'000'"", ""'$'""], 'context': 'String literals used to determine if a metric should be divided by 1000 for display (unit conversion).', 'suggested_governance': 'Use a dashboard parameter or a configuration table to control display units, rather than hardcoded string comparisons.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'OUTSTREAM'"", ""'XTEND'"", ""'EDMEDIA'"", ""'ECOMMERCE'""], 'context': 'Specific unified publication names used in conditional revenue calculations.', 'suggested_governance': 'Define these categories in a reference table (e.g., `dim_publication_category`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'PRINT'"", ""'DIGITAL'"", ""'PROGRAMMATIC'"", ""'PROGRAMMATIC EXCHANGE'"", ""'PROGRAMMATIC SOURCE'"", ""'SUNDRY ADSALES OVERLAY'""], 'context': 'Specific revenue types/subtypes used in derived dimensions and conditional logic.', 'suggested_governance': 'Define these categories in a reference table (e.g., `dim_revenue_type_category`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'GUA'"", ""'NON'"", ""'PMP'""], 'context': 'Specific cost model types used in derived dimensions.', 'suggested_governance': 'Define these categories in a reference table (e.g., `dim_cost_model_type`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'DIGITAL OTHER'""], 'context': 'Specific portfolio parent group name used in derived dimensions.', 'suggested_governance': 'Define these categories in a reference table (e.g., `dim_portfolio_group_category`) and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'MRCA'"", ""'Client'""], 'context': 'Specific sales group names used in derived dimensions.', 'suggested_governance': 'Define these categories in a reference table (e.g., `dim_sales_group`) and join to it.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'default_values', 'hardcoded_values': [""'VACANT'""], 'context': 'Default value for owner names when NULL.', 'suggested_governance': ""Standard practice, but ensure 'VACANT' is a universally understood and accepted placeholder."", 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates (e.g., '2025-05-08') with `CURRENT_DATE('Australia/Sydney')` or Looker Studio date parameters for dynamic reporting."", ""Introduce a dashboard parameter for unit conversion (e.g., 'Display_Units' with values 'Units' or 'Thousands') to replace the hardcoded '$\\'000' vs '$' logic."", 'Externalize all hardcoded lookup values (e.g., transaction statuses, style names, advertiser IDs, revenue types, cost models) into dedicated reference tables. This allows for easier maintenance, consistency across dashboards, and better data governance.', 'Consider creating a BigQuery view or UDFs for complex derived dimensions and business rules (e.g., `Derived_Ad_Type_Category`, `Conditional_Gross_Revenue`) to centralize logic and improve reusability and maintainability.']",32,52c11c9c-052a-4e45-9cda-8fecd87d7964
"WITH base_data AS (
  SELECT
    t0.fy_month_num,
    t0.month_name
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
  -- Assuming fy_month_num is YYYYMM format and we want data for the last 12 months
  WHERE SAFE_CAST(t0.fy_month_num AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)) AS INT64)
)
SELECT
  base_data.fy_month_num,
  base_data.month_name,
  COUNT(base_data.fy_month_num) AS count_fy_month_num,
  SUM(SAFE_CAST(base_data.fy_month_num AS NUMERIC)) AS sum_fy_month_num
FROM base_data
GROUP BY base_data.fy_month_num, base_data.month_name
ORDER BY base_data.fy_month_num DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.month_name) as unique_month_names,
  COUNT(DISTINCT t0.fy_month_num) as unique_fy_month_nums,
  MIN(SAFE_CAST(t0.fy_month_num AS INT64)) as earliest_fy_month_num,
  MAX(SAFE_CAST(t0.fy_month_num AS INT64)) as latest_fy_month_num
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.fy_month_num AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH)) AS INT64)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(t0.fy_month_num) > 0 THEN 'PASS' ELSE 'FAIL' END as fy_month_num_count_test,
  CASE WHEN SUM(SAFE_CAST(t0.fy_month_num AS NUMERIC)) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END as fy_month_num_sum_test,
  CASE WHEN COUNT(DISTINCT t0.month_name) > 0 THEN 'PASS' ELSE 'FAIL' END as month_name_distinct_test,
  CASE WHEN MAX(SAFE_CAST(t0.fy_month_num AS INT64)) >= SAFE_CAST(FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) AS INT64) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.fy_month_num AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)) AS INT64)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'null_check_fy_month_num' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.fy_month_num IS NULL THEN 1 ELSE 0 END) as null_fy_month_num_count,
  SUM(CASE WHEN t0.month_name IS NULL THEN 1 ELSE 0 END) as null_month_name_count
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.fy_month_num AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)) AS INT64)
LIMIT 1;","SELECT
  SAFE_CAST(t0.fy_month_num AS INT64) as fy_month_num,
  SAFE_CAST(t0.month_name AS STRING) as month_name
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.fy_month_num AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) AS INT64)
ORDER BY SAFE_CAST(t0.fy_month_num AS INT64) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': []}","[""Consider parameterizing the date range for `fy_month_num` instead of hardcoding relative dates (e.g., 'last 12 months').""]",33,f353b933-30eb-4853-9976-d35371db77
"-- THIS IS THE MAIN SQL TO RUN --
-- This query provides a consolidated view of account mappings and their counts.
-- It also includes the last update time of the underlying data source as a separate metric.

WITH AccountMappings AS (
  SELECT
    t0.Adpoint_Account AS adpoint_account,
    t0.Genera_Booking_Account AS genera_booking_account,
    t0.Medium_Rare_Debtor_Account AS medium_rare_debtor_account,
    t0.National_Debtor_Account AS national_debtor_account
  FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0
),
LastUpdateTime AS (
  SELECT
    DATETIME_TRUNC(
      PARSE_DATETIME(
        '%Y-%m-%dT%H:%M:%S',
        FORMAT_TIMESTAMP(
          '%Y-%m-%dT%H:%M:%S',
          SAFE_CAST(
            CAST(FORMAT_DATETIME('%F %X', datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"")) AS STRING)
            AS TIMESTAMP
          )
        )
      ),
      SECOND
    ) AS last_data_update_time
  FROM `sdm_advertisingexternals.__TABLES__`
  WHERE table_id = ""gbaba_act_xref""
)
SELECT
  am.adpoint_account,
  am.genera_booking_account,
  am.medium_rare_debtor_account,
  am.national_debtor_account,
  COUNT(*) AS account_mapping_count,
  (SELECT last_data_update_time FROM LastUpdateTime) AS last_data_update_time
FROM AccountMappings AS am
GROUP BY
  am.adpoint_account,
  am.genera_booking_account,
  am.medium_rare_debtor_account,
  am.national_debtor_account
ORDER BY
  am.adpoint_account ASC
LIMIT 1000; -- Limiting for sample analysis, remove for full dataset","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(Adpoint_Account AS STRING)) as unique_adpoint_accounts,
  COUNT(DISTINCT SAFE_CAST(Genera_Booking_Account AS STRING)) as unique_genera_booking_accounts,
  COUNT(DISTINCT SAFE_CAST(Medium_Rare_Debtor_Account AS STRING)) as unique_medium_rare_debtor_accounts,
  COUNT(DISTINCT SAFE_CAST(National_Debtor_Account AS STRING)) as unique_national_debtor_accounts
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1;","-- Quick validation that all metric calculations work syntactically
SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(t0.Adpoint_Account) > 0 THEN 'PASS' ELSE 'FAIL' END as adpoint_account_presence_test,
  CASE WHEN COUNT(t0.Genera_Booking_Account) > 0 THEN 'PASS' ELSE 'FAIL' END as genera_booking_account_presence_test,
  CASE WHEN (SELECT COUNT(*) FROM `sdm_advertisingexternals.__TABLES__` WHERE table_id = ""gbaba_act_xref"") > 0 THEN 'PASS' ELSE 'FAIL' END as source_table_metadata_presence_test,
  CASE WHEN (SELECT DATETIME_DIFF(CURRENT_DATETIME(""Australia/Sydney""), DATETIME(timestamp_millis(last_modified_time), ""Australia/Sydney""), HOUR) < 24 FROM `sdm_advertisingexternals.__TABLES__` WHERE table_id = ""gbaba_act_xref"" LIMIT 1) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test_24h
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' as validation_type,
  'adpoint_account_filter_check' as rule_name,
  COUNT(*) as total_records_in_view,
  SUM(CASE WHEN SAFE_CAST(Adpoint_Account AS STRING) = '56694' THEN 1 ELSE 0 END) as records_matching_hardcoded_filter,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(Adpoint_Account AS STRING) = '56694' THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_matching_filter
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1;","-- Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(Adpoint_Account AS STRING) AS adpoint_account,
  SAFE_CAST(Genera_Booking_Account AS STRING) AS genera_booking_account,
  SAFE_CAST(Medium_Rare_Debtor_Account AS STRING) AS medium_rare_debtor_account,
  SAFE_CAST(National_Debtor_Account AS STRING) AS national_debtor_account
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
WHERE SAFE_CAST(Adpoint_Account AS STRING) IS NOT NULL -- Ensure at least one key dimension is present
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'56694'""], 'context': 'Filter applied to Adpoint_Account in one of the dashboard queries.', 'suggested_governance': 'This value should be replaced with a parameter in Looker Studio or derived from a configuration table if it represents a specific business entity.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded account ID '56694' with a Looker Studio parameter to allow dynamic filtering by users."", 'Consider creating a configuration table for frequently used filter values if they represent business rules.']",34,258a722d-9b6e-45df-ba00-1b9954ec36b2
"-- This query calculates the core Gross Revenue Amount with all applied business rules and transformations.
-- It focuses on the most complex query (job_g0C_QrpRueq_Y03aHpxOoN1xe-AU) which is central to the 'Contra Report'.
-- It includes the sheet account flag, advertiser name transformations, and all relevant filters.

WITH base_revenue_data AS (
  SELECT
    t0.financial_year,
    SAFE_CAST(t0.financial_month AS INT64) AS financial_month_no,
    t0.financial_short_month,
    t0.calendar_year_month,
    t0.sales_segment_gm_name,
    t0.portfolio_conformed_name_current,
    IFNULL(t0.current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
    t0.advertiser_name AS original_advertiser_name,
    t0.adpoint_account_number,
    t0.revenue_type,
    t0.relative_fy_year_offset,
    CASE
      WHEN t0.adpoint_account_number IN (
        SELECT DISTINCT
          NMBS_T_Number
        FROM
          `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data`
      ) THEN 'Y'
      ELSE 'N'
    END AS sheet_account_flag,
    SUM(t0.gross_revenue_amount) AS gross_revenue_amount
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
  WHERE
    LOWER(LEFT(t0.advertiser_name, 3)) = 'ctr'
    AND NOT (t0.cost_model_type = 'Guaranteed' AND t0.revenue_group_name = 'Exchange')
    AND UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
    AND UPPER(IFNULL(t0.style_name, 'XXX')) <> 'ROP COMPOSITE'
    AND UPPER(IFNULL(t0.source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
    AND (
      UPPER(IFNULL(t0.publication_name, 'XXX')) NOT LIKE 'SUDDENLY%'
      OR (
        UPPER(t0.publication_name) LIKE 'SUDDENLY%'
        AND (
          t0.account_number IN ('17114', '29172', '52809')
          OR t0.adtype_name = '-'
        )
      )
    )
    -- Sample data for recent activity, adjust as needed
    AND SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH)
  GROUP BY
    t0.financial_year,
    financial_month_no,
    t0.financial_short_month,
    t0.calendar_year_month,
    t0.sales_segment_gm_name,
    t0.portfolio_conformed_name_current,
    current_portfolio_conformed_owner_full,
    original_advertiser_name,
    t0.adpoint_account_number,
    t0.revenue_type,
    t0.relative_fy_year_offset,
    sheet_account_flag
),
transformed_advertiser_data AS (
  SELECT
    *,
    CASE
      WHEN SAFE_CAST(adpoint_account_number AS STRING) IN ('13019', '52246', '18387') THEN 'ctr1'
      ELSE SAFE_CAST(adpoint_account_number AS STRING)
    END AS adpoint_account_number_transformed_level1,
    CASE
      WHEN SAFE_CAST(adpoint_account_number AS STRING) IN ('13019', '52246', '18387') THEN 'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'
      ELSE original_advertiser_name
    END AS advertiser_name_transformed_level2
  FROM
    base_revenue_data
)
SELECT
  financial_year,
  financial_month_no,
  financial_short_month,
  calendar_year_month,
  sales_segment_gm_name,
  portfolio_conformed_name_current,
  current_portfolio_conformed_owner_full,
  original_advertiser_name,
  adpoint_account_number,
  adpoint_account_number_transformed_level1,
  advertiser_name_transformed_level2,
  revenue_type,
  sheet_account_flag,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount
FROM
  transformed_advertiser_data
GROUP BY
  financial_year,
  financial_month_no,
  financial_short_month,
  calendar_year_month,
  sales_segment_gm_name,
  portfolio_conformed_name_current,
  current_portfolio_conformed_owner_full,
  original_advertiser_name,
  adpoint_account_number,
  adpoint_account_number_transformed_level1,
  advertiser_name_transformed_level2,
  revenue_type,
  sheet_account_flag
ORDER BY
  calendar_year_month DESC, total_gross_revenue_amount DESC
LIMIT 100;
","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.calendar_year_month AS STRING)) AS unique_calendar_months,
  COUNT(DISTINCT t0.adpoint_account_number) AS unique_adpoint_accounts,
  COUNT(DISTINCT t0.advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT t0.sales_segment_gm_name) AS unique_sales_gms,
  MIN(SAFE_CAST(t0.calendar_year_month || '-01' AS DATE)) AS earliest_calendar_month,
  MAX(SAFE_CAST(t0.calendar_year_month || '-01' AS DATE)) AS latest_calendar_month,
  APPROX_COUNT_DISTINCT(t0.adpoint_account_number || '-' || t0.calendar_year_month) AS approx_unique_revenue_entries
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
WHERE
  SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1;
","-- Quick validation that all metric calculations work syntactically and data is present
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_positive_test,
  CASE WHEN COUNT(DISTINCT t0.adpoint_account_number) > 0 THEN 'PASS' ELSE 'FAIL' END AS unique_accounts_test,
  CASE WHEN MAX(SAFE_CAST(t0.calendar_year_month || '-01' AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(CASE WHEN UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS billed_booked_status_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
WHERE
  SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
LIMIT 1;
","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' AS validation_type,
  'Revenue Transaction Status Distribution' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) = 'BILLED' THEN 1 ELSE 0 END) AS billed_records,
  SUM(CASE WHEN UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) = 'BOOKED' THEN 1 ELSE 0 END) AS booked_records,
  SUM(CASE WHEN UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) NOT IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) AS other_status_records,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS billed_booked_percentage,
  'Advertiser Name Starts With CTR' AS rule_name_2,
  SUM(CASE WHEN LOWER(LEFT(t0.advertiser_name, 3)) = 'ctr' THEN 1 ELSE 0 END) AS ctr_advertiser_records,
  SAFE_DIVIDE(SUM(CASE WHEN LOWER(LEFT(t0.advertiser_name, 3)) = 'ctr' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS ctr_advertiser_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
WHERE
  SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1;
","-- Query to get representative sample data for further analysis from the primary revenue table
SELECT
  SAFE_CAST(t0.financial_year AS INT64) AS financial_year,
  SAFE_CAST(t0.financial_month AS INT64) AS financial_month_no,
  t0.financial_short_month,
  t0.calendar_year_month,
  t0.sales_segment_gm_name,
  t0.portfolio_conformed_name_current,
  IFNULL(t0.current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
  t0.advertiser_name,
  t0.adpoint_account_number,
  t0.revenue_type,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  t0.cost_model_type,
  t0.revenue_group_name,
  t0.revenue_transaction_status,
  t0.style_name,
  t0.source_publishing_division,
  t0.publication_name,
  t0.account_number,
  t0.adtype_name
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
WHERE
  SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) DESC,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) DESC
LIMIT 500;
","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Contra'"", ""'Renee Sycamore'""], 'context': 'Filtering `nca_industry_pillar` and `sales_segment_gm_name` in Query 1.', 'suggested_governance': 'These values should be configurable parameters or derived from a business unit/sales hierarchy table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'13019'"", ""'52246'"", ""'18387'""], 'context': 'Specific `adpoint_account_number` values used to create `ctr1` alias in Query 2.', 'suggested_governance': ""These account numbers should be part of a 'Contra Account' lookup table, allowing for easier updates and transparency."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'""], 'context': 'Specific string used to re-categorize `advertiser_name` based on `ctr1` alias in Query 2.', 'suggested_governance': ""This complex string should be defined in a configuration table or a dedicated 'Contra Advertiser Grouping' lookup table."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Guaranteed'"", ""'Exchange'"", ""'BILLED'"", ""'BOOKED'"", ""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'"", ""'17114'"", ""'29172'"", ""'52809'"", ""'-'"", ""'VACANT'"", ""'XXX'""], 'context': 'Various filters and default values for `cost_model_type`, `revenue_group_name`, `revenue_transaction_status`, `style_name`, `source_publishing_division`, `publication_name`, `account_number`, `adtype_name`, and `current_portfolio_conformed_owner_full` in Query 2.', 'suggested_governance': 'These operational values should be managed in reference data tables or configuration tables to ensure consistency and ease of update.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CTR_2023_AFL SPORT'"", ""'CTR_2023_GWS GIANTS'"", ""'CTR_2023_SYDNEY SWANS'"", ""'CTR_2025_Greater Western Sydney Giants'"", ""'CTR_2025_Raising Literacy Australia'""], 'context': 'Specific `advertiser_name` values used for filtering in Query 3.', 'suggested_governance': ""These specific advertiser names should be part of a 'Contra Advertiser List' lookup table."", 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded account numbers and advertiser names with joins to governed reference tables (e.g., `contra_accounts_lookup`, `advertiser_groupings`).', ""Replace hardcoded filter values (e.g., 'Contra', 'Renee Sycamore', 'BILLED', 'BOOKED') with dashboard parameters or configuration tables."", 'Consider externalizing complex `CASE` logic for advertiser name transformations into a dedicated UDF or a mapping table for better maintainability.']",35,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"WITH base_data AS (
  SELECT
    t0.Advertiser,
    t0.PortfolioParentGroup,
    t0.RevenueGross,
    t0.TransactionType,
    t0.FinancialQuarter,
    t0.FinancialYear,
    t0.FinancialMonthNumber,
    t0.PortfolioChildGroup,
    -- Hardcoded reference date from query 3
    DATE(DATETIME(TIMESTAMP '2025-06-26 07:36:48.083696+00', 'UTC')) AS hardcoded_ref_date_q3
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
  -- Add a general date filter for performance, covering relevant financial years
  WHERE t0.FinancialYear >= 2023 AND t0.FinancialYear <= 2025
),
derived_dimensions AS (
  SELECT
    Advertiser,
    PortfolioParentGroup,
    SAFE_CAST(RevenueGross AS NUMERIC) AS RevenueGross, -- Cast early for consistency
    TransactionType,
    FinancialQuarter,
    FinancialYear,
    FinancialMonthNumber,
    PortfolioChildGroup,
    hardcoded_ref_date_q3,
    -- Derived Financial Period (FY-Q)
    CONCAT('FY',SAFE_CAST(FinancialYear AS STRING),' - ',SAFE_CAST(FinancialQuarter AS STRING)) AS financial_period_fy_q,
    -- Derived Fiscal Month Start Date (with fiscal month adjustment)
    SAFE_CAST(DATETIME_TRUNC(DATE(FinancialYear,
      CASE
        WHEN (FinancialMonthNumber = 1) THEN 7
        WHEN (FinancialMonthNumber = 2) THEN 8
        WHEN (FinancialMonthNumber = 3) THEN 9
        WHEN (FinancialMonthNumber = 4) THEN 10
        WHEN (FinancialMonthNumber = 5) THEN 11
        WHEN (FinancialMonthNumber = 6) THEN 12
        WHEN (FinancialMonthNumber = 7) THEN 1
        WHEN (FinancialMonthNumber = 8) THEN 2
        WHEN (FinancialMonthNumber = 9) THEN 3
        WHEN (FinancialMonthNumber = 10) THEN 4
        WHEN (FinancialMonthNumber = 11) THEN 5
        WHEN (FinancialMonthNumber = 12) THEN 6
        ELSE NULL
      END, 1), MONTH) AS DATE) AS fiscal_month_start_date,
    -- Derived date for comparison in query 3
    DATE(FinancialYear,
      CASE
        WHEN (FinancialMonthNumber = 1) THEN 7
        WHEN (FinancialMonthNumber = 2) THEN 8
        WHEN (FinancialMonthNumber = 3) THEN 9
        WHEN (FinancialMonthNumber = 4) THEN 10
        WHEN (FinancialMonthNumber = 5) THEN 11
        WHEN (FinancialMonthNumber = 6) THEN 12
        WHEN (FinancialMonthNumber = 7) THEN 1
        WHEN (FinancialMonthNumber = 8) THEN 2
        WHEN (FinancialMonthNumber = 9) THEN 3
        WHEN (FinancialMonthNumber = 10) THEN 4
        WHEN (FinancialMonthNumber = 11) THEN 5
        WHEN (FinancialMonthNumber = 12) THEN 6
        ELSE NULL
      END, 1) AS derived_date_for_comparison_q3
  FROM base_data
)
SELECT
  -- Core Dimensions
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  financial_period_fy_q,
  fiscal_month_start_date,
  -- Core Metric (Total Gross Revenue without specific filters)
  SUM(RevenueGross) AS total_gross_revenue,
  -- Conditional Metric for Query 1 (Total Gross Revenue for Independent Agencies NSW, excluding Guaranteed)
  SUM(CASE
    WHEN PortfolioParentGroup IN ('INDEPENDENT AGENCIES NSW') AND (TransactionType NOT IN ('Guaranteed') OR TransactionType IS NULL)
    THEN RevenueGross
    ELSE 0
  END) AS total_gross_revenue_indep_nsw_filtered,
  -- Flag for Query 2 context (Advertiser filter based on FY-Q)
  MAX(CASE
    WHEN financial_period_fy_q IN ('FY2025 - Q4')
    THEN TRUE
    ELSE FALSE
  END) AS is_fy2025_q4_advertiser_context,
  -- Flag for Query 3 context (Date, Portfolio, TransactionType, ChildGroup)
  MAX(CASE
    WHEN
      derived_date_for_comparison_q3 <= hardcoded_ref_date_q3
      AND PortfolioParentGroup IN ('CONSORTIUM VIC')
      AND financial_period_fy_q IN ('FY2025 - Q4')
      AND TransactionType IN ('Deal')
      AND PortfolioChildGroup IN ('VIC CON B3', 'VIC CON B2', 'VIC CON B1')
    THEN TRUE
    ELSE FALSE
  END) AS is_vic_consortium_deal_context
FROM derived_dimensions
GROUP BY
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  financial_period_fy_q,
  fiscal_month_start_date
ORDER BY
  total_gross_revenue DESC
LIMIT 500;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialQuarter AS STRING)) as unique_financial_periods,
  COUNT(DISTINCT Advertiser) as unique_advertisers,
  COUNT(DISTINCT PortfolioParentGroup) as unique_parent_groups,
  COUNT(DISTINCT PortfolioChildGroup) as unique_child_groups,
  COUNT(DISTINCT TransactionType) as unique_transaction_types,
  MIN(FinancialYear) as earliest_financial_year,
  MAX(FinancialYear) as latest_financial_year,
  APPROX_COUNT_DISTINCT(Advertiser || PortfolioParentGroup || PortfolioChildGroup || SAFE_CAST(FinancialYear AS STRING) || SAFE_CAST(FinancialQuarter AS STRING) || SAFE_CAST(FinancialMonthNumber AS STRING)) as approx_unique_rows_at_fin_month_grain
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= 2023 AND FinancialYear <= 2025 -- Limit to relevant years for performance","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(RevenueGross AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_present_test,
  CASE WHEN MAX(FinancialYear) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as data_freshness_test_financial_year,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(TransactionType AS STRING) IN ('Guaranteed', 'Deal') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_type_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Check recent data
LIMIT 1","WITH fiscal_month_mapping_test AS (
  SELECT
    FinancialMonthNumber,
    CASE
      WHEN (FinancialMonthNumber = 1) THEN 7
      WHEN (FinancialMonthNumber = 2) THEN 8
      WHEN (FinancialMonthNumber = 3) THEN 9
      WHEN (FinancialMonthNumber = 4) THEN 10
      WHEN (FinancialMonthNumber = 5) THEN 11
      WHEN (FinancialMonthNumber = 6) THEN 12
      WHEN (FinancialMonthNumber = 7) THEN 1
      WHEN (FinancialMonthNumber = 8) THEN 2
      WHEN (FinancialMonthNumber = 9) THEN 3
      WHEN (FinancialMonthNumber = 10) THEN 4
      WHEN (FinancialMonthNumber = 11) THEN 5
      WHEN (FinancialMonthNumber = 12) THEN 6
      ELSE NULL
    END AS adjusted_month,
    COUNT(*) as record_count
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
  WHERE FinancialYear = 2024 -- Sample a recent year
  GROUP BY 1, 2
  ORDER BY 1
)
SELECT
  'Business Rule Validation' as validation_type,
  'Fiscal Month Mapping' as rule_name,
  (SELECT SUM(record_count) FROM fiscal_month_mapping_test) as total_records_tested,
  (SELECT COUNT(DISTINCT FinancialMonthNumber) FROM fiscal_month_mapping_test WHERE adjusted_month IS NOT NULL) as distinct_months_mapped,
  (SELECT COUNT(*) FROM fiscal_month_mapping_test WHERE adjusted_month IS NULL) as unmapped_months_count,
  (SELECT MAX(CASE WHEN adjusted_month IS NOT NULL THEN 'PASS' ELSE 'FAIL' END) FROM fiscal_month_mapping_test) as mapping_completeness_check,
  (SELECT MAX(CASE WHEN EXISTS(SELECT 1 FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` WHERE PortfolioParentGroup = 'INDEPENDENT AGENCIES NSW') THEN 'PASS' ELSE 'FAIL' END)) as indep_agencies_nsw_exists,
  (SELECT MAX(CASE WHEN EXISTS(SELECT 1 FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` WHERE CONCAT('FY',SAFE_CAST(FinancialYear AS STRING),' - ',SAFE_CAST(FinancialQuarter AS STRING)) = 'FY2025 - Q4') THEN 'PASS' ELSE 'FAIL' END)) as fy2025_q4_exists
FROM DUAL;","SELECT 
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  SAFE_CAST(RevenueGross AS NUMERIC) as RevenueGross,
  FinancialYear,
  FinancialQuarter,
  FinancialMonthNumber
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE FinancialYear >= 2024 -- Get recent data
ORDER BY FinancialYear DESC, FinancialQuarter DESC, FinancialMonthNumber DESC, RevenueGross DESC
LIMIT 500","{'hardcoded_dates': [{'date_value': '2025-06-26', 'original_format': '2025-06-26 07:36:48.083696+00', 'context': 'Used as a fixed reference date in a comparison (derived_date <= hardcoded_ref_date) for filtering data in Query 3.', 'suggested_fix': 'Replace with CURRENT_DATE() for current reporting or a parameter for dynamic selection.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'INDEPENDENT AGENCIES NSW'""], 'context': 'Filter for PortfolioParentGroup in Query 1.', 'suggested_governance': 'Manage in a governed lookup table for agency groups.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Guaranteed'""], 'context': 'Exclusion filter for TransactionType in Query 1.', 'suggested_governance': 'Manage in a governed lookup table for transaction types.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'FY2025 - Q4'""], 'context': 'Specific financial period filter in Query 2 and Query 3.', 'suggested_governance': 'Derive dynamically based on current date and fiscal calendar, or use a parameter.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM VIC'""], 'context': 'Filter for PortfolioParentGroup in Query 3.', 'suggested_governance': 'Manage in a governed lookup table for agency groups.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Deal'""], 'context': 'Filter for TransactionType in Query 3.', 'suggested_governance': 'Manage in a governed lookup table for transaction types.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'VIC CON B3'"", ""'VIC CON B2'"", ""'VIC CON B1'""], 'context': 'Filter for PortfolioChildGroup in Query 3.', 'suggested_governance': 'Manage in a governed lookup table for child agency groups.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['1-12 mapping to 7-12, 1-6'], 'context': 'CASE statement for fiscal month adjustment in Query 3.', 'suggested_governance': 'Externalize to a configuration table or a UDF for fiscal calendar logic.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., CURRENT_DATE()).', 'Replace hardcoded lookup values (e.g., agency groups, transaction types) with joins to governed reference tables.', 'Use configuration tables or UDFs for complex business rules like fiscal month mapping instead of hardcoded CASE statements.', ""Parameterize financial periods (e.g., 'FY2025 - Q4') to allow dynamic selection.""]",36,6f1c8731-02da-464f-b146-bf2947860735
"WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_adex_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      latest_date
    FROM
      adex_full_date AS afd
      CROSS JOIN
      (
        SELECT
          MAX(adf.date) AS latest_date
        FROM
          adex_full_date AS adf
      )
  ),
  -- Define date range parameters based on original hardcoded values
  date_parameters AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(SAFE.RIGHT('Aug 23', 2) AS STRING), '-', LPAD(CAST(
        CASE
          WHEN SAFE.LEFT('Aug 23', 3) = 'Jan' THEN 1
          WHEN SAFE.LEFT('Aug 23', 3) = 'Feb' THEN 2
          WHEN SAFE.LEFT('Aug 23', 3) = 'Mar' THEN 3
          WHEN SAFE.LEFT('Aug 23', 3) = 'Apr' THEN 4
          WHEN SAFE.LEFT('Aug 23', 3) = 'May' THEN 5
          WHEN SAFE.LEFT('Aug 23', 3) = 'Jun' THEN 6
          WHEN SAFE.LEFT('Aug 23', 3) = 'Jul' THEN 7
          WHEN SAFE.LEFT('Aug 23', 3) = 'Aug' THEN 8
          WHEN SAFE.LEFT('Aug 23', 3) = 'Sep' THEN 9
          WHEN SAFE.LEFT('Aug 23', 3) = 'Oct' THEN 10
          WHEN SAFE.LEFT('Aug 23', 3) = 'Nov' THEN 11
          WHEN SAFE.LEFT('Aug 23', 3) = 'Dec' THEN 12
          ELSE NULL
        END AS STRING), 2, '0'), '-01')) AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(SAFE.RIGHT('Jun 24', 2) AS STRING), '-', LPAD(CAST(
        CASE
          WHEN SAFE.LEFT('Jun 24', 3) = 'Jan' THEN 1
          WHEN SAFE.LEFT('Jun 24', 3) = 'Feb' THEN 2
          WHEN SAFE.LEFT('Jun 24', 3) = 'Mar' THEN 3
          WHEN SAFE.LEFT('Jun 24', 3) = 'Apr' THEN 4
          WHEN SAFE.LEFT('Jun 24', 3) = 'May' THEN 5
          WHEN SAFE.LEFT('Jun 24', 3) = 'Jun' THEN 6
          WHEN SAFE.LEFT('Jun 24', 3) = 'Jul' THEN 7
          WHEN SAFE.LEFT('Jun 24', 3) = 'Aug' THEN 8
          WHEN SAFE.LEFT('Jun 24', 3) = 'Sep' THEN 9
          WHEN SAFE.LEFT('Jun 24', 3) = 'Oct' THEN 10
          WHEN SAFE.LEFT('Jun 24', 3) = 'Nov' THEN 11
          WHEN SAFE.LEFT('Jun 24', 3) = 'Dec' THEN 12
          ELSE NULL
        END AS STRING), 2, '0'), '-01')) AS current_period_end_date
  )
SELECT
  b.date,
  b.Major_Category,
  b.Media_Network,
  b.Media_Group,
  b.Media_Type,
  -- Dimensions
  (SAFE_CAST(b.date AS DATETIME) >= DATE_ADD(p.current_period_start_date, INTERVAL -12 MONTH) AND SAFE_CAST(b.date AS DATETIME) <= DATE_ADD(p.current_period_end_date, INTERVAL -12 MONTH)) AS is_previous_year_period,
  -- Metrics
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(b.date AS DATETIME) >= p.current_period_start_date AND SAFE_CAST(b.date AS DATETIME) <= p.current_period_end_date THEN b.Spend ELSE 0 END AS NUMERIC)) AS spend_current_period,
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(b.date AS DATETIME) >= DATE_ADD(p.current_period_start_date, INTERVAL -12 MONTH) AND SAFE_CAST(b.date AS DATETIME) <= DATE_ADD(p.current_period_end_date, INTERVAL -12 MONTH) THEN b.Spend ELSE 0 END AS NUMERIC)) AS spend_previous_year,
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(b.date AS DATETIME) >= p.current_period_start_date AND SAFE_CAST(b.date AS DATETIME) <= p.current_period_end_date AND b.Media_Network = 'NEWS CORP' THEN b.Spend ELSE 0 END AS NUMERIC)) AS spend_current_period_newscorp,
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(b.date AS DATETIME) >= DATE_ADD(p.current_period_start_date, INTERVAL -12 MONTH) AND SAFE_CAST(b.date AS DATETIME) <= DATE_ADD(p.current_period_end_date, INTERVAL -12 MONTH) AND b.Media_Network = 'NEWS CORP' THEN b.Spend ELSE 0 END AS NUMERIC)) AS spend_previous_year_newscorp,
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(b.date AS DATETIME) >= DATE_ADD(p.current_period_start_date, INTERVAL -12 MONTH) AND SAFE_CAST(b.date AS DATETIME) <= DATE_ADD(p.current_period_end_date, INTERVAL -12 MONTH) AND b.Major_Category = 'Retail' THEN b.Spend ELSE 0 END AS NUMERIC)) AS spend_previous_year_retail,
  SUM(SAFE_CAST(b.Spend AS NUMERIC)) AS base_spend_amount
FROM
  base_adex_data AS b
  CROSS JOIN
  date_parameters AS p
GROUP BY
  b.date,
  b.Major_Category,
  b.Media_Network,
  b.Media_Group,
  b.Media_Type,
  is_previous_year_period
ORDER BY
  b.date DESC
LIMIT 1000;","SELECT 
  column_name,
  data_type,
  is_nullable
FROM 
  `ncau-data-newsquery-prd`.sbx_dcp.INFORMATION_SCHEMA.COLUMNS
WHERE 
  table_name = 'adex_datasource'
ORDER BY 
  column_name
LIMIT 100;","WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  )
SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_count_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(date AS DATE)) > 0 THEN 'PASS' ELSE 'FAIL' END AS unique_dates_test,
  CASE WHEN SUM(SAFE_CAST(Spend AS NUMERIC)) IS NOT NULL AND SUM(SAFE_CAST(Spend AS NUMERIC)) >= 0 THEN 'PASS' ELSE 'FAIL' END AS spend_positive_test,
  CASE WHEN MAX(SAFE_CAST(date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test_30_days,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(Media_Type AS STRING)) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_media_types_test
FROM
  adex_data
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","WITH
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'Retail Category Spend Check' AS rule_name,
  COUNT(CASE WHEN SAFE_CAST(Major_Category AS STRING) = 'Retail' THEN 1 END) AS total_retail_records,
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(Major_Category AS STRING) = 'Retail' THEN Spend ELSE 0 END AS NUMERIC)) AS total_retail_spend,
  'NEWS CORP Media Network Spend Check' AS rule_name_2,
  COUNT(CASE WHEN SAFE_CAST(Media_Network AS STRING) = 'NEWS CORP' THEN 1 END) AS total_newscorp_records,
  SUM(SAFE_CAST(CASE WHEN SAFE_CAST(Media_Network AS STRING) = 'NEWS CORP' THEN Spend ELSE 0 END AS NUMERIC)) AS total_newscorp_spend
FROM
  adex_data
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT 
  SAFE_CAST(date AS DATE) AS date,
  SAFE_CAST(Media_Type AS STRING) AS media_type,
  SAFE_CAST(portfolio_parent_group_name AS STRING) AS portfolio_parent_group_name,
  SAFE_CAST(Major_Category AS STRING) AS major_category,
  SAFE_CAST(Media_Network AS STRING) AS media_network,
  SAFE_CAST(Spend AS NUMERIC) AS spend_amount,
  SAFE_CAST(financial_year AS STRING) AS financial_year
FROM 
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE 
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)
ORDER BY 
  date DESC, spend_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': 'Jun 24', 'original_format': 'Jun 24', 'context': 'Used to derive the end month and year for the current period date range.', 'suggested_fix': 'Replace with a dashboard parameter or derive dynamically from CURRENT_DATE().', 'impact': 'high', 'urgency': 'high'}, {'date_value': 'Aug 23', 'original_format': 'Aug 23', 'context': 'Used to derive the start month and year for the current period date range.', 'suggested_fix': 'Replace with a dashboard parameter or derive dynamically from CURRENT_DATE().', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Retail'""], 'context': ""Filters 'Major_Category' for 'Spend_PY_Retail' metric."", 'suggested_governance': 'Use a configuration table for major categories or a dashboard parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'NEWS CORP'""], 'context': ""Filters 'Media_Network' for 'Spend_CP_NewsCorp' and 'Spend_PY_NewsCorp' metrics."", 'suggested_governance': 'Use a configuration table for media networks or a dashboard parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'""], 'context': 'Converts month abbreviations to month numbers for date parsing.', 'suggested_governance': 'Encapsulate in a UDF or use a small lookup table for month names.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded date strings ('Jun 24', 'Aug 23') with Looker Studio date range parameters or BigQuery's `CURRENT_DATE()` and `DATE_SUB`/`DATE_ADD` functions to define relative periods."", ""Introduce dashboard parameters for 'Major_Category' and 'Media_Network' filters (e.g., `p_major_category`, `p_media_network`) to allow users to dynamically select values."", 'Consider creating a BigQuery User-Defined Function (UDF) for month name to number conversion to centralize and simplify date parsing logic.']",37,e9d8a216-4950-4d30-b344-5011776edbdf
"WITH base_data AS (
  SELECT
    t0.BudgetAddsQty,
    t0.BudgetCancelsQty,
    t0.BudgetClosingBase,
    t0.BudgetEarnedAmount,
    t0.BudgetNetAddsQty,
    t0.BudgetNetCancelsQty,
    t0.BudgetOpeningBase,
    t0.ClosingBase,
    t0.EarnedAmount,
    t0.ExclusionReasonCancellation,
    t0.ForecastAddsQty,
    t0.ForecastBudgetEarnedAmount,
    t0.ForecastCancelsQty,
    t0.ForecastClosingBase,
    t0.ForecastNetAddsQty,
    t0.ForecastNetCancelsQty,
    t0.ForecastOpeningBase,
    t0.NFEarnedAmount,
    t0.NYBudgetAddsQty,
    t0.NYBudgetCancelsQty,
    t0.NYBudgetClosingBase,
    t0.NYBudgetEarnedAmount,
    t0.NYBudgetOpeningBase,
    t0.NetAcquisition,
    t0.NetCanellation,
    t0.OpeningBase,
    t0.TotalAcquisition,
    t0.TotalCancellation,
    t0.classification_level_1_description,
    t0.classification_level_2_description,
    t0.delivery_medium_type,
    t0.dw_billing_system_code,
    t0.fy_month_of_year,
    t0.fy_quarter_of_year,
    t0.fy_week_of_year,
    t0.fy_year,
    t0.gl_publication_code,
    t0.masthead_code,
    t0.rate_plan_group_name,
    t0.subscriber_has_email_flag,
    t0.table_union_source,
    DATE(TIMESTAMP '2025-04-01 05:58:44.965022+00', 'Australia/Sydney') AS hardcoded_date_q2,
    DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-04-01 05:58:44.965022+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS calculated_week_from_hardcoded_date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
),

derived_dimensions AS (
  SELECT
    *,
    -- Derived Dimension: masthead_group (unified logic from all queries)
    CASE
      WHEN (gl_publication_code = 'The Australian') THEN 'The Australian'
      WHEN (masthead_code IN ('CM', 'DT', 'HS', 'AA') OR gl_publication_code IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
      WHEN (masthead_code IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TC', 'TB') OR gl_publication_code IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville')) THEN 'Regionals'
      WHEN (gl_publication_code = 'Weekly Times') THEN 'Others'
      WHEN (masthead_code IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU', 'BG', 'OZ', 'NW') OR gl_publication_code IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others', 'The Oz', 'news.com.au', 'Brain Games')) THEN 'Deep Niche Publications'
      ELSE 'Discontinued'
    END AS masthead_group,
    -- Derived Dimension: recognition_type
    CASE
      WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition'
      WHEN (subscriber_has_email_flag = 'N') THEN 'Print Recognition'
      ELSE 'Digital Recognition'
    END AS recognition_type,
    -- Derived Dimension: is_digital_platform_subscription
    (dw_billing_system_code IN ('APLP', 'APLS', 'GPLA', 'SWG')
    OR (table_union_source = 'budgetforecast' AND rate_plan_group_name IN ('Apple Podcasts', 'Google Play', 'Subscribe with Google (SWG)', 'Apple Store'))
    ) AS is_digital_platform_subscription,
    -- Derived Dimension: Period Type (from Q1 clmn0_ / clmn10_)
    CASE
        WHEN (1 = 1) THEN 'Budget'
        WHEN (1 = 2) THEN 'Forecast'
        WHEN (1 = 3) THEN 'YOY'
        WHEN (1 = 4) THEN 'NYBudget'
        ELSE NULL
    END AS period_type_selector -- This simulates the Looker Studio parameter
  FROM base_data
)
SELECT
  -- Dimensions
  fy_year,
  fy_quarter_of_year,
  fy_month_of_year,
  fy_week_of_year,
  masthead_group,
  recognition_type,
  is_digital_platform_subscription,
  gl_publication_code,
  masthead_code,
  delivery_medium_type,
  dw_billing_system_code,
  rate_plan_group_name,
  table_union_source,
  -- Metrics (consolidated from Query 2, assuming all scenarios are calculated)
  SUM(BudgetAddsQty) AS total_budget_adds_qty,
  SUM(BudgetCancelsQty) AS total_budget_cancels_qty,
  SUM(BudgetClosingBase) AS total_budget_closing_base,
  SUM(BudgetEarnedAmount) AS total_budget_earned_amount,
  SUM(BudgetNetAddsQty) AS total_budget_net_adds_qty,
  SUM(BudgetNetCancelsQty) AS total_budget_net_cancels_qty,
  SUM(BudgetOpeningBase) AS total_budget_opening_base,
  SUM(ClosingBase) AS total_closing_base,
  SUM(EarnedAmount) AS total_earned_amount,
  SUM(ForecastAddsQty) AS total_forecast_adds_qty,
  SUM(ForecastBudgetEarnedAmount) AS total_forecast_budget_earned_amount,
  SUM(ForecastCancelsQty) AS total_forecast_cancels_qty,
  SUM(ForecastClosingBase) AS total_forecast_closing_base,
  SUM(ForecastNetAddsQty) AS total_forecast_net_adds_qty,
  SUM(ForecastNetCancelsQty) AS total_forecast_net_cancels_qty,
  SUM(ForecastOpeningBase) AS total_forecast_opening_base,
  SUM(NFEarnedAmount) AS total_nf_earned_amount,
  SUM(NYBudgetAddsQty) AS total_ny_budget_adds_qty,
  SUM(NYBudgetCancelsQty) AS total_ny_budget_cancels_qty,
  SUM(NYBudgetClosingBase) AS total_ny_budget_closing_base,
  SUM(NYBudgetEarnedAmount) AS total_ny_budget_earned_amount,
  SUM(NYBudgetOpeningBase) AS total_ny_budget_opening_base,
  SUM(NetAcquisition) AS total_net_acquisition,
  SUM(NetCanellation) AS total_net_cancellation,
  SUM(OpeningBase) AS total_opening_base,
  SUM(TotalAcquisition) AS total_acquisition,
  SUM(TotalCancellation) AS total_cancellation,
  -- Specific derived metrics from Query 2
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = calculated_week_from_hardcoded_date AND table_union_source IN ('bmasnap_close', 'SC - CODE Manual APLS', 'SC Manual APLS') THEN ClosingBase ELSE 0 END) AS closing_base_specific_week_2025,
  SUM(CASE WHEN fy_year = 2025 AND fy_week_of_year = calculated_week_from_hardcoded_date THEN NYBudgetClosingBase ELSE 0 END) AS ny_budget_closing_base_specific_week_2025,
  SUM(CASE WHEN fy_year = 2025 AND table_union_source = 'bmasnap_open' THEN BudgetOpeningBase ELSE 0 END) AS budget_opening_base_2025_bmasnap_open,
  SUM(CASE WHEN fy_year = 2025 AND table_union_source = 'bmasnap_open' THEN NYBudgetCancelsQty ELSE 0 END) AS ny_budget_cancels_qty_2025_bmasnap_open,
  SUM(SAFE_DIVIDE(ForecastBudgetEarnedAmount, 1000)) AS forecast_budget_earned_amount_k,
  SUM(SAFE_DIVIDE(BudgetEarnedAmount, 1000)) AS budget_earned_amount_k,
  SUM(ClosingBase - NYBudgetCancelsQty) AS closing_base_minus_ny_cancels
FROM derived_dimensions
WHERE
  masthead_group != 'Discontinued'
  AND recognition_type = 'Digital Recognition'
  AND is_digital_platform_subscription = true
GROUP BY
  fy_year,
  fy_quarter_of_year,
  fy_month_of_year,
  fy_week_of_year,
  masthead_group,
  recognition_type,
  is_digital_platform_subscription,
  gl_publication_code,
  masthead_code,
  delivery_medium_type,
  dw_billing_system_code,
  rate_plan_group_name,
  table_union_source
ORDER BY fy_year DESC, fy_week_of_year DESC
LIMIT 1000;
","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.fy_year AS STRING) || '-' || LPAD(SAFE_CAST(t0.fy_week_of_year AS STRING), 2, '0')) AS unique_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(t0.gl_publication_code AS STRING)) AS unique_publication_codes,
  COUNT(DISTINCT SAFE_CAST(t0.masthead_code AS STRING)) AS unique_masthead_codes,
  COUNT(DISTINCT SAFE_CAST(t0.delivery_medium_type AS STRING)) AS unique_delivery_medium_types,
  COUNT(DISTINCT SAFE_CAST(t0.dw_billing_system_code AS STRING)) AS unique_billing_system_codes,
  COUNT(DISTINCT SAFE_CAST(t0.rate_plan_group_name AS STRING)) AS unique_rate_plan_groups,
  COUNT(DISTINCT SAFE_CAST(t0.table_union_source AS STRING)) AS unique_table_union_sources,
  MIN(SAFE_CAST(t0.fy_year AS INT64)) AS earliest_fiscal_year,
  MAX(SAFE_CAST(t0.fy_year AS INT64)) AS latest_fiscal_year,
  APPROX_COUNT_DISTINCT(t0.fiscal_week_id) AS approx_unique_fiscal_week_ids -- Assuming fiscal_week_id is a unique identifier for a week's record
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2;
","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.BudgetEarnedAmount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS budget_earned_amount_test,
  CASE WHEN SUM(SAFE_CAST(t0.ClosingBase AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS closing_base_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.gl_publication_code AS STRING)) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_publication_codes_test,
  CASE WHEN MAX(SAFE_CAST(t0.fy_year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(t0.delivery_medium_type AS STRING) = 'Digital' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS digital_data_exists_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) = EXTRACT(YEAR FROM CURRENT_DATE());
","WITH derived_data AS (
  SELECT
    t0.fy_year,
    t0.fy_week_of_year,
    t0.delivery_medium_type,
    t0.subscriber_has_email_flag,
    t0.dw_billing_system_code,
    t0.rate_plan_group_name,
    t0.table_union_source,
    -- Derived Dimension: masthead_group
    CASE
      WHEN (t0.gl_publication_code = 'The Australian') THEN 'The Australian'
      WHEN (t0.masthead_code IN ('CM', 'DT', 'HS', 'AA') OR t0.gl_publication_code IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
      WHEN (t0.masthead_code IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TC', 'TB') OR t0.gl_publication_code IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville')) THEN 'Regionals'
      WHEN (t0.gl_publication_code = 'Weekly Times') THEN 'Others'
      WHEN (t0.masthead_code IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU', 'BG', 'OZ', 'NW') OR t0.gl_publication_code IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others', 'The Oz', 'news.com.au', 'Brain Games')) THEN 'Deep Niche Publications'
      ELSE 'Discontinued'
    END AS masthead_group,
    -- Derived Dimension: recognition_type
    CASE
      WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition'
      WHEN (t0.subscriber_has_email_flag = 'N') THEN 'Print Recognition'
      ELSE 'Digital Recognition'
    END AS recognition_type,
    -- Derived Dimension: is_digital_platform_subscription
    (t0.dw_billing_system_code IN ('APLP', 'APLS', 'GPLA', 'SWG')
    OR (t0.table_union_source = 'budgetforecast' AND t0.rate_plan_group_name IN ('Apple Podcasts', 'Google Play', 'Subscribe with Google (SWG)', 'Apple Store'))
    ) AS is_digital_platform_subscription
  FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  WHERE SAFE_CAST(t0.fy_year AS INT64) = EXTRACT(YEAR FROM CURRENT_DATE())
)
SELECT
  'Business Rule Validation' AS validation_type,
  'Digital Recognition Filter' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE WHEN recognition_type = 'Digital Recognition' THEN 1 ELSE 0 END) AS records_passing_digital_recognition,
  SAFE_DIVIDE(SUM(CASE WHEN recognition_type = 'Digital Recognition' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS digital_recognition_pass_rate_percent,
  'Masthead Group Filter' AS rule_name_2,
  SUM(CASE WHEN masthead_group != 'Discontinued' THEN 1 ELSE 0 END) AS records_passing_masthead_group,
  SAFE_DIVIDE(SUM(CASE WHEN masthead_group != 'Discontinued' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS masthead_group_pass_rate_percent,
  'Digital Platform Subscription Filter' AS rule_name_3,
  SUM(CASE WHEN is_digital_platform_subscription = TRUE THEN 1 ELSE 0 END) AS records_passing_digital_platform_subscription,
  SAFE_DIVIDE(SUM(CASE WHEN is_digital_platform_subscription = TRUE THEN 1 ELSE 0 END), COUNT(*)) * 100 AS digital_platform_pass_rate_percent
FROM derived_data;
","SELECT
  SAFE_CAST(t0.fy_year AS INT64) AS fiscal_year,
  SAFE_CAST(t0.fy_quarter_of_year AS INT64) AS fiscal_quarter,
  SAFE_CAST(t0.fy_month_of_year AS INT64) AS fiscal_month,
  SAFE_CAST(t0.fy_week_of_year AS INT64) AS fiscal_week,
  SAFE_CAST(t0.gl_publication_code AS STRING) AS gl_publication_code,
  SAFE_CAST(t0.masthead_code AS STRING) AS masthead_code,
  SAFE_CAST(t0.delivery_medium_type AS STRING) AS delivery_medium_type,
  SAFE_CAST(t0.dw_billing_system_code AS STRING) AS dw_billing_system_code,
  SAFE_CAST(t0.rate_plan_group_name AS STRING) AS rate_plan_group_name,
  SAFE_CAST(t0.subscriber_has_email_flag AS STRING) AS subscriber_has_email_flag,
  SAFE_CAST(t0.table_union_source AS STRING) AS table_union_source,
  SAFE_CAST(t0.BudgetAddsQty AS NUMERIC) AS budget_adds_qty,
  SAFE_CAST(t0.BudgetEarnedAmount AS NUMERIC) AS budget_earned_amount,
  SAFE_CAST(t0.ClosingBase AS NUMERIC) AS closing_base,
  SAFE_CAST(t0.EarnedAmount AS NUMERIC) AS earned_amount,
  SAFE_CAST(t0.ForecastClosingBase AS NUMERIC) AS forecast_closing_base,
  SAFE_CAST(t0.NYBudgetClosingBase AS NUMERIC) AS ny_budget_closing_base
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) = EXTRACT(YEAR FROM CURRENT_DATE())
  AND SAFE_CAST(t0.fy_week_of_year AS INT64) = EXTRACT(WEEK FROM CURRENT_DATE())
ORDER BY t0.fy_year DESC, t0.fy_week_of_year DESC
LIMIT 500;
","{'hardcoded_dates': [{'date_value': '2025-04-01', 'original_format': '2025-04-01 05:58:44.965022+00', 'context': 'Used as a fixed date for calculating week differences and determining a specific fiscal week for snapshot metrics.', 'suggested_fix': 'Replace with a Looker Studio date parameter or `CURRENT_DATE()` adjusted for fiscal year start, to allow dynamic reporting.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a baseline date for `DATETIME_DIFF` to calculate a relative week number. This week number is then used to filter data for a specific snapshot.', 'suggested_fix': 'Replace with a Looker Studio date parameter or a dynamic fiscal year start date from a configuration table.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025', 'original_format': '2025', 'context': 'Hardcoded fiscal year for filtering data (`fy_year = 2025`) and in calculations like `(2025-1)`. This limits the dashboard to a single fiscal year.', 'suggested_fix': 'Replace with a Looker Studio year parameter or `EXTRACT(YEAR FROM CURRENT_DATE())` for current fiscal year, and `EXTRACT(YEAR FROM CURRENT_DATE()) + 1` for next fiscal year.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Australian'"", ""'Metros'"", ""'Regionals'"", ""'Others'"", ""'Deep Niche Publications'"", ""'Discontinued'"", ""'Print Recognition'"", ""'Digital Recognition'"", ""'APLP'"", ""'APLS'"", ""'GPLA'"", ""'SWG'"", ""'Racenet'"", ""'Supercoach Plus'"", ""'Townsville'"", ""'Code'"", ""'Herald Sun'"", ""'Toowoomba'"", ""'Geelong'"", ""'The Mercury'"", ""'Punters'"", ""'Daily Telegraph'"", ""'The Advertiser'"", ""'Cairns Post'"", ""'Gold Coast'"", ""'Courier Mail'"", ""'NT News'"", ""'Apple Podcast: Crime X'"", ""'Taste Online'"", ""'The Oz'"", ""'news.com.au'"", ""'Brain Games'"", ""'Suddenly'"", ""'News Corporate'"", ""'Group Newspaper Management - Digital'"", ""'AP'"", ""'NT'"", ""'SC'"", ""'CM'"", ""'DT'"", ""'BG'"", ""'TA'"", ""'TS'"", ""'NW'"", ""'AA'"", ""'PU'"", ""'TM'"", ""'TB'"", ""'CP'"", ""'RN'"", ""'CS'"", ""'GC'"", ""'TC'"", ""'WT'"", ""'HS'"", ""'GA'"", ""'Apple Podcasts'"", ""'Google Play'"", ""'Subscribe with Google (SWG)'"", ""'Apple Store'"", ""'subsnapfact'"", ""'budgetforecast'"", ""'bmasnap_move'"", ""'bmasnap_close'"", ""'exclsionnetcancels'"", ""'nfmanualhist'"", ""'SC - CODE Manual APLS'"", ""'SC Manual APLS'"", ""'Taste Manual APLS'"", ""'Taste Manual GPLA'"", ""'Taste Manual PRES'"", '121', '9644', '9903', '100', '101', '103', '110', '111', '116', '301', '302', '303', '305', '307', '350', '351', '400', '401', '402', '450', '460', '475', '490', '500', '501', '5053', '5253', '560', '670', '685', '850', '851', '852', '961', '962', '963', '9000', '9001', '9002', '9003', '9504', '9514', '9556', '9558', '9560', '9600', '9603', '9623', '9653', '8821', '8822'], 'context': 'Extensive use of hardcoded strings and numeric IDs for `gl_publication_code`, `masthead_code`, `dw_billing_system_code`, `rate_plan_group_name`, and `table_union_source` in complex `CASE` statements for derived dimensions (Masthead Group, Recognition Type, Digital Platform Subscription).', 'suggested_governance': 'Create and maintain governed reference tables for these codes and their corresponding descriptive names/groupings. Join these tables to the `digital_subscriptions` table to derive dimensions dynamically. This centralizes business logic and simplifies maintenance.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['22', '13', '26', '39', '53', '4', '9', '17', '18', '23', '30', '31', '35', '43', '44', '48', '49'], 'context': 'Numeric thresholds used for grouping fiscal weeks into quarters and months (e.g., `fy_week_of_year <= 13` for Q1).', 'suggested_governance': 'Define fiscal calendar rules (week-to-month/quarter mapping) in a dedicated fiscal calendar dimension table. This allows for flexible and accurate fiscal period definitions.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates (e.g., '2025-04-01', '2024-07-03', '2025') with Looker Studio date parameters or dynamic date functions (`CURRENT_DATE()`, `DATE_SUB()`) to enable flexible date range selection."", ""Introduce a Looker Studio parameter for 'Period Type' (Budget, Forecast, YOY, NY) to allow users to dynamically select the scenario, replacing the hardcoded `(2 = 1)` type logic."", 'Externalize all lookup values (e.g., `gl_publication_code` to `masthead_group` mappings, `dw_billing_system_code` categories) into governed reference tables. This allows for easier updates and consistency across dashboards.', 'Consider creating a fiscal calendar dimension table to manage fiscal year, quarter, month, and week definitions, removing hardcoded week thresholds.']",38,d05b3d29-4437-4ee5-987a-e0109eb9590e
"WITH ExcludeLODData AS (
  SELECT
    SAFE_CAST(t0.Margin_Level AS STRING) AS Margin_Level,
    SAFE_CAST(t0.Category AS STRING) AS Category_Dimension,
    SAFE_CAST(t0.Product_Revenue AS NUMERIC) AS Product_Revenue_Exclude_LOD,
    SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS NUMERIC) AS Product_Revenue_Merged_OneRow
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
),
PacmanData AS (
  SELECT
    SAFE_CAST(t0.Fiscal_Year AS INT64) AS Fiscal_Year,
    SAFE_CAST(t0.Product_L3 AS STRING) AS Product_L3,
    SAFE_CAST(t0.Product_Revenue AS NUMERIC) AS Pacman_Product_Revenue
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
)
SELECT
  'ExcludeLOD' AS source_table,
  Margin_Level,
  Category_Dimension,
  NULL AS Fiscal_Year,
  NULL AS Product_L3,
  SUM(Product_Revenue_Exclude_LOD) AS total_product_revenue_exclude_lod,
  SUM(Product_Revenue_Merged_OneRow) AS total_product_revenue_merged_one_row,
  NULL AS total_pacman_product_revenue_2025,
  NULL AS total_sum_fiscal_year_by_product_l3
FROM ExcludeLODData
GROUP BY 1, 2, 3

UNION ALL

SELECT
  'PACMAN' AS source_table,
  NULL AS Margin_Level,
  NULL AS Category_Dimension,
  Fiscal_Year,
  Product_L3,
  NULL AS total_product_revenue_exclude_lod,
  NULL AS total_product_revenue_merged_one_row,
  SUM(CASE WHEN Fiscal_Year = 2025 THEN Pacman_Product_Revenue ELSE 0 END) AS total_pacman_product_revenue_2025,
  SUM(Fiscal_Year) AS total_sum_fiscal_year_by_product_l3
FROM PacmanData
GROUP BY 1, 4, 5
LIMIT 100;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.Category AS STRING)) AS unique_categories,
  COUNT(DISTINCT SAFE_CAST(t0.Margin_Level AS STRING)) AS unique_margin_levels,
  COUNT(DISTINCT SAFE_CAST(t0.Product_L1 AS STRING)) AS unique_product_l1s,
  COUNT(DISTINCT SAFE_CAST(t0.Product_L2 AS STRING)) AS unique_product_l2s,
  COUNT(DISTINCT SAFE_CAST(t0.Product_L3 AS STRING)) AS unique_product_l3s,
  COUNT(DISTINCT SAFE_CAST(t0.Product_L4 AS STRING)) AS unique_product_l4s,
  COUNT(DISTINCT SAFE_CAST(t0.Product_Name AS STRING)) AS unique_product_names,
  MIN(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) AS min_product_revenue,
  MAX(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) AS max_product_revenue,
  AVG(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) AS avg_product_revenue
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS product_revenue_test,
  CASE WHEN SUM(SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS merged_revenue_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.Margin_Level AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS margin_level_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.Category AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS category_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
WHERE SAFE_CAST(t0.Product_Revenue AS NUMERIC) IS NOT NULL
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Category_Selection_Logic' AS rule_name,
  COUNT(*) AS total_records_tested,
  SUM(CASE WHEN SAFE_CAST(t0.Category AS STRING) IS NOT NULL THEN 1 ELSE 0 END) AS records_with_category,
  SUM(CASE WHEN ('Category' = 'Category') THEN 1 ELSE 0 END) AS records_matching_hardcoded_category_logic,
  'The CASE WHEN logic always defaults to the Category column due to hardcoded condition. Review if dynamic selection was intended.' AS observation
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
LIMIT 1;","SELECT
  SAFE_CAST(t0.Category AS STRING) AS Category,
  SAFE_CAST(t0.Margin_Level AS STRING) AS Margin_Level,
  SAFE_CAST(t0.Product_L1 AS STRING) AS Product_L1,
  SAFE_CAST(t0.Product_L2 AS STRING) AS Product_L2,
  SAFE_CAST(t0.Product_L3 AS STRING) AS Product_L3,
  SAFE_CAST(t0.Product_L4 AS STRING) AS Product_L4,
  SAFE_CAST(t0.Product_Name AS STRING) AS Product_Name,
  SAFE_CAST(t0.Product_Revenue AS NUMERIC) AS Product_Revenue,
  SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS NUMERIC) AS Product_Revenue_Merged_OneRow
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
WHERE SAFE_CAST(t0.Product_Revenue AS NUMERIC) IS NOT NULL
ORDER BY SAFE_CAST(t0.Product_Revenue AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'used as a filter for Fiscal_Year in PACMAN Product Revenue metric', 'suggested_fix': ""replace with CURRENT_DATE()'s fiscal year or a parameter"", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Category'"", ""'Product_Name'"", ""'Product_L1'"", ""'Product_L2'"", ""'Product_L3'"", ""'Product_L4'""], 'context': ""string literals used in CASE WHEN conditions for dynamic category selection, where ('Category' = 'Category') makes other conditions redundant."", 'suggested_governance': 'review business logic; if dynamic selection is intended, use a parameter or a more robust configuration.', 'impact': 'medium', 'maintenance_risk': 'high'}]}","[""Replace hardcoded fiscal year '2025' with a date parameter or relative date function (e.g., EXTRACT(YEAR FROM CURRENT_DATE()))."", 'Review and parameterize the dynamic category selection logic in the CASE WHEN statement to allow flexible reporting without code changes.']",39,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"WITH
  subscriptions_data AS (
    SELECT
      SAFE_CAST(t0.fiscal_week_id AS INT64) AS fiscal_week_id,
      t0.category_name,
      t0.gl_publication_code,
      NULL AS channel, -- Not in this table
      NULL AS state, -- Not in this table
      SAFE_CAST(t0.add_volume AS NUMERIC) AS add_volume,
      SAFE_CAST(t0.closing_base AS NUMERIC) AS closing_base,
      SAFE_CAST(t0.earned_amount AS NUMERIC) AS earned_amount,
      SAFE_CAST(t0.opening_base AS NUMERIC) AS opening_base,
      SAFE_CAST(t0.red_volume AS NUMERIC) AS red_volume,
      SAFE_CAST(t0.transfer_in AS NUMERIC) AS transfer_in,
      SAFE_CAST(t0.transfer_out AS NUMERIC) AS transfer_out,
      NULL AS home_del_charge, -- Not in this table
      NULL AS returns_credit_amount, -- Not in this table
      NULL AS rev_adjust, -- Not in this table
      'dv_tm1_pbf_subscriptions' AS source_table
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
    WHERE
      SAFE_CAST(t0.fiscal_week_id AS INT64) = 202535 -- Applying the hardcoded filter
  ),
  circulation_data AS (
    SELECT
      NULL AS fiscal_week_id, -- Not in this table
      NULL AS category_name, -- Not in this table
      NULL AS gl_publication_code, -- Not in this table
      t0.channel,
      t0.state,
      NULL AS add_volume, -- Not in this table
      NULL AS closing_base, -- Not in this table
      NULL AS earned_amount, -- Not in this table
      NULL AS opening_base, -- Not in this table
      NULL AS red_volume, -- Not in this table
      NULL AS transfer_in, -- Not in this table
      NULL AS transfer_out, -- Not in this table
      SAFE_CAST(t0.home_del_charge AS NUMERIC) AS home_del_charge,
      SAFE_CAST(t0.returns_credit_amount AS NUMERIC) AS returns_credit_amount,
      SAFE_CAST(t0.rev_adjust AS NUMERIC) AS rev_adjust,
      'dv_tm1_pbf_circulation_actuals' AS source_table
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` AS t0
  )
SELECT
  fiscal_week_id,
  state,
  category_name,
  gl_publication_code,
  channel,
  source_table,
  SUM(add_volume) AS total_add_volume,
  SUM(closing_base) AS total_closing_base,
  SUM(earned_amount) AS total_earned_amount,
  SUM(opening_base) AS total_opening_base,
  SUM(red_volume) AS total_red_volume,
  SUM(transfer_in) AS total_transfer_in,
  SUM(transfer_out) AS total_transfer_out,
  SUM(home_del_charge) AS total_home_del_charge,
  SUM(returns_credit_amount) AS total_returns_credit_amount,
  SUM(rev_adjust) AS total_rev_adjust
FROM
  (
    SELECT * FROM subscriptions_data
    UNION ALL
    SELECT * FROM circulation_data
  )
GROUP BY
  fiscal_week_id,
  state,
  category_name,
  gl_publication_code,
  channel,
  source_table
ORDER BY
  source_table, fiscal_week_id DESC, state DESC
LIMIT 100;","SELECT
  'dv_tm1_pbf_subscriptions' AS table_name,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS INT64)) AS unique_fiscal_weeks,
  MIN(SAFE_CAST(fiscal_week_id AS INT64)) AS min_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS INT64)) AS max_fiscal_week_id,
  COUNT(DISTINCT category_name) AS unique_categories,
  COUNT(DISTINCT gl_publication_code) AS unique_gl_publication_codes,
  SUM(CASE WHEN add_volume IS NULL THEN 1 ELSE 0 END) AS null_add_volume_count,
  SUM(CASE WHEN earned_amount IS NULL THEN 1 ELSE 0 END) AS null_earned_amount_count,
  NULL AS unique_channels, -- Not applicable
  NULL AS unique_states, -- Not applicable
  NULL AS null_home_del_charge_count, -- Not applicable
  NULL AS null_rev_adjust_count -- Not applicable
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
UNION ALL
SELECT
  'dv_tm1_pbf_circulation_actuals' AS table_name,
  COUNT(*) AS total_records,
  NULL AS unique_fiscal_weeks, -- Not applicable
  NULL AS min_fiscal_week_id, -- Not applicable
  NULL AS max_fiscal_week_id, -- Not applicable
  NULL AS unique_categories, -- Not applicable
  NULL AS unique_gl_publication_codes, -- Not applicable
  NULL AS null_add_volume_count, -- Not applicable
  NULL AS null_earned_amount_count, -- Not applicable
  COUNT(DISTINCT channel) AS unique_channels,
  COUNT(DISTINCT state) AS unique_states,
  SUM(CASE WHEN home_del_charge IS NULL THEN 1 ELSE 0 END) AS null_home_del_charge_count,
  SUM(CASE WHEN rev_adjust IS NULL THEN 1 ELSE 0 END) AS null_rev_adjust_count
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`;","SELECT
  'Validation Check - Subscriptions' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_count_test,
  CASE WHEN SUM(SAFE_CAST(earned_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS earned_amount_positive_test,
  CASE WHEN MAX(SAFE_CAST(fiscal_week_id AS INT64)) >= 202535 THEN 'PASS' ELSE 'FAIL' END AS fiscal_week_freshness_test,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS INT64)) AS distinct_fiscal_weeks_in_sample
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE
  SAFE_CAST(fiscal_week_id AS INT64) >= 202530 -- Check recent fiscal weeks
UNION ALL
SELECT
  'Validation Check - Circulation Actuals' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_count_test,
  CASE WHEN SUM(SAFE_CAST(rev_adjust AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS rev_adjust_positive_test,
  'N/A' AS fiscal_week_freshness_test, -- No fiscal_week_id in this table
  NULL AS distinct_fiscal_weeks_in_sample -- No fiscal_week_id in this table
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`
LIMIT 2;","SELECT
  'Business Rule Validation - Subscriptions Fiscal Week Filter' AS validation_type,
  'Hardcoded Fiscal Week 202535' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN SAFE_CAST(fiscal_week_id AS INT64) = 202535 THEN 1 ELSE 0 END) AS records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(fiscal_week_id AS INT64) = 202535 THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE
  SAFE_CAST(fiscal_week_id AS INT64) >= 202530 -- Look at recent fiscal weeks to see if the rule applies
LIMIT 1;","SELECT
  'dv_tm1_pbf_subscriptions' AS source_table,
  SAFE_CAST(fiscal_week_id AS INT64) AS fiscal_week_id,
  category_name,
  gl_publication_code,
  SAFE_CAST(add_volume AS NUMERIC) AS add_volume,
  SAFE_CAST(earned_amount AS NUMERIC) AS earned_amount,
  NULL AS channel,
  NULL AS state,
  NULL AS home_del_charge,
  NULL AS rev_adjust
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE
  SAFE_CAST(fiscal_week_id AS INT64) = 202535 -- Use the filtered week for relevance
ORDER BY
  earned_amount DESC
LIMIT 50
UNION ALL
SELECT
  'dv_tm1_pbf_circulation_actuals' AS source_table,
  NULL AS fiscal_week_id,
  NULL AS category_name,
  NULL AS gl_publication_code,
  NULL AS add_volume,
  NULL AS earned_amount,
  channel,
  state,
  SAFE_CAST(home_del_charge AS NUMERIC) AS home_del_charge,
  SAFE_CAST(rev_adjust AS NUMERIC) AS rev_adjust
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals`
ORDER BY
  rev_adjust DESC
LIMIT 50;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'fiscal_period_id', 'hardcoded_values': ['202535'], 'context': 'Used to filter fiscal_week_id in dv_tm1_pbf_subscriptions query.', 'suggested_governance': 'Replace with a dynamic parameter (e.g., current fiscal week, or user-selected fiscal week) or join to a fiscal calendar dimension table.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded fiscal week IDs with date parameters or relative fiscal period functions.', 'Consider using configuration tables for business rules or lookup values if more complex filtering or categorization is needed.']",40,23c8b213-a9f0-4158-b8fa-bff14425abb5
"WITH base_data AS (
  SELECT
    t0.data_load_datetime,
    t0.financial_short_month,
    t0.financial_year,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.cost_model_type,
    t0.advertiser_name,
    t0.gross_revenue_amount,
    t0.revenue_group_subtype,
    t0.revenue_type_level2,
    t0.source_system_code
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    NOT(t0.financial_year IS NULL)
    AND SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency'
    AND SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Billed', 'Booked')
    AND SAFE_CAST(t0.financial_year AS STRING) = '2025'
)
SELECT
  DATETIME_TRUNC(base_data.data_load_datetime, SECOND) AS data_load_datetime_second_grain,
  SAFE_CAST(base_data.financial_short_month AS STRING) AS financial_short_month,
  SAFE_CAST(base_data.financial_year AS STRING) AS financial_year,
  SAFE_CAST(base_data.revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SAFE_CAST(base_data.source_publishing_division AS STRING) AS source_publishing_division,
  SAFE_CAST(base_data.cost_model_type AS STRING) AS cost_model_type,
  SAFE_CAST(base_data.advertiser_name AS STRING) AS advertiser_name,
  SAFE_CAST(base_data.revenue_group_subtype AS STRING) AS revenue_group_subtype,
  SAFE_CAST(base_data.revenue_type_level2 AS STRING) AS revenue_type_level2,
  SAFE_CAST(base_data.source_system_code AS STRING) AS source_system_code,
  SUM(SAFE_CAST(base_data.gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount,
  SUM(CASE
    WHEN SAFE_CAST(base_data.revenue_type_level2 AS STRING) = 'Programmatic'
    AND SAFE_CAST(base_data.revenue_group_subtype AS STRING) IN ('Programmatic Source', 'Digital')
    AND SAFE_CAST(base_data.advertiser_name AS STRING) = 'Foxtel Management Pty Ltd'
    AND SAFE_CAST(base_data.source_system_code AS STRING) = 'PLUTO'
    AND SAFE_CAST(base_data.financial_short_month AS STRING) = 'Oct'
    THEN SAFE_CAST(base_data.gross_revenue_amount AS NUMERIC)
    ELSE 0
  END) AS programmatic_gross_revenue_oct_foxtel_pluto
FROM base_data
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10
ORDER BY
  financial_year DESC, financial_short_month DESC, data_load_datetime_second_grain DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.data_load_datetime AS DATE)) AS unique_data_load_dates,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS STRING)) AS unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(t0.financial_short_month AS STRING)) AS unique_financial_months,
  COUNT(DISTINCT SAFE_CAST(t0.advertiser_name AS STRING)) AS unique_advertisers,
  COUNT(DISTINCT SAFE_CAST(t0.source_publishing_division AS STRING)) AS unique_publishing_divisions,
  MIN(SAFE_CAST(t0.data_load_datetime AS DATE)) AS earliest_data_load_date,
  MAX(SAFE_CAST(t0.data_load_datetime AS DATE)) AS latest_data_load_date,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_amount_count
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS STRING) = '2025'
LIMIT 1000;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS gross_revenue_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.advertiser_name AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_test,
  CASE WHEN MAX(SAFE_CAST(t0.data_load_datetime AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test_last_year,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Billed', 'Booked') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS transaction_status_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS STRING) = '2025'
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'revenue_transaction_status_rule' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Billed', 'Booked') THEN 1 ELSE 0 END) AS records_passing_status_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Billed', 'Booked') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage_status,
  'source_publishing_division_exclusion_rule' AS rule_name_2,
  SUM(CASE WHEN SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' THEN 1 ELSE 0 END) AS records_passing_division_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage_division
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.financial_year AS STRING) = '2025'
LIMIT 1000;","SELECT
  SAFE_CAST(t0.data_load_datetime AS DATETIME) AS data_load_datetime,
  SAFE_CAST(t0.financial_short_month AS STRING) AS financial_short_month,
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
  SAFE_CAST(t0.cost_model_type AS STRING) AS cost_model_type,
  SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  SAFE_CAST(t0.revenue_group_subtype AS STRING) AS revenue_group_subtype,
  SAFE_CAST(t0.revenue_type_level2 AS STRING) AS revenue_type_level2,
  SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  NOT(t0.financial_year IS NULL)
  AND SAFE_CAST(t0.financial_year AS STRING) = '2025'
  AND SAFE_CAST(t0.financial_short_month AS STRING) = 'Oct'
ORDER BY
  SAFE_CAST(t0.data_load_datetime AS DATETIME) DESC,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""'2025'"", 'context': 'Used as a filter for financial_year in all queries.', 'suggested_fix': 'Replace with a parameter or relative date logic (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or a dashboard date range filter).', 'impact': 'high', 'urgency': 'high'}, {'date_value': 'Oct', 'original_format': ""'Oct'"", 'context': ""Used as a filter for financial_short_month in Query 1 and implicitly in Query 3's specific programmatic revenue calculation."", 'suggested_fix': ""Replace with a parameter or relative date logic (e.g., `FORMAT_DATE('%b', CURRENT_DATE())` or a dashboard date range filter)."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'Exclusion filter for `source_publishing_division` in all queries.', 'suggested_governance': 'Manage excluded divisions in a configuration table or parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Billed'"", ""'Booked'""], 'context': 'Inclusion filter for `revenue_transaction_status` in all queries.', 'suggested_governance': 'Manage valid transaction statuses in a lookup table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic'""], 'context': 'Filter for `revenue_type_level2` in Query 3.', 'suggested_governance': 'Manage revenue types in a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic Source'"", ""'Digital'""], 'context': 'Filter for `revenue_group_subtype` in Query 3.', 'suggested_governance': 'Manage revenue group subtypes in a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Foxtel Management Pty Ltd'""], 'context': 'Filter for `advertiser_name` in Query 3.', 'suggested_governance': 'Manage advertiser names in a lookup table or use advertiser IDs.', 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'""], 'context': 'Filter for `source_system_code` in Query 3.', 'suggested_governance': 'Manage source system codes in a lookup table.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded financial year and month with dashboard date range parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_TRUNC(CURRENT_DATE(), YEAR)`).', 'Replace hardcoded lookup values (e.g., `revenue_transaction_status`, `revenue_type_level2`, `source_system_code`) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., `source_publishing_division` exclusions) instead of hardcoded logic within queries.']",41,705edcb5-737a-4600-b1a7-11870177f97a
"-- This query consolidates all identified metrics and key dimensions into a single, BigQuery-compliant view.
-- It applies a general fiscal year filter and includes the complex GL publication mapping.

WITH base_circulation_data AS (
  SELECT
    ci.charge_date,
    ci.charge_type,
    ci.day_of_week,
    SAFE_CAST(ci.fiscal_week_id AS STRING) AS fiscal_week_id_str,
    ci.route_volume,
    ci.charge_amount,
    SAFE_CAST(ci.gl_publication_code AS STRING) AS gl_publication_code_str,
    ci.sales_channel_l4,
    cal.day_short_name
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
    LEFT JOIN
    `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
    ON ci.charge_date = cal.calendar_date
  WHERE
    -- Filter for fiscal year 2025 as detected in original queries
    SAFE_LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) = '2025'
    -- Add a general date range for performance, e.g., last 180 days if data is recent
    AND ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY)
),

calculated_metrics AS (
  SELECT
    charge_date,
    charge_type,
    day_of_week,
    fiscal_week_id_str,
    gl_publication_code_str,
    sales_channel_l4,
    day_short_name,
    route_volume,
    charge_amount,
    -- Derived GL Publication Name (hardcoded mapping from original query)
    CASE
      WHEN gl_publication_code_str IN ('500', '560') THEN 'ADV'
      WHEN gl_publication_code_str = '100' THEN 'AUS'
      WHEN gl_publication_code_str IN ('400', '402') THEN 'CM'
      WHEN gl_publication_code_str = '9504' THEN 'Delicious'
      WHEN gl_publication_code_str = '9505' THEN 'Delicious Specials'
      WHEN gl_publication_code_str IN ('110', '116') THEN 'DT'
      WHEN gl_publication_code_str = '350' THEN 'GAD'
      WHEN gl_publication_code_str = '670' THEN 'GCB'
      WHEN gl_publication_code_str = '180' THEN 'Group Shared Services'
      WHEN gl_publication_code_str = '156' THEN 'Hobart Print Services'
      WHEN gl_publication_code_str IN ('301', '303') THEN 'HS'
      WHEN gl_publication_code_str = '5003' THEN 'MDM'
      WHEN gl_publication_code_str IN ('850', '852') THEN 'MERCURY'
      WHEN gl_publication_code_str IN ('961', '963') THEN 'NTN'
      WHEN gl_publication_code_str = '158' THEN 'Perth Print Services'
      WHEN gl_publication_code_str = 'Post Courier' THEN 'Post Courier'
      WHEN gl_publication_code_str = '5024' THEN 'SC'
      WHEN gl_publication_code_str IN ('9514', '9515') THEN 'Taste'
      WHEN gl_publication_code_str = '5053' THEN 'TCHRN'
      WHEN gl_publication_code_str = '450' THEN 'TCP'
      WHEN gl_publication_code_str = '475' THEN 'TVB'
      WHEN gl_publication_code_str = '9560' THEN 'Vogue'
      WHEN gl_publication_code_str = '9556' THEN 'Vogue Living'
      WHEN gl_publication_code_str = '305' THEN 'WT'
      ELSE 'Other'
    END AS gl_publication_name,
    -- Metric: Total Returns Volume
    CASE WHEN charge_type = 'RETURNS' THEN SAFE_CAST(route_volume AS NUMERIC) ELSE 0 END AS returns_volume,
    -- Metric: Total Draw Volume
    CASE WHEN charge_type = 'DRAW' THEN SAFE_CAST(route_volume AS NUMERIC) ELSE 0 END AS draw_volume,
    -- Metric: Total Adjustment Volume
    CASE WHEN charge_type = 'ADJUSTMENT' THEN SAFE_CAST(route_volume AS NUMERIC) ELSE 0 END AS adjustment_volume,
    -- Metric: Total Charge Amount
    SAFE_CAST(charge_amount AS NUMERIC) AS charge_amount_numeric
  FROM
    base_circulation_data
)

SELECT
  fiscal_week_id_str AS fiscal_week_id,
  day_of_week,
  gl_publication_name,
  sales_channel_l4,
  SUM(returns_volume) AS total_returns_volume,
  SUM(draw_volume) AS total_draw_volume,
  SUM(adjustment_volume) AS total_adjustment_volume,
  SUM(returns_volume + draw_volume + adjustment_volume) AS total_volume_draw_returns_adjustment,
  SUM(charge_amount_numeric) AS total_charge_amount
FROM
  calculated_metrics
GROUP BY
  fiscal_week_id_str,
  day_of_week,
  gl_publication_name,
  sales_channel_l4
ORDER BY
  fiscal_week_id_str DESC, day_of_week ASC
LIMIT 1000;
","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(ci.charge_date AS DATE)) AS unique_charge_dates,
  COUNT(DISTINCT SAFE_CAST(ci.fiscal_week_id AS STRING)) AS unique_fiscal_weeks,
  COUNT(DISTINCT ci.charge_type) AS unique_charge_types,
  COUNT(DISTINCT ci.gl_publication_code) AS unique_gl_publication_codes,
  COUNT(DISTINCT ci.sales_channel_l4) AS unique_sales_channels,
  MIN(SAFE_CAST(ci.charge_date AS DATE)) AS earliest_charge_date,
  MAX(SAFE_CAST(ci.charge_date AS DATE)) AS latest_charge_date,
  AVG(SAFE_CAST(ci.route_volume AS NUMERIC)) AS avg_route_volume,
  AVG(SAFE_CAST(ci.charge_amount AS NUMERIC)) AS avg_charge_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
WHERE
  -- Sample data for recent period to ensure relevance and performance
  ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;
","-- Quick validation that all metric calculations work syntactically and return plausible values
WITH base_data AS (
  SELECT
    ci.charge_type,
    ci.route_volume,
    ci.charge_amount,
    SAFE_CAST(ci.fiscal_week_id AS STRING) AS fiscal_week_id_str,
    ci.gl_publication_code,
    ci.sales_channel_l4,
    ci.charge_date
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  WHERE
    ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
    AND SAFE_LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) = '2025'
)
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(CASE WHEN charge_type = 'RETURNS' THEN SAFE_CAST(route_volume AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS returns_volume_test,
  CASE WHEN SUM(CASE WHEN charge_type = 'DRAW' THEN SAFE_CAST(route_volume AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS draw_volume_test,
  CASE WHEN SUM(SAFE_CAST(charge_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS charge_amount_test,
  CASE WHEN COUNT(DISTINCT fiscal_week_id_str) > 0 THEN 'PASS' ELSE 'FAIL' END AS fiscal_week_id_test,
  CASE WHEN COUNT(DISTINCT gl_publication_code) > 0 THEN 'PASS' ELSE 'FAIL' END AS gl_publication_code_test,
  CASE WHEN MAX(SAFE_CAST(charge_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test
FROM
  base_data
LIMIT 1;
","-- Query to validate key business logic, filters, and data quality
-- Validating the GL Publication Code mapping coverage and 'Other' category usage
WITH base_data AS (
  SELECT
    SAFE_CAST(gl_publication_code AS STRING) AS gl_publication_code_str
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights`
  WHERE
    charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
    AND SAFE_LEFT(SAFE_CAST(fiscal_week_id AS STRING), 4) = '2025'
)
SELECT
  'Business Rule Validation' AS validation_type,
  'GL Publication Code Mapping Coverage' AS rule_name,
  COUNT(*) AS total_records_tested,
  SUM(CASE
    WHEN gl_publication_code_str IN (
      '500', '560', '100', '400', '402', '9504', '9505', '110', '116', '350', '670', '180', '156',
      '301', '303', '5003', '850', '852', '961', '963', '158', 'Post Courier', '5024', '9514',
      '9515', '5053', '450', '475', '9560', '9556', '305'
    ) THEN 1
    ELSE 0
  END) AS records_with_mapped_code,
  SUM(CASE
    WHEN gl_publication_code_str NOT IN (
      '500', '560', '100', '400', '402', '9504', '9505', '110', '116', '350', '670', '180', '156',
      '301', '303', '5003', '850', '852', '961', '963', '158', 'Post Courier', '5024', '9514',
      '9515', '5053', '450', '475', '9560', '9556', '305'
    ) THEN 1
    ELSE 0
  END) AS records_falling_into_other,
  SAFE_DIVIDE(
    SUM(CASE
      WHEN gl_publication_code_str IN (
        '500', '560', '100', '400', '402', '9504', '9505', '110', '116', '350', '670', '180', '156',
        '301', '303', '5003', '850', '852', '961', '963', '158', 'Post Courier', '5024', '9514',
        '9515', '5053', '450', '475', '9560', '9556', '305'
      ) THEN 1
      ELSE 0
    END), COUNT(*)
  ) * 100 AS percentage_mapped,
  SAFE_DIVIDE(
    SUM(CASE
      WHEN gl_publication_code_str NOT IN (
        '500', '560', '100', '400', '402', '9504', '9505', '110', '116', '350', '670', '180', '156',
        '301', '303', '5003', '850', '852', '961', '963', '158', 'Post Courier', '5024', '9514',
        '9515', '5053', '450', '475', '9560', '9556', '305'
      ) THEN 1
      ELSE 0
    END), COUNT(*)
  ) * 100 AS percentage_other
FROM
  base_data
LIMIT 1;
","-- Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(ci.charge_date AS DATE) AS charge_date,
  ci.charge_type,
  ci.day_of_week,
  SAFE_CAST(ci.fiscal_week_id AS STRING) AS fiscal_week_id,
  SAFE_CAST(ci.route_volume AS NUMERIC) AS route_volume,
  SAFE_CAST(ci.charge_amount AS NUMERIC) AS charge_amount,
  SAFE_CAST(ci.gl_publication_code AS STRING) AS gl_publication_code,
  ci.sales_channel_l4,
  cal.day_short_name
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  -- Filter for recent data and the detected fiscal year
  ci.charge_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND SAFE_LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) = '2025'
ORDER BY
  ci.charge_date DESC, ci.charge_amount DESC
LIMIT 500;
","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""'2025'"", 'context': 'Fiscal year filter applied to all queries.', 'suggested_fix': 'Replace with a parameter (e.g., `{{fiscal_year_param}}`) or relative fiscal year logic (e.g., `CURRENT_FISCAL_YEAR()`).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'500'"", ""'560'"", ""'100'"", ""'400'"", ""'402'"", ""'9504'"", ""'9505'"", ""'110'"", ""'116'"", ""'350'"", ""'670'"", ""'180'"", ""'156'"", ""'301'"", ""'303'"", ""'5003'"", ""'850'"", ""'852'"", ""'961'"", ""'963'"", ""'158'"", ""'Post Courier'"", ""'5024'"", ""'9514'"", ""'9515'"", ""'5053'"", ""'450'"", ""'475'"", ""'9560'"", ""'9556'"", ""'305'""], 'context': 'GL publication codes mapped to names in a large CASE statement.', 'suggested_governance': 'Create and join to a `dim_gl_publication_codes` lookup table in `prstn_finance` dataset.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'Sun'"", '202541', '202542', '202543', '202544', '202545', '202533', '202534', '202535', '202536', '202537', '202538', '202539', '202540', ""'DRAW'"", ""'RETURNS'"", ""'ADJUSTMENT'"", ""'Subscriptions'"", ""'DT'""], 'context': 'Specific day of week, fiscal week IDs, charge types, sales channels, and derived publication names used as filters.', 'suggested_governance': 'Replace with Looker Studio controls/parameters for user selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded fiscal years and specific fiscal week IDs with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', 'Replace hardcoded lookup values for GL publication codes with joins to a governed reference table (`dim_gl_publication_codes`).', ""Implement Looker Studio controls for filtering by 'Day of Week', 'Charge Type', 'Sales Channel L4', and 'GL Publication Name' instead of hardcoding values in queries.""]",42,c441950c-1e3f-432c-9838-847d1d315b9e
"-- THIS IS THE MAIN SQL TO RUN - Consolidated query for all key metrics
WITH
  base_data AS (
    SELECT
      t0.cost_model_type,
      t0.financial_month,
      t0.financial_quarter,
      t0.financial_short_month,
      t0.gross_revenue_amount,
      t0.relative_fy_year_offset,
      t0.relative_fy_month_offset,
      t0.reporting_date,
      t0.revenue_group_subtype,
      t0.unified_publication_name
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      SAFE_CAST(t0.reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) -- Filter for last 2 years for relevance
  ),
  derived_attributes AS (
    SELECT
      cost_model_type,
      financial_month,
      financial_quarter,
      financial_short_month,
      gross_revenue_amount,
      relative_fy_year_offset,
      relative_fy_month_offset,
      reporting_date,
      revenue_group_subtype,
      unified_publication_name,
      -- Derived flags and classifications
      UPPER(SAFE_CAST(cost_model_type AS STRING)) AS cost_model_type_upper,
      UPPER(SAFE_CAST(revenue_group_subtype AS STRING)) AS revenue_group_subtype_upper,
      CASE
        WHEN unified_publication_name = 'Run of Audience Extension' THEN 'Y'
        ELSE 'N'
      END AS is_run_of_audience_extension_flag,
      CASE
        WHEN unified_publication_name = 'TUBI' THEN 'TUBI'
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
        WHEN unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE'
        ELSE NULL
      END AS programmatic_type,
      (relative_fy_year_offset = 0) AS is_current_fy,
      (relative_fy_year_offset = -1) AS is_previous_fy,
      (SAFE_CAST(reporting_date AS DATE) < DATE('2025-06-18')) AS is_ytd_period_as_of_hardcoded_date
    FROM
      base_data
  ),
  calculated_measures AS (
    SELECT
      financial_month,
      financial_quarter,
      financial_short_month,
      programmatic_type,
      cost_model_type_upper,
      revenue_group_subtype_upper,
      relative_fy_year_offset,
      relative_fy_month_offset,
      reporting_date,
      gross_revenue_amount,
      -- Programmatic Source Revenue (clmn12_ in Q1, clmn19_ in Q2)
      CASE
        WHEN revenue_group_subtype_upper = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount
        ELSE NULL
      END AS programmatic_source_revenue,
      -- Base Revenue for FY Calculation (clmn14_/clmn15_ in Q1)
      CASE
        WHEN programmatic_type = 'PERFORMANCE' THEN gross_revenue_amount
        WHEN revenue_group_subtype_upper = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount
        ELSE NULL
      END AS base_revenue_for_fy_calc,
      -- Previous Year Revenue (Q1 clmn16_, clmn18_)
      CASE
        WHEN is_previous_fy THEN
          CASE
            WHEN programmatic_type = 'PERFORMANCE' THEN gross_revenue_amount
            WHEN revenue_group_subtype_upper = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount
            ELSE NULL
          END
        ELSE NULL
      END AS py_revenue_total,
      -- Current Year Revenue (Q1 clmn17_, clmn19_)
      CASE
        WHEN is_current_fy THEN
          CASE
            WHEN programmatic_type = 'PERFORMANCE' THEN gross_revenue_amount
            WHEN revenue_group_subtype_upper = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount
            ELSE NULL
          END
        ELSE NULL
      END AS cy_revenue_total,
      -- Combined Programmatic Revenue (Q2 clmn27_)
      CASE
        WHEN programmatic_type IN ('TUBI', 'PERFORMANCE') THEN gross_revenue_amount
        WHEN revenue_group_subtype_upper = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount
        ELSE NULL
      END AS combined_programmatic_revenue
    FROM
      derived_attributes
  )
SELECT
  financial_short_month,
  financial_quarter,
  financial_month,
  programmatic_type,
  relative_fy_year_offset,
  relative_fy_month_offset,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(programmatic_source_revenue) AS total_programmatic_source_revenue,
  SUM(py_revenue_total) AS total_py_revenue,
  SUM(cy_revenue_total) AS total_cy_revenue,
  SUM(CASE WHEN programmatic_type = 'PMP' AND is_previous_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS py_revenue_pmp,
  SUM(CASE WHEN programmatic_type = 'TUBI' AND is_previous_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS py_revenue_tubi,
  SUM(CASE WHEN programmatic_type = 'PERFORMANCE' AND is_previous_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS py_revenue_performance,
  SUM(CASE WHEN programmatic_type = 'PG' AND is_previous_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS py_revenue_pg,
  SUM(CASE WHEN programmatic_type = 'OMP' AND is_previous_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS py_revenue_omp,
  SUM(CASE WHEN programmatic_type = 'PMP' AND is_current_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS cy_revenue_pmp,
  SUM(CASE WHEN programmatic_type = 'TUBI' AND is_current_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS cy_revenue_tubi,
  SUM(CASE WHEN programmatic_type = 'PERFORMANCE' AND is_current_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS cy_revenue_performance,
  SUM(CASE WHEN programmatic_type = 'PG' AND is_current_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS cy_revenue_pg,
  SUM(CASE WHEN programmatic_type = 'OMP' AND is_current_fy THEN base_revenue_for_fy_calc ELSE NULL END) AS cy_revenue_omp,
  SUM(CASE WHEN is_current_fy AND is_ytd_period_as_of_hardcoded_date THEN combined_programmatic_revenue ELSE NULL END) AS cy_combined_programmatic_revenue_ytd,
  SUM(CASE WHEN is_current_fy AND is_ytd_period_as_of_hardcoded_date AND programmatic_type = 'TUBI' THEN gross_revenue_amount ELSE NULL END) AS cy_tubi_revenue_ytd,
  SUM(CASE WHEN is_current_fy AND is_ytd_period_as_of_hardcoded_date AND programmatic_type = 'PERFORMANCE' THEN gross_revenue_amount ELSE NULL END) AS cy_performance_revenue_ytd,
  SUM(CASE WHEN is_current_fy AND is_ytd_period_as_of_hardcoded_date AND cost_model_type_upper = 'PMP' THEN combined_programmatic_revenue ELSE NULL END) AS cy_pmp_revenue_ytd,
  SUM(CASE WHEN is_current_fy AND is_ytd_period_as_of_hardcoded_date AND cost_model_type_upper = 'GUARANTEED' THEN combined_programmatic_revenue ELSE NULL END) AS cy_guaranteed_revenue_ytd,
  SUM(CASE WHEN is_current_fy AND is_ytd_period_as_of_hardcoded_date AND cost_model_type_upper = 'NON-GUARANTEED' THEN combined_programmatic_revenue ELSE NULL END) AS cy_nonguaranteed_revenue_ytd
FROM
  calculated_measures
WHERE
  SAFE_CAST(financial_quarter AS INT64) = 2 -- Hardcoded filter from Q1
  OR relative_fy_year_offset = 0 -- Filter from Q2
GROUP BY
  financial_short_month,
  financial_quarter,
  financial_month,
  programmatic_type,
  relative_fy_year_offset,
  relative_fy_month_offset
ORDER BY
  MIN(SAFE_CAST(financial_month AS INT64)) ASC -- Order by financial_month as in Q1
LIMIT 100000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(reporting_date AS DATE)) AS unique_reporting_dates,
  COUNT(DISTINCT SAFE_CAST(financial_month AS INT64)) AS unique_financial_months,
  COUNT(DISTINCT SAFE_CAST(financial_quarter AS INT64)) AS unique_financial_quarters,
  COUNT(DISTINCT unified_publication_name) AS unique_publication_names,
  COUNT(DISTINCT cost_model_type) AS unique_cost_model_types,
  COUNT(DISTINCT revenue_group_subtype) AS unique_revenue_subtypes,
  MIN(SAFE_CAST(reporting_date AS DATE)) AS earliest_reporting_date,
  MAX(SAFE_CAST(reporting_date AS DATE)) AS latest_reporting_date,
  AVG(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS avg_gross_revenue_amount
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE
  SAFE_CAST(reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE
    WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS total_revenue_positive_test,
  CASE
    WHEN COUNT(DISTINCT unified_publication_name) > 1 THEN 'PASS'
    ELSE 'FAIL'
  END AS multiple_publication_names_test,
  CASE
    WHEN MAX(SAFE_CAST(reporting_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_test,
  CASE
    WHEN COUNT(CASE WHEN SAFE_CAST(relative_fy_year_offset AS INT64) = 0 THEN 1 END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS current_fy_data_exists_test,
  CASE
    WHEN COUNT(CASE WHEN SAFE_CAST(financial_quarter AS INT64) = 2 THEN 1 END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS quarter_2_data_exists_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE
  SAFE_CAST(reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Programmatic Type Classification' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(
    CASE
      WHEN unified_publication_name = 'TUBI' AND programmatic_type = 'TUBI' THEN 1
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' AND programmatic_type = 'PG' THEN 1
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' AND programmatic_type = 'OMP' THEN 1
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' AND programmatic_type = 'PMP' THEN 1
      WHEN unified_publication_name = 'Run of Audience Extension' AND programmatic_type = 'PERFORMANCE' THEN 1
      ELSE 0
    END
  ) AS records_matching_rule,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN unified_publication_name = 'TUBI' AND programmatic_type = 'TUBI' THEN 1
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' AND programmatic_type = 'PG' THEN 1
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' AND programmatic_type = 'OMP' THEN 1
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' AND programmatic_type = 'PMP' THEN 1
        WHEN unified_publication_name = 'Run of Audience Extension' AND programmatic_type = 'PERFORMANCE' THEN 1
        ELSE 0
      END
    ),
    COUNT(*)
  ) * 100 AS compliance_percentage
FROM
  (
    SELECT
      unified_publication_name,
      cost_model_type,
      CASE
        WHEN unified_publication_name = 'TUBI' THEN 'TUBI'
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
        WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
        WHEN unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE'
        ELSE NULL
      END AS programmatic_type
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
    WHERE
      SAFE_CAST(reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  )
LIMIT 1;","SELECT
  SAFE_CAST(reporting_date AS DATE) AS reporting_date,
  financial_short_month,
  financial_quarter,
  cost_model_type,
  revenue_group_subtype,
  unified_publication_name,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  SAFE_CAST(relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
  SAFE_CAST(relative_fy_month_offset AS INT64) AS relative_fy_month_offset
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
WHERE
  SAFE_CAST(reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  reporting_date DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-18', 'original_format': ""DATE(TIMESTAMP '2025-06-18 03:06:41.434326+00', 'Australia/Sydney')"", 'context': ""Used as a fixed cut-off date for 'Year-to-Date' calculations in the second query."", 'suggested_fix': 'Replace with `CURRENT_DATE()` for dynamic YTD, or a dashboard parameter for user-defined YTD cut-off.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'PMP'"", ""'TUBI'"", ""'PERFORMANCE'"", ""'PG'"", ""'OMP'"", ""'PROGRAMMATIC SOURCE'"", ""'Run of Audience Extension'"", ""'GUARANTEED'"", ""'NON-GUARANTEED'""], 'context': 'These values are used in `CASE` statements to classify revenue types (programmatic_type) and filter data. They represent business categories.', 'suggested_governance': 'Create a `dim_programmatic_type` or `dim_revenue_classification` lookup table. Join to this table based on `unified_publication_name`, `cost_model_type`, and `revenue_group_subtype` to derive the `programmatic_type` dimension. This centralizes business logic and allows for easier updates.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'filter_values', 'hardcoded_values': ['2'], 'context': ""The filter `clmn9_ = 2` (which maps to `financial_quarter = 2`) is hardcoded in the first query's `WHERE` clause."", 'suggested_governance': 'Replace with a dashboard parameter for the financial quarter, or use relative date logic (e.g., `CURRENT_FINANCIAL_QUARTER()`).', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'relative_offsets', 'hardcoded_values': ['0', '-1'], 'context': 'Used for `relative_fy_year_offset` to identify Current Year (0) and Previous Year (-1) data.', 'suggested_governance': ""While relative offsets are generally good, these specific values could be defined as named constants or parameters if the definition of 'current' or 'previous' ever changes or needs to be dynamic (e.g., '2 years ago')."", 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded YTD cut-off date (2025-06-18) with a dashboard date parameter or `CURRENT_DATE()`.', 'Replace hardcoded financial quarter filter (e.g., `financial_quarter = 2`) with a dashboard parameter or relative quarter logic.', 'Externalize the classification logic for `programmatic_type` (TUBI, PMP, PERFORMANCE, PG, OMP) into a governed lookup table to avoid hardcoding in SQL.']",43,5491badf-5ec0-4b4f-a427-b12a3a3395dd
"-- This query assumes the existence of 'total_revenue' and 'total_impressions' columns in the 'adsales_performance' table, as the provided queries only extract dimensions. It also assumes an 'event_date' column for standard date filtering, as 'financial_week' is not a DATE type.
WITH base_data AS (
  SELECT 
    t0.advertiser_group,
    t0.product_group,
    t0.fin_adtype_name,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week_int,
    SAFE_CAST(t0.total_revenue AS NUMERIC) AS total_revenue, -- Assumed metric
    SAFE_CAST(t0.total_impressions AS INT64) AS total_impressions, -- Assumed metric
    SAFE_CAST(t0.event_date AS DATE) AS event_date -- Assumed date column for filtering
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE SAFE_CAST(t0.event_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Filter for recent data
)
SELECT 
  advertiser_group,
  product_group,
  fin_adtype_name,
  financial_week_int,
  COUNT(*) AS record_count,
  SUM(total_revenue) AS sum_total_revenue,
  SUM(total_impressions) AS sum_total_impressions,
  COUNT(DISTINCT advertiser_group) AS distinct_advertiser_groups,
  COUNT(DISTINCT product_group) AS distinct_product_groups,
  COUNT(DISTINCT fin_adtype_name) AS distinct_fin_adtype_names
FROM base_data
GROUP BY 
  advertiser_group,
  product_group,
  fin_adtype_name,
  financial_week_int
ORDER BY 
  financial_week_int DESC,
  sum_total_revenue DESC
LIMIT 100;","-- This query provides insights into the structure and basic statistics of the primary data source.
-- It assumes 'event_date' as a general date column for filtering and 'financial_week' as a key dimension.
SELECT 
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.event_date AS DATE)) AS unique_event_dates, -- Assumed date column
  COUNT(DISTINCT t0.advertiser_group) AS unique_advertiser_groups,
  COUNT(DISTINCT t0.product_group) AS unique_product_groups,
  COUNT(DISTINCT t0.fin_adtype_name) AS unique_fin_adtype_names,
  COUNT(DISTINCT SAFE_CAST(t0.financial_week AS STRING)) AS unique_financial_weeks,
  MIN(SAFE_CAST(t0.event_date AS DATE)) AS earliest_event_date, -- Assumed date column
  MAX(SAFE_CAST(t0.event_date AS DATE)) AS latest_event_date, -- Assumed date column
  APPROX_COUNT_DISTINCT(CONCAT(t0.advertiser_group, t0.product_group, SAFE_CAST(t0.financial_week AS STRING))) AS approx_unique_combinations -- Proxy for data grain
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.event_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY); -- Filter for recent data","-- This query performs basic validation checks on the primary data source.
-- It assumes 'total_revenue' and 'total_impressions' as key metrics and 'event_date' for freshness.
SELECT 
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.total_revenue AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_test, -- Assumed metric
  CASE WHEN SUM(SAFE_CAST(t0.total_impressions AS INT64)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_impressions_test, -- Assumed metric
  CASE WHEN COUNT(DISTINCT t0.advertiser_group) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_group_presence_test,
  CASE WHEN MAX(SAFE_CAST(t0.event_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test, -- Assumed date column
  CASE WHEN COUNT(CASE WHEN t0.product_group IS NULL THEN 1 END) = 0 THEN 'PASS' ELSE 'FAIL' END AS product_group_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.event_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","-- This query validates the hardcoded business rules (filters) identified in the original queries.
SELECT 
  'Business Rule Validation' AS validation_type,
  'product_group_filter_coverage' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN t0.product_group IN ('Commercial Content', 'Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') THEN 1 ELSE 0 END) AS records_matching_advertiser_group_filter,
  SUM(CASE WHEN t0.product_group NOT IN ('Unknown') OR t0.product_group IS NULL THEN 1 ELSE 0 END) AS records_matching_adtype_filter,
  SUM(CASE WHEN t0.product_group IN ('Free News & Lifestyle', 'State & Communities', '') THEN 1 ELSE 0 END) AS records_matching_financial_week_filter,
  SAFE_DIVIDE(SUM(CASE WHEN t0.product_group IN ('Commercial Content', 'Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pct_matching_advertiser_group_filter,
  SAFE_DIVIDE(SUM(CASE WHEN t0.product_group NOT IN ('Unknown') OR t0.product_group IS NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pct_matching_adtype_filter,
  SAFE_DIVIDE(SUM(CASE WHEN t0.product_group IN ('Free News & Lifestyle', 'State & Communities', '') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pct_matching_financial_week_filter
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.event_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY); -- Filter for recent data","-- This query retrieves a representative sample of data from the primary source, including key dimensions and assumed metrics.
SELECT 
  SAFE_CAST(t0.event_date AS DATE) AS event_date, -- Assumed date column
  t0.advertiser_group,
  t0.product_group,
  t0.fin_adtype_name,
  SAFE_CAST(t0.financial_week AS INT64) AS financial_week_int,
  SAFE_CAST(t0.total_revenue AS NUMERIC) AS total_revenue, -- Assumed metric
  SAFE_CAST(t0.total_impressions AS INT64) AS total_impressions -- Assumed metric
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.event_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) -- Filter for very recent data
  AND t0.product_group IS NOT NULL -- Example filter to get meaningful data
ORDER BY 
  event_date DESC,
  total_revenue DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Commercial Content'"", ""'Free News & Lifestyle'"", ""'State & Communities'"", ""'The Australian & Prestige'""], 'context': ""Used to filter 'product_group' for 'advertiser_group' selection."", 'suggested_governance': 'These product group names should be stored in a `product_group_lookup` table with a `category` or `dashboard_filter_group` column. The query should join to this table instead of hardcoding values.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Unknown'""], 'context': ""Used to exclude 'Unknown' product groups when selecting 'fin_adtype_name'."", 'suggested_governance': ""Standardize 'Unknown' values or manage exclusions via a configuration table. If 'Unknown' is a valid category, its exclusion should be a configurable business rule."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Free News & Lifestyle'"", ""'State & Communities'"", ""''""], 'context': ""Used to filter 'product_group' for 'financial_week' selection, including an empty string."", 'suggested_governance': ""Similar to other product group filters, these should be managed in a `product_group_lookup` table. The empty string `''` suggests potential data quality issues or an unhandled category that should be explicitly defined or cleaned."", 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded product group values with joins to governed reference tables (e.g., `product_group_dimension`).', 'Implement Looker Studio parameters for dynamic filtering of product groups instead of hardcoding in the SQL queries.', ""Address the empty string `''` in `product_group` filters; either clean the data, define it as a valid category, or explicitly handle it as an 'Other' or 'Uncategorized' type.""]",44,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
"WITH SFCE_USER AS (
  SELECT
    TEMP1.network_user_name AS login_name,
    TEMP1.user_name AS full_name
  FROM
    (
      SELECT
        UPPER(network_user_name) AS network_user_name,
        UPPER(user_name) AS user_name,
        ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
      FROM
        `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
      WHERE
        dw_source_system_code = 'SFCE'
    ) AS TEMP1
  WHERE
    TEMP1.RN = 1
),
base_adsales_data AS (
  SELECT
    unified_publication_name,
    unified_publication_gl_code,
    fy_year_month_number,
    financial_year,
    financial_quarter,
    financial_month,
    financial_short_month,
    financial_week,
    revenue_transaction_status,
    is_print_digital_flag,
    current_financial_month,
    current_financial_week,
    fy_year_week_number,
    style_name,
    UPPER(fin_adtype_name) AS fin_adtype_name,
    CASE
      WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
      ELSE 'Client'
    END AS Sales_Group,
    EXTRACT(DAYOFWEEK FROM CURRENT_DATE()) AS DOW_Today,
    sales_segment_l_1_name,
    nca_industry_anzsic_pillar_group,
    sales_segment_l_2_name,
    sales_segment_l_1_name_sync,
    sales_segment_l_2_name_sync,
    fy_quarter_of_year_name,
    relative_fy_year_offset,
    relative_fy_quarter_offset,
    relative_fy_month_offset,
    relative_fy_week_offset,
    advertiser_group,
    advertiser_parent,
    SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
    sales_segment_gm_name,
    CASE
      WHEN UPPER(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW',
        'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
      ELSE sales_segment_gm_name_sync
    END AS sales_segment_gm_name_sync,
    revenue_group_level_1_name,
    revenue_group_level_2_name,
    SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
    SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
    SUM(IFNULL(pipeline, 0)) AS pipeline,
    SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
    UPPER(revenue_type) AS revenue_type_upper,
    UPPER(revenue_group_subtype) AS revenue_group_subtype,
    current_portfolio_group_owner_sync,
    portfolio_group_name_sync,
    portfolio_group_name_current,
    portfolio_parent_group_name_sync,
    nca_industry_pillar,
    publishing_division_group,
    publishing_division_parent,
    is_future_period_flag,
    ly_is_future_period_flag,
    xtend_flag,
    ny_is_future_period_flag,
    cost_model_type,
    CASE
      WHEN source_system_code = 'PLUTO' THEN NULL
      ELSE booking_line_created_date
    END AS booking_line_created_date,
    advertiser_name,
    current_portfolio_conformed_owner_sync,
    portfolio_conformed_name_sync,
    publishing_division,
    booking_line_created_week,
    booking_line_created_month,
    booking_line_created_short_month,
    booking_line_created_quarter,
    booking_line_created_year,
    agency_parent,
    agency_group,
    agency_name,
    agency_number,
    calendar_month_name,
    calendar_year,
    classification_name,
    product_group,
    SUM(IFNULL(target, 0)) AS target,
    IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD,
    current_portfolio_conformed_owner_current,
    current_portfolio_group_owner_current,
    IFNULL(GSD_JOIN_CURR.full_name, 'VACANT') AS current_portfolio_group_owner_full,
    IFNULL(GSD_JOIN_CONFORM.full_name, 'VACANT') AS current_portfolio_conformed_owner_full
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
    LEFT JOIN
    SFCE_USER AS GSD_JOIN
    ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
    LEFT JOIN
    SFCE_USER AS GSD_JOIN_CURR
    ON UPPER(current_portfolio_group_owner_current) = GSD_JOIN_CURR.login_name
    LEFT JOIN
    SFCE_USER AS GSD_JOIN_CONFORM
    ON UPPER(current_portfolio_conformed_owner_current) = GSD_JOIN_CONFORM.login_name
  WHERE
    relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED',
      'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division,
        'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
    (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
  GROUP BY ALL
)
SELECT
  financial_year,
  financial_month,
  financial_quarter,
  financial_short_month,
  sales_segment_l_2_name_sync,
  revenue_type_upper,
  portfolio_group_name_sync,
  GSD AS gsd_name,
  CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type_upper END AS revenue_type_derived,
  (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment_flag,
  SAFE_CAST(financial_quarter AS FLOAT64) AS financial_quarter_float,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(pipeline) AS total_pipeline,
  SUM(adjustment_amount) AS total_adjustment_amount,
  SUM(pub_lgb) AS total_pub_lgb,
  SUM(ss_lgb) AS total_ss_lgb,
  SUM(target) AS total_target,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue_amount,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN pipeline ELSE 0 END) AS current_fy_pipeline
FROM
  base_adsales_data
GROUP BY
  financial_year,
  financial_month,
  financial_quarter,
  financial_short_month,
  sales_segment_l_2_name_sync,
  revenue_type_upper,
  portfolio_group_name_sync,
  gsd_name,
  revenue_type_derived,
  is_digital_other_sales_segment_flag,
  financial_quarter_float
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING) || '-' || SAFE_CAST(financial_month AS STRING)) as unique_financial_months,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT sales_segment_l_2_name_sync) as unique_sales_segments,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  COUNT(DISTINCT portfolio_group_name_sync) as unique_portfolio_groups,
  MIN(financial_year) as earliest_financial_year,
  MAX(financial_year) as latest_financial_year,
  APPROX_COUNT_DISTINCT(unified_publication_name) as approx_unique_publications,
  APPROX_COUNT_DISTINCT(advertiser_name) as approx_unique_advertisers
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN SUM(SAFE_CAST(pipeline AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as pipeline_test,
  CASE WHEN COUNT(DISTINCT financial_year) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_test,
  CASE WHEN MAX(relative_fy_year_offset) >= -1 THEN 'PASS' ELSE 'FAIL' END as relative_fy_offset_test,
  CASE WHEN COUNT(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_filter_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) as records_passing_status_filter,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_status_filter
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Publication Name SUDDENLY% Logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) THEN 1 ELSE 0 END) as records_passing_publication_logic,
  SAFE_DIVIDE(SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809'))) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_publication_logic
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1;","SELECT
  financial_year,
  financial_month,
  financial_quarter,
  sales_segment_l_2_name_sync,
  UPPER(revenue_type) AS revenue_type_upper,
  portfolio_group_name_sync,
  relative_fy_year_offset,
  gross_revenue_amount,
  pipeline,
  xtend_flag,
  revenue_transaction_status,
  style_name,
  source_publishing_division,
  publication_name,
  account_number,
  current_portfolio_group_owner_sync
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(financial_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  financial_year DESC, financial_month DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['-1', '0', '1'], 'context': 'relative_fy_year_offset values for filtering financial years', 'suggested_governance': 'Use a fiscal calendar table or parameters to dynamically determine these offsets based on current date.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'BILLED'"", ""'BOOKED'""], 'context': 'revenue_transaction_status filter values', 'suggested_governance': 'Store valid transaction statuses in a reference table and join to it.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'ROP COMPOSITE'""], 'context': 'style_name exclusion filter value', 'suggested_governance': 'Store excluded style names in a reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'MEDIUM RARE CONTENT AGENCY'""], 'context': 'source_publishing_division exclusion filter value', 'suggested_governance': 'Store excluded publishing divisions in a reference table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'""], 'context': 'Complex logic for publication_name and account_number', 'suggested_governance': 'Externalize this complex business rule into a configuration table or a dedicated rule engine.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'MRCA'"", ""'Client'""], 'context': 'Sales_Group derivation logic', 'suggested_governance': 'Manage sales group mappings in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM NSW'"", ""'KEY ACCOUNTS NSW RETAIL'"", ""'DIRECT NSW'"", ""'INDEPENDENT AGENCIES NSW'"", ""'PRESTIGE'"", ""'Ian Paterson'""], 'context': 'sales_segment_gm_name_sync mapping logic', 'suggested_governance': 'Manage sales segment to GM mappings in a dedicated lookup table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'""], 'context': 'source_system_code for booking_line_created_date logic', 'suggested_governance': 'Store valid source system codes in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Y'""], 'context': ""xtend_flag value for 'XTEND' derivation"", 'suggested_governance': ""If 'Y'/'N' is a common pattern, consider a boolean column or a lookup for flag values."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Digital Other'""], 'context': ""sales_segment_l_2_name_sync value for 'is_digital_other_sales_segment_flag' derivation"", 'suggested_governance': 'Store sales segment categories in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded relative financial year offsets with parameters or dynamic calculations (e.g., based on CURRENT_DATE() and a fiscal calendar table).', 'Replace hardcoded lookup values (e.g., transaction statuses, style names, sales segments, source systems) with joins to governed reference tables.', 'Externalize complex business rules (e.g., publication name/account number logic, sales GM mapping) into configuration tables or a dedicated business rule service.']",45,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
