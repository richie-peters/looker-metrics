primary_analysis_sql,structure_sql,validation_sql,business_rules_sql,response_id,dashboard_id
"SELECT fy_year, fy_week_of_year, fy_week_of_year_name, SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(calendar_date AS DATETIME), ISOWEEK) AS DATE) AS iso_week_start_date FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` GROUP BY 1,2,3,4 ORDER BY fy_year DESC, fy_week_of_year DESC LIMIT 10;","SELECT COUNT(*) AS total_records, COUNT(DISTINCT calendar_date) AS unique_dates, MIN(calendar_date) AS min_date, MAX(calendar_date) AS max_date FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` LIMIT 1;","SELECT CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS has_data, CASE WHEN MAX(calendar_date) >= CURRENT_DATE() - INTERVAL 7 DAY THEN 'PASS' ELSE 'FAIL' END AS data_freshness FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` LIMIT 1;","SELECT fy_year, COUNT(*) AS num_entries FROM `ncau-data-newsquery-prd.prstn_finance.calendar_dim` GROUP BY fy_year ORDER BY fy_year DESC LIMIT 5;",0,a1c16d3b-d19a-4abd-b96c-7a87580815db
"SELECT
    t1.fiscal_year,
    t1.month_short_name,
    t1.os_level_6,
    SUM(ABS(t1.Tableau_Actual_Amount - t1.TM1_Amount)) AS absolute_variance_tableau_tm1,
    SUM(t1.TM1_Amount) AS total_tm1_amount,
    SUM(t1.Tableau_Actual_Amount) AS total_tableau_actual_amount
FROM (
    SELECT
        t0.TM1_Amount,
        t0.Tableau_Actual_Amount,
        t0.fiscal_year,
        t0.month_short_name,
        t0.os_level_6,
        t0.publication_code
    FROM
        `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_expenses` AS t0
) AS t1
WHERE
    SAFE.REGEXP_CONTAINS(t1.publication_code, '^(^[0-9]+$)$') IS TRUE
GROUP BY
    t1.fiscal_year,
    t1.month_short_name,
    t1.os_level_6
ORDER BY
    t1.fiscal_year DESC, t1.month_short_name DESC
LIMIT 10;","SELECT
    COUNT(1) AS total_records,
    APPROX_COUNT_DISTINCT(SAFE_CAST(t0.fiscal_year AS STRING)) AS unique_fiscal_years,
    APPROX_COUNT_DISTINCT(t0.month_short_name) AS unique_months,
    APPROX_COUNT_DISTINCT(t0.os_level_6) AS unique_os_levels,
    APPROX_COUNT_DISTINCT(t0.publication_code) AS unique_publication_codes,
    MIN(SAFE_CAST(t0.fiscal_year AS STRING) || '-' || t0.month_short_name) AS min_date_combo,
    MAX(SAFE_CAST(t0.fiscal_year AS STRING) || '-' || t0.month_short_name) AS max_date_combo
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_expenses` AS t0
LIMIT 1;","SELECT
    CASE WHEN SUM(t0.TM1_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS tm1_amount_positive_check,
    CASE WHEN MAX(t0.fiscal_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_expenses` AS t0
LIMIT 1;","SELECT
    CASE WHEN SAFE.REGEXP_CONTAINS(t0.publication_code, '^(^[0-9]+$)$') THEN 'Numeric' ELSE 'Non-Numeric' END AS publication_code_type,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_expenses` AS t0
GROUP BY
    publication_code_type
LIMIT 10;",1,f353b933-30eb-4853-9976-0d35371db7d7
"SELECT
    SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
    SAFE_CAST(t0.booking_number AS STRING) AS booking_number,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
GROUP BY
    1, 2
ORDER BY
    record_count DESC
LIMIT 10;","SELECT
    COUNT(1) AS total_records,
    COUNT(DISTINCT SAFE_CAST(t0.advertiser_name AS STRING)) AS unique_advertisers,
    COUNT(DISTINCT SAFE_CAST(t0.booking_number AS STRING)) AS unique_bookings,
    COUNT(DISTINCT SAFE_CAST(t0.account_number AS STRING)) AS unique_accounts,
    COUNT(DISTINCT SAFE_CAST(t0.crm_account_number AS STRING)) AS unique_crm_accounts,
    MIN(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) AS min_load_timestamp,
    MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) AS max_load_timestamp
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
LIMIT 1;","SELECT
    CASE WHEN COUNT(1) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_exists_check,
    CASE WHEN MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) IS NOT NULL AND MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
LIMIT 1;","SELECT
    CASE WHEN ('Cal' = 'Cal') THEN 'Calendar Period' ELSE NULL END AS calendar_period_indicator,
    COUNT(1) AS count_of_indicator
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
GROUP BY
    1
LIMIT 10;",2,70ed3b92-987b-479b-9ed7-d2903bd2787e
"SELECT
  t0.fy_year,
  t0.fy_week_of_year,
  CASE
    WHEN t0.masthead = 'TA' THEN 'The Australian'
    WHEN t0.masthead = 'DT' THEN 'Daily Telegraph'
    WHEN t0.masthead = 'HS' THEN 'Herald Sun'
    WHEN t0.masthead = 'WT' THEN 'Weekly Times'
    WHEN t0.masthead = 'GA' THEN 'Geelong Advertiser'
    WHEN t0.masthead = 'CM' THEN 'Courier Mail'
    WHEN t0.masthead = 'CP' THEN 'Cairns Post'
    WHEN t0.masthead = 'TB' THEN 'Townsville Bulletin'
    WHEN t0.masthead = 'TC' THEN 'Toowoomba Chronicles'
    WHEN t0.masthead = 'GC' THEN 'Gold Coast'
    WHEN t0.masthead = 'TM' THEN 'The Mercury'
    WHEN t0.masthead = 'NT' THEN 'NT News'
    WHEN t0.masthead = 'AA' THEN 'The Advertiser'
    ELSE 'Other'
  END AS masthead_name,
  SUM(t0.Total_Revenue_V) AS total_revenue_v,
  SUM(t0.Total_Weekly_Sales_V) AS total_weekly_sales_v,
  SUM(t0.Total_Closing_Base_V) AS total_closing_base_v,
  SUM(t0.Total_Revenue) AS total_revenue,
  SUM(t0.Total_Weekly_Sales) AS total_weekly_sales,
  SUM(t0.Total_Closing_Base) AS total_closing_base
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE t0.fy_year = 2025 AND t0.fy_week_of_year = 37
GROUP BY 1, 2, 3
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(masthead AS STRING)) AS unique_mastheads,
  MIN(SAFE_CAST(fy_year AS INT64)) AS min_fy_year,
  MAX(SAFE_CAST(fy_year AS INT64)) AS max_fy_year,
  MIN(SAFE_CAST(fy_week_of_year AS INT64)) AS min_fy_week_of_year,
  MAX(SAFE_CAST(fy_week_of_year AS INT64)) AS max_fy_week_of_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
LIMIT 1;","SELECT
  CASE WHEN SUM(t0.Total_Revenue_V) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_check,
  CASE WHEN MAX(t0.fy_year) >= 2024 THEN 'PASS' ELSE 'FAIL' END AS recent_data_year_check,
  CASE WHEN MAX(t0.fy_week_of_year) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS fy_week_of_year_exists_check
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
LIMIT 1;","SELECT
  t0.masthead,
  CASE
    WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'States and Community'
    WHEN (t0.masthead = 'TA') THEN 'The Australian and Prestige'
    ELSE 'Other'
  END AS masthead_group_type,
  CASE
    WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
    WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'Regionals'
    ELSE 'Other'
  END AS masthead_region_type,
  COUNT(*) AS record_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
GROUP BY 1, 2, 3
ORDER BY record_count DESC
LIMIT 10;",3,57d87efe-c112-4d42-be1b-045f0c8ca73e
"SELECT
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    SUM(t0.Total_Revenue_B) AS total_revenue_budget,
    SUM(t0.Total_Weekly_Sales_B) AS total_weekly_sales_budget,
    SUM(t0.Total_Closing_Base_B) AS total_closing_base_budget
FROM
    `ncau-data-newsquery-prd.sbx_fda_noncorefin.masthead_scorecard_forecast_version` AS t0
WHERE
    t0.fy_year = 2025
GROUP BY
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead
ORDER BY
    t0.fy_year DESC, t0.fy_week_of_year DESC
LIMIT 5;","SELECT
    COUNT(*) AS total_records,
    COUNT(DISTINCT t0.masthead) AS unique_mastheads,
    COUNT(DISTINCT t0.fy_year) AS unique_fiscal_years,
    COUNT(DISTINCT t0.fy_week_of_year) AS unique_fiscal_weeks,
    MIN(t0.fy_year) AS min_fiscal_year,
    MAX(t0.fy_year) AS max_fiscal_year,
    MIN(t0.fy_week_of_year) AS min_fiscal_week,
    MAX(t0.fy_week_of_year) AS max_fiscal_week
FROM
    `ncau-data-newsquery-prd.sbx_fda_noncorefin.masthead_scorecard_forecast_version` AS t0
LIMIT 1;","SELECT
    CASE WHEN SUM(t0.Total_Revenue_B) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_check,
    CASE WHEN MAX(t0.fy_year) >= 2024 THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.sbx_fda_noncorefin.masthead_scorecard_forecast_version` AS t0
LIMIT 1;","SELECT
    CASE
        WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro'
        WHEN t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT') THEN 'Regional'
        WHEN t0.masthead = 'TA' THEN 'The Australian and Prestige'
        ELSE 'Other'
    END AS masthead_category,
    COUNT(DISTINCT t0.masthead) AS distinct_mastheads_in_category,
    COUNT(*) AS total_records_in_category
FROM
    `ncau-data-newsquery-prd.sbx_fda_noncorefin.masthead_scorecard_forecast_version` AS t0
GROUP BY
    masthead_category
LIMIT 5;",4,5e3be025-a96e-4f5d-8172-dfef07e60f6d
"SELECT SAFE_CAST(alert_status_final AS STRING) AS alert_status, COUNT(table_id) AS table_count, SAFE_CAST(AVG(updated_minutes_ago) AS BIGNUMERIC) AS avg_delay_minutes, SAFE_CAST(SUM(row_count) AS BIGNUMERIC) AS total_rows FROM (
WITH
  table_list AS (
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'advertising_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'circulation_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'external_sundry_expenses_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'subscription_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      60 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_balance_fct' AS tableid
    UNION ALL
    SELECT
      60 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_transaction_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_account_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_business_unit_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_company_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_department_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_ledger_type_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_party_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_publication_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_responsibility_unit_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_sub_ledger_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_sub_ledger_type_dim' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'advertising_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'circulation_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'offplatform_subscription_revenue_fct' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'subscription_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'content_licensing_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'expense_depreciation_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'finance_gaap_adjustment' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'sundry_revenue_snapshot_fct' AS tableid
  ),
  table_update_list AS (
    SELECT
      dataset_id,
      table_id,
      datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
      row_count,
      size_bytes / power(2, 30) AS size_gb,
      table_list.update_frequency
    FROM
      `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
      JOIN
      table_list
      ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
  ),
  load_stats AS (
    SELECT
      * EXCEPT (last_update_time),
      CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
      `current_datetime`(""Australia/Sydney"") AS time_now,
      datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) AS updated_minutes_ago,
      `if`(datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) > update_frequency,
        'Y', 'N') AS delayed
    FROM
      table_update_list
  ),
  alert_sts AS (
    SELECT
      * EXCEPT (last_update_time),
      CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
      CASE
        WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) >
        update_frequency THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
        (updated_minutes_ago - update_frequency) > 30 THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency > 1440 AND update_frequency <= 44640 AND
        (updated_minutes_ago - update_frequency) > 1440 THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
        update_frequency THEN -1
        WHEN row_count = 0 THEN -3
        ELSE 0
      END AS alert_status
    FROM
      load_stats
  )
SELECT
  *,
  CASE
    WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
      ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
    ELSE alert_status
  END AS alert_status_final
FROM
  alert_sts
) GROUP BY alert_status_final ORDER BY alert_status_final LIMIT 10;","SELECT COUNT(*) AS total_records, COUNT(DISTINCT SAFE_CAST(table_id AS STRING)) AS unique_tables, MIN(SAFE_CAST(datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS DATETIME)) AS min_last_modified_time, MAX(SAFE_CAST(datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS DATETIME)) AS max_last_modified_time FROM `your-gcp-project-id.bdm_finance.__TABLES__` LIMIT 1;","SELECT CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS table_exists_check, CASE WHEN MAX(SAFE_CAST(datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS DATETIME)) >= DATETIME_SUB(CURRENT_DATETIME('Australia/Sydney'), INTERVAL 1 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check FROM `your-gcp-project-id.bdm_finance.__TABLES__` LIMIT 1;","SELECT SAFE_CAST(alert_status_final AS STRING) AS alert_status, COUNT(table_id) AS table_count FROM (
WITH
  table_list AS (
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'advertising_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'circulation_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'external_sundry_expenses_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      0 AS update_frequency,
      'bdm_finance' AS datasetid,
      'subscription_budget_forecast_fct' AS tableid
    UNION ALL
    SELECT
      60 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_balance_fct' AS tableid
    UNION ALL
    SELECT
      60 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_transaction_fct' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_account_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_business_unit_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_company_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_department_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_ledger_type_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_party_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_publication_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_responsibility_unit_profisee_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_sub_ledger_dim' AS tableid
    UNION ALL
    SELECT
      1440 AS update_frequency,
      'bdm_finance' AS datasetid,
      'gl_sub_ledger_type_dim' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'advertising_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'circulation_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'offplatform_subscription_revenue_fct' AS tableid
    UNION ALL
    SELECT
      10080 AS update_frequency,
      'bdm_finance' AS datasetid,
      'subscription_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'content_licensing_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'expense_depreciation_snapshot_fct' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'finance_gaap_adjustment' AS tableid
    UNION ALL
    SELECT
      44640 AS update_frequency,
      'bdm_finance' AS datasetid,
      'sundry_revenue_snapshot_fct' AS tableid
  ),
  table_update_list AS (
    SELECT
      dataset_id,
      table_id,
      datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
      row_count,
      size_bytes / power(2, 30) AS size_gb,
      table_list.update_frequency
    FROM
      `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
      JOIN
      table_list
      ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
  ),
  load_stats AS (
    SELECT
      * EXCEPT (last_update_time),
      CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
      `current_datetime`(""Australia/Sydney"") AS time_now,
      datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) AS updated_minutes_ago,
      `if`(datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) > update_frequency,
        'Y', 'N') AS delayed
    FROM
      table_update_list
  ),
  alert_sts AS (
    SELECT
      * EXCEPT (last_update_time),
      CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
      CASE
        WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) >
        update_frequency THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
        (updated_minutes_ago - update_frequency) > 30 THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency > 1440 AND update_frequency <= 44640 AND
        (updated_minutes_ago - update_frequency) > 1440 THEN -2
        WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
        update_frequency THEN -1
        WHEN row_count = 0 THEN -3
        ELSE 0
      END AS alert_status
    FROM
      load_stats
  )
SELECT
  *,
  CASE
    WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
      ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
    ELSE alert_status
  END AS alert_status_final
FROM
  alert_sts
) GROUP BY alert_status_final ORDER BY alert_status_final LIMIT 5;",5,f9b52275-5924-4afb-8222-2c55854183ba
"SELECT
  t0.masthead_group,
  t0.fy_year,
  t0.fy_week_of_year,
  SUM(t0.ClosingBase) AS total_closing_base,
  SUM(t0.OpeningBase) AS total_opening_base,
  SUM(t0.EarnedAmount) AS total_earned_amount
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
  t0.fy_year = 2025
GROUP BY
  t0.masthead_group,
  t0.fy_year,
  t0.fy_week_of_year
ORDER BY
  t0.fy_year DESC, t0.fy_week_of_year DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.masthead_group) AS unique_masthead_groups,
  COUNT(DISTINCT t0.gl_publication_code) AS unique_publication_codes,
  MIN(t0.fy_year) AS min_fiscal_year,
  MAX(t0.fy_year) AS max_fiscal_year,
  MIN(t0.fy_week_of_year) AS min_fiscal_week,
  MAX(t0.fy_week_of_year) AS max_fiscal_week
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
LIMIT 1;","SELECT
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS has_data,
  CASE WHEN MAX(t0.fy_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS current_year_data,
  CASE WHEN MAX(t0.fy_week_of_year) >= (EXTRACT(WEEK FROM CURRENT_DATE()) - 4) THEN 'PASS' ELSE 'FAIL' END AS recent_week_data
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
LIMIT 1;","SELECT
  t0.masthead_group,
  COUNT(*) AS record_count
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
GROUP BY
  t0.masthead_group
ORDER BY
  record_count DESC
LIMIT 10;",6,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
"WITH OSandFACT AS (
    SELECT
      os.source_system_name,
      calendar.fy_year,
      os.Actual_Amount,
      os.Budget_Amount,
      os.Forecast_Amount
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  SAFE_CAST(fy_year AS STRING) AS fiscal_year,
  source_system_name,
  SUM(Actual_Amount) AS total_actual_amount,
  SUM(Budget_Amount) AS total_budget_amount,
  SUM(Forecast_Amount) AS total_forecast_amount
FROM
  OSandFACT
GROUP BY
  SAFE_CAST(fy_year AS STRING),
  source_system_name
ORDER BY
  fiscal_year DESC, total_actual_amount DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(source_system_name AS STRING)) AS unique_source_systems,
  COUNT(DISTINCT SAFE_CAST(gl_publication_code AS STRING)) AS unique_publications,
  MIN(SAFE_CAST(fiscal_week_id AS INT)) AS min_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS INT)) AS max_fiscal_week_id
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
LIMIT 1;","WITH OSandFACT AS (
    SELECT
      os.Actual_Amount,
      calendar.fy_year_week_number
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  CASE WHEN SUM(Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_check,
  CASE WHEN MAX(SAFE_CAST(fy_year_week_number AS INT)) >= (EXTRACT(YEAR FROM CURRENT_DATE()) * 100 + EXTRACT(WEEK FROM CURRENT_DATE()) - 52) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
  OSandFACT
LIMIT 1;","SELECT
  period_name,
  COUNT(DISTINCT SAFE_CAST(source_week_number AS INT)) AS distinct_weeks_count
FROM
  `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control
WHERE
  period_name IN ('CP', 'PY')
GROUP BY
  period_name
LIMIT 2;",7,d7412673-0af1-4efe-8374-ca475b001fb6
"SELECT
  SAFE_CAST(t0.fy_year AS INT64) AS fiscal_year,
  SAFE_CAST(t0.fy_quarter_of_year AS INT64) AS fiscal_quarter,
  SAFE_CAST(t0.fy_month_of_year AS INT64) AS fiscal_month,
  SAFE_CAST(t0.fy_week_of_year AS INT64) AS fiscal_week,
  CASE
    WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition'
    WHEN (CASE WHEN (t0.subscriber_has_email_flag = 'subsnapfact') THEN 'Y' WHEN (t0.classification_level_1_description = 'Standard Paid' AND t0.delivery_medium_type = 'Bundle') THEN t0.subscriber_has_email_flag ELSE 'Y' END = 'N') THEN 'Print Recognition'
    ELSE 'Digital Recognition'
  END AS recognition_type,
  CASE
    WHEN (t0.gl_publication_code = 'The Australian') THEN 'The Australian'
    WHEN (t0.gl_publication_code IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser') OR t0.masthead_code IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metros'
    WHEN (t0.gl_publication_code IN ('Cairns Post', 'Geelong', 'Gold Coast', 'The Mercury', 'Toowoomba', 'Townsville') OR t0.masthead_code IN ('CP', 'GA', 'GC', 'TM', 'TC', 'TB')) THEN 'Regionals'
    WHEN (t0.gl_publication_code = 'Weekly Times') THEN 'Others'
    WHEN (t0.gl_publication_code IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others') OR t0.masthead_code IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
    ELSE 'Discontinued'
  END AS masthead_group,
  SUM(CASE WHEN (t0.fy_year = 2025 AND t0.fy_week_of_year = 42 AND t0.table_union_source = 'subsnapfact') THEN t0.EarnedAmount ELSE NULL END) AS earned_amount_fy25_w42,
  SUM(CASE WHEN (t0.fy_year = 2024 AND t0.fy_week_of_year = 42 AND t0.table_union_source = 'nfmanualhist') THEN t0.NFEarnedAmount ELSE 0 END) AS earned_amount_fy24_w42,
  SUM(CASE WHEN (t0.fy_week_of_year = 42 AND t0.fy_year = 2025) THEN t0.ForecastBudgetEarnedAmount ELSE NULL END) AS forecast_budget_earned_amount_fy25_w42
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE
  (CASE
    WHEN (t0.delivery_medium_type = 'Print') THEN 'Print Recognition'
    WHEN (CASE WHEN (t0.subscriber_has_email_flag = 'subsnapfact') THEN 'Y' WHEN (t0.classification_level_1_description = 'Standard Paid' AND t0.delivery_medium_type = 'Bundle') THEN t0.subscriber_has_email_flag ELSE 'Y' END = 'N') THEN 'Print Recognition'
    ELSE 'Digital Recognition'
  END = 'Digital Recognition'
  AND
  CASE
    WHEN (t0.gl_publication_code = 'The Australian') THEN 'The Australian'
    WHEN (t0.gl_publication_code IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser') OR t0.masthead_code IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metros'
    WHEN (t0.gl_publication_code IN ('Cairns Post', 'Geelong', 'Gold Coast', 'The Mercury', 'Toowoomba', 'Townsville') OR t0.masthead_code IN ('CP', 'GA', 'GC', 'TM', 'TC', 'TB')) THEN 'Regionals'
    WHEN (t0.gl_publication_code = 'Weekly Times') THEN 'Others'
    WHEN (t0.gl_publication_code IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others') OR t0.masthead_code IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
    ELSE 'Discontinued'
  END != 'Discontinued')
GROUP BY 1, 2, 3, 4, 5, 6
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.gl_publication_code AS STRING)) AS unique_publication_codes,
  COUNT(DISTINCT SAFE_CAST(t0.masthead_code AS STRING)) AS unique_masthead_codes,
  MIN(SAFE_CAST(t0.fy_year AS INT64)) AS min_fy_year,
  MAX(SAFE_CAST(t0.fy_year AS INT64)) AS max_fy_year,
  MIN(SAFE_CAST(t0.fy_week_of_year AS INT64)) AS min_fy_week_of_year,
  MAX(SAFE_CAST(t0.fy_week_of_year AS INT64)) AS max_fy_week_of_year
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1;","SELECT
  CASE
    WHEN SUM(SAFE_CAST(t0.EarnedAmount AS BIGNUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS earned_amount_positive_check,
  CASE
    WHEN MAX(SAFE_CAST(t0.fy_year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1;","SELECT
  CASE
    WHEN (t0.gl_publication_code = 'The Australian') THEN 'The Australian'
    WHEN (t0.gl_publication_code IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser') OR t0.masthead_code IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metros'
    WHEN (t0.gl_publication_code IN ('Cairns Post', 'Geelong', 'Gold Coast', 'The Mercury', 'Toowoomba', 'Townsville') OR t0.masthead_code IN ('CP', 'GA', 'GC', 'TM', 'TC', 'TB')) THEN 'Regionals'
    WHEN (t0.gl_publication_code = 'Weekly Times') THEN 'Others'
    WHEN (t0.gl_publication_code IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others') OR t0.masthead_code IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
    ELSE 'Discontinued'
  END AS masthead_group,
  COUNT(*) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
GROUP BY
  masthead_group
LIMIT 10;",8,449b9707-f939-42e1-b6f5-11998369f473
"WITH
  OSandFACT AS (
    SELECT
      os.Actual_Amount,
      os.Last_Year_Actual_Amount,
      os.volume,
      calendar.fy_year,
      calendar.fy_week_of_year,
      os.gl_publication_code,
      pub.is_print_digital_flag,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
          CAST(c.fy_year AS int) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department` AS dep
      ON os.os_level_12 = dep.department_code
  )
SELECT
  SAFE_CAST(OSandFACT.fy_year AS INT) AS fiscal_year,
  SAFE_CAST(OSandFACT.fy_week_of_year AS INT) AS fiscal_week_of_year,
  OSandFACT.os_level_4 AS os_level_4,
  OSandFACT.gl_publication_code AS gl_publication_code,
  SUM(OSandFACT.Actual_Amount) AS total_actual_amount,
  SUM(OSandFACT.Last_Year_Actual_Amount) AS total_last_year_actual_amount,
  SUM(OSandFACT.volume) AS total_volume
FROM
  OSandFACT
WHERE
  SAFE_CAST(OSandFACT.fy_year AS INT) = 2025
GROUP BY
  1, 2, 3, 4
ORDER BY
  1 DESC, 2 DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS INT)) AS unique_fiscal_weeks,
  MIN(SAFE_CAST(fiscal_week_id AS INT)) AS min_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS INT)) AS max_fiscal_week_id,
  MIN(SAFE_CAST(calendar.fy_year AS INT)) AS min_fy_year,
  MAX(SAFE_CAST(calendar.fy_year AS INT)) AS max_fy_year
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
ON
  os.fiscal_week_id = calendar.fy_year_week_number
LIMIT 1;","WITH
  OSandFACT AS (
    SELECT
      os.Actual_Amount,
      calendar.fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      (
        SELECT DISTINCT
          CAST(c.fy_year AS int) AS fy_year,
          CAST(c.fy_year_week_number AS int) AS fy_year_week_number
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
  )
SELECT
  CASE
    WHEN SUM(OSandFACT.Actual_Amount) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS actual_amount_positive_check,
  CASE
    WHEN MAX(SAFE_CAST(OSandFACT.fy_year AS INT)) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_check
FROM
  OSandFACT
LIMIT 1;","WITH
  calendar_data AS (
    SELECT DISTINCT
      CASE
        WHEN c.fy_last_day_of_week = c.fy_last_day_of_month THEN 'Y'
        ELSE 'N'
      END AS month_end_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
      JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
  )
SELECT
  month_end_flag,
  COUNT(*) AS flag_count
FROM
  calendar_data
GROUP BY
  month_end_flag
LIMIT 2;",9,cbab66df-64cb-4ec6-a112-088557684b7e
"SELECT SAFE_CAST(t0.scenario AS STRING) AS scenario, COUNT(1) AS records_count FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0 GROUP BY 1 ORDER BY records_count DESC LIMIT 10;","SELECT COUNT(1) AS total_records, COUNT(DISTINCT SAFE_CAST(t0.scenario AS STRING)) AS unique_scenarios FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0 LIMIT 1;",SELECT CASE WHEN COUNT(1) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_check_status FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0 LIMIT 1;,"SELECT SAFE_CAST(t0.scenario AS STRING) AS scenario_value, COUNT(1) AS record_count, SAFE_DIVIDE(COUNT(1), SUM(COUNT(1)) OVER()) AS proportion_of_total FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0 GROUP BY 1 ORDER BY record_count DESC LIMIT 5;",10,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
"SELECT
    t0.masthead_group,
    SUM(CASE WHEN t0.fy_year = 2025 THEN t0.EarnedAmount ELSE NULL END) AS earned_amount_fy2025,
    SUM(CASE WHEN t0.fy_year = 2025 THEN t0.BudgetEarnedAmount ELSE NULL END) AS budget_earned_amount_fy2025,
    SUM(CASE WHEN t0.fy_year = 2025 THEN t0.ClosingBase ELSE 0 END) AS closing_base_fy2025,
    SUM(CASE WHEN t0.fy_year = 2025 THEN t0.OpeningBase ELSE 0 END) AS opening_base_fy2025,
    SUM(CASE WHEN t0.fy_year = 2024 THEN t0.ClosingBase ELSE 0 END - CASE WHEN t0.fy_year = 2024 THEN t0.OpeningBase ELSE 0 END) AS net_change_fy2024
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued'
    AND SAFE_CAST(t0.finance_recognition AS STRING) = 'Digital Recognition'
GROUP BY
    t0.masthead_group
ORDER BY
    earned_amount_fy2025 DESC
LIMIT 10;","SELECT
    COUNT(*) AS total_records,
    COUNT(DISTINCT SAFE_CAST(t0.masthead_group AS STRING)) AS distinct_masthead_groups,
    COUNT(DISTINCT SAFE_CAST(t0.finance_recognition AS STRING)) AS distinct_finance_recognitions,
    MIN(SAFE_CAST(t0.fy_year AS INT64)) AS min_fy_year,
    MAX(SAFE_CAST(t0.fy_year AS INT64)) AS max_fy_year,
    MIN(SAFE_CAST(t0.fy_month_of_year AS INT64)) AS min_fy_month_of_year,
    MAX(SAFE_CAST(t0.fy_month_of_year AS INT64)) AS max_fy_month_of_year,
    MIN(SAFE_CAST(t0.fy_week_of_year AS INT64)) AS min_fy_week_of_year,
    MAX(SAFE_CAST(t0.fy_week_of_year AS INT64)) AS max_fy_week_of_year
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
LIMIT 1;","SELECT
    CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_exists_check,
    CASE WHEN SUM(CASE WHEN SAFE_CAST(t0.fy_year AS INT64) = 2025 THEN t0.EarnedAmount ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS earned_amount_fy2025_positive_check,
    CASE WHEN MAX(SAFE_CAST(t0.fy_year AS INT64)) >= 2024 THEN 'PASS' ELSE 'FAIL' END AS recent_fy_year_check
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued'
    AND SAFE_CAST(t0.finance_recognition AS STRING) = 'Digital Recognition'
LIMIT 1;","SELECT
    SAFE_CAST(t0.masthead_group AS STRING) AS masthead_group,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued'
GROUP BY
    1
ORDER BY
    2 DESC
LIMIT 5;",11,bb49fa78-5abe-4e68-a9c1-8172a832e724
"SELECT
  table_id,
  alert_status_final,
  updated_minutes_ago,
  update_frequency,
  row_count,
  size_gb
FROM (
  WITH
    table_list AS (
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'advertising_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'circulation_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'external_sundry_expenses_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'subscription_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        60 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_balance_fct' AS tableid
      UNION ALL
      SELECT
        60 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_transaction_fct' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_account_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_business_unit_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_company_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_department_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_ledger_type_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_party_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_publication_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_responsibility_unit_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_sub_ledger_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_sub_ledger_type_dim' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'advertising_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'circulation_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'offplatform_subscription_revenue_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'subscription_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'content_licensing_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'expense_depreciation_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'finance_gaap_adjustment' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'sundry_revenue_snapshot_fct' AS tableid
    ),
    table_update_list AS (
      SELECT
        dataset_id,
        table_id,
        datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
        row_count,
        size_bytes / power(2, 30) AS size_gb,
        table_list.update_frequency
      FROM
        `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
        JOIN
        table_list
        ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
    ),
    load_stats AS (
      SELECT
        * EXCEPT (last_update_time),
        CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
        `current_datetime`(""Australia/Sydney"") AS time_now,
        datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) AS updated_minutes_ago,
        `if`(datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) > update_frequency,
          'Y', 'N') AS delayed
      FROM
        table_update_list
    ),
    alert_sts AS (
      SELECT
        *,
        CASE
          WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) >
          update_frequency THEN -2
          WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
          (updated_minutes_ago - update_frequency) > 30 THEN -2
          WHEN updated_minutes_ago > update_frequency AND update_frequency > 1440 AND update_frequency <= 44640 AND
          (updated_minutes_ago - update_frequency) > 1440 THEN -2
          WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
          update_frequency THEN -1
          WHEN row_count = 0 THEN -3
          ELSE 0
        END AS alert_status
      FROM
        load_stats
    )
  SELECT
    *,
    CASE
      WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
        ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
      ELSE alert_status
    END AS alert_status_final
  FROM
    alert_sts
)
ORDER BY alert_status_final DESC, table_id
LIMIT 12;","SELECT
  COUNT(SAFE_CAST(table_id AS STRING)) AS total_tables_monitored,
  COUNT(DISTINCT SAFE_CAST(dataset_id AS STRING)) AS unique_datasets,
  MIN(SAFE_CAST(last_update_time AS DATETIME)) AS min_update_time,
  MAX(SAFE_CAST(last_update_time AS DATETIME)) AS max_update_time
FROM (
  WITH
    table_list AS (
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'advertising_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'circulation_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'external_sundry_expenses_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'subscription_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        60 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_balance_fct' AS tableid
      UNION ALL
      SELECT
        60 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_transaction_fct' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_account_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_business_unit_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_company_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_department_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_ledger_type_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_party_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_publication_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_responsibility_unit_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_sub_ledger_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_sub_ledger_type_dim' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'advertising_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'circulation_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'offplatform_subscription_revenue_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'subscription_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'content_licensing_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'expense_depreciation_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'finance_gaap_adjustment' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'sundry_revenue_snapshot_fct' AS tableid
    ),
    table_update_list AS (
      SELECT
        dataset_id,
        table_id,
        datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
        row_count,
        size_bytes / power(2, 30) AS size_gb,
        table_list.update_frequency
      FROM
        `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
        JOIN
        table_list
        ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
    )
  SELECT * FROM table_update_list
)
LIMIT 1;","SELECT
  CASE WHEN COUNT(SAFE_CAST(clmn1_ AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_tables_check,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(clmn0_ AS INT64) IN (-2, -3) THEN SAFE_CAST(clmn1_ AS STRING) ELSE NULL END) = 0 THEN 'PASS' ELSE 'FAIL' END AS critical_alerts_check,
  CASE WHEN MAX(SAFE_CAST(updated_minutes_ago AS INT64)) < 1440 THEN 'PASS' ELSE 'FAIL' END AS freshness_check
FROM (
  SELECT t0.alert_status_final AS clmn0_, t0.table_id AS clmn1_, t0.updated_minutes_ago FROM (
    WITH
      table_list AS (
        SELECT
          0 AS update_frequency,
          'bdm_finance' AS datasetid,
          'advertising_budget_forecast_fct' AS tableid
        UNION ALL
        SELECT
          0 AS update_frequency,
          'bdm_finance' AS datasetid,
          'circulation_budget_forecast_fct' AS tableid
        UNION ALL
        SELECT
          0 AS update_frequency,
          'bdm_finance' AS datasetid,
          'external_sundry_expenses_budget_forecast_fct' AS tableid
        UNION ALL
        SELECT
          0 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_budget_forecast_fct' AS tableid
        UNION ALL
        SELECT
          0 AS update_frequency,
          'bdm_finance' AS datasetid,
          'subscription_budget_forecast_fct' AS tableid
        UNION ALL
        SELECT
          60 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_balance_fct' AS tableid
        UNION ALL
        SELECT
          60 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_transaction_fct' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_account_profisee_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_business_unit_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_company_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_department_profisee_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_ledger_type_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_party_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_publication_profisee_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_responsibility_unit_profisee_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_sub_ledger_dim' AS tableid
        UNION ALL
        SELECT
          1440 AS update_frequency,
          'bdm_finance' AS datasetid,
          'gl_sub_ledger_type_dim' AS tableid
        UNION ALL
        SELECT
          10080 AS update_frequency,
          'bdm_finance' AS datasetid,
          'advertising_snapshot_fct' AS tableid
        UNION ALL
        SELECT
          10080 AS update_frequency,
          'bdm_finance' AS datasetid,
          'circulation_snapshot_fct' AS tableid
        UNION ALL
        SELECT
          10080 AS update_frequency,
          'bdm_finance' AS datasetid,
          'offplatform_subscription_revenue_fct' AS tableid
        UNION ALL
        SELECT
          10080 AS update_frequency,
          'bdm_finance' AS datasetid,
          'subscription_snapshot_fct' AS tableid
        UNION ALL
        SELECT
          44640 AS update_frequency,
          'bdm_finance' AS datasetid,
          'content_licensing_snapshot_fct' AS tableid
        UNION ALL
        SELECT
          44640 AS update_frequency,
          'bdm_finance' AS datasetid,
          'expense_depreciation_snapshot_fct' AS tableid
        UNION ALL
        SELECT
          44640 AS update_frequency,
          'bdm_finance' AS datasetid,
          'finance_gaap_adjustment' AS tableid
        UNION ALL
        SELECT
          44640 AS update_frequency,
          'bdm_finance' AS datasetid,
          'sundry_revenue_snapshot_fct' AS tableid
      ),
      table_update_list AS (
        SELECT
          dataset_id,
          table_id,
          datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
          row_count,
          size_bytes / power(2, 30) AS size_gb,
          table_list.update_frequency
        FROM
          `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
          JOIN
          table_list
          ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
      ),
      load_stats AS (
        SELECT
          * EXCEPT (last_update_time),
          CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
          `current_datetime`(""Australia/Sydney"") AS time_now,
          datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) AS updated_minutes_ago,
          `if`(datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) > update_frequency,
            'Y', 'N') AS delayed
        FROM
          table_update_list
      ),
      alert_sts AS (
        SELECT
          *,
          CASE
            WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) >
            update_frequency THEN -2
            WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
            (updated_minutes_ago - update_frequency) > 30 THEN -2
            WHEN updated_minutes_ago > update_frequency AND update_frequency > 1440 AND update_frequency <= 44640 AND
            (updated_minutes_ago - update_frequency) > 1440 THEN -2
            WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
            update_frequency THEN -1
            WHEN row_count = 0 THEN -3
            ELSE 0
          END AS alert_status
        FROM
          load_stats
      )
    SELECT
      *,
      CASE
        WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
          ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
        ELSE alert_status
      END AS alert_status_final
    FROM
      alert_sts
  ) AS t0
)
LIMIT 1;","SELECT
  SAFE_CAST(alert_status_final AS STRING) AS alert_status,
  COUNT(SAFE_CAST(table_id AS STRING)) AS table_count
FROM (
  WITH
    table_list AS (
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'advertising_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'circulation_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'external_sundry_expenses_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        0 AS update_frequency,
        'bdm_finance' AS datasetid,
        'subscription_budget_forecast_fct' AS tableid
      UNION ALL
      SELECT
        60 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_balance_fct' AS tableid
      UNION ALL
      SELECT
        60 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_transaction_fct' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_account_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_business_unit_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_company_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_department_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_ledger_type_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_party_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_publication_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_responsibility_unit_profisee_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_sub_ledger_dim' AS tableid
      UNION ALL
      SELECT
        1440 AS update_frequency,
        'bdm_finance' AS datasetid,
        'gl_sub_ledger_type_dim' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'advertising_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'circulation_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'offplatform_subscription_revenue_fct' AS tableid
      UNION ALL
      SELECT
        10080 AS update_frequency,
        'bdm_finance' AS datasetid,
        'subscription_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'content_licensing_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'expense_depreciation_snapshot_fct' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'finance_gaap_adjustment' AS tableid
      UNION ALL
      SELECT
        44640 AS update_frequency,
        'bdm_finance' AS datasetid,
        'sundry_revenue_snapshot_fct' AS tableid
    ),
    table_update_list AS (
      SELECT
        dataset_id,
        table_id,
        datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS last_update_time,
        row_count,
        size_bytes / power(2, 30) AS size_gb,
        table_list.update_frequency
      FROM
        `your-gcp-project-id.bdm_finance.__TABLES__` AS meta
        JOIN
        table_list
        ON (meta.table_id = table_list.tableid AND table_list.datasetid = 'bdm_finance')
    ),
    load_stats AS (
      SELECT
        * EXCEPT (last_update_time),
        CAST(FORMAT_DATETIME('%F %X', last_update_time) AS STRING) AS last_update_time,
        `current_datetime`(""Australia/Sydney"") AS time_now,
        datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) AS updated_minutes_ago,
        `if`(datetime_diff(`current_datetime`(""Australia/Sydney""), last_update_time, MINUTE) > update_frequency,
          'Y', 'N') AS delayed
      FROM
        table_update_list
    ),
    alert_sts AS (
      SELECT
        *,
        CASE
          WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) >
          update_frequency THEN -2
          WHEN updated_minutes_ago > update_frequency AND update_frequency > 60 AND update_frequency <= 1440 AND
          (updated_minutes_ago - update_frequency) > 30 THEN -2
          WHEN updated_minutes_ago > update_frequency AND update_frequency > 1440 AND update_frequency <= 44640 AND
          (updated_minutes_ago - update_frequency) > 1440 THEN -2
          WHEN updated_minutes_ago > update_frequency AND update_frequency <= 60 AND (updated_minutes_ago - update_frequency) <=
          update_frequency THEN -1
          WHEN row_count = 0 THEN -3
          ELSE 0
        END AS alert_status
      FROM
        load_stats
    )
  SELECT
    *,
    CASE
      WHEN table_id IN (""advertising_budget_forecast_fct"", ""circulation_budget_forecast_fct"", ""external_sundry_expenses_budget_forecast_fct"",
        ""gl_budget_forecast_fct"", ""subscription_budget_forecast_fct"") THEN -1
      ELSE alert_status
    END AS alert_status_final
  FROM
    alert_sts
)
GROUP BY alert_status_final
ORDER BY alert_status_final
LIMIT 12;",12,8f848270-688f-4455-82a6-3bc9a7d39cce
"SELECT
  SAFE_CAST(calendar.fy_year AS INT) AS fiscal_year,
  SAFE_CAST(calendar.fy_week_of_year AS INT) AS fiscal_week,
  SAFE_CAST(os.os_level_4 AS STRING) AS os_level_4_category,
  SAFE_CAST(pub.publication_name AS STRING) AS publication_name,
  SUM(SAFE_CAST(os.Budget_Amount AS BIGNUMERIC)) AS total_budget_amount,
  SUM(SAFE_CAST(os.Actual_Amount AS BIGNUMERIC)) AS total_actual_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
  ON os.gl_publication_code = pub.publication_code
LEFT JOIN
  (
    SELECT DISTINCT
      CAST(c.fy_week_of_year AS int) AS fy_week_of_year,
      CAST(c.fy_year_week_number AS int) AS fy_year_week_number,
      CAST(c.fy_year AS int) AS fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
    JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
  ) AS calendar
  ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  SAFE_CAST(os.gl_hierarchy_code AS STRING) = 'FY2025'
  AND SAFE_CAST(os.os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses')
  AND SAFE_CAST(calendar.fy_week_of_year AS INT) IN (4, 40)
GROUP BY
  1, 2, 3, 4
ORDER BY
  fiscal_year DESC, fiscal_week DESC
LIMIT 10;","SELECT
  COUNT(1) AS total_rows,
  COUNT(DISTINCT SAFE_CAST(os.fiscal_week_id AS INT)) AS unique_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(os.gl_publication_code AS STRING)) AS unique_publications,
  MIN(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) AS min_date,
  MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) AS max_date
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
  ON SAFE_CAST(os.fiscal_week_id AS INT) = SAFE_CAST(calendar.fy_year_week_number AS INT)
LIMIT 1;","SELECT
  CASE WHEN SUM(SAFE_CAST(t0.Actual_Amount AS BIGNUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_check,
  CASE WHEN MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
  ON SAFE_CAST(t0.fiscal_week_id AS INT) = SAFE_CAST(calendar.fy_year_week_number AS INT)
WHERE
  SAFE_CAST(t0.gl_hierarchy_code AS STRING) = 'FY2025'
  AND SAFE_CAST(t0.os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses')
  AND SAFE_CAST(calendar.fy_week_of_year AS INT) = 40
LIMIT 1;","SELECT
  month_end_flag,
  COUNT(1) AS count
FROM
  (
    SELECT
      CASE
        WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y'
        ELSE 'N'
      END AS month_end_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
    JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON SAFE_CAST(control.source_week_number AS INT) = SAFE_CAST(c.fy_year_week_number AS INT)
      AND SAFE_CAST(control.period_name AS STRING) IN ('CP', 'PY')
  )
GROUP BY
  month_end_flag
LIMIT 2;",13,b1c5901f-a535-42eb-870d-05cc025f7c27
"SELECT
  SAFE_CAST(ci.fiscal_week_id AS STRING) AS fiscal_week,
  SAFE_CAST(cal.day_short_name AS STRING) AS day_of_week,
  CASE
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('500', '560')) THEN 'ADV'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '100') THEN 'AUS'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('400', '402')) THEN 'CM'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9504') THEN 'Delicious'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9505') THEN 'Delicious Specials'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('110', '116')) THEN 'DT'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '350') THEN 'GAD'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '670') THEN 'GCB'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '180') THEN 'Group Shared Services'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '156') THEN 'Hobart Print Services'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('301', '303')) THEN 'HS'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '5003') THEN 'MDM'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('850', '852')) THEN 'MERCURY'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('961', '963')) THEN 'NTN'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '158') THEN 'Perth Print Services'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = 'Post Courier') THEN 'Post Courier'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '5024') THEN 'SC'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('9514', '9515')) THEN 'Taste'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '5053') THEN 'TCHRN'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '450') THEN 'TCP'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '475') THEN 'TVB'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9560') THEN 'Vogue'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9556') THEN 'Vogue Living'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '305') THEN 'WT'
    ELSE 'Other'
  END AS publication_group,
  SAFE_CAST(ci.sales_channel_l4 AS STRING) AS sales_channel,
  SUM(SAFE_CAST(ci.route_volume AS BIGNUMERIC)) AS total_route_volume,
  SUM(CASE WHEN SAFE_CAST(ci.charge_type AS STRING) = 'DRAW' THEN SAFE_CAST(ci.route_volume AS BIGNUMERIC) ELSE 0 END) AS draw_volume,
  SUM(CASE WHEN SAFE_CAST(ci.charge_type AS STRING) = 'RETURNS' THEN SAFE_CAST(ci.route_volume AS BIGNUMERIC) ELSE 0 END) AS returns_volume,
  SUM(SAFE_CAST(ci.charge_amount AS BIGNUMERIC)) AS total_charge_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) IN ('2025')
GROUP BY
  1, 2, 3, 4
ORDER BY
  fiscal_week DESC, day_of_week DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(ci.fiscal_week_id AS STRING)) AS unique_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(ci.charge_type AS STRING)) AS unique_charge_types,
  COUNT(DISTINCT SAFE_CAST(ci.gl_publication_code AS STRING)) AS unique_publication_codes,
  COUNT(DISTINCT SAFE_CAST(ci.sales_channel_l4 AS STRING)) AS unique_sales_channels,
  MIN(SAFE_CAST(ci.charge_date AS DATE)) AS min_charge_date,
  MAX(SAFE_CAST(ci.charge_date AS DATE)) AS max_charge_date
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) IN ('2025')
LIMIT 1;","SELECT
  CASE
    WHEN SUM(SAFE_CAST(ci.charge_amount AS BIGNUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS charge_amount_check,
  CASE
    WHEN MAX(SAFE_CAST(ci.charge_date AS DATE)) >= CURRENT_DATE() - INTERVAL 30 DAY THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) IN ('2025')
LIMIT 1;","SELECT
  CASE
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('500', '560')) THEN 'ADV'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '100') THEN 'AUS'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('400', '402')) THEN 'CM'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9504') THEN 'Delicious'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9505') THEN 'Delicious Specials'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('110', '116')) THEN 'DT'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '350') THEN 'GAD'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '670') THEN 'GCB'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '180') THEN 'Group Shared Services'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '156') THEN 'Hobart Print Services'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('301', '303')) THEN 'HS'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '5003') THEN 'MDM'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('850', '852')) THEN 'MERCURY'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('961', '963')) THEN 'NTN'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '158') THEN 'Perth Print Services'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = 'Post Courier') THEN 'Post Courier'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '5024') THEN 'SC'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) IN ('9514', '9515')) THEN 'Taste'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '5053') THEN 'TCHRN'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '450') THEN 'TCP'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '475') THEN 'TVB'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9560') THEN 'Vogue'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '9556') THEN 'Vogue Living'
    WHEN (SAFE_CAST(ci.gl_publication_code AS STRING) = '305') THEN 'WT'
    ELSE 'Other'
  END AS publication_group,
  COUNT(*) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) IN ('2025')
GROUP BY
  1
ORDER BY
  record_count DESC
LIMIT 10;",14,c441950c-1e3f-432c-9838-847d1d315b9e
"SELECT
    SAFE_CAST(t0.fiscal_week_id AS STRING) AS fiscal_week_id,
    COUNT(1) AS total_records_in_week
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_subs_rateplangroup_check` AS t0
GROUP BY 1
ORDER BY 1 DESC
LIMIT 10;","SELECT
    COUNT(1) AS total_records,
    COUNT(DISTINCT SAFE_CAST(t0.fiscal_week_id AS STRING)) AS distinct_fiscal_weeks,
    MIN(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS min_fiscal_week,
    MAX(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS max_fiscal_week
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_subs_rateplangroup_check` AS t0
LIMIT 1;","SELECT
    CASE WHEN COUNT(1) > 0 THEN 'PASS' ELSE 'FAIL' END AS record_count_check,
    CASE WHEN MAX(SAFE_CAST(t0.fiscal_week_id AS INT64)) >= (EXTRACT(YEAR FROM CURRENT_DATE()) * 100 + EXTRACT(WEEK FROM CURRENT_DATE()) - 52) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_subs_rateplangroup_check` AS t0
LIMIT 1;","SELECT
    COUNTIF(t0.rev IS NULL) AS null_rev_count,
    COUNTIF(t0.rev < 0) AS negative_rev_count,
    CASE WHEN COUNTIF(t0.rev IS NULL) = 0 AND COUNTIF(t0.rev < 0) = 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_validity_check
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_persisted_os_nulls_Check` AS t0
LIMIT 1;",15,712ca6fe-b491-4a01-af6e-1495fb3c7d12
"SELECT
  financial_year,
  revenue_type,
  revenue_transaction_status,
  SUM(gross_revenue_ex_adj_amount + adjustment_amount) AS total_revenue_gross_plus_adjustment,
  SUM(agency_commission_amount) AS total_agency_commission
FROM
  `your-gcp-project-id.asl_advertising.v_adsales_revenue_client`
WHERE
  reporting_date >= '2022-01-01' AND record_type_code = 'STD' AND source_system_code = 'ADPT'
  AND financial_year BETWEEN '2023' AND '2026'
  AND revenue_transaction_status IN ('Billed', 'Booked')
  AND revenue_type = 'Digital'
GROUP BY
  financial_year,
  revenue_type,
  revenue_transaction_status
ORDER BY
  financial_year DESC, revenue_type, revenue_transaction_status
LIMIT 12;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT booking_number) AS unique_booking_numbers,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  MIN(reporting_date) AS min_reporting_date,
  MAX(reporting_date) AS max_reporting_date
FROM
  `your-gcp-project-id.asl_advertising.v_adsales_revenue_client`
LIMIT 1;","SELECT
  CASE WHEN SUM(gross_revenue_ex_adj_amount + adjustment_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_check,
  CASE WHEN MAX(reporting_date) >= CURRENT_DATE() - INTERVAL 7 DAY THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
  `your-gcp-project-id.asl_advertising.v_adsales_revenue_client`
WHERE
  reporting_date >= CURRENT_DATE() - INTERVAL 30 DAY
LIMIT 1;","SELECT
  record_type_code,
  COUNT(*) AS count_record_type,
  revenue_transaction_status,
  COUNT(*) AS count_revenue_status,
  revenue_type,
  COUNT(*) AS count_revenue_type
FROM
  `your-gcp-project-id.asl_advertising.v_adsales_revenue_client`
WHERE
  reporting_date >= '2022-01-01'
GROUP BY
  record_type_code, revenue_transaction_status, revenue_type
ORDER BY
  count_record_type DESC
LIMIT 12;",16,5515c1c6-18fe-449d-b621-d47631023320
"WITH base_data AS (
  SELECT
    t0.acquisition_count,
    t0.classification_level_2,
    t0.delivery_medium_type,
    t0.fy_week_of_year,
    t0.fy_year,
    t0.masthead,
    t0.table_nm,
    t0.subscriber_has_email_flag,
    t0.free_to_paid_conversion_count,
    t0.reactivation_30day_acquisition_count,
    t0.switch_acquisition_count
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_step1 AS (
  SELECT
    *,
    CASE
      WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
      WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
      WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
      WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
      WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
      WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
      ELSE NULL
    END AS customer_type_grouped,
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS publication_type,
    CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) AS delivery_email_flag_concat
  FROM base_data
),
derived_step2 AS (
  SELECT
    *,
    CASE
      WHEN (delivery_email_flag_concat IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_category,
    CASE
      WHEN (customer_type_grouped IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
      WHEN (customer_type_grouped IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
      ELSE 'Others'
    END AS business_segment
  FROM derived_step1
)
SELECT
  fy_year,
  fy_week_of_year,
  publication_type,
  business_segment,
  subscription_category,
  SUM(acquisition_count) AS total_acquisitions,
  SUM(free_to_paid_conversion_count) AS total_free_to_paid_conversions,
  SUM(reactivation_30day_acquisition_count) AS total_reactivation_30day_acquisitions,
  SUM(switch_acquisition_count) AS total_switch_acquisitions
FROM derived_step2
WHERE
  publication_type != 'Exclude'
  AND subscription_category = 'Digital Subscriptions'
  AND table_nm != 'op'
  AND business_segment = 'B2C'
GROUP BY
  fy_year,
  fy_week_of_year,
  publication_type,
  business_segment,
  subscription_category
ORDER BY fy_year DESC, fy_week_of_year DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(budfor_product AS STRING)) AS unique_budfor_products,
  COUNT(DISTINCT SAFE_CAST(masthead AS STRING)) AS unique_mastheads,
  COUNT(DISTINCT SAFE_CAST(classification_level_2 AS STRING)) AS unique_classification_level_2s,
  MIN(fy_year) AS min_fy_year,
  MAX(fy_year) AS max_fy_year,
  MIN(fy_week_of_year) AS min_fy_week_of_year,
  MAX(fy_week_of_year) AS max_fy_week_of_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
LIMIT 1;","SELECT
  CASE WHEN SUM(acquisition_count) > 0 THEN 'PASS' ELSE 'FAIL' END AS acquisition_count_check,
  CASE WHEN MAX(fy_year) >= 2023 THEN 'PASS' ELSE 'FAIL' END AS recent_data_check
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
WHERE fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`)
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.classification_level_2
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
)
SELECT
  CASE
    WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
    WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
    WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
    WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
    WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
    WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
    ELSE 'Other/Unknown'
  END AS customer_type_grouped,
  COUNT(*) AS count_of_types
FROM base_data
GROUP BY 1
ORDER BY count_of_types DESC
LIMIT 10;",17,0e05b4ce-cb33-488a-8537-b9e68a844e2e
"WITH base_data AS (
  SELECT
    t0.acquisition_count,
    t0.classification_level_1,
    t0.classification_level_2,
    t0.delivery_medium_type,
    t0.fy_week_of_year,
    t0.fy_year,
    t0.masthead,
    t0.subscriber_has_email_flag,
    t0.table_nm
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_fields AS (
  SELECT
    acquisition_count,
    classification_level_1,
    classification_level_2,
    fy_year,
    table_nm,
    -- Derived subscription_type
    CASE
      WHEN (CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_type,
    -- Derived masthead_group
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS masthead_group
  FROM base_data
)
SELECT
  fy_year,
  masthead_group,
  subscription_type,
  SUM(acquisition_count) AS total_acquisitions,
  COUNT(1) AS total_movements
FROM derived_fields
WHERE
  masthead_group != 'Exclude'
  AND table_nm IN ('mov', 'agg')
  AND classification_level_1 IN ('Standard Paid', 'Other Paid')
  AND classification_level_2 IN ('DPE only', 'Digital', 'Essentials', 'Bundles', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games')
  AND subscription_type IN ('Digital Subscriptions')
GROUP BY
  fy_year,
  masthead_group,
  subscription_type
ORDER BY
  fy_year DESC, total_acquisitions DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fy_year AS STRING)) AS unique_fy_years,
  MIN(fy_year) AS min_fy_year,
  MAX(fy_year) AS max_fy_year,
  COUNT(DISTINCT SAFE_CAST(fy_week_of_year AS STRING)) AS unique_fy_weeks,
  MIN(fy_week_of_year) AS min_fy_week_of_year,
  MAX(fy_week_of_year) AS max_fy_week_of_year,
  COUNT(DISTINCT masthead) AS unique_mastheads,
  COUNT(DISTINCT classification_level_1) AS unique_classification_level_1,
  COUNT(DISTINCT classification_level_2) AS unique_classification_level_2,
  COUNT(DISTINCT delivery_medium_type) AS unique_delivery_medium_types,
  COUNT(DISTINCT subscriber_has_email_flag) AS unique_email_flags,
  COUNT(DISTINCT table_nm) AS unique_table_nms
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
LIMIT 1;","SELECT
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS records_exist_check,
  CASE WHEN MAX(fy_year) >= 2024 THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check,
  CASE WHEN SUM(acquisition_count) > 0 THEN 'PASS' ELSE 'FAIL' END AS acquisition_count_positive_check
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
WHERE table_nm IN ('mov', 'agg')
LIMIT 1;","SELECT
  masthead,
  CASE
    WHEN (masthead = 'TA') THEN 'The Australian'
    WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
    WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
    WHEN (masthead = 'WT') THEN 'Other Publications'
    WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
    WHEN (masthead IS NULL) THEN 'check'
    ELSE 'Exclude'
  END AS masthead_group,
  COUNT(*) AS record_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements`
GROUP BY
  masthead,
  masthead_group
ORDER BY
  record_count DESC
LIMIT 10;",18,1e9c7a29-2613-47b8-85d1-127e5b8c66ac
"SELECT
  date_trunc(date(datetime(usage_end_time, ""Australia/Sydney"")), MONTH) AS service_month,
  `replace`(project.name, 'ncau-data-newsquery-', '') AS project,
  service.description AS service,
  SUM(cost) AS total_cost_aud
FROM
  `ncau-tech-mgmt.billing_export.gcp_billing_export_v1_0129CD_D10B4E_0A39B2`
WHERE
  date(_PARTITIONTIME) BETWEEN PARSE_DATE(""%Y%m%d"", '20230101') AND PARSE_DATE(""%Y%m%d"", '20231231') AND
  service.description NOT IN ('Invoice')
GROUP BY 1, 2, 3
ORDER BY service_month DESC, total_cost_aud DESC
LIMIT 10;","SELECT
  COUNT(1) AS total_records,
  COUNT(DISTINCT SAFE_CAST(project.name AS STRING)) AS unique_projects,
  COUNT(DISTINCT SAFE_CAST(service.description AS STRING)) AS unique_services,
  MIN(SAFE_CAST(usage_end_time AS TIMESTAMP)) AS min_usage_end_time,
  MAX(SAFE_CAST(usage_end_time AS TIMESTAMP)) AS max_usage_end_time
FROM
  `ncau-tech-mgmt.billing_export.gcp_billing_export_v1_0129CD_D10B4E_0A39B2`
LIMIT 1;","SELECT
  CASE
    WHEN SUM(cost) > 0 AND MAX(usage_end_time) >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 7 DAY) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_and_cost_check
FROM
  `ncau-tech-mgmt.billing_export.gcp_billing_export_v1_0129CD_D10B4E_0A39B2`
WHERE
  date(_PARTITIONTIME) = CURRENT_DATE()
LIMIT 1;","SELECT
  service.description AS service_description,
  COUNT(1) AS record_count,
  SUM(cost) AS total_cost
FROM
  `ncau-tech-mgmt.billing_export.gcp_billing_export_v1_0129CD_D10B4E_0A39B2`
WHERE
  date(_PARTITIONTIME) BETWEEN PARSE_DATE(""%Y%m%d"", '20230101') AND PARSE_DATE(""%Y%m%d"", '20230131')
GROUP BY 1
ORDER BY record_count DESC
LIMIT 5;",19,fbf4d483-b17a-4040-b18c-091481d62200
"SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  SAFE_CAST(calendar_year AS STRING) AS calendar_year,
  revenue_type,
  revenue_transaction_status,
  unified_publication_name,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(agency_commission_amount) AS total_agency_commission
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  SAFE_CAST(financial_year AS STRING) BETWEEN '2023' AND '2026'
  AND revenue_transaction_status IN ('Billed', 'Booked')
  AND source_system_code = 'ADPT'
  AND revenue_type = 'Digital'
  AND record_type_code = 'STD'
GROUP BY
  1, 2, 3, 4, 5
ORDER BY
  financial_year DESC, calendar_year DESC
LIMIT 10;","SELECT
  COUNT(1) AS total_records,
  COUNT(DISTINCT booking_number) AS unique_bookings,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  MIN(reporting_date) AS min_reporting_date,
  MAX(reporting_date) AS max_reporting_date
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
LIMIT 1;","SELECT
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_positive_check,
  CASE WHEN MAX(data_load_datetime) >= CURRENT_DATE() - INTERVAL 7 DAY THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  SAFE_CAST(financial_year AS STRING) = SAFE_CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS STRING)
LIMIT 1;","SELECT
  revenue_transaction_status,
  revenue_type,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  source_system_code = 'ADPT'
GROUP BY
  revenue_transaction_status,
  revenue_type
ORDER BY
  record_count DESC
LIMIT 5;",20,38809f41-7138-4b94-94d1-ae919b2d9517
"SELECT
    SAFE_CAST(t0.Category AS STRING) AS Category,
    SUM(t0.Product_Revenue) AS total_product_revenue,
    SUM(CASE WHEN SAFE_CAST(t0.Margin_Level AS STRING) IN ('1', '2', '3', '4', '5', '6') THEN t0.Expense ELSE 0 END) AS total_expense_all_margins
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
GROUP BY
    1
ORDER BY
    total_product_revenue DESC
LIMIT 12;","SELECT
    COUNT(1) AS total_records,
    COUNT(DISTINCT SAFE_CAST(t0.Category AS STRING)) AS unique_categories,
    COUNT(DISTINCT SAFE_CAST(t0.Margin_Level AS STRING)) AS unique_margin_levels,
    COUNT(DISTINCT SAFE_CAST(t0.Product_L1 AS STRING)) AS unique_product_l1s,
    COUNT(DISTINCT SAFE_CAST(t0.Product_Name AS STRING)) AS unique_product_names
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
LIMIT 1;","SELECT
    CASE
        WHEN SUM(t0.Product_Revenue) > 0 THEN 'PASS: Product Revenue is positive'
        ELSE 'FAIL: Product Revenue is not positive'
    END AS product_revenue_check,
    CASE
        WHEN COUNT(1) > 0 THEN 'PASS: Table is not empty'
        ELSE 'FAIL: Table is empty'
    END AS table_not_empty_check
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
LIMIT 1;","SELECT
    SAFE_CAST(t0.Margin_Level AS STRING) AS Margin_Level,
    COUNT(1) AS record_count,
    SUM(t0.Expense) AS total_expense_for_level
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
GROUP BY
    1
ORDER BY
    Margin_Level
LIMIT 12;",21,a2edd9c0-9f0c-45f4-b481-6ed9e4a3f11d
"SELECT
  t0.fy_year_week_number,
  t0.revenue_type,
  SUM(t0.amount) AS total_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE
  SAFE_CAST(t0.fy_year_week_number AS STRING) LIKE '2025%'
GROUP BY
  t0.fy_year_week_number,
  t0.revenue_type
ORDER BY
  t0.fy_year_week_number DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.revenue_type) AS unique_revenue_types,
  MIN(t0.fy_year_week_number) AS min_fy_year_week_number,
  MAX(t0.fy_year_week_number) AS max_fy_year_week_number,
  COUNT(DISTINCT t0.amount) AS unique_amounts,
  COUNT(DISTINCT t0.volume) AS unique_volumes
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
LIMIT 1;","SELECT
  CASE WHEN MAX(SAFE_CAST(t0.fy_year_week_number AS STRING)) >= FORMAT_DATE('%Y%W', CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check,
  CASE WHEN SUM(t0.amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS amount_positive_check
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE
  SAFE_CAST(t0.fy_year_week_number AS STRING) = FORMAT_DATE('%Y%W', CURRENT_DATE())
LIMIT 1;","SELECT
  SAFE.LEFT(t0.revenue_type, 2) AS revenue_type_prefix,
  COUNT(*) AS count_of_records,
  SUM(t0.amount) AS total_amount_for_prefix
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
GROUP BY
  revenue_type_prefix
ORDER BY
  count_of_records DESC
LIMIT 10;",22,c32d96e5-38f4-48a8-9b70-3d89a83f03aa
"SELECT
    SAFE_CAST(t0.L03_publication_name AS STRING) AS publication_name,
    SAFE_CAST(t0.fiscal_week_id AS STRING) AS fiscal_week,
    SAFE_CAST(t0.scenario AS STRING) AS scenario,
    SUM(t0.earned_amount) AS total_earned_amount
FROM
    `ncau-data-newsquery-prd.prstn_finance.v_subscription_snapshot_fct` AS t0
WHERE
    (
        (CASE WHEN (t0.classification_level_1_description IS NULL) THEN 'null' ELSE t0.classification_level_1_description END) NOT IN ('Complimentary', 'Free Staff', 'Free Trials')
        AND
        (CASE WHEN (t0.classification_level_2_description IS NULL) THEN 'null' ELSE t0.classification_level_2_description END) NOT IN ('Brand Registration', 'Business', 'Cafe', 'CAFE', 'Café', 'CLIENT', 'Complimentary', 'DIGITAL', 'Digital Bundle', 'Education', 'Existing Subscribers', 'Free Staff', 'Free to Paid', 'Free Trials', 'Group Activation', 'Home Delivery', 'Library', 'Metered Access', 'Miscellaneous', 'Staff', 'TAB', 'Unknown', 'VIP Access')
    )
GROUP BY
    publication_name,
    fiscal_week,
    scenario
ORDER BY
    fiscal_week DESC, total_earned_amount DESC
LIMIT 12;","SELECT
    COUNT(*) AS total_records,
    COUNT(DISTINCT SAFE_CAST(t0.fiscal_week_id AS STRING)) AS unique_fiscal_weeks,
    COUNT(DISTINCT SAFE_CAST(t0.L03_publication_name AS STRING)) AS unique_publications,
    COUNT(DISTINCT SAFE_CAST(t0.gl_publication_code AS STRING)) AS unique_gl_publications,
    MIN(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS min_fiscal_week_id,
    MAX(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS max_fiscal_week_id
FROM
    `ncau-data-newsquery-prd.prstn_finance.v_subscription_snapshot_fct` AS t0
LIMIT 12;","SELECT
    CASE
        WHEN SUM(CASE WHEN SAFE_CAST(t0.fiscal_week_id AS STRING) = (SELECT MAX(SAFE_CAST(fiscal_week_id AS STRING)) FROM `ncau-data-newsquery-prd.prstn_finance.v_subscription_snapshot_fct`) THEN t0.earned_amount ELSE 0 END) > 0 THEN 'PASS'
        ELSE 'FAIL'
    END AS earned_amount_check,
    CASE
        WHEN SAFE_CAST(MAX(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%W', CURRENT_DATE()) AS INT64) - 4 THEN 'PASS'
        ELSE 'FAIL'
    END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.prstn_finance.v_subscription_snapshot_fct` AS t0
LIMIT 1;","SELECT
    CASE
        WHEN (SAFE_CAST(t0.classification_level_1_description AS STRING) NOT IN ('Complimentary', 'Free Staff', 'Free Trials')) THEN 'Included_L1'
        ELSE 'Excluded_L1'
    END AS classification_level_1_status,
    CASE
        WHEN (SAFE_CAST(t0.classification_level_2_description AS STRING) NOT IN ('Brand Registration', 'Business', 'Cafe', 'CAFE', 'Café', 'CLIENT', 'Complimentary', 'DIGITAL', 'Digital Bundle', 'Education', 'Existing Subscribers', 'Free Staff', 'Free to Paid', 'Free Trials', 'Group Activation', 'Home Delivery', 'Library', 'Metered Access', 'Miscellaneous', 'Staff', 'TAB', 'Unknown', 'VIP Access')) THEN 'Included_L2'
        ELSE 'Excluded_L2'
    END AS classification_level_2_status,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.prstn_finance.v_subscription_snapshot_fct` AS t0
GROUP BY
    classification_level_1_status,
    classification_level_2_status
LIMIT 12;",23,e380f99e-2ef3-40ec-a3ec-bc35491cc0bb
"WITH OSandFACT_Base AS (
  SELECT
    os.*,
    pub.publication_name,
    pub.l04_publication_code,
    pub.l06_publication_code,
    calendar.fy_week_of_year,
    calendar.fy_year_week_number,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.fy_month_of_year,
    calendar.fy_year
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep ON os.os_level_12 = dep.department_code
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND pub.l04_publication_code <> 'Free News & Lifestyle'
    AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
    AND os.gl_hierarchy_code = 'FY2025'
)
SELECT
  t0.fy_year,
  CASE
    WHEN t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times') THEN 'Regionals'
    WHEN t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
    WHEN t0.publication_name IN ('The Australian') THEN 'The Australian'
    WHEN t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
    WHEN t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
    WHEN t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
    ELSE 'Other'
  END AS publication_group,
  t0.os_level_7 AS sales_channel,
  SUM(t0.Actual_Amount) AS total_actual_amount,
  SUM(t0.volume) AS total_volume,
  SUM(t0.Budget_Amount) AS total_budget_amount,
  SUM(t0.Forecast_Amount) AS total_forecast_amount
FROM
  OSandFACT_Base AS t0
GROUP BY
  t0.fy_year,
  publication_group,
  sales_channel
ORDER BY
  t0.fy_year DESC, total_actual_amount DESC
LIMIT 12;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS STRING)) AS unique_fiscal_weeks,
  MIN(SAFE_CAST(fiscal_week_id AS STRING)) AS min_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS STRING)) AS max_fiscal_week_id,
  COUNT(DISTINCT SAFE_CAST(gl_publication_code AS STRING)) AS unique_publications,
  COUNT(DISTINCT SAFE_CAST(os_level_7 AS STRING)) AS unique_sales_channels
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
LIMIT 1;","WITH OSandFACT_Base AS (
  SELECT
    os.*,
    pub.publication_name,
    pub.l04_publication_code,
    pub.l06_publication_code,
    calendar.fy_week_of_year,
    calendar.fy_year_week_number,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.fy_month_of_year,
    calendar.fy_year
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep ON os.os_level_12 = dep.department_code
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND pub.l04_publication_code <> 'Free News & Lifestyle'
    AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
    AND os.gl_hierarchy_code = 'FY2025'
)
SELECT
  CASE WHEN SUM(t0.Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_check,
  CASE WHEN MAX(t0.fy_year_week_number) >= ((2025*100) + DATETIME_DIFF(CURRENT_DATETIME(), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 4) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check_fy2025
FROM
  OSandFACT_Base AS t0
LIMIT 1;","WITH OSandFACT_Base AS (
  SELECT
    os.*,
    pub.publication_name,
    pub.l04_publication_code,
    pub.l06_publication_code,
    calendar.fy_week_of_year,
    calendar.fy_year_week_number,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.fy_month_of_year,
    calendar.fy_year
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep ON os.os_level_12 = dep.department_code
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND pub.l04_publication_code <> 'Free News & Lifestyle'
    AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
    AND os.gl_hierarchy_code = 'FY2025'
)
SELECT
  CASE
    WHEN t0.publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times') THEN 'Regionals'
    WHEN t0.publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
    WHEN t0.publication_name IN ('The Australian') THEN 'The Australian'
    WHEN t0.publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
    WHEN t0.publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
    WHEN t0.publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
    ELSE 'Other'
  END AS publication_group,
  COUNT(*) AS record_count
FROM
  OSandFACT_Base AS t0
GROUP BY
  publication_group
ORDER BY
  record_count DESC
LIMIT 12;",24,aca2f032-b796-49a2-89fe-781ca947aa33
"SELECT
  fiscal_week_end_date,
  publication_name,
  os_l7,
  SUM(actual) AS total_actual,
  SUM(actual_volume) AS total_actual_volume,
  SUM(forecast) AS total_forecast,
  SUM(budget) AS total_budget
FROM
  (
    WITH
      tab_num AS (
        SELECT fiscal_week_end_date, COUNT(*) AS num FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` WHERE os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES') GROUP BY 1
      ),
      model_rev AS (
        SELECT CAST(forecast_timestamp AS date) AS fiscal_week_end_date, forecast_value AS ml_forecast_rev, prediction_interval_lower_bound AS ml_forecast_rev_lb, prediction_interval_upper_bound AS ml_forecast_rev_ub, ml_forecast_vol, ml_forecast_vol_lb, ml_forecast_vol_ub FROM ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_rev`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) AS a INNER JOIN ( SELECT CAST(forecast_timestamp AS date) AS fiscal_week_end_date, forecast_value AS ml_forecast_vol, prediction_interval_lower_bound AS ml_forecast_vol_lb, prediction_interval_upper_bound AS ml_forecast_vol_ub FROM ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_vol`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) ) AS b ON CAST(a.forecast_timestamp AS date) = CAST(b.fiscal_week_end_date AS date)
      ),
      main AS (
        SELECT fiscal_week_end_date, publication_name, os_l7, fiscal_week_number, actual, actual_volume, forecast, forecast_volume, budget, budget_volume,
          CASE WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 1 = ( SELECT EXTRACT(YEAR FROM MAX(fiscal_week_end_date)) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS previous_year_flag,
          CASE WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 0 = ( SELECT EXTRACT(YEAR FROM MAX(fiscal_week_end_date)) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS latest_year_flag,
          CASE WHEN fiscal_week_end_date + 7 = ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS previous_week_flag,
          CASE WHEN fiscal_week_end_date = ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS latest_week_flag,
          CASE WHEN fiscal_week_end_date > ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS future_week_flag,
          CASE WHEN fiscal_week_end_date - 84 >= ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS projection_week_flag
        FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` WHERE month_end_flag = false AND os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES')
      )
    SELECT
      m.fiscal_week_end_date, m.publication_name, m.os_l7, m.fiscal_week_number, sum(m.actual) AS actual, sum(m.actual_volume) AS actual_volume, sum(m.forecast) AS forecast, sum(m.forecast_volume) AS forecast_volume, sum(m.budget) AS budget, sum(m.budget_volume) AS budget_volume, max(m.previous_week_flag) AS previous_week_flag, max(m.latest_year_flag) AS latest_year_flag, max(m.previous_year_flag) AS previous_year_flag, max(m.future_week_flag) AS future_week_flag, max(m.latest_week_flag) AS latest_week_flag, max(m.projection_week_flag) AS projection_week_flag, sum(a.ml_forecast_rev) AS ml_forecast_rev, sum(a.ml_forecast_rev_lb) AS ml_forecast_rev_lb, sum(a.ml_forecast_rev_ub) AS ml_forecast_rev_ub, sum(a.ml_forecast_vol) AS ml_forecast_vol, sum(a.ml_forecast_vol_lb) AS ml_forecast_vol_lb, sum(a.ml_forecast_vol_ub) AS ml_forecast_vol_ub
    FROM main AS m
    LEFT JOIN ( SELECT mr.fiscal_week_end_date, sum(ml_forecast_rev) / tn.num AS ml_forecast_rev, sum(ml_forecast_rev_lb) / tn.num AS ml_forecast_rev_lb, sum(ml_forecast_rev_ub) / tn.num AS ml_forecast_rev_ub, sum(ml_forecast_vol) / tn.num AS ml_forecast_vol, sum(ml_forecast_vol_lb) / tn.num AS ml_forecast_vol_lb, sum(ml_forecast_vol_ub) / tn.num AS ml_forecast_vol_ub FROM model_rev AS mr LEFT JOIN tab_num AS tn ON mr.fiscal_week_end_date = tn.fiscal_week_end_date GROUP BY 1, tn.num ) AS a
    ON m.fiscal_week_end_date = a.fiscal_week_end_date
    GROUP BY 1, 2, 3, 4
  ) AS t0
GROUP BY
  fiscal_week_end_date,
  publication_name,
  os_l7
ORDER BY
  fiscal_week_end_date DESC
LIMIT 10","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(publication_name AS STRING)) AS unique_publication_name,
  COUNT(DISTINCT SAFE_CAST(os_l7 AS STRING)) AS unique_os_l7,
  MIN(SAFE_CAST(fiscal_week_end_date AS DATE)) AS min_fiscal_week_end_date,
  MAX(SAFE_CAST(fiscal_week_end_date AS DATE)) AS max_fiscal_week_end_date
FROM
  `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query`
LIMIT 1","SELECT
  CASE
    WHEN SUM(CASE WHEN t0.latest_week_flag = 1 THEN t0.actual ELSE 0 END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS latest_week_actual_check,
  CASE
    WHEN MAX(SAFE_CAST(t0.fiscal_week_end_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 WEEK) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_check
FROM
  (
    WITH
      tab_num AS (
        SELECT fiscal_week_end_date, COUNT(*) AS num FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` WHERE os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES') GROUP BY 1
      ),
      model_rev AS (
        SELECT CAST(forecast_timestamp AS date) AS fiscal_week_end_date, forecast_value AS ml_forecast_rev, prediction_interval_lower_bound AS ml_forecast_rev_lb, prediction_interval_upper_bound AS ml_forecast_rev_ub, ml_forecast_vol, ml_forecast_vol_lb, ml_forecast_vol_ub FROM ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_rev`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) AS a INNER JOIN ( SELECT CAST(forecast_timestamp AS date) AS fiscal_week_end_date, forecast_value AS ml_forecast_vol, prediction_interval_lower_bound AS ml_forecast_vol_lb, prediction_interval_upper_bound AS ml_forecast_vol_ub FROM ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_vol`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) ) AS b ON CAST(a.forecast_timestamp AS date) = CAST(b.fiscal_week_end_date AS date)
      ),
      main AS (
        SELECT fiscal_week_end_date, publication_name, os_l7, fiscal_week_number, actual, actual_volume, forecast, forecast_volume, budget, budget_volume,
          CASE WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 1 = ( SELECT EXTRACT(YEAR FROM MAX(fiscal_week_end_date)) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS previous_year_flag,
          CASE WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 0 = ( SELECT EXTRACT(YEAR FROM MAX(fiscal_week_end_date)) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS latest_year_flag,
          CASE WHEN fiscal_week_end_date + 7 = ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS previous_week_flag,
          CASE WHEN fiscal_week_end_date = ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS latest_week_flag,
          CASE WHEN fiscal_week_end_date > ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS future_week_flag,
          CASE WHEN fiscal_week_end_date - 84 >= ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS projection_week_flag
        FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` WHERE month_end_flag = false AND os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES')
      )
    SELECT
      m.fiscal_week_end_date, m.publication_name, m.os_l7, m.fiscal_week_number, sum(m.actual) AS actual, sum(m.actual_volume) AS actual_volume, sum(m.forecast) AS forecast, sum(m.forecast_volume) AS forecast_volume, sum(m.budget) AS budget, sum(m.budget_volume) AS budget_volume, max(m.previous_week_flag) AS previous_week_flag, max(m.latest_year_flag) AS latest_year_flag, max(m.previous_year_flag) AS previous_year_flag, max(m.future_week_flag) AS future_week_flag, max(m.latest_week_flag) AS latest_week_flag, max(m.projection_week_flag) AS projection_week_flag, sum(a.ml_forecast_rev) AS ml_forecast_rev, sum(a.ml_forecast_rev_lb) AS ml_forecast_rev_lb, sum(a.ml_forecast_rev_ub) AS ml_forecast_rev_ub, sum(a.ml_forecast_vol) AS ml_forecast_vol, sum(a.ml_forecast_vol_lb) AS ml_forecast_vol_lb, sum(a.ml_forecast_vol_ub) AS ml_forecast_vol_ub
    FROM main AS m
    LEFT JOIN ( SELECT mr.fiscal_week_end_date, sum(ml_forecast_rev) / tn.num AS ml_forecast_rev, sum(ml_forecast_rev_lb) / tn.num AS ml_forecast_rev_lb, sum(ml_forecast_rev_ub) / tn.num AS ml_forecast_rev_ub, sum(ml_forecast_vol) / tn.num AS ml_forecast_vol, sum(ml_forecast_vol_lb) / tn.num AS ml_forecast_vol_lb, sum(ml_forecast_vol_ub) / tn.num AS ml_forecast_vol_ub FROM model_rev AS mr LEFT JOIN tab_num AS tn ON mr.fiscal_week_end_date = tn.fiscal_week_end_date GROUP BY 1, tn.num ) AS a
    ON m.fiscal_week_end_date = a.fiscal_week_end_date
    GROUP BY 1, 2, 3, 4
  ) AS t0
LIMIT 1","SELECT
  SAFE_CAST(latest_year_flag AS STRING) AS latest_year_flag_status,
  SAFE_CAST(latest_week_flag AS STRING) AS latest_week_flag_status,
  SAFE_CAST(future_week_flag AS STRING) AS future_week_flag_status,
  COUNT(*) AS record_count
FROM
  (
    WITH
      tab_num AS (
        SELECT fiscal_week_end_date, COUNT(*) AS num FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` WHERE os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES') GROUP BY 1
      ),
      model_rev AS (
        SELECT CAST(forecast_timestamp AS date) AS fiscal_week_end_date, forecast_value AS ml_forecast_rev, prediction_interval_lower_bound AS ml_forecast_rev_lb, prediction_interval_upper_bound AS ml_forecast_rev_ub, ml_forecast_vol, ml_forecast_vol_lb, ml_forecast_vol_ub FROM ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_rev`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) AS a INNER JOIN ( SELECT CAST(forecast_timestamp AS date) AS fiscal_week_end_date, forecast_value AS ml_forecast_vol, prediction_interval_lower_bound AS ml_forecast_vol_lb, prediction_interval_upper_bound AS ml_forecast_vol_ub FROM ML.FORECAST(MODEL `ncau-data-newsquery-dev.arima_dataset.model_vol`, STRUCT(20 AS horizon, 0.9 AS confidence_level)) ) AS b ON CAST(a.forecast_timestamp AS date) = CAST(b.fiscal_week_end_date AS date)
      ),
      main AS (
        SELECT fiscal_week_end_date, publication_name, os_l7, fiscal_week_number, actual, actual_volume, forecast, forecast_volume, budget, budget_volume,
          CASE WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 1 = ( SELECT EXTRACT(YEAR FROM MAX(fiscal_week_end_date)) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS previous_year_flag,
          CASE WHEN EXTRACT(YEAR FROM fiscal_week_end_date) + 0 = ( SELECT EXTRACT(YEAR FROM MAX(fiscal_week_end_date)) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS latest_year_flag,
          CASE WHEN fiscal_week_end_date + 7 = ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS previous_week_flag,
          CASE WHEN fiscal_week_end_date = ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS latest_week_flag,
          CASE WHEN fiscal_week_end_date > ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS future_week_flag,
          CASE WHEN fiscal_week_end_date - 84 >= ( SELECT MAX(fiscal_week_end_date) FROM ( SELECT fiscal_week_end_date, sum(actual) AS actuals, sum(actual_volume) AS volume FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` GROUP BY fiscal_week_end_date ) WHERE actuals > 0 AND volume > 0 ) THEN 1 ELSE 0 END AS projection_week_flag
        FROM `ncau-data-newsquery-prd.newsquery_data_backup.tableau_operating_statement_query` WHERE month_end_flag = false AND os_l7 IN ('NSW', 'REGIONAL', 'NIS', 'VIC', 'DIGITAL OTHER', 'QLD', 'REGIONALS', 'SA WA', 'PRESTIGE', 'THE WEEKLY TIMES')
      )
    SELECT
      m.fiscal_week_end_date, m.publication_name, m.os_l7, m.fiscal_week_number, sum(m.actual) AS actual, sum(m.actual_volume) AS actual_volume, sum(m.forecast) AS forecast, sum(m.forecast_volume) AS forecast_volume, sum(m.budget) AS budget, sum(m.budget_volume) AS budget_volume, max(m.previous_week_flag) AS previous_week_flag, max(m.latest_year_flag) AS latest_year_flag, max(m.previous_year_flag) AS previous_year_flag, max(m.future_week_flag) AS future_week_flag, max(m.latest_week_flag) AS latest_week_flag, max(m.projection_week_flag) AS projection_week_flag, sum(a.ml_forecast_rev) AS ml_forecast_rev, sum(a.ml_forecast_rev_lb) AS ml_forecast_rev_lb, sum(a.ml_forecast_rev_ub) AS ml_forecast_rev_ub, sum(a.ml_forecast_vol) AS ml_forecast_vol, sum(a.ml_forecast_vol_lb) AS ml_forecast_vol_lb, sum(a.ml_forecast_vol_ub) AS ml_forecast_vol_ub
    FROM main AS m
    LEFT JOIN ( SELECT mr.fiscal_week_end_date, sum(ml_forecast_rev) / tn.num AS ml_forecast_rev, sum(ml_forecast_rev_lb) / tn.num AS ml_forecast_rev_lb, sum(ml_forecast_rev_ub) / tn.num AS ml_forecast_rev_ub, sum(ml_forecast_vol) / tn.num AS ml_forecast_vol, sum(ml_forecast_vol_lb) / tn.num AS ml_forecast_vol_lb, sum(ml_forecast_vol_ub) / tn.num AS ml_forecast_vol_ub FROM model_rev AS mr LEFT JOIN tab_num AS tn ON mr.fiscal_week_end_date = tn.fiscal_week_end_date GROUP BY 1, tn.num ) AS a
    ON m.fiscal_week_end_date = a.fiscal_week_end_date
    GROUP BY 1, 2, 3, 4
  ) AS t0
GROUP BY
  latest_year_flag_status,
  latest_week_flag_status,
  future_week_flag_status
ORDER BY record_count DESC
LIMIT 10",25,415199ee-c67c-4b55-85f1-38b4aa291931
"SELECT SAFE_CAST(t0.fiscal_month_id AS STRING) AS fiscal_month_id, t0.service_model, SUM(t0.revenue_served_after_exclusion) AS total_revenue_served_after_exclusion, SUM(t0.sales_cost) AS total_sales_cost, SUM(t0.total_2nd_margin_rev) AS total_2nd_margin_rev FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.cost_to_serve_service_model` AS t0 WHERE (SAFE_CAST(t0.fiscal_month_id AS STRING) < SAFE_CAST(t0.current_fiscal_month_id AS STRING) AND t0.service_model != 'V1. Hybrid') GROUP BY fiscal_month_id, t0.service_model ORDER BY fiscal_month_id DESC LIMIT 10;","SELECT COUNT(*) AS total_records, COUNT(DISTINCT t0.service_model) AS unique_service_models, MIN(SAFE_CAST(t0.fiscal_month_id AS STRING)) AS min_fiscal_month_id, MAX(SAFE_CAST(t0.fiscal_month_id AS STRING)) AS max_fiscal_month_id FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.cost_to_serve_service_model` AS t0 LIMIT 1;","SELECT CASE WHEN SUM(t0.revenue_served_after_exclusion) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_check, CASE WHEN MAX(SAFE_CAST(t0.fiscal_month_id AS STRING)) >= FORMAT_DATE('%Y%m', DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)) THEN 'PASS' ELSE 'FAIL' END AS freshness_check FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.cost_to_serve_service_model` AS t0 LIMIT 1;","SELECT t0.service_model, COUNT(*) AS record_count FROM `ncau-data-newsquery-prd.sbx_fda_noncorefin.cost_to_serve_service_model` AS t0 GROUP BY t0.service_model ORDER BY record_count DESC LIMIT 10;",26,c44e51ad-f0c4-4a5e-bb7c-e0044deaa278
"SELECT
    t0.CUSTOMER_NAME,
    t0.MONTH,
    t0.YEAR,
    CASE WHEN (t0.GM IS NULL) THEN t0.sales_region_name ELSE t0.GM END AS sales_region_derived,
    CASE WHEN (t0.GSD IS NULL) THEN t0.sales_team_name ELSE t0.GSD END AS sales_team_derived,
    SUM(SAFE_CAST(t0.LGR AS BIGNUMERIC)) AS total_lgr_amount,
    SUM(SAFE_CAST(t0.relative_fy_month_offset AS INT64)) AS total_relative_fy_month_offset
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0
WHERE
    (t0.CURR_PV_FLAG = 'NPV' OR t0.STLY_PV_FLAG = 'NPV')
    AND SAFE_CAST(t0.relative_fy_month_offset AS INT64) >= 0
    AND SAFE_CAST(t0.LGR AS BIGNUMERIC) != 0.000000
GROUP BY
    t0.CUSTOMER_NAME,
    t0.MONTH,
    t0.YEAR,
    sales_region_derived,
    sales_team_derived
ORDER BY
    t0.YEAR DESC, t0.MONTH DESC
LIMIT 12;","SELECT
    COUNT(*) AS total_records,
    COUNT(DISTINCT SAFE_CAST(t0.CUSTOMER_NAME AS STRING)) AS unique_customers,
    COUNT(DISTINCT SAFE_CAST(t0.PURE_ACCOUNT_NUMBER AS STRING)) AS unique_accounts,
    MIN(SAFE_CAST(t0.YEAR AS INT64)) AS min_year,
    MAX(SAFE_CAST(t0.YEAR AS INT64)) AS max_year,
    MIN(SAFE_CAST(t0.MONTH AS STRING)) AS min_month,
    MAX(SAFE_CAST(t0.MONTH AS STRING)) AS max_month,
    MIN(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) AS min_load_timestamp,
    MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) AS max_load_timestamp
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0
LIMIT 1;","SELECT
    CASE
        WHEN COUNTIF(SAFE_CAST(t0.LGR AS BIGNUMERIC) > 0 AND (t0.CURR_PV_FLAG = 'NPV' OR t0.STLY_PV_FLAG = 'NPV')) > 0 THEN 'PASS'
        ELSE 'FAIL'
    END AS lgr_positive_check,
    CASE
        WHEN MAX(SAFE_CAST(t0.dw_asl_load_timestamp AS TIMESTAMP)) > TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 24 HOUR) THEN 'PASS'
        ELSE 'FAIL'
    END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0
LIMIT 1;","SELECT
    SAFE_CAST(t0.CURR_PV_FLAG AS STRING) AS current_pv_flag,
    SAFE_CAST(t0.STLY_PV_FLAG AS STRING) AS stly_pv_flag,
    COUNT(*) AS record_count,
    COUNTIF(t0.GM IS NULL) AS gm_null_count,
    COUNTIF(t0.GSD IS NULL) AS gsd_null_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_npv` AS t0
GROUP BY
    current_pv_flag, stly_pv_flag
ORDER BY
    record_count DESC
LIMIT 12;",27,7ada02b8-e93e-41d8-9a7e-05013ff81247
"SELECT
  t0.movement_date AS movement_date,
  CASE
    WHEN (t0.xtend_flag = 'Y') THEN 'XTEND'
    WHEN (SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO' OR (t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND t0.revenue_sub_type = 'DIGITAL')) THEN 'PROGRAMMATIC'
    WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
    WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY'
    ELSE t0.revenue_sub_type
  END AS revenue_category,
  t0.revenue_type AS revenue_type,
  SUM(t0.GROSS_AMOUNT_DIFF) AS total_gross_amount_diff,
  SUM(CASE WHEN (t0.revenue_type = 'DIGITAL') THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS digital_gross_amount_diff,
  SUM(CASE WHEN (t0.revenue_type = 'PRINT') THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS print_gross_amount_diff
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE
  t0.movement_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) AND CURRENT_DATE()
GROUP BY
  movement_date, revenue_category, revenue_type
ORDER BY
  movement_date DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.booking_line_id AS STRING)) AS unique_booking_line_ids,
  COUNT(DISTINCT SAFE_CAST(t0.booking_number AS STRING)) AS unique_booking_numbers,
  MIN(t0.movement_date) AS min_movement_date,
  MAX(t0.movement_date) AS max_movement_date
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
LIMIT 1;","SELECT
  CASE WHEN SUM(t0.GROSS_AMOUNT_DIFF) > 0 THEN 'PASS' ELSE 'FAIL' END AS gross_amount_diff_check,
  CASE WHEN MAX(t0.movement_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
LIMIT 1;","SELECT
  CASE
    WHEN (t0.xtend_flag = 'Y') THEN 'XTEND'
    WHEN (SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO' OR (t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND t0.revenue_sub_type = 'DIGITAL')) THEN 'PROGRAMMATIC'
    WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
    WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY'
    ELSE t0.revenue_sub_type
  END AS revenue_category,
  COUNT(*) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
GROUP BY
  revenue_category
ORDER BY
  record_count DESC
LIMIT 5;",29,a1b901e6-c4fb-44bc-955a-3a7070c15829
"SELECT
  t0.fiscal_year,
  t0.month_short_name,
  t0.os_level_6,
  SUM(t0.TM1_Net_Revenue) AS total_tm1_net_revenue,
  SUM(t0.Tableau_Actual) AS total_tableau_actual,
  SUM(t0.Tableau_Actual - t0.TM1_Net_Revenue) AS revenue_variance
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_revenue` AS t0
WHERE t0.fiscal_year IN (2024, 2025)
GROUP BY t0.fiscal_year, t0.month_short_name, t0.os_level_6
ORDER BY t0.fiscal_year DESC, t0.month_short_name DESC
LIMIT 10","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.fiscal_year AS STRING)) AS unique_fiscal_years,
  COUNT(DISTINCT t0.month_short_name) AS unique_months,
  COUNT(DISTINCT t0.os_level_6) AS unique_os_level_6,
  MIN(SAFE_CAST(t0.fiscal_year AS STRING)) AS min_fiscal_year,
  MAX(SAFE_CAST(t0.fiscal_year AS STRING)) AS max_fiscal_year
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_revenue` AS t0
LIMIT 1","SELECT
  CASE WHEN SUM(t0.Tableau_Actual) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_revenue_positive_check,
  CASE WHEN COUNT(DISTINCT t0.fiscal_year) > 0 AND MAX(t0.fiscal_year) >= 2025 THEN 'PASS' ELSE 'FAIL' END AS current_year_data_exists_check
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_revenue` AS t0
WHERE t0.fiscal_year = 2025
LIMIT 1","SELECT
  CASE WHEN SAFE.REGEXP_CONTAINS(t0.publication_code, '^(^[0-9]+$)$') THEN 'Numeric Publication Code' ELSE 'Non-Numeric Publication Code' END AS publication_code_type,
  COUNT(*) AS record_count
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tableau_vs_tm1_monthly_revenue` AS t0
GROUP BY publication_code_type
LIMIT 2",30,906ca8a7-1733-4a1a-b2f5-2660551f3d3a
"SELECT
    t0.agency_parent,
    t0.financial_quarter,
    SUM(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue,
    SUM(CASE WHEN (t0.relative_fy_year_offset = -1) THEN t0.gross_revenue_amount ELSE 0 END) AS previous_fy_gross_revenue,
    SUM(CASE WHEN t0.relative_fy_month_offset < -12 THEN (CASE WHEN t0.relative_fy_year_offset = -1 THEN t0.gross_revenue_amount ELSE 0 END) ELSE (CASE WHEN t0.relative_fy_year_offset = -1 AND SAFE_CAST(t0.booking_line_created_date AS DATETIME) <= DATETIME_ADD(CURRENT_DATE(), INTERVAL -365 DAY) THEN t0.gross_revenue_amount ELSE 0 END) END) AS previous_fy_gross_revenue_ytd_or_full_year
FROM
    `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE
    (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL)
GROUP BY
    t0.agency_parent,
    t0.financial_quarter
ORDER BY
    current_fy_gross_revenue DESC
LIMIT 10;","SELECT COUNT(1) AS total_rows, COUNT(DISTINCT t0.agency_parent) AS unique_agency_parents, MIN(t0.booking_line_created_date) AS min_date, MAX(t0.booking_line_created_date) AS max_date FROM `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0 LIMIT 1;
SELECT COUNT(1) AS total_rows, COUNT(DISTINCT t0.account_number) AS unique_account_numbers, COUNT(DISTINCT t0.agency_parent) AS unique_agency_parents, MIN(t0.movement_date) AS min_date, MAX(t0.movement_date) AS max_date FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0 LIMIT 1;","SELECT
    CASE WHEN SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS current_fy_revenue_check,
    CASE WHEN MAX(t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
LIMIT 1;","SELECT
    t0.revenue_group_subtype,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
GROUP BY
    t0.revenue_group_subtype
LIMIT 5;

SELECT
    CASE WHEN (t0.movement_financial_week = t0.max_week) THEN 'Current Week' ELSE CONCAT(' Week ',SAFE_CAST(t0.movement_financial_week AS STRING)) END AS movement_week_status,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
GROUP BY
    movement_week_status
LIMIT 5;",31,fed70b12-c274-4cde-9920-592ca4c4dab0
"SELECT
    t0.Fiscal_Year,
    t0.Category,
    SUM(t0.Product_Revenue) AS total_product_revenue,
    SUM(CASE WHEN (SAFE_CAST(t0.Margin_Level AS STRING) = '1' OR SAFE_CAST(t0.Margin_Level AS STRING) = '2') THEN t0.Expense ELSE 0 END) AS total_expense_margin_1_or_2
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE
    SAFE_CAST(t0.Fiscal_Year AS STRING) = '2025'
    AND t0.Source = 'Actuals'
GROUP BY
    t0.Fiscal_Year,
    t0.Category
ORDER BY
    t0.Fiscal_Year,
    t0.Category
LIMIT 10;","SELECT
    COUNT(1) AS total_records,
    COUNT(DISTINCT t0.Category) AS unique_categories,
    COUNT(DISTINCT SAFE_CAST(t0.Fiscal_Year AS STRING)) AS unique_fiscal_years,
    COUNT(DISTINCT t0.Source) AS unique_sources,
    COUNT(DISTINCT SAFE_CAST(t0.Margin_Level AS STRING)) AS unique_margin_levels,
    MIN(SAFE_CAST(t0.Fiscal_Year AS INT64)) AS min_fiscal_year,
    MAX(SAFE_CAST(t0.Fiscal_Year AS INT64)) AS max_fiscal_year
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
LIMIT 1;","SELECT
    CASE
        WHEN SUM(CASE WHEN SAFE_CAST(t0.Fiscal_Year AS STRING) = '2025' AND t0.Source = 'Actuals' THEN t0.Product_Revenue ELSE 0 END) > 0 THEN 'PASS'
        ELSE 'FAIL'
    END AS product_revenue_2025_actuals_check,
    CASE
        WHEN MAX(SAFE_CAST(t0.Fiscal_Year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 THEN 'PASS'
        ELSE 'FAIL'
    END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
LIMIT 1;","SELECT
    t0.Category,
    t0.Source,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
GROUP BY
    t0.Category,
    t0.Source
ORDER BY
    t0.Category,
    t0.Source
LIMIT 12;",32,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"WITH base_data AS (
  SELECT
    t0.fy_year,
    t0.fy_week_of_year,
    t0.delivery_medium_type,
    t0.gl_publication_code,
    t0.masthead_code,
    t0.subscriber_has_email_flag,
    t0.ClosingBase,
    t0.OpeningBase,
    t0.EarnedAmount,
    t0.NFEarnedAmount,
    t0.table_union_source,
    t0.classification_level_1_description,
    t0.classification_level_2_description
  FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
),
intermediate_flags AS (
  SELECT
    *,
    (SAFE_CAST(classification_level_1_description AS STRING) = 'Standard Paid') AS is_standard_paid,
    (SAFE_CAST(delivery_medium_type AS STRING) = 'Bundle') AS is_bundle,
    (SAFE_CAST(subscriber_has_email_flag AS STRING) = 'subsnapfact') AS is_subsnapfact_email_flag
  FROM base_data
),
intermediate_masthead AS (
  SELECT
    *,
    CASE
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '100' OR SAFE_CAST(gl_publication_code AS STRING) = '101' OR SAFE_CAST(masthead_code AS STRING) = 'TA') THEN 'The Australian'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '401' OR SAFE_CAST(gl_publication_code AS STRING) = '402' OR SAFE_CAST(gl_publication_code AS STRING) = '17' OR SAFE_CAST(masthead_code AS STRING) = 'CM') THEN 'Courier Mail'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '110' OR SAFE_CAST(gl_publication_code AS STRING) = '111' OR SAFE_CAST(gl_publication_code AS STRING) = '116' OR SAFE_CAST(masthead_code AS STRING) = 'DT') THEN 'Daily Telegraph'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '301' OR SAFE_CAST(gl_publication_code AS STRING) = '302' OR SAFE_CAST(gl_publication_code AS STRING) = '303' OR SAFE_CAST(masthead_code AS STRING) = 'HS') THEN 'Herald Sun'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '500' OR SAFE_CAST(gl_publication_code AS STRING) = '501' OR SAFE_CAST(gl_publication_code AS STRING) = '560' OR SAFE_CAST(masthead_code AS STRING) = 'AA') THEN 'The Advertiser'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '450' OR SAFE_CAST(gl_publication_code AS STRING) = '460' OR SAFE_CAST(masthead_code AS STRING) = 'CP') THEN 'Cairns Post'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '350' OR SAFE_CAST(gl_publication_code AS STRING) = '351' OR SAFE_CAST(masthead_code AS STRING) = 'GA') THEN 'Geelong'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '670' OR SAFE_CAST(gl_publication_code AS STRING) = '685' OR SAFE_CAST(masthead_code AS STRING) = 'GC') THEN 'Gold Coast'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '961' OR SAFE_CAST(gl_publication_code AS STRING) = '962' OR SAFE_CAST(gl_publication_code AS STRING) = '963' OR SAFE_CAST(masthead_code AS STRING) = 'NT') THEN 'NT News'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '850' OR SAFE_CAST(gl_publication_code AS STRING) = '851' OR SAFE_CAST(gl_publication_code AS STRING) = '852' OR SAFE_CAST(masthead_code AS STRING) = 'TM') THEN 'The Mercury'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '5053' OR SAFE_CAST(gl_publication_code AS STRING) = '5253' OR SAFE_CAST(masthead_code AS STRING) = 'TC') THEN 'Toowoomba'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '475' OR SAFE_CAST(gl_publication_code AS STRING) = '490' OR SAFE_CAST(masthead_code AS STRING) = 'TB') THEN 'Townsville'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '305' OR SAFE_CAST(gl_publication_code AS STRING) = '307' OR SAFE_CAST(masthead_code AS STRING) = 'WT') THEN 'Weekly Times'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9001' OR SAFE_CAST(masthead_code AS STRING) = 'CS') THEN 'Code'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '8821' OR SAFE_CAST(gl_publication_code AS STRING) = 'Punters.com.au' OR SAFE_CAST(masthead_code AS STRING) = 'PU') THEN 'Punters'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '8822' OR SAFE_CAST(gl_publication_code AS STRING) = 'Racenet' OR SAFE_CAST(masthead_code AS STRING) = 'RN') THEN 'Racenet'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9653' OR SAFE_CAST(masthead_code AS STRING) = 'SC') THEN 'Supercoach Plus'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9600' OR SAFE_CAST(masthead_code AS STRING) = 'TS') THEN 'Taste Online'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'AP') THEN 'Apple Podcast: Crime X'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(classification_level_2_description AS STRING) = 'The Oz') THEN 'The Oz'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9000' OR SAFE_CAST(masthead_code AS STRING) = 'NW') THEN 'news.com.au'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '121') THEN 'Others'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9002' OR SAFE_CAST(masthead_code AS STRING) = 'BG') THEN 'Brain Games'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9504' OR SAFE_CAST(gl_publication_code AS STRING) = '9514' OR SAFE_CAST(gl_publication_code AS STRING) = '9556' OR SAFE_CAST(gl_publication_code AS STRING) = '9558' OR SAFE_CAST(gl_publication_code AS STRING) = '9560' OR SAFE_CAST(gl_publication_code AS STRING) = '9603' OR SAFE_CAST(gl_publication_code AS STRING) = '9623') THEN 'Others'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9644') THEN 'Suddenly'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9903') THEN 'News Corporate'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
      ELSE NULL
    END AS masthead_name_raw
  FROM intermediate_flags
),
categorized_data AS (
  SELECT
    *,
    CASE
      WHEN (masthead_name_raw = 'The Australian') THEN 'The Australian'
      WHEN (masthead_name_raw IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
      WHEN (masthead_name_raw IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville')) THEN 'Regionals'
      WHEN (masthead_name_raw = 'Weekly Times') THEN 'Others'
      WHEN (masthead_name_raw IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others')) THEN 'Deep Niche Publications'
      ELSE 'Discontinued'
    END AS publication_group,
    CASE
      WHEN (SAFE_CAST(delivery_medium_type AS STRING) = 'Print') THEN 'Print Recognition'
      WHEN (is_subsnapfact_email_flag OR (is_standard_paid AND is_bundle)) THEN 'Print Recognition'
      ELSE 'Digital Recognition'
    END AS recognition_type
  FROM intermediate_masthead
)
SELECT
  fy_year,
  fy_week_of_year,
  publication_group,
  recognition_type,
  SUM(SAFE_CAST(ClosingBase AS BIGNUMERIC)) AS total_closing_base,
  SUM(SAFE_CAST(OpeningBase AS BIGNUMERIC)) AS total_opening_base,
  SUM(SAFE_CAST(EarnedAmount AS BIGNUMERIC)) AS total_earned_amount,
  SUM(SAFE_CAST(NFEarnedAmount AS BIGNUMERIC)) AS total_nf_earned_amount
FROM categorized_data
WHERE
  publication_group != 'Discontinued'
  AND recognition_type = 'Digital Recognition'
GROUP BY
  fy_year,
  fy_week_of_year,
  publication_group,
  recognition_type
ORDER BY
  fy_year DESC,
  fy_week_of_year DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(gl_publication_code AS STRING)) AS unique_publication_codes,
  COUNT(DISTINCT SAFE_CAST(masthead_code AS STRING)) AS unique_masthead_codes,
  MIN(SAFE_CAST(fy_year AS INT64)) AS min_fiscal_year,
  MAX(SAFE_CAST(fy_year AS INT64)) AS max_fiscal_year,
  MIN(SAFE_CAST(fy_week_of_year AS INT64)) AS min_fiscal_week_of_year,
  MAX(SAFE_CAST(fy_week_of_year AS INT64)) AS max_fiscal_week_of_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","SELECT
  CASE
    WHEN SUM(SAFE_CAST(ClosingBase AS BIGNUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS closing_base_positive_check,
  CASE
    WHEN MAX(SAFE_CAST(fy_year AS INT64)) >= 2024 THEN 'PASS'
    ELSE 'FAIL'
  END AS recent_data_check,
  CASE
    WHEN COUNT(*) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS data_exists_check
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.fy_year,
    t0.fy_week_of_year,
    t0.delivery_medium_type,
    t0.gl_publication_code,
    t0.masthead_code,
    t0.subscriber_has_email_flag,
    t0.ClosingBase,
    t0.OpeningBase,
    t0.EarnedAmount,
    t0.NFEarnedAmount,
    t0.table_union_source,
    t0.classification_level_1_description,
    t0.classification_level_2_description
  FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
),
intermediate_flags AS (
  SELECT
    *,
    (SAFE_CAST(classification_level_1_description AS STRING) = 'Standard Paid') AS is_standard_paid,
    (SAFE_CAST(delivery_medium_type AS STRING) = 'Bundle') AS is_bundle,
    (SAFE_CAST(subscriber_has_email_flag AS STRING) = 'subsnapfact') AS is_subsnapfact_email_flag
  FROM base_data
),
intermediate_masthead AS (
  SELECT
    *,
    CASE
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '100' OR SAFE_CAST(gl_publication_code AS STRING) = '101' OR SAFE_CAST(masthead_code AS STRING) = 'TA') THEN 'The Australian'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '401' OR SAFE_CAST(gl_publication_code AS STRING) = '402' OR SAFE_CAST(gl_publication_code AS STRING) = '17' OR SAFE_CAST(masthead_code AS STRING) = 'CM') THEN 'Courier Mail'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '110' OR SAFE_CAST(gl_publication_code AS STRING) = '111' OR SAFE_CAST(gl_publication_code AS STRING) = '116' OR SAFE_CAST(masthead_code AS STRING) = 'DT') THEN 'Daily Telegraph'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '301' OR SAFE_CAST(gl_publication_code AS STRING) = '302' OR SAFE_CAST(gl_publication_code AS STRING) = '303' OR SAFE_CAST(masthead_code AS STRING) = 'HS') THEN 'Herald Sun'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '500' OR SAFE_CAST(gl_publication_code AS STRING) = '501' OR SAFE_CAST(gl_publication_code AS STRING) = '560' OR SAFE_CAST(masthead_code AS STRING) = 'AA') THEN 'The Advertiser'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '450' OR SAFE_CAST(gl_publication_code AS STRING) = '460' OR SAFE_CAST(masthead_code AS STRING) = 'CP') THEN 'Cairns Post'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '350' OR SAFE_CAST(gl_publication_code AS STRING) = '351' OR SAFE_CAST(masthead_code AS STRING) = 'GA') THEN 'Geelong'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '670' OR SAFE_CAST(gl_publication_code AS STRING) = '685' OR SAFE_CAST(masthead_code AS STRING) = 'GC') THEN 'Gold Coast'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '961' OR SAFE_CAST(gl_publication_code AS STRING) = '962' OR SAFE_CAST(gl_publication_code AS STRING) = '963' OR SAFE_CAST(masthead_code AS STRING) = 'NT') THEN 'NT News'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '850' OR SAFE_CAST(gl_publication_code AS STRING) = '851' OR SAFE_CAST(gl_publication_code AS STRING) = '852' OR SAFE_CAST(masthead_code AS STRING) = 'TM') THEN 'The Mercury'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '5053' OR SAFE_CAST(gl_publication_code AS STRING) = '5253' OR SAFE_CAST(masthead_code AS STRING) = 'TC') THEN 'Toowoomba'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '475' OR SAFE_CAST(gl_publication_code AS STRING) = '490' OR SAFE_CAST(masthead_code AS STRING) = 'TB') THEN 'Townsville'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '305' OR SAFE_CAST(gl_publication_code AS STRING) = '307' OR SAFE_CAST(masthead_code AS STRING) = 'WT') THEN 'Weekly Times'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9001' OR SAFE_CAST(masthead_code AS STRING) = 'CS') THEN 'Code'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '8821' OR SAFE_CAST(gl_publication_code AS STRING) = 'Punters.com.au' OR SAFE_CAST(masthead_code AS STRING) = 'PU') THEN 'Punters'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '8822' OR SAFE_CAST(gl_publication_code AS STRING) = 'Racenet' OR SAFE_CAST(masthead_code AS STRING) = 'RN') THEN 'Racenet'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9653' OR SAFE_CAST(masthead_code AS STRING) = 'SC') THEN 'Supercoach Plus'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9600' OR SAFE_CAST(masthead_code AS STRING) = 'TS') THEN 'Taste Online'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'AP') THEN 'Apple Podcast: Crime X'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(classification_level_2_description AS STRING) = 'The Oz') THEN 'The Oz'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9000' OR SAFE_CAST(masthead_code AS STRING) = 'NW') THEN 'news.com.au'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '121') THEN 'Others'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9002' OR SAFE_CAST(masthead_code AS STRING) = 'BG') THEN 'Brain Games'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9504' OR SAFE_CAST(gl_publication_code AS STRING) = '9514' OR SAFE_CAST(gl_publication_code AS STRING) = '9556' OR SAFE_CAST(gl_publication_code AS STRING) = '9558' OR SAFE_CAST(gl_publication_code AS STRING) = '9560' OR SAFE_CAST(gl_publication_code AS STRING) = '9603' OR SAFE_CAST(gl_publication_code AS STRING) = '9623') THEN 'Others'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9644') THEN 'Suddenly'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = '9903') THEN 'News Corporate'
      WHEN (SAFE_CAST(gl_publication_code AS STRING) = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
      ELSE NULL
    END AS masthead_name_raw
  FROM intermediate_flags
),
categorized_data AS (
  SELECT
    *,
    CASE
      WHEN (masthead_name_raw = 'The Australian') THEN 'The Australian'
      WHEN (masthead_name_raw IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
      WHEN (masthead_name_raw IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville')) THEN 'Regionals'
      WHEN (masthead_name_raw = 'Weekly Times') THEN 'Others'
      WHEN (masthead_name_raw IN ('Supercoach Plus', 'Code', 'Taste Online', 'Apple Podcast: Crime X', 'Racenet', 'Punters', 'Others')) THEN 'Deep Niche Publications'
      ELSE 'Discontinued'
    END AS publication_group,
    CASE
      WHEN (SAFE_CAST(delivery_medium_type AS STRING) = 'Print') THEN 'Print Recognition'
      WHEN (is_subsnapfact_email_flag OR (is_standard_paid AND is_bundle)) THEN 'Print Recognition'
      ELSE 'Digital Recognition'
    END AS recognition_type
  FROM intermediate_masthead
)
SELECT
  publication_group,
  recognition_type,
  COUNT(*) AS record_count
FROM categorized_data
GROUP BY
  publication_group,
  recognition_type
ORDER BY
  record_count DESC
LIMIT 10;",33,37641205-ec3e-4184-a5dd-f5ca79248335
"SELECT
  SAFE_CAST(t0.Rev_Type AS STRING) AS Revenue_Type,
  SAFE_CAST(t0.Team AS STRING) AS Team,
  SAFE_CAST(t0.advertiser_group AS STRING) AS Advertiser_Group,
  SUM(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = 0 THEN SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC) ELSE 0 END) AS Current_FY_Gross_Revenue,
  SUM(CASE WHEN SAFE_CAST(t0.relative_fy_year_offset AS INT64) = -1 THEN SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC) ELSE 0 END) AS Previous_FY_Gross_Revenue,
  SUM(SAFE_CAST(t0.Target AS BIGNUMERIC)) AS Total_Target
FROM
  (
    WITH
      temp AS (
        SELECT
          *,
          CASE
            WHEN unified_publication_name LIKE 'TUBI%' THEN 'TUBI'
            WHEN `LEFT`(upper(fin_adtype_name), 5) = 'VIDEO' THEN 'VIDEO'
            ELSE 'OTHER'
          END AS Rev_Type
        FROM
          `ncau-data-newsquery-prd`.asl_finance_derived.details_dashboard
      ),
      team_list AS (
        SELECT DISTINCT
          Team
        FROM
          `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt
        WHERE
          Type IS NOT null
      ),
      main AS (
        SELECT
          temp.*,
          tgt_1.Team,
          null AS Target,
          'Data' AS source
        FROM
          temp
          LEFT JOIN
          `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt AS tgt_1
          ON temp.portfolio_group_name_sync = tgt_1.Portfolio_Group AND temp.financial_month = CAST(tgt_1.Month_Num AS STRING)
        UNION ALL
        SELECT
          null AS source_system_code,
          null AS sales_segment_gm_name_sync,
          null AS current_portfolio_group_owner_full_name_sync,
          null AS current_portfolio_conformed_owner_full_name_sync,
          null AS current_portfolio_group_owner_full,
          null AS current_portfolio_conformed_owner_full,
          null AS publisher_vertical,
          null AS data_load_datetime,
          null AS relative_day_offset,
          null AS sales_segment_gm_name,
          null AS nca_industry_pillar,
          null AS revenue_type,
          null AS revenue_group_subtype,
          null AS fin_adtype_name,
          null AS cost_model_type,
          null AS xtend_flag,
          null AS adsize_name,
          null AS pos_page_achieved,
          null AS account_number,
          null AS advertiser_name,
          null AS advertiser_group,
          null AS advertiser_parent,
          null AS crm_account_number,
          null AS agency_name,
          null AS agency_group,
          null AS agency_parent,
          null AS booking_number,
          null AS booking_name,
          null AS booking_line_number,
          null AS booking_line_created_date,
          null AS insertion_name,
          null AS sort_caption,
          null AS classification_name,
          null AS reporting_date,
          null AS portfolio_group_name_current,
          null AS portfolio_conformed_name_current,
          null AS portfolio_parent_group_name_current,
          null AS portfolio_group_name_sync,
          null AS portfolio_conformed_name_sync,
          null AS portfolio_parent_group_name_sync,
          null AS unified_publication_name,
          null AS employee_name,
          null AS financial_year,
          CASE Month_Num
            WHEN 1 THEN '1'
            WHEN 2 THEN '1'
            WHEN 3 THEN '1'
            WHEN 4 THEN '2'
            WHEN 5 THEN '2'
            WHEN 6 THEN '2'
            WHEN 7 THEN '3'
            WHEN 8 THEN '3'
            WHEN 9 THEN '3'
            WHEN 10 THEN '4'
            WHEN 11 THEN '4'
            WHEN 12 THEN '4'
          END AS financial_quarter,
          null AS financial_week,
          CAST(tgt_2.Month_Num AS string) AS financial_month,
          CASE Month_Num
            WHEN 1 THEN 'Jul'
            WHEN 2 THEN 'Aug'
            WHEN 3 THEN 'Sep'
            WHEN 4 THEN 'Oct'
            WHEN 5 THEN 'Nov'
            WHEN 6 THEN 'Dec'
            WHEN 7 THEN 'Jan'
            WHEN 8 THEN 'Feb'
            WHEN 9 THEN 'Mar'
            WHEN 10 THEN 'Apr'
            WHEN 11 THEN 'May'
            WHEN 12 THEN 'Jun'
          END AS financial_short_month,
          null AS relative_fy_year_offset,
          null AS relative_fy_month_offset,
          null AS relative_cal_year_offset,
          null AS calendar_year,
          null AS calendar_week,
          null AS calendar_month,
          null AS calendar_month_short_name,
          null AS dow,
          null AS revenue_group_level_2_name,
          null AS publication_date,
          null AS revenue_category,
          null AS publishing_division_group,
          null AS adpoint_account_number,
          null AS FPE,
          null AS gross_revenue_amount,
          null AS gross_revenue_ex_adj_amount,
          null AS adjustment_amount,
          null AS col_cms_finance,
          null AS system_price_amount,
          null AS gross_less_agency_commission_amount,
          null AS dw_asl_load_timestamp,
          tgt_2.Type AS Rev_Type,
          tgt_2.Team AS Team,
          tgt_2.Target AS Target,
          'Rep Target' AS source
        FROM
          `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt AS tgt_2
        WHERE
          Type IS NOT null
      )
    SELECT
      main.*,
      CASE
        WHEN team_list.Team IS NOT null THEN 'Target Only'
        ELSE 'Non-Target Team'
      END AS Target_team_flag
    FROM
      main
      LEFT JOIN
      team_list
      ON main.Team = team_list.Team
  ) AS t0
WHERE
  SAFE_CAST(t0.Rev_Type AS STRING) IN ('VIDEO', 'TUBI')
GROUP BY
  1, 2, 3
LIMIT 10;","SELECT
  COUNT(1) AS total_records,
  COUNT(DISTINCT SAFE_CAST(Team AS STRING)) AS unique_teams,
  COUNT(DISTINCT SAFE_CAST(Rev_Type AS STRING)) AS unique_revenue_types,
  COUNT(DISTINCT SAFE_CAST(advertiser_group AS STRING)) AS unique_advertiser_groups,
  MIN(SAFE_CAST(financial_year AS STRING)) AS min_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) AS max_financial_year,
  MIN(SAFE_CAST(financial_month AS STRING)) AS min_financial_month,
  MAX(SAFE_CAST(financial_month AS STRING)) AS max_financial_month
FROM
  (
    WITH
      temp AS (
        SELECT
          *,
          CASE
            WHEN unified_publication_name LIKE 'TUBI%' THEN 'TUBI'
            WHEN `LEFT`(upper(fin_adtype_name), 5) = 'VIDEO' THEN 'VIDEO'
            ELSE 'OTHER'
          END AS Rev_Type
        FROM
          `ncau-data-newsquery-prd`.asl_finance_derived.details_dashboard
      ),
      team_list AS (
        SELECT DISTINCT
          Team
        FROM
          `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt
        WHERE
          Type IS NOT null
      ),
      main AS (
        SELECT
          temp.*,
          tgt_1.Team,
          null AS Target,
          'Data' AS source
        FROM
          temp
          LEFT JOIN
          `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt AS tgt_1
          ON temp.portfolio_group_name_sync = tgt_1.Portfolio_Group AND temp.financial_month = CAST(tgt_1.Month_Num AS STRING)
        UNION ALL
        SELECT
          null AS source_system_code,
          null AS sales_segment_gm_name_sync,
          null AS current_portfolio_group_owner_full_name_sync,
          null AS current_portfolio_conformed_owner_full_name_sync,
          null AS current_portfolio_group_owner_full,
          null AS current_portfolio_conformed_owner_full,
          null AS publisher_vertical,
          null AS data_load_datetime,
          null AS relative_day_offset,
          null AS sales_segment_gm_name,
          null AS nca_industry_pillar,
          null AS revenue_type,
          null AS revenue_group_subtype,
          null AS fin_adtype_name,
          null AS cost_model_type,
          null AS xtend_flag,
          null AS adsize_name,
          null AS pos_page_achieved,
          null AS account_number,
          null AS advertiser_name,
          null AS advertiser_group,
          null AS advertiser_parent,
          null AS crm_account_number,
          null AS agency_name,
          null AS agency_group,
          null AS agency_parent,
          null AS booking_number,
          null AS booking_name,
          null AS booking_line_number,
          null AS booking_line_created_date,
          null AS insertion_name,
          null AS sort_caption,
          null AS classification_name,
          null AS reporting_date,
          null AS portfolio_group_name_current,
          null AS portfolio_conformed_name_current,
          null AS portfolio_parent_group_name_current,
          null AS portfolio_group_name_sync,
          null AS portfolio_conformed_name_sync,
          null AS portfolio_parent_group_name_sync,
          null AS unified_publication_name,
          null AS employee_name,
          null AS financial_year,
          CASE Month_Num
            WHEN 1 THEN '1'
            WHEN 2 THEN '1'
            WHEN 3 THEN '1'
            WHEN 4 THEN '2'
            WHEN 5 THEN '2'
            WHEN 6 THEN '2'
            WHEN 7 THEN '3'
            WHEN 8 THEN '3'
            WHEN 9 THEN '3'
            WHEN 10 THEN '4'
            WHEN 11 THEN '4'
            WHEN 12 THEN '4'
          END AS financial_quarter,
          null AS financial_week,
          CAST(tgt_2.Month_Num AS string) AS financial_month,
          CASE Month_Num
            WHEN 1 THEN 'Jul'
            WHEN 2 THEN 'Aug'
            WHEN 3 THEN 'Sep'
            WHEN 4 THEN 'Oct'
            WHEN 5 THEN 'Nov'
            WHEN 6 THEN 'Dec'
            WHEN 7 THEN 'Jan'
            WHEN 8 THEN 'Feb'
            WHEN 9 THEN 'Mar'
            WHEN 10 THEN 'Apr'
            WHEN 11 THEN 'May'
            WHEN 12 THEN 'Jun'
          END AS financial_short_month,
          null AS relative_fy_year_offset,
          null AS relative_fy_month_offset,
          null AS relative_cal_year_offset,
          null AS calendar_year,
          null AS calendar_week,
          null AS calendar_month,
          null AS calendar_month_short_name,
          null AS dow,
          null AS revenue_group_level_2_name,
          null AS publication_date,
          null AS revenue_category,
          null AS publishing_division_group,
          null AS adpoint_account_number,
          null AS FPE,
          null AS gross_revenue_amount,
          null AS gross_revenue_ex_adj_amount,
          null AS adjustment_amount,
          null AS col_cms_finance,
          null AS system_price_amount,
          null AS gross_less_agency_commission_amount,
          null AS dw_asl_load_timestamp,
          tgt_2.Type AS Rev_Type,
          tgt_2.Team AS Team,
          tgt_2.Target AS Target,
          'Rep Target' AS source
        FROM
          `ncau-data-newsquery-prd`.sbx_dcp.Progo_Streaming_Tgt AS tgt_2
        WHERE
          Type IS NOT null
      )
    SELECT
      main.*,
      CASE
        WHEN team_list.Team IS NOT null THEN 'Target Only'
        ELSE 'Non-Target Team'
      END AS Target_team_flag
    FROM
      main
      LEFT JOIN
      team_list
      ON main.Team = team_list.Team
  ) AS t0
LIMIT 1;","SELECT
  CASE
    WHEN COUNT(1) > 0 AND SUM(CASE WHEN SAFE_CAST(gross_revenue_amount AS BIGNUMERIC) > 0 THEN 1 ELSE 0 END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS data_integrity_check,
  CASE
    WHEN MAX(SAFE_CAST(financial_year AS STRING)) IS NOT NULL AND SAFE_CAST(MAX(SAFE_CAST(financial_year AS STRING)) AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.details_dashboard
LIMIT 1;","SELECT
  SAFE_CAST(Rev_Type AS STRING) AS Revenue_Type,
  COUNT(1) AS record_count
FROM
  (
    SELECT
      *,
      CASE
        WHEN unified_publication_name LIKE 'TUBI%' THEN 'TUBI'
        WHEN `LEFT`(upper(fin_adtype_name), 5) = 'VIDEO' THEN 'VIDEO'
        ELSE 'OTHER'
      END AS Rev_Type
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.details_dashboard
  )
GROUP BY
  1
ORDER BY
  record_count DESC
LIMIT 5;",34,9c8f39dc-bf5f-4292-bfe3-c6e1ec71c588
"SELECT t0.financial_year, SAFE_CAST(t0.financial_month AS FLOAT64) AS financial_month, t0.unified_publication_name, t0.fin_adtype_name, SUM(t0.gross_revenue_amount) AS total_gross_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 WHERE SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025') AND t0.revenue_type = 'DIGITAL' GROUP BY t0.financial_year, SAFE_CAST(t0.financial_month AS FLOAT64), t0.unified_publication_name, t0.fin_adtype_name ORDER BY t0.financial_year DESC, SAFE_CAST(t0.financial_month AS FLOAT64) DESC LIMIT 10;","SELECT COUNT(*) AS total_records, COUNT(DISTINCT t0.financial_year) AS unique_financial_years, COUNT(DISTINCT t0.unified_publication_name) AS unique_publications, COUNT(DISTINCT t0.booking_number) AS unique_bookings, MIN(t0.data_load_datetime) AS min_data_load_datetime, MAX(t0.data_load_datetime) AS max_data_load_datetime FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 LIMIT 1;","SELECT CASE WHEN SUM(t0.gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_check, CASE WHEN MAX(t0.data_load_datetime) >= CURRENT_DATE('Australia/Sydney') - INTERVAL 7 DAY THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 LIMIT 1;","SELECT t0.revenue_type, COUNT(*) AS record_count, SUM(t0.gross_revenue_amount) AS total_revenue FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0 GROUP BY t0.revenue_type ORDER BY record_count DESC LIMIT 5;",35,4114bd43-f752-4628-9b6c-1941b3c0d962
"SELECT
  SAFE_CAST(advertiser_name AS STRING) AS advertiser_name,
  SAFE_CAST(revenue_type AS STRING) AS revenue_type,
  SAFE_CAST(sales_segment_gm_name AS STRING) AS sales_segment_gm_name,
  SUM(SAFE_CAST(gross_revenue_amount AS BIGNUMERIC)) AS total_gross_revenue,
  SUM(CASE WHEN SAFE_CAST(revenue_type AS STRING) = 'Digital' THEN SAFE_CAST(gross_revenue_amount AS BIGNUMERIC) ELSE 0 END) AS total_digital_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  lower(SAFE_CAST(`left`(advertiser_name, 3) AS STRING)) = 'ctr'
GROUP BY
  1, 2, 3
ORDER BY
  total_gross_revenue DESC
LIMIT 10;","SELECT
  COUNT(1) AS total_records,
  COUNT(DISTINCT SAFE_CAST(adpoint_account_number AS STRING)) AS unique_adpoint_accounts,
  COUNT(DISTINCT SAFE_CAST(advertiser_name AS STRING)) AS unique_advertisers,
  MIN(SAFE_CAST(financial_year AS INT64)) AS min_financial_year,
  MAX(SAFE_CAST(financial_year AS INT64)) AS max_financial_year,
  MIN(SAFE_CAST(calendar_year_month AS STRING)) AS min_calendar_year_month,
  MAX(SAFE_CAST(calendar_year_month AS STRING)) AS max_calendar_year_month
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
LIMIT 1;","SELECT
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS BIGNUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_check,
  CASE WHEN MAX(SAFE_CAST(calendar_year_month AS STRING)) >= FORMAT_DATE('%Y-%m', DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) THEN 'PASS' ELSE 'FAIL' END AS freshness_check
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  lower(SAFE_CAST(`left`(advertiser_name, 3) AS STRING)) = 'ctr'
LIMIT 1;","SELECT
  SAFE_CAST(status_asl AS STRING) AS status_asl_value,
  COUNT(DISTINCT SAFE_CAST(adpoint_account_number AS STRING)) AS unique_account_count
FROM (
  SELECT
    adpoint_account_number,
    CASE
      WHEN adpoint_account_number IN (
        SELECT DISTINCT NMBS_T_Number FROM `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data` WHERE Status = 'Closed'
      ) THEN 'Closed'
      ELSE 'Open'
    END AS status_asl
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
  WHERE
    lower(SAFE_CAST(`left`(advertiser_name, 3) AS STRING)) = 'ctr'
)
GROUP BY
  1
LIMIT 10;",36,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"SELECT
  SAFE_CAST(t0.masthead AS STRING) AS masthead,
  SAFE_CAST(t0.rate_plan_code AS STRING) AS rate_plan_code,
  SUM(SAFE_CAST(t0.should_be_allocated_to_revenue_gst_exclusive AS BIGNUMERIC)) AS total_unearned_revenue_gst_exclusive,
  COUNT(1) AS record_count
FROM (
  WITH
    core AS (
      SELECT
        *,
        greatest(allocation_start_date, PARSE_DATE(""%Y%m%d"", '20250210')) AS week_prorata_allocation_start,
        least(allocation_end_date, PARSE_DATE(""%Y%m%d"", '20250216')) AS week_prorata_allocation_end
      FROM
        `ncau-data-newsquery-sit.qvr_consumer.fin_unearned_revenue_recurring`
      WHERE
        PARSE_DATE(""%Y%m%d"", '20250210') BETWEEN allocation_start_date AND allocation_end_date
        OR (allocation_start_date BETWEEN PARSE_DATE(""%Y%m%d"", '20250210') AND PARSE_DATE(""%Y%m%d"", '20250216'))
        OR (allocation_end_date BETWEEN PARSE_DATE(""%Y%m%d"", '20250210') AND PARSE_DATE(""%Y%m%d"", '20250216'))
    ),
    core_2 AS (
      SELECT
        * EXCEPT (should_be_allocated_to_revenue_gst_inclusive, should_be_allocated_to_revenue, fy_week_of_year, fy_year, allocation_end_date_ext),
        (date_diff(week_prorata_allocation_end, week_prorata_allocation_start, day) + 1) / installment_allocation_days * payment_base_amount AS should_be_allocated_to_revenue_gst_inclusive,
        ((date_diff(week_prorata_allocation_end, week_prorata_allocation_start, day) + 1) / installment_allocation_days * payment_base_amount) / 1.1 AS should_be_allocated_to_revenue_gst_exclusive
      FROM
        core
    )
  SELECT
    *
  FROM
    core_2
) AS t0
GROUP BY
  1, 2
ORDER BY
  total_unearned_revenue_gst_exclusive DESC
LIMIT 10;","SELECT
  COUNT(1) AS total_records,
  COUNT(DISTINCT SAFE_CAST(subscription_id_src AS STRING)) AS unique_subscriptions,
  COUNT(DISTINCT SAFE_CAST(subscriber_id_src AS STRING)) AS unique_subscribers,
  MIN(allocation_start_date) AS min_allocation_start_date,
  MAX(allocation_end_date) AS max_allocation_end_date
FROM
  `ncau-data-newsquery-sit.qvr_consumer.fin_unearned_revenue_recurring`
LIMIT 1;","SELECT
  CASE
    WHEN SUM(SAFE_CAST(((date_diff(least(allocation_end_date, CURRENT_DATE()), greatest(allocation_start_date, DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)), day) + 1) / installment_allocation_days * payment_base_amount) / 1.1 AS BIGNUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS unearned_revenue_check,
  CASE
    WHEN MAX(allocation_end_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_check
FROM
  `ncau-data-newsquery-sit.qvr_consumer.fin_unearned_revenue_recurring`
LIMIT 1;","SELECT
  SAFE_CAST(t0.rate_plan_code AS STRING) AS rate_plan_code,
  AVG(SAFE_CAST(t0.should_be_allocated_to_revenue_gst_exclusive AS BIGNUMERIC)) AS avg_unearned_revenue_gst_exclusive
FROM (
  WITH
    core AS (
      SELECT
        *,
        greatest(allocation_start_date, PARSE_DATE(""%Y%m%d"", '20250210')) AS week_prorata_allocation_start,
        least(allocation_end_date, PARSE_DATE(""%Y%m%d"", '20250216')) AS week_prorata_allocation_end
      FROM
        `ncau-data-newsquery-sit.qvr_consumer.fin_unearned_revenue_recurring`
      WHERE
        PARSE_DATE(""%Y%m%d"", '20250210') BETWEEN allocation_start_date AND allocation_end_date
        OR (allocation_start_date BETWEEN PARSE_DATE(""%Y%m%d"", '20250210') AND PARSE_DATE(""%Y%m%d"", '20250216'))
        OR (allocation_end_date BETWEEN PARSE_DATE(""%Y%m%d"", '20250210') AND PARSE_DATE(""%Y%m%d"", '20250216'))
    ),
    core_2 AS (
      SELECT
        * EXCEPT (should_be_allocated_to_revenue_gst_inclusive, should_be_allocated_to_revenue, fy_week_of_year, fy_year, allocation_end_date_ext),
        (date_diff(week_prorata_allocation_end, week_prorata_allocation_start, day) + 1) / installment_allocation_days * payment_base_amount AS should_be_allocated_to_revenue_gst_inclusive,
        ((date_diff(week_prorata_allocation_end, week_prorata_allocation_start, day) + 1) / installment_allocation_days * payment_base_amount) / 1.1 AS should_be_allocated_to_revenue_gst_exclusive
      FROM
        core
    )
  SELECT
    *
  FROM
    core_2
) AS t0
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 5;",37,be4575e4-3850-46e2-9ba9-73a4393c5d2a
"SELECT
    fy_week_of_year,
    fy_year,
    SUM(Total_Revenue) AS total_revenue,
    SUM(Total_Weekly_Sales) AS total_weekly_sales,
    SUM(Total_Closing_Base) AS total_closing_base
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_deepniche_scorecard`
WHERE
    masthead = 'SC' -- Filter derived from dashboard control 'SuperCoach Plus'
GROUP BY
    fy_week_of_year,
    fy_year
ORDER BY
    fy_year DESC, fy_week_of_year DESC
LIMIT 10;","SELECT
    COUNT(*) AS total_rows,
    COUNT(DISTINCT SAFE_CAST(fy_year AS STRING)) AS unique_years,
    COUNT(DISTINCT masthead) AS unique_mastheads,
    MIN(fy_year) AS min_fy_year,
    MAX(fy_year) AS max_fy_year
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_deepniche_scorecard`
LIMIT 1;","SELECT
    CASE
        WHEN SUM(Total_Revenue) > 0 AND MAX(fy_year) >= 2024 THEN 'PASS'
        ELSE 'FAIL'
    END AS dashboard_data_freshness_and_volume_check
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_deepniche_scorecard`
WHERE
    fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_deepniche_scorecard` LIMIT 1)
LIMIT 1;","SELECT
    CASE
        WHEN t0.masthead = 'SC' THEN 'SuperCoach Plus'
        WHEN t0.masthead = 'CS' THEN 'Code Sports'
        WHEN t0.masthead = 'AP' THEN 'Apple Podcast: Crime X'
        WHEN t0.masthead = 'TS' THEN 'Taste Online'
        WHEN t0.masthead = 'PU' THEN 'Punters'
        WHEN t0.masthead = 'RN' THEN 'Racenet'
        WHEN t0.masthead = 'KTVSport' THEN 'KTVSport'
        ELSE 'Other/Unmapped'
    END AS mapped_masthead,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_deepniche_scorecard` AS t0
GROUP BY
    mapped_masthead
ORDER BY
    record_count DESC
LIMIT 10;",38,61cc5171-703d-44b5-acd7-e9db7cf81778
"SELECT
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    t0.revenue_type,
    t0.nca_industry_pillar,
    SUM(t0.gross_revenue_amount) AS total_gross_revenue
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')
GROUP BY
    financial_year,
    revenue_type,
    nca_industry_pillar
ORDER BY
    financial_year DESC, total_gross_revenue DESC
LIMIT 12","SELECT
    COUNT(*) AS total_records,
    COUNT(DISTINCT t0.booking_number) AS unique_booking_numbers,
    COUNT(DISTINCT SAFE_CAST(t0.financial_year AS STRING)) AS unique_financial_years,
    MIN(t0.data_load_datetime) AS min_data_load_datetime,
    MAX(t0.data_load_datetime) AS max_data_load_datetime
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
LIMIT 1","SELECT
    CASE
        WHEN SUM(t0.gross_revenue_amount) > 0 THEN 'PASS'
        ELSE 'FAIL'
    END AS gross_revenue_check,
    CASE
        WHEN MAX(t0.data_load_datetime) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY) THEN 'PASS'
        ELSE 'FAIL'
    END AS data_freshness_check
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) = '2025'
LIMIT 1","SELECT
    t0.revenue_type,
    COUNT(*) AS record_count,
    SUM(t0.gross_revenue_amount) AS total_revenue_by_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2024', '2025')
GROUP BY
    t0.revenue_type
ORDER BY
    record_count DESC
LIMIT 12",39,f502f44a-e283-405f-ab8f-6a641edb4194
"SELECT
  t0.fiscal_week_id,
  t0.category_name,
  SUM(t0.add_volume) AS total_add_volume,
  SUM(t0.earned_amount) AS total_earned_amount,
  SUM(t0.closing_base) AS total_closing_base
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
GROUP BY
  t0.fiscal_week_id,
  t0.category_name
ORDER BY
  t0.fiscal_week_id DESC
LIMIT 10;","SELECT
  COUNT(1) AS total_rows,
  COUNT(DISTINCT SAFE_CAST(t0.fiscal_week_id AS STRING)) AS unique_fiscal_weeks,
  MIN(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS min_fiscal_week,
  MAX(SAFE_CAST(t0.fiscal_week_id AS STRING)) AS max_fiscal_week
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
LIMIT 1;","SELECT
  CASE WHEN SUM(t0.earned_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS earned_amount_positive_check,
  CASE WHEN MAX(SAFE_CAST(t0.fiscal_week_id AS STRING)) >= FORMAT_DATE('%Y%W', CURRENT_DATE()) - 2 THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
LIMIT 1;","SELECT
  t0.business_unit_status,
  COUNT(1) AS status_count
FROM `ncau-data-newsquery-prd.dap_tm1.gl_business_unit_dim` AS t0
GROUP BY
  t0.business_unit_status
ORDER BY
  status_count DESC
LIMIT 5;",40,23c8b213-a9f0-4158-b8fa-bff14425abb5
"WITH base_subquery_cte AS (
  SELECT
    t0.payment_gateway AS clmn0_,
    t0.subscriber_id_src AS clmn1_,
    t0.subscription_classification_type AS clmn2_
  FROM (
    WITH driver AS (
      SELECT
        subscriber_id_src,
        subscription_id_src,
        max(tran_date) AS latest_tran_date
      FROM
        `ncau-data-newsquery-sit.qvr_consumer.fp_all_trans`
      WHERE
        tran_date BETWEEN `current_date`() - 60 AND `current_date`()
      GROUP BY 1, 2
    )
    SELECT
      b.*
    FROM
      driver AS a
      JOIN
      `ncau-data-newsquery-sit.qvr_consumer.fp_all_trans` AS b
      ON a.subscriber_id_src = b.subscriber_id_src AND a.subscription_id_src = b.subscription_id_src AND a.latest_tran_date = b.tran_date
    WHERE
      b.latest_attempt_flag = 'Y'
  ) AS t0
)
SELECT
  SAFE_CAST(clmn0_ AS STRING) AS payment_gateway,
  SAFE_CAST(clmn2_ AS STRING) AS subscription_type,
  COUNT(DISTINCT clmn1_) AS unique_subscribers_latest_attempt
FROM
  base_subquery_cte
GROUP BY
  1, 2
ORDER BY
  unique_subscribers_latest_attempt DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(subscriber_id_src AS STRING)) AS unique_subscribers,
  COUNT(DISTINCT SAFE_CAST(subscription_id_src AS STRING)) AS unique_subscriptions,
  MIN(SAFE_CAST(tran_date AS DATE)) AS min_tran_date,
  MAX(SAFE_CAST(tran_date AS DATE)) AS max_tran_date
FROM
  `ncau-data-newsquery-sit.qvr_consumer.fp_all_trans`
LIMIT 1;","WITH base_subquery_cte AS (
  SELECT
    t0.payment_gateway AS clmn0_,
    t0.subscriber_id_src AS clmn1_,
    t0.subscription_classification_type AS clmn2_,
    t0.tran_date AS clmn3_ -- Added tran_date for freshness check
  FROM (
    WITH driver AS (
      SELECT
        subscriber_id_src,
        subscription_id_src,
        max(tran_date) AS latest_tran_date
      FROM
        `ncau-data-newsquery-sit.qvr_consumer.fp_all_trans`
      WHERE
        tran_date BETWEEN `current_date`() - 60 AND `current_date`()
      GROUP BY 1, 2
    )
    SELECT
      b.*
    FROM
      driver AS a
      JOIN
      `ncau-data-newsquery-sit.qvr_consumer.fp_all_trans` AS b
      ON a.subscriber_id_src = b.subscriber_id_src AND a.subscription_id_src = b.subscription_id_src AND a.latest_tran_date = b.tran_date
    WHERE
      b.latest_attempt_flag = 'Y'
  ) AS t0
)
SELECT
  CASE WHEN COUNT(DISTINCT clmn1_) > 0 THEN 'PASS' ELSE 'FAIL' END AS check_metric_gt_zero,
  CASE WHEN MAX(SAFE_CAST(clmn3_ AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 DAY) THEN 'PASS' ELSE 'FAIL' END AS check_data_freshness
FROM
  base_subquery_cte
WHERE
  clmn2_ IN ('Standard Paid')
LIMIT 1;","SELECT
  SAFE_CAST(subscription_classification_type AS STRING) AS subscription_type,
  COUNT(DISTINCT SAFE_CAST(subscriber_id_src AS STRING)) AS unique_subscribers_count
FROM
  `ncau-data-newsquery-sit.qvr_consumer.fp_all_trans`
WHERE
  latest_attempt_flag = 'Y'
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10;",41,da5dcd47-2e80-45e8-94b8-5b71d81182f5
"SELECT
  t0.os_level_7 AS publication_level,
  CASE WHEN (t0.os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels' WHEN (t0.os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations' WHEN (t0.os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies' WHEN (t0.os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions' WHEN (t0.os_level_10 IN ('Supermarkets')) THEN 'Supermarkets' ELSE 'Unspec Channel' END AS channel_group,
  SUM(t0.Actual_Amount) AS total_actual_amount,
  SUM(t0.volume) AS total_volume,
  SUM(t0.Budget_Amount) AS total_budget_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON t0.gl_publication_code = pub.publication_code
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON t0.fiscal_week_id = calendar.fy_year_week_number
  JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = calendar.fy_year_week_number AND control.period_name IN ('CP', 'PY')
WHERE
  upper(t0.os_level_6) = 'CIRCULATION'
  AND pub.l04_publication_code <> 'Free News & Lifestyle'
  AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
  AND t0.gl_hierarchy_code = 'FY2025'
GROUP BY
  1, 2
ORDER BY
  total_actual_amount DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(os_level_7 AS STRING)) AS unique_publication_levels,
  COUNT(DISTINCT SAFE_CAST(os_level_10 AS STRING)) AS unique_channels,
  MIN(SAFE_CAST(fiscal_week_id AS INT64)) AS min_fiscal_week_id,
  MAX(SAFE_CAST(fiscal_week_id AS INT64)) AS max_fiscal_week_id,
  MIN(SAFE_CAST(Actual_Amount AS BIGNUMERIC)) AS min_actual_amount,
  MAX(SAFE_CAST(Actual_Amount AS BIGNUMERIC)) AS max_actual_amount,
  MIN(SAFE_CAST(volume AS BIGNUMERIC)) AS min_volume,
  MAX(SAFE_CAST(volume AS BIGNUMERIC)) AS max_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
LIMIT 1;","SELECT
  CASE WHEN SUM(Actual_Amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_check,
  CASE WHEN MAX(calendar.fy_last_day_of_week) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_check
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
LIMIT 1;","SELECT
  CASE WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels' WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations' WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies' WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions' WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets' ELSE 'Unspec Channel' END AS derived_channel_group,
  COUNT(*) AS record_count,
  SUM(Actual_Amount) AS total_actual_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  upper(os_level_6) = 'CIRCULATION'
GROUP BY
  derived_channel_group
ORDER BY
  record_count DESC
LIMIT 5;",42,2104a3f5-9424-4087-a928-e67fecae789a
"SELECT
  SAFE_CAST(DATETIME_TRUNC(t0.dw_prstn_load_datetime, DAY) AS DATE) AS load_date,
  t0.fiscal_week_id,
  t0.scenario,
  t0.source_system_name,
  SUM(t0.records_count) AS total_records_count
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_os_data_load_check` AS t0
WHERE t0.dw_prstn_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY)
GROUP BY 1, 2, 3, 4
ORDER BY load_date DESC
LIMIT 10;","SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.dw_prstn_load_datetime) AS unique_load_datetimes,
  COUNT(DISTINCT t0.fiscal_week_id) AS unique_fiscal_weeks,
  COUNT(DISTINCT t0.scenario) AS unique_scenarios,
  COUNT(DISTINCT t0.source_system_name) AS unique_source_systems,
  MIN(t0.dw_prstn_load_datetime) AS min_load_datetime,
  MAX(t0.dw_prstn_load_datetime) AS max_load_datetime
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_os_data_load_check` AS t0
LIMIT 1;","SELECT
  CASE
    WHEN MAX(t0.dw_prstn_load_datetime) IS NULL THEN 'FAIL: No data found.'
    WHEN MAX(t0.dw_prstn_load_datetime) < DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 2 DAY) THEN 'FAIL: Data not fresh.'
    ELSE 'PASS: Data is recent.'
  END AS data_freshness_check,
  CASE
    WHEN (SELECT SUM(records_count) FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_os_data_load_check` WHERE dw_prstn_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 1 DAY)) > 0 THEN 'PASS: Records count > 0 for last day.'
    ELSE 'FAIL: Records count is 0 or NULL for last day.'
  END AS records_count_check
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_os_data_load_check` AS t0
LIMIT 1;","SELECT
  t0.source_system_name,
  SUM(t0.records_count) AS total_records_by_source,
  COUNT(DISTINCT t0.scenario) AS unique_scenarios_by_source
FROM `ncau-data-newsquery-prd.finance_monthend_checks.v_os_data_load_check` AS t0
WHERE t0.dw_prstn_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY)
GROUP BY t0.source_system_name
ORDER BY total_records_by_source DESC
LIMIT 5;",44,2dfb1b58-42eb-44cb-b550-66469ae7df3c
