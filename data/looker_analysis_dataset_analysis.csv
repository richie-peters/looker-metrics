primary_analysis_sql,structure_sql,validation_sql,business_rules_sql,sample_data_sql,hardcoded_issues,parameterisation_recommendations,response_id,dashboard_id
"-- This query consolidates all metrics and dimensions from the provided SQL samples.
-- It calculates current and prior FY gross revenues, and a conditional revenue metric, all in thousands.
-- Filters are applied for specific financial periods and sales segments as found in the original queries.

WITH RawData AS (
  SELECT
    t0.advertiser_parent,
    SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter_int,
    t0.financial_short_month,
    PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) AS booking_date_parsed,
    t0.fix_date_lod,
    t0.gross_revenue_amount,
    t0.relative_fy_year_offset,
    t0.revenue_group_subtype,
    t0.revenue_type,
    t0.sales_segment_l_2_name,
    t0.sales_segment_l_2_name_sync,
    UPPER(SAFE_CAST(t0.unified_publication_name AS STRING)) AS unified_publication_name_upper
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Apply a general date filter for performance, assuming recent data is most relevant for a sales dashboard
  -- Adjust this date range as needed for full historical context
  WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) -- Last 2 years
),

CalculatedDimensions AS (
  SELECT
    advertiser_parent,
    financial_quarter_int,
    financial_short_month,
    booking_date_parsed,
    fix_date_lod,
    gross_revenue_amount,
    relative_fy_year_offset,
    revenue_group_subtype,
    revenue_type,
    sales_segment_l_2_name,
    sales_segment_l_2_name_sync,
    unified_publication_name_upper,

    -- Derived Dimensions/Flags from Query 1 & 2
    SAFE_CAST(financial_quarter_int AS STRING) AS financial_quarter_str,
    CONCAT('Q', SAFE_CAST(financial_quarter_int AS STRING)) AS financial_quarter_q_prefix,
    CASE
      WHEN (financial_quarter_int >= 1 AND financial_quarter_int <= 2) THEN 'H1'
      WHEN (financial_quarter_int >= 3 AND financial_quarter_int <= 4) THEN 'H2'
      ELSE SAFE_CAST(financial_quarter_int AS STRING)
    END AS financial_half,
    CONCAT(financial_short_month, ' ', CONCAT('Q',SAFE_CAST(financial_quarter_int AS STRING)), ' ', (CASE WHEN (financial_quarter_int >= 1 AND financial_quarter_int <= 2) THEN 'H1' WHEN (financial_quarter_int >= 3 AND financial_quarter_int <= 4) THEN 'H2' ELSE SAFE_CAST(financial_quarter_int AS STRING) END)) AS financial_period_combined,

    (relative_fy_year_offset = 0) AS is_current_fy,
    (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_group_subtype,
    (revenue_type = 'DIGITAL') AS is_digital_revenue_type,
    (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment,
    (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
    (unified_publication_name_upper IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) AS is_unified_publication_ecommerce_outstream_etc,

    -- Hardcoded reference date (replace with parameter for production)
    DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS report_reference_date,
    DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY) AS prior_year_reference_date,

    CASE
      WHEN ( (revenue_type = 'DIGITAL') AND (revenue_group_subtype = 'DIGITAL') AND (sales_segment_l_2_name_sync = 'Digital Other') AND (advertiser_parent != 'DOUBLECLICK') )
      THEN fix_date_lod
      ELSE booking_date_parsed
    END AS effective_date_for_revenue

  FROM RawData
),

FinalMetrics AS (
  SELECT
    advertiser_parent,
    financial_period_combined,
    sales_segment_l_2_name,
    financial_quarter_int,
    financial_short_month,
    financial_half,
    unified_publication_name_upper,

    -- Metrics (Gross Revenue)
    CASE WHEN is_current_fy THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue_base,
    CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END AS prior_fy_gross_revenue_base,

    -- Conditional Gross Revenue (clmn33_ equivalent)
    CASE
      WHEN (is_current_fy AND is_unified_publication_ecommerce_outstream_etc) THEN gross_revenue_amount
      WHEN (is_current_fy AND SAFE_CAST(effective_date_for_revenue AS DATETIME) <= prior_year_reference_date) THEN gross_revenue_amount
      ELSE 0
    END AS conditional_gross_revenue_base

  FROM CalculatedDimensions
  -- Apply filters from original queries
  WHERE
    financial_period_combined IN ('Jul Q1 H1')
    AND sales_segment_l_2_name IN ('Consortium QLD')
)

SELECT
  advertiser_parent,
  financial_period_combined,
  sales_segment_l_2_name,
  financial_quarter_int,
  financial_short_month,
  financial_half,
  unified_publication_name_upper,
  SUM(current_fy_gross_revenue_base) AS total_current_fy_gross_revenue,
  SUM(SAFE_DIVIDE(current_fy_gross_revenue_base, 1000)) AS total_current_fy_gross_revenue_k,
  SUM(prior_fy_gross_revenue_base) AS total_prior_fy_gross_revenue,
  SUM(SAFE_DIVIDE(prior_fy_gross_revenue_base, 1000)) AS total_prior_fy_gross_revenue_k,
  SUM(conditional_gross_revenue_base) AS total_conditional_gross_revenue,
  SUM(SAFE_DIVIDE(conditional_gross_revenue_base, 1000)) AS total_conditional_gross_revenue_k
FROM FinalMetrics
GROUP BY
  advertiser_parent,
  financial_period_combined,
  sales_segment_l_2_name,
  financial_quarter_int,
  financial_short_month,
  financial_half,
  unified_publication_name_upper
ORDER BY
  advertiser_parent ASC
LIMIT 1000;
","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.advertiser_parent) as unique_advertiser_parents,
  COUNT(DISTINCT SAFE_CAST(t0.financial_quarter AS STRING)) as unique_financial_quarters,
  COUNT(DISTINCT t0.financial_short_month) as unique_financial_months,
  COUNT(DISTINCT t0.sales_segment_l_2_name) as unique_sales_segments,
  MIN(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date)) as earliest_booking_date,
  MAX(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date)) as latest_booking_date,
  MIN(t0.fix_date_lod) as earliest_fix_date_lod,
  MAX(t0.fix_date_lod) as latest_fix_date_lod,
  APPROX_COUNT_DISTINCT(CONCAT(t0.advertiser_parent, SAFE_CAST(t0.booking_line_created_date AS STRING), SAFE_CAST(t0.gross_revenue_amount AS STRING))) as approx_unique_transactions
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_positive_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_parent) > 0 THEN 'PASS' ELSE 'FAIL' END as distinct_advertisers_test,
  CASE WHEN MAX(PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test_booking_date,
  CASE WHEN COUNT(CASE WHEN t0.relative_fy_year_offset = 0 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_data_exists_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'relative_fy_year_offset_distribution' as rule_name,
  t0.relative_fy_year_offset,
  COUNT(*) as record_count,
  SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) as total_gross_revenue
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) -- Last 2 years
GROUP BY t0.relative_fy_year_offset
ORDER BY t0.relative_fy_year_offset;
","SELECT
  SAFE_CAST(t0.advertiser_parent AS STRING) as advertiser_parent,
  SAFE_CAST(t0.financial_quarter AS STRING) as financial_quarter,
  SAFE_CAST(t0.financial_short_month AS STRING) as financial_short_month,
  PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) as booking_line_created_date,
  SAFE_CAST(t0.fix_date_lod AS DATE) as fix_date_lod,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) as relative_fy_year_offset,
  SAFE_CAST(t0.revenue_group_subtype AS STRING) as revenue_group_subtype,
  SAFE_CAST(t0.revenue_type AS STRING) as revenue_type,
  SAFE_CAST(t0.sales_segment_l_2_name AS STRING) as sales_segment_l_2_name,
  SAFE_CAST(t0.sales_segment_l_2_name_sync AS STRING) as sales_segment_l_2_name_sync,
  SAFE_CAST(t0.unified_publication_name AS STRING) as unified_publication_name
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY PARSE_DATE('%Y-%m-%d', t0.booking_line_created_date) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-23', 'original_format': ""DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney')"", 'context': ""Used as a fixed 'report as of' date to derive prior year reference dates and conditional revenue calculations."", 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter to ensure dynamic reporting.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jul Q1 H1'""], 'context': ""Specific financial period filter for 'financial_period_combined'."", 'suggested_governance': 'Use dynamic date range filters or allow user selection via dashboard parameters for financial periods.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Consortium QLD'""], 'context': ""Specific sales segment filter for 'sales_segment_l_2_name'."", 'suggested_governance': 'Use a governed dimension table for sales segments or allow user selection via dashboard parameters.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'DOUBLECLICK'"", ""'DIGITAL'"", ""'Digital Other'"", ""'OUTSTREAM'"", ""'XTEND'"", ""'EDMEDIA'"", ""'ECOMMERCE'""], 'context': 'Categorization and exclusion rules for revenue types, sales segments, and publication names.', 'suggested_governance': 'Define these categories in a configuration table or a dedicated dimension table for revenue types/publication types.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['1000'], 'context': ""Fixed division by 1000 for 'k' (thousands) metrics, implicitly enforced by a redundant conditional check ('$\\'000' = '$')."", 'suggested_governance': 'Explicitly define the unit conversion factor (e.g., in a configuration table) or remove the redundant conditional logic.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates (e.g., '2025-06-23') with dashboard date parameters or relative date functions (e.g., CURRENT_DATE())."", ""Replace hardcoded lookup values (e.g., 'Consortium QLD', 'Jul Q1 H1', 'DIGITAL') with joins to governed reference tables or allow user selection via dashboard controls."", 'Implement a fiscal calendar dimension table to handle `relative_fy_year_offset` and other fiscal period calculations dynamically, rather than fixed `INTERVAL 365 DAY`.']",0,9269e9c6-1ad0-4415-96c3-aca8a710ba01
"-- This query consolidates all identified metrics and dimensions from the dashboard's SQL into a single, BigQuery-compliant query.
-- It replicates the nested logic using CTEs for clarity and maintainability.
-- A date filter is applied to the base table for performance optimization.

WITH base_data AS (
  SELECT
    t0.DOW_Today AS DOW_Today,
    t0.advertiser_parent AS advertiser_parent,
    t0.booking_line_created_date AS booking_line_created_date,
    t0.financial_quarter AS financial_quarter,
    t0.financial_short_month AS financial_short_month,
    t0.financial_year AS financial_year,
    t0.fix_date_lod AS fix_date_lod,
    t0.gross_revenue_amount AS gross_revenue_amount,
    t0.is_future_period_flag AS is_future_period_flag,
    t0.pipeline AS pipeline,
    t0.relative_fy_month_offset AS relative_fy_month_offset,
    t0.relative_fy_week_offset AS relative_fy_week_offset,
    t0.relative_fy_year_offset AS relative_fy_year_offset,
    t0.revenue_group_subtype AS revenue_group_subtype,
    t0.revenue_type AS revenue_type,
    t0.sales_segment_l_2_name_sync AS sales_segment_l_2_name_sync,
    t0.ss_lgb AS ss_lgb,
    t0.xtend_flag AS xtend_flag,
    -- Hardcoded date for calculations, should be parameterized for dynamic dashboards
    DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney') AS base_calc_date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Apply a reasonable date filter to limit data processed and improve query performance.
  -- Adjust the interval based on typical dashboard reporting periods.
  WHERE SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
),
-- First layer of transformations (equivalent to the first subquery's derived columns)
transformed_data_1 AS (
  SELECT
    *,
    DATETIME_ADD(SAFE_CAST(base_calc_date AS DATETIME), INTERVAL -365 DAY) AS date_one_year_ago, -- Corresponds to clmn19_
    (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick, -- Corresponds to clmn20_
    PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS booking_date_parsed, -- Corresponds to clmn21_
    SAFE_CAST(financial_quarter AS INT64) AS financial_quarter_int, -- Corresponds to clmn22_
    CASE
      WHEN (financial_short_month = 'Jul') THEN '1.Jul'
      WHEN (financial_short_month = 'Aug') THEN '2.Aug'
      WHEN (financial_short_month = 'Sep') THEN '3.Sep'
      WHEN (financial_short_month = 'Oct') THEN '4.Oct'
      WHEN (financial_short_month = 'Nov') THEN '5.Nov'
      WHEN (financial_short_month = 'Dec') THEN '6.Dec'
      WHEN (financial_short_month = 'Jan') THEN '7.Jan'
      WHEN (financial_short_month = 'Feb') THEN '8.Feb'
      WHEN (financial_short_month = 'Mar') THEN '9.Mar'
      WHEN (financial_short_month = 'Apr') THEN '10.Apr'
      WHEN (financial_short_month = 'May') THEN '11.May'
      WHEN (financial_short_month = 'Jun') THEN '12.Jun'
      ELSE NULL
    END AS financial_month_mapped, -- Corresponds to clmn23_
    SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_k, -- Corresponds to clmn24_
    (is_future_period_flag = 'N') AS is_not_future_period, -- Corresponds to clmn25_
    (relative_fy_week_offset = 0) AS is_current_week, -- Corresponds to clmn26_
    (relative_fy_week_offset < 0) AS is_past_week, -- Corresponds to clmn27_
    CASE WHEN (relative_fy_year_offset = -1) THEN gross_revenue_amount ELSE 0 END AS prev_fy_gross_revenue_raw, -- Corresponds to clmn28_, clmn32_
    (relative_fy_year_offset = 0) AS is_current_fy, -- Corresponds to clmn29_
    (relative_fy_year_offset = -1) AS is_prev_fy, -- Corresponds to clmn30_
    CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END AS curr_fy_gross_revenue_raw, -- Corresponds to clmn31_, clmn33_
    (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_group_subtype, -- Corresponds to clmn34_
    (revenue_type = 'DIGITAL') AS is_digital_revenue_type, -- Corresponds to clmn35_
    (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_segment, -- Corresponds to clmn36_
    SAFE_DIVIDE((ss_lgb * DOW_Today), 7) AS weekly_avg_ss_lgb, -- Corresponds to clmn37_
    SAFE_DIVIDE(ss_lgb, 1000) AS ss_lgb_k, -- Corresponds to clmn38_
    CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_derived -- Corresponds to clmn39_
  FROM transformed_data_1
),
-- Second layer of transformations (equivalent to the second subquery's derived columns)
transformed_data_2 AS (
  SELECT
    *,
    CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_k ELSE 0 END AS curr_fy_revenue_k_any_period, -- Corresponds to clmn40_, clmn42_
    CASE WHEN (relative_fy_year_offset = 1) THEN gross_revenue_k ELSE 0 END AS next_fy_revenue_k, -- Corresponds to clmn41_
    CASE WHEN (is_current_fy AND is_past_week) THEN ss_lgb ELSE 0 END AS curr_fy_lgb_past_week_raw, -- Corresponds to clmn43_
    CASE WHEN (is_current_fy AND is_not_future_period) THEN gross_revenue_amount ELSE 0 END AS curr_fy_gross_revenue_not_future_raw, -- Corresponds to clmn44_
    CASE
      WHEN (is_digital_revenue_type AND is_digital_revenue_group_subtype AND is_digital_other_segment AND is_not_doubleclick) THEN fix_date_lod
      ELSE booking_date_parsed
    END AS derived_date_for_comparison, -- Corresponds to clmn45_
    CASE WHEN (is_current_fy AND is_current_week) THEN weekly_avg_ss_lgb ELSE 0 END AS curr_fy_weekly_avg_lgb_curr_week_raw, -- Corresponds to clmn46_
    CASE WHEN (relative_fy_year_offset = 0) THEN ss_lgb_k ELSE 0 END AS curr_fy_lgb_k_any_period -- Corresponds to clmn47_, clmn48_
  FROM transformed_data_2
),
-- Third layer of transformations (equivalent to the third subquery's derived columns)
transformed_data_3 AS (
  SELECT
    *,
    SAFE_DIVIDE(curr_fy_gross_revenue_not_future_raw, 1000) AS curr_fy_gross_revenue_k_not_future, -- Corresponds to clmn49_
    (SAFE_CAST(derived_date_for_comparison AS DATETIME) <= date_one_year_ago) AS is_derived_date_before_one_year_ago -- Corresponds to clmn50_
  FROM transformed_data_3
),
-- Fourth layer of transformations (equivalent to the fourth subquery's derived columns)
transformed_data_4 AS (
  SELECT
    *,
    CASE WHEN (is_prev_fy AND is_derived_date_before_one_year_ago) THEN gross_revenue_amount ELSE 0 END AS prev_fy_gross_revenue_date_cond_raw -- Corresponds to clmn51_, clmn52_
  FROM transformed_data_4
)
-- Final aggregation and selection of metrics and dimensions
SELECT
  financial_short_month,
  financial_year,
  financial_month_mapped,
  revenue_type_derived,
  financial_quarter_int,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync,

  -- Aggregated Metrics (renamed for clarity)
  SUM(curr_fy_weekly_avg_lgb_curr_week_raw) AS current_fy_weekly_avg_lgb_current_week,
  MAX(SAFE_CAST(is_digital_other_segment AS INT64)) AS digital_other_sales_segment_flag,
  SUM(curr_fy_revenue_k_any_period) AS current_fy_gross_revenue_k,
  SUM(curr_fy_gross_revenue_raw) AS current_fy_gross_revenue,
  SUM(curr_fy_gross_revenue_k_not_future) AS current_fy_gross_revenue_k_not_future,
  MAX(relative_fy_month_offset) AS max_relative_fy_month_offset,
  SUM(pipeline) AS total_pipeline,
  SUM(curr_fy_lgb_k_any_period) AS current_fy_lgb_k,
  SUM(curr_fy_lgb_past_week_raw) AS current_fy_lgb_past_week,
  MAX(relative_fy_year_offset) AS max_relative_fy_year_offset,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(prev_fy_gross_revenue_raw) AS previous_fy_gross_revenue,
  SUM(curr_fy_revenue_k_any_period - curr_fy_lgb_k_any_period) AS current_fy_revenue_k_minus_lgb_k,
  SUM(prev_fy_gross_revenue_date_cond_raw) AS previous_fy_gross_revenue_date_cond,
  SUM(ss_lgb) AS total_lgb,
  SUM(SAFE_DIVIDE(prev_fy_gross_revenue_date_cond_raw, 1000)) AS previous_fy_gross_revenue_date_cond_k,
  SUM(next_fy_revenue_k) AS next_fy_revenue_k,
  SUM(SAFE_DIVIDE(prev_fy_gross_revenue_raw, 1000)) AS previous_fy_gross_revenue_k
FROM transformed_data_4
GROUP BY
  financial_short_month,
  financial_year,
  financial_month_mapped,
  revenue_type_derived,
  financial_quarter_int,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync
ORDER BY
  financial_year DESC, financial_quarter_int DESC, relative_fy_month_offset DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(booking_line_created_date AS DATE)) as unique_booking_dates,
  COUNT(DISTINCT financial_year) as unique_financial_years,
  COUNT(DISTINCT financial_short_month) as unique_financial_months,
  COUNT(DISTINCT sales_segment_l_2_name_sync) as unique_sales_segments,
  MIN(SAFE_CAST(booking_line_created_date AS DATE)) as earliest_booking_date,
  MAX(SAFE_CAST(booking_line_created_date AS DATE)) as latest_booking_date,
  AVG(SAFE_CAST(gross_revenue_amount AS NUMERIC)) as avg_gross_revenue_amount,
  APPROX_COUNT_DISTINCT(CONCAT(financial_year, financial_short_month, sales_segment_l_2_name_sync)) as approx_unique_combinations
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_data_present,
  CASE WHEN COUNT(DISTINCT financial_year) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_data_present,
  CASE WHEN MAX(SAFE_CAST(booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN COUNT(CASE WHEN relative_fy_year_offset = 0 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as current_fy_data_present,
  CASE WHEN COUNT(CASE WHEN relative_fy_year_offset = -1 THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as previous_fy_data_present
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Digital Revenue Type Consistency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL') THEN 1 ELSE 0 END) as digital_revenue_matches,
  SAFE_DIVIDE(SUM(CASE WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL') THEN 1 ELSE 0 END), COUNT(*)) * 100 as digital_match_percentage,
  'Relative FY Offset Distribution' as rule_name_2,
  COUNT(CASE WHEN relative_fy_year_offset = 0 THEN 1 END) as current_fy_records,
  COUNT(CASE WHEN relative_fy_year_offset = -1 THEN 1 END) as previous_fy_records,
  COUNT(CASE WHEN relative_fy_year_offset = 1 THEN 1 END) as next_fy_records
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT 
  SAFE_CAST(booking_line_created_date AS DATE) as booking_date,
  financial_year,
  financial_short_month,
  financial_quarter,
  gross_revenue_amount,
  pipeline,
  ss_lgb,
  relative_fy_year_offset,
  relative_fy_month_offset,
  relative_fy_week_offset,
  revenue_type,
  sales_segment_l_2_name_sync,
  advertiser_parent,
  xtend_flag,
  is_future_period_flag
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY SAFE_CAST(booking_line_created_date AS DATE) DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-01-06', 'original_format': ""DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney')"", 'context': ""Used as a fixed baseline date for calculating 'one year ago' and for conditional logic in 'previous_fy_gross_revenue_date_cond'."", 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard parameter to make the dashboard dynamic and evergreen.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'DOUBLECLICK'"", ""'DIGITAL'"", ""'Digital Other'""], 'context': 'String literals used in direct comparisons for filtering or categorizing data (e.g., advertiser_parent, revenue_type, sales_segment_l_2_name_sync).', 'suggested_governance': 'Create and join to a `dim_advertiser_type`, `dim_revenue_type`, or `dim_sales_segment` reference table. This centralizes definitions and allows for easier updates.', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'N'"", ""'Y'""], 'context': 'Boolean flags represented as string literals (e.g., `is_future_period_flag`, `xtend_flag`).', 'suggested_governance': 'Convert to boolean data types in the source or use a lookup table for flag definitions. Ensure consistent representation.', 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'"", ""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'""], 'context': ""Month names used in a CASE statement to map `financial_short_month` to a sorted 'X.Month' format."", 'suggested_governance': ""Create a `dim_month` table with month names and their sort order, then join to it. Alternatively, use BigQuery's `FORMAT_DATE` or `EXTRACT` functions if a proper date column is available for `financial_short_month`."", 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['0', '-1', '1'], 'context': 'Numeric values used for `relative_fy_year_offset` and `relative_fy_week_offset` to define current, previous, or next periods.', 'suggested_governance': ""While these are relative offsets and often hardcoded, ensure their meaning is well-documented. If the definition of 'current week/year' changes (e.g., based on a different calendar system), this logic would need updating."", 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY/MONTH/YEAR)`).', ""Replace hardcoded lookup values (e.g., 'DOUBLECLICK', 'DIGITAL', month names) with joins to governed reference tables for centralized management and consistency."", 'Consider using configuration tables or UDFs for complex business rules (like the derived date logic) instead of embedding them deeply in nested SQL queries.']",1,4d8074b2-17a8-48ba-babe-c536359b1f64
"-- This query calculates all identified metrics and dimensions from the dashboard's underlying data.
-- It applies a broad fiscal year filter (2025, as seen in all original queries) and groups by all relevant dimensions.
-- Specific filters from individual dashboard components (e.g., specific fiscal weeks, day of week, sales channel, publication group) are NOT applied here to provide a comprehensive dataset for unified analysis.
-- Users can apply these specific filters on top of this consolidated dataset as needed.

WITH base_data AS (
  SELECT
    ci.charge_date,
    ci.fiscal_week_id,
    cal.day_short_name AS day_of_week,
    ci.charge_type,
    ci.route_volume,
    ci.charge_amount,
    ci.gl_publication_code,
    ci.sales_channel_l4
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
    LEFT JOIN
    `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
    ON ci.charge_date = cal.calendar_date
  WHERE
    SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- Common year filter
),
-- CTE to derive Publication Group based on gl_publication_code
derived_data AS (
  SELECT
    charge_date,
    fiscal_week_id,
    day_of_week,
    charge_type,
    SAFE_CAST(route_volume AS NUMERIC) AS route_volume,
    SAFE_CAST(charge_amount AS NUMERIC) AS charge_amount,
    gl_publication_code,
    sales_channel_l4,
    CASE
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('500', '560') THEN 'ADV'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '100' THEN 'AUS'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('400', '402') THEN 'CM'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9504' THEN 'Delicious'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9505' THEN 'Delicious Specials'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('110', '116') THEN 'DT'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '350' THEN 'GAD'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '670' THEN 'GCB'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '180' THEN 'Group Shared Services'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '156' THEN 'Hobart Print Services'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('301', '303') THEN 'HS'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '5003' THEN 'MDM'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('850', '852') THEN 'MERCURY'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('961', '963') THEN 'NTN'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '158' THEN 'Perth Print Services'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = 'Post Courier' THEN 'Post Courier'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '5024' THEN 'SC'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('9514', '9515') THEN 'Taste'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '5053' THEN 'TCHRN'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '450' THEN 'TCP'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '475' THEN 'TVB'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9560' THEN 'Vogue'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9556' THEN 'Vogue Living'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '305' THEN 'WT'
      ELSE 'Other'
    END AS publication_group
  FROM
    base_data
)
SELECT
  fiscal_week_id,
  day_of_week,
  publication_group,
  sales_channel_l4,
  SUM(CASE WHEN charge_type = 'RETURNS' THEN route_volume ELSE 0 END) AS total_returns_volume,
  SUM(CASE WHEN charge_type = 'DRAW' THEN route_volume ELSE 0 END) AS total_draw_volume,
  SUM(
    CASE WHEN charge_type = 'DRAW' THEN route_volume ELSE 0 END +
    CASE WHEN charge_type = 'ADJUSTMENT' THEN route_volume ELSE 0 END +
    CASE WHEN charge_type = 'RETURNS' THEN route_volume ELSE 0 END
  ) AS total_volume_draw_adj_returns,
  SUM(charge_amount) AS total_charge_amount
FROM
  derived_data
GROUP BY
  fiscal_week_id,
  day_of_week,
  publication_group,
  sales_channel_l4
ORDER BY
  fiscal_week_id DESC, day_of_week, publication_group, sales_channel_l4
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling.
-- Focuses on the primary insights table and its join to calendar.
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(ci.charge_date AS DATE)) as unique_charge_dates,
  COUNT(DISTINCT SAFE_CAST(ci.fiscal_week_id AS STRING)) as unique_fiscal_weeks,
  COUNT(DISTINCT ci.charge_type) as unique_charge_types,
  COUNT(DISTINCT ci.gl_publication_code) as unique_publication_codes,
  COUNT(DISTINCT ci.sales_channel_l4) as unique_sales_channels,
  MIN(SAFE_CAST(ci.charge_date AS DATE)) as earliest_charge_date,
  MAX(SAFE_CAST(ci.charge_date AS DATE)) as latest_charge_date,
  AVG(SAFE_CAST(ci.route_volume AS NUMERIC)) as avg_route_volume,
  AVG(SAFE_CAST(ci.charge_amount AS NUMERIC)) as avg_charge_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- Limit to the relevant year for performance
LIMIT 1;","-- Quick validation that all metric calculations work syntactically and data is present.
-- Checks for data freshness and non-zero values for key metrics within the last 90 days or the detected fiscal year.
WITH base_data AS (
  SELECT
    ci.charge_date,
    ci.fiscal_week_id,
    ci.charge_type,
    ci.route_volume,
    ci.charge_amount
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  WHERE
    SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- Focus on the relevant year
)
SELECT
  'Validation Check' as test_type,
  CASE WHEN MAX(SAFE_CAST(charge_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN SUM(SAFE_CAST(route_volume AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as total_volume_positive_test,
  CASE WHEN SUM(SAFE_CAST(charge_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as total_charge_positive_test,
  CASE WHEN COUNT(DISTINCT charge_type) >= 3 THEN 'PASS' ELSE 'FAIL' END as charge_type_diversity_test -- Expecting DRAW, RETURNS, ADJUSTMENT
FROM
  base_data
LIMIT 1;","-- Query to validate key business logic, specifically the 'Publication Group' mapping.
-- This checks the distribution and coverage of the hardcoded CASE statement.
WITH base_data AS (
  SELECT
    gl_publication_code,
    CASE
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('500', '560') THEN 'ADV'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '100' THEN 'AUS'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('400', '402') THEN 'CM'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9504' THEN 'Delicious'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9505' THEN 'Delicious Specials'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('110', '116') THEN 'DT'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '350' THEN 'GAD'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '670' THEN 'GCB'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '180' THEN 'Group Shared Services'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '156' THEN 'Hobart Print Services'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('301', '303') THEN 'HS'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '5003' THEN 'MDM'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('850', '852') THEN 'MERCURY'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('961', '963') THEN 'NTN'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '158' THEN 'Perth Print Services'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = 'Post Courier' THEN 'Post Courier'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '5024' THEN 'SC'
      WHEN SAFE_CAST(gl_publication_code AS STRING) IN ('9514', '9515') THEN 'Taste'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '5053' THEN 'TCHRN'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '450' THEN 'TCP'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '475' THEN 'TVB'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9560' THEN 'Vogue'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '9556' THEN 'Vogue Living'
      WHEN SAFE_CAST(gl_publication_code AS STRING) = '305' THEN 'WT'
      ELSE 'Other'
    END AS publication_group
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights`
  WHERE
    SAFE_CAST(LEFT(SAFE_CAST(fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- Limit to the relevant year
)
SELECT
  publication_group,
  COUNT(*) AS record_count,
  COUNT(DISTINCT gl_publication_code) AS distinct_source_codes,
  SUM(CASE WHEN publication_group = 'Other' THEN 1 ELSE 0 END) AS other_category_count
FROM
  base_data
GROUP BY
  publication_group
ORDER BY
  record_count DESC
LIMIT 100;","-- Query to get representative sample data for further analysis.
-- Includes key dimensions and raw metric columns.
SELECT
  SAFE_CAST(ci.charge_date AS DATE) as charge_date,
  SAFE_CAST(ci.fiscal_week_id AS STRING) as fiscal_week_id,
  cal.day_short_name as day_of_week,
  ci.charge_type,
  SAFE_CAST(ci.route_volume AS NUMERIC) as route_volume,
  SAFE_CAST(ci.charge_amount AS NUMERIC) as charge_amount,
  SAFE_CAST(ci.gl_publication_code AS STRING) as gl_publication_code,
  ci.sales_channel_l4
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- Filter to the relevant year
  AND ci.route_volume IS NOT NULL -- Ensure relevant data is present
ORDER BY
  ci.charge_date DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""string '2025'"", 'context': 'Used as a hardcoded fiscal year filter in all queries.', 'suggested_fix': 'Replace with a parameter (e.g., @fiscal_year) or a dynamic calculation (e.g., EXTRACT(YEAR FROM CURRENT_DATE())).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202541, 202542, 202543, 202544, 202545', 'original_format': 'integer list', 'context': 'Specific fiscal week IDs used as filters in the first query.', 'suggested_fix': 'Replace with a parameter (e.g., @fiscal_week_ids) or derive dynamically based on relative periods (e.g., last N weeks).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202533, 202534, 202535, 202536, 202537, 202538, 202539, 202540', 'original_format': 'integer list', 'context': 'Specific fiscal week IDs used as filters in the second query.', 'suggested_fix': 'Replace with a parameter (e.g., @fiscal_week_ids) or derive dynamically based on relative periods (e.g., last N weeks).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'500'"", ""'560'"", ""'100'"", ""'400'"", ""'402'"", ""'9504'"", ""'9505'"", ""'110'"", ""'116'"", ""'350'"", ""'670'"", ""'180'"", ""'156'"", ""'301'"", ""'303'"", ""'5003'"", ""'850'"", ""'852'"", ""'961'"", ""'963'"", ""'158'"", ""'Post Courier'"", ""'5024'"", ""'9514'"", ""'9515'"", ""'5053'"", ""'450'"", ""'475'"", ""'9560'"", ""'9556'"", ""'305'""], 'context': ""GL publication codes hardcoded in a CASE statement to derive 'Publication Group'."", 'suggested_governance': 'Create and join to a `dim_publication_group` lookup table that maps `gl_publication_code` to `publication_group_name`.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'DRAW'"", ""'RETURNS'"", ""'ADJUSTMENT'""], 'context': 'Charge types hardcoded in CASE statements for volume calculations.', 'suggested_governance': 'Ensure these values are part of a controlled vocabulary or `dim_charge_type` table. While less critical for calculation logic, consistency is key.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'Sun'""], 'context': 'Day of week filter hardcoded in the first query.', 'suggested_governance': 'Replace with a parameter (e.g., @day_of_week) or derive dynamically.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'Subscriptions'""], 'context': 'Sales channel filter hardcoded in the second query.', 'suggested_governance': 'Replace with a parameter (e.g., @sales_channel) or join to a `dim_sales_channel` table.', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'DT'""], 'context': 'Publication group filter hardcoded in the second query.', 'suggested_governance': 'Replace with a parameter (e.g., @publication_group) or derive from the `dim_publication_group` table.', 'impact': 'medium', 'maintenance_risk': 'low'}]}","['Replace hardcoded fiscal years and fiscal week IDs with date parameters or relative date functions (e.g., `_FISC_YEAR_`, `_FISC_WEEK_`).', 'Replace hardcoded lookup values for `gl_publication_code` with joins to a governed `dim_publication_group` reference table.', 'Replace hardcoded filter values for `day_of_week`, `sales_channel_l4`, and derived `publication_group` with Looker Studio parameters to allow user selection.']",2,c441950c-1e3f-432c-9838-847d1d315b9e
"-- This query calculates all identified key metrics for a dynamically determined 'current week' and 'previous year same week'.
-- The 'current week' is derived based on CURRENT_DATE() and a fixed base date (2024-07-03) as observed in the original queries.
-- All filters and transformations are applied as per the original queries.

WITH base_data AS (
  SELECT
    t0.BudgetEarnedAmount AS budget_earned_amount,
    t0.ClosingBase AS closing_base,
    t0.EarnedAmount AS earned_amount,
    t0.ForecastBudgetEarnedAmount AS forecast_budget_earned_amount,
    t0.NFEarnedAmount AS nf_earned_amount,
    t0.NYBudgetEarnedAmount AS ny_budget_earned_amount,
    t0.OpeningBase AS opening_base,
    t0.finance_recognition AS finance_recognition,
    t0.fy_month_of_year AS fy_month_of_year,
    t0.fy_quarter_of_year AS fy_quarter_of_year,
    t0.fy_week_of_year AS fy_week_of_year,
    t0.fy_year AS fy_year,
    t0.masthead_group AS masthead_group,
    -- Calculate the custom week number based on CURRENT_DATE() and the observed base date
    DATETIME_DIFF(SAFE_CAST(CURRENT_DATE() AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS calculated_custom_week_number
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
  WHERE
    t0.masthead_group != 'Discontinued'
    AND t0.finance_recognition = 'Digital Recognition'
),

current_week_context AS (
  SELECT
    MAX(calculated_custom_week_number) AS current_custom_week_number,
    MAX(EXTRACT(YEAR FROM CURRENT_DATE())) AS current_fiscal_year_derived -- Using calendar year as proxy for fiscal year for dynamic calculation
  FROM base_data
)

SELECT
  'Overall' AS dashboard_scope,
  SUM(CASE WHEN bd.fy_year = cwc.current_fiscal_year_derived AND bd.fy_week_of_year = cwc.current_custom_week_number THEN SAFE_CAST(bd.budget_earned_amount AS NUMERIC) ELSE 0 END) AS budget_earned_amount_current_week,
  SUM(CASE WHEN bd.fy_year = cwc.current_fiscal_year_derived AND bd.fy_week_of_year = cwc.current_custom_week_number THEN SAFE_CAST(bd.closing_base AS NUMERIC) ELSE 0 END) AS closing_base_current_week,
  SUM(CASE WHEN bd.fy_year = cwc.current_fiscal_year_derived AND bd.fy_week_of_year = cwc.current_custom_week_number THEN SAFE_CAST(bd.opening_base AS NUMERIC) ELSE 0 END) AS opening_base_current_week,
  SUM(CASE WHEN bd.fy_year = cwc.current_fiscal_year_derived AND bd.fy_week_of_year = cwc.current_custom_week_number THEN SAFE_CAST(bd.earned_amount AS NUMERIC) ELSE 0 END) AS earned_amount_current_week,
  SUM(CASE WHEN bd.fy_year = (cwc.current_fiscal_year_derived - 1) AND bd.fy_week_of_year = cwc.current_custom_week_number THEN SAFE_CAST(bd.closing_base AS NUMERIC) - SAFE_CAST(bd.opening_base AS NUMERIC) ELSE 0 END) AS net_base_change_previous_year_same_week,
  'Week to Date & Budget View' AS dashboard_view_type_q3_derived -- This is hardcoded in Q3, so we derive it here.
FROM
  base_data AS bd
CROSS JOIN
  current_week_context AS cwc
LIMIT 100;
","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.fy_year AS INT64)) AS unique_fiscal_years,
  COUNT(DISTINCT SAFE_CAST(t0.fy_month_of_year AS INT64)) AS unique_fiscal_months,
  COUNT(DISTINCT SAFE_CAST(t0.fy_week_of_year AS INT64)) AS unique_fiscal_weeks,
  COUNT(DISTINCT t0.masthead_group) AS unique_masthead_groups,
  COUNT(DISTINCT t0.finance_recognition) AS unique_finance_recognitions,
  MIN(SAFE_CAST(t0.fy_year AS INT64)) AS earliest_fy_year,
  MAX(SAFE_CAST(t0.fy_year AS INT64)) AS latest_fy_year,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(t0.fy_year AS STRING), '-', SAFE_CAST(t0.fy_week_of_year AS STRING), '-', t0.masthead_group, '-', t0.finance_recognition)) AS approx_unique_grain_combinations
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Look at recent years
LIMIT 100;
","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.BudgetEarnedAmount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS budget_earned_amount_test,
  CASE WHEN SUM(SAFE_CAST(t0.ClosingBase AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS closing_base_test,
  CASE WHEN SUM(SAFE_CAST(t0.EarnedAmount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS earned_amount_test,
  CASE WHEN COUNT(DISTINCT t0.masthead_group) > 1 THEN 'PASS' ELSE 'FAIL' END AS masthead_group_diversity_test,
  CASE WHEN COUNT(DISTINCT t0.finance_recognition) > 0 THEN 'PASS' ELSE 'FAIL' END AS finance_recognition_test,
  CASE WHEN MAX(SAFE_CAST(t0.fy_year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_fy_year_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Check data for current and last fiscal year
LIMIT 1;
","SELECT
  'Business Rule Validation' AS validation_type,
  'Digital Recognition Filter' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE WHEN t0.finance_recognition = 'Digital Recognition' THEN 1 ELSE 0 END) AS records_matching_digital_recognition,
  SAFE_DIVIDE(SUM(CASE WHEN t0.finance_recognition = 'Digital Recognition' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS digital_recognition_match_percentage,
  'Masthead Group Exclusion' AS rule_name_2,
  SUM(CASE WHEN t0.masthead_group != 'Discontinued' THEN 1 ELSE 0 END) AS records_not_discontinued,
  SAFE_DIVIDE(SUM(CASE WHEN t0.masthead_group != 'Discontinued' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS not_discontinued_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Validate rules on recent data
LIMIT 1;
","SELECT
  SAFE_CAST(t0.fy_year AS INT64) AS fy_year,
  SAFE_CAST(t0.fy_month_of_year AS INT64) AS fy_month_of_year,
  SAFE_CAST(t0.fy_week_of_year AS INT64) AS fy_week_of_year,
  t0.masthead_group,
  t0.finance_recognition,
  SAFE_CAST(t0.BudgetEarnedAmount AS NUMERIC) AS budget_earned_amount,
  SAFE_CAST(t0.ClosingBase AS NUMERIC) AS closing_base,
  SAFE_CAST(t0.EarnedAmount AS NUMERIC) AS earned_amount,
  SAFE_CAST(t0.ForecastBudgetEarnedAmount AS NUMERIC) AS forecast_budget_earned_amount,
  SAFE_CAST(t0.NFEarnedAmount AS NUMERIC) AS nf_earned_amount,
  SAFE_CAST(t0.NYBudgetEarnedAmount AS NUMERIC) AS ny_budget_earned_amount,
  SAFE_CAST(t0.OpeningBase AS NUMERIC) AS opening_base
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.fy_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Get sample for recent data
  AND t0.finance_recognition = 'Digital Recognition'
  AND t0.masthead_group != 'Discontinued'
ORDER BY t0.fy_year DESC, t0.fy_week_of_year DESC
LIMIT 500;
","{'hardcoded_dates': [{'date_value': '2025-03-26', 'original_format': '2025-03-26 03:31:44.896010+00', 'context': ""Used as a reference date for calculating a 'current week number' in Query 1."", 'suggested_fix': ""Replace with CURRENT_DATE() or a dashboard parameter to make the 'current week' dynamic."", 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as the base date for DATETIME_DIFF calculations to determine custom week numbers in Query 1 and Query 2.', 'suggested_fix': 'Parameterize this base date or derive it from a configuration table if it represents a fiscal year start or similar fixed point.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-03-25', 'original_format': '2025-03-25 23:59:29.736172+00', 'context': ""Used as a reference date for calculating a 'current week number' in Query 2, leading to a different 'current week' than Query 1."", 'suggested_fix': ""Replace with CURRENT_DATE() or a dashboard parameter, and ensure consistency across all queries for 'current week' definition."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['2025', '2024'], 'context': 'Fiscal years are hardcoded for current and previous year comparisons.', 'suggested_governance': 'Derive fiscal years dynamically from CURRENT_DATE() or a fiscal calendar table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Discontinued'""], 'context': 'Used to filter out specific masthead groups.', 'suggested_governance': ""Manage 'Discontinued' status in a masthead dimension table and join for filtering."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Digital Recognition'""], 'context': 'Used to filter for specific finance recognition types.', 'suggested_governance': ""Manage 'Digital Recognition' and other finance recognition types in a reference table."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '18', '23', '27', '31', '36', '40', '44', '49', '53'], 'context': 'Numbers used in complex CASE WHEN statements to map fiscal week/month/quarter to custom periods (e.g., clmn35_, clmn36_ in Q1, clmn19_, clmn20_ in Q2).', 'suggested_governance': 'Externalize these mappings to a fiscal calendar or period definition table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'display_logic', 'hardcoded_values': [""'Week to Date & Budget View'"", ""'Week to Date & Forecast View'"", ""'Week to Date & Year on Year View'"", ""'Week to Date & NY Budget View'"", ""'Month to Date & Budget View'"", ""'Month to Date & Forecast View'"", ""'Quarter to Date & Budget View'"", ""'Quarter to Date & Forecast View'"", ""'Year to Date & Budget View'"", ""'Year to Date & Forecast View'""], 'context': ""Hardcoded strings defining dashboard view types in Query 3. Only 'Week to Date & Budget View' is ever returned due to `(1=1)` logic."", 'suggested_governance': 'If these are meant to be dynamic, they should be driven by dashboard parameters or a configuration table. If static, document their purpose.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates (e.g., '2025-03-26', '2024-07-03') with Looker Studio date parameters or BigQuery's `CURRENT_DATE()` for dynamic reporting."", ""Introduce parameters for fiscal year (e.g., `{{fiscal_year_param}}`) instead of hardcoding '2025' or '2024'."", ""Externalize business rules and lookup values (e.g., 'Discontinued', 'Digital Recognition', and the complex week/month/quarter mappings) into dedicated reference tables. This allows for easier updates and consistent application across dashboards."", ""Consider creating a 'fiscal calendar' table that defines fiscal years, quarters, months, and weeks, including their start/end dates and any custom period mappings, to replace the complex `DATETIME_DIFF` and `CASE WHEN` logic.""]",3,bb49fa78-5abe-4e68-a9c1-8172a832e724
"-- THIS IS THE MAIN SQL TO RUN --
-- This query consolidates the core logic from the provided Looker Studio queries.
-- It calculates total gross and net revenue, and includes the custom 'adsize_category' dimension.
-- Hardcoded filters from the original queries are included as examples and should be parameterized for flexibility.

WITH
  base_adsales_data AS (
    SELECT
      advertiser_name,
      booking_number,
      booking_name,
      regexp_extract(booking_name, r'^[^ _]+') AS booking_name_1st_keyword,
      sort_caption,
      adsize_name,
      classification_name,
      revenue_type,
      revenue_group_subtype,
      financial_year,
      fy_year_month_number,
      financial_short_month,
      -- sales_segment_l_2_name_sync, -- Included in one original query, can be added if needed for broader analysis
      -- gl_publication_name, -- Included in one original query, can be added if needed for broader analysis
      source_unified_publication_gl_code,
      source_unified_publication_name,
      unified_publication_gl_code,
      unified_publication_name,
      revenue_transaction_status,
      record_type_code,
      SAFE_CAST(gross_revenue_amount AS NUMERIC) AS gross_revenue_amount, -- Cast to NUMERIC for safety
      SAFE_CAST(net_revenue AS NUMERIC) AS net_revenue, -- Cast to NUMERIC for safety
      relative_fy_year_offset
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) -- Common filter across all original queries (Current FY, Previous FY, Next FY)
  ),
  enriched_adsales_data AS (
    SELECT
      *,
      -- Derived dimension: Ad Size Category based on adsize_name
      CASE
        WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$')) THEN 'Sponsorship'
        WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$')) THEN 'Production'
        ELSE 'Media'
      END AS adsize_category
    FROM
      base_adsales_data
  )
SELECT
  financial_year,
  fy_year_month_number,
  financial_short_month,
  adsize_category,
  revenue_transaction_status,
  booking_name,
  advertiser_name,
  adsize_name,
  revenue_type,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(net_revenue) AS total_net_revenue,
  COUNT(DISTINCT booking_number) AS unique_bookings,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers
FROM
  enriched_adsales_data
WHERE
  -- Example hardcoded filters from original queries. These should ideally be parameters.
  SAFE_CAST(financial_year AS STRING) = '2025' -- Example filter from Query 1, 2, 3
  AND fy_year_month_number IN (202501, 202502, 202503) -- Example filter from Query 1
  -- AND booking_name IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series', 'Future Bradfield FY25 B1', 'Future Sydney Bradfield 2024') -- Example filter from Query 3
GROUP BY
  financial_year,
  fy_year_month_number,
  financial_short_month,
  adsize_category,
  revenue_transaction_status,
  booking_name,
  advertiser_name,
  adsize_name,
  revenue_type
ORDER BY
  financial_year DESC, fy_year_month_number DESC
LIMIT 1000; -- Limit for sampling and cost optimization","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) AS unique_financial_years,
  COUNT(DISTINCT fy_year_month_number) AS unique_fy_year_months,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT booking_number) AS unique_booking_numbers,
  MIN(SAFE_CAST(financial_year AS STRING)) AS earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) AS latest_financial_year,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(financial_year AS STRING), '-', SAFE_CAST(fy_year_month_number AS STRING), '-', booking_number)) AS approx_unique_transaction_grain
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1) -- Focus on the relevant financial years
LIMIT 1;","-- Quick validation that all metric calculations work syntactically and data is present
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS gross_revenue_test,
  CASE WHEN SUM(SAFE_CAST(net_revenue AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS net_revenue_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS financial_year_test,
  CASE WHEN MAX(SAFE_CAST(financial_year AS STRING)) >= SAFE_CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS STRING) THEN 'PASS' ELSE 'FAIL' END AS freshness_test_current_fy,
  CASE WHEN COUNT(DISTINCT revenue_transaction_status) > 1 THEN 'PASS' ELSE 'FAIL' END AS multiple_transaction_statuses_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (0) -- Check current financial year data
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
WITH ad_data AS (
  SELECT
    adsize_name,
    financial_year,
    fy_year_month_number,
    booking_name,
    gross_revenue_amount,
    CASE
      WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$')) THEN 'Sponsorship'
      WHEN (SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$')) THEN 'Production'
      ELSE 'Media'
    END AS adsize_category
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
  WHERE
    relative_fy_year_offset IN (-1, 0, 1)
)
SELECT
  'Business Rule Validation' AS validation_type,
  'adsize_category_distribution' AS rule_name,
  adsize_category,
  COUNT(*) AS records_count,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue,
  SAFE_DIVIDE(COUNT(*), SUM(COUNT(*)) OVER()) * 100 AS percentage_of_records
FROM
  ad_data
WHERE
  SAFE_CAST(financial_year AS STRING) = '2025' -- Validate for a specific year as per original queries
GROUP BY
  adsize_category
ORDER BY
  records_count DESC
LIMIT 100;","-- Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  fy_year_month_number,
  financial_short_month,
  advertiser_name,
  booking_name,
  adsize_name,
  revenue_type,
  revenue_transaction_status,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  SAFE_CAST(net_revenue AS NUMERIC) AS net_revenue,
  relative_fy_year_offset
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (0) -- Sample from current financial year
  AND SAFE_CAST(gross_revenue_amount AS NUMERIC) IS NOT NULL
ORDER BY
  gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': 'STRING', 'context': 'Used as a filter for financial_year in all three queries.', 'suggested_fix': 'Replace with a Looker Studio date parameter or a BigQuery function like `EXTRACT(YEAR FROM CURRENT_DATE())` or a reference to a dynamic financial year table.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202501, 202502, 202503', 'original_format': 'INT64', 'context': 'Used as a filter for fy_year_month_number in job_7xKhQEqBG1XaCVJdIcRXU90TdjrW.', 'suggested_fix': 'Replace with Looker Studio date parameters for start/end month or dynamic calculation based on current date/financial period.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'^(.*event sponsorship.*)$'"", ""'^(.*production.*)$'""], 'context': ""Regex patterns used to categorize 'adsize_name' into 'Sponsorship', 'Production', 'Media'."", 'suggested_governance': 'Create a lookup table (e.g., `adsize_category_mapping`) with `adsize_pattern` and `adsize_category` columns. Join to this table or use a UDF for categorization.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Future Bradfield 2024'"", ""'Sydney & Brisbane Future Series'"", ""'Future Bradfield FY25 B1'"", ""'Future Sydney Bradfield 2024'""], 'context': ""Specific 'booking_name' values used as a filter in job_iSsMg-zvzCOtO89aVx8k3yH3IaBj."", 'suggested_governance': 'Manage these specific booking names in a reference table (e.g., `special_bookings_list`) and join/filter against it, or use a Looker Studio parameter for user selection.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded financial years and month numbers with Looker Studio date range parameters or dynamic BigQuery date functions (e.g., `CURRENT_DATE()`, `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'Externalize ad size categorization regex patterns into a governed lookup table to improve maintainability and consistency.', 'Manage specific booking names in a dedicated reference table or allow user selection via Looker Studio parameters instead of hardcoding.']",4,e83da1de-4227-43e6-bcc6-73051c66914b
"WITH OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      CAST(os.fiscal_week_id AS int) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      pub.publication_name,
      pub.publication_code,
      pub.l04_publication_code,
      pub.l06_publication_code,
      calendar.fy_week_of_year,
      calendar.fy_year_week_number,
      calendar.fy_first_day_of_week,
      calendar.fy_last_day_of_week,
      calendar.fy_month_of_year,
      calendar.fy_year_month_number,
      calendar.relative_fisc_year_number,
      calendar.relative_fisc_week_number,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      calendar.fy_quarter_of_year,
      calendar.fy_year,
      dep.department_code
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
        ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep
        ON os.os_level_12 = dep.department_code
    WHERE
      upper(os.os_level_6) = 'CIRCULATION'
      AND pub.l04_publication_code <> 'Free News & Lifestyle'
      AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
      AND os.gl_hierarchy_code = 'FY2025'
),
DerivedData AS (
    SELECT
        *,
        CASE
            WHEN publication_code = 'Post Courier' THEN 'PNG'
            ELSE publication_name
        END AS publication_name_adjusted,
        CASE
            WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'Northern Territory'
            WHEN publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Others'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
            WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
            WHEN publication_name IN ('Sunday Tasmanian', 'Mercury') THEN 'Mercury'
            ELSE publication_name
        END AS publication_group_q2,
        CASE
            WHEN publication_name IN ('Cairns Post', 'Ed Media', 'Geelong Advertiser', 'Gold Coast Bulletin', 'Mackay', 'Mercury', 'NT News', 'Sunday Tasmanian', 'Sunday Territorian', 'Sunshine Coast', 'Toowoomba', 'Townsville Bulletin', 'PNG', 'Weekly Times') THEN '      Regionals'
            WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN '     The Advertiser'
            WHEN publication_name IN ('The Australian') THEN ' The Australian'
            WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN '    The Courier Mail'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN '   The Daily Telegraph'
            WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN '  The Herald Sun'
            ELSE '        Other'
        END AS publication_group_q3_display,
        CASE
            WHEN publication_name IN ('Sunday Herald Sun', 'Herald Sun') THEN 'The Herald Sun'
            WHEN publication_name IN ('The Advertiser', 'Sunday Mail') THEN 'The Advertiser'
            WHEN publication_name IN ('Courier Mail', 'The Sunday Mail') THEN 'The Courier Mail'
            WHEN publication_name = 'The Australian' THEN 'The Australian'
            WHEN publication_name = 'The Sportsman' THEN 'The Sportsman'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
            WHEN publication_name = 'Weekly Times' THEN 'Weekly Times'
            ELSE NULL
        END AS publication_group_q3_type_1,
        CASE
            WHEN publication_name IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin') THEN '6 Day Pubs'
            WHEN publication_name IN ('Mercury', 'Sunday Tasmanian') THEN 'Mercury and Sunday Tas'
            WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'NT News & Sunday Territorian'
            WHEN publication_name IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Other'
            WHEN publication_name IN ('Advertiser', 'Sunday Mail (SA)') THEN 'The Advertiser'
            WHEN publication_name IN ('Courier Mail', 'Sunday Mail (QLD)') THEN 'The Courier Mail'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
            WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
            ELSE publication_name
        END AS publication_group_q3_type_2,
        CASE
            WHEN publication_name IN ('NT News', 'Sunday Territorian') THEN 'Northern Territory'
            WHEN publication_name IN ('', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital') THEN 'Others'
            WHEN publication_name IN ('The Daily Telegraph', 'The Sunday Telegraph') THEN 'The Daily Telegraph'
            WHEN publication_name IN ('Herald Sun', 'Sunday Herald Sun') THEN 'The Herald Sun'
            ELSE publication_name
        END AS publication_group_q3_type_3,
        CASE
            WHEN day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry') THEN 'M-F'
            WHEN day_of_week = 'Sat' THEN 'SAT'
            WHEN day_of_week = 'Sun' THEN 'Sun'
            ELSE NULL
        END AS day_of_week_category,
        DATE(TIMESTAMP '2025-06-23 04:08:01.229999+00', 'Australia/Sydney') AS q1_hardcoded_date,
        DATE(TIMESTAMP '2025-06-04 07:28:59.451817+00', 'Australia/Sydney') AS q3_hardcoded_date,
        DATE('2024-07-03') AS baseline_date
    FROM OSandFACT
),
CalculatedMetrics AS (
    SELECT
        *,
        (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q1_hardcoded_date)) - 1) AS q1_day_of_week_num,
        DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) AS q1_week_diff,
        CASE
            WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q1_hardcoded_date)) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) - 1)
            ELSE DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK)
        END AS q1_calculated_week_part,
        ((2025*100) + (CASE WHEN (0 = 0) THEN (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q1_hardcoded_date)) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) END) ELSE 0 END)) AS q1_target_fy_year_week_number,
        (fy_year_week_number = ((2025*100) + (CASE WHEN (0 = 0) THEN (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q1_hardcoded_date)) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(q1_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) END) ELSE 0 END))) AS q1_week_match_filter,
        (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q3_hardcoded_date)) - 1) AS q3_day_of_week_num,
        DATETIME_DIFF(SAFE_CAST(q3_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) AS q3_week_diff,
        CASE
            WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q3_hardcoded_date)) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(q3_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) - 1)
            ELSE DATETIME_DIFF(SAFE_CAST(q3_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK)
        END AS q3_calculated_week_part,
        CASE WHEN (48 = 0) THEN (CASE WHEN (EXTRACT(DAYOFWEEK FROM TIMESTAMP(q3_hardcoded_date)) - 1) <= 2 THEN (DATETIME_DIFF(SAFE_CAST(q3_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) - 1) ELSE DATETIME_DIFF(SAFE_CAST(q3_hardcoded_date AS DATETIME), SAFE_CAST(baseline_date AS DATETIME), WEEK) END) ELSE 48 END AS q3_divisor_48,
        CASE WHEN (48 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (48 <= 4) THEN '1' WHEN (48 <= 9) THEN '2' WHEN (48 <= 13) THEN '3' WHEN (48 <= 17) THEN '4' WHEN (48 <= 22) THEN '5' WHEN (48 <= 26) THEN '6' WHEN (48 <= 30) THEN '7' WHEN (48 <= 35) THEN '8' WHEN (48 <= 39) THEN '9' WHEN (48 <= 43) THEN '10' WHEN (48 <= 48) THEN '11' WHEN (48 <= 52) THEN '12' ELSE '12' END AS q3_month_from_48,
        CASE
            WHEN SAFE_CAST( (CASE WHEN (48 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (48 <= 4) THEN '1' WHEN (48 <= 9) THEN '2' WHEN (48 <= 13) THEN '3' WHEN (48 <= 17) THEN '4' WHEN (48 <= 22) THEN '5' WHEN (48 <= 26) THEN '6' WHEN (48 <= 30) THEN '7' WHEN (48 <= 35) THEN '8' WHEN (48 <= 39) THEN '9' WHEN (48 <= 43) THEN '10' WHEN (48 <= 48) THEN '11' WHEN (48 <= 52) THEN '12' ELSE '12' END) AS INT64) < 4 THEN volume
            WHEN SAFE_CAST( (CASE WHEN (48 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (48 <= 4) THEN '1' WHEN (48 <= 9) THEN '2' WHEN (48 <= 13) THEN '3' WHEN (48 <= 17) THEN '4' WHEN (48 <= 22) THEN '5' WHEN (48 <= 26) THEN '6' WHEN (48 <= 30) THEN '7' WHEN (48 <= 35) THEN '8' WHEN (48 <= 39) THEN '9' WHEN (48 <= 43) THEN '10' WHEN (48 <= 48) THEN '11' WHEN (48 <= 52) THEN '12' ELSE '12' END) AS INT64) < 6 THEN (CASE WHEN fy_month_of_year < 4 THEN volume ELSE Forecast_Volume END)
            WHEN SAFE_CAST( (CASE WHEN (48 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (48 <= 4) THEN '1' WHEN (48 <= 9) THEN '2' WHEN (48 <= 13) THEN '3' WHEN (48 <= 17) THEN '4' WHEN (48 <= 22) THEN '5' WHEN (48 <= 26) THEN '6' WHEN (48 <= 30) THEN '7' WHEN (48 <= 35) THEN '8' WHEN (48 <= 39) THEN '9' WHEN (48 <= 43) THEN '10' WHEN (48 <= 48) THEN '11' WHEN (48 <= 52) THEN '12' ELSE '12' END) AS INT64) = 6 THEN (CASE WHEN fy_month_of_year < 6 THEN volume ELSE Forecast_Volume END)
            WHEN SAFE_CAST( (CASE WHEN (48 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (48 <= 4) THEN '1' WHEN (48 <= 9) THEN '2' WHEN (48 <= 13) THEN '3' WHEN (48 <= 17) THEN '4' WHEN (48 <= 22) THEN '5' WHEN (48 <= 26) THEN '6' WHEN (48 <= 30) THEN '7' WHEN (48 <= 35) THEN '8' WHEN (48 <= 39) THEN '9' WHEN (48 <= 43) THEN '10' WHEN (48 <= 48) THEN '11' WHEN (48 <= 52) THEN '12' ELSE '12' END) AS INT64) < 9 THEN (CASE WHEN fy_month_of_year < 7 THEN volume ELSE Forecast_Volume END)
            WHEN SAFE_CAST( (CASE WHEN (48 = 0) THEN SAFE_CAST(NULL AS STRING) WHEN (48 <= 4) THEN '1' WHEN (48 <= 9) THEN '2' WHEN (48 <= 13) THEN '3' WHEN (48 <= 17) THEN '4' WHEN (48 <= 22) THEN '5' WHEN (48 <= 26) THEN '6' WHEN (48 <= 30) THEN '7' WHEN (48 <= 35) THEN '8' WHEN (48 <= 39) THEN '9' WHEN (48 <= 43) THEN '10' WHEN (48 <= 48) THEN '11' WHEN (48 <= 52) THEN '12' ELSE '12' END) AS INT64) = 9 THEN (CASE WHEN fy_month_of_year < 9 THEN volume ELSE Forecast_Volume END)
            WHEN fy_month_of_year < 10 THEN volume
            ELSE Forecast_Volume
        END AS q3_base_volume_selected,
        SAFE_DIVIDE(volume, q3_divisor_48) AS q3_volume_div_48,
        (SAFE_DIVIDE(volume, (q3_divisor_48*5))*5) AS q3_volume_div_48_x5,
        (SAFE_DIVIDE(volume, (q3_divisor_48*2))*5) AS q3_volume_div_48_x2_x5,
        (SAFE_DIVIDE(volume, q3_divisor_48)*5) AS q3_volume_div_48_x5_alt,
        CASE
            WHEN (publication_name = 'The Australian' OR publication_name = 'The Courier Mail') THEN (CASE WHEN day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(volume, (q3_divisor_48*5))*5) ELSE SAFE_DIVIDE(volume, q3_divisor_48) END)
            WHEN publication_group_q3_type_1 = 'The Sportsman' THEN (SAFE_DIVIDE(volume, (q3_divisor_48*2))*5)
            WHEN publication_group_q3_type_1 = 'Weekly Times' THEN (SAFE_DIVIDE(volume, q3_divisor_48)*5)
            WHEN publication_group_q3_type_2 = 'PNG' THEN 0
            WHEN day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(volume, (q3_divisor_48*5))*5)
            ELSE SAFE_DIVIDE(volume, q3_divisor_48)
        END AS q3_clmn49_calculated_volume,
        CASE
            WHEN publication_group_q3_type_2 = 'PNG' THEN 0
            WHEN publication_group_q3_type_2 = '6 Day Pubs' THEN SAFE_DIVIDE(q3_clmn49_calculated_volume, 6)
            ELSE SAFE_DIVIDE(q3_clmn49_calculated_volume, 7)
        END AS q3_final_volume_type_1,
        CASE
            WHEN (publication_name = 'The Australian' OR publication_name = 'The Courier Mail') THEN (CASE WHEN day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(q3_base_volume_selected, (q3_divisor_48*5))*5) ELSE SAFE_DIVIDE(q3_base_volume_selected, q3_divisor_48) END)
            WHEN publication_group_q3_type_1 = 'The Sportsman' THEN (SAFE_DIVIDE(q3_base_volume_selected, (q3_divisor_48*2))*5)
            WHEN publication_group_q3_type_1 = 'Weekly Times' THEN (SAFE_DIVIDE(q3_base_volume_selected, q3_divisor_48)*5)
            WHEN publication_group_q3_type_2 = 'PNG' THEN 0
            WHEN day_of_week_category = 'M-F' THEN (SAFE_DIVIDE(q3_base_volume_selected, (q3_divisor_48*5))*5)
            ELSE SAFE_DIVIDE(q3_base_volume_selected, q3_divisor_48)
        END AS q3_clmn61_calculated_volume,
        CASE
            WHEN publication_group_q3_type_2 = '6 Day Pubs' THEN SAFE_DIVIDE(q3_clmn61_calculated_volume, 6)
            ELSE SAFE_DIVIDE(q3_clmn61_calculated_volume, 7)
        END AS q3_final_volume_type_2
    FROM DerivedData
)
SELECT
    'Overall Dashboard Metrics' AS dashboard_view,
    SUM(CASE
        WHEN T2.q1_week_match_filter = TRUE
        AND T2.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
        AND T2.os_level_7 = 'All Sales Channels'
        THEN T2.Actual_Amount
        ELSE 0
    END) AS total_actual_amount_q1,
    SUM(CASE
        WHEN T2.q1_week_match_filter = TRUE
        AND T2.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
        AND T2.os_level_7 = 'All Sales Channels'
        THEN T2.volume
        ELSE 0
    END) AS total_volume_q1,
    COUNT(DISTINCT CASE
        WHEN T2.publication_group_q2 = 'Advertiser'
        THEN T2.publication_name
        ELSE NULL
    END) AS publication_count_advertiser_q2,
    SUM(CASE
        WHEN T2.fy_year = 2025
        AND T2.fy_year_week_number <= 202548
        AND T2.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
        AND T2.os_level_7 = 'All Sales Channels'
        AND T2.publication_group_q3_type_3 IN ('Geelong Advertiser', 'Mercury', 'Sunday Tasmanian', 'Sunshine Coast', 'Sydney Suburbans', 'The Australian', 'The Daily Telegraph', 'The Herald Sun', 'Toowoomba', 'Townsville Bulletin', 'Weekly Times')
        THEN T2.q3_final_volume_type_1
        ELSE 0
    END) AS total_calculated_volume_type_1_q3,
    SUM(CASE
        WHEN T2.fy_year = 2025
        AND T2.fy_year_week_number <= 202548
        AND T2.publication_name NOT IN ('Weekly Times', 'Sunshine Coast', 'Mackay')
        AND T2.os_level_7 = 'All Sales Channels'
        AND T2.publication_group_q3_type_3 IN ('Geelong Advertiser', 'Mercury', 'Sunday Tasmanian', 'Sunshine Coast', 'Sydney Suburbans', 'The Australian', 'The Daily Telegraph', 'The Herald Sun', 'Toowoomba', 'Townsville Bulletin', 'Weekly Times')
        THEN T2.q3_final_volume_type_2
        ELSE 0
    END) AS total_calculated_volume_type_2_q3
FROM CalculatedMetrics AS T2
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS STRING)) as unique_fiscal_weeks,
  COUNT(DISTINCT publication_name) as unique_publications,
  COUNT(DISTINCT os_level_7) as unique_sales_channels,
  MIN(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) as earliest_fiscal_week_start,
  MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) as latest_fiscal_week_end,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(fiscal_week_id AS STRING), gl_publication_code, os_level_7, day_of_week)) as approx_unique_data_grain_keys
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
  AND upper(os.os_level_6) = 'CIRCULATION'
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_test,
  CASE WHEN SUM(SAFE_CAST(volume AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as volume_test,
  CASE WHEN COUNT(DISTINCT os.gl_publication_code) > 0 THEN 'PASS' ELSE 'FAIL' END as publication_code_test,
  CASE WHEN MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN upper(os.os_level_6) = 'CIRCULATION' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as circulation_filter_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Circulation Filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN upper(os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END) as records_passing_circulation_filter,
  SAFE_DIVIDE(SUM(CASE WHEN upper(os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END), COUNT(*)) * 100 as circulation_filter_pass_rate_percentage,
  'FY2025 Filter' as rule_name_2,
  SUM(CASE WHEN gl_hierarchy_code = 'FY2025' THEN 1 ELSE 0 END) as records_passing_fy2025_filter,
  SAFE_DIVIDE(SUM(CASE WHEN gl_hierarchy_code = 'FY2025' THEN 1 ELSE 0 END), COUNT(*)) * 100 as fy2025_filter_pass_rate_percentage,
  'Publication Exclusions' as rule_name_3,
  SUM(CASE WHEN l04_publication_code <> 'Free News & Lifestyle' AND l06_publication_code NOT IN ('Food', 'Prestige') THEN 1 ELSE 0 END) as records_passing_pub_exclusions,
  SAFE_DIVIDE(SUM(CASE WHEN l04_publication_code <> 'Free News & Lifestyle' AND l06_publication_code NOT IN ('Food', 'Prestige') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pub_exclusions_pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
WHERE
  SAFE_CAST(os.fiscal_week_id AS STRING) LIKE '2025%'
LIMIT 1;","SELECT
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) as fiscal_week_start_date,
  os.fiscal_week_id,
  os.gl_publication_code,
  pub.publication_name,
  os.os_level_7 AS sales_channel,
  os.day_of_week,
  SAFE_CAST(os.Actual_Amount AS NUMERIC) as actual_amount,
  SAFE_CAST(os.volume AS NUMERIC) as volume,
  SAFE_CAST(os.Budget_Volume AS NUMERIC) as budget_volume,
  SAFE_CAST(os.Forecast_Volume AS NUMERIC) as forecast_volume,
  SAFE_CAST(os.Last_Year_volume AS NUMERIC) as last_year_volume,
  os.gl_hierarchy_code
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  AND upper(os.os_level_6) = 'CIRCULATION'
ORDER BY fiscal_week_start_date DESC, publication_name
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-23', 'original_format': '2025-06-23 04:08:01.229999+00', 'context': 'Used as a reference date for calculating a specific fiscal week in Query 1.', 'suggested_fix': 'Replace with `CURRENT_DATE()` or a dashboard date parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a baseline date for `DATETIME_DIFF` calculations to determine fiscal week numbers in Query 1 and Query 3.', 'suggested_fix': 'Replace with a configurable fiscal year start date or derive dynamically from calendar dimension.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-04', 'original_format': '2025-06-04 07:28:59.451817+00', 'context': 'Used as a reference date for calculating fiscal week and day of week in Query 3.', 'suggested_fix': 'Replace with `CURRENT_DATE()` or a dashboard date parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'CIRCULATION'"", ""'Free News & Lifestyle'"", ""'Food'"", ""'Prestige'"", ""'FY2025'""], 'context': 'Core filters applied to the base `OSandFACT` CTE, defining the scope of the dashboard.', 'suggested_governance': 'These should ideally be managed in a configuration table or as dashboard parameters if they are subject to change.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Weekly Times'"", ""'Sunshine Coast'"", ""'Mackay'"", ""'All Sales Channels'"", ""'NT News'"", ""'Sunday Territorian'"", ""'Advertiser'"", ""'Post Courier'"", ""'The Daily Telegraph'"", ""'The Sunday Telegraph'"", ""'Herald Sun'"", ""'Sunday Herald Sun'"", ""'Mercury'"", ""'Sunday Tasmanian'"", ""'The Sportsman'"", ""'The Australian'"", ""'Cairns Post'"", ""'Ed Media'"", ""'Geelong Advertiser'"", ""'Gold Coast Bulletin'"", ""'Toowoomba'"", ""'Townsville Bulletin'"", ""'Sunday Mail (SA)'"", ""'Courier Mail'"", ""'Sunday Mail (QLD)'"", ""'The Sunday Mail'""], 'context': 'Extensive use of hardcoded publication names and sales channels for filtering and grouping.', 'suggested_governance': 'Create and join to a `dim_publication_master` and `dim_sales_channel` table for consistent naming, grouping, and hierarchy management.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['48', '6', '7', '5', '2'], 'context': 'The number `48` is hardcoded as a divisor and month indicator in Query 3, overriding dynamic calculations. `6` and `7` are used as divisors for daily volume calculations. `5` and `2` are used in multiplication/division factors.', 'suggested_governance': 'These divisors should be dynamically calculated (e.g., days in week/month) or stored in a business rule configuration table if they represent specific business logic (e.g., 6-day vs 7-day publications). The hardcoded `48` is particularly problematic as it makes the calculation static.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'(Actual Vs Budget Vs PY)'"", ""'M-F'"", ""'SAT'"", ""'Sun'"", ""'Weekday Entry'"", ""'Northern Territory'"", ""'Others'"", ""'PNG'"", ""'6 Day Pubs'"", ""'Mercury and Sunday Tas'"", ""'NT News & Sunday Territorian'"", ""'Regionals'""], 'context': 'Hardcoded strings used for categorizing publications or day types, often for display purposes.', 'suggested_governance': 'These categories should be defined in a dimension table (e.g., `dim_publication_group`, `dim_day_type`) and joined, rather than hardcoded in `CASE WHEN` statements.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates with dashboard date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or BigQuery's `CURRENT_DATE()` and `DATE_SUB()` functions for relative date ranges."", 'Implement a fiscal calendar dimension table that can dynamically provide `fy_year_week_number`, `fy_year`, and `fiscal_week_id` based on a selected date, removing the need for hardcoded fiscal year values and complex date arithmetic.', 'Externalize publication grouping logic into a dedicated dimension table (`dim_publication_group`) that can be joined to the fact table, allowing for flexible and centralized management of publication hierarchies and categories.', ""Create a configuration table for business rules (e.g., `daily_volume_divisors`) to store values like '6 Day Pubs' or '7 Day Pubs' divisors, making calculations transparent and easily modifiable without changing SQL code."", 'Utilize dashboard controls for filtering on `publication_name`, `os_level_7`, and `publication_group` instead of hardcoding values in `WHERE` clauses or `CASE WHEN` statements.']",5,2104a3f5-9424-4087-a928-e67fecae789a
"WITH base_data AS (
  SELECT
    t0.fin_adtype_name,
    t0.revenue_transaction_status,
    t0.sales_segment_l_2_name_sync,
    t0.source_publishing_division,
    t0.booking_number,
    t0.financial_year,
    t0.adsize_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Booked', 'Billed')
    AND (SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026')
    AND SAFE_CAST(t0.fin_adtype_name AS STRING) IN (
      'Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)',
      'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)',
      'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)',
      'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)'
    )
)
SELECT
  fin_adtype_name,
  revenue_transaction_status,
  sales_segment_l_2_name_sync,
  source_publishing_division,
  financial_year,
  adsize_name,
  COUNT(DISTINCT booking_number) AS distinct_booking_numbers,
  COUNT(*) AS total_records_matching_filters
FROM base_data
GROUP BY
  fin_adtype_name,
  revenue_transaction_status,
  sales_segment_l_2_name_sync,
  source_publishing_division,
  financial_year,
  adsize_name
ORDER BY
  financial_year DESC, distinct_booking_numbers DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(booking_number AS STRING)) as unique_booking_numbers,
  COUNT(DISTINCT SAFE_CAST(fin_adtype_name AS STRING)) as unique_ad_types,
  COUNT(DISTINCT SAFE_CAST(sales_segment_l_2_name_sync AS STRING)) as unique_sales_segments,
  MIN(SAFE_CAST(financial_year AS STRING)) as earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) as latest_financial_year
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as records_exist_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(booking_number AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as distinct_bookings_exist_test,
  CASE WHEN MAX(SAFE_CAST(financial_year AS STRING)) >= SAFE_CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS STRING) THEN 'PASS' ELSE 'FAIL' END as freshness_test_current_year,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'revenue_status_filter_coverage' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_matching_status_filter,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as status_filter_match_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'medium_rare_exclusion_coverage' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN SAFE_CAST(source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR source_publishing_division IS NULL THEN 1 ELSE 0 END) as records_matching_exclusion_filter,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR source_publishing_division IS NULL THEN 1 ELSE 0 END), COUNT(*)) * 100 as exclusion_filter_match_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'fin_adtype_name_filter_coverage' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE WHEN SAFE_CAST(fin_adtype_name AS STRING) IN (
      'Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)',
      'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)',
      'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)',
      'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)'
    ) THEN 1 ELSE 0 END) as records_matching_adtype_filter,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(fin_adtype_name AS STRING) IN (
      'Audio (Targeted)', 'Audio (Non-Targeted)', 'Events (Non-Targeted)', 'Events (Targeted)',
      'Rich Media (Non-Targeted)', 'Rich Media (Targeted)', 'Social Display (Targeted)', 'Social Display (Non-Targeted)',
      'Standard Display (Targeted)', 'Standard Display (Non-Targeted)', 'TTIV (Targeted)', 'TTIV (Non-Targeted)',
      'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)', 'Native (Non-Targeted)', 'Native (Targeted)'
    ) THEN 1 ELSE 0 END), COUNT(*)) * 100 as adtype_filter_match_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026');","SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  SAFE_CAST(booking_number AS STRING) AS booking_number,
  SAFE_CAST(fin_adtype_name AS STRING) AS fin_adtype_name,
  SAFE_CAST(revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SAFE_CAST(sales_segment_l_2_name_sync AS STRING) AS sales_segment_l_2_name_sync,
  SAFE_CAST(source_publishing_division AS STRING) AS source_publishing_division,
  SAFE_CAST(adsize_name AS STRING) AS adsize_name
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2025', '2026')
  AND SAFE_CAST(revenue_transaction_status AS STRING) IN ('Booked', 'Billed')
ORDER BY financial_year DESC, booking_number DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'Used as a financial year filter in multiple queries.', 'suggested_fix': 'Replace with a dynamic calculation (e.g., EXTRACT(YEAR FROM CURRENT_DATE())) or a dashboard parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2026', 'original_format': '2026', 'context': 'Used as a financial year filter in multiple queries.', 'suggested_fix': 'Replace with a dynamic calculation (e.g., EXTRACT(YEAR FROM CURRENT_DATE()) + 1) or a dashboard parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'Transaction statuses used to filter revenue records.', 'suggested_governance': 'Store valid transaction statuses in a governed lookup table and join or use a parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'Specific publishing division excluded from analysis.', 'suggested_governance': 'Store excluded divisions in a governed lookup table or use a parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Audio (Targeted)'"", ""'Audio (Non-Targeted)'"", ""'Events (Non-Targeted)'"", ""'Events (Targeted)'"", ""'Rich Media (Non-Targeted)'"", ""'Rich Media (Targeted)'"", ""'Social Display (Targeted)'"", ""'Social Display (Non-Targeted)'"", ""'Standard Display (Targeted)'"", ""'Standard Display (Non-Targeted)'"", ""'TTIV (Targeted)'"", ""'TTIV (Non-Targeted)'"", ""'Content Discovery (Non-Targeted)'"", ""'Content Discovery (Targeted)'"", ""'Native (Non-Targeted)'"", ""'Native (Targeted)'""], 'context': 'Specific ad type names used to filter content.', 'suggested_governance': 'Store valid ad types in a governed lookup table and join or use a parameter.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded financial years ('2025', '2026') with dynamic date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`)."", 'Replace hardcoded lookup values for `revenue_transaction_status`, `source_publishing_division`, and `fin_adtype_name` with joins to governed reference tables or dashboard parameters for flexibility and maintainability.']",6,f65a9149-93b4-4aa9-aef6-d12002853222
"WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    t0.revenue_type,
    t0.xtend_flag,
    t0.dw_asl_load_timestamp,
    -- Assuming a 'revenue' column exists for a finance dashboard
    SAFE_CAST(t0.revenue AS NUMERIC) AS revenue_amount, -- Placeholder for actual revenue metric
    -- Assuming a unique identifier for counting records/transactions
    t0.transaction_id -- Placeholder for a transaction ID
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
),
calculated_dimensions AS (
  SELECT
    financial_year,
    revenue_group_subtype,
    unified_publication_name,
    revenue_type,
    xtend_flag,
    dw_asl_load_timestamp,
    revenue_amount,
    transaction_id,
    CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_derived,
    MIN(DATETIME_TRUNC(dw_asl_load_timestamp, SECOND)) OVER () AS min_dw_asl_load_timestamp_overall -- Data freshness metric
  FROM base_data
)
SELECT
  financial_year,
  revenue_group_subtype,
  unified_publication_name,
  revenue_type,
  xtend_flag,
  revenue_type_derived,
  CASE
    WHEN (revenue_type_derived = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)'
    WHEN (revenue_type_derived = 'PRINT') THEN 'PRINT'
    WHEN (revenue_type_derived = 'XTEND') THEN 'XTEND ONLY'
    ELSE NULL
  END AS revenue_group_type_derived,
  min_dw_asl_load_timestamp_overall,
  COUNT(DISTINCT transaction_id) AS total_transactions, -- Inferred metric
  SUM(revenue_amount) AS total_revenue_amount, -- Inferred metric
  COUNT(*) AS record_count -- Basic record count
FROM calculated_dimensions
WHERE
  financial_year IN ('2024', '2025')
  AND revenue_group_subtype IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE')
  -- Note: The original query had 'digital' which might not match 'DIGITAL (excl.XTEND)'. Assuming case-insensitivity or intended match.
  AND (CASE WHEN (revenue_type_derived = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (revenue_type_derived = 'PRINT') THEN 'PRINT' WHEN (revenue_type_derived = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) IN ('DIGITAL (excl.XTEND)')
GROUP BY
  financial_year,
  revenue_group_subtype,
  unified_publication_name,
  revenue_type,
  xtend_flag,
  revenue_type_derived,
  revenue_group_type_derived,
  min_dw_asl_load_timestamp_overall
ORDER BY
  financial_year DESC,
  unified_publication_name ASC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) AS unique_financial_years,
  COUNT(DISTINCT revenue_group_subtype) AS unique_revenue_group_subtypes,
  COUNT(DISTINCT unified_publication_name) AS unique_unified_publication_names,
  COUNT(DISTINCT revenue_type) AS unique_revenue_types,
  COUNT(DISTINCT xtend_flag) AS unique_xtend_flags,
  MIN(dw_asl_load_timestamp) AS earliest_load_timestamp,
  MAX(dw_asl_load_timestamp) AS latest_load_timestamp
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025')
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_exists_test,
  CASE WHEN MAX(dw_asl_load_timestamp) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 1 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN COUNT(DISTINCT unified_publication_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS publication_name_test,
  CASE WHEN COUNT(DISTINCT revenue_group_subtype) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_subtype_test,
  CASE WHEN SUM(CASE WHEN financial_year IS NULL THEN 1 ELSE 0 END) = 0 THEN 'PASS' ELSE 'FAIL' END AS financial_year_not_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025')
LIMIT 1;","WITH derived_data AS (
  SELECT
    financial_year,
    revenue_group_subtype,
    revenue_type,
    xtend_flag,
    CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_derived
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
  WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025')
)
SELECT
  'Business Rule Validation' AS validation_type,
  'revenue_group_subtype_filter' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN revenue_group_subtype IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE') THEN 1 ELSE 0 END) AS records_passing_subtype_filter,
  'revenue_type_derived_logic' AS rule_name_2,
  SUM(CASE WHEN (xtend_flag = 'Y' AND revenue_type_derived = 'XTEND') OR (xtend_flag != 'Y' AND revenue_type_derived = revenue_type) THEN 1 ELSE 0 END) AS records_passing_revenue_type_derived_logic,
  'revenue_group_type_derived_logic_digital_match' AS rule_name_3,
  SUM(CASE WHEN (CASE WHEN (revenue_type_derived = 'DIGITAL') THEN 'DIGITAL (excl.XTEND)' WHEN (revenue_type_derived = 'PRINT') THEN 'PRINT' WHEN (revenue_type_derived = 'XTEND') THEN 'XTEND ONLY' ELSE NULL END) = 'DIGITAL (excl.XTEND)' THEN 1 ELSE 0 END) AS records_matching_digital_derived_type
FROM derived_data
LIMIT 1;","SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  revenue_group_subtype,
  unified_publication_name,
  revenue_type,
  xtend_flag,
  dw_asl_load_timestamp
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(financial_year AS STRING) IN ('2024', '2025')
ORDER BY dw_asl_load_timestamp DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2024', 'original_format': ""'2024'"", 'context': 'financial_year filter', 'suggested_fix': 'replace with a parameter or relative financial year calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`)', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025', 'original_format': ""'2025'"", 'context': 'financial_year filter', 'suggested_fix': 'replace with a parameter or relative financial year calculation', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'DIGITAL'"", ""'PROGRAMMATIC EXCHANGE'"", ""'PROGRAMMATIC SOURCE'""], 'context': 'revenue_group_subtype filter', 'suggested_governance': 'join to a `revenue_group_subtype_lookup` table or use a parameter for selection', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'DIGITAL (excl.XTEND)'"", ""'PRINT'"", ""'XTEND ONLY'"", ""'XTEND'"", ""'Y'""], 'context': 'CASE statements for derived dimensions and xtend_flag comparison', 'suggested_governance': ""Define these business rules in a central configuration table or view, or use parameters for 'Y' flag."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'digital'""], 'context': ""Filter on derived dimension `clmn5_` (revenue_group_type_derived). This value ('digital') does not directly match the output of the CASE statement ('DIGITAL (excl.XTEND)'). This could be a case-sensitivity issue or a logical mismatch."", 'suggested_governance': 'Ensure case consistency or use `LOWER()` for comparison. Ideally, filter against a governed list of derived types.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded financial years ('2024', '2025') with date parameters or relative date functions (e.g., `_DS_FINANCIAL_YEAR_START`, `_DS_FINANCIAL_YEAR_END`)."", 'Replace hardcoded revenue group subtypes with parameters or a join to a lookup table.', 'Externalize the logic for derived dimensions (e.g., `revenue_type_derived`, `revenue_group_type_derived`) into a governed view or configuration table to avoid hardcoding in multiple queries.', 'Ensure consistent casing for string comparisons or use `LOWER()`/`UPPER()` functions.']",7,61f1feb4-fc3e-4bee-b987-84c86cfe6425
"-- THIS IS THE MAIN SQL TO RUN --
-- Note: The provided SQL queries only extract distinct dimension values for filters.
-- This consolidated query assumes typical 'adsales_performance' metrics (e.g., revenue, volume)
-- and a 'report_date' column for time-based filtering, which are not explicitly in the input queries.
-- Adjust metric and date column names if they differ in the actual table.

WITH base_data AS (
  SELECT
    t0.advertiser_group,
    t0.product_group,
    t0.fin_adtype_name,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week,
    -- Assuming these are typical metrics for 'adsales_performance'
    SAFE_CAST(t0.revenue_amount AS NUMERIC) AS revenue_amount, -- Placeholder metric
    SAFE_CAST(t0.ad_volume AS NUMERIC) AS ad_volume, -- Placeholder metric
    -- Assuming a 'report_date' column exists for general date filtering
    SAFE_CAST(t0.report_date AS DATE) AS report_date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE
    SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Filter for recent data
    AND t0.product_group IS NOT NULL -- Exclude null product groups for general analysis
    AND t0.product_group != 'Unknown' -- Exclude 'Unknown' product groups for general analysis
)
SELECT
  financial_week,
  advertiser_group,
  product_group,
  fin_adtype_name,
  COUNT(*) AS record_count,
  SUM(revenue_amount) AS total_revenue,
  SUM(ad_volume) AS total_ad_volume,
  SAFE_DIVIDE(SUM(revenue_amount), SUM(ad_volume)) AS revenue_per_ad_volume
FROM base_data
WHERE
  product_group IN ('Commercial Content', 'Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige') -- Example filter from query 1
GROUP BY
  financial_week,
  advertiser_group,
  product_group,
  fin_adtype_name
ORDER BY
  financial_week DESC, total_revenue DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.financial_week AS INT64)) AS unique_financial_weeks,
  MIN(SAFE_CAST(t0.financial_week AS INT64)) AS earliest_financial_week,
  MAX(SAFE_CAST(t0.financial_week AS INT64)) AS latest_financial_week,
  COUNT(DISTINCT t0.advertiser_group) AS unique_advertiser_groups,
  COUNT(DISTINCT t0.product_group) AS unique_product_groups,
  COUNT(DISTINCT t0.fin_adtype_name) AS unique_fin_adtype_names,
  -- Assuming a 'report_date' column for general date range
  MIN(SAFE_CAST(t0.report_date AS DATE)) AS earliest_report_date,
  MAX(SAFE_CAST(t0.report_date AS DATE)) AS latest_report_date
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Limit scan for recent data","SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(DISTINCT t0.advertiser_group) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_group_test,
  CASE WHEN COUNT(DISTINCT t0.product_group) > 0 THEN 'PASS' ELSE 'FAIL' END AS product_group_test,
  CASE WHEN COUNT(DISTINCT t0.fin_adtype_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS fin_adtype_name_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.financial_week AS INT64)) > 0 THEN 'PASS' ELSE 'FAIL' END AS financial_week_test,
  -- Check for presence of specific hardcoded product groups
  SUM(CASE WHEN t0.product_group = 'Free News & Lifestyle' THEN 1 ELSE 0 END) AS free_news_lifestyle_count,
  SUM(CASE WHEN t0.product_group = 'Unknown' THEN 1 ELSE 0 END) AS unknown_product_group_count,
  -- Assuming a 'report_date' column for freshness
  MAX(SAFE_CAST(t0.report_date AS DATE)) AS latest_report_date
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) -- Check recent data","SELECT
  'Business Rule Validation' AS validation_type,
  'product_group_distribution' AS rule_name,
  t0.product_group,
  COUNT(*) AS record_count,
  SAFE_DIVIDE(COUNT(*), SUM(COUNT(*)) OVER()) * 100 AS percentage_of_total
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Limit scan for recent data
GROUP BY t0.product_group
ORDER BY record_count DESC;","SELECT
  t0.advertiser_group,
  t0.product_group,
  t0.fin_adtype_name,
  SAFE_CAST(t0.financial_week AS INT64) AS financial_week,
  -- Assuming typical metrics for 'adsales_performance'
  SAFE_CAST(t0.revenue_amount AS NUMERIC) AS revenue_amount, -- Placeholder metric
  SAFE_CAST(t0.ad_volume AS NUMERIC) AS ad_volume, -- Placeholder metric
  SAFE_CAST(t0.report_date AS DATE) AS report_date -- Assuming a 'report_date' column
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) -- Get recent sample
ORDER BY SAFE_CAST(t0.report_date AS DATE) DESC, SAFE_CAST(t0.financial_week AS INT64) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Commercial Content'"", ""'Free News & Lifestyle'"", ""'State & Communities'"", ""'The Australian & Prestige'"", ""''""], 'context': 'Used in WHERE clause for product_group filtering in query 1 and 3.', 'suggested_governance': 'These product group categories should be stored in a reference table (e.g., `dim_product_group`) and joined to the main table, or managed as parameters.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Unknown'""], 'context': 'Used in WHERE clause for product_group exclusion in query 2.', 'suggested_governance': ""Standardize 'Unknown' values or handle them consistently via a data quality process. If 'Unknown' is a valid category, it should be part of the `dim_product_group` table."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded product group values with parameters in Looker Studio or join to a governed `dim_product_group` reference table.', ""Implement a data quality process to standardize `product_group` values, especially 'Unknown' and empty strings.""]",8,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
"WITH
  base_data AS (
    SELECT
      t0.Advertiser,
      t0.PortfolioParentGroup,
      t0.PortfolioChildGroup,
      t0.RevenueGross,
      t0.TransactionType,
      t0.FinancialQuarter,
      t0.FinancialYear,
      t0.FinancialMonthNumber
    FROM
      `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
  ),
  calculated_dimensions AS (
    SELECT
      Advertiser,
      PortfolioParentGroup,
      PortfolioChildGroup,
      SAFE_CAST(RevenueGross AS NUMERIC) AS RevenueGross,
      TransactionType,
      FinancialQuarter,
      FinancialYear,
      FinancialMonthNumber,
      -- Calculated Dimension: Financial Period (from Query 2 & 3)
      CONCAT('FY', SAFE_CAST(FinancialYear AS STRING), ' - ', SAFE_CAST(FinancialQuarter AS STRING)) AS FinancialPeriod,
      -- Calculated Dimension: Adjusted Financial Month Number (from Query 3)
      CASE
        WHEN FinancialMonthNumber = 1 THEN 7
        WHEN FinancialMonthNumber = 2 THEN 8
        WHEN FinancialMonthNumber = 3 THEN 9
        WHEN FinancialMonthNumber = 4 THEN 10
        WHEN FinancialMonthNumber = 5 THEN 11
        WHEN FinancialMonthNumber = 6 THEN 12
        WHEN FinancialMonthNumber = 7 THEN 1
        WHEN FinancialMonthNumber = 8 THEN 2
        WHEN FinancialMonthNumber = 9 THEN 3
        WHEN FinancialMonthNumber = 10 THEN 4
        WHEN FinancialMonthNumber = 11 THEN 5
        WHEN FinancialMonthNumber = 12 THEN 6
        ELSE NULL
      END AS AdjustedFinancialMonthNumber,
      -- Hardcoded reference date from Query 3
      SAFE_CAST('2025-06-26' AS DATE) AS ReferenceDate_Q3,
      -- Calculated Date: Date from FinancialYear, AdjustedFinancialMonthNumber, Day 1 (from Query 3)
      SAFE_CAST(DATE(FinancialYear, CASE
        WHEN FinancialMonthNumber = 1 THEN 7
        WHEN FinancialMonthNumber = 2 THEN 8
        WHEN FinancialMonthNumber = 3 THEN 9
        WHEN FinancialMonthNumber = 4 THEN 10
        WHEN FinancialMonthNumber = 5 THEN 11
        WHEN FinancialMonthNumber = 6 THEN 12
        WHEN FinancialMonthNumber = 7 THEN 1
        WHEN FinancialMonthNumber = 8 THEN 2
        WHEN FinancialMonthNumber = 9 THEN 3
        WHEN FinancialMonthNumber = 10 THEN 4
        WHEN FinancialMonthNumber = 11 THEN 5
        WHEN FinancialMonthNumber = 12 THEN 6
        ELSE NULL
      END, 1) AS DATETIME) AS FinancialMonthDay1_DateTime,
      -- Calculated Dimension: Month Start Date (from Query 3)
      SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(FinancialYear, CASE
        WHEN FinancialMonthNumber = 1 THEN 7
        WHEN FinancialMonthNumber = 2 THEN 8
        WHEN FinancialMonthNumber = 3 THEN 9
        WHEN FinancialMonthNumber = 4 THEN 10
        WHEN FinancialMonthNumber = 5 THEN 11
        WHEN FinancialMonthNumber = 6 THEN 12
        WHEN FinancialMonthNumber = 7 THEN 1
        WHEN FinancialMonthNumber = 8 THEN 2
        WHEN FinancialMonthNumber = 9 THEN 3
        WHEN FinancialMonthNumber = 10 THEN 4
        WHEN FinancialMonthNumber = 11 THEN 5
        WHEN FinancialMonthNumber = 12 THEN 6
        ELSE NULL
      END, 1) AS DATETIME), MONTH) AS DATE) AS MonthStartDate
    FROM
      base_data
  )
SELECT
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  FinancialYear,
  FinancialQuarter,
  FinancialMonthNumber,
  FinancialPeriod,
  AdjustedFinancialMonthNumber,
  MonthStartDate,
  -- Replicate the boolean filter from Query 3
  (SAFE_CAST(FinancialMonthDay1_DateTime AS DATE) <= ReferenceDate_Q3) AS IsCurrentOrPastMonth_Q3Ref,
  SUM(RevenueGross) AS TotalGrossRevenue
FROM
  calculated_dimensions
WHERE
  -- Example filter to limit data for analysis, focusing on recent fiscal periods
  FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
GROUP BY
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  TransactionType,
  FinancialYear,
  FinancialQuarter,
  FinancialMonthNumber,
  FinancialPeriod,
  AdjustedFinancialMonthNumber,
  MonthStartDate,
  IsCurrentOrPastMonth_Q3Ref
ORDER BY
  TotalGrossRevenue DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialQuarter AS STRING)) as unique_financial_periods,
  COUNT(DISTINCT Advertiser) as unique_advertisers,
  COUNT(DISTINCT PortfolioParentGroup) as unique_portfolio_parent_groups,
  COUNT(DISTINCT PortfolioChildGroup) as unique_portfolio_child_groups,
  COUNT(DISTINCT TransactionType) as unique_transaction_types,
  MIN(SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialQuarter AS STRING)) as earliest_financial_period,
  MAX(SAFE_CAST(FinancialYear AS STRING) || '-' || SAFE_CAST(FinancialQuarter AS STRING)) as latest_financial_period,
  SUM(CASE WHEN RevenueGross IS NULL THEN 1 ELSE 0 END) as null_revenue_count,
  APPROX_COUNT_DISTINCT(CONCAT(Advertiser, PortfolioParentGroup, SAFE_CAST(FinancialYear AS STRING), SAFE_CAST(FinancialQuarter AS STRING), SAFE_CAST(FinancialMonthNumber AS STRING))) as approx_unique_rows_at_grain
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE
  FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Look at last 2 fiscal years
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(RevenueGross AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_present_test,
  CASE WHEN MAX(FinancialYear) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as data_freshness_year_test,
  CASE WHEN COUNT(CASE WHEN TransactionType IS NULL THEN 1 ELSE 0 END) = 0 THEN 'PASS' ELSE 'FAIL' END as transaction_type_not_null_test,
  CASE WHEN COUNT(CASE WHEN FinancialMonthNumber NOT BETWEEN 1 AND 12 THEN 1 ELSE 0 END) = 0 THEN 'PASS' ELSE 'FAIL' END as financial_month_valid_test
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE
  FinancialYear >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2
LIMIT 1;","WITH
    fiscal_month_mapping_check AS (
      SELECT
        FinancialMonthNumber,
        CASE
          WHEN FinancialMonthNumber = 1 THEN 7
          WHEN FinancialMonthNumber = 2 THEN 8
          WHEN FinancialMonthNumber = 3 THEN 9
          WHEN FinancialMonthNumber = 4 THEN 10
          WHEN FinancialMonthNumber = 5 THEN 11
          WHEN FinancialMonthNumber = 6 THEN 12
          WHEN FinancialMonthNumber = 7 THEN 1
          WHEN FinancialMonthNumber = 8 THEN 2
          WHEN FinancialMonthNumber = 9 THEN 3
          WHEN FinancialMonthNumber = 10 THEN 4
          WHEN FinancialMonthNumber = 11 THEN 5
          WHEN FinancialMonthNumber = 12 THEN 6
          ELSE NULL
        END AS ExpectedAdjustedMonth,
        COUNT(*) AS record_count
      FROM
        `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
      WHERE
        FinancialYear = 2025 -- Focus on the year where this logic was applied in the dashboard queries
      GROUP BY
        FinancialMonthNumber
    )
  SELECT
    'Business Rule Validation' as validation_type,
    'Fiscal Month Adjustment Mapping' as rule_name,
    FinancialMonthNumber,
    ExpectedAdjustedMonth,
    record_count,
    CASE
      WHEN ExpectedAdjustedMonth IS NOT NULL THEN 'PASS'
      ELSE 'FAIL'
    END AS mapping_status
  FROM
    fiscal_month_mapping_check
  ORDER BY FinancialMonthNumber;","SELECT
  Advertiser,
  PortfolioParentGroup,
  PortfolioChildGroup,
  SAFE_CAST(RevenueGross AS NUMERIC) AS RevenueGross,
  TransactionType,
  FinancialQuarter,
  FinancialYear,
  FinancialMonthNumber
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
WHERE
  FinancialYear = 2025 AND FinancialQuarter = 4 -- Focus on the quarter seen in queries
ORDER BY
  RevenueGross DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-26', 'original_format': '2025-06-26 07:36:48.083696+00', 'context': ""Used as a reference date (clmn0_) to determine 'current or past' financial months (clmn13_ = clmn11_ <= clmn7_)."", 'suggested_fix': ""Replace with CURRENT_DATE() or a dashboard date parameter to make the 'current' period dynamic."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['1 THEN 7', '2 THEN 8', '3 THEN 9', '4 THEN 10', '5 THEN 11', '6 THEN 12', '7 THEN 1', '8 THEN 2', '9 THEN 3', '10 THEN 4', '11 THEN 5', '12 THEN 6'], 'context': 'Fiscal month mapping in a CASE statement to adjust month numbers for fiscal year alignment.', 'suggested_governance': 'Store fiscal month mappings in a dedicated configuration table or implement as a UDF for centralized management.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'INDEPENDENT AGENCIES NSW'"", ""'CONSORTIUM VIC'"", ""'VIC CON B3'"", ""'VIC CON B2'"", ""'VIC CON B1'""], 'context': 'Specific PortfolioParentGroup and PortfolioChildGroup values used for filtering.', 'suggested_governance': 'Use a governed dimension table for Portfolio Groups, allowing for dynamic filtering and easier updates.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Guaranteed'"", ""'Deal'""], 'context': 'Specific TransactionType values used for filtering.', 'suggested_governance': 'Use a governed dimension table for Transaction Types.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'FY2025 - Q4'""], 'context': 'Specific Financial Period used for filtering.', 'suggested_governance': 'Use a date dimension table or dashboard parameters for selecting financial periods.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)`).', 'Replace hardcoded lookup values (e.g., Portfolio Groups, Transaction Types) with joins to governed reference tables.', 'Use configuration tables for business rules like fiscal month mapping instead of hardcoded CASE statements.', 'Allow users to select Financial Periods (Year/Quarter) via dashboard parameters.']",9,6f1c8731-02da-464f-b146-bf2947860735
"-- Primary Analysis SQL: Analyze the distribution and uniqueness of account mappings
WITH AccountMappings AS (
  SELECT
    SAFE_CAST(Adpoint_Account AS STRING) AS Adpoint_Account,
    SAFE_CAST(Genera_Booking_Account AS STRING) AS Genera_Booking_Account,
    SAFE_CAST(Medium_Rare_Debtor_Account AS STRING) AS Medium_Rare_Debtor_Account,
    SAFE_CAST(National_Debtor_Account AS STRING) AS National_Debtor_Account
  FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
)
SELECT
  Adpoint_Account,
  Genera_Booking_Account,
  Medium_Rare_Debtor_Account,
  National_Debtor_Account,
  COUNT(*) AS mapping_count,
  -- Identify cases where one Adpoint_Account maps to multiple Genera_Booking_Account
  COUNT(DISTINCT Genera_Booking_Account) OVER (PARTITION BY Adpoint_Account) AS adpoint_to_genera_distinct_count,
  COUNT(DISTINCT Medium_Rare_Debtor_Account) OVER (PARTITION BY Adpoint_Account) AS adpoint_to_mr_debtor_distinct_count,
  COUNT(DISTINCT National_Debtor_Account) OVER (PARTITION BY Adpoint_Account) AS adpoint_to_national_debtor_distinct_count
FROM AccountMappings
GROUP BY
  Adpoint_Account,
  Genera_Booking_Account,
  Medium_Rare_Debtor_Account,
  National_Debtor_Account
ORDER BY
  mapping_count DESC
LIMIT 1000;","-- Structure SQL: Understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis for v_asl_gbaba_act_xref' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(Adpoint_Account AS STRING)) as unique_adpoint_accounts,
  COUNT(DISTINCT SAFE_CAST(Genera_Booking_Account AS STRING)) as unique_genera_booking_accounts,
  COUNT(DISTINCT SAFE_CAST(Medium_Rare_Debtor_Account AS STRING)) as unique_medium_rare_debtor_accounts,
  COUNT(DISTINCT SAFE_CAST(National_Debtor_Account AS STRING)) as unique_national_debtor_accounts,
  -- Sample data for column types and values
  ANY_VALUE(SAFE_CAST(Adpoint_Account AS STRING)) as sample_adpoint_account,
  ANY_VALUE(SAFE_CAST(Genera_Booking_Account AS STRING)) as sample_genera_booking_account,
  ANY_VALUE(SAFE_CAST(Medium_Rare_Debtor_Account AS STRING)) as sample_medium_rare_debtor_account,
  ANY_VALUE(SAFE_CAST(National_Debtor_Account AS STRING)) as sample_national_debtor_account
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1;","-- Validation SQL: Quick validation that all metric calculations work syntactically
SELECT
  'Validation Check for v_asl_gbaba_act_xref' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_exists_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(Adpoint_Account AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as adpoint_account_not_empty_test,
  CASE WHEN EXISTS (
    SELECT 1 FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
    WHERE SAFE_CAST(Adpoint_Account AS STRING) = '56694'
    LIMIT 1
  ) THEN 'PASS' ELSE 'FAIL' END as hardcoded_filter_value_exists_test,
  -- Check last update time
  (SELECT
    CASE WHEN DATETIME_DIFF(CURRENT_DATETIME(""Australia/Sydney""), DATETIME(timestamp_millis(last_modified_time), ""Australia/Sydney""), HOUR) < 24
    THEN 'PASS' ELSE 'FAIL' END
  FROM `ncau-data-newsquery-prd.sdm_advertisingexternals.__TABLES__`
  WHERE table_id = 'gbaba_act_xref'
  LIMIT 1) AS last_update_freshness_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
LIMIT 1;","-- Business Rules SQL: Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' as validation_type,
  'Adpoint_Account_56694_filter_impact' as rule_name,
  COUNT(*) as total_records_in_view,
  SUM(CASE WHEN SAFE_CAST(Adpoint_Account AS STRING) = '56694' THEN 1 ELSE 0 END) as records_matching_hardcoded_filter,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(Adpoint_Account AS STRING) = '56694' THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_matching_filter
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`;","-- Sample Data SQL: Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(Adpoint_Account AS STRING) AS Adpoint_Account,
  SAFE_CAST(Genera_Booking_Account AS STRING) AS Genera_Booking_Account,
  SAFE_CAST(Medium_Rare_Debtor_Account AS STRING) AS Medium_Rare_Debtor_Account,
  SAFE_CAST(National_Debtor_Account AS STRING) AS National_Debtor_Account
FROM `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`
WHERE SAFE_CAST(Adpoint_Account AS STRING) IS NOT NULL -- Ensure some data exists
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'56694'""], 'context': 'Adpoint_Account filter value in query job_RMTehvLY6Vh0okkfYselduWZxgCN', 'suggested_governance': 'replace with a dashboard parameter or a lookup table for valid account IDs', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'table_metadata', 'hardcoded_values': [""'gbaba_act_xref'""], 'context': 'table_id filter in query job_kIuhjiLMpatUagGf9rwGeUEihEfV to get last update time', 'suggested_governance': 'derive table_id dynamically from the primary data source or use a configuration table', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'timezone', 'hardcoded_values': [""'Australia/Sydney'""], 'context': 'timezone for last_update_time calculation in query job_kIuhjiLMpatUagGf9rwGeUEihEfV', 'suggested_governance': 'use a global configuration parameter for timezone or derive from user settings', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded account IDs with dashboard parameters to allow dynamic filtering.', 'Consider using a configuration table for table metadata (like table_id and timezone) if dynamic `INFORMATION_SCHEMA` queries are not feasible in Looker Studio.']",10,258a722d-9b6e-45df-ba00-1b9954ec36b2
"WITH
  scenario_counts AS (
    SELECT
      SAFE_CAST(t0.scenario AS STRING) AS scenario,
      COUNT(1) AS records_by_scenario
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    GROUP BY
      1
  )
SELECT
  'Unified Metrics' AS analysis_type,
  scenario,
  records_by_scenario,
  SUM(records_by_scenario) OVER () AS total_records_overall
FROM
  scenario_counts
ORDER BY
  records_by_scenario DESC
LIMIT 100; -- Sample for analysis","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(scenario AS STRING)) AS unique_scenarios,
  APPROX_COUNT_DISTINCT(scenario) AS approx_unique_scenarios_for_large_data
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE
    WHEN COUNT(1) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS record_count_test,
  CASE
    WHEN COUNT(DISTINCT SAFE_CAST(scenario AS STRING)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS scenario_distinct_test,
  CASE
    WHEN COUNT(scenario) = COUNT(1) THEN 'PASS'
    ELSE 'FAIL'
  END AS scenario_not_null_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Scenario Distribution' AS rule_name,
  SAFE_CAST(scenario AS STRING) AS scenario_value,
  COUNT(1) AS records_count,
  ROUND(COUNT(1) * 100.0 / SUM(COUNT(1)) OVER (), 2) AS percentage_of_total
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
GROUP BY
  1, 2
ORDER BY
  records_count DESC
LIMIT 10;","SELECT
  SAFE_CAST(scenario AS STRING) AS scenario
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
WHERE
  scenario IS NOT NULL
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'other', 'hardcoded_values': [""''""], 'context': 'empty string used as a dimension placeholder (clmn0_) in a Looker Studio generated query', 'suggested_governance': 'review Looker Studio configuration to avoid unnecessary constant dimensions or ensure proper column selection', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Review Looker Studio dashboard configuration to understand the purpose of the hardcoded empty string dimension and potentially remove it if not serving a business purpose.', 'Implement date parameters for filtering if the underlying `digital_subscriptions` table contains date columns, to allow for dynamic date range selection.']",11,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
"WITH base_data AS (
  SELECT
    t0.advertiser,
    t0.buyer,
    t0.revenuenet,
    t0.source,
    UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS transaction_type_upper,
    CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) AS fiscal_period_string,
    SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS reporting_month
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
  WHERE
    -- Apply common filters observed across queries
    UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
    AND SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) BETWEEN DATE('2024-11-01') AND DATE('2025-06-01') -- Broader date range from Q1
    AND t0.source IN ('DFP', 'Index Exchange', 'Rubicon', 'AdX', 'AppNexus', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Tremor') -- Combined source filter
    AND t0.advertiser IN ('The Smith Family *', 'Kmart Corporation *', 'Target Corporation *', 'Myer *') -- Combined advertiser filter
    AND CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) IN ('FY25 Q2', 'FY25 Q3', 'FY25 Q4') -- Combined fiscal period filter
)
SELECT
  reporting_month,
  fiscal_period_string,
  advertiser,
  source,
  transaction_type_upper,
  SUM(SAFE_CAST(revenuenet AS NUMERIC)) AS total_revenue_net,
  COUNT(DISTINCT buyer) AS distinct_buyers
FROM base_data
GROUP BY
  reporting_month,
  fiscal_period_string,
  advertiser,
  source,
  transaction_type_upper
ORDER BY
  reporting_month DESC, total_revenue_net DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.financialyear AS STRING)) AS unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(t0.financialquarter AS STRING)) AS unique_financial_quarters,
  COUNT(DISTINCT SAFE_CAST(t0.financialmonthnumber AS STRING)) AS unique_financial_months,
  COUNT(DISTINCT t0.advertiser) AS unique_advertisers,
  COUNT(DISTINCT t0.buyer) AS unique_buyers,
  COUNT(DISTINCT t0.source) AS unique_sources,
  COUNT(DISTINCT t0.source_transactiontype) AS unique_transaction_types,
  MIN(SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE)) AS earliest_reporting_month,
  MAX(SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE)) AS latest_reporting_month
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 18 MONTH);","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.revenuenet AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_check,
  CASE WHEN COUNT(DISTINCT t0.advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END AS distinct_advertisers_check,
  CASE WHEN MAX(SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_check,
  CASE WHEN COUNT(CASE WHEN UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS transaction_type_filter_coverage_check
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'fiscal_year_adjustment_logic' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE
    WHEN
      SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) IS NOT NULL
      AND SAFE_CAST(t0.financialyear AS STRING) IS NOT NULL
      AND SAFE_CAST(t0.financialmonthnumber AS STRING) IS NOT NULL
    THEN 1 ELSE 0 END) AS records_with_valid_date_components,
  SUM(CASE
    WHEN
      SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) = DATE_TRUNC(DATE_SUB(DATE(t0.financialyear, t0.financialmonthnumber, 1), INTERVAL 6 MONTH), MONTH)
    THEN 1 ELSE 0 END) AS records_matching_expected_fiscal_date_logic,
  SAFE_DIVIDE(SUM(CASE
    WHEN
      SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) = DATE_TRUNC(DATE_SUB(DATE(t0.financialyear, t0.financialmonthnumber, 1), INTERVAL 6 MONTH), MONTH)
    THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH);","SELECT
  SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS reporting_month,
  CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) AS fiscal_period_string,
  t0.advertiser,
  t0.buyer,
  t0.source,
  UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS transaction_type_upper,
  SAFE_CAST(t0.revenuenet AS NUMERIC) AS revenuenet
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(t0.financialyear, t0.financialmonthnumber, 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
ORDER BY reporting_month DESC, revenuenet DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2024-11-01', 'original_format': ""DATE '2024-11-01'"", 'context': 'used as a specific start date in reporting_month filter', 'suggested_fix': 'replace with a dashboard parameter or relative date function (e.g., DATE_TRUNC(CURRENT_DATE(), MONTH))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-01', 'original_format': ""DATE '2025-06-01'"", 'context': 'used as a specific end date in reporting_month filter', 'suggested_fix': 'replace with a dashboard parameter or relative date function (e.g., DATE_ADD(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 MONTH))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-05-01', 'original_format': ""DATE '2025-05-01'"", 'context': 'used as a specific reporting_month filter in buyer queries', 'suggested_fix': 'replace with a dashboard parameter or relative date function', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'AdX'"", ""'AppNexus'"", ""'DFP'"", ""'Index Exchange'"", ""'InSkin'"", ""'Kargo'"", ""'Playground XYZ'"", ""'PubMatic'"", ""'Rubicon'"", ""'Tremor'""], 'context': 'source names hardcoded in WHERE clause', 'suggested_governance': 'join to a `source_lookup` table or use a dashboard parameter for selection', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DEAL'"", ""'UFR'"", ""'PG - CPD'"", ""'PG - CPM'"", ""'DIRECT'""], 'context': 'source_transactiontype values hardcoded in WHERE clause', 'suggested_governance': 'join to a `transaction_type_lookup` table or use a dashboard parameter for selection', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'business_entities', 'hardcoded_values': [""'The Smith Family *'"", ""'Kmart Corporation *'"", ""'Target Corporation *'"", ""'Myer *'""], 'context': 'advertiser names hardcoded in WHERE clause', 'suggested_governance': 'join to an `advertiser_dimension` table or use a dashboard parameter for selection', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'fiscal_periods', 'hardcoded_values': [""'FY25 Q2'"", ""'FY25 Q3'"", ""'FY25 Q4'""], 'context': 'fiscal period strings hardcoded in WHERE clause', 'suggested_governance': 'derive dynamically from a fiscal calendar table or use a dashboard parameter for selection', 'impact': 'medium', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters (e.g., `start_date`, `end_date`) or relative date functions (e.g., `DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)`).', 'Replace hardcoded lookup values (Source, Transaction Type) with joins to governed reference tables or multi-select dashboard parameters.', 'Replace hardcoded business entity names (Advertiser) with joins to a governed dimension table or multi-select dashboard parameters.', ""Derive fiscal periods dynamically from a governed fiscal calendar table instead of hardcoding specific 'FYxx Qx' strings.""]",12,783f341c-8660-4e90-bab8-9bc860119cf5
"WITH FinMonthData AS (
  SELECT
    t0.CurrentMonthFlag,
    t0.FinancialMonthNumber,
    t0.FinancialYear,
    t0.Source,
    t0.StaticDays,
    t0.NumDays,
    -- Inferred metrics for a Pacing Dashboard, assuming these columns exist in programmatic_fin_month
    SAFE_CAST(t0.Spend AS NUMERIC) AS spend_metric,
    SAFE_CAST(t0.Revenue AS NUMERIC) AS revenue_metric
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
  WHERE t0.CurrentMonthFlag = 1 -- Common filter from both queries
    AND (t0.Source = 'Kargo' OR t0.Source NOT IN ('AdX') OR t0.Source IS NULL) -- Combined source filters
),
ProductTypeData AS (
  SELECT
    t0.ProductType
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
)
SELECT
  -- Core Dimensions
  SAFE_CAST(fmd.FinancialYear AS STRING) AS financial_year,
  SAFE_CAST(fmd.FinancialMonthNumber AS STRING) AS financial_month_number,
  fmd.Source AS source_dimension,
  fmd.StaticDays AS static_days,
  SAFE_CAST(fmd.NumDays AS STRING) AS num_days,
  -- Calculated Display Dimensions
  CONCAT(SAFE_CAST(fmd.StaticDays AS STRING), ' (', SAFE_CAST(((fmd.FinancialYear*100)+fmd.FinancialMonthNumber) AS STRING), ')') AS static_days_with_period,
  CONCAT(SAFE_CAST(fmd.NumDays AS STRING), ' (', SAFE_CAST(((fmd.FinancialYear*100)+fmd.FinancialMonthNumber) AS STRING), ')') AS num_days_with_period,
  -- Aggregated Inferred Metrics
  SUM(fmd.spend_metric) AS total_spend,
  SUM(fmd.revenue_metric) AS total_revenue,
  -- Sample ProductType (from a separate table, no direct join key identified)
  (SELECT STRING_AGG(ProductType, ', ') FROM ProductTypeData LIMIT 1) AS sample_product_types
FROM FinMonthData fmd
GROUP BY
  financial_year,
  financial_month_number,
  source_dimension,
  static_days,
  num_days,
  static_days_with_period,
  num_days_with_period
ORDER BY financial_year DESC, financial_month_number DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.FinancialYear AS STRING) || LPAD(SAFE_CAST(t0.FinancialMonthNumber AS STRING), 2, '0')) as unique_financial_periods,
  COUNT(DISTINCT t0.Source) as unique_sources,
  COUNT(DISTINCT t0.StaticDays) as unique_static_days,
  COUNT(DISTINCT t0.NumDays) as unique_num_days,
  MIN(SAFE_CAST(t0.FinancialYear AS STRING) || LPAD(SAFE_CAST(t0.FinancialMonthNumber AS STRING), 2, '0')) as earliest_financial_period,
  MAX(SAFE_CAST(t0.FinancialYear AS STRING) || LPAD(SAFE_CAST(t0.FinancialMonthNumber AS STRING), 2, '0')) as latest_financial_period,
  SUM(CASE WHEN t0.CurrentMonthFlag = 1 THEN 1 ELSE 0 END) as records_flagged_current_month
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_presence_test,
  CASE WHEN SUM(CASE WHEN t0.CurrentMonthFlag = 1 THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as current_month_flag_test,
  CASE WHEN COUNT(DISTINCT t0.Source) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_sources_test,
  CASE WHEN SUM(CASE WHEN t0.Source = 'Kargo' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as kargo_source_test,
  CASE WHEN SUM(CASE WHEN t0.Source NOT IN ('AdX') OR t0.Source IS NULL THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as non_adx_source_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE t0.CurrentMonthFlag = 1
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'current_month_flag_consistency' as rule_name_current_month,
  COUNT(*) as records_tested_current_month,
  SUM(CASE WHEN t0.CurrentMonthFlag = 1 THEN 1 ELSE 0 END) as records_flagged_as_current,
  SAFE_DIVIDE(SUM(CASE WHEN t0.CurrentMonthFlag = 1 THEN 1 ELSE 0 END), COUNT(*)) * 100 as current_month_flag_percentage,
  'source_kargo_filter_impact' as rule_name_kargo,
  SUM(CASE WHEN t0.CurrentMonthFlag = 1 AND t0.Source = 'Kargo' THEN 1 ELSE 0 END) as records_kargo_filtered,
  'source_non_adx_filter_impact' as rule_name_non_adx,
  SUM(CASE WHEN t0.CurrentMonthFlag = 1 AND (t0.Source NOT IN ('AdX') OR t0.Source IS NULL) THEN 1 ELSE 0 END) as records_non_adx_filtered
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE t0.CurrentMonthFlag = 1
LIMIT 1;","SELECT
  t0.CurrentMonthFlag,
  t0.FinancialMonthNumber,
  t0.FinancialYear,
  t0.Source,
  t0.StaticDays,
  t0.NumDays,
  -- Inferring potential metric columns for a pacing dashboard (example values)
  SAFE_CAST(NULL AS NUMERIC) AS inferred_spend_example,
  SAFE_CAST(NULL AS NUMERIC) AS inferred_revenue_example
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE t0.CurrentMonthFlag = 1
ORDER BY t0.FinancialYear DESC, t0.FinancialMonthNumber DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['1'], 'context': 'CurrentMonthFlag is hardcoded to 1 to identify the current period.', 'suggested_governance': 'Derive current month dynamically using a date dimension table or a Looker Studio parameter.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Kargo'"", ""'AdX'""], 'context': 'Specific source names are hardcoded for filtering.', 'suggested_governance': 'Manage source names in a reference table and join to it, or use Looker Studio parameters for filter values.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded 'CurrentMonthFlag = 1' with a dynamic date calculation or a Looker Studio date parameter."", ""Replace hardcoded source names ('Kargo', 'AdX') with Looker Studio filter controls or join to a governed source dimension table.""]",13,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
"WITH base_adsales_data AS (
  SELECT
    t0.financial_year,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week_int,
    t0.revenue_group_subtype,
    -- Assuming 'revenue_amount' and 'adsales_transaction_id' are key columns for a pacing report
    -- These columns are inferred based on dashboard name 'AdSales Data for Pacing Report'
    -- and table name 'adsales_performance'. Please replace with actual column names if different.
    SAFE_CAST(t0.revenue_amount AS NUMERIC) AS revenue_amount,
    t0.adsales_transaction_id
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE
    t0.financial_year IN ('2024', '2025') -- Hardcoded years from queries
    AND (
      t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' -- Example filter from query 1
      OR t0.revenue_group_subtype IS NOT NULL -- Or other relevant subtypes
    )
    AND (
      SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) -- Hardcoded week exclusion from query 3
      OR SAFE_CAST(t0.financial_week AS INT64) IS NULL
    )
    -- Add a reasonable date filter for performance, if a date column exists
    -- For example, if 'report_date' exists:
    -- AND SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
)
SELECT
  financial_year,
  financial_week_int AS financial_week,
  revenue_group_subtype,
  SUM(revenue_amount) AS total_adsales_revenue,
  COUNT(DISTINCT adsales_transaction_id) AS unique_adsales_transactions,
  COUNT(*) AS record_count
FROM base_adsales_data
WHERE revenue_amount IS NOT NULL -- Ensure only valid revenue records are counted
GROUP BY
  financial_year,
  financial_week_int,
  revenue_group_subtype
ORDER BY
  financial_year DESC,
  financial_week_int DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.financial_year) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(t0.financial_week AS STRING)) as unique_financial_weeks,
  COUNT(DISTINCT t0.revenue_group_subtype) as unique_revenue_subtypes,
  MIN(t0.financial_year) as earliest_financial_year,
  MAX(t0.financial_year) as latest_financial_year,
  APPROX_COUNT_DISTINCT(t0.financial_year || '-' || SAFE_CAST(t0.financial_week AS STRING) || '-' || t0.revenue_group_subtype) as approx_unique_combinations
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE
  t0.financial_year IN ('2024', '2025') -- Focus on relevant years for structure analysis
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(DISTINCT t0.financial_year) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_data_test,
  CASE WHEN COUNT(DISTINCT t0.revenue_group_subtype) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_subtype_data_test,
  CASE WHEN MAX(t0.financial_year) >= '2024' THEN 'PASS' ELSE 'FAIL' END as financial_year_freshness_test,
  CASE WHEN SUM(CASE WHEN t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as sundry_adsales_overlay_presence_test,
  CASE WHEN SUM(CASE WHEN SAFE_CAST(t0.financial_week AS INT64) IN (47, 48, 49, 50, 51, 52) THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as excluded_weeks_presence_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE t0.financial_year IN ('2024', '2025')
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'financial_week_exclusion_rule' as rule_name,
  COUNT(*) as total_records_in_scope,
  SUM(CASE
    WHEN t0.financial_year IN ('2024', '2025') AND (SAFE_CAST(t0.financial_week AS INT64) IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(t0.financial_week AS INT64) IS NULL)
    THEN 1 ELSE 0
  END) as records_matching_exclusion_criteria,
  SUM(CASE
    WHEN t0.financial_year IN ('2024', '2025') AND (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) AND SAFE_CAST(t0.financial_week AS INT64) IS NOT NULL)
    THEN 1 ELSE 0
  END) as records_passing_exclusion_criteria,
  SAFE_DIVIDE(
    SUM(CASE
      WHEN t0.financial_year IN ('2024', '2025') AND (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) AND SAFE_CAST(t0.financial_week AS INT64) IS NOT NULL)
      THEN 1 ELSE 0
    END),
    COUNT(*)
  ) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE t0.financial_year IN ('2024', '2025');","SELECT
  t0.financial_year,
  SAFE_CAST(t0.financial_week AS INT64) AS financial_week,
  t0.revenue_group_subtype,
  -- Assuming 'revenue_amount' and 'adsales_transaction_id' are present
  SAFE_CAST(t0.revenue_amount AS NUMERIC) AS revenue_amount,
  t0.adsales_transaction_id
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE
  t0.financial_year IN ('2024', '2025')
  AND SAFE_CAST(t0.financial_week AS INT64) IS NOT NULL
  AND t0.revenue_group_subtype IS NOT NULL
ORDER BY
  t0.financial_year DESC,
  SAFE_CAST(t0.financial_week AS INT64) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'SUNDRY ADSALES OVERLAY'""], 'context': 'Specific revenue group subtype used as a filter.', 'suggested_governance': 'This value should ideally be managed in a reference table for revenue group subtypes, allowing for easier updates and consistency.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'2025'"", ""'2024'""], 'context': 'Specific financial years used as filters.', 'suggested_governance': 'These should be replaced with dynamic calculations (e.g., `CURRENT_FINANCIAL_YEAR()`, `NEXT_FINANCIAL_YEAR()`) or user-selectable parameters to avoid manual updates.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['47, 48, 49, 50, 51, 52'], 'context': 'Specific financial weeks excluded from analysis.', 'suggested_governance': 'These week numbers represent a business rule (e.g., year-end blackout). This rule should be defined in a configuration table or a calendar dimension table, rather than hardcoded in queries.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded financial years with dynamic expressions or dashboard parameters.', 'Externalize the list of excluded financial weeks into a configuration table or a calendar dimension.', ""Manage 'SUNDRY ADSALES OVERLAY' and other revenue group subtypes in a governed lookup table.""]",14,3ee20092-1897-49b7-8bcd-4157d5f816eb
"-- This query consolidates the primary revenue calculation and key dimensions for 'Contra Report'.
-- It focuses on the most complex query (job_g0C_QrpRueq_Y03aHpxOoN1xe-AU) which calculates gross revenue.
-- It includes derived dimensions and applies all specified business rules and filters.

WITH ContraSheetAccounts AS (
  SELECT DISTINCT
    NMBS_T_Number
  FROM
    `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data`
),
BaseRevenueData AS (
  SELECT
    t0.financial_year,
    SAFE_CAST(t0.financial_month AS INT64) AS financial_month_no,
    t0.financial_short_month,
    t0.calendar_year_month,
    t0.sales_segment_gm_name,
    t0.portfolio_conformed_name_current,
    IFNULL(t0.current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
    t0.advertiser_name,
    t0.adpoint_account_number,
    t0.revenue_type,
    t0.gross_revenue_amount,
    CASE
      WHEN t0.adpoint_account_number IN (SELECT NMBS_T_Number FROM ContraSheetAccounts) THEN 'Y'
      ELSE 'N'
    END AS sheet_account_flag
  FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
  WHERE
    LOWER(LEFT(t0.advertiser_name, 3)) = 'ctr'
    AND NOT (t0.cost_model_type = 'Guaranteed' AND t0.revenue_group_name = 'Exchange')
    AND UPPER(IFNULL(t0.revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
    AND UPPER(IFNULL(t0.style_name, 'XXX')) <> 'ROP COMPOSITE'
    AND UPPER(IFNULL(t0.source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
    AND (
      UPPER(IFNULL(t0.publication_name, 'XXX')) NOT LIKE 'SUDDENLY%'
      OR (
        UPPER(t0.publication_name) LIKE 'SUDDENLY%'
        AND (
          t0.account_number IN ('17114', '29172', '52809')
          OR t0.adtype_name = '-'
        )
      )
    )
    -- Add a date filter for performance and relevance, assuming calendar_year_month is 'YYYY-MM'
    AND SAFE_CAST(t0.calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH)
)
SELECT
  financial_year,
  financial_month_no,
  financial_short_month,
  calendar_year_month,
  sales_segment_gm_name,
  portfolio_conformed_name_current,
  current_portfolio_conformed_owner_full,
  advertiser_name,
  adpoint_account_number,
  revenue_type,
  CASE
    WHEN adpoint_account_number IN ('13019', '52246', '18387') THEN 'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'
    ELSE advertiser_name
  END AS grouped_advertiser_name,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount
FROM
  BaseRevenueData
GROUP BY
  financial_year,
  financial_month_no,
  financial_short_month,
  calendar_year_month,
  sales_segment_gm_name,
  portfolio_conformed_name_current,
  current_portfolio_conformed_owner_full,
  advertiser_name,
  adpoint_account_number,
  revenue_type,
  grouped_advertiser_name
ORDER BY
  calendar_year_month DESC, total_gross_revenue_amount DESC
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'v_adsales_revenue_client_daily' AS source_table,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(calendar_year_month || '-01' AS DATE)) AS unique_months,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT adpoint_account_number) AS unique_adpoint_accounts,
  MIN(SAFE_CAST(calendar_year_month || '-01' AS DATE)) AS earliest_month,
  MAX(SAFE_CAST(calendar_year_month || '-01' AS DATE)) AS latest_month,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(adpoint_account_number AS STRING), '-', SAFE_CAST(calendar_year_month AS STRING), '-', revenue_type)) AS approx_unique_transactions_grain
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  SAFE_CAST(calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
UNION ALL
SELECT
  'details_dashboard' AS source_table,
  COUNT(*) AS total_records,
  NULL AS unique_months, -- Date dimensions not directly present in this query's usage
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT adpoint_account_number) AS unique_adpoint_accounts,
  NULL AS earliest_month,
  NULL AS latest_month,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(account_number AS STRING), '-', SAFE_CAST(adpoint_account_number AS STRING))) AS approx_unique_account_pairs
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
LIMIT 1000;","-- Quick validation that all metric calculations work syntactically and data is present
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS revenue_positive_test,
  CASE WHEN COUNT(DISTINCT advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_present_test,
  CASE WHEN MAX(SAFE_CAST(calendar_year_month || '-01' AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(CASE WHEN LOWER(LEFT(advertiser_name, 3)) = 'ctr' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS contra_data_present_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  SAFE_CAST(calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH)
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' AS validation_type,
  'Revenue Transaction Status' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  SAFE_CAST(calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
UNION ALL
SELECT
  'Business Rule Validation' AS validation_type,
  'Contra Advertiser Prefix' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN LOWER(LEFT(advertiser_name, 3)) = 'ctr' THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN LOWER(LEFT(advertiser_name, 3)) = 'ctr' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  SAFE_CAST(calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH)
LIMIT 1000;","-- Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(calendar_year_month || '-01' AS DATE) AS month_start_date,
  financial_year,
  financial_short_month,
  advertiser_name,
  adpoint_account_number,
  revenue_type,
  gross_revenue_amount,
  sales_segment_gm_name,
  portfolio_conformed_name_current,
  current_portfolio_conformed_owner_full_name_current,
  revenue_transaction_status,
  cost_model_type,
  revenue_group_name,
  style_name,
  source_publishing_division,
  publication_name,
  account_number,
  adtype_name
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
WHERE
  SAFE_CAST(calendar_year_month || '-01' AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(calendar_year_month || '-01' AS DATE) DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Contra'"", ""'Renee Sycamore'""], 'context': 'Filtering `nca_industry_pillar` and `sales_segment_gm_name` in `details_dashboard`.', 'suggested_governance': 'These values should be managed as dashboard parameters or linked to a sales hierarchy/segmentation lookup table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'ctr'"", ""'Guaranteed'"", ""'Exchange'"", ""'BILLED'"", ""'BOOKED'"", ""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'"", ""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'"", ""'-'"", ""'VACANT'""], 'context': 'Extensive filtering and data transformation logic for `gross_revenue_amount` calculation.', 'suggested_governance': 'These business rules (e.g., valid transaction statuses, excluded cost models, publication rules) should be defined in a central configuration table and joined to the main data, rather than hardcoded in SQL.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'13019'"", ""'52246'"", ""'18387'""], 'context': 'Grouping specific `adpoint_account_number` values into a single `grouped_advertiser_name`.', 'suggested_governance': 'These account groupings should be defined in a separate `advertiser_group_mapping` table, allowing for flexible updates without modifying SQL.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CTR_2023_AFL SPORT'"", ""'CTR_2023_GWS GIANTS'"", ""'CTR_2023_SYDNEY SWANS'"", ""'CTR_2025_Greater Western Sydney Giants'"", ""'CTR_2025_Raising Literacy Australia'""], 'context': 'Filtering `advertiser_name` for `record_count_by_account`.', 'suggested_governance': ""These specific advertiser names should be managed in a lookup table for 'Contra Accounts of Interest' or similar, allowing for dynamic updates."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded filter values (e.g., 'Contra', 'Renee Sycamore') with Looker Studio parameters or dynamic filters."", 'Externalize complex business rules and account groupings into governed lookup/configuration tables.', 'Consider using a date parameter for the `calendar_year_month` filter to allow users to select reporting periods.']",15,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"-- This query consolidates all metrics and dimensions identified from the Looker Studio dashboard SQL samples.
-- It uses the common base data source and applies the specific date range and conditional logic.
-- The date ranges 'Aug 23 - Jun 24' and 'Aug 22 - Jun 23' are hardcoded as per the original queries.

WITH
  -- Define hardcoded date parameters for clarity and potential future parameterization
  date_params AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', '2023-08-01') AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', '2024-06-01') AS current_period_end_date
  ),
  adex_data AS (
    SELECT
      * EXCEPT(latest_date, spend_monthly_agg, calendar_month_short_name, calendar_year)
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_adex_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      (SELECT MAX(date) FROM adex_full_date) AS latest_date -- Re-evaluate latest_date for the full dataset
    FROM
      adex_full_date AS afd
    -- Apply a reasonable date filter for performance in primary_analysis_sql
    WHERE afd.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) OR afd.date IS NULL -- Include nulls from adex_date_fact if they fall in range
  )
SELECT
  SAFE_CAST(t0.date AS DATE) AS report_date,
  t0.Major_Category,
  t0.Media_Network,
  t0.Media_Group,
  t0.Media_Type,
  -- Boolean flag for current period, used as a dimension in one query
  (t0.date >= dp.current_period_start_date AND t0.date <= dp.current_period_end_date) AS is_current_period_flag,
  
  -- Metrics
  SUM(t0.Spend) AS total_spend,
  SUM(CASE WHEN (t0.date >= dp.current_period_start_date AND t0.date <= dp.current_period_end_date) THEN t0.Spend ELSE 0 END) AS spend_current_period,
  SUM(CASE WHEN (t0.date >= DATETIME_ADD(dp.current_period_start_date, INTERVAL -12 MONTH) AND t0.date <= DATETIME_ADD(dp.current_period_end_date, INTERVAL -12 MONTH)) THEN t0.Spend ELSE 0 END) AS spend_previous_year,
  SUM(CASE WHEN (t0.Media_Network = 'NEWS CORP' AND t0.date >= dp.current_period_start_date AND t0.date <= dp.current_period_end_date) THEN t0.Spend ELSE 0 END) AS spend_news_corp_current_period,
  SUM(CASE WHEN (t0.Media_Network = 'NEWS CORP' AND t0.date >= DATETIME_ADD(dp.current_period_start_date, INTERVAL -12 MONTH) AND t0.date <= DATETIME_ADD(dp.current_period_end_date, INTERVAL -12 MONTH)) THEN t0.Spend ELSE 0 END) AS spend_news_corp_previous_year,
  SUM(CASE WHEN (t0.Major_Category = 'Retail' AND t0.date >= dp.current_period_start_date AND t0.date <= dp.current_period_end_date) THEN t0.Spend ELSE 0 END) AS spend_retail_current_period
FROM
  base_adex_data AS t0
CROSS JOIN
  date_params AS dp
GROUP BY
  report_date,
  t0.Major_Category,
  t0.Media_Network,
  t0.Media_Group,
  t0.Media_Type,
  is_current_period_flag
ORDER BY
  report_date DESC
LIMIT 1000;
","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(date AS DATE)) AS unique_dates_in_sample,
  COUNT(DISTINCT Media_Type) AS unique_media_types,
  COUNT(DISTINCT Major_Category) AS unique_major_categories,
  COUNT(DISTINCT Media_Network) AS unique_media_networks,
  COUNT(DISTINCT Media_Group) AS unique_media_groups,
  MIN(SAFE_CAST(date AS DATE)) AS earliest_date_in_sample,
  MAX(SAFE_CAST(date AS DATE)) AS latest_date_in_sample,
  AVG(SAFE_CAST(Spend AS NUMERIC)) AS average_spend,
  SUM(CASE WHEN Spend IS NULL THEN 1 ELSE 0 END) AS null_spend_count
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) -- Limit to recent data for sampling
LIMIT 1000;
","-- Quick validation that all metric calculations work syntactically and return expected types
WITH
  date_params AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', '2023-08-01') AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', '2024-06-01') AS current_period_end_date
  ),
  adex_data AS (
    SELECT
      * EXCEPT(latest_date, spend_monthly_agg, calendar_month_short_name, calendar_year)
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_adex_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      (SELECT MAX(date) FROM adex_full_date) AS latest_date
    FROM
      adex_full_date AS afd
    WHERE afd.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) OR afd.date IS NULL
  )
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.Spend AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_spend_test,
  CASE WHEN SUM(CASE WHEN (t0.date >= dp.current_period_start_date AND t0.date <= dp.current_period_end_date) THEN t0.Spend ELSE 0 END) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS current_period_spend_test,
  CASE WHEN SUM(CASE WHEN t0.Major_Category = 'Retail' THEN t0.Spend ELSE 0 END) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS retail_spend_test,
  CASE WHEN MAX(SAFE_CAST(t0.date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test
FROM
  base_adex_data AS t0
CROSS JOIN
  date_params AS dp
LIMIT 1;
","-- Query to validate key business logic, filters, and data quality
WITH
  date_params AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', '2023-08-01') AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', '2024-06-01') AS current_period_end_date
  ),
  adex_data AS (
    SELECT
      * EXCEPT(latest_date, spend_monthly_agg, calendar_month_short_name, calendar_year)
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  base_adex_data AS (
    SELECT
      afd.*,
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year,
      SUM(Spend) OVER (PARTITION BY date) AS spend_monthly_agg,
      (SELECT MAX(date) FROM adex_full_date) AS latest_date
    FROM
      adex_full_date AS afd
    WHERE afd.date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) OR afd.date IS NULL
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'News Corp Spend' AS rule_name,
  COUNT(DISTINCT t0.date) AS distinct_months_with_news_corp_spend,
  SUM(CASE WHEN t0.Media_Network = 'NEWS CORP' THEN t0.Spend ELSE 0 END) AS total_news_corp_spend,
  SUM(CASE WHEN t0.Major_Category = 'Retail' THEN t0.Spend ELSE 0 END) AS total_retail_spend,
  SUM(CASE WHEN t0.Spend < 0 THEN 1 ELSE 0 END) AS negative_spend_records,
  SUM(CASE WHEN t0.Spend IS NULL THEN 1 ELSE 0 END) AS null_spend_records_in_range,
  SUM(CASE WHEN t0.date IS NULL THEN 1 ELSE 0 END) AS null_date_records
FROM
  base_adex_data AS t0
CROSS JOIN
  date_params AS dp
WHERE
  (t0.date >= dp.current_period_start_date AND t0.date <= dp.current_period_end_date) OR
  (t0.date >= DATETIME_ADD(dp.current_period_start_date, INTERVAL -12 MONTH) AND t0.date <= DATETIME_ADD(dp.current_period_end_date, INTERVAL -12 MONTH))
LIMIT 1;
","-- Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(date AS DATE) AS date_column,
  Media_Type,
  portfolio_parent_group_name,
  Major_Category,
  Advertiser,
  Media_Network,
  Media_Group,
  Ad_Type,
  Brand,
  Product,
  Category,
  Sub_Category,
  SAFE_CAST(Spend AS NUMERIC) AS spend_metric,
  financial_year
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) -- Get recent data
  AND Spend IS NOT NULL
ORDER BY
  date_column DESC, spend_metric DESC
LIMIT 500;
","{'hardcoded_dates': [{'date_value': '2023-08-01', 'original_format': ""'Aug 23'"", 'context': ""Start date for the 'current period' calculation. Derived from 'Aug 23'."", 'suggested_fix': 'Replace with a dynamic date parameter (e.g., `DATE_TRUNC(CURRENT_DATE(), MONTH)` or a user-selected date parameter).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-06-01', 'original_format': ""'Jun 24'"", 'context': ""End date for the 'current period' calculation. Derived from 'Jun 24'."", 'suggested_fix': 'Replace with a dynamic date parameter (e.g., `LAST_DAY(CURRENT_DATE(), MONTH)` or a user-selected date parameter).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'""], 'context': 'Month names are hardcoded in a CASE statement to convert to month numbers for date parsing.', 'suggested_governance': ""Use BigQuery's `EXTRACT(MONTH FROM PARSE_DATE('%b %y', month_year_string))` or `FORMAT_DATE('%m', date_column)` directly, or a small lookup table if the format is truly non-standard."", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Retail'""], 'context': ""Specific 'Major_Category' value used for conditional spend calculation."", 'suggested_governance': ""If 'Retail' is a dynamic business segment, it should be a parameter or part of a business segment lookup table."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'NEWS CORP'""], 'context': ""Specific 'Media_Network' value used for conditional spend calculation."", 'suggested_governance': ""If 'NEWS CORP' is a dynamic media network, it should be a parameter or part of a media network lookup table."", 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded date strings ('Aug 23', 'Jun 24') with dashboard date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`)."", 'Create a small UDF or a lookup table for month name to number conversion to avoid repetitive CASE statements.', ""Parameterize specific category and media network filters ('Retail', 'NEWS CORP') to allow for dynamic analysis without modifying SQL.""]",16,e9d8a216-4950-4d30-b344-5011776edbdf
"WITH AdSalesData AS (
  SELECT
    t0.financial_year,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week,
    t0.source_system_code,
    t0.gross_revenue_amount,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.invoice_number
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.invoice_number = '-1'
    AND t0.source_system_code IN ('PLUTO', 'CPQ', 'ADPT')
    AND t0.financial_year IN ('2025') -- Hardcoded year
)
SELECT
  financial_year,
  financial_week,
  source_system_code,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount,
  COUNT(1) AS record_count_adsales,
  SUM(SAFE_CAST(financial_week AS INT64)) AS sum_of_financial_week_numbers -- As seen in original query
FROM AdSalesData
GROUP BY
  financial_year,
  financial_week,
  source_system_code
ORDER BY
  financial_year DESC,
  financial_week DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.financial_year) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(t0.financial_week AS STRING)) as unique_financial_weeks,
  COUNT(DISTINCT t0.source_system_code) as unique_source_systems,
  COUNT(DISTINCT t0.revenue_transaction_status) as unique_transaction_statuses,
  MIN(t0.financial_year) as earliest_financial_year,
  MAX(t0.financial_year) as latest_financial_year,
  MIN(SAFE_CAST(t0.data_load_datetime AS DATE)) as earliest_data_load_date,
  MAX(SAFE_CAST(t0.data_load_datetime AS DATE)) as latest_data_load_date
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) -- Sample recent data
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as status_filter_test,
  CASE WHEN MAX(SAFE_CAST(t0.data_load_datetime AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as data_freshness_test,
  CASE WHEN COUNT(CASE WHEN t0.invoice_number = '-1' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as invoice_number_filter_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Revenue Transaction Status Rule' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_status_rule,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_status,
  'Source Publishing Division Exclusion Rule' as rule_name_2,
  SUM(CASE WHEN (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_division_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_division
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  SAFE_CAST(t0.data_load_datetime AS DATETIME) as data_load_datetime,
  t0.financial_year,
  SAFE_CAST(t0.financial_week AS INT64) as financial_week,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  t0.invoice_number,
  t0.revenue_transaction_status,
  t0.source_publishing_division,
  t0.source_system_code,
  t0.unified_publication_gl_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE SAFE_CAST(t0.data_load_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY SAFE_CAST(t0.data_load_datetime AS DATETIME) DESC, SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': 'string', 'context': 'financial_year filter', 'suggested_fix': 'replace with CURRENT_DATE() based year or parameter', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202548', 'original_format': 'string', 'context': 'fiscal_week_id filter', 'suggested_fix': 'replace with relative fiscal weeks or parameter', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202549', 'original_format': 'string', 'context': 'fiscal_week_id filter', 'suggested_fix': 'replace with relative fiscal weeks or parameter', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202550', 'original_format': 'string', 'context': 'fiscal_week_id filter', 'suggested_fix': 'replace with relative fiscal weeks or parameter', 'impact': 'high', 'urgency': 'high'}, {'date_value': '202551', 'original_format': 'string', 'context': 'fiscal_week_id filter', 'suggested_fix': 'replace with relative fiscal weeks or parameter', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'revenue_transaction_status filter', 'suggested_governance': 'join to a transaction_status_lookup table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'source_publishing_division exclusion', 'suggested_governance': 'join to a publishing_division_exclusion_list table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'-1'""], 'context': 'invoice_number filter', 'suggested_governance': ""clarify meaning of '-1' and potentially use a lookup or parameter"", 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'"", ""'CPQ'"", ""'ADPT'""], 'context': 'source_system_code filter', 'suggested_governance': 'join to a source_system_lookup table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'9707'"", ""'9655'"", ""'9658'""], 'context': 'unified_publication_gl_code filter', 'suggested_governance': 'join to a GL_code_lookup table', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates (years, fiscal weeks) with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB`).', 'Replace hardcoded lookup values (transaction statuses, source systems, GL codes, publishing divisions) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., excluded publishing divisions) instead of hardcoded logic in queries.']",17,77c68c35-20ce-477a-b216-0c781d43a8ca
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters
-- Note: 'report_date' is an assumed date column in the source table for filtering purposes, as no date column was present in the original query's SELECT or WHERE clause. Adjust if your table has a different date column name.
WITH base_data AS (
  SELECT
    t0.fy_month_num,
    t0.month_name,
    t0.report_date -- Assumed date column for filtering
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
  WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH) -- Sample last 12 months for analysis
)
SELECT
  base_data.month_name,
  COUNT(base_data.fy_month_num) AS count_reconciliation_records,
  SUM(SAFE_CAST(base_data.fy_month_num AS NUMERIC)) AS sum_fiscal_month_number_unusual,
  COUNT(*) AS total_records_in_group
FROM base_data
GROUP BY
  base_data.month_name
ORDER BY
  base_data.month_name
LIMIT 100; -- Limit for practical analysis, dashboard might pull more","-- Query to understand data structure, grain, and key dimensions with sampling
-- Note: 'report_date' is an assumed date column in the source table for filtering purposes. Adjust if your table has a different date column name.
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.month_name AS STRING)) as unique_month_names,
  COUNT(DISTINCT SAFE_CAST(t0.fy_month_num AS INT64)) as unique_fiscal_month_numbers,
  MIN(SAFE_CAST(t0.report_date AS DATE)) as earliest_report_date,
  MAX(SAFE_CAST(t0.report_date AS DATE)) as latest_report_date,
  APPROX_COUNT_DISTINCT(SAFE_CAST(t0.fy_month_num AS STRING) || '-' || SAFE_CAST(t0.month_name AS STRING)) as approx_unique_month_combinations
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Sample recent data
LIMIT 1;","-- Quick validation that all metric calculations work syntactically
-- Note: 'report_date' is an assumed date column in the source table for filtering purposes. Adjust if your table has a different date column name.
SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(t0.fy_month_num) > 0 THEN 'PASS' ELSE 'FAIL' END as fy_month_num_count_test,
  CASE WHEN COUNT(DISTINCT t0.month_name) > 0 THEN 'PASS' ELSE 'FAIL' END as month_name_distinct_test,
  CASE WHEN MAX(SAFE_CAST(t0.report_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) -- Check recent data
LIMIT 1;","-- Query to validate key business logic, filters, and data quality
-- Note: 'report_date' is an assumed date column in the source table for filtering purposes. Adjust if your table has a different date column name.
SELECT
  'Business Rule Validation' as validation_type,
  'fy_month_num_range_check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN SAFE_CAST(t0.fy_month_num AS INT64) BETWEEN 1 AND 12 THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(t0.fy_month_num AS INT64) BETWEEN 1 AND 12 THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Sample recent data
LIMIT 1;","-- Query to get representative sample data for further analysis
-- Note: 'report_date' is an assumed date column in the source table. Adjust if your table has a different date column name.
SELECT
  SAFE_CAST(t0.fy_month_num AS INT64) as fiscal_month_number,
  SAFE_CAST(t0.month_name AS STRING) as month_name,
  SAFE_CAST(t0.report_date AS DATE) as report_date,
  -- Add other relevant columns from the source table for a comprehensive sample
  -- e.g., transaction_id, account_id, amount, status, etc.
  'Add_other_relevant_columns_here_for_a_richer_sample' as placeholder_for_other_columns
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE SAFE_CAST(t0.report_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) -- Sample recent data
ORDER BY SAFE_CAST(t0.report_date AS DATE) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': []}","['Implement date parameters for dashboard filters to allow dynamic date range selection, improving user experience and query performance.', 'Verify the business purpose of `SUM(fy_month_num)` and consider if `fy_month_num` should be treated as a dimension or if a different metric is intended.']",18,f353b933-30eb-4853-9976-03d5371db7d7
"-- THIS IS THE MAIN SQL TO RUN --
-- This query consolidates key metrics and dimensions from the dashboard's underlying data.
-- It calculates current and previous fiscal year gross revenue, and categorizes publications.
-- Original dashboard queries apply specific filters (e.g., product_group='The Australian & Prestige', revenue_type='PRINT', unified_publication_name='GQ Mag').
-- This consolidated query includes these as dimensions for broader analysis; apply filters as needed in Looker Studio.

WITH base_data AS (
  SELECT
    t0.gross_revenue_amount,
    t0.product_group,
    t0.relative_fy_year_offset,
    t0.revenue_type,
    t0.unified_publication_name,
    t0.dw_asl_load_timestamp
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  -- Filter for relevant fiscal years to reduce data processed
  WHERE SAFE_CAST(t0.relative_fy_year_offset AS INT64) IN (0, 1)
),
calculated_fields AS (
  SELECT
    product_group,
    revenue_type,
    unified_publication_name,
    relative_fy_year_offset,
    dw_asl_load_timestamp,
    -- Metric: Gross Revenue Current Fiscal Year
    CASE WHEN (SAFE_CAST(relative_fy_year_offset AS INT64) = 0) THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END AS gross_revenue_current_fy,
    -- Metric: Gross Revenue Previous Fiscal Year
    CASE WHEN (SAFE_CAST(relative_fy_year_offset AS INT64) = 1) THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END AS gross_revenue_previous_fy,
    -- Dimension: Publication Category (Sundry/Non-Sundry)
    CASE
      WHEN SAFE_CAST(unified_publication_name AS STRING) IN (
        'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
        'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
        'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au',
        'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin',
        'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times',
        'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
      ) THEN 'Sundry Pubs'
      ELSE 'Non Sundry Pubs'
    END AS publication_category
  FROM base_data
)
SELECT
  SAFE_CAST(product_group AS STRING) AS product_group,
  SAFE_CAST(revenue_type AS STRING) AS revenue_type,
  SAFE_CAST(unified_publication_name AS STRING) AS unified_publication_name,
  SAFE_CAST(publication_category AS STRING) AS publication_category,
  -- Final aggregated metrics
  SUM(gross_revenue_current_fy) AS total_gross_revenue_current_fy,
  SUM(SAFE_DIVIDE(gross_revenue_current_fy, 1000)) AS total_gross_revenue_current_fy_thousands,
  SUM(gross_revenue_previous_fy) AS total_gross_revenue_previous_fy,
  SUM(SAFE_DIVIDE(gross_revenue_previous_fy, 1000)) AS total_gross_revenue_previous_fy_thousands,
  -- Minimum data load timestamp for this specific grouping
  MIN(DATETIME_TRUNC(SAFE_CAST(dw_asl_load_timestamp AS DATETIME), SECOND)) AS min_data_load_timestamp_for_group
FROM calculated_fields
GROUP BY
  product_group,
  revenue_type,
  unified_publication_name,
  publication_category
ORDER BY
  product_group, revenue_type, unified_publication_name
LIMIT 1000; -- Limit for sample analysis and cost optimization
","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(product_group AS STRING)) as unique_product_groups,
  COUNT(DISTINCT SAFE_CAST(revenue_type AS STRING)) as unique_revenue_types,
  COUNT(DISTINCT SAFE_CAST(unified_publication_name AS STRING)) as unique_publication_names,
  COUNT(DISTINCT SAFE_CAST(relative_fy_year_offset AS INT64)) as unique_fy_offsets,
  MIN(SAFE_CAST(dw_asl_load_timestamp AS DATETIME)) as earliest_load_timestamp,
  MAX(SAFE_CAST(dw_asl_load_timestamp AS DATETIME)) as latest_load_timestamp,
  SUM(CASE WHEN gross_revenue_amount IS NULL THEN 1 ELSE 0 END) as null_gross_revenue_amount_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATETIME) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY)
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS: Total Revenue > 0' ELSE 'FAIL: Total Revenue <= 0' END as revenue_positive_check,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(product_group AS STRING)) > 0 THEN 'PASS: Product Groups Exist' ELSE 'FAIL: No Product Groups' END as product_group_check,
  CASE WHEN MAX(SAFE_CAST(dw_asl_load_timestamp AS DATETIME)) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY) THEN 'PASS: Data Freshness (last 7 days)' ELSE 'FAIL: Data Not Fresh' END as freshness_check,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(relative_fy_year_offset AS INT64) = 0 THEN 1 END) > 0 THEN 'PASS: Current FY Data Exists' ELSE 'FAIL: No Current FY Data' END as current_fy_check
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATETIME) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'Sundry Pubs Classification' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE 
    WHEN SAFE_CAST(unified_publication_name AS STRING) IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
      'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
      'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au',
      'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin',
      'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times',
      'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    ) THEN 1 ELSE 0
  END) as sundry_pubs_count,
  SUM(CASE 
    WHEN SAFE_CAST(unified_publication_name AS STRING) NOT IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM',
      'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin',
      'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au',
      'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin',
      'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times',
      'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    ) THEN 1 ELSE 0
  END) as non_sundry_pubs_count
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATETIME) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 90 DAY)
LIMIT 1;","SELECT 
  SAFE_CAST(dw_asl_load_timestamp AS DATETIME) as dw_asl_load_timestamp,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(product_group AS STRING) as product_group,
  SAFE_CAST(relative_fy_year_offset AS INT64) as relative_fy_year_offset,
  SAFE_CAST(revenue_type AS STRING) as revenue_type,
  SAFE_CAST(unified_publication_name AS STRING) as unified_publication_name
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(dw_asl_load_timestamp AS DATETIME) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 14 DAY)
ORDER BY dw_asl_load_timestamp DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Admin.ADV'"", ""'Admin.DTM'"", ""'Admin.HWT'"", ""'Admin.International'"", ""'Admin.Sales'"", ""'Admin.Sport'"", ""'Admin.TCM'"", ""'Bestrecipes.Admin'"", ""'Bodyandsoul.Admin'"", ""'CODE'"", ""'CodeBet'"", ""'Delicious.admin'"", ""'Escape.Admin'"", ""'GQ.Admin'"", ""'Kidspot.Admin'"", ""'National Sundry'"", ""'National Tabloid PrePrint'"", ""'News.Admin'"", ""'odds.com.au'"", ""'Punters.com.au'"", ""'Qantas Travel Insider'"", ""'RACENET'"", ""'Shortlyster Managed Service'"", ""'Sky News'"", ""'SKYNEWS.ADMIN'"", ""'Stellar.Admin'"", ""'Stockhead'"", ""'SUDDENLY.CW'"", ""'SUDDENLY.NORTH'"", ""'SUDDENLY.TGG'"", ""'Taste.Admin'"", ""'TAUS.ADMIN'"", ""'The Sunday Times'"", ""'TOOWOOMBACUSTOM'"", ""'Vogue.Admin'"", ""'Vogueliving.Admin'""], 'context': ""List of unified_publication_name values used to classify 'Sundry Pubs'."", 'suggested_governance': 'Move this list to a governed reference table (e.g., `publication_master` with a `publication_category` column) and join to it.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '1'], 'context': ""Integer values representing 'current fiscal year' and 'previous fiscal year' in `relative_fy_year_offset`."", 'suggested_governance': 'Map these offsets to actual fiscal year names (e.g., FY25, FY26) using a date dimension table or a configuration table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'display_options', 'hardcoded_values': [""'$'"", ""'$'000'""], 'context': 'String literals used to determine whether to display revenue in raw or thousands format.', 'suggested_governance': 'These should be controlled by a Looker Studio parameter that dynamically adjusts the display format, not hardcoded in the SQL.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'The Australian & Prestige'"", ""'PRINT'"", ""'GQ Mag'""], 'context': 'Specific values used to filter `product_group`, `revenue_type`, and `unified_publication_name`.', 'suggested_governance': 'These filters should be driven by Looker Studio controls (e.g., dropdowns, text inputs) linked to parameters, allowing users to select different values.', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded fiscal year offsets (0, 1) with a dynamic fiscal year parameter or a date dimension lookup.', ""Implement Looker Studio parameters for currency/scale display options ('$', '$'000') to allow user selection."", ""Convert hardcoded filter values (e.g., 'The Australian & Prestige', 'PRINT', 'GQ Mag') into Looker Studio parameters for user-driven filtering."", ""Externalize the 'Sundry Pubs' classification list into a BigQuery reference table, joining to it instead of hardcoding in `CASE` statements.""]",19,4bd7795c-5a94-4fb6-92e1-ed152b1cf7b3
"WITH base_data AS (
  SELECT
    t0.GROSS_AMOUNT_DIFF AS gross_amount_diff,
    t0.advertiser_group AS advertiser_group,
    t0.advertiser_parent AS advertiser_parent,
    t0.booking_line_id AS booking_line_id,
    t0.booking_number AS booking_number,
    t0.financial_short_month AS financial_short_month,
    t0.financial_year AS financial_year,
    SAFE_CAST(t0.movement_date AS DATE) AS movement_date,
    t0.portfolio_group_name_sync AS portfolio_group_name_sync,
    t0.portfolio_parent_group_name_sync AS portfolio_parent_group_name_sync,
    t0.revenue_sub_type AS revenue_sub_type,
    t0.revenue_type AS revenue_type,
    t0.xtend_flag AS xtend_flag,
    t0.portfolio_conformed_name_sync AS portfolio_conformed_name_sync
  FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
  WHERE SAFE_CAST(t0.movement_date AS DATE) >= DATE_TRUNC(CURRENT_DATE(), YEAR) -- Adjust date filter as needed, e.g., DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
),
intermediate_data AS (
  SELECT
    gross_amount_diff,
    advertiser_group,
    advertiser_parent,
    booking_line_id,
    booking_number,
    financial_short_month,
    financial_year,
    movement_date,
    portfolio_group_name_sync,
    portfolio_parent_group_name_sync,
    revenue_sub_type,
    revenue_type,
    xtend_flag,
    portfolio_conformed_name_sync,
    CASE WHEN (advertiser_group IS NULL) THEN 'Nah' ELSE advertiser_group END AS derived_advertiser_group,
    PARSE_DATE('%Y-%b-%d', CONCAT(SAFE_CAST(financial_year AS STRING),'-',SAFE_CAST(financial_short_month AS STRING),'-1')) AS derived_financial_date,
    (portfolio_parent_group_name_sync = 'DIGITAL OTHER') AS is_digital_other_portfolio_parent,
    SAFE.LEFT(revenue_sub_type, 6) AS revenue_sub_type_prefix_6,
    SAFE.LEFT(revenue_sub_type, 3) AS revenue_sub_type_prefix_3,
    (revenue_sub_type = 'DIGITAL') AS is_digital_revenue_sub_type,
    CASE WHEN (revenue_type = 'DIGITAL') THEN gross_amount_diff ELSE 0 END AS digital_gross_amount_diff,
    CASE WHEN (revenue_type = 'PRINT') THEN gross_amount_diff ELSE 0 END AS print_gross_amount_diff
  FROM base_data
),
final_derived_data AS (
  SELECT
    * EXCEPT(is_digital_other_portfolio_parent, revenue_sub_type_prefix_6, revenue_sub_type_prefix_3, is_digital_revenue_sub_type),
    (revenue_sub_type_prefix_3 = 'PRO') AS is_pro_revenue_sub_type,
    ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL')) AS is_programmatic_flag
  FROM intermediate_data
)
SELECT
  movement_date,
  financial_year,
  derived_financial_date,
  advertiser_parent,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  portfolio_conformed_name_sync,
  revenue_type,
  revenue_sub_type,
  derived_advertiser_group,
  CASE
    WHEN (xtend_flag = 'Y') THEN 'XTEND'
    WHEN (is_pro_revenue_sub_type OR is_programmatic_flag) THEN 'PROGRAMMATIC'
    WHEN (revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
    WHEN (revenue_sub_type_prefix_6 = 'SUNDRY') THEN 'SUNDRY'
    ELSE revenue_sub_type
  END AS derived_revenue_category,
  SUM(gross_amount_diff) AS total_gross_amount_diff,
  SUM(digital_gross_amount_diff) AS sum_digital_gross_amount_diff,
  SUM(print_gross_amount_diff) AS sum_print_gross_amount_diff
FROM final_derived_data
GROUP BY
  movement_date,
  financial_year,
  derived_financial_date,
  advertiser_parent,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  portfolio_conformed_name_sync,
  revenue_type,
  revenue_sub_type,
  derived_advertiser_group,
  derived_revenue_category, -- Include derived_revenue_category in GROUP BY
  is_pro_revenue_sub_type, -- Required for derived_revenue_category in outer select
  is_programmatic_flag, -- Required for derived_revenue_category in outer select
  revenue_sub_type_prefix_6, -- Required for derived_revenue_category in outer select
  xtend_flag -- Required for derived_revenue_category in outer select
ORDER BY movement_date DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(movement_date AS DATE)) as unique_movement_dates,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT advertiser_parent) as unique_advertiser_parents,
  COUNT(DISTINCT portfolio_group_name_sync) as unique_portfolio_groups,
  COUNT(DISTINCT portfolio_parent_group_name_sync) as unique_portfolio_parents,
  COUNT(DISTINCT revenue_type) as unique_revenue_types,
  COUNT(DISTINCT revenue_sub_type) as unique_revenue_sub_types,
  MIN(SAFE_CAST(movement_date AS DATE)) as earliest_movement_date,
  MAX(SAFE_CAST(movement_date AS DATE)) as latest_movement_date,
  APPROX_COUNT_DISTINCT(booking_line_id) as approx_unique_booking_line_ids
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_amount_diff_test,
  CASE WHEN COUNT(DISTINCT booking_line_id) > 0 THEN 'PASS' ELSE 'FAIL' END as booking_id_test,
  CASE WHEN MAX(SAFE_CAST(movement_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN revenue_type IS NULL THEN 1 END) = 0 THEN 'PASS' ELSE 'FAIL' END as revenue_type_not_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.GROSS_AMOUNT_DIFF AS gross_amount_diff,
    t0.advertiser_group AS advertiser_group,
    t0.advertiser_parent AS advertiser_parent,
    t0.financial_year AS financial_year,
    SAFE_CAST(t0.movement_date AS DATE) AS movement_date,
    t0.portfolio_parent_group_name_sync AS portfolio_parent_group_name_sync,
    t0.revenue_sub_type AS revenue_sub_type,
    t0.revenue_type AS revenue_type,
    t0.xtend_flag AS xtend_flag
  FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
  WHERE SAFE_CAST(t0.movement_date AS DATE) >= DATE_TRUNC(CURRENT_DATE(), YEAR) -- Focus on current year data for rule validation
),
intermediate_data AS (
  SELECT
    *,
    (portfolio_parent_group_name_sync = 'DIGITAL OTHER') AS is_digital_other_portfolio_parent,
    SAFE.LEFT(revenue_sub_type, 6) AS revenue_sub_type_prefix_6,
    SAFE.LEFT(revenue_sub_type, 3) AS revenue_sub_type_prefix_3,
    (revenue_sub_type = 'DIGITAL') AS is_digital_revenue_sub_type
  FROM base_data
),
final_derived_data AS (
  SELECT
    *,
    (revenue_sub_type_prefix_3 = 'PRO') AS is_pro_revenue_sub_type,
    ((portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (revenue_sub_type = 'DIGITAL')) AS is_programmatic_flag
  FROM intermediate_data
)
SELECT
  'Business Rule Validation' as validation_type,
  'derived_revenue_category_logic' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN xtend_flag = 'Y' THEN 1 ELSE 0 END) as xtend_category_count,
  SUM(CASE WHEN (is_pro_revenue_sub_type OR is_programmatic_flag) THEN 1 ELSE 0 END) as programmatic_category_count,
  SUM(CASE WHEN revenue_sub_type = 'DIGITAL' AND NOT (xtend_flag = 'Y' OR (is_pro_revenue_sub_type OR is_programmatic_flag)) THEN 1 ELSE 0 END) as adpt_digital_category_count,
  SUM(CASE WHEN revenue_sub_type_prefix_6 = 'SUNDRY' AND NOT (xtend_flag = 'Y' OR (is_pro_revenue_sub_type OR is_programmatic_flag) OR revenue_sub_type = 'DIGITAL') THEN 1 ELSE 0 END) as sundry_category_count,
  SUM(CASE WHEN NOT (xtend_flag = 'Y' OR (is_pro_revenue_sub_type OR is_programmatic_flag) OR revenue_sub_type = 'DIGITAL' OR revenue_sub_type_prefix_6 = 'SUNDRY') THEN 1 ELSE 0 END) as other_category_count,
  SUM(CASE WHEN (CASE
    WHEN (xtend_flag = 'Y') THEN 'XTEND'
    WHEN (is_pro_revenue_sub_type OR is_programmatic_flag) THEN 'PROGRAMMATIC'
    WHEN (revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
    WHEN (revenue_sub_type_prefix_6 = 'SUNDRY') THEN 'SUNDRY'
    ELSE revenue_sub_type
  END) IS NOT NULL THEN 1 ELSE 0 END) as total_categorized_records
FROM final_derived_data;","SELECT
  SAFE_CAST(movement_date AS DATE) as movement_date,
  financial_year,
  advertiser_parent,
  portfolio_group_name_sync,
  portfolio_parent_group_name_sync,
  revenue_type,
  revenue_sub_type,
  SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC) as gross_amount_diff,
  xtend_flag,
  portfolio_conformed_name_sync
FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`
WHERE SAFE_CAST(movement_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND GROSS_AMOUNT_DIFF IS NOT NULL
ORDER BY SAFE_CAST(movement_date AS DATE) DESC, SAFE_CAST(GROSS_AMOUNT_DIFF AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-05-29', 'original_format': ""DATE '2025-05-29'"", 'context': 'Used as a specific filter for movement_date in job_Aeubs62LGAhV5UGdKepwQIETSr3g.', 'suggested_fix': 'Replace with a parameter (e.g., @start_date) or relative date function (e.g., DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)).', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-23', 'original_format': ""DATE '2025-06-23'"", 'context': 'Used as a specific filter for movement_date in job_nEDwytoaLlkbxlA4dr3aaDP_6uqo.', 'suggested_fix': 'Replace with a parameter (e.g., @start_date) or relative date function (e.g., DATE_SUB(CURRENT_DATE(), INTERVAL X DAY)).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'2025'""], 'context': ""Financial year filter (clmn6_ / clmn2_ IN ('2025'))."", 'suggested_governance': 'Use a parameter for financial year or derive from current date if applicable.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'CONSORTIUM SA'"", ""'DIRECT SA WA'"", ""'CONSORTIUM NSW'"", ""'QLD IA C2'""], 'context': 'Portfolio parent/conformed name filters (clmn9_, clmn5_, clmn4_ IN (...)).', 'suggested_governance': 'Store these categories in a governed lookup table (e.g., `dim_portfolio_groups`) and join to filter, or use parameters for dynamic selection.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'XTEND'"", ""'PROGRAMMATIC'"", ""'ADPT DIGITAL'"", ""'SUNDRY'"", ""'DIGITAL'"", ""'PRINT'"", ""'PRO'"", ""'DIGITAL OTHER'"", ""'Y'""], 'context': ""Logic for `derived_revenue_category` and other boolean flags (e.g., `xtend_flag = 'Y'`, `revenue_sub_type = 'DIGITAL'`)."", 'suggested_governance': 'Externalize these business rules into a configuration table or a UDF, allowing for central management without modifying SQL queries.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'default_value', 'hardcoded_values': [""'Nah'""], 'context': 'Default value for `derived_advertiser_group` when `advertiser_group` is NULL.', 'suggested_governance': 'Standardize NULL handling across the data pipeline or define this default in a data dictionary.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters (e.g., `start_date`, `end_date`) or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', 'Replace hardcoded financial years with a parameter (e.g., `financial_year_param`).', 'Replace hardcoded portfolio group/parent/conformed names with parameters or by joining to a reference table.', 'Externalize complex `CASE` statement logic for derived categories into a UDF or a configuration table for better maintainability and reusability.']",20,a1b901e6-c4fb-44bc-955a-3a7070c15829
"WITH
  base_ia_data AS (
    SELECT
      t0.agency_parent,
      t0.booking_line_created_date,
      SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
      t0.relative_fy_month_offset,
      t0.relative_fy_year_offset,
      t0.financial_month,
      t0.financial_quarter,
      t0.revenue_group_subtype
    FROM
      `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
    WHERE
      (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL)
      -- Filter for relevant financial years, e.g., current and previous FY
      AND t0.relative_fy_year_offset IN (0, -1)
  ),
  calculated_metrics AS (
    SELECT
      agency_parent,
      financial_month,
      financial_quarter,
      -- Current FY Gross Revenue
      CASE
        WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
        ELSE 0
      END AS current_fy_gross_revenue,
      -- Previous FY Gross Revenue
      CASE
        WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
        ELSE 0
      END AS previous_fy_gross_revenue,
      -- Previous FY YoY Gross Revenue (adjusted for date)
      CASE
        WHEN relative_fy_year_offset = -1
        AND SAFE_CAST(booking_line_created_date AS DATE) <= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY) THEN gross_revenue_amount
        ELSE 0
      END AS previous_fy_yoy_gross_revenue,
      relative_fy_month_offset
    FROM
      base_ia_data
  )
SELECT
  agency_parent,
  financial_month,
  financial_quarter,
  SUM(current_fy_gross_revenue) AS total_current_fy_gross_revenue,
  SUM(previous_fy_gross_revenue) AS total_previous_fy_gross_revenue,
  -- Prior Period Comparison Revenue
  SUM(
    CASE
      WHEN relative_fy_month_offset < -12 THEN previous_fy_gross_revenue
      ELSE previous_fy_yoy_gross_revenue
    END
  ) AS total_prior_period_comparison_revenue
FROM
  calculated_metrics
GROUP BY
  agency_parent,
  financial_month,
  financial_quarter
ORDER BY
  agency_parent,
  financial_month,
  financial_quarter
LIMIT 1000;","SELECT
  'Data Structure Analysis for sbx_dcp.ia' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.agency_parent) AS unique_agency_parents,
  COUNT(DISTINCT SAFE_CAST(t0.booking_line_created_date AS DATE)) AS unique_booking_dates,
  COUNT(DISTINCT t0.revenue_group_subtype) AS unique_revenue_subtypes,
  MIN(SAFE_CAST(t0.booking_line_created_date AS DATE)) AS earliest_booking_date,
  MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) AS latest_booking_date,
  AVG(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) AS avg_gross_revenue_amount,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_count,
  SUM(CASE WHEN t0.revenue_group_subtype IS NULL THEN 1 ELSE 0 END) AS null_revenue_subtype_count
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE
  SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) -- Last 2 years for context
LIMIT 1;","SELECT
  'Validation Check for sbx_dcp.ia' AS test_type,
  CASE
    WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS gross_revenue_positive_test,
  CASE
    WHEN COUNT(DISTINCT t0.agency_parent) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS agency_parent_exists_test,
  CASE
    WHEN MAX(SAFE_CAST(t0.booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_test,
  CASE
    WHEN COUNT(CASE WHEN t0.revenue_group_subtype = 'PROGRAMMATIC EXCHANGE' THEN 1 END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS programmatic_exchange_data_exists_test
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE
  SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation for sbx_dcp.ia' AS validation_type,
  'Programmatic Exchange Exclusion' AS rule_name,
  COUNT(*) AS total_records_in_scope,
  SUM(CASE WHEN t0.revenue_group_subtype = 'PROGRAMMATIC EXCHANGE' THEN 1 ELSE 0 END) AS programmatic_exchange_records,
  SUM(CASE WHEN (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) THEN 1 ELSE 0 END) AS non_programmatic_exchange_records,
  SAFE_DIVIDE(SUM(CASE WHEN (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 AS non_programmatic_exchange_percentage,
  'Financial Year Offset Distribution' AS rule_name_2,
  COUNT(DISTINCT t0.relative_fy_year_offset) AS distinct_fy_offsets,
  ARRAY_AGG(DISTINCT t0.relative_fy_year_offset ORDER BY t0.relative_fy_year_offset) AS detected_fy_offsets
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE
  SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) -- Last 2 years for context
LIMIT 1;","SELECT
  SAFE_CAST(t0.booking_line_created_date AS DATE) AS booking_date,
  t0.agency_parent,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  t0.revenue_group_subtype,
  t0.relative_fy_year_offset,
  t0.relative_fy_month_offset,
  t0.financial_month,
  t0.financial_quarter
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
WHERE
  SAFE_CAST(t0.booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(t0.booking_line_created_date AS DATE) DESC,
  t0.agency_parent
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-05-23', 'original_format': ""DATE(TIMESTAMP '2025-05-23 01:19:32.916346+00', 'Australia/Sydney')"", 'context': 'Used as a proxy for current date in Query 1 for calculating relative dates and YoY comparisons.', 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-06-22', 'original_format': ""DATE(TIMESTAMP '2025-06-22 22:46:58.786738+00', 'Australia/Sydney')"", 'context': 'Used as a proxy for current date in Query 2 for calculating relative dates and YoY comparisons.', 'suggested_fix': 'Replace with CURRENT_DATE() or a dashboard date parameter.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'FY'""], 'context': ""Used to consistently select financial year metrics over calendar year metrics. While consistent, it's hardcoded."", 'suggested_governance': ""Parameterize 'Reporting Period Type' (e.g., 'Financial Year', 'Calendar Year') to allow flexibility."", 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PROGRAMMATIC EXCHANGE'""], 'context': 'Excludes a specific revenue group subtype from all calculations.', 'suggested_governance': 'Use a governed lookup table for revenue group subtypes or a configuration parameter for exclusions.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['-1', '0', '-12'], 'context': 'Used for relative financial year offsets (-1 for previous FY, 0 for current FY) and month offsets (-12 for more than a year ago).', 'suggested_governance': 'Define these offsets as configurable parameters or derive dynamically based on current period.', 'impact': 'high', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Jan'"", ""'Feb'"", ""'Mar'"", ""'Apr'"", ""'May'"", ""'Jun'"", ""'Jul'"", ""'Aug'"", ""'Sep'"", ""'Oct'"", ""'Nov'"", ""'Dec'""], 'context': 'Mapping short month names to numeric month values.', 'suggested_governance': 'Use a date dimension table that contains month names and their numeric equivalents.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'], 'context': ""Mapping numeric months to quarter strings ('Q1', 'Q2', 'Q3', 'Q4')."", 'suggested_governance': 'Use a date dimension table that contains quarter mappings or a governed lookup for financial quarters.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Current Week'""], 'context': 'Literal string used to label the current week period.', 'suggested_governance': 'Define standard labels for current/prior periods in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., CURRENT_DATE()) to ensure data freshness and dynamic reporting.', ""Replace hardcoded lookup values (e.g., 'PROGRAMMATIC EXCHANGE', month names, quarter ranges) with joins to governed reference tables or configuration parameters to improve maintainability and data consistency."", 'Use configuration tables for business rules (e.g., financial year start/end, week definitions, period offsets) instead of hardcoded logic to centralize and manage business logic.', ""Parameterize relative period offsets (e.g., current year, previous year, specific month offsets) for flexible reporting and 'what-if' analysis.""]",21,fed70b12-c274-4cde-9920-592ca4c4dab0
"-- This query consolidates the identified dimensions and infers common business metrics for a Digital Subscriptions Report.
-- It assumes the existence of 'subscription_date', 'subscription_id', and 'revenue_amount' columns in the base table.
-- The masthead categorization logic is complex and has been re-created based on the provided SQL samples.
WITH
  base_data AS (
    SELECT
      t0.classification_level_1_description,
      t0.classification_level_2_description,
      t0.delivery_medium_type,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.subscriber_has_email_flag,
      -- Placeholder for the actual date column in the base table. Assuming 'subscription_date'.
      SAFE_CAST(t0.subscription_date AS DATE) AS subscription_date,
      -- Placeholder for a unique subscription/subscriber identifier. Assuming 'subscription_id'.
      t0.subscription_id,
      -- Placeholder for a revenue amount. Assuming 'revenue_amount'.
      t0.revenue_amount
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
    -- Filter for a relevant date range to ensure performance and current data
    WHERE SAFE_CAST(t0.subscription_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
  ),
  intermediate_flags AS (
    SELECT
      subscription_date,
      subscription_id,
      revenue_amount,
      classification_level_1_description,
      classification_level_2_description,
      delivery_medium_type,
      gl_publication_code,
      masthead_code,
      subscriber_has_email_flag,
      -- Derived subscriber_has_email_flag_derived (clmn85_ in Q1, clmn82_ in Q2, clmn84_ in Q3)
      CASE
        WHEN subscriber_has_email_flag = 'subsnapfact' THEN 'Y'
        WHEN (classification_level_1_description = 'Standard Paid' AND delivery_medium_type = 'Bundle') THEN subscriber_has_email_flag
        ELSE 'Y'
      END AS subscriber_has_email_flag_derived,
      -- Derived Masthead Name (clmn86_ in Q1, clmn83_ in Q2, clmn85_ in Q3)
      CASE
        WHEN (gl_publication_code IN ('100', '101') OR masthead_code = 'TA') THEN 'The Australian'
        WHEN (gl_publication_code IN ('400', '401', '402') OR masthead_code = 'CM') THEN 'Courier Mail'
        WHEN (gl_publication_code IN ('110', '111', '116') OR masthead_code = 'DT') THEN 'Daily Telegraph'
        WHEN (gl_publication_code IN ('301', '302', '303') OR masthead_code = 'HS') THEN 'Herald Sun'
        WHEN (gl_publication_code IN ('500', '501', '560') OR masthead_code = 'AA') THEN 'The Advertiser'
        WHEN (gl_publication_code IN ('450', '460') OR masthead_code = 'CP') THEN 'Cairns Post'
        WHEN (gl_publication_code IN ('350', '351') OR masthead_code = 'GA') THEN 'Geelong'
        WHEN (gl_publication_code IN ('670', '685') OR masthead_code = 'GC') THEN 'Gold Coast'
        WHEN (gl_publication_code IN ('961', '962', '963') OR masthead_code = 'NT') THEN 'NT News'
        WHEN (gl_publication_code IN ('850', '851', '852') OR masthead_code = 'TM') THEN 'The Mercury'
        WHEN (gl_publication_code IN ('5053', '5253') OR masthead_code = 'TC') THEN 'Toowoomba'
        WHEN (gl_publication_code IN ('475', '490') OR masthead_code = 'TB') THEN 'Townsville'
        WHEN (gl_publication_code IN ('305', '307') OR masthead_code = 'WT') THEN 'Weekly Times'
        WHEN (gl_publication_code IN ('9001', '9002') OR masthead_code = 'CS') THEN 'Code'
        WHEN (gl_publication_code IN ('8821', '8822') OR masthead_code = 'PU') THEN 'Punters'
        WHEN (gl_publication_code IN ('8822') OR masthead_code = 'RN') THEN 'Racenet'
        WHEN (gl_publication_code IN ('9653', '9600') OR masthead_code = 'SC') THEN 'Supercoach Plus'
        WHEN (gl_publication_code IN ('9600', '9603') OR masthead_code = 'TS') THEN 'Taste Online'
        WHEN (gl_publication_code = '9003' OR masthead_code = 'AP') THEN 'Apple Podcast: Crime X'
        WHEN (gl_publication_code = '103' OR masthead_code = 'The Oz') THEN 'The Oz'
        WHEN (gl_publication_code = '9000' OR masthead_code = 'NW') THEN 'news.com.au'
        WHEN (gl_publication_code = '121') THEN 'Others'
        WHEN (gl_publication_code = '9002' OR masthead_code = 'BG') THEN 'Brain Games'
        WHEN (gl_publication_code IN ('9504', '9558', '9556', '9623', '9603', '9514', '121')) THEN 'Others'
        WHEN (gl_publication_code = '9644') THEN 'Suddenly'
        WHEN (gl_publication_code = '9903') THEN 'News Corporate'
        WHEN (gl_publication_code = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
        ELSE 'Discontinued' -- Default for unknown mastheads
      END AS masthead_name_derived
    FROM
      base_data
  )
SELECT
  FORMAT_DATE('%Y-%m-%d', subscription_date) AS report_date,
  -- Recognition Type (clmn88_ in Q1, clmn84_ in Q2, clmn86_ in Q3)
  CASE
    WHEN delivery_medium_type = 'Print' THEN 'Print Recognition'
    WHEN subscriber_has_email_flag_derived = 'N' THEN 'Print Recognition'
    ELSE 'Digital Recognition'
  END AS recognition_type,
  -- Masthead Category (clmn127_ in Q1, clmn103_ in Q2, clmn105_ in Q3)
  CASE
    WHEN masthead_name_derived = 'The Australian' THEN 'The Australian'
    WHEN (masthead_name_derived IN ('Daily Telegraph', 'The Advertiser', 'Herald Sun', 'Courier Mail')) THEN 'Metros'
    WHEN (masthead_name_derived IN ('Cairns Post', 'Gold Coast', 'Geelong', 'NT News', 'The Mercury', 'Townsville', 'Toowoomba')) THEN 'Regionals'
    WHEN masthead_name_derived = 'Weekly Times' THEN 'Others'
    WHEN (masthead_name_derived IN ('Supercoach Plus', 'Racenet', 'Punters', 'Code', 'Apple Podcast: Crime X', 'Taste Online', 'Others')) THEN 'Deep Niche Publications'
    ELSE 'Discontinued'
  END AS masthead_category,
  masthead_name_derived AS masthead_name,
  COUNT(DISTINCT subscription_id) AS total_digital_subscriptions,
  SUM(SAFE_CAST(revenue_amount AS NUMERIC)) AS total_digital_revenue
FROM
  intermediate_flags
WHERE
  (CASE
    WHEN delivery_medium_type = 'Print' THEN 'Print Recognition'
    WHEN subscriber_has_email_flag_derived = 'N' THEN 'Print Recognition'
    ELSE 'Digital Recognition'
  END) = 'Digital Recognition'
  AND (CASE
    WHEN masthead_name_derived = 'The Australian' THEN 'The Australian'
    WHEN (masthead_name_derived IN ('Daily Telegraph', 'The Advertiser', 'Herald Sun', 'Courier Mail')) THEN 'Metros'
    WHEN (masthead_name_derived IN ('Cairns Post', 'Gold Coast', 'Geelong', 'NT News', 'The Mercury', 'Townsville', 'Toowoomba')) THEN 'Regionals'
    WHEN masthead_name_derived = 'Weekly Times' THEN 'Others'
    WHEN (masthead_name_derived IN ('Supercoach Plus', 'Racenet', 'Punters', 'Code', 'Apple Podcast: Crime X', 'Taste Online', 'Others')) THEN 'Deep Niche Publications'
    ELSE 'Discontinued'
  END) != 'Discontinued'
GROUP BY
  report_date,
  masthead_category,
  recognition_type,
  masthead_name
ORDER BY
  report_date DESC, total_digital_subscriptions DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.subscription_date AS DATE)) as unique_dates, -- Assuming 'subscription_date' is the date column
  COUNT(DISTINCT t0.subscription_id) as unique_subscriptions, -- Assuming 'subscription_id' is the unique ID
  COUNT(DISTINCT t0.gl_publication_code) as unique_gl_publication_codes,
  COUNT(DISTINCT t0.masthead_code) as unique_masthead_codes,
  MIN(SAFE_CAST(t0.subscription_date AS DATE)) as earliest_date,
  MAX(SAFE_CAST(t0.subscription_date AS DATE)) as latest_date
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.subscription_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_presence_test,
  CASE WHEN COUNT(DISTINCT t0.subscription_id) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_id_test,
  CASE WHEN MAX(SAFE_CAST(t0.subscription_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN t0.delivery_medium_type IS NULL THEN 1 END) = 0 THEN 'PASS' ELSE 'FAIL' END as delivery_medium_type_not_null_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.subscription_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Digital Recognition Filter Adherence' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (CASE WHEN t0.delivery_medium_type = 'Print' THEN 'Print Recognition' WHEN (CASE WHEN t0.subscriber_has_email_flag = 'subsnapfact' THEN 'Y' WHEN (t0.classification_level_1_description = 'Standard Paid' AND t0.delivery_medium_type = 'Bundle') THEN t0.subscriber_has_email_flag ELSE 'Y' END) = 'N' THEN 'Print Recognition' ELSE 'Digital Recognition' END) = 'Digital Recognition' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (CASE WHEN t0.delivery_medium_type = 'Print' THEN 'Print Recognition' WHEN (CASE WHEN t0.subscriber_has_email_flag = 'subsnapfact' THEN 'Y' WHEN (t0.classification_level_1_description = 'Standard Paid' AND t0.delivery_medium_type = 'Bundle') THEN t0.subscriber_has_email_flag ELSE 'Y' END) = 'N' THEN 'Print Recognition' ELSE 'Digital Recognition' END) = 'Digital Recognition' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.subscription_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  SAFE_CAST(t0.subscription_date AS DATE) as subscription_date,
  t0.classification_level_1_description,
  t0.delivery_medium_type,
  t0.gl_publication_code,
  t0.masthead_code,
  t0.subscriber_has_email_flag,
  t0.subscription_id,
  SAFE_CAST(t0.revenue_amount AS NUMERIC) as revenue_amount
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
WHERE SAFE_CAST(t0.subscription_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY
  SAFE_CAST(t0.subscription_date AS DATE) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-03-23', 'original_format': '2025-03-23 04:54:02.058726+00', 'context': 'Used as a fixed date for clmn0_ in the innermost subquery of Q1, which then influences fiscal week/month calculations. This effectively makes the entire query static for a specific point in time.', 'suggested_fix': 'Replace with a dynamic date (e.g., CURRENT_DATE()) or a parameter that can be selected by the user.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as the baseline date for calculating fiscal week differences (DATETIME_DIFF) in Q1. This likely represents the start of a fiscal year.', 'suggested_fix': 'Replace with a parameter for fiscal year start date, or derive dynamically from a fiscal calendar table.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'100'"", ""'402'"", ""'301'"", '...', ""'TA'"", ""'CM'"", ""'DT'"", '...'], 'context': 'Extensive list of `gl_publication_code` and `masthead_code` values used in complex CASE statements to derive `masthead_name_derived` and `masthead_category`. This makes the logic difficult to maintain and update.', 'suggested_governance': 'Create a `masthead_lookup` reference table with `gl_publication_code`, `masthead_code`, `masthead_name`, and `masthead_category` columns. Join to this table instead of using hardcoded CASE statements.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'2025'"", ""'All Mastheads'"", ""'FCT'"", ""'Gross Cancellations'"", ""'Gross Acquisitions'""], 'context': ""The year '2025' is hardcoded in the fiscal period label. Report type labels ('FCT', 'Gross Cancellations', 'Gross Acquisitions') are hardcoded strings returned by queries, likely for filter options or report titles."", 'suggested_governance': ""Parameterize the fiscal year. Manage report labels/types in a configuration table or use Looker Studio's built-in parameter/control features."", 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB()`).', 'Replace hardcoded lookup values for mastheads and publication codes with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., fiscal year start, masthead groupings) instead of embedding complex logic directly in queries.']",22,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
"WITH OSandFACT AS (
    SELECT
      os.Actual_Amount,
      os.Budget_Amount,
      os.Forecast_Amount,
      calendar.fy_week_of_year,
      calendar.fy_year,
      os.gl_hierarchy_code,
      os.is_print_digital_flag,
      pub.l03_publication_code,
      pub.l12_publication_code,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_9,
      pub.publication_name,
      os.fiscal_week_id
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
          SAFE_CAST(c.fy_year AS INT64) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON os.os_level_12 = dep.department_code
)
SELECT
  SAFE_CAST(fy_week_of_year AS INT64) AS fiscal_week_of_year,
  SAFE_CAST(fy_year AS INT64) AS fiscal_year,
  SAFE_CAST(gl_hierarchy_code AS STRING) AS gl_hierarchy_code,
  SAFE_CAST(is_print_digital_flag AS STRING) AS is_print_digital_flag,
  SAFE_CAST(l03_publication_code AS STRING) AS l03_publication_code,
  SAFE_CAST(l12_publication_code AS STRING) AS l12_publication_code,
  SAFE_CAST(os_level_4 AS STRING) AS os_level_4,
  SAFE_CAST(os_level_5 AS STRING) AS os_level_5,
  SAFE_CAST(os_level_6 AS STRING) AS os_level_6,
  SAFE_CAST(os_level_7 AS STRING) AS os_level_7,
  SAFE_CAST(os_level_9 AS STRING) AS os_level_9,
  SAFE_CAST(publication_name AS STRING) AS publication_name,
  SUM(SAFE_CAST(Actual_Amount AS NUMERIC)) AS total_actual_amount,
  SUM(SAFE_CAST(Budget_Amount AS NUMERIC)) AS total_budget_amount,
  SUM(SAFE_CAST(Forecast_Amount AS NUMERIC)) AS total_forecast_amount
FROM
  OSandFACT
WHERE
  SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025'
  AND SAFE_CAST(fy_week_of_year AS INT64) = 40
  AND SAFE_CAST(os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses')
  AND SAFE_CAST(l03_publication_code AS STRING) = 'News Media Publishing'
  AND SAFE_CAST(os_level_6 AS STRING) IN ('Circulation', 'Subscription', 'Content Licensing')
GROUP BY
  fiscal_week_of_year,
  fiscal_year,
  gl_hierarchy_code,
  is_print_digital_flag,
  l03_publication_code,
  l12_publication_code,
  os_level_4,
  os_level_5,
  os_level_6,
  os_level_7,
  os_level_9,
  publication_name
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(os.fiscal_week_id AS INT64)) as unique_fiscal_week_ids,
  COUNT(DISTINCT SAFE_CAST(os.gl_publication_code AS STRING)) as unique_gl_publication_codes,
  COUNT(DISTINCT SAFE_CAST(os.os_level_4 AS STRING)) as unique_os_level_4_categories,
  MIN(SAFE_CAST(calendar.fy_year AS INT64)) as earliest_fiscal_year,
  MAX(SAFE_CAST(calendar.fy_year AS INT64)) as latest_fiscal_year,
  MIN(SAFE_CAST(calendar.fy_week_of_year AS INT64)) as earliest_fiscal_week_of_year,
  MAX(SAFE_CAST(calendar.fy_week_of_year AS INT64)) as latest_fiscal_week_of_year,
  SUM(CASE WHEN os.Actual_Amount IS NULL THEN 1 ELSE 0 END) as null_actual_amount_count,
  SUM(CASE WHEN os.Budget_Amount IS NULL THEN 1 ELSE 0 END) as null_budget_amount_count,
  SUM(CASE WHEN os.Forecast_Amount IS NULL THEN 1 ELSE 0 END) as null_forecast_amount_count
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN
  (
    SELECT DISTINCT
      SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
      SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
      SAFE_CAST(c.fy_year AS INT64) AS fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
      JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
  ) AS calendar
  ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  SAFE_CAST(calendar.fy_year AS INT64) >= SAFE_CAST(EXTRACT(YEAR FROM CURRENT_DATE()) - 2 AS INT64)
LIMIT 1;","WITH OSandFACT AS (
    SELECT
      os.Actual_Amount,
      os.Budget_Amount,
      os.Forecast_Amount,
      calendar.fy_week_of_year,
      calendar.fy_year,
      os.gl_hierarchy_code,
      os.os_level_4,
      pub.l03_publication_code,
      os.os_level_6
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
          SAFE_CAST(c.fy_year AS INT64) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
)
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_test,
  CASE WHEN SUM(SAFE_CAST(Budget_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as budget_amount_test,
  CASE WHEN SUM(SAFE_CAST(Forecast_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as forecast_amount_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(gl_hierarchy_code AS STRING)) = 1 AND MAX(SAFE_CAST(gl_hierarchy_code AS STRING)) = 'FY2025' THEN 'PASS' ELSE 'FAIL' END as fiscal_year_filter_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(fy_week_of_year AS INT64)) = 1 AND MAX(SAFE_CAST(fy_week_of_year AS INT64)) = 40 THEN 'PASS' ELSE 'FAIL' END as fiscal_week_filter_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(os_level_4 AS STRING)) >= 1 AND SUM(CASE WHEN SAFE_CAST(os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses') THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as os_level_4_filter_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(l03_publication_code AS STRING)) >= 1 AND SUM(CASE WHEN SAFE_CAST(l03_publication_code AS STRING) = 'News Media Publishing' THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as l03_pub_filter_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(os_level_6 AS STRING)) >= 1 AND SUM(CASE WHEN SAFE_CAST(os_level_6 AS STRING) IN ('Circulation', 'Subscription', 'Content Licensing') THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as os_level_6_filter_test
FROM
  OSandFACT
WHERE
  SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025'
  AND SAFE_CAST(fy_week_of_year AS INT64) = 40
  AND SAFE_CAST(os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses')
  AND SAFE_CAST(l03_publication_code AS STRING) = 'News Media Publishing'
  AND SAFE_CAST(os_level_6 AS STRING) IN ('Circulation', 'Subscription', 'Content Licensing')
LIMIT 1;","WITH OSandFACT AS (
    SELECT
      calendar.fy_week_of_year,
      os.gl_hierarchy_code,
      os.os_level_4,
      pub.l03_publication_code,
      os.os_level_6,
      control.period_name
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
      LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
          control.period_name
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON control.source_week_number = c.fy_year_week_number
      ) AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
)
SELECT
  'Business Rule Validation' as validation_type,
  'Fiscal Year Filter' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' THEN 1 ELSE 0 END) as records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' THEN 1 ELSE 0 END), COUNT(*)) * 100 as compliance_percentage
FROM OSandFACT
WHERE SAFE_CAST(fy_week_of_year AS INT64) = 40
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Fiscal Week Filter' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN SAFE_CAST(fy_week_of_year AS INT64) = 40 THEN 1 ELSE 0 END) as records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(fy_week_of_year AS INT64) = 40 THEN 1 ELSE 0 END), COUNT(*)) * 100 as compliance_percentage
FROM OSandFACT
WHERE SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025'
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'OS Level 4 Filter (Revenue/Expenses)' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN SAFE_CAST(os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses') THEN 1 ELSE 0 END) as records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(os_level_4 AS STRING) IN ('Total Revenue', 'Total Expenses') THEN 1 ELSE 0 END), COUNT(*)) * 100 as compliance_percentage
FROM OSandFACT
WHERE SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' AND SAFE_CAST(fy_week_of_year AS INT64) = 40
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'L03 Publication Filter (News Media Publishing)' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN SAFE_CAST(l03_publication_code AS STRING) = 'News Media Publishing' THEN 1 ELSE 0 END) as records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(l03_publication_code AS STRING) = 'News Media Publishing' THEN 1 ELSE 0 END), COUNT(*)) * 100 as compliance_percentage
FROM OSandFACT
WHERE SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' AND SAFE_CAST(fy_week_of_year AS INT64) = 40
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'OS Level 6 Filter (Revenue Types)' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN SAFE_CAST(os_level_6 AS STRING) IN ('Circulation', 'Subscription', 'Content Licensing') THEN 1 ELSE 0 END) as records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(os_level_6 AS STRING) IN ('Circulation', 'Subscription', 'Content Licensing') THEN 1 ELSE 0 END), COUNT(*)) * 100 as compliance_percentage
FROM OSandFACT
WHERE SAFE_CAST(gl_hierarchy_code AS STRING) = 'FY2025' AND SAFE_CAST(fy_week_of_year AS INT64) = 40
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Period Control Filter (CP/PY)' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN SAFE_CAST(period_name AS STRING) IN ('CP', 'PY') THEN 1 ELSE 0 END) as records_matching_rule,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(period_name AS STRING) IN ('CP', 'PY') THEN 1 ELSE 0 END), COUNT(*)) * 100 as compliance_percentage
FROM OSandFACT
LIMIT 5;","SELECT
  SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
  SAFE_CAST(calendar.fy_week_of_year AS INT64) AS fiscal_week_of_year,
  SAFE_CAST(calendar.fy_year AS INT64) AS fiscal_year,
  SAFE_CAST(os.gl_hierarchy_code AS STRING) AS gl_hierarchy_code,
  SAFE_CAST(os.is_print_digital_flag AS STRING) AS is_print_digital_flag,
  SAFE_CAST(pub.l03_publication_code AS STRING) AS l03_publication_code,
  SAFE_CAST(pub.l12_publication_code AS STRING) AS l12_publication_code,
  SAFE_CAST(os.os_level_4 AS STRING) AS os_level_4,
  SAFE_CAST(os.os_level_5 AS STRING) AS os_level_5,
  SAFE_CAST(os.os_level_6 AS STRING) AS os_level_6,
  SAFE_CAST(os.os_level_7 AS STRING) AS os_level_7,
  SAFE_CAST(os.os_level_9 AS STRING) AS os_level_9,
  SAFE_CAST(pub.publication_name AS STRING) AS publication_name,
  SAFE_CAST(os.Actual_Amount AS NUMERIC) AS actual_amount,
  SAFE_CAST(os.Budget_Amount AS NUMERIC) AS budget_amount,
  SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS forecast_amount
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
  ON os.gl_publication_code = pub.publication_code
  LEFT JOIN
  (
    SELECT DISTINCT
      SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
      SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
      SAFE_CAST(c.fy_year AS INT64) AS fy_year
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
      JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON control.source_week_number = c.fy_year_week_number AND control.period_name IN ('CP', 'PY')
  ) AS calendar
  ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN
  `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
  ON os.os_level_12 = dep.department_code
WHERE
  SAFE_CAST(calendar.fy_year AS INT64) = SAFE_CAST(EXTRACT(YEAR FROM CURRENT_DATE()) AS INT64)
  AND SAFE_CAST(calendar.fy_week_of_year AS INT64) <= SAFE_CAST(EXTRACT(WEEK FROM CURRENT_DATE()) AS INT64)
  AND os.Actual_Amount IS NOT NULL
ORDER BY
  fiscal_year DESC, fiscal_week_of_year DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'fiscal_period', 'hardcoded_values': [""'FY2025'"", '40'], 'context': 'Fiscal year and week are hardcoded in WHERE clauses.', 'suggested_governance': 'Use date parameters or derive from a central fiscal calendar table based on CURRENT_DATE().', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_categories', 'hardcoded_values': [""'Total Revenue'"", ""'Total Expenses'"", ""'News Media Publishing'"", ""'Circulation'"", ""'Subscription'"", ""'Content Licensing'""], 'context': 'Specific business categories for OS levels and publication codes are hardcoded in WHERE clauses.', 'suggested_governance': 'Store these categories in a dimension or lookup table and join to it, or use a configuration table for dynamic filtering.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'period_control_flags', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': ""Period control flags ('CP' for Current Period, 'PY' for Prior Year) are hardcoded in the calendar join."", 'suggested_governance': 'These flags are likely managed in the `v_asl_DIM_period_control` table. Ensure this table is properly governed and its values are consistent.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded fiscal years (e.g., 'FY2025') with a dashboard parameter or a dynamic calculation based on the current date and fiscal calendar logic."", 'Replace hardcoded fiscal weeks (e.g., 40) with a dashboard parameter or a dynamic calculation.', ""Replace hardcoded business category values (e.g., 'Total Revenue', 'News Media Publishing') with multi-select dashboard parameters that pull options from their respective dimension tables, or use joins to governed reference tables.""]",23,b1c5901f-a535-42eb-870d-05cc025f7c27
"-- This query consolidates key dimensions and the primary revenue metric from the dashboard's underlying queries.
-- It applies common filters and aggregates data to provide a unified view.
WITH base_data AS (
  SELECT
    t0.financial_year,
    t0.publication_name,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.advertiser_name,
    t0.calendar_month,
    t0.calendar_year,
    t0.revenue_group_subtype,
    t0.advertiser_group,
    t0.booking_number,
    t0.gross_revenue_amount,
    t0.revenue_type,
    t0.source_unified_publication_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    AND SAFE_CAST(t0.calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3 -- Filter for recent years to ensure data presence
    AND t0.financial_year IS NOT NULL
)
SELECT
  financial_year,
  SAFE_CAST(calendar_year AS STRING) AS calendar_year,
  SAFE_CAST(calendar_month AS STRING) AS calendar_month,
  publication_name,
  advertiser_name,
  revenue_group_subtype,
  revenue_transaction_status,
  source_publishing_division,
  advertiser_group,
  revenue_type,
  source_unified_publication_name,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount,
  COUNT(DISTINCT booking_number) AS distinct_bookings,
  COUNT(*) AS record_count
FROM base_data
GROUP BY
  financial_year,
  calendar_year,
  calendar_month,
  publication_name,
  advertiser_name,
  revenue_group_subtype,
  revenue_transaction_status,
  source_publishing_division,
  advertiser_group,
  revenue_type,
  source_unified_publication_name
ORDER BY
  financial_year DESC, calendar_year DESC, calendar_month DESC
LIMIT 100;","-- This query helps understand the data structure, unique values, and date ranges within the primary data source.
SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(calendar_year AS STRING)) as unique_calendar_years,
  COUNT(DISTINCT SAFE_CAST(calendar_month AS STRING)) as unique_calendar_months,
  COUNT(DISTINCT publication_name) as unique_publication_names,
  COUNT(DISTINCT advertiser_name) as unique_advertiser_names,
  COUNT(DISTINCT revenue_group_subtype) as unique_revenue_subtypes,
  COUNT(DISTINCT revenue_transaction_status) as unique_transaction_statuses,
  COUNT(DISTINCT source_publishing_division) as unique_publishing_divisions,
  MIN(SAFE_CAST(calendar_year AS STRING)) as earliest_calendar_year,
  MAX(SAFE_CAST(calendar_year AS STRING)) as latest_calendar_year,
  SUM(CASE WHEN gross_revenue_amount IS NULL THEN 1 ELSE 0 END) as null_gross_revenue_amount_count
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3 -- Sample recent data
LIMIT 1;","-- This query performs quick validation checks for data presence, freshness, and common filter values.
SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_test,
  CASE WHEN COUNT(DISTINCT advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_count_test,
  CASE WHEN MAX(SAFE_CAST(calendar_year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as freshness_test_calendar_year,
  CASE WHEN COUNT(CASE WHEN revenue_transaction_status IN ('Billed', 'Booked') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_filter_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Check recent data
LIMIT 1;","-- This query validates the key business rules and filters identified from the dashboard's SQL queries.
SELECT
  'Business Rule Validation' as validation_type,
  'source_publishing_division_exclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3 -- Sample recent data
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'revenue_transaction_status_inclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3 -- Sample recent data
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'revenue_group_subtype_inclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_group_subtype IN ('Digital', 'Print') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_group_subtype IN ('Digital', 'Print') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 3; -- Sample recent data","-- This query retrieves a representative sample of raw data for further analysis.
SELECT
  SAFE_CAST(financial_year AS STRING) AS financial_year,
  SAFE_CAST(calendar_year AS STRING) AS calendar_year,
  SAFE_CAST(calendar_month AS STRING) AS calendar_month,
  publication_name,
  advertiser_name,
  booking_number,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  revenue_group_subtype,
  revenue_transaction_status,
  revenue_type,
  source_publishing_division,
  source_unified_publication_name
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(calendar_year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Sample recent data
  AND gross_revenue_amount IS NOT NULL
ORDER BY SAFE_CAST(calendar_year AS STRING) DESC, SAFE_CAST(calendar_month AS STRING) DESC, SAFE_CAST(gross_revenue_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'202'""], 'context': 'financial_year filter in Query 1', 'suggested_governance': ""Clarify meaning of '202' (e.g., specific financial period code) and manage via a configuration table or parameter."", 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'2022'"", ""'2024'"", ""'2025'""], 'context': 'calendar_year filters in Query 2 and 3', 'suggested_governance': 'Replace with relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`) or dashboard parameters.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Digital'"", ""'Print'""], 'context': 'revenue_group_subtype filter in Query 2 and 3', 'suggested_governance': 'Manage allowed revenue group subtypes in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'INTERNAL PUIG Oceania'"", ""'PUIG Oceania'"", ""'Greyhound Racing Victoria'""], 'context': 'advertiser_name filter in Query 2 and 3', 'suggested_governance': 'Manage specific advertiser lists via a configuration table or dashboard parameter.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'source_publishing_division exclusion in all queries', 'suggested_governance': 'Manage excluded publishing divisions in a configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'Billed'"", ""'Booked'""], 'context': 'revenue_transaction_status filter in all queries', 'suggested_governance': 'Manage allowed transaction statuses in a reference table.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded year values (e.g., '2022', '2024', '2025') with date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`)."", 'Replace hardcoded lookup values for dimensions like `revenue_group_subtype`, `revenue_transaction_status`, `source_publishing_division` with joins to governed reference tables or dashboard parameters.', 'Use configuration tables for specific business rules like included/excluded `advertiser_name` or `financial_year` codes instead of hardcoded logic.']",24,c560ed20-040d-4c6a-9c3f-ec8bce27d132
"-- THIS IS THE MAIN SQL TO RUN
WITH SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  CTE2 AS (
    SELECT
      unified_publication_name,
      unified_publication_gl_code,
      fy_year_month_number,
      financial_year,
      financial_quarter,
      financial_month,
      financial_short_month,
      financial_week,
      revenue_transaction_status,
      is_print_digital_flag,
      current_financial_month,
      current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE()) AS DOW_Today,
      sales_segment_l_1_name,
      sales_segment_l_2_name,
      sales_segment_l_1_name_sync,
      sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      advertiser_group,
      advertiser_parent,
      SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
      sales_segment_gm_name,
      CASE
        WHEN upper(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW',
          'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
        ELSE sales_segment_gm_name_sync
      END AS sales_segment_gm_name_sync,
      revenue_group_level_1_name,
      revenue_group_level_2_name,
      SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
      SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
      SUM(IFNULL(pipeline, 0)) AS pipeline,
      SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
      UPPER(revenue_type) AS revenue_type,
      UPPER(revenue_group_subtype) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      portfolio_group_name_sync,
      portfolio_group_name_current,
      portfolio_parent_group_name_sync,
      nca_industry_pillar,
      publishing_division_group,
      publishing_division_parent,
      is_future_period_flag,
      ly_is_future_period_flag,
      ny_is_future_period_flag,
      cost_model_type,
      CASE
        WHEN source_system_code = 'PLUTO' THEN NULL
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      portfolio_conformed_name_sync,
      publishing_division,
      booking_line_created_week,
      booking_line_created_month,
      booking_line_created_short_month,
      booking_line_created_quarter,
      booking_line_created_year,
      agency_parent,
      agency_group,
      agency_name,
      agency_number,
      calendar_month_name,
      calendar_year,
      classification_name,
      SUM(IFNULL(target, 0)) AS target,
      IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD,
      account_number,
      publication_name
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED',
        'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
    GROUP BY ALL
  ),
  final_data AS (
    SELECT
      *,
      MIN(
        CASE
          WHEN advertiser_parent = ""DOUBLECLICK"" THEN SAFE_CAST(booking_line_created_date AS DATE)
        END) OVER (PARTITION BY financial_year) AS fix_date_lod_calculated,
      CASE WHEN fin_adtype_name = 'XTEND' THEN 'XTEND' ELSE revenue_type END AS Ad_Type_Grouping
    FROM CTE2
  )
SELECT
  financial_year,
  Sales_Group,
  advertiser_parent,
  Ad_Type_Grouping,
  revenue_type,
  sales_segment_gm_name_sync,
  GSD,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount,
  SUM(SAFE_CAST(adjustment_amount AS NUMERIC)) AS total_adjustment_amount,
  SUM(SAFE_CAST(pub_lgb AS NUMERIC)) AS total_pub_lgb,
  SUM(SAFE_CAST(ss_lgb AS NUMERIC)) AS total_ss_lgb,
  SUM(SAFE_CAST(pipeline AS NUMERIC)) AS total_pipeline,
  SUM(SAFE_CAST(target AS NUMERIC)) AS total_target,
  SUM(CASE WHEN relative_fy_year_offset = -1 THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END) AS ly_gross_revenue,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END) AS cy_gross_revenue,
  SUM(CASE WHEN relative_fy_year_offset = -1 AND (SAFE_CAST(CASE WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' AND sales_segment_l_2_name_sync = 'Digital Other' AND advertiser_parent != 'DOUBLECLICK') THEN fix_date_lod_calculated ELSE SAFE_CAST(booking_line_created_date AS DATE) END AS DATETIME) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-01-02 01:26:03.721975+00', 'UTC') AS DATETIME), INTERVAL -365 DAY)) THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END) AS ly_gross_revenue_conditional_date,
  MAX(CASE WHEN relative_fy_year_offset = -1 THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END) AS ly_gross_revenue_max
FROM final_data
WHERE SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) -- Filter for last 2 years of data for performance
GROUP BY
  financial_year,
  Sales_Group,
  advertiser_parent,
  Ad_Type_Grouping,
  revenue_type,
  sales_segment_gm_name_sync,
  GSD
ORDER BY financial_year DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(relative_fy_year_offset AS STRING)) as unique_fy_offsets,
  COUNT(DISTINCT SAFE_CAST(advertiser_parent AS STRING)) as unique_advertiser_parents,
  COUNT(DISTINCT SAFE_CAST(revenue_type AS STRING)) as unique_revenue_types,
  COUNT(DISTINCT SAFE_CAST(sales_segment_l_2_name_sync AS STRING)) as unique_sales_segments,
  MIN(SAFE_CAST(booking_line_created_date AS DATE)) as earliest_booking_date,
  MAX(SAFE_CAST(booking_line_created_date AS DATE)) as latest_booking_date,
  SUM(CASE WHEN gross_revenue_amount IS NULL THEN 1 ELSE 0 END) as null_gross_revenue_count,
  SUM(CASE WHEN revenue_transaction_status IS NULL THEN 1 ELSE 0 END) as null_revenue_status_count,
  APPROX_COUNT_DISTINCT(unified_publication_name) as approx_unique_publications
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY) 
LIMIT 1000;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) >= 2 THEN 'PASS' ELSE 'FAIL' END as multi_year_data_test,
  CASE WHEN SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_filter_test,
  CASE WHEN MAX(SAFE_CAST(booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'relative_fy_year_offset_distribution' as rule_name,
  SAFE_CAST(relative_fy_year_offset AS STRING) as relative_fy_year_offset_value,
  COUNT(*) as records_count,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) as total_gross_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 730 DAY)
GROUP BY
  relative_fy_year_offset_value
ORDER BY
  relative_fy_year_offset_value;","SELECT 
  SAFE_CAST(financial_year AS INT64) as financial_year,
  SAFE_CAST(financial_month AS STRING) as financial_month,
  SAFE_CAST(booking_line_created_date AS DATE) as booking_line_created_date,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(relative_fy_year_offset AS INT64) as relative_fy_year_offset,
  SAFE_CAST(advertiser_parent AS STRING) as advertiser_parent,
  SAFE_CAST(revenue_type AS STRING) as revenue_type,
  SAFE_CAST(fin_adtype_name AS STRING) as fin_adtype_name,
  SAFE_CAST(sales_segment_l_2_name_sync AS STRING) as sales_segment_l_2_name_sync,
  SAFE_CAST(revenue_transaction_status AS STRING) as revenue_transaction_status,
  SAFE_CAST(style_name AS STRING) as style_name,
  SAFE_CAST(source_system_code AS STRING) as source_system_code,
  SAFE_CAST(current_portfolio_group_owner_sync AS STRING) as current_portfolio_group_owner_sync,
  SAFE_CAST(account_number AS STRING) as account_number,
  SAFE_CAST(publication_name AS STRING) as publication_name
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  SAFE_CAST(booking_line_created_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  AND gross_revenue_amount IS NOT NULL
ORDER BY
  SAFE_CAST(booking_line_created_date AS DATE) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-01-02', 'original_format': ""DATE(TIMESTAMP '2025-01-02 01:26:03.721975+00', 'UTC')"", 'context': 'used as a reference date in a conditional gross revenue calculation (LY_Gross_Revenue_Conditional_Date)', 'suggested_fix': 'replace with CURRENT_DATE() or a dashboard parameter for dynamic date analysis', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Client'"", ""'DOUBLECLICK'"", ""'XTEND'"", ""'MRCA'"", ""'Ian Paterson'"", ""'BILLED'"", ""'BOOKED'"", ""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'"", ""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'"", '-1', '0', '1', ""'DIGITAL'"", ""'Digital Other'"", ""'CONSORTIUM NSW'"", ""'KEY ACCOUNTS NSW RETAIL'"", ""'DIRECT NSW'"", ""'INDEPENDENT AGENCIES NSW'"", ""'PRESTIGE'""], 'context': 'various filters and CASE statements for sales groups, advertiser types, revenue statuses, style names, publishing divisions, and financial year offsets.', 'suggested_governance': 'externalize these values into governed lookup tables or configuration tables to allow for easier updates and consistent application across dashboards.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `CURRENT_DATE()`, `DATE_SUB(CURRENT_DATE(), INTERVAL N DAY)`).', ""Replace hardcoded lookup values (e.g., 'XTEND', 'MRCA', 'BILLED') with joins to governed reference tables or dashboard parameters."", ""Use configuration tables for complex business rules (e.g., sales segment mappings to 'Ian Paterson', publication name exclusions) instead of hardcoded logic within queries.""]",25,1a5f7b4e-ea3a-46e4-8b77-b428f4178510
"WITH
  params AS (
    SELECT
      0 AS reporting_mth, -- Default to 0 for relative month logic
      '0' AS customer_retention_type_param -- Default to '0' for detailed customer status
  ),
  CTE AS (
    SELECT
      t.*,
      CASE
        WHEN (SELECT reporting_mth FROM params) = 0 THEN
          CASE
            WHEN relative_fy_month_offset = 0 OR relative_fy_month_offset = -12 THEN CAST(financial_month AS INT)
          END
        ELSE (SELECT reporting_mth FROM params)
      END AS filter_reporting_month,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance AS t
    WHERE
      -- Apply a reasonable date filter for performance and cost optimization
      SAFE_CAST(t.financial_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
  ),
  CalculatedFields AS (
    SELECT
      *,
      MAX(
        CASE
          WHEN filter_reporting_month = CAST(financial_month AS INT) THEN financial_quarter
          WHEN (SELECT reporting_mth FROM params) = 0 THEN IF(relative_fy_quarter_offset = 0, financial_quarter, null)
          ELSE NULL
        END) OVER (PARTITION BY filter_reporting_month) AS report_quarter,
      CASE
        WHEN (SELECT customer_retention_type_param FROM params) = '1' THEN 'All'
        ELSE
        CASE
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
          ELSE 'Other'
        END
      END AS customer_status_full,
      -- Always divide by 1000 based on original query logic ('$\'000' = '$' is always false)
      SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_amount_k,
      SAFE_DIVIDE(target, 1000) AS target_k,
      -- blank_portfolio_flag calculation
      CASE
        WHEN SUM(SAFE_DIVIDE(gross_revenue_amount, 1000)) OVER (PARTITION BY portfolio_conformed_name_sync) > 0.01
          OR SUM(SAFE_DIVIDE(gross_revenue_amount, 1000)) OVER (PARTITION BY portfolio_conformed_name_sync) < -0.01
          OR SUM(IF(relative_fy_year_offset = 0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) != 0 THEN 'include'
        ELSE 'exclude'
      END AS blank_portfolio_flag,
      -- Derived revenue_type_adjusted for consistency
      CASE WHEN fin_adtype_name = 'XTEND' THEN 'XTEND' ELSE revenue_type END AS revenue_type_adjusted
    FROM
      CTE
  )
SELECT
  GSD,
  product_group,
  customer_status_full,
  SUM(CASE WHEN relative_fy_year_offset = 0 AND relative_fy_quarter_offset = 0 THEN gross_revenue_amount_k ELSE NULL END) AS current_year_q1_revenue_k,
  SUM(CASE WHEN relative_fy_year_offset = -1 AND relative_fy_quarter_offset = -4 THEN gross_revenue_amount_k ELSE NULL END) AS previous_year_q4_revenue_k,
  SUM(CASE WHEN relative_fy_quarter_offset = 0 THEN target_k ELSE NULL END) AS current_year_target_k,
  COUNT(CASE WHEN product_group IS NOT NULL THEN 1 ELSE NULL END) AS product_group_record_count,
  SUM(CASE WHEN product_group = 'The Australian & Prestige' THEN 1
           WHEN product_group = 'State & Communities' THEN 2
           WHEN product_group = 'Free News & Lifestyle' THEN 3
           WHEN product_group = 'Client' THEN 4
           WHEN product_group = 'Commercial Content' THEN 5
           WHEN product_group = 'Group Functions' THEN 6
           WHEN product_group = 'Others' THEN 7
           WHEN product_group = 'Unknown' THEN 8 ELSE 9 END) AS product_group_mapped_sum
FROM
  CalculatedFields
WHERE
  blank_portfolio_flag = 'include'
  AND GSD IN ('DESIREE DURRANT', 'CHRIS JEFFS')
  AND (revenue_type_adjusted NOT IN ('PRINT') OR revenue_type_adjusted IS NULL)
GROUP BY
  GSD,
  product_group,
  customer_status_full
ORDER BY
  GSD, product_group
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_date AS DATE)) as unique_financial_dates,
  COUNT(DISTINCT advertiser_group) as unique_advertiser_groups,
  COUNT(DISTINCT portfolio_conformed_name_sync) as unique_portfolios,
  COUNT(DISTINCT GSD) as unique_gsds,
  MIN(SAFE_CAST(financial_date AS DATE)) as earliest_financial_date,
  MAX(SAFE_CAST(financial_date AS DATE)) as latest_financial_date,
  APPROX_COUNT_DISTINCT(advertiser_group || '-' || SAFE_CAST(financial_date AS STRING)) as approx_unique_daily_advertiser_records,
  SUM(CASE WHEN gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_amount_count,
  SUM(CASE WHEN target IS NULL THEN 1 ELSE 0 END) AS null_target_count
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  SAFE_CAST(financial_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN SUM(SAFE_CAST(target AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as target_test,
  CASE WHEN COUNT(DISTINCT GSD) > 1 THEN 'PASS' ELSE 'FAIL' END as gsd_diversity_test,
  CASE WHEN MAX(SAFE_CAST(financial_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  SAFE_CAST(financial_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","WITH
  params AS (
    SELECT
      0 AS reporting_mth,
      '0' AS customer_retention_type_param
  ),
  CTE AS (
    SELECT
      t.*,
      CASE
        WHEN (SELECT reporting_mth FROM params) = 0 THEN
          CASE
            WHEN relative_fy_month_offset = 0 OR relative_fy_month_offset = -12 THEN CAST(financial_month AS INT)
          END
        ELSE (SELECT reporting_mth FROM params)
      END AS filter_reporting_month,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance AS t
    WHERE
      SAFE_CAST(t.financial_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
  ),
  CalculatedFields AS (
    SELECT
      *,
      CASE
        WHEN (SELECT customer_retention_type_param FROM params) = '1' THEN 'All'
        ELSE
        CASE
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
          ELSE 'Other'
        END
      END AS customer_status_full
    FROM
      CTE
  )
SELECT
  'Business Rule Validation' as validation_type,
  'customer_status_logic' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN customer_status_full = 'NEW BUSINESS' AND fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 1 ELSE 0 END) as new_business_matches,
  SUM(CASE WHEN customer_status_full = 'RETAINED' AND fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 1 ELSE 0 END) as retained_matches,
  SUM(CASE WHEN customer_status_full = 'INACTIVE' AND fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 1 ELSE 0 END) as inactive_matches,
  SUM(CASE WHEN customer_status_full = 'LAPSED' AND fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 1 ELSE 0 END) as lapsed_matches,
  SUM(CASE WHEN customer_status_full = 'Other' AND NOT (
    (fix_ly_lgr <= 1 AND fix_ty_lgr > 1) OR
    (fix_ly_lgr > 1 AND fix_ty_lgr > 1) OR
    (fix_ly_lgr > 1 AND fix_ty_lgr <= 1) OR
    (fix_ly_lgr <= 1 AND fix_ty_lgr <= 1)
  ) THEN 1 ELSE 0 END) as other_matches,
  SUM(CASE WHEN customer_status_full = 'All' AND (SELECT customer_retention_type_param FROM params) = '1' THEN 1 ELSE 0 END) as all_status_matches
FROM
  CalculatedFields
WHERE
  -- Filter to a reasonable subset for validation
  SAFE_CAST(financial_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
LIMIT 1;","SELECT
  SAFE_CAST(financial_date AS DATE) as financial_date,
  GSD,
  advertiser_group,
  portfolio_conformed_name_sync,
  product_group,
  revenue_type,
  fin_adtype_name,
  gross_revenue_amount,
  target,
  relative_fy_year_offset,
  relative_fy_quarter_offset,
  relative_fy_month_offset,
  financial_month,
  financial_quarter,
  sales_segment_gm_name_sync
FROM
  `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
WHERE
  SAFE_CAST(financial_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
ORDER BY
  SAFE_CAST(financial_date AS DATE) DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['0.01'], 'context': 'Threshold for blank_portfolio_flag to include/exclude portfolios with negligible revenue/target.', 'suggested_governance': 'Define as a configurable parameter or in a business rules table.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['1'], 'context': 'Threshold for gross revenue amount (fix_ly_lgr, fix_ty_lgr) to classify customer status (NEW BUSINESS, RETAINED, INACTIVE, LAPSED).', 'suggested_governance': 'Define as a configurable parameter or in a business rules table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'DESIREE DURRANT'"", ""'CHRIS JEFFS'""], 'context': 'Specific General Sales Director (GSD) names used as filters.', 'suggested_governance': 'Join to a `gsd_master` or `employee_dim` table, or use a parameter for selection.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PRINT'"", ""'XTEND'""], 'context': 'Specific revenue type and ad type names used in conditional logic and filters.', 'suggested_governance': 'Join to `revenue_type_dim` or `ad_type_dim` tables.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Australian & Prestige'"", ""'State & Communities'"", ""'Free News & Lifestyle'"", ""'Client'"", ""'Commercial Content'"", ""'Group Functions'"", ""'Others'"", ""'Unknown'""], 'context': 'Product group names hardcoded in a CASE statement for mapping to integer values.', 'suggested_governance': 'Create a `product_group_dim` table with a mapping column.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded GSD names with a multi-select parameter or a join to a GSD dimension table.', 'Replace hardcoded product group names, revenue types, and ad types with joins to governed reference tables.', 'Externalize business thresholds (e.g., 0.01 for portfolio flag, 1 for customer status) into configuration tables or dashboard parameters.', 'Document and standardize the usage of Looker Studio parameters like `@reporting_mth` and `@customer_retention_type`.']",26,155c4518-72bf-4309-a0e9-240dd564f421
"WITH base_acquisitions AS (
  SELECT
    SAFE_CAST(DATETIME_TRUNC(movement_datetime, SECOND) AS DATE) AS acquisition_date,
    subscription_id_src,
    subscriber_id_src,
    masthead,
    subscription_movement_count_type,
    sold_in_rate_plan_code,
    SUBSTR(sold_in_source_code, 1, 2) AS source_masthead_code
  FROM
    `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
  WHERE
    masthead = 'SC'
    AND subscription_movement_count_type = 'acquisition'
    AND movement_datetime >= DATE '2024-07-01'
    AND movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
),
grouped_metrics AS (
  SELECT
    acquisition_date,
    source_masthead_code,
    COUNT(DISTINCT subscription_id_src) AS unique_acquisitions_by_source_daily,
    COUNT(DISTINCT subscriber_id_src) AS unique_subscribers_by_source_daily
  FROM
    base_acquisitions
  GROUP BY
    acquisition_date,
    source_masthead_code
)
SELECT
  'Overall' AS aggregation_level,
  NULL AS acquisition_date,
  NULL AS source_masthead_code,
  COUNT(DISTINCT t1.subscription_id_src) AS total_unique_acquisitions_overall,
  COUNT(DISTINCT t1.subscriber_id_src) AS total_unique_subscribers_overall,
  NULL AS unique_acquisitions_by_source_daily,
  NULL AS unique_subscribers_by_source_daily
FROM
  base_acquisitions AS t1
UNION ALL
SELECT
  'Daily by Source' AS aggregation_level,
  acquisition_date,
  source_masthead_code,
  NULL AS total_unique_acquisitions_overall,
  NULL AS total_unique_subscribers_overall,
  unique_acquisitions_by_source_daily,
  unique_subscribers_by_source_daily
FROM
  grouped_metrics
ORDER BY
  aggregation_level DESC, acquisition_date DESC, unique_acquisitions_by_source_daily DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(movement_datetime AS DATE)) as unique_movement_dates,
  COUNT(DISTINCT subscriber_id_src) as unique_subscribers,
  COUNT(DISTINCT subscription_id_src) as unique_subscriptions,
  COUNT(DISTINCT masthead) as unique_mastheads,
  COUNT(DISTINCT subscription_movement_count_type) as unique_movement_types,
  COUNT(DISTINCT sold_in_rate_plan_code) as unique_rate_plans,
  MIN(SAFE_CAST(movement_datetime AS DATE)) as earliest_movement_date,
  MAX(SAFE_CAST(movement_datetime AS DATE)) as latest_movement_date
FROM 
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  SAFE_CAST(movement_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN COUNT(DISTINCT subscription_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as acquisitions_exist_test,
  CASE WHEN MAX(SAFE_CAST(movement_datetime AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(DISTINCT subscriber_id_src) > 0 THEN 'PASS' ELSE 'FAIL' END as subscribers_exist_test,
  CASE WHEN COUNT(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as sc_acquisition_data_test
FROM 
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  SAFE_CAST(movement_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'SuperCoach Acquisition Data' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN masthead = 'SC' AND subscription_movement_count_type = 'acquisition' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage,
  COUNT(DISTINCT subscription_id_src) as distinct_subscriptions_in_scope
FROM 
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  SAFE_CAST(movement_datetime AS DATE) >= DATE '2024-07-01' AND SAFE_CAST(movement_datetime AS DATE) < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
LIMIT 1;","SELECT 
  SAFE_CAST(movement_datetime AS DATE) as movement_date,
  subscriber_id_src,
  subscription_id_src,
  masthead,
  subscription_movement_count_type,
  sold_in_rate_plan_code,
  sold_in_source_code,
  is_paying_flag
FROM 
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  SAFE_CAST(movement_datetime AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND masthead = 'SC'
ORDER BY
  movement_datetime DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2024-07-01', 'original_format': ""DATE '2024-07-01'"", 'context': 'start date for movement_datetime filter', 'suggested_fix': 'replace with dashboard date parameter or relative date function (e.g., DATE_SUB(CURRENT_DATE(), INTERVAL X DAY))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-08-19', 'original_format': ""DATE '2024-08-19'"", 'context': 'end date for movement_datetime filter (used with DATETIME_ADD)', 'suggested_fix': 'replace with dashboard date parameter or relative date function (e.g., CURRENT_DATE())', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'SC'""], 'context': ""masthead filter for 'SuperCoach'"", 'suggested_governance': 'replace with a parameter or join to a masthead lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'acquisition'""], 'context': 'subscription_movement_count_type filter', 'suggested_governance': 'replace with a parameter or join to a movement type lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'SC_SDO_AP24AM12'"", ""'SC_SDO_AP20AM12'""], 'context': 'sold_in_rate_plan_code filter', 'suggested_governance': 'replace with a parameter or join to a rate plan lookup table', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': ['2452260'], 'context': 'specific subscriber_id_src filter', 'suggested_governance': 'replace with a dashboard filter control or parameter for subscriber ID', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CS'""], 'context': 'SUBSTR(sold_in_source_code, 1, 2) filter', 'suggested_governance': 'replace with a parameter or join to a source code lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., CURRENT_DATE(), DATE_SUB)', 'Replace hardcoded lookup values (masthead, movement type, rate plan codes, source codes) with joins to governed reference tables or dashboard parameters', 'Replace hardcoded subscriber IDs with dashboard filter controls or parameters to allow dynamic selection']",27,6e8b534b-485a-48dd-842d-13dc6bebb01a
"WITH base_data AS (
  SELECT
    t0.Source AS Source,
    t0.Advertiser AS Advertiser,
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS CalendarMonth_Truncated,
    t0.PaidImpressions AS PaidImpressions,
    t0.RevenueGross AS RevenueGross,
    t0.TransactionType AS TransactionType
  FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
  WHERE
    SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH) -- Sample recent 3 years of monthly data
)
SELECT
  CalendarMonth_Truncated,
  Advertiser,
  Source,
  TransactionType,
  SUM(SAFE_CAST(PaidImpressions AS NUMERIC)) AS total_paid_impressions,
  SUM(SAFE_CAST(RevenueGross AS NUMERIC)) AS total_gross_revenue
FROM base_data
WHERE
  TransactionType = 'Guaranteed'
  AND Advertiser = 'Chemist Warehouse *'
  AND CalendarMonth_Truncated = DATE '2025-06-01' -- Specific hardcoded filter from original query
GROUP BY
  CalendarMonth_Truncated,
  Advertiser,
  Source,
  TransactionType
ORDER BY
  CalendarMonth_Truncated DESC, Advertiser, Source, TransactionType
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT t0.Advertiser) as unique_advertisers,
  COUNT(DISTINCT t0.Source) as unique_sources,
  COUNT(DISTINCT t0.TransactionType) as unique_transaction_types,
  MIN(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE)) as earliest_calendar_date,
  MAX(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE)) as latest_calendar_date,
  SUM(CASE WHEN t0.PaidImpressions IS NULL THEN 1 ELSE 0 END) as null_paid_impressions_count,
  SUM(CASE WHEN t0.RevenueGross IS NULL THEN 1 ELSE 0 END) as null_revenue_gross_count
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH) -- Sample recent 3 years
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.RevenueGross AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN SUM(SAFE_CAST(t0.PaidImpressions AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as impressions_positive_test,
  CASE WHEN COUNT(DISTINCT t0.Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END as advertisers_exist_test,
  CASE WHEN COUNT(DISTINCT t0.TransactionType) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_types_exist_test,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_exists_for_filters_test
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE
  t0.TransactionType = 'Guaranteed'
  AND t0.Advertiser = 'Chemist Warehouse *'
  AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) = DATE '2025-06-01'
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'TransactionType Distribution' as rule_name,
  t0.TransactionType,
  COUNT(*) as records_count,
  SUM(SAFE_CAST(t0.RevenueGross AS NUMERIC)) as total_revenue_for_type
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH) -- Sample recent 3 years
GROUP BY t0.TransactionType
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'Advertiser Distribution' as rule_name,
  t0.Advertiser,
  COUNT(*) as records_count,
  SUM(SAFE_CAST(t0.RevenueGross AS NUMERIC)) as total_revenue_for_advertiser
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 36 MONTH) -- Sample recent 3 years
GROUP BY t0.Advertiser
ORDER BY records_count DESC
LIMIT 10;","SELECT
  t0.Source,
  t0.Advertiser,
  t0.CalendarMonth,
  t0.CalendarYear,
  t0.PaidImpressions,
  t0.RevenueGross,
  t0.TransactionType,
  SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS CalendarMonth_Truncated
FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 12 MONTH) -- Sample last 12 months
ORDER BY SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATE) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-01', 'original_format': ""DATE '2025-06-01'"", 'context': 'Filter for CalendarMonth_Truncated in the main programmatic sales query.', 'suggested_fix': 'replace with a date parameter (e.g., `_DS_START_DATE`) or relative date (e.g., `DATE_TRUNC(CURRENT_DATE(), MONTH)`)', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Guaranteed'""], 'context': 'Filter for TransactionType in the main programmatic sales query.', 'suggested_governance': 'use a parameter or join to a transaction_type_lookup table', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Chemist Warehouse *'""], 'context': 'Filter for Advertiser in the main programmatic sales query.', 'suggested_governance': 'use a parameter or join to an advertiser_master table', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded dates with date parameters or relative date functions (e.g., `_DS_START_DATE`, `_DS_END_DATE` in Looker Studio)', 'Replace hardcoded lookup values (Advertiser, TransactionType) with parameters or joins to governed reference tables']",28,87651b69-c43e-471f-9c4b-98df1208a844
"WITH OSandFACT_Base AS (
  SELECT
    os.Actual_Amount,
    os.Budget_Amount,
    os.Budget_Volume,
    os.Forecast_Amount,
    os.Forecast_Volume,
    os.Last_Year_Actual_Amount,
    os.Last_Year_volume,
    os.volume,
    os.day_of_week,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.fy_month_of_year,
    calendar.fy_week_of_year,
    calendar.fy_year_week_number,
    os.os_level_10,
    os.os_level_7,
    os.gl_publication_code AS publication_code,
    pub.publication_name,
    os.relative_fisc_week_number,
    calendar.relative_fisc_year_number,
    calendar.fy_quarter_of_year,
    os.os_level_8
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control ON control.source_week_number = calendar.fy_year_week_number AND control.period_name IN ('CP', 'PY')
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND pub.l04_publication_code <> 'Free News & Lifestyle'
    AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
    AND os.gl_hierarchy_code = 'FY2025'
),
Derived_Columns AS (
  SELECT
    Actual_Amount,
    Budget_Amount,
    Budget_Volume,
    Forecast_Amount,
    Forecast_Volume,
    Last_Year_Actual_Amount,
    Last_Year_volume,
    volume,
    day_of_week,
    fy_first_day_of_week,
    fy_last_day_of_week,
    fy_month_of_year,
    fy_week_of_year,
    fy_year_week_number,
    os_level_10,
    os_level_7,
    publication_code,
    publication_name,
    relative_fisc_week_number,
    relative_fisc_year_number,
    fy_quarter_of_year,
    os_level_8,

    -- Derived columns from Query 1
    CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END AS publication_name_adjusted_q1,
    CASE
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'The Daily Telegraph') THEN ' NSW'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Herald Sun', 'Geelong Advertiser', 'Weekly Times')) THEN '  VIC'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'The Advertiser') THEN '   SA'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Cairns Post', 'GCB', 'Townsville Bulletin', 'The Chronicle', 'Daily Mercury', 'Sunshine Coast')) THEN '     QLD'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Northern Territory News') THEN '      NT'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mercury') THEN '    TAS'
      ELSE NULL
    END AS publication_state_group_q1,
    CASE
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
      ELSE NULL
    END AS standardized_publication_name_q1,
    CASE WHEN (relative_fisc_week_number < 0) THEN Budget_Volume ELSE NULL END AS past_budget_volume_q1,

    -- Derived columns from Query 2
    (EXTRACT(DAYOFWEEK FROM SAFE_CAST(fy_first_day_of_week AS TIMESTAMP)) - 1) AS day_of_week_num_q2,
    DATETIME_DIFF(SAFE_CAST(fy_first_day_of_week AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS weeks_diff_from_fixed_date_q2,
    DATETIME_SUB(SAFE_CAST(fy_first_day_of_week AS DATETIME), INTERVAL -7 DAY) AS date_plus_7_days_q2,
    DATETIME_SUB(SAFE_CAST(fy_first_day_of_week AS DATETIME), INTERVAL 7 DAY) AS date_minus_7_days_q2,
    CASE WHEN (day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) THEN 'M-F' WHEN (day_of_week = 'Sat') THEN 'SAT' WHEN (day_of_week = 'Sun') THEN 'Sun' ELSE NULL END AS day_of_week_group_q2,
    SAFE_CAST(fy_month_of_year AS STRING) AS fy_month_of_year_str_q2,
    CASE WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels' WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations' WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies' WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions' WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets' ELSE 'Unspec Channel' END AS channel_group_q2,
    UPPER(SAFE_CAST(os_level_7 AS STRING)) AS os_level_7_upper_q2,
    CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END AS publication_name_adjusted_q2,
    CASE WHEN (relative_fisc_week_number < 0) THEN Budget_Amount ELSE 0 END AS budget_amount_if_past_week_q2,
    CASE WHEN (relative_fisc_year_number = 0) THEN Budget_Amount ELSE 0 END AS budget_amount_if_current_year_q2,
    CASE WHEN (relative_fisc_week_number < 0) THEN volume ELSE 0 END AS volume_if_past_week_q2,
    CASE WHEN (relative_fisc_year_number = 0) THEN volume ELSE 0 END AS volume_if_current_year_q2,
    Forecast_Amount AS forecast_amount_lt_6_q2, -- Simplified
    Forecast_Amount AS forecast_amount_lt_9_q2, -- Simplified
    Forecast_Amount AS forecast_amount_lt_4_q2, -- Simplified
    Forecast_Amount AS forecast_amount_lt_7_q2, -- Simplified
    Forecast_Volume AS forecast_volume_lt_6_q2, -- Simplified
    Forecast_Volume AS forecast_volume_lt_9_q2, -- Simplified
    Forecast_Volume AS forecast_volume_lt_4_q2, -- Simplified
    Forecast_Volume AS forecast_volume_lt_7_q2, -- Simplified
    CASE
      WHEN (publication_name_adjusted_q2 IN ('Sunday Herald Sun', 'Herald Sun')) THEN 'The Herald Sun'
      WHEN (publication_name_adjusted_q2 IN ('The Advertiser', 'Sunday Mail')) THEN 'The Advertiser'
      WHEN (publication_name_adjusted_q2 IN ('Courier Mail', 'The Sunday Mail')) THEN 'The Courier Mail'
      WHEN (publication_name_adjusted_q2 = 'The Australian') THEN 'The Australian'
      WHEN (publication_name_adjusted_q2 = 'The Sportsman') THEN 'The Sportsman'
      WHEN (publication_name_adjusted_q2 IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (publication_name_adjusted_q2 = 'Weekly Times') THEN 'Weekly Times'
      ELSE NULL
    END AS standardized_publication_name_v2_q2,
    CASE
      WHEN (publication_name_adjusted_q2 IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (publication_name_adjusted_q2 IN ('Weekly Times')) THEN 'Weekly Times'
      WHEN (publication_name_adjusted_q2 IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      WHEN (publication_name_adjusted_q2 IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (publication_name_adjusted_q2 = 'Toowoomba') THEN 'The Chronicle'
      WHEN (publication_name_adjusted_q2 = 'Townsville Bulletin') THEN 'Townsville Bulletin'
      WHEN (publication_name_adjusted_q2 = 'Gold Coast Bulletin') THEN 'GCB'
      WHEN (publication_name_adjusted_q2 = 'Geelong Advertiser') THEN 'Geelong Advertiser'
      WHEN (publication_name_adjusted_q2 = 'Cairns Post') THEN 'Cairns Post'
      WHEN (publication_name_adjusted_q2 = 'Sunshine Coast') THEN 'Sunshine Coast'
      WHEN (publication_name_adjusted_q2 IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
      WHEN (publication_name_adjusted_q2 IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
      WHEN (publication_name_adjusted_q2 IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
      WHEN (publication_name_adjusted_q2 = 'Mackay') THEN 'Daily Mercury'
      ELSE NULL
    END AS publication_state_group_v2_q2,
    CASE
      WHEN (publication_name_adjusted_q2 IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs'
      WHEN (publication_name_adjusted_q2 IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas'
      WHEN (publication_name_adjusted_q2 IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian'
      WHEN (publication_name_adjusted_q2 IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other'
      WHEN (publication_name_adjusted_q2 IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (publication_name_adjusted_q2 IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail'
      WHEN (publication_name_adjusted_q2 IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (publication_name_adjusted_q2 IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      ELSE publication_name_adjusted_q2
    END AS publication_group_q2,
    'YTD' AS time_period_label_q2,
    (weeks_diff_from_fixed_date_q2 - 1) AS adjusted_weeks_diff_q2,
    (day_of_week_num_q2 <= 2) AS day_of_week_le_2_q2,
    (weeks_diff_from_fixed_date_q2 = 26) AS weeks_diff_eq_26_q2,
    (weeks_diff_from_fixed_date_q2 = 40) AS weeks_diff_eq_40_q2,
    (weeks_diff_from_fixed_date_q2 = fy_week_of_year) AS weeks_diff_eq_fy_week_q2,
    CASE WHEN (weeks_diff_from_fixed_date_q2 <= fy_year_week_number) THEN Actual_Amount ELSE 0 END AS actual_amount_ytd_conditional_q2,
    weeks_diff_from_fixed_date_q2 AS adjusted_week_diff_final_q2, -- Simplified from (0=0) conditional
    SAFE_CAST(fy_month_of_year AS STRING) AS fy_month_of_year_string_q2,
    (standardized_publication_name_v2_q2 = 'The Courier Mail') AS is_courier_mail_q2,
    (standardized_publication_name_v2_q2 = 'The Australian') AS is_australian_q2,
    (weeks_diff_eq_26_q2 OR weeks_diff_eq_40_q2) AS weeks_26_or_40_flag_q2,
    (is_australian_q2 OR is_courier_mail_q2) AS is_aus_or_cm_flag_q2,
    ((2025*100)+adjusted_week_diff_final_q2) AS year_week_concat_q2,
    SAFE_CAST(fy_month_of_year_string_q2 AS INT64) AS month_selection_int_q2, -- Simplified from (0=0) conditional
    TRUE AS year_week_match_flag_q2, -- Simplified from (year_week_concat_q2 = year_week_concat_q2)
    FALSE AS param_2_is_1_q2, -- Simplified from ('2' = '1')
    TRUE AS param_2_is_2_q2, -- Simplified from ('2' = '2')
    TRUE AS param_1_is_1_q2, -- Simplified from ('1' = '1')
    FALSE AS param_1_is_2_q2, -- Simplified from ('1' = '2')
    FALSE AS param_1_is_3_q2, -- Simplified from ('1' = '3')
    FALSE AS param_2_is_3_q2, -- Simplified from ('2' = '3')
    (budget_amount_if_past_week_q2 IS NOT NULL AND budget_amount_if_past_week_q2 != 0) AS budget_amount_past_week_exists_q2

),
Final_Metrics AS (
  SELECT
    fy_quarter_of_year AS fiscal_quarter,
    publication_state_group_q1 AS publication_state_group,
    standardized_publication_name_q1 AS standardized_publication_name,
    os_level_8,
    channel_group_q2 AS channel_group,
    publication_state_group_v2_q2 AS publication_state_group_v2,
    time_period_label_q2 AS time_period_label,
    publication_name_adjusted_q2 AS standardized_publication_name_v3_q2, -- Using publication_name_adjusted_q2 as it's the source for clmn51_

    -- Query 1 Metrics
    SUM(past_budget_volume_q1) AS budget_volume_past_weeks,
    SUM(volume - past_budget_volume_q1) AS net_volume_actual_vs_budget_past_weeks,
    SUM(volume) AS actual_volume,

    -- Query 2 Metrics
    SUM(Actual_Amount) AS actual_amount,
    SUM(Budget_Volume) AS budget_volume_q2,
    SUM(Last_Year_Actual_Amount) AS last_year_actual_amount,
    SUM(Last_Year_volume) AS last_year_volume,
    SUM(Forecast_Amount) AS forecast_amount,
    SUM(Forecast_Volume) AS forecast_volume,

    -- Complex YTD/Conditional Metrics from Query 2
    SUM(CASE WHEN (param_2_is_2_q2) THEN actual_amount_ytd_conditional_q2 ELSE 0 END) AS ytd_actual_amount_conditional,
    SUM(CASE WHEN (param_2_is_2_q2) THEN budget_amount_if_past_week_q2 ELSE 0 END) AS ytd_budget_amount_conditional,
    SUM(CASE WHEN (param_1_is_1_q2) THEN Budget_Amount ELSE 0 END) AS selected_amount_metric, -- Simplified based on param_1_is_1_q2 being true
    SUM(CASE WHEN (param_1_is_1_q2) THEN Budget_Volume ELSE 0 END) AS selected_volume_metric, -- Simplified based on param_1_is_1_q2 being true
    SUM(CASE WHEN (os_level_7_upper_q2 = 'ALL SALES CHANNELS') THEN (CASE WHEN (param_1_is_1_q2) THEN (CASE WHEN (param_2_is_2_q2) THEN budget_amount_if_past_week_q2 ELSE 0 END) ELSE 0 END) ELSE 0 END) AS all_sales_channels_amount,
    SUM(CASE
      WHEN (weeks_26_or_40_flag_q2 AND is_aus_or_cm_flag_q2) THEN (CASE WHEN (day_of_week_group_q2 = 'M-F') THEN SAFE_DIVIDE(Budget_Volume, 4)*5 ELSE Budget_Volume END)
      WHEN (standardized_publication_name_v2_q2 = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, 2)*5)
      WHEN (standardized_publication_name_v2_q2 = 'Weekly Times') THEN (Budget_Volume*5)
      WHEN (publication_group_q2 = 'PNG') THEN 0
      ELSE Budget_Volume
    END) AS volume_daily_avg_adjusted_numerator,
    SUM(CASE
      WHEN (is_australian_q2 OR is_courier_mail_q2) THEN (CASE WHEN (day_of_week_group_q2 = 'M-F') THEN SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*5))*5 ELSE SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2) END)
      WHEN (standardized_publication_name_v2_q2 = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*2))*5)
      WHEN (standardized_publication_name_v2_q2 = 'Weekly Times') THEN (SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2)*5)
      WHEN (publication_group_q2 = 'PNG') THEN 0
      WHEN (day_of_week_group_q2 = 'M-F') THEN (SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*5))*5)
      ELSE SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2)
    END) AS volume_daily_avg_adjusted_denominator,
    SUM(CASE WHEN (publication_group_q2 = 'PNG') THEN 0 WHEN (publication_group_q2 = '6 Day Pubs') THEN SAFE_DIVIDE(CASE
      WHEN (weeks_26_or_40_flag_q2 AND is_aus_or_cm_flag_q2) THEN (CASE WHEN (day_of_week_group_q2 = 'M-F') THEN SAFE_DIVIDE(Budget_Volume, 4)*5 ELSE Budget_Volume END)
      WHEN (standardized_publication_name_v2_q2 = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, 2)*5)
      WHEN (standardized_publication_name_v2_q2 = 'Weekly Times') THEN (Budget_Volume*5)
      WHEN (publication_group_q2 = 'PNG') THEN 0
      ELSE Budget_Volume
    END, 6) ELSE SAFE_DIVIDE(CASE
      WHEN (weeks_26_or_40_flag_q2 AND is_aus_or_cm_flag_q2) THEN (CASE WHEN (day_of_week_group_q2 = 'M-F') THEN SAFE_DIVIDE(Budget_Volume, 4)*5 ELSE Budget_Volume END)
      WHEN (standardized_publication_name_v2_q2 = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, 2)*5)
      WHEN (standardized_publication_name_v2_q2 = 'Weekly Times') THEN (Budget_Volume*5)
      WHEN (publication_group_q2 = 'PNG') THEN 0
      ELSE Budget_Volume
    END, 7) END) AS final_volume_metric_1,
    SUM(CASE WHEN (publication_group_q2 = '6 Day Pubs') THEN SAFE_DIVIDE(CASE
      WHEN (is_australian_q2 OR is_courier_mail_q2) THEN (CASE WHEN (day_of_week_group_q2 = 'M-F') THEN SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*5))*5 ELSE SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2) END)
      WHEN (standardized_publication_name_v2_q2 = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*2))*5)
      WHEN (standardized_publication_name_v2_q2 = 'Weekly Times') THEN (SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2)*5)
      WHEN (publication_group_q2 = 'PNG') THEN 0
      WHEN (day_of_week_group_q2 = 'M-F') THEN (SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*5))*5)
      ELSE SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2)
    END, 6) ELSE SAFE_DIVIDE(CASE
      WHEN (is_australian_q2 OR is_courier_mail_q2) THEN (CASE WHEN (day_of_week_group_q2 = 'M-F') THEN SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*5))*5 ELSE SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2) END)
      WHEN (standardized_publication_name_v2_q2 = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*2))*5)
      WHEN (standardized_publication_name_v2_q2 = 'Weekly Times') THEN (SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2)*5)
      WHEN (publication_group_q2 = 'PNG') THEN 0
      WHEN (day_of_week_group_q2 = 'M-F') THEN (SAFE_DIVIDE(Budget_Volume, (adjusted_week_diff_final_q2*5))*5)
      ELSE SAFE_DIVIDE(Budget_Volume, adjusted_week_diff_final_q2)
    END, 7) END) AS final_volume_metric_2

  FROM Derived_Columns
  WHERE
    os_level_8 != 'DTI Free Copies' AND standardized_publication_name_q1 IS NOT NULL -- Query 1 filters
    AND channel_group_q2 = 'Retail' AND publication_name_adjusted_q2 IS NOT NULL -- Query 2 filters (clmn51_ is publication_name_adjusted_q2)
  GROUP BY
    fiscal_quarter,
    publication_state_group,
    standardized_publication_name,
    os_level_8,
    channel_group,
    publication_state_group_v2_q2,
    time_period_label,
    publication_name_adjusted_q2
  ORDER BY fiscal_quarter DESC
  LIMIT 1000
)
SELECT *
FROM Final_Metrics;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) as unique_fiscal_week_start_dates,
  COUNT(DISTINCT os.gl_publication_code) as unique_publication_codes,
  COUNT(DISTINCT os.os_level_8) as unique_os_level_8s,
  COUNT(DISTINCT os.os_level_10) as unique_os_level_10s,
  MIN(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) as earliest_fiscal_week_start_date,
  MAX(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) as latest_fiscal_week_start_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(os.fiscal_week_id AS STRING), os.gl_publication_code, os.os_level_8, os.os_level_10, os.os_level_7)) as approx_unique_record_grain
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND os.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY)
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(os.Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as actual_amount_test,
  CASE WHEN SUM(SAFE_CAST(os.Budget_Volume AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as budget_volume_test,
  CASE WHEN COUNT(DISTINCT os.gl_publication_code) > 0 THEN 'PASS' ELSE 'FAIL' END as publication_code_test,
  CASE WHEN MAX(SAFE_CAST(calendar.fy_first_day_of_week AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN os.gl_hierarchy_code = 'FY2025' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as fy2025_data_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND os.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'Circulation_Filter_Check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN upper(os.os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END) as records_passing_circulation_filter,
  SAFE_DIVIDE(SUM(CASE WHEN upper(os.os_level_6) = 'CIRCULATION' THEN 1 ELSE 0 END), COUNT(*)) * 100 as circulation_filter_pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
WHERE
  os.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(os.fiscal_week_id AS STRING) LIKE '2025%'
LIMIT 100;","SELECT
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) as fiscal_week_start_date,
  os.gl_publication_code as publication_code,
  pub.publication_name as publication_name,
  os.os_level_8 as os_level_8_dimension,
  os.os_level_10 as os_level_10_dimension,
  os.os_level_7 as os_level_7_dimension,
  os.day_of_week as day_of_week,
  os.relative_fisc_week_number as relative_fiscal_week_number,
  os.Actual_Amount as actual_amount,
  os.Budget_Amount as budget_amount,
  os.volume as actual_volume,
  os.Budget_Volume as budget_volume,
  os.Forecast_Amount as forecast_amount,
  os.Forecast_Volume as forecast_volume,
  os.Last_Year_Actual_Amount as last_year_actual_amount,
  os.Last_Year_volume as last_year_volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub ON os.gl_publication_code = pub.publication_code
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND os.gl_hierarchy_code = 'FY2025'
  AND SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
ORDER BY SAFE_CAST(calendar.fy_first_day_of_week AS DATE) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-04-15', 'original_format': '2025-04-15 04:14:20.297382+00', 'context': ""Used as a fixed date for `clmn4_` and `clmn5_` in Query 2, which are then used in `DATETIME_DIFF` and `DATETIME_SUB` calculations. This date is likely the 'current' date at the time the Looker Studio report was configured."", 'suggested_fix': 'Replace with `CURRENT_TIMESTAMP()` or a Looker Studio date parameter to ensure calculations are always relative to the current date.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as a baseline date in `DATETIME_DIFF` calculation (`clmn25_`) in Query 2. This creates a fixed reference point for week numbering.', 'suggested_fix': ""If this is meant to be the start of a fiscal year or a fixed reporting period, it should be parameterized or derived from a calendar dimension table. If it's meant to be dynamic, it should be relative to `CURRENT_DATE()`."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'FY2025'""], 'context': ""Fiscal year filter `gl_hierarchy_code = 'FY2025'` applied to all base queries."", 'suggested_governance': 'Parameterize the fiscal year (e.g., `_fiscal_year_param`) or derive from a period control table to allow dynamic reporting across fiscal years.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'CIRCULATION'"", ""'Free News & Lifestyle'"", ""'Food'"", ""'Prestige'"", ""'DTI Free Copies'""], 'context': 'Filters on `os_level_6`, `l04_publication_code`, `l06_publication_code`, `os_level_8` are hardcoded strings.', 'suggested_governance': 'These values should be managed in a configuration table or a dimension table for `os_level_6`, `l04_publication_code`, `l06_publication_code`, `os_level_8` to allow for easier updates and consistency.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'The Daily Telegraph'"", ""'The Herald Sun'"", ""'The Advertiser'"", ""'Courier Mail'"", ""'Weekly Times'"", ""'GCB'"", ""'Cairns Post'"", ""'Sunshine Coast'"", ""'Northern Territory News'"", ""'Mercury'"", ""'Geelong Advertiser'"", ""'The Chronicle'"", ""'Daily Mercury'"", ""'The Australian'"", ""'The Sportsman'"", ""'PNG'"", ""'6 Day Pubs'"", ""'Mercury and Sunday Tas'"", ""'NT News & Sunday Territorian'"", ""'Other'""], 'context': 'Extensive `CASE` statements for mapping `publication_name` to various standardized names, state groups, and publication groups.', 'suggested_governance': 'Create a `dim_publication_mapping` table with `publication_name`, `standardized_name`, `state_group`, `publication_group`, etc., and join to this table instead of hardcoding logic.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Retail'"", ""'Alternative Channels'"", ""'Convenience Stores / Service Stations'"", ""'Newsagencies'"", ""'Subscriptions'"", ""'Supermarkets'"", ""'Unspec Channel'""], 'context': 'Mapping `os_level_10` to `channel_group` using `CASE` statements.', 'suggested_governance': 'Create a `dim_channel_mapping` table and join to it.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '1', '2', '4', '5', '6', '7', '9', '10', '12', '13', '14', '15', '17', '22', '26', '30', '35', '39', '40', '43', '48', '52', '2025'], 'context': ""Various numeric literals used in conditional logic (e.g., `relative_fisc_week_number < 0`, `weeks_diff_from_fixed_date_q2 = 26`, `fy_month_of_year < 4`, `(2025*100)`). Some of these appear to be Looker Studio internal parameter placeholders that resolve to fixed values (e.g., `('1' = '1')` or `(0 = 0)`)."", 'suggested_governance': 'Identify the business meaning of these numbers (e.g., specific fiscal weeks, month thresholds) and define them as configurable parameters or in a dedicated `dim_business_rules` table.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded dates (e.g., '2025-04-15', '2024-07-03') with Looker Studio date parameters or `CURRENT_DATE()`/`CURRENT_TIMESTAMP()` for dynamic reporting."", ""Parameterize the fiscal year ('FY2025') to allow users to select different reporting periods."", 'Externalize publication name, state, and group mappings into a dedicated dimension table. This table can then be joined to the fact table, making the logic more maintainable and auditable.', 'Externalize channel groupings into a dimension table.', ""Review and replace Looker Studio internal parameter placeholders (e.g., `('1' = '1')`, `(0 = 0)`) with actual Looker Studio parameters if they are intended to be dynamic user selections."", 'Define key numeric thresholds and multipliers (e.g., for daily averages, specific week/month numbers) as configurable parameters or in a business rules table.']",29,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"WITH base_data AS (
  SELECT
    t0.advertiser_name,
    t0.portfolio_conformed_name_sync,
    t0.sales_segment_l_2_name_sync,
    -- Assuming a date column and a revenue column for a sales performance dashboard
    SAFE_CAST(t0.date_column AS DATE) AS date_column,
    SAFE_CAST(t0.revenue_column AS NUMERIC) AS revenue_column
  FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  WHERE SAFE_CAST(t0.date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Common date filter for performance dashboards
)
SELECT
  date_column,
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync,
  COUNT(*) AS record_count,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT portfolio_conformed_name_sync) AS unique_portfolios,
  COUNT(DISTINCT sales_segment_l_2_name_sync) AS unique_sales_segments,
  SUM(revenue_column) AS total_revenue_90_days -- Example metric
FROM base_data
GROUP BY
  date_column,
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync
ORDER BY
  date_column DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(date_column AS DATE)) AS unique_dates,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT portfolio_conformed_name_sync) AS unique_portfolio_names,
  COUNT(DISTINCT sales_segment_l_2_name_sync) AS unique_sales_segments,
  MIN(SAFE_CAST(date_column AS DATE)) AS earliest_date,
  MAX(SAFE_CAST(date_column AS DATE)) AS latest_date,
  APPROX_COUNT_DISTINCT(advertiser_name || portfolio_conformed_name_sync || sales_segment_l_2_name_sync || SAFE_CAST(date_column AS STRING)) AS approx_unique_combinations
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY);","SELECT
  'Validation Check' AS test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END AS data_exists_test,
  CASE WHEN COUNT(DISTINCT advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS advertiser_data_test,
  CASE WHEN COUNT(DISTINCT portfolio_conformed_name_sync) > 0 THEN 'PASS' ELSE 'FAIL' END AS portfolio_data_test,
  CASE WHEN COUNT(DISTINCT sales_segment_l_2_name_sync) > 0 THEN 'PASS' ELSE 'FAIL' END AS sales_segment_data_test,
  CASE WHEN MAX(SAFE_CAST(date_column AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS freshness_test,
  CASE WHEN SUM(SAFE_CAST(revenue_column AS NUMERIC)) IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS revenue_not_null_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'Hardcoded Portfolio Values Check' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9') THEN 1 ELSE 0 END) AS records_matching_hardcoded_list,
  SAFE_DIVIDE(SUM(CASE WHEN portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS match_rate_percentage
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY);","SELECT
  SAFE_CAST(date_column AS DATE) AS date_column,
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync,
  SAFE_CAST(revenue_column AS NUMERIC) AS revenue_column -- Assuming a revenue column
FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE SAFE_CAST(date_column AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
ORDER BY SAFE_CAST(date_column AS DATE) DESC, advertiser_name ASC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'GAD RAM A1'"", ""'HBT RAM A1'"", ""'VIC DIRECT A7'"", ""'VIC DIRECT A8'"", ""'VIC DIRECT A9'""], 'context': 'Used to filter `portfolio_conformed_name_sync` for a specific list of portfolios.', 'suggested_governance': 'These values should ideally be stored in a reference table (e.g., `adsales_portfolio_lookup`) and joined to, or managed as a parameter in Looker Studio.', 'impact': 'medium', 'maintenance_risk': 'high'}]}","['Replace hardcoded portfolio names with a dynamic parameter in Looker Studio or a join to a governed reference table.', 'Implement date parameters for dashboard date ranges instead of hardcoding date filters in underlying queries (if any were present).']",30,80ca81f3-0671-40ef-a0a9-825a1580ca1b
"WITH SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  base_adsales_data AS (
    SELECT
      unified_publication_name,
      unified_publication_gl_code,
      fy_year_month_number,
      financial_year,
      financial_quarter,
      financial_month,
      financial_short_month,
      financial_week,
      revenue_transaction_status,
      is_print_digital_flag,
      current_financial_month,
      current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM `CURRENT_DATE`()) AS DOW_Today,
      sales_segment_l_1_name,
      nca_industry_anzsic_pillar_group,
      sales_segment_l_2_name,
      sales_segment_l_1_name_sync,
      sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      advertiser_group,
      advertiser_parent,
      SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
      sales_segment_gm_name,
      CASE
        WHEN upper(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW',
          'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
        ELSE sales_segment_gm_name_sync
      END AS sales_segment_gm_name_sync,
      revenue_group_level_1_name,
      revenue_group_level_2_name,
      SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
      SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
      SUM(IFNULL(pipeline, 0)) AS pipeline,
      SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
      UPPER(revenue_type) AS revenue_type,
      UPPER(revenue_group_subtype) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      portfolio_group_name_sync,
      portfolio_group_name_current,
      portfolio_parent_group_name_sync,
      nca_industry_pillar,
      publishing_division_group,
      publishing_division_parent,
      is_future_period_flag,
      ly_is_future_period_flag,
      xtend_flag,
      ny_is_future_period_flag,
      cost_model_type,
      CASE
        WHEN source_system_code = 'PLUTO' THEN NULL
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      portfolio_conformed_name_sync,
      publishing_division,
      booking_line_created_week,
      booking_line_created_month,
      booking_line_created_short_month,
      booking_line_created_quarter,
      booking_line_created_year,
      agency_parent,
      agency_group,
      agency_name,
      agency_number,
      calendar_month_name,
      calendar_year,
      classification_name,
      product_group,
      SUM(IFNULL(target, 0)) AS target,
      IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      IFNULL(GSD_JOIN_CURR.full_name, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(GSD_JOIN_CONFORM.full_name, 'VACANT') AS current_portfolio_conformed_owner_full
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
      LEFT JOIN
      SFCE_USER AS GSD_JOIN_CURR
      ON UPPER(current_portfolio_group_owner_current) = GSD_JOIN_CURR.login_name
      LEFT JOIN
      SFCE_USER AS GSD_JOIN_CONFORM
      ON UPPER(current_portfolio_conformed_owner_current) = GSD_JOIN_CONFORM.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED',
        'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
    GROUP BY ALL
  )
SELECT
  -- Dimensions
  financial_year,
  financial_month,
  SAFE_CAST(financial_quarter AS STRING) AS financial_quarter_str,
  financial_short_month,
  portfolio_group_name_sync,
  sales_segment_l_2_name_sync,
  GSD,
  revenue_type,
  xtend_flag,
  -- Metrics
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount,
  SUM(SAFE_CAST(pipeline AS NUMERIC)) AS total_pipeline_amount,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN SAFE_CAST(gross_revenue_amount AS NUMERIC) ELSE 0 END) AS current_fy_gross_revenue,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN SAFE_CAST(pipeline AS NUMERIC) ELSE 0 END) AS current_fy_pipeline,
  MAX(CASE WHEN sales_segment_l_2_name_sync = 'Digital Other' THEN TRUE ELSE FALSE END) AS is_digital_other_sales_segment_present,
  SAFE_CAST(financial_quarter AS FLOAT64) AS financial_quarter_float, -- For t0_qt_i8wzniajkd
  CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END AS xtend_revenue_type_derived
FROM
  base_adsales_data
GROUP BY
  financial_year,
  financial_month,
  financial_quarter_str,
  financial_short_month,
  portfolio_group_name_sync,
  sales_segment_l_2_name_sync,
  GSD,
  revenue_type,
  xtend_flag
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(financial_month AS STRING)) as unique_financial_months,
  COUNT(DISTINCT SAFE_CAST(sales_segment_l_2_name_sync AS STRING)) as unique_sales_segments,
  MIN(SAFE_CAST(financial_year AS STRING)) as earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) as latest_financial_year,
  APPROX_COUNT_DISTINCT(unified_publication_name) as approx_unique_publications
FROM 
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE 
  relative_fy_year_offset IN (-1, 0, 1) 
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
LIMIT 1000;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN SUM(SAFE_CAST(pipeline AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as pipeline_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_test,
  CASE WHEN COUNT(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_filter_test
FROM 
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE 
  relative_fy_year_offset = 0 
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'revenue_transaction_status_filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM 
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE 
  relative_fy_year_offset IN (-1, 0, 1)
LIMIT 1000;","SELECT 
  SAFE_CAST(financial_year AS STRING) as financial_year,
  SAFE_CAST(financial_month AS STRING) as financial_month,
  SAFE_CAST(financial_quarter AS STRING) as financial_quarter,
  SAFE_CAST(sales_segment_l_2_name_sync AS STRING) as sales_segment_l_2_name_sync,
  SAFE_CAST(portfolio_group_name_sync AS STRING) as portfolio_group_name_sync,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(pipeline AS NUMERIC) as pipeline,
  SAFE_CAST(relative_fy_year_offset AS INT64) as relative_fy_year_offset,
  SAFE_CAST(revenue_type AS STRING) as revenue_type,
  SAFE_CAST(xtend_flag AS STRING) as xtend_flag,
  SAFE_CAST(revenue_transaction_status AS STRING) as revenue_transaction_status,
  SAFE_CAST(style_name AS STRING) as style_name,
  SAFE_CAST(source_publishing_division AS STRING) as source_publishing_division,
  SAFE_CAST(publication_name AS STRING) as publication_name,
  SAFE_CAST(account_number AS STRING) as account_number
FROM 
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE 
  relative_fy_year_offset = 0 
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
ORDER BY 
  financial_year DESC, financial_month DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': ['-1', '0', '1'], 'context': 'relative financial year offsets used for filtering data range', 'suggested_governance': 'replace with parameters or a configuration table for dynamic range selection', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'BILLED'"", ""'BOOKED'""], 'context': 'revenue transaction statuses used in WHERE clause', 'suggested_governance': 'join to a `dim_revenue_transaction_status` lookup table', 'impact': 'high', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'ROP COMPOSITE'""], 'context': 'style name excluded in WHERE clause', 'suggested_governance': 'join to a `dim_style_name` lookup table', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'MEDIUM RARE CONTENT AGENCY'""], 'context': 'source publishing division excluded in WHERE clause', 'suggested_governance': 'join to a `dim_publishing_division` lookup table', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'""], 'context': 'specific publication name and account number logic in WHERE clause', 'suggested_governance': 'externalize these rules into a configuration table or a UDF for easier management and auditing', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'MRCA'"", ""'CONSORTIUM NSW'"", ""'KEY ACCOUNTS NSW RETAIL'"", ""'DIRECT NSW'"", ""'INDEPENDENT AGENCIES NSW'"", ""'PRESTIGE'""], 'context': 'sales segment names used in CASE statements for Sales_Group and sales_segment_gm_name_sync', 'suggested_governance': 'manage these categories in a `dim_sales_segment` lookup table', 'impact': 'high', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Ian Paterson'""], 'context': 'specific name hardcoded as a sales segment GM', 'suggested_governance': 'derive from a `dim_employee` or `dim_user` table based on roles/segments', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'default_values', 'hardcoded_values': [""'VACANT'""], 'context': 'default value for GSD if no join match', 'suggested_governance': ""acceptable as a default, but ensure 'VACANT' is a recognized business term"", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'SFCE'"", ""'PLUTO'""], 'context': 'source system codes used in filters and CASE statements', 'suggested_governance': 'manage in a `dim_source_system` lookup table', 'impact': 'medium', 'maintenance_risk': 'low'}, {'variable_type': 'flags', 'hardcoded_values': [""'Y'""], 'context': 'xtend_flag value used in CASE statement', 'suggested_governance': 'define as a boolean or enum in a data dictionary, or map to a lookup table if more values are expected', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded relative year offsets with dashboard parameters (e.g., `start_fy_offset`, `end_fy_offset`).', 'Replace hardcoded lookup values (transaction statuses, style names, division names, sales segments, source systems) with joins to governed reference tables.', 'Externalize complex business rules (e.g., publication/account number logic, sales GM assignments) into configuration tables or user-defined functions for better maintainability and transparency.']",31,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
"-- This query combines the core logic from the provided SQL samples to calculate key metrics.
-- It assumes 'Rolling 12 months' as the default time period for demonstration.
-- Replace `@time_period_param` with actual Looker Studio parameter value (e.g., 'Rolling 12 months', 'Calendar Year', 'Financial Year').
-- Note: Financial Year logic inconsistency is resolved by using Query 1's logic (current FY vs previous FY).

WITH
  base_adex_data AS (
    SELECT
      *,
      -- Derive calendar month short name and calendar year
      FORMAT_DATETIME('%b', DATETIME(date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(date)) AS INT) AS calendar_year
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource -- Using adex_datasource as primary, note adex_datasource_test also used.
    WHERE
      date IS NOT NULL AND Spend IS NOT NULL -- Basic data quality filter
  ),
  time_context AS (
    SELECT
      MAX(date) AS latest_date,
      MAX(financial_year) AS max_fin_year
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource -- Use the same source for context dates
  ),
  temp_data_with_ty_ly AS (
    SELECT
      t1.*,
      CASE @time_period_param -- Placeholder for Looker Studio parameter
        WHEN 'Rolling 12 months' THEN
          CASE
            WHEN DATE_DIFF(tc.latest_date, t1.date, MONTH) <= 11 THEN 'ty'
            WHEN DATE_DIFF(tc.latest_date, t1.date, MONTH) BETWEEN 12 AND 23 THEN 'ly'
            ELSE NULL
          END
        WHEN 'Calendar Year' THEN
          CASE
            WHEN t1.date <= tc.latest_date AND t1.date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM tc.latest_date) AS STRING),'-01-01')) THEN 'ty'
            WHEN t1.date <= DATETIME_ADD(tc.latest_date, INTERVAL -1 YEAR) AND t1.date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(EXTRACT(YEAR FROM tc.latest_date) - 1 AS STRING), '-01-01')) THEN 'ly'
            ELSE NULL
          END
        WHEN 'Financial Year' THEN
          CASE
            -- Using Query 1's Financial Year logic: current FY vs previous FY
            WHEN t1.date <= tc.latest_date AND t1.date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year AS STRING), '-07-01')) THEN 'ty'
            WHEN t1.date <= tc.latest_date AND t1.date >= PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year - 1 AS STRING), '-07-01')) THEN 'ly'
            ELSE NULL
          END
        ELSE NULL
      END AS ty_ly_embed
    FROM
      base_adex_data AS t1
    CROSS JOIN
      time_context AS tc
  ),
  calculated_metrics AS (
    SELECT
      *,
      SAFE_DIVIDE(Spend, 1000) AS Spend_K,
      -- Calculate Quarter based on calendar_month_short_name
      CASE
        WHEN calendar_month_short_name IN ('Jan', 'Feb', 'Mar') THEN 'Q1'
        WHEN calendar_month_short_name IN ('Apr', 'May', 'Jun') THEN 'Q2'
        WHEN calendar_month_short_name IN ('Jul', 'Aug', 'Sep') THEN 'Q3'
        WHEN calendar_month_short_name IN ('Oct', 'Nov', 'Dec') THEN 'Q4'
        ELSE NULL
      END AS Calendar_Quarter,
      -- Calculate YearMonth for sorting
      (calendar_year * 100 + CASE
        WHEN calendar_month_short_name = 'Jan' THEN 1
        WHEN calendar_month_short_name = 'Feb' THEN 2
        WHEN calendar_month_short_name = 'Mar' THEN 3
        WHEN calendar_month_short_name = 'Apr' THEN 4
        WHEN calendar_month_short_name = 'May' THEN 5
        WHEN calendar_month_short_name = 'Jun' THEN 6
        WHEN calendar_month_short_name = 'Jul' THEN 7
        WHEN calendar_month_short_name = 'Aug' THEN 8
        WHEN calendar_month_short_name = 'Sep' THEN 9
        WHEN calendar_month_short_name = 'Oct' THEN 10
        WHEN calendar_month_short_name = 'Nov' THEN 11
        WHEN calendar_month_short_name = 'Dec' THEN 12
        ELSE NULL
      END) AS YearMonth
    FROM
      temp_data_with_ty_ly
  ),
  final_data AS (
    SELECT
      date,
      Advertiser,
      Major_Category,
      Media_Network,
      Category,
      Sub_Category,
      portfolio_parent_group_name,
      calendar_year,
      financial_year,
      calendar_month_short_name,
      Calendar_Quarter,
      YearMonth,
      ty_ly_embed,
      Spend_K,
      -- TY and LY Spend_K
      SUM(CASE WHEN ty_ly_embed = 'ty' THEN Spend_K ELSE 0 END) AS TY_Spend_K,
      SUM(CASE WHEN ty_ly_embed = 'ly' THEN Spend_K ELSE 0 END) AS LY_Spend_K,
      -- Advertiser-level TY Spend metrics (window functions)
      SUM(CASE WHEN Media_Network = 'NEWS CORP' AND ty_ly_embed = 'ty' THEN Spend ELSE 0 END) OVER (PARTITION BY Advertiser) AS NEWS_CORP_TY_Spend_Raw,
      SUM(CASE WHEN Media_Network = 'youtube' AND ty_ly_embed = 'ty' THEN Spend ELSE 0 END) OVER (PARTITION BY Advertiser) AS Youtube_TY_Spend_Raw,
      SUM(CASE WHEN Media_Network = 'facebook' AND ty_ly_embed = 'ty' THEN Spend ELSE 0 END) OVER (PARTITION BY Advertiser) AS Facebook_TY_Spend_Raw,
      SUM(CASE WHEN ty_ly_embed = 'ty' THEN Spend ELSE 0 END) OVER (PARTITION BY Advertiser) AS Total_Advertiser_TY_Spend_Raw,
      -- Source Count (window function)
      COUNT(DISTINCT source) OVER (PARTITION BY account_number, ty_ly_embed) AS Source_Count
    FROM
      calculated_metrics
    GROUP BY
      date,
      Advertiser,
      Major_Category,
      Media_Network,
      Category,
      Sub_Category,
      portfolio_parent_group_name,
      calendar_year,
      financial_year,
      calendar_month_short_name,
      Calendar_Quarter,
      YearMonth,
      ty_ly_embed,
      Spend_K, -- Include Spend_K in GROUP BY because it's selected directly and not aggregated in this subquery
      account_number, -- Required for Source_Count partition
      source -- Required for Source_Count distinct count
  )
SELECT
  date,
  Advertiser,
  Major_Category,
  Media_Network,
  Category,
  Sub_Category,
  portfolio_parent_group_name,
  calendar_year,
  financial_year,
  calendar_month_short_name,
  Calendar_Quarter,
  YearMonth,
  ty_ly_embed,
  TY_Spend_K,
  LY_Spend_K,
  SAFE_DIVIDE(NEWS_CORP_TY_Spend_Raw, 1000) AS NEWS_CORP_TY_Spend_K,
  SAFE_DIVIDE(Youtube_TY_Spend_Raw, 1000) AS Youtube_TY_Spend_K,
  SAFE_DIVIDE(Facebook_TY_Spend_Raw, 1000) AS Facebook_TY_Spend_K,
  SAFE_DIVIDE(Total_Advertiser_TY_Spend_Raw, 1000) AS Total_Advertiser_TY_Spend_K,
  Source_Count,
  -- Add total fixed counts (these are constant per query, so can be cross-joined or derived once)
  (SELECT COUNT(DISTINCT portfolio_parent_group_name) FROM base_adex_data) AS Fixed_PPG_Count,
  (SELECT COUNT(DISTINCT sales_segment_gm_name) FROM base_adex_data) AS Fixed_GM_Count,
  (SELECT COUNT(DISTINCT portfolio_group_name) FROM base_adex_data) AS Fixed_PG_Count,
  (SELECT COUNT(DISTINCT portfolio_conformed_name) FROM base_adex_data) AS Fixed_Portfolio_Count,
  (SELECT COUNT(DISTINCT media_network) FROM base_adex_data) AS Fixed_Publisher_Count
FROM
  final_data
WHERE
  -- Apply filters from original queries (example, combine with OR if multiple filters are possible)
  (portfolio_parent_group_name = 'KEY ACCOUNTS TRAVEL' AND Calendar_Quarter = 'Q2')
  OR
  (Advertiser IN (
    'NT Dept Of Trade Business & Innovation', 'NT Dept Of Chief Minister', 'NT Dept Of Infrastructure Planning & Logistics',
    'NT Dept Of Industry Tourism & Trade', 'NT Dept Of Education Employment & Training', 'NT Dept Of Tourism & Culture',
    'NT Dept Of Transport', 'NT Dept Of Attorney-General & Justice', 'NT Dept Of Environment & Natural Resources',
    'NT Dept Of Lands Planning & The Environment', 'NT Dept Of Health', 'NT Dept Of Police Fire & Emergency Services',
    'NT Dept Of Business', 'NT Dept Of Territory Families, Housing & Communities', 'NT Dept Of Primary Industry & Resources',
    'NT Dept Of Environment Parks & Water Security', 'NT Dept Of Corporate & Information Services'
  ))
  AND date >= DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH) -- Example date filter for cost optimization
ORDER BY
  date DESC, Advertiser, Media_Network
LIMIT 1000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(date AS DATE)) AS unique_dates,
  COUNT(DISTINCT Advertiser) AS unique_advertisers,
  COUNT(DISTINCT Media_Network) AS unique_media_networks,
  COUNT(DISTINCT Major_Category) AS unique_major_categories,
  MIN(SAFE_CAST(date AS DATE)) AS earliest_date,
  MAX(SAFE_CAST(date AS DATE)) AS latest_date,
  AVG(SAFE_CAST(Spend AS NUMERIC)) AS average_spend,
  SUM(CASE WHEN Spend IS NULL THEN 1 ELSE 0 END) AS null_spend_count,
  SUM(CASE WHEN date IS NULL THEN 1 ELSE 0 END) AS null_date_count
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 24 MONTH)
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(Spend AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_spend_positive_test,
  CASE WHEN COUNT(DISTINCT Advertiser) > 0 THEN 'PASS' ELSE 'FAIL' END AS unique_advertisers_exist_test,
  CASE WHEN MAX(SAFE_CAST(date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(DISTINCT CASE WHEN Media_Network = 'NEWS CORP' THEN Media_Network END) > 0 THEN 'PASS' ELSE 'FAIL' END AS news_corp_data_exists_test,
  CASE WHEN COUNT(DISTINCT CASE WHEN financial_year IS NOT NULL THEN financial_year END) > 0 THEN 'PASS' ELSE 'FAIL' END AS financial_year_data_exists_test
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)
LIMIT 1;","-- This query validates the financial year logic inconsistency detected.
-- It compares the 'ty' start date for 'Financial Year' based on Query 1's logic vs. Queries 2/3's logic.
-- A 'FAIL' indicates a discrepancy in how 'This Year' is defined for Financial Year across different dashboard components.

WITH
  time_context AS (
    SELECT
      MAX(date) AS latest_date,
      MAX(financial_year) AS max_fin_year
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'Financial Year TY Logic Consistency' AS rule_name,
  CASE
    WHEN PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year AS STRING), '-07-01')) = PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year - 1 AS STRING), '-07-01')) THEN 'FAIL: TY start dates are identical, indicating a logic error or misinterpretation.'
    WHEN PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year AS STRING), '-07-01')) IS NULL OR PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year - 1 AS STRING), '-07-01')) IS NULL THEN 'FAIL: max_fin_year or derived dates are NULL.'
    ELSE 'PASS: TY start dates for Financial Year are distinct based on the two observed patterns.'
  END AS consistency_check_result,
  SAFE_CAST(PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year AS STRING), '-07-01')) AS STRING) AS query1_ty_fy_start_date,
  SAFE_CAST(PARSE_DATE('%Y-%m-%d', CONCAT(CAST(tc.max_fin_year - 1 AS STRING), '-07-01')) AS STRING) AS query2_3_ty_fy_start_date,
  SAFE_CAST(tc.max_fin_year AS STRING) AS detected_max_financial_year
FROM
  time_context AS tc
LIMIT 1;","SELECT
  SAFE_CAST(date AS DATE) AS date,
  Advertiser,
  Media_Network,
  Major_Category,
  Category,
  Sub_Category,
  portfolio_parent_group_name,
  SAFE_CAST(Spend AS NUMERIC) AS Spend,
  financial_year,
  calendar_year,
  account_number,
  sales_segment_gm_name,
  portfolio_group_name,
  portfolio_conformed_name,
  source
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  SAFE_CAST(date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH) -- Sample recent data
  AND Spend IS NOT NULL
ORDER BY
  date DESC, Spend DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': 'YYYY-01-01', 'original_format': ""CONCAT(CAST(EXTRACT(YEAR FROM latest_date) AS STRING),'-1-1')"", 'context': ""Used to define the start of Calendar Year periods ('ty' and 'ly')."", 'suggested_fix': 'Use `DATE_TRUNC(latest_date, YEAR)` for current year and `DATE_SUB(DATE_TRUNC(latest_date, YEAR), INTERVAL 1 YEAR)` for previous year. This makes it more robust and readable.', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': 'YYYY-07-01', 'original_format': ""CONCAT(CAST(max_fin_year AS STRING), '-7-1')"", 'context': ""Used to define the start of Financial Year periods ('ty' and 'ly'). Inconsistent logic across queries (max_fin_year vs max_fin_year-1 for 'ty')."", 'suggested_fix': 'Standardize financial year start logic across all queries. Define financial year start as a parameter or a governed function/table. E.g., `DATE(max_fin_year, 7, 1)` if `max_fin_year` is the start year.', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Rolling 12 months'"", ""'Calendar Year'"", ""'Financial Year'""], 'context': 'These strings define the time period selection logic. They are likely Looker Studio parameters but are hardcoded in the SQL logic.', 'suggested_governance': 'Ensure these are passed as parameters from the dashboard UI rather than embedded directly in the SQL, or use a configuration table if the logic itself needs to be dynamic.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'NEWS CORP'"", ""'youtube'"", ""'facebook'""], 'context': 'Specific media networks are hardcoded for calculating spend metrics (e.g., `NEWS_CORP_TY_Spend_K`).', 'suggested_governance': 'If these are subject to change or need to be dynamic, consider a lookup table for `Media_Network` categories.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'KEY ACCOUNTS TRAVEL'""], 'context': 'A specific `portfolio_parent_group_name` is hardcoded as a filter.', 'suggested_governance': 'Manage this filter value via a dashboard parameter or a governed reference table for `portfolio_parent_group_name`.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'filter_values', 'hardcoded_values': [""'Q2'""], 'context': ""A specific quarter ('Q2') is hardcoded as a filter."", 'suggested_governance': 'Manage this filter value via a dashboard parameter. Quarter definitions should ideally come from a date dimension table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'filter_values', 'hardcoded_values': [""List of 'NT Dept Of...' Advertisers""], 'context': 'A long, specific list of `Advertiser` names is hardcoded as a filter.', 'suggested_governance': 'This list should be managed in a governed lookup table (e.g., `advertiser_groups`) and joined or filtered dynamically.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'ty'"", ""'ly'""], 'context': ""These strings represent 'This Year' and 'Last Year' periods."", 'suggested_governance': 'Standard and acceptable, but their definition relies on the hardcoded date logic.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'currency_format_flags', 'hardcoded_values': [""'$\\'000'"", ""'$'""], 'context': 'Boolean flags (`clmn0_`, `clmn1_`) are set based on these strings, potentially for currency formatting logic, but the final spend metrics are consistently divided by 1000.', 'suggested_governance': 'Review if these flags are still necessary or if the currency conversion should be handled purely by the `SAFE_DIVIDE(Spend, 1000)` operation. If different currency displays are needed, parameterize the conversion factor.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded time period strings ('Rolling 12 months', 'Calendar Year', 'Financial Year') with a Looker Studio parameter."", 'Standardize and parameterize the financial year start date logic to ensure consistency across all dashboard components.', ""Externalize specific filter lists (e.g., 'NT Dept Of...' Advertisers, 'KEY ACCOUNTS TRAVEL' portfolio group) into governed lookup tables or dashboard parameters."", 'Use `DATE_TRUNC` and `DATE_SUB` for relative date calculations instead of `CONCAT` and `PARSE_DATE` with hardcoded month/day strings.', 'Consider a dedicated date dimension table that pre-calculates fiscal periods, quarters, and TY/LY flags based on a single, governed definition.']",32,601ed0d2-e944-4189-8170-d593c8e72026
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters
-- Note: Assumes 'transaction_date' column exists in the base table for date filtering. Adjust if the date column has a different name or if partitioning is used (e.g., _PARTITIONTIME).
WITH base_data AS (
  SELECT
    t0.ProductType,
    SAFE_CAST(t0.RevenueNet AS NUMERIC) AS RevenueNet,
    SAFE_CAST(t0.TransactionType AS STRING) AS TransactionType,
    SAFE_CAST(t0.transaction_date AS DATE) as transaction_date_parsed
  FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
  WHERE
    SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)
),
categorized_data AS (
  SELECT
    ProductType,
    RevenueNet,
    TransactionType,
    transaction_date_parsed,
    CASE
      WHEN (TransactionType = 'AG' OR TransactionType = 'PG - CPM' OR TransactionType = 'PG - CPD') THEN 'Guaranteed'
      WHEN (TransactionType = 'Deal' OR TransactionType = 'pmp' OR TransactionType = 'PMP_DEAL' OR TransactionType = 'UFR') THEN 'Deal'
      WHEN (TransactionType = 'Open Auction' OR TransactionType = 'RTB' OR TransactionType = 'Unknown') THEN 'Open Auction'
      ELSE TransactionType
    END AS TransactionTypeCategory
  FROM
    base_data
)
-- Aggregation by ProductType
SELECT
  'ProductType' AS aggregation_type,
  ProductType AS dimension_value,
  NULL AS transaction_type_category_value, -- To align columns for UNION ALL
  SUM(RevenueNet) AS total_revenue_net
FROM
  categorized_data
GROUP BY
  ProductType

UNION ALL

-- Aggregation by TransactionTypeCategory
SELECT
  'TransactionTypeCategory' AS aggregation_type,
  NULL AS dimension_value, -- To align columns for UNION ALL
  TransactionTypeCategory AS transaction_type_category_value,
  SUM(RevenueNet) AS total_revenue_net
FROM
  categorized_data
GROUP BY
  TransactionTypeCategory
ORDER BY
  aggregation_type, total_revenue_net DESC
LIMIT 200;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.transaction_date AS DATE)) as unique_dates,
  COUNT(DISTINCT SAFE_CAST(t0.ProductType AS STRING)) as unique_product_types,
  COUNT(DISTINCT SAFE_CAST(t0.TransactionType AS STRING)) as unique_transaction_types,
  MIN(SAFE_CAST(t0.transaction_date AS DATE)) as earliest_transaction_date,
  MAX(SAFE_CAST(t0.transaction_date AS DATE)) as latest_transaction_date,
  SUM(CASE WHEN t0.RevenueNet IS NULL THEN 1 ELSE 0 END) as null_revenue_net_count,
  SUM(CASE WHEN t0.ProductType IS NULL THEN 1 ELSE 0 END) as null_product_type_count,
  SUM(CASE WHEN t0.TransactionType IS NULL THEN 1 ELSE 0 END) as null_transaction_type_count
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
WHERE
  SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.RevenueNet AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.ProductType AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as product_type_present_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.TransactionType AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_type_present_test,
  CASE WHEN MAX(SAFE_CAST(t0.transaction_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_present_test
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
WHERE
  SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)
LIMIT 1;","WITH categorized_data AS (
  SELECT
    SAFE_CAST(t0.TransactionType AS STRING) AS TransactionType,
    CASE
      WHEN (SAFE_CAST(t0.TransactionType AS STRING) = 'AG' OR SAFE_CAST(t0.TransactionType AS STRING) = 'PG - CPM' OR SAFE_CAST(t0.TransactionType AS STRING) = 'PG - CPD') THEN 'Guaranteed'
      WHEN (SAFE_CAST(t0.TransactionType AS STRING) = 'Deal' OR SAFE_CAST(t0.TransactionType AS STRING) = 'pmp' OR SAFE_CAST(t0.TransactionType AS STRING) = 'PMP_DEAL' OR SAFE_CAST(t0.TransactionType AS STRING) = 'UFR') THEN 'Deal'
      WHEN (SAFE_CAST(t0.TransactionType AS STRING) = 'Open Auction' OR SAFE_CAST(t0.TransactionType AS STRING) = 'RTB' OR SAFE_CAST(t0.TransactionType AS STRING) = 'Unknown') THEN 'Open Auction'
      ELSE SAFE_CAST(t0.TransactionType AS STRING)
    END AS TransactionTypeCategory
  FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
  WHERE
    SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 60 DAY)
)
SELECT
  'Business Rule Validation' as validation_type,
  'Transaction Type Categorization Coverage' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN TransactionTypeCategory IN ('Guaranteed', 'Deal', 'Open Auction') THEN 1 ELSE 0 END) as records_categorized,
  SUM(CASE WHEN TransactionTypeCategory = TransactionType THEN 1 ELSE 0 END) as records_falling_to_else_clause,
  SAFE_DIVIDE(SUM(CASE WHEN TransactionTypeCategory IN ('Guaranteed', 'Deal', 'Open Auction') THEN 1 ELSE 0 END), COUNT(*)) * 100 as categorization_coverage_percentage,
  ARRAY_AGG(DISTINCT TransactionType IGNORE NULLS ORDER BY TransactionType LIMIT 10) as sample_uncategorized_types
FROM
  categorized_data
LIMIT 1;","SELECT 
  SAFE_CAST(t0.transaction_date AS DATE) as transaction_date,
  SAFE_CAST(t0.ProductType AS STRING) as product_type,
  SAFE_CAST(t0.TransactionType AS STRING) as transaction_type,
  SAFE_CAST(t0.RevenueNet AS NUMERIC) as revenue_net
FROM
  `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
WHERE
  SAFE_CAST(t0.transaction_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
  AND t0.RevenueNet IS NOT NULL
ORDER BY
  SAFE_CAST(t0.transaction_date AS DATE) DESC,
  SAFE_CAST(t0.RevenueNet AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Deal'"", ""'pmp'"", ""'PG - CPM'"", ""'AG'"", ""'PMP_DEAL'"", ""'RTB'"", ""'PG - CPD'"", ""'Open Auction'"", ""'Unknown'"", ""'UFR'"", ""'Guaranteed'"", ""'Deal'"", ""'Open Auction'""], 'context': 'Transaction type values and their mapped categories are hardcoded in a CASE statement.', 'suggested_governance': 'Create a `transaction_type_category_lookup` table with columns like `transaction_type`, `category_name`.', 'impact': 'high', 'maintenance_risk': 'high'}]}",['Replace hardcoded transaction type categories with joins to a governed reference table.'],33,b15d856f-e3ce-4991-bf2a-92395390524f
"-- THIS IS THE MAIN SQL TO RUN - Consolidates key metrics from both queries
WITH
  base_data AS (
    SELECT
      t0.cost_model_type,
      SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
      SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
      t0.financial_short_month,
      SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
      SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
      SAFE_CAST(t0.relative_fy_month_offset AS INT64) AS relative_fy_month_offset,
      UPPER(SAFE_CAST(t0.revenue_group_subtype AS STRING)) AS revenue_group_subtype,
      t0.unified_publication_name,
      t0.reporting_date,
      -- Derived fields common to both queries
      CASE
        WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'Y'
        ELSE 'N'
      END AS is_audience_extension_flag,
      CASE
        WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI'
        WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
        WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
        WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
        WHEN (CASE WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'Y' ELSE 'N' END) = 'Y' THEN 'PERFORMANCE'
        ELSE NULL
      END AS channel_type,
      UPPER(SAFE_CAST(t0.revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' AS is_programmatic_source,
      DATE(TIMESTAMP '2025-06-18 03:06:41.434326+00', 'Australia/Sydney') AS hardcoded_q2_date
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      -- Apply a reasonable date filter for performance, as original queries don't have a broad one
      t0.reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) -- Example: last 2 years of data
  )
SELECT
  financial_short_month,
  financial_quarter,
  financial_month,
  relative_fy_month_offset,
  channel_type,
  cost_model_type,
  -- Total Gross Revenue (across all filters)
  SUM(gross_revenue_amount) AS total_gross_revenue,
  -- Query 1 related metrics (filtered by financial_quarter = 2)
  SUM(
    CASE
      WHEN relative_fy_year_offset = -1
      AND financial_quarter = 2 THEN CASE
        WHEN channel_type = 'PERFORMANCE'
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS prev_fy_performance_or_programmatic_revenue_q2,
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0
      AND financial_quarter = 2 THEN CASE
        WHEN channel_type = 'PMP'
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_pmp_revenue_q2,
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0
      AND financial_quarter = 2 THEN CASE
        WHEN channel_type = 'PERFORMANCE'
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_performance_or_programmatic_revenue_q2,
  -- Query 2 related metrics (filtered by relative_fy_year_offset = 0)
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0 THEN CASE
        WHEN channel_type IN ('TUBI', 'PERFORMANCE')
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_tubi_performance_programmatic_revenue,
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0
      AND reporting_date < hardcoded_q2_date THEN CASE
        WHEN channel_type IN ('TUBI', 'PERFORMANCE')
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_tubi_performance_programmatic_revenue_before_hardcoded_date,
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0
      AND reporting_date < hardcoded_q2_date
      AND UPPER(cost_model_type) = 'GUARANTEED' THEN CASE
        WHEN channel_type IN ('TUBI', 'PERFORMANCE')
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_guaranteed_revenue_before_hardcoded_date,
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0
      AND reporting_date < hardcoded_q2_date
      AND UPPER(cost_model_type) = 'PMP' THEN CASE
        WHEN channel_type IN ('TUBI', 'PERFORMANCE')
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_pmp_revenue_before_hardcoded_date,
  SUM(
    CASE
      WHEN relative_fy_year_offset = 0
      AND reporting_date < hardcoded_q2_date
      AND UPPER(cost_model_type) = 'NON-GUARANTEED' THEN CASE
        WHEN channel_type IN ('TUBI', 'PERFORMANCE')
        OR is_programmatic_source THEN gross_revenue_amount
        ELSE NULL
      END
      ELSE NULL
    END
  ) AS current_fy_nonguaranteed_revenue_before_hardcoded_date
FROM
  base_data
GROUP BY
  financial_short_month,
  financial_quarter,
  financial_month,
  relative_fy_month_offset,
  channel_type,
  cost_model_type
ORDER BY
  financial_quarter ASC, financial_month ASC
LIMIT
  10000;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT t0.reporting_date) AS unique_reporting_dates,
  COUNT(DISTINCT SAFE_CAST(t0.financial_month AS INT64)) AS unique_financial_months,
  COUNT(DISTINCT SAFE_CAST(t0.financial_quarter AS INT64)) AS unique_financial_quarters,
  COUNT(DISTINCT t0.cost_model_type) AS unique_cost_model_types,
  COUNT(DISTINCT t0.revenue_group_subtype) AS unique_revenue_group_subtypes,
  COUNT(DISTINCT t0.unified_publication_name) AS unique_unified_publication_names,
  MIN(t0.reporting_date) AS earliest_reporting_date,
  MAX(t0.reporting_date) AS latest_reporting_date,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) AS null_gross_revenue_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR)
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE
    WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS total_revenue_positive_test,
  CASE
    WHEN COUNT(DISTINCT t0.reporting_date) > 0
    AND MAX(t0.reporting_date) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS'
    ELSE 'FAIL'
  END AS data_freshness_test,
  CASE
    WHEN COUNT(DISTINCT CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.reporting_date ELSE NULL END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS current_fy_data_exists_test,
  CASE
    WHEN COUNT(DISTINCT CASE WHEN t0.unified_publication_name = 'TUBI' THEN t0.reporting_date ELSE NULL END) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS tubi_data_exists_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","WITH
  derived_data AS (
    SELECT
      t0.unified_publication_name,
      UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) AS cost_model_type_upper,
      CASE
        WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'Y'
        ELSE 'N'
      END AS is_audience_extension_flag,
      CASE
        WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI'
        WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
        WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
        WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
        WHEN (CASE WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'Y' ELSE 'N' END) = 'Y' THEN 'PERFORMANCE'
        ELSE NULL
      END AS derived_channel_type
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      t0.reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'Channel Type Derivation' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(
    CASE
      WHEN derived_channel_type IS NOT NULL THEN 1
      ELSE 0
    END
  ) AS records_with_channel_type,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN derived_channel_type IS NOT NULL THEN 1
        ELSE 0
      END
    ),
    COUNT(*)
  ) * 100 AS channel_type_assignment_rate_percentage,
  COUNT(DISTINCT derived_channel_type) AS distinct_channel_types_derived,
  ARRAY_AGG(DISTINCT derived_channel_type IGNORE NULLS) AS derived_channel_type_values,
  ARRAY_AGG(DISTINCT unified_publication_name IGNORE NULLS) AS source_unified_publication_names,
  ARRAY_AGG(DISTINCT cost_model_type_upper IGNORE NULLS) AS source_cost_model_types
FROM
  derived_data
LIMIT 1;","SELECT
  t0.reporting_date,
  t0.financial_short_month,
  SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
  t0.cost_model_type,
  t0.revenue_group_subtype,
  t0.unified_publication_name
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  t0.reporting_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  AND t0.gross_revenue_amount IS NOT NULL
ORDER BY
  t0.reporting_date DESC, t0.gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025-06-18', 'original_format': ""DATE(TIMESTAMP '2025-06-18 03:06:41.434326+00', 'Australia/Sydney')"", 'context': ""Used as a cut-off date for 'before hardcoded date' revenue calculations in Query 2, likely representing a specific reporting period or forecast end date."", 'suggested_fix': ""Replace with a Looker Studio date parameter (e.g., `{{_DS_END_DATE}}` or a custom parameter) or a relative date function like `CURRENT_DATE()` if it's meant to be dynamic."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'TUBI'"", ""'PG'"", ""'OMP'"", ""'PMP'"", ""'PERFORMANCE'""], 'context': ""Used in CASE statements to derive 'Channel Type' based on `unified_publication_name` and `cost_model_type`."", 'suggested_governance': 'Create a `dim_channel_type` reference table with `unified_publication_name`, `cost_model_type`, `is_audience_extension_flag` and the corresponding `channel_type`. Join to this dimension table.', 'impact': 'medium', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PROGRAMMATIC SOURCE'""], 'context': 'Used to identify programmatic revenue based on `revenue_group_subtype`.', 'suggested_governance': 'Manage `revenue_group_subtype` values in a reference table.', 'impact': 'low', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['0', '-1'], 'context': ""Used to identify 'Current FY' (`relative_fy_year_offset = 0`) and 'Previous FY' (`relative_fy_year_offset = -1`)."", 'suggested_governance': 'While common, these could be defined as named constants or derived in a `dim_fiscal_period` table for clarity and consistency.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': ['2'], 'context': 'Used to filter for a specific `financial_quarter` (Q2) in Query 1.', 'suggested_governance': 'If this quarter changes, it should be a parameter or derived from a fiscal calendar table.', 'impact': 'low', 'maintenance_risk': 'medium'}]}","[""Replace hardcoded dates (e.g., '2025-06-18') with Looker Studio date range parameters or custom date parameters to allow dynamic reporting periods."", ""Replace hardcoded lookup values (e.g., 'TUBI', 'PMP', 'PROGRAMMATIC SOURCE') with joins to governed reference tables for maintainability and data consistency."", ""Consider externalizing complex business logic (like 'Channel Type' derivation) into a dedicated view or a configuration table if it's subject to frequent changes.""]",34,5491badf-5ec0-4b4f-a427-b12a3a3395dd
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters
WITH
  base_data_cte AS (
    SELECT
      ad_type_name AS adtype_name,
      is_xtend_flag AS xtend_flag,
      unified_publication_name,
      unified_publication_gl_code,
      CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag,
      fy_year_month_number,
      CAST(RIGHT(CAST(fy_year_month_number AS STRING), 2) AS INT64) AS fiscal_month_number,
      fy_year AS financial_year,
      fy_quarter_of_year AS financial_quarter,
      fy_month_of_year AS financial_month,
      fy_month_short_name AS financial_short_month,
      fy_week_of_year AS financial_week,
      revenue_transaction_status_code AS revenue_transaction_status,
      is_print_digital_flag,
      current_fy_month_of_year AS current_financial_month,
      current_fy_week_of_year AS current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(ASL.fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sync_sales_segment_l2_name = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE('Australia/Sydney')) AS DOW_Today,
      sales_segment_l1_name AS sales_segment_l_1_name,
      sales_segment_l2_name AS sales_segment_l_2_name,
      sync_sales_segment_l1_name AS sales_segment_l_1_name_sync,
      sync_sales_segment_l2_name AS sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      customer_group_name AS advertiser_group,
      customer_group_parent_name AS advertiser_parent,
      IFNULL(adjustment_amount, 0) AS adjustment_amount,
      curr_sales_segment_gm_name AS sales_segment_gm_name,
      sync_sales_segment_gm_name AS sales_segment_gm_name_sync,
      revenue_group_level1_name AS revenue_group_level_1_name,
      revenue_group_level2_name AS revenue_group_level_2_name,
      IFNULL(lgb_pub_amount, 0) AS pub_lgb,
      IFNULL(lgb_ss_amount, 0) AS ss_lgb,
      IFNULL(pipeline_amount, 0) AS pipeline,
      IFNULL(gross_revenue_amount, 0) AS gross_revenue_amount,
      UPPER(revenue_group_type_code) AS revenue_type,
      UPPER(revenue_type_level2_code) AS revenue_type_Level2,
      UPPER(ASL.revenue_group_sub_type_code) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      sync_portfolio_group_name AS portfolio_group_name_sync,
      current_portfolio_group_name AS portfolio_group_name_current,
      sync_portfolio_parent_group_name AS portfolio_parent_group_name_sync,
      industry_level1_name AS aszsic_industry_level_1_name,
      industry_level1_code AS anzsic_industry_level_1_code,
      industry_level2_code AS anzsic_industry_level_2_code,
      industry_level2_name AS aszsic_industry_level_2_name,
      industry_level3_code AS anzsic_industry_level_3_code,
      industry_level3_name AS anzsic_industry_level_3_name,
      industry_level4_code AS anzsic_industry_level_4_code,
      industry_level4_name AS anzsic_industry_level_4_name,
      industry_pillar_name AS nca_industry_pillar,
      industry_pillar_group_name AS nca_industry_anzsic_pillar_group,
      ASL.product_group_name AS product_group,
      division_group_name AS publishing_division_group,
      division_parent_group_name AS publishing_division_parent,
      CASE
        WHEN client_reporting_date >= CURRENT_DATE('Australia/Sydney') THEN 'Y'
        ELSE 'N'
      END AS is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ly_is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ny_is_future_period_flag,
      cost_model_type_code AS cost_model_type,
      CASE
        WHEN dw_source_system_code = 'PLUTO' THEN SAFE_CAST(client_reporting_date AS STRING)
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      sync_portfolio_conformed_name AS portfolio_conformed_name_sync,
      publishing_division_name AS publishing_division,
      booking_line_created_week_of_year AS booking_line_created_week,
      booking_line_created_month_of_year AS booking_line_created_month,
      booking_line_created_month_short_name AS booking_line_created_short_month,
      booking_line_created_quarter_of_year AS booking_line_created_quarter,
      booking_line_created_year,
      agency_group_parent_name AS agency_parent,
      agency_group_name AS agency_group,
      agency_name,
      agency_id_src AS agency_number,
      cal_month_name AS calendar_month_name,
      cal_year AS calendar_year,
      section_l5_name AS classification_name,
      IFNULL(target_amount, 0) AS target,
      IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD,
      IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS portfolio_full_name_sync,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS sync_portfolio_conformed_owner_full,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      adtype_l1,
      adtype_l2,
      legacy_growth_flag,
      relative_cal_year_offset,
      cal_quarter_of_year_name AS calendar_quarter_of_year,
      cal_year_week_number AS calendar_week
    FROM
      `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
    WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
      AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
      AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
      AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
      AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-')))
  ),
  final_data AS (
    SELECT
      *,
      MIN(
        CASE
          WHEN advertiser_parent = 'DOUBLECLICK' THEN SAFE_CAST(booking_line_created_date AS DATE)
        END) OVER (PARTITION BY financial_year) AS fix_date_lod,
      DATETIME(TIMESTAMP(CURRENT_TIMESTAMP()), 'Australia/Sydney') AS dw_asl_load_timestamp,
      -- Derived Ad Type Grouping Dimension (unified logic)
      CASE
        WHEN fin_adtype_name = 'XTEND' THEN 'XTEND'
        WHEN portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL' THEN 'PROGRAMMATIC - DIGITAL OTHER'
        WHEN revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'GUA' THEN 'PROGRAMMATIC - GUARANTEED'
        WHEN revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'NON' THEN 'PROGRAMMATIC - OPEN EXCHANGE'
        WHEN revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'PMP' THEN 'PROGRAMMATIC - PMP'
        WHEN revenue_group_subtype = 'DIGITAL' THEN 'ADPT DIGITAL'
        WHEN SAFE.LEFT(revenue_group_subtype, 6) = 'SUNDRY' THEN 'SUNDRY'
        ELSE revenue_group_subtype
      END AS ad_type_grouping_dimension,
      -- Derived Revenue Type ID for Ad Type Count/Sum (Q2 logic)
      CASE
        WHEN (FALSE = TRUE) THEN NULL -- This condition is always false, so programmatic_type_id is never used here
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PRINT' THEN 1
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'DIGITAL' THEN 2
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PROGRAMMATIC' THEN 3
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PROGRAMMATIC EXCHANGE' THEN 4
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PROGRAMMATIC SOURCE' THEN 5
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'SUNDRY ADSALES OVERLAY' THEN 6
        ELSE NULL
      END AS ad_type_id_q2_logic,
      -- Conditional Gross Revenue (raw) for Q2/Q3 logic
      CASE
        WHEN (relative_fy_year_offset = 0 AND UPPER(unified_publication_name) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))
          OR (relative_fy_year_offset = 0 AND SAFE_CAST(booking_line_created_date AS DATETIME) <= DATETIME_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY) AND UPPER(advertiser_parent) = 'DOUBLECLICK')
        THEN gross_revenue_amount
        ELSE 0
      END AS conditional_gross_revenue_raw
    FROM
      base_data_cte
  )
SELECT
  ad_type_grouping_dimension,
  financial_year,
  financial_quarter,
  financial_month,
  financial_short_month,
  financial_week,
  calendar_year,
  calendar_month_name,
  calendar_quarter_of_year,
  calendar_week,
  revenue_transaction_status,
  is_print_digital_flag,
  fin_adtype_name,
  Sales_Group,
  sales_segment_l_1_name,
  sales_segment_l_2_name,
  advertiser_group,
  advertiser_parent,
  revenue_type,
  revenue_type_Level2,
  revenue_group_subtype,
  cost_model_type,
  publishing_division,
  GSD,
  Sundry_Pubs_Flag,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount,
  SUM(adjustment_amount) AS total_adjustment_amount,
  SUM(pub_lgb) AS total_pub_lgb,
  SUM(ss_lgb) AS total_ss_lgb,
  SUM(pipeline) AS total_pipeline,
  SUM(target) AS total_target,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue_raw,
  SUM(CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END) AS previous_fy_gross_revenue_raw,
  SAFE_DIVIDE(SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END), 1000) AS current_fy_gross_revenue_k,
  SAFE_DIVIDE(SUM(CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END), 1000) AS previous_fy_gross_revenue_k,
  SAFE_DIVIDE(SUM(conditional_gross_revenue_raw), 1000) AS conditional_gross_revenue_k,
  COUNT(ad_type_id_q2_logic) AS ad_type_id_count,
  SUM(ad_type_id_q2_logic) AS ad_type_id_sum
FROM
  final_data
WHERE
  -- Apply a reasonable date filter for performance, e.g., last 2 years
  financial_year >= EXTRACT(YEAR FROM CURRENT_DATE('Australia/Sydney')) - 1
GROUP BY
  ad_type_grouping_dimension,
  financial_year,
  financial_quarter,
  financial_month,
  financial_short_month,
  financial_week,
  calendar_year,
  calendar_month_name,
  calendar_quarter_of_year,
  calendar_week,
  revenue_transaction_status,
  is_print_digital_flag,
  fin_adtype_name,
  Sales_Group,
  sales_segment_l_1_name,
  sales_segment_l_2_name,
  advertiser_group,
  advertiser_parent,
  revenue_type,
  revenue_type_Level2,
  revenue_group_subtype,
  cost_model_type,
  publishing_division,
  GSD,
  Sundry_Pubs_Flag
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 10000","-- Query to understand data structure, grain, and key dimensions with sampling
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(ASL.client_reporting_date AS DATE)) AS unique_client_reporting_dates,
  COUNT(DISTINCT ASL.advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT ASL.unified_publication_name) AS unique_publications,
  COUNT(DISTINCT ASL.fin_adtype_name) AS unique_fin_adtypes,
  MIN(SAFE_CAST(ASL.client_reporting_date AS DATE)) AS earliest_client_reporting_date,
  MAX(SAFE_CAST(ASL.client_reporting_date AS DATE)) AS latest_client_reporting_date,
  MIN(SAFE_CAST(ASL.booking_line_created_date AS DATE)) AS earliest_booking_date,
  MAX(SAFE_CAST(ASL.booking_line_created_date AS DATE)) AS latest_booking_date,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(ASL.client_reporting_date AS STRING), ASL.advertiser_id_src, SAFE_CAST(ASL.booking_line_id_src AS STRING))) AS approx_unique_transaction_keys
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  SAFE_CAST(ASL.client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 * 2 DAY) -- Sample last 2 years
LIMIT 100000","-- Quick validation that all metric calculations work syntactically and provide reasonable values
WITH
  base_data_cte AS (
    SELECT
      ad_type_name AS adtype_name,
      is_xtend_flag AS xtend_flag,
      unified_publication_name,
      unified_publication_gl_code,
      CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag,
      fy_year_month_number,
      CAST(RIGHT(CAST(fy_year_month_number AS STRING), 2) AS INT64) AS fiscal_month_number,
      fy_year AS financial_year,
      fy_quarter_of_year AS financial_quarter,
      fy_month_of_year AS financial_month,
      fy_month_short_name AS financial_short_month,
      fy_week_of_year AS financial_week,
      revenue_transaction_status_code AS revenue_transaction_status,
      is_print_digital_flag,
      current_fy_month_of_year AS current_financial_month,
      current_fy_week_of_year AS current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(ASL.fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sync_sales_segment_l2_name = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE('Australia/Sydney')) AS DOW_Today,
      sales_segment_l1_name AS sales_segment_l_1_name,
      sales_segment_l2_name AS sales_segment_l_2_name,
      sync_sales_segment_l1_name AS sales_segment_l_1_name_sync,
      sync_sales_segment_l2_name AS sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      customer_group_name AS advertiser_group,
      customer_group_parent_name AS advertiser_parent,
      IFNULL(adjustment_amount, 0) AS adjustment_amount,
      curr_sales_segment_gm_name AS sales_segment_gm_name,
      sync_sales_segment_gm_name AS sales_segment_gm_name_sync,
      revenue_group_level1_name AS revenue_group_level_1_name,
      revenue_group_level2_name AS revenue_group_level_2_name,
      IFNULL(lgb_pub_amount, 0) AS pub_lgb,
      IFNULL(lgb_ss_amount, 0) AS ss_lgb,
      IFNULL(pipeline_amount, 0) AS pipeline,
      IFNULL(gross_revenue_amount, 0) AS gross_revenue_amount,
      UPPER(revenue_group_type_code) AS revenue_type,
      UPPER(revenue_type_level2_code) AS revenue_type_Level2,
      UPPER(ASL.revenue_group_sub_type_code) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      sync_portfolio_group_name AS portfolio_group_name_sync,
      current_portfolio_group_name AS portfolio_group_name_current,
      sync_portfolio_parent_group_name AS portfolio_parent_group_name_sync,
      industry_level1_name AS aszsic_industry_level_1_name,
      industry_level1_code AS anzsic_industry_level_1_code,
      industry_level2_code AS anzsic_industry_level_2_code,
      industry_level2_name AS aszsic_industry_level_2_name,
      industry_level3_code AS anzsic_industry_level_3_code,
      industry_level3_name AS anzsic_industry_level_3_name,
      industry_level4_code AS anzsic_industry_level_4_code,
      industry_level4_name AS anzsic_industry_level_4_name,
      industry_pillar_name AS nca_industry_pillar,
      industry_pillar_group_name AS nca_industry_anzsic_pillar_group,
      ASL.product_group_name AS product_group,
      division_group_name AS publishing_division_group,
      division_parent_group_name AS publishing_division_parent,
      CASE
        WHEN client_reporting_date >= CURRENT_DATE('Australia/Sydney') THEN 'Y'
        ELSE 'N'
      END AS is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ly_is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ny_is_future_period_flag,
      cost_model_type_code AS cost_model_type,
      CASE
        WHEN dw_source_system_code = 'PLUTO' THEN SAFE_CAST(client_reporting_date AS STRING)
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      sync_portfolio_conformed_name AS portfolio_conformed_name_sync,
      publishing_division_name AS publishing_division,
      booking_line_created_week_of_year AS booking_line_created_week,
      booking_line_created_month_of_year AS booking_line_created_month,
      booking_line_created_month_short_name AS booking_line_created_short_month,
      booking_line_created_quarter_of_year AS booking_line_created_quarter,
      booking_line_created_year,
      agency_group_parent_name AS agency_parent,
      agency_group_name AS agency_group,
      agency_name,
      agency_id_src AS agency_number,
      cal_month_name AS calendar_month_name,
      cal_year AS calendar_year,
      section_l5_name AS classification_name,
      IFNULL(target_amount, 0) AS target,
      IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD,
      IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS portfolio_full_name_sync,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS sync_portfolio_conformed_owner_full,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      adtype_l1,
      adtype_l2,
      legacy_growth_flag,
      relative_cal_year_offset,
      cal_quarter_of_year_name AS calendar_quarter_of_year,
      cal_year_week_number AS calendar_week
    FROM
      `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
    WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0))
      AND UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED')
      AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
      AND UPPER(IFNULL(source_publishing_division_name, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
      AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-')))
      AND SAFE_CAST(client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 30 DAY) -- Sample recent data
  ),
  final_data AS (
    SELECT
      *,
      MIN(
        CASE
          WHEN advertiser_parent = 'DOUBLECLICK' THEN SAFE_CAST(booking_line_created_date AS DATE)
        END) OVER (PARTITION BY financial_year) AS fix_date_lod,
      DATETIME(TIMESTAMP(CURRENT_TIMESTAMP()), 'Australia/Sydney') AS dw_asl_load_timestamp,
      CASE
        WHEN fin_adtype_name = 'XTEND' THEN 'XTEND'
        WHEN portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL' THEN 'PROGRAMMATIC - DIGITAL OTHER'
        WHEN revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'GUA' THEN 'PROGRAMMATIC - GUARANTEED'
        WHEN revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'NON' THEN 'PROGRAMMATIC - OPEN EXCHANGE'
        WHEN revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'PMP' THEN 'PROGRAMMATIC - PMP'
        WHEN revenue_group_subtype = 'DIGITAL' THEN 'ADPT DIGITAL'
        WHEN SAFE.LEFT(revenue_group_subtype, 6) = 'SUNDRY' THEN 'SUNDRY'
        ELSE revenue_group_subtype
      END AS ad_type_grouping_dimension,
      CASE
        WHEN (FALSE = TRUE) THEN NULL
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PRINT' THEN 1
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'DIGITAL' THEN 2
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PROGRAMMATIC' THEN 3
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PROGRAMMATIC EXCHANGE' THEN 4
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'PROGRAMMATIC SOURCE' THEN 5
        WHEN (CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END) = 'SUNDRY ADSALES OVERLAY' THEN 6
        ELSE NULL
      END AS ad_type_id_q2_logic,
      CASE
        WHEN (relative_fy_year_offset = 0 AND UPPER(unified_publication_name) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE'))
          OR (relative_fy_year_offset = 0 AND SAFE_CAST(booking_line_created_date AS DATETIME) <= DATETIME_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY) AND UPPER(advertiser_parent) = 'DOUBLECLICK')
        THEN gross_revenue_amount
        ELSE 0
      END AS conditional_gross_revenue_raw
    FROM
      base_data_cte
  )
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(gross_revenue_amount) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_revenue_test,
  CASE WHEN SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS current_fy_revenue_test,
  CASE WHEN SUM(CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS previous_fy_revenue_test,
  CASE WHEN MAX(SAFE_CAST(booking_line_created_date AS DATE)) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(DISTINCT ad_type_grouping_dimension) > 1 THEN 'PASS' ELSE 'FAIL' END AS ad_type_grouping_diversity_test,
  CASE WHEN COUNT(DISTINCT revenue_transaction_status) = 2 THEN 'PASS' ELSE 'FAIL' END AS transaction_status_filter_test -- Expecting 'BILLED', 'BOOKED'
FROM
  final_data
LIMIT 1","-- Query to validate key business logic, filters, and data quality
SELECT
  'Business Rule Validation' AS validation_type,
  'Revenue Transaction Status Filter' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN UPPER(IFNULL(revenue_transaction_status_code, 'XXX')) IN ('BILLED', 'BOOKED') THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  SAFE_CAST(ASL.client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 90 DAY) -- Sample recent data for rule validation

UNION ALL

SELECT
  'Business Rule Validation' AS validation_type,
  'Publication Name SUDDENLY% Rule' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-'))) THEN 1 ELSE 0 END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name = '-'))) THEN 1 ELSE 0 END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  SAFE_CAST(ASL.client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 90 DAY) -- Sample recent data for rule validation

UNION ALL

SELECT
  'Business Rule Validation' AS validation_type,
  'Ad Type Grouping Dimension Logic (Sample)' AS rule_name,
  COUNT(*) AS total_records_evaluated,
  SUM(CASE
        WHEN ASL.fin_adtype_name = 'XTEND' THEN 1
        WHEN ASL.sync_portfolio_parent_group_name = 'DIGITAL OTHER' AND ASL.revenue_group_subtype = 'DIGITAL' THEN 1
        WHEN ASL.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(ASL.cost_model_type_code), 3) = 'GUA' THEN 1
        WHEN ASL.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(ASL.cost_model_type_code), 3) = 'NON' THEN 1
        WHEN ASL.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(ASL.cost_model_type_code), 3) = 'PMP' THEN 1
        WHEN ASL.revenue_group_subtype = 'DIGITAL' THEN 1
        WHEN SAFE.LEFT(ASL.revenue_group_subtype, 6) = 'SUNDRY' THEN 1
        ELSE 0
      END) AS records_passing_rule,
  SAFE_DIVIDE(SUM(CASE
        WHEN ASL.fin_adtype_name = 'XTEND' THEN 1
        WHEN ASL.sync_portfolio_parent_group_name = 'DIGITAL OTHER' AND ASL.revenue_group_subtype = 'DIGITAL' THEN 1
        WHEN ASL.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(ASL.cost_model_type_code), 3) = 'GUA' THEN 1
        WHEN ASL.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(ASL.cost_model_type_code), 3) = 'NON' THEN 1
        WHEN ASL.revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(ASL.cost_model_type_code), 3) = 'PMP' THEN 1
        WHEN ASL.revenue_group_subtype = 'DIGITAL' THEN 1
        WHEN SAFE.LEFT(ASL.revenue_group_subtype, 6) = 'SUNDRY' THEN 1
        ELSE 0
      END), COUNT(*)) * 100 AS pass_rate_percentage
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  SAFE_CAST(ASL.client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 90 DAY)","-- Query to get representative sample data for further analysis
SELECT
  SAFE_CAST(ASL.client_reporting_date AS DATE) AS client_reporting_date,
  ASL.financial_year,
  ASL.financial_month,
  ASL.advertiser_name,
  ASL.advertiser_parent,
  ASL.unified_publication_name,
  ASL.fin_adtype_name,
  ASL.revenue_group_subtype,
  ASL.revenue_type,
  ASL.cost_model_type_code,
  ASL.relative_fy_year_offset,
  ASL.gross_revenue_amount,
  ASL.target_amount,
  ASL.pipeline_amount,
  ASL.revenue_transaction_status_code,
  ASL.dw_source_system_code,
  ASL.style_name,
  ASL.source_publishing_division_name,
  ASL.advertiser_id_src,
  ASL.ad_type_name,
  ASL.sync_portfolio_parent_group_name,
  ASL.sales_segment_l2_name
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
WHERE
  SAFE_CAST(ASL.client_reporting_date AS DATE) >= DATE_SUB(CURRENT_DATE('Australia/Sydney'), INTERVAL 30 DAY)
  AND ASL.gross_revenue_amount IS NOT NULL
ORDER BY
  ASL.client_reporting_date DESC, ASL.gross_revenue_amount DESC
LIMIT 500","{'hardcoded_dates': [{'date_value': '2025-05-08', 'original_format': ""DATE(TIMESTAMP '2025-05-08 01:48:02.510465+00', 'Australia/Sydney')"", 'context': ""Used as a fixed 'current date' for calculating relative dates (e.g., previous year date) and fix_date_lod. This will cause data to become stale and incorrect over time."", 'suggested_fix': ""Replace with `CURRENT_DATE('Australia/Sydney')` or a dashboard date parameter."", 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'display_format', 'hardcoded_values': [""'$'000' = '$'""], 'context': 'Controls whether certain revenue metrics are divided by 1000 for display. Currently hardcoded to always divide by 1000.', 'suggested_governance': ""Implement as a Looker Studio parameter (e.g., 'Display_Unit') that can be selected by the user."", 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'BILLED'"", ""'BOOKED'"", ""'ROP COMPOSITE'"", ""'MEDIUM RARE CONTENT AGENCY'"", ""'SUDDENLY%'"", ""'17114'"", ""'29172'"", ""'52809'"", ""'-'"", ""'DOUBLECLICK'"", ""'PLUTO'"", ""'XTEND'"", ""'DIGITAL OTHER'"", ""'DIGITAL'"", ""'PROGRAMMATIC SOURCE'"", ""'GUA'"", ""'NON'"", ""'PMP'"", ""'PRINT'"", ""'PROGRAMMATIC'"", ""'PROGRAMMATIC EXCHANGE'"", ""'SUNDRY ADSALES OVERLAY'"", ""'OUTSTREAM'"", ""'EDMEDIA'"", ""'ECOMMERCE'"", ""'MRCA'"", ""'VACANT'""], 'context': 'Various filters, classifications, and default values are hardcoded within CASE statements and WHERE clauses.', 'suggested_governance': 'Migrate these values to a dedicated configuration table or lookup tables (e.g., `dim_revenue_status`, `dim_ad_type_classification`, `dim_publication_rules`, `dim_advertiser_segments`). This allows for easier updates and better data governance.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'relative_periods', 'hardcoded_values': ['-1', '0', '1'], 'context': 'Filters data to current, previous, and next financial/calendar years.', 'suggested_governance': 'While common, consider if these offsets should be configurable via dashboard parameters for more flexible reporting periods.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded dates with date parameters or `CURRENT_DATE('Australia/Sydney')` for dynamic reporting periods."", 'Replace hardcoded lookup values (e.g., ad types, publication names, advertiser IDs, status codes) with joins to governed reference tables or Looker Studio parameters for user selection.', 'Externalize complex business rules (e.g., programmatic classification, sundry publication logic) into a configuration table or a dedicated UDF/view for maintainability and transparency.', ""Introduce a 'Display Unit' parameter (e.g., 'Raw', 'Thousands') to control the division by 1000 for revenue metrics.""]",35,52c11c9c-052a-4e45-9cda-8fecd87d7964
"WITH SubscriptionsData AS (
  SELECT
    SAFE_CAST(fiscal_week_id AS INT64) AS fiscal_week_id,
    SAFE_CAST(gl_publication_code AS STRING) AS gl_publication_code,
    SAFE_CAST(category_name AS STRING) AS category_name,
    SAFE_CAST(add_volume AS NUMERIC) AS add_volume,
    SAFE_CAST(closing_base AS NUMERIC) AS closing_base,
    SAFE_CAST(earned_amount AS NUMERIC) AS earned_amount,
    SAFE_CAST(opening_base AS NUMERIC) AS opening_base,
    SAFE_CAST(red_volume AS NUMERIC) AS red_volume,
    SAFE_CAST(transfer_in AS NUMERIC) AS transfer_in,
    SAFE_CAST(transfer_out AS NUMERIC) AS transfer_out
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
  -- Filter for a recent fiscal week range, assuming fiscal_week_id is YYYYWW format
  WHERE SAFE_CAST(fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) - 5 FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`)
)
SELECT
  fiscal_week_id,
  gl_publication_code,
  category_name,
  SUM(add_volume) AS total_add_volume,
  SUM(closing_base) AS total_closing_base,
  SUM(earned_amount) AS total_earned_amount,
  SUM(opening_base) AS total_opening_base,
  SUM(red_volume) AS total_red_volume,
  SUM(transfer_in) AS total_transfer_in,
  SUM(transfer_out) AS total_transfer_out,
  -- Example of a derived metric: Net Transfer
  SUM(transfer_in) - SUM(transfer_out) AS net_transfer_volume,
  -- Example of a derived metric: Net Volume Change
  SUM(add_volume) - SUM(red_volume) AS net_volume_change
FROM SubscriptionsData
GROUP BY
  fiscal_week_id,
  gl_publication_code,
  category_name
ORDER BY
  fiscal_week_id DESC, gl_publication_code, category_name
LIMIT 100;","SELECT
  'Data Structure Analysis - Subscriptions' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS INT64)) as unique_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(gl_publication_code AS STRING)) as unique_publications,
  COUNT(DISTINCT SAFE_CAST(category_name AS STRING)) as unique_categories,
  MIN(SAFE_CAST(fiscal_week_id AS INT64)) as earliest_fiscal_week,
  MAX(SAFE_CAST(fiscal_week_id AS INT64)) as latest_fiscal_week,
  SUM(CASE WHEN add_volume IS NULL THEN 1 ELSE 0 END) AS null_add_volume_count,
  SUM(CASE WHEN earned_amount IS NULL THEN 1 ELSE 0 END) AS null_earned_amount_count
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE SAFE_CAST(fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) - 10 FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`)
LIMIT 1;","SELECT
  'Validation Check - Subscriptions' as test_type,
  CASE WHEN COUNT(*) > 0 THEN 'PASS' ELSE 'FAIL' END as data_presence_test,
  CASE WHEN MAX(SAFE_CAST(fiscal_week_id AS INT64)) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) - 2 FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN SUM(SAFE_CAST(earned_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as earned_amount_positive_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(gl_publication_code AS STRING)) > 1 THEN 'PASS' ELSE 'FAIL' END as multiple_publications_test
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE SAFE_CAST(fiscal_week_id AS INT64) = (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`)
LIMIT 1;","SELECT
  'Business Rule Validation - Hardcoded Fiscal Week' as validation_type,
  'Hardcoded Fiscal Week 202535' as rule_name,
  COUNT(*) as records_in_hardcoded_week,
  SUM(SAFE_CAST(earned_amount AS NUMERIC)) as earned_amount_in_hardcoded_week,
  (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`) as total_records_in_table,
  SAFE_DIVIDE(COUNT(*), (SELECT COUNT(*) FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`)) * 100 as percentage_of_total_records_for_week
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE SAFE_CAST(fiscal_week_id AS INT64) = 202535
LIMIT 1;","SELECT
  SAFE_CAST(fiscal_week_id AS INT64) AS fiscal_week_id,
  SAFE_CAST(gl_publication_code AS STRING) AS gl_publication_code,
  SAFE_CAST(category_name AS STRING) AS category_name,
  SAFE_CAST(add_volume AS NUMERIC) AS add_volume,
  SAFE_CAST(closing_base AS NUMERIC) AS closing_base,
  SAFE_CAST(earned_amount AS NUMERIC) AS earned_amount,
  SAFE_CAST(opening_base AS NUMERIC) AS opening_base,
  SAFE_CAST(red_volume AS NUMERIC) AS red_volume,
  SAFE_CAST(transfer_in AS NUMERIC) AS transfer_in,
  SAFE_CAST(transfer_out AS NUMERIC) AS transfer_out
FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE SAFE_CAST(fiscal_week_id AS INT64) >= (SELECT MAX(SAFE_CAST(fiscal_week_id AS INT64)) - 2 FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`)
ORDER BY SAFE_CAST(fiscal_week_id AS INT64) DESC, SAFE_CAST(earned_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'fiscal_period_id', 'hardcoded_values': ['202535'], 'context': 'Used as a specific fiscal week filter in the subscriptions query.', 'suggested_governance': 'Replace with a dynamic fiscal week parameter (e.g., current fiscal week, previous fiscal week) or a fiscal calendar lookup table.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded fiscal week IDs with dynamic parameters (e.g., `_FISCAL_WEEK_ID_` or `CURRENT_FISCAL_WEEK()`)', 'Implement a fiscal calendar dimension table to map fiscal week IDs to actual dates for flexible date range filtering.']",36,23c8b213-a9f0-4158-b8fa-bff14425abb5
"WITH base_data AS (
  SELECT
    t0.account_number,
    t0.adjustment_amount,
    t0.advertiser_name,
    t0.advertiser_parent,
    t0.financial_month,
    t0.financial_year,
    t0.gross_revenue_amount,
    t0.gross_revenue_ex_adj_amount,
    t0.invoice_number,
    t0.rebate_3_amount,
    t0.revenue_group_subtype,
    t0.revenue_transaction_status,
    t0.revenue_type,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.unified_publication_name
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND t0.financial_year IS NOT NULL
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.revenue_type IN ('Print', 'Digital')
    AND t0.revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital')
    -- Specific filters found in individual dashboard queries (can be parameterized or commented out for broader analysis):
    AND t0.financial_year = '2025' -- Found in job_6OfcD4WHqJA-ESGEQCj4CPSLZKO5, job_CTaZGv49EYpbUo_X2FpjLxWFyeoo
    -- AND SAFE_CAST(t0.financial_month AS FLOAT64) = 10.000000 -- Found in job_6OfcD4WHqJA-ESGEQCj4CPSLZKO5
    -- AND t0.rebate_3_amount != 0.000000 -- Found in job_6OfcD4WHqJA-ESGEQCj4CPSLZKO5, job_CTaZGv49EYpbUo_X2FpjLxWFyeoo
    -- AND t0.account_number = '4039072' -- Found in job_jRFECZJY2Avu1bRUy6CfH4Qxn7pQ
)
SELECT
  account_number,
  advertiser_name,
  advertiser_parent,
  financial_month,
  financial_year,
  invoice_number,
  revenue_type,
  source_system_code,
  unified_publication_name,
  revenue_group_subtype,
  revenue_transaction_status,
  source_publishing_division,
  SUM(SAFE_CAST(gross_revenue_ex_adj_amount AS NUMERIC)) AS total_gross_revenue_ex_adj_amount,
  SUM(SAFE_CAST(rebate_3_amount AS NUMERIC)) AS total_rebate_3_amount,
  SUM(SAFE_CAST(adjustment_amount AS NUMERIC)) AS total_adjustment_amount,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount
FROM base_data
GROUP BY
  account_number,
  advertiser_name,
  advertiser_parent,
  financial_month,
  financial_year,
  invoice_number,
  revenue_type,
  source_system_code,
  unified_publication_name,
  revenue_group_subtype,
  revenue_transaction_status,
  source_publishing_division
ORDER BY
  financial_year DESC, financial_month DESC, advertiser_name ASC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT SAFE_CAST(financial_month AS STRING)) as unique_financial_months,
  COUNT(DISTINCT account_number) as unique_accounts,
  COUNT(DISTINCT advertiser_name) as unique_advertisers,
  MIN(SAFE_CAST(financial_year AS STRING)) as earliest_financial_year,
  MAX(SAFE_CAST(financial_year AS STRING)) as latest_financial_year,
  APPROX_COUNT_DISTINCT(CONCAT(account_number, '-', invoice_number)) as approx_unique_transactions
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE SAFE_CAST(financial_year AS STRING) = '2025' -- Limiting to the year found in queries for relevance
LIMIT 1;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as gross_revenue_test,
  CASE WHEN SUM(SAFE_CAST(rebate_3_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as rebate_amount_test,
  CASE WHEN COUNT(DISTINCT account_number) > 0 THEN 'PASS' ELSE 'FAIL' END as unique_accounts_test,
  CASE WHEN MAX(SAFE_CAST(financial_year AS STRING)) = '2025' THEN 'PASS' ELSE 'FAIL' END as financial_year_freshness_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  revenue_transaction_status IN ('Booked', 'Billed')
  AND financial_year = '2025'
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'revenue_transaction_status_filter' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN revenue_transaction_status IN ('Booked', 'Billed') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Limiting to the year found in queries for relevance
UNION ALL
SELECT
  'Business Rule Validation' as validation_type,
  'source_publishing_division_exclusion' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END) as records_passing_rule,
  SAFE_DIVIDE(SUM(CASE WHEN (source_publishing_division != 'Medium Rare Content Agency' OR source_publishing_division IS NULL) THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE financial_year = '2025' -- Limiting to the year found in queries for relevance
LIMIT 100;","SELECT
  SAFE_CAST(financial_year AS STRING) as financial_year,
  SAFE_CAST(financial_month AS STRING) as financial_month,
  account_number,
  advertiser_name,
  revenue_type,
  revenue_group_subtype,
  revenue_transaction_status,
  source_publishing_division,
  SAFE_CAST(gross_revenue_amount AS NUMERIC) as gross_revenue_amount,
  SAFE_CAST(gross_revenue_ex_adj_amount AS NUMERIC) as gross_revenue_ex_adj_amount,
  SAFE_CAST(rebate_3_amount AS NUMERIC) as rebate_3_amount,
  SAFE_CAST(adjustment_amount AS NUMERIC) as adjustment_amount
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  financial_year = '2025' -- Limiting to the year found in queries for relevance
  AND revenue_transaction_status IN ('Booked', 'Billed')
ORDER BY
  financial_year DESC, financial_month DESC, gross_revenue_amount DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': ""'2025'"", 'context': 'financial_year filter in multiple queries', 'suggested_fix': 'replace with a parameter or relative year (e.g., EXTRACT(YEAR FROM CURRENT_DATE()))', 'impact': 'high', 'urgency': 'high'}, {'date_value': '10', 'original_format': '10.000000', 'context': 'financial_month filter in job_6OfcD4WHqJA-ESGEQCj4CPSLZKO5, after SAFE_CAST to FLOAT64', 'suggested_fix': 'replace with a parameter or relative month (e.g., EXTRACT(MONTH FROM CURRENT_DATE()))', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Booked'"", ""'Billed'""], 'context': 'revenue_transaction_status filter', 'suggested_governance': 'use a lookup table for transaction statuses', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'source_publishing_division exclusion filter', 'suggested_governance': 'use a lookup table for publishing divisions or a configuration table for exclusions', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'categories', 'hardcoded_values': [""'Print'"", ""'Digital'""], 'context': 'revenue_type filter', 'suggested_governance': 'use a lookup table for revenue types', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'categories', 'hardcoded_values': [""'Programmatic Source'"", ""'Print'"", ""'Digital'""], 'context': 'revenue_group_subtype filter', 'suggested_governance': 'use a lookup table for revenue group subtypes', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'4039072'""], 'context': 'account_number filter in job_jRFECZJY2Avu1bRUy6CfH4Qxn7pQ', 'suggested_governance': 'replace with a parameter or join to a client/account master table', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'thresholds', 'hardcoded_values': ['0.000000'], 'context': 'rebate_3_amount != 0.000000 filter in multiple queries', 'suggested_governance': 'document this business rule or parameterize the threshold if it can change', 'impact': 'medium', 'maintenance_risk': 'medium'}]}","['Replace hardcoded financial years and months with date parameters (e.g., @financial_year, @financial_month) or relative date functions (e.g., EXTRACT(YEAR FROM CURRENT_DATE())).', ""Replace hardcoded lookup values for 'revenue_transaction_status', 'source_publishing_division', 'revenue_type', 'revenue_group_subtype' with joins to governed reference tables."", ""Replace hardcoded 'account_number' with a parameter (e.g., @account_number) or a selection from a governed client list."", ""Consider externalizing business rules like 'rebate_3_amount != 0.000000' into a configuration table if the threshold is subject to change.""]",37,a17622e2-ad43-49cc-b3c5-19c95036fd14
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters
-- Assumption: Both tables contain a 'Fiscal_Year' column for joining purposes. If 'dv_exclude_product_l3_and_l4' does not have 'Fiscal_Year', this join will result in NULLs for 'exclude_data' metrics when grouped by year.
WITH
  exclude_data AS (
    SELECT
      SAFE_CAST(t0.Fiscal_Year AS INT64) AS fiscal_year, -- Assuming Fiscal_Year exists in this table
      SAFE_CAST(t0.Product_L3 AS STRING) AS product_l3, -- Using Product_L3 as the common dimension for joining
      SAFE_CAST(t0.Margin_Level AS STRING) AS margin_level,
      SUM(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) AS total_product_revenue_from_exclude,
      SUM(SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS NUMERIC)) AS total_product_revenue_merged_from_exclude
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
    WHERE
      SAFE_CAST(t0.Fiscal_Year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Filter for recent data, e.g., last 3 years
    GROUP BY
      1, 2, 3
  ),
  pacman_data AS (
    SELECT
      SAFE_CAST(t0.Fiscal_Year AS INT64) AS fiscal_year,
      SAFE_CAST(t0.Product_L3 AS STRING) AS product_l3,
      SUM(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) AS pacman_total_product_revenue,
      SUM(SAFE_CAST(t0.Fiscal_Year AS INT64)) AS pacman_sum_of_fiscal_years -- This is the unusual metric, summing the year itself
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
    WHERE
      SAFE_CAST(t0.Fiscal_Year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Filter for recent data, e.g., last 3 years
    GROUP BY
      1, 2
  )
SELECT
  COALESCE(ed.fiscal_year, pd.fiscal_year) AS fiscal_year,
  COALESCE(ed.product_l3, pd.product_l3) AS product_l3,
  ed.margin_level,
  ed.total_product_revenue_from_exclude,
  ed.total_product_revenue_merged_from_exclude,
  pd.pacman_total_product_revenue,
  pd.pacman_sum_of_fiscal_years,
  -- Specific metric for Fiscal Year 2025 from PACMAN data
  CASE WHEN COALESCE(ed.fiscal_year, pd.fiscal_year) = 2025 THEN pd.pacman_total_product_revenue ELSE NULL END AS pacman_2025_product_revenue
FROM
  exclude_data AS ed
FULL OUTER JOIN
  pacman_data AS pd
ON
  ed.fiscal_year = pd.fiscal_year AND ed.product_l3 = pd.product_l3
WHERE
  COALESCE(ed.fiscal_year, pd.fiscal_year) IS NOT NULL -- Ensure at least one year is present
ORDER BY
  fiscal_year DESC, product_l3
LIMIT 1000;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.Fiscal_Year AS INT64)) as unique_fiscal_years,
  COUNT(DISTINCT SAFE_CAST(t0.Product_L3 AS STRING)) as unique_product_l3s,
  MIN(SAFE_CAST(t0.Fiscal_Year AS INT64)) as earliest_fiscal_year,
  MAX(SAFE_CAST(t0.Fiscal_Year AS INT64)) as latest_fiscal_year,
  APPROX_COUNT_DISTINCT(CONCAT(SAFE_CAST(t0.Fiscal_Year AS STRING), '-', SAFE_CAST(t0.Product_L3 AS STRING))) as approx_unique_year_l3_combinations
FROM 
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE 
  SAFE_CAST(t0.Fiscal_Year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 5 -- Last 5 fiscal years for structure analysis
LIMIT 1;","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.Product_Revenue AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as product_revenue_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.Fiscal_Year AS INT64)) > 0 THEN 'PASS' ELSE 'FAIL' END as fiscal_year_test,
  CASE WHEN MAX(SAFE_CAST(t0.Fiscal_Year AS INT64)) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as freshness_test_fiscal_year,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(t0.Product_L3 AS STRING) IS NOT NULL THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as product_l3_not_null_test
FROM 
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE 
  SAFE_CAST(t0.Fiscal_Year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Last 2 fiscal years for validation
LIMIT 1;","SELECT 
  'Business Rule Validation' as validation_type,
  'fiscal_year_2025_revenue_check' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE WHEN SAFE_CAST(t0.Fiscal_Year AS INT64) = 2025 AND SAFE_CAST(t0.Product_Revenue AS NUMERIC) > 0 THEN 1 ELSE 0 END) as records_matching_2025_revenue,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE_CAST(t0.Fiscal_Year AS INT64) = 2025 AND SAFE_CAST(t0.Product_Revenue AS NUMERIC) > 0 THEN 1 ELSE 0 END), COUNT(*)) * 100 as percentage_of_records_in_2025_with_revenue
FROM 
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE 
  SAFE_CAST(t0.Fiscal_Year AS INT64) = 2025 -- Focus on the hardcoded year for validation
LIMIT 1;","SELECT 
  SAFE_CAST(t0.Fiscal_Year AS INT64) AS fiscal_year,
  SAFE_CAST(t0.Product_L3 AS STRING) AS product_l3,
  SAFE_CAST(t0.Product_Revenue AS NUMERIC) AS product_revenue,
  -- Add other relevant columns from dv_pacman_running_expense if available and useful for sampling
  -- e.g., SAFE_CAST(t0.SomeOtherDimension AS STRING) AS some_other_dimension
FROM 
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
WHERE 
  SAFE_CAST(t0.Fiscal_Year AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Last fiscal year for sample
  AND SAFE_CAST(t0.Product_Revenue AS NUMERIC) IS NOT NULL
ORDER BY 
  fiscal_year DESC, product_revenue DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'Used as a filter for Fiscal_Year in a revenue calculation.', 'suggested_fix': 'Replace with a Looker Studio parameter (e.g., @fiscal_year) or relative year logic (e.g., EXTRACT(YEAR FROM CURRENT_DATE()) + 1 for next fiscal year).', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'categories', 'hardcoded_values': [""'Category'"", ""'Product_Name'"", ""'Product_L1'"", ""'Product_L2'"", ""'Product_L3'"", ""'Product_L4'""], 'context': ""Used in a CASE statement to dynamically select a product hierarchy dimension based on a hardcoded string comparison. This typically indicates a Looker Studio parameter is being used, but the parameter's value is hardcoded in the SQL."", 'suggested_governance': 'Ensure the Looker Studio parameter is correctly configured and passed, or if this is meant to be static, consider a more robust way to define the dimension selection. Ideally, these category names should come from a governed lookup table if they represent business categories.', 'impact': 'medium', 'maintenance_risk': 'high'}]}","[""Replace hardcoded fiscal year '2025' with a Looker Studio parameter (e.g., `_fiscal_year_param`) to allow dynamic selection of the reporting year."", ""Replace hardcoded dimension selection strings (e.g., 'Category', 'Product_Name') with a Looker Studio parameter that maps to the desired column name, allowing users to switch dimensions without modifying SQL."", 'Consider creating a configuration table for dynamic dimension mapping if the logic becomes more complex.']",38,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"-- This query consolidates the logic from the provided Looker Studio queries to extract key metrics and dimensions.
-- It aggregates Actual_Amount and counts records, grouped by fiscal year and source system name.
-- It also includes other key measures for a comprehensive view.

WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      SAFE_CAST(os.Estimate AS NUMERIC) AS Estimate,
      SAFE_CAST(os.True_Up_Adjustment AS NUMERIC) AS True_Up_Adjustment,
      SAFE_CAST(os.Actual_Amount AS NUMERIC) AS Actual_Amount,
      SAFE_CAST(os.volume AS NUMERIC) AS volume,
      SAFE_CAST(os.Last_Year_Actual_Amount AS NUMERIC) AS Last_Year_Actual_Amount,
      SAFE_CAST(os.Last_Year_volume AS NUMERIC) AS Last_Year_volume,
      SAFE_CAST(os.Budget_Draft_Amount AS NUMERIC) AS Budget_Draft_Amount,
      SAFE_CAST(os.Budget_Draft_Volume AS NUMERIC) AS Budget_Draft_Volume,
      SAFE_CAST(os.Budget_Amount AS NUMERIC) AS Budget_Amount,
      SAFE_CAST(os.Budget_Volume AS NUMERIC) AS Budget_Volume,
      SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS Forecast_Amount,
      SAFE_CAST(os.Forecast_Volume AS NUMERIC) AS Forecast_Volume,
      SAFE_CAST(os.Budget_Jan_Amount AS NUMERIC) AS Budget_Jan_Amount,
      SAFE_CAST(os.Budget_Jan_Volume AS NUMERIC) AS Budget_Jan_Volume,
      SAFE_CAST(os.Budget_Feb_Amount AS NUMERIC) AS Budget_Feb_Amount,
      SAFE_CAST(os.Budget_Feb_Volume AS NUMERIC) AS Budget_Feb_Volume,
      SAFE_CAST(os.Budget_Mar_Amount AS NUMERIC) AS Budget_Mar_Amount,
      SAFE_CAST(os.Budget_Mar_Volume AS NUMERIC) AS Budget_Mar_Volume,
      SAFE_CAST(os.Budget_Apr_Amount AS NUMERIC) AS Budget_Apr_Amount,
      SAFE_CAST(os.Budget_Apr_Volume AS NUMERIC) AS Budget_Apr_Volume,
      SAFE_CAST(os.Budget_May_Amount AS NUMERIC) AS Budget_May_Amount,
      SAFE_CAST(os.Budget_May_Volume AS NUMERIC) AS Budget_May_Volume,
      SAFE_CAST(os.Budget_Jun_Amount AS NUMERIC) AS Budget_Jun_Amount,
      SAFE_CAST(os.Budget_Jun_Volume AS NUMERIC) AS Budget_Jun_Volume,
      SAFE_CAST(os.Budget_Jul_Amount AS NUMERIC) AS Budget_Jul_Amount,
      SAFE_CAST(os.Budget_Jul_Volume AS NUMERIC) AS Budget_Jul_Volume,
      SAFE_CAST(os.Budget_Aug_Amount AS NUMERIC) AS Budget_Aug_Amount,
      SAFE_CAST(os.Budget_Aug_Volume AS NUMERIC) AS Budget_Aug_Volume,
      SAFE_CAST(os.Budget_Sep_Amount AS NUMERIC) AS Budget_Sep_Amount,
      SAFE_CAST(os.Budget_Sep_Volume AS NUMERIC) AS Budget_Sep_Volume,
      SAFE_CAST(os.Budget_Oct_Amount AS NUMERIC) AS Budget_Oct_Amount,
      SAFE_CAST(os.Budget_Oct_Volume AS NUMERIC) AS Budget_Oct_Volume,
      SAFE_CAST(os.Budget_Nov_Amount AS NUMERIC) AS Budget_Nov_Amount,
      SAFE_CAST(os.Budget_Nov_Volume AS NUMERIC) AS Budget_Nov_Volume,
      SAFE_CAST(os.Budget_Dec_Amount AS NUMERIC) AS Budget_Dec_Amount,
      SAFE_CAST(os.Budget_Dec_Volume AS NUMERIC) AS Budget_Dec_Volume,
      SAFE_CAST(os.Forecast_Q1F_Amount AS NUMERIC) AS Forecast_Q1F_Amount,
      SAFE_CAST(os.Forecast_Q1F_Volume AS NUMERIC) AS Forecast_Q1F_Volume,
      SAFE_CAST(os.Forecast_Q2F_Amount AS NUMERIC) AS Forecast_Q2F_Amount,
      SAFE_CAST(os.Forecast_Q2F_Volume AS NUMERIC) AS Forecast_Q2F_Volume,
      SAFE_CAST(os.Forecast_Q3F_Amount AS NUMERIC) AS Forecast_Q3F_Amount,
      SAFE_CAST(os.Forecast_Q3F_Volume AS NUMERIC) AS Forecast_Q3F_Volume,
      SAFE_CAST(os.Forecast_Q4F_Amount AS NUMERIC) AS Forecast_Q4F_Amount,
      SAFE_CAST(os.Forecast_Q4F_Volume AS NUMERIC) AS Forecast_Q4F_Volume,
      SAFE_CAST(os.Forecast_Q5F_Amount AS NUMERIC) AS Forecast_Q5F_Amount,
      SAFE_CAST(os.Forecast_Q5F_Volume AS NUMERIC) AS Forecast_Q5F_Volume,
      SAFE_CAST(calendar.fy_year AS INT64) AS fy_year,
      calendar.fy_month_of_year_short_name,
      calendar.month_end_flag,
      SAFE_CAST(calendar.fy_year_week_number AS INT64) AS fy_year_week_number,
      SAFE_CAST(calendar.fy_first_day_of_week AS DATE) AS fy_first_day_of_week,
      SAFE_CAST(calendar.fy_last_day_of_week AS DATE) AS fy_last_day_of_week
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
        ON os.gl_publication_code = pub.publication_code
      LEFT JOIN (
        SELECT DISTINCT
          SAFE_CAST(c.fy_week_of_year AS INT64) AS fy_week_of_year,
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
          SAFE_CAST(c.fy_first_day_of_week AS DATE) AS fy_first_day_of_week,
          SAFE_CAST(c.fy_last_day_of_week AS DATE) AS fy_last_day_of_week,
          SAFE_CAST(c.fy_month_of_year AS INT64) AS fy_month_of_year,
          SAFE_CAST(c.fy_year_month_number AS INT64) AS fy_year_month_number,
          SAFE_CAST(c.relative_fisc_year_number AS INT64) AS relative_fisc_year_number,
          SAFE_CAST(c.relative_fisc_week_number AS INT64) AS relative_fisc_week_number,
          c.fy_month_of_year_short_name,
          CASE
            WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y'
            ELSE 'N'
          END AS month_end_flag,
          SAFE_CAST(c.fy_quarter_of_year AS INT64) AS fy_quarter_of_year,
          SAFE_CAST(c.fy_year AS INT64) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
            ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
            AND control.period_name IN ('CP', 'PY') -- Hardcoded values identified
        WHERE
          1 = 1
      ) AS calendar
        ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
      LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep
        ON os.os_level_12 = dep.department_code
  )
SELECT
  fy_year,
  source_system_name,
  gl_publication_code,
  fiscal_week_id,
  fy_first_day_of_week,
  fy_last_day_of_week,
  month_end_flag,
  SUM(Actual_Amount) AS total_actual_amount,
  SUM(Estimate) AS total_estimate,
  SUM(True_Up_Adjustment) AS total_true_up_adjustment,
  SUM(volume) AS total_volume,
  SUM(Last_Year_Actual_Amount) AS total_last_year_actual_amount,
  SUM(Budget_Amount) AS total_budget_amount,
  SUM(Forecast_Amount) AS total_forecast_amount,
  COUNT(1) AS record_count
FROM
  OSandFACT
WHERE
  fy_first_day_of_week >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR) -- Example date filter for recent data
GROUP BY
  fy_year,
  source_system_name,
  gl_publication_code,
  fiscal_week_id,
  fy_first_day_of_week,
  fy_last_day_of_week,
  month_end_flag
ORDER BY
  fy_year DESC, fiscal_week_id DESC
LIMIT 1000;
","-- Query to understand the data structure, grain, and key dimensions of the primary fact table.
-- Focuses on recent data to give a relevant snapshot.
SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(fiscal_week_id AS INT64)) AS unique_fiscal_weeks_in_sample,
  COUNT(DISTINCT source_system_name) AS unique_source_systems,
  COUNT(DISTINCT gl_publication_code) AS unique_publication_codes,
  MIN(SAFE_CAST(fiscal_week_id AS INT64)) AS earliest_fiscal_week_id_in_sample,
  MAX(SAFE_CAST(fiscal_week_id AS INT64)) AS latest_fiscal_week_id_in_sample,
  MIN(SAFE_CAST(Actual_Amount AS NUMERIC)) AS min_actual_amount,
  MAX(SAFE_CAST(Actual_Amount AS NUMERIC)) AS max_actual_amount,
  APPROX_COUNT_DISTINCT(CONCAT(source_system_name, '-', SAFE_CAST(fiscal_week_id AS STRING), '-', gl_publication_code)) AS approx_unique_grain_combinations
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
WHERE
  SAFE_CAST(fiscal_week_id AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)) AS INT64) -- Filter for recent fiscal weeks
LIMIT 1;
","-- Quick validation query to check data freshness, presence of key metrics, and filter effectiveness.
SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.Actual_Amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS actual_amount_positive_test,
  CASE WHEN COUNT(DISTINCT t0.source_system_name) > 0 THEN 'PASS' ELSE 'FAIL' END AS source_system_present_test,
  CASE WHEN MAX(SAFE_CAST(calendar.fy_last_day_of_week AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test,
  CASE WHEN COUNT(CASE WHEN control.period_name IN ('CP', 'PY') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS period_control_filter_test
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS t0
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON SAFE_CAST(t0.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
    ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(calendar.fy_last_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY) -- Limit to recent data for validation
LIMIT 1;
","-- Query to validate the business rule applied in the calendar join condition: `period_name IN ('CP', 'PY')`.
SELECT
  'Business Rule Validation' AS validation_type,
  'Period Control Filter' AS rule_name,
  COUNT(DISTINCT SAFE_CAST(c.fy_year_week_number AS INT64)) AS total_unique_weeks_in_calendar,
  COUNT(DISTINCT CASE WHEN control.period_name IN ('CP', 'PY') THEN SAFE_CAST(c.fy_year_week_number AS INT64) END) AS unique_weeks_passing_period_filter,
  SAFE_DIVIDE(
    COUNT(DISTINCT CASE WHEN control.period_name IN ('CP', 'PY') THEN SAFE_CAST(c.fy_year_week_number AS INT64) END),
    COUNT(DISTINCT SAFE_CAST(c.fy_year_week_number AS INT64))
  ) * 100 AS percentage_weeks_passing_filter
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
  JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
    ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(c.fy_year AS INT64) >= SAFE_CAST(FORMAT_DATE('%Y', DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)) AS INT64) -- Filter for recent years
LIMIT 1;
","-- Query to retrieve a representative sample of data, including key dimensions and measures.
-- Useful for understanding the raw data structure and values.
SELECT
  SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) AS fy_first_day_of_week,
  SAFE_CAST(calendar.fy_year AS INT64) AS fy_year,
  os.source_system_name,
  os.gl_publication_code,
  os.os_level_1,
  os.os_level_12,
  SAFE_CAST(os.Actual_Amount AS NUMERIC) AS actual_amount,
  SAFE_CAST(os.Budget_Amount AS NUMERIC) AS budget_amount,
  SAFE_CAST(os.Forecast_Amount AS NUMERIC) AS forecast_amount,
  SAFE_CAST(os.volume AS NUMERIC) AS volume
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
    ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
    AND control.period_name IN ('CP', 'PY')
WHERE
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY) -- Sample from recent data
  AND os.Actual_Amount IS NOT NULL
ORDER BY
  SAFE_CAST(calendar.fy_first_day_of_week AS DATE) DESC,
  SAFE_CAST(os.Actual_Amount AS NUMERIC) DESC
LIMIT 500;
","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'CP'"", ""'PY'""], 'context': 'period_name filter in the calendar join condition', 'suggested_governance': 'Replace with a parameter or join to a configuration table that defines active periods.', 'impact': 'high', 'maintenance_risk': 'high'}]}","[""Replace hardcoded period names ('CP', 'PY') with a parameter or a dynamic lookup from a control table to allow for flexible period selection without modifying the query."", 'Introduce date parameters for filtering the overall data range, enabling users to select specific fiscal years or weeks.']",39,d7412673-0af1-4efe-8374-ca475b001fb6
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together for the latest available fiscal week
WITH
  base_data AS (
    SELECT
      t0.*, -- Select all columns from the source table
      -- Derived masthead dimensions for grouping and filtering
      CASE
        WHEN t0.masthead = 'TA' THEN 'The Australian'
        WHEN t0.masthead = 'DT' THEN 'Daily Telegraph'
        WHEN t0.masthead = 'HS' THEN 'Herald Sun'
        WHEN t0.masthead = 'WT' THEN 'Weekly Times'
        WHEN t0.masthead = 'GA' THEN 'Geelong Advertiser'
        WHEN t0.masthead = 'CM' THEN 'Courier Mail'
        WHEN t0.masthead = 'CP' THEN 'Cairns Post'
        WHEN t0.masthead = 'TB' THEN 'Townsville Bulletin'
        WHEN t0.masthead = 'TC' THEN 'Toowoomba Chronicles'
        WHEN t0.masthead = 'GC' THEN 'Gold Coast'
        WHEN t0.masthead = 'TM' THEN 'The Mercury'
        WHEN t0.masthead = 'NT' THEN 'NT News'
        WHEN t0.masthead = 'AA' THEN 'The Advertiser'
        ELSE NULL
      END AS masthead_name,
      CASE
        WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT') THEN 'States and Community'
        WHEN t0.masthead = 'TA' THEN 'The Australian and Prestige'
        ELSE NULL
      END AS masthead_group_states_community,
      CASE
        WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro'
        WHEN t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT') THEN 'Regionals'
        ELSE NULL
      END AS masthead_group_metro_regionals
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
    WHERE
      -- Filter for recent data to optimize query cost and relevance
      t0.fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 -- Data from current and previous calendar year
  ),
  latest_fiscal_period AS (
    SELECT
      MAX(fy_year) AS latest_fy_year,
      MAX(fy_week_of_year) AS latest_fy_week
    FROM
      base_data
    WHERE
      fy_year = (SELECT MAX(fy_year) FROM base_data) -- Get latest week for the latest year
  )
SELECT
  bd.fy_year,
  bd.fy_week_of_year,
  bd.masthead,
  bd.masthead_name,
  bd.masthead_group_states_community,
  bd.masthead_group_metro_regionals,
  -- Current Period Metrics (from _V and base columns)
  SUM(SAFE_CAST(bd.Always_on_Digital_Sales_V AS NUMERIC)) AS Always_on_Digital_Sales_V,
  SUM(SAFE_CAST(bd.Breach_Sales_V AS NUMERIC)) AS Breach_Sales_V,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party_V AS NUMERIC)) AS Closing_Base_3rd_Party_V,
  SUM(SAFE_CAST(bd.Essentials_V AS NUMERIC)) AS Essentials_V,
  SUM(SAFE_CAST(bd.General_Offer_Sales_V AS NUMERIC)) AS General_Offer_Sales_V,
  SUM(SAFE_CAST(bd.Net_Cancels_V AS NUMERIC)) AS Net_Cancels_V,
  SUM(SAFE_CAST(bd.Net_Growth_3rd_Party_V AS NUMERIC)) AS Net_Growth_3rd_Party_V,
  SUM(SAFE_CAST(bd.Net_Growth_Consumer_V AS NUMERIC)) AS Net_Growth_Consumer_V,
  SUM(SAFE_CAST(bd.Net_Growth_incl_3rd_Party_V AS NUMERIC)) AS Net_Growth_incl_3rd_Party_V,
  SUM(SAFE_CAST(bd.Other_Sales_V AS NUMERIC)) AS Other_Sales_V,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party_V AS NUMERIC)) AS Revenue_3rd_Party_V,
  SUM(SAFE_CAST(bd.Revenue_Campus_V AS NUMERIC)) AS Revenue_Campus_V,
  SUM(SAFE_CAST(bd.Revenue_Consumer_V AS NUMERIC)) AS Revenue_Consumer_V,
  SUM(SAFE_CAST(bd.Revenue_Corp_V AS NUMERIC)) AS Revenue_Corp_V,
  SUM(SAFE_CAST(bd.Revenue_Other_V AS NUMERIC)) AS Revenue_Other_V,
  SUM(SAFE_CAST(bd.Switches_V AS NUMERIC)) AS Switches_V,
  SUM(SAFE_CAST(bd.Total_Cancels_excluding_3rd_Party_V AS NUMERIC)) AS Total_Cancels_excluding_3rd_Party_V,
  SUM(SAFE_CAST(bd.Total_Cancels_including_3rd_Party_V AS NUMERIC)) AS Total_Cancels_including_3rd_Party_V,
  SUM(SAFE_CAST(bd.Total_Closing_Base_V AS NUMERIC)) AS Total_Closing_Base_V,
  SUM(SAFE_CAST(bd.Total_Revenue_V AS NUMERIC)) AS Total_Revenue_V,
  SUM(SAFE_CAST(bd.Total_Weekly_Sales_V AS NUMERIC)) AS Total_Weekly_Sales_V,
  SUM(SAFE_CAST(bd.Always_on_Digital_Sales AS NUMERIC)) AS Always_on_Digital_Sales,
  SUM(SAFE_CAST(bd.Breach_Sales AS NUMERIC)) AS Breach_Sales,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party AS NUMERIC)) AS Closing_Base_3rd_Party,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party_APLS AS NUMERIC)) AS Closing_Base_3rd_Party_APLS,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party_GPLA AS NUMERIC)) AS Closing_Base_3rd_Party_GPLA,
  SUM(SAFE_CAST(bd.Closing_Base_Consumer AS NUMERIC)) AS Closing_Base_Consumer,
  SUM(SAFE_CAST(bd.Essentials AS NUMERIC)) AS Essentials,
  SUM(SAFE_CAST(bd.Failed_Payment_Volume AS NUMERIC)) AS Failed_Payment_Volume,
  SUM(SAFE_CAST(bd.General_Offer_Sales AS NUMERIC)) AS General_Offer_Sales,
  SUM(SAFE_CAST(bd.Net_Cancels AS NUMERIC)) AS Net_Cancels,
  SUM(SAFE_CAST(bd.Net_Growth_3rd_Party AS NUMERIC)) AS Net_Growth_3rd_Party,
  SUM(SAFE_CAST(bd.Net_Growth_3rd_Party_APLS AS NUMERIC)) AS Net_Growth_3rd_Party_APLS,
  SUM(SAFE_CAST(bd.Net_Growth_3rd_Party_GPLA AS NUMERIC)) AS Net_Growth_3rd_Party_GPLA,
  SUM(SAFE_CAST(bd.Net_Growth_Consumer AS NUMERIC)) AS Net_Growth_Consumer,
  SUM(SAFE_CAST(bd.Net_Growth_incl_3rd_Party AS NUMERIC)) AS Net_Growth_incl_3rd_Party,
  SUM(SAFE_CAST(bd.Other_Sales AS NUMERIC)) AS Other_Sales,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party AS NUMERIC)) AS Revenue_3rd_Party,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party_APLS AS NUMERIC)) AS Revenue_3rd_Party_APLS,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party_GPLA AS NUMERIC)) AS Revenue_3rd_Party_GPLA,
  SUM(SAFE_CAST(bd.Revenue_Campus AS NUMERIC)) AS Revenue_Campus,
  SUM(SAFE_CAST(bd.Revenue_Consumer AS NUMERIC)) AS Revenue_Consumer,
  SUM(SAFE_CAST(bd.Revenue_Corp AS NUMERIC)) AS Revenue_Corp,
  SUM(SAFE_CAST(bd.Revenue_Other AS NUMERIC)) AS Revenue_Other,
  SUM(SAFE_CAST(bd.Switches AS NUMERIC)) AS Switches,
  SUM(SAFE_CAST(bd.Total_Cancels_excluding_3rd_Party AS NUMERIC)) AS Total_Cancels_excluding_3rd_Party,
  SUM(SAFE_CAST(bd.Total_Cancels_including_3rd_Party AS NUMERIC)) AS Total_Cancels_including_3rd_Party,
  SUM(SAFE_CAST(bd.Total_Closing_Base AS NUMERIC)) AS Total_Closing_Base,
  SUM(SAFE_CAST(bd.Total_Revenue AS NUMERIC)) AS Total_Revenue,
  SUM(SAFE_CAST(bd.Total_Weekly_Sales AS NUMERIC)) AS Total_Weekly_Sales,
  -- 6-Week Rolling Metrics (from _6W columns)
  SUM(SAFE_CAST(bd.Always_on_Digital_Sales_6W AS NUMERIC)) AS Always_on_Digital_Sales_6W,
  SUM(SAFE_CAST(bd.Breach_Sales_6W AS NUMERIC)) AS Breach_Sales_6W,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party_6W AS NUMERIC)) AS Closing_Base_3rd_Party_6W,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party_APLS_6W AS NUMERIC)) AS Closing_Base_3rd_Party_APLS_6W,
  SUM(SAFE_CAST(bd.Closing_Base_3rd_Party_GPLA_6W AS NUMERIC)) AS Closing_Base_3rd_Party_GPLA_6W,
  SUM(SAFE_CAST(bd.Essentials_6W AS NUMERIC)) AS Essentials_6W,
  SUM(SAFE_CAST(bd.Failed_Payment_Volume_6W AS NUMERIC)) AS Failed_Payment_Volume_6W,
  SUM(SAFE_CAST(bd.General_Offer_Sales_6W AS NUMERIC)) AS General_Offer_Sales_6W,
  SUM(SAFE_CAST(bd.Net_Cancels_6W AS NUMERIC)) AS Net_Cancels_6W,
  SUM(SAFE_CAST(bd.Net_Growth_3rd_Party_6W AS NUMERIC)) AS Net_Growth_3rd_Party_6W,
  SUM(SAFE_CAST(bd.Net_Growth_Consumer_6W AS NUMERIC)) AS Net_Growth_Consumer_6W,
  SUM(SAFE_CAST(bd.Net_Growth_incl_3rd_party_6W AS NUMERIC)) AS Net_Growth_incl_3rd_party_6W,
  SUM(SAFE_CAST(bd.Other_Sales_6W AS NUMERIC)) AS Other_Sales_6W,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party_6W AS NUMERIC)) AS Revenue_3rd_Party_6W,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party_APLS_6W AS NUMERIC)) AS Revenue_3rd_Party_APLS_6W,
  SUM(SAFE_CAST(bd.Revenue_3rd_Party_GPLA_6W AS NUMERIC)) AS Revenue_3rd_Party_GPLA_6W,
  SUM(SAFE_CAST(bd.Revenue_Campus_6W AS NUMERIC)) AS Revenue_Campus_6W,
  SUM(SAFE_CAST(bd.Revenue_Consumer_6W AS NUMERIC)) AS Revenue_Consumer_6W,
  SUM(SAFE_CAST(bd.Revenue_Corp_6W AS NUMERIC)) AS Revenue_Corp_6W,
  SUM(SAFE_CAST(bd.Revenue_Other_6W AS NUMERIC)) AS Revenue_Other_6W,
  SUM(SAFE_CAST(bd.Switches_6W AS NUMERIC)) AS Switches_6W,
  SUM(SAFE_CAST(bd.Total_Cancels_excluding_3rd_Party_6W AS NUMERIC)) AS Total_Cancels_excluding_3rd_Party_6W,
  SUM(SAFE_CAST(bd.Total_Cancels_including_3rd_Party_6W AS NUMERIC)) AS Total_Cancels_including_3rd_Party_6W,
  SUM(SAFE_CAST(bd.Total_Closing_Base_6W AS NUMERIC)) AS Total_Closing_Base_6W,
  SUM(SAFE_CAST(bd.Total_Revenue_6W AS NUMERIC)) AS Total_Revenue_6W,
  SUM(SAFE_CAST(bd.Total_Weekly_Sales_6W AS NUMERIC)) AS Total_Weekly_Sales_6W
FROM
  base_data bd, latest_fiscal_period lfp
WHERE
  bd.fy_year = lfp.latest_fy_year
  AND bd.fy_week_of_year = lfp.latest_fy_week
GROUP BY
  bd.fy_year,
  bd.fy_week_of_year,
  bd.masthead,
  bd.masthead_name,
  bd.masthead_group_states_community,
  bd.masthead_group_metro_regionals
ORDER BY
  bd.fy_year DESC, bd.fy_week_of_year DESC
LIMIT 100;","SELECT 
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(fy_year AS STRING) || '-' || LPAD(SAFE_CAST(fy_week_of_year AS STRING), 2, '0')) as unique_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(masthead AS STRING)) as unique_mastheads,
  MIN(SAFE_CAST(fy_year AS STRING) || '-' || LPAD(SAFE_CAST(fy_week_of_year AS STRING), 2, '0')) as earliest_fiscal_week,
  MAX(SAFE_CAST(fy_year AS STRING) || '-' || LPAD(SAFE_CAST(fy_week_of_year AS STRING), 2, '0')) as latest_fiscal_week
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` 
WHERE fy_year >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Look at last 2 fiscal years for structure","SELECT 
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(Total_Revenue AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as total_revenue_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(masthead AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END as masthead_test,
  CASE WHEN MAX(fy_year) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 1 THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN SUM(SAFE_CAST(Total_Weekly_Sales AS NUMERIC)) >= 0 THEN 'PASS' ELSE 'FAIL' END as total_weekly_sales_non_negative_test
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`)
LIMIT 1","SELECT 
  'Business Rule Validation' as validation_type,
  'Masthead Mapping Consistency' as rule_name,
  COUNT(*) as records_tested,
  SUM(CASE 
        WHEN masthead = 'TA' AND masthead_name = 'The Australian' THEN 1 
        WHEN masthead = 'DT' AND masthead_name = 'Daily Telegraph' THEN 1
        -- Add more specific masthead checks as needed
        ELSE 0 END) as records_passing_masthead_name_rule,
  SUM(CASE 
        WHEN masthead IN ('CM', 'DT', 'HS', 'AA') AND masthead_group_metro_regionals = 'Metro' THEN 1 
        WHEN masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT') AND masthead_group_metro_regionals = 'Regionals' THEN 1
        ELSE 0 END) as records_passing_metro_regional_rule
FROM (
    SELECT
      t0.masthead,
      CASE
        WHEN t0.masthead = 'TA' THEN 'The Australian'
        WHEN t0.masthead = 'DT' THEN 'Daily Telegraph'
        WHEN t0.masthead = 'HS' THEN 'Herald Sun'
        WHEN t0.masthead = 'WT' THEN 'Weekly Times'
        WHEN t0.masthead = 'GA' THEN 'Geelong Advertiser'
        WHEN t0.masthead = 'CM' THEN 'Courier Mail'
        WHEN t0.masthead = 'CP' THEN 'Cairns Post'
        WHEN t0.masthead = 'TB' THEN 'Townsville Bulletin'
        WHEN t0.masthead = 'TC' THEN 'Toowoomba Chronicles'
        WHEN t0.masthead = 'GC' THEN 'Gold Coast'
        WHEN t0.masthead = 'TM' THEN 'The Mercury'
        WHEN t0.masthead = 'NT' THEN 'NT News'
        WHEN t0.masthead = 'AA' THEN 'The Advertiser'
        ELSE NULL
      END AS masthead_name,
      CASE
        WHEN t0.masthead IN ('CM', 'DT', 'HS', 'AA') THEN 'Metro'
        WHEN t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT') THEN 'Regionals'
        ELSE NULL
      END AS masthead_group_metro_regionals
    FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
    WHERE t0.fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`)
)
LIMIT 100000","SELECT 
  SAFE_CAST(fy_year AS INT64) as fiscal_year,
  SAFE_CAST(fy_week_of_year AS INT64) as fiscal_week_of_year,
  SAFE_CAST(masthead AS STRING) as masthead,
  SAFE_CAST(Total_Revenue AS NUMERIC) as total_revenue,
  SAFE_CAST(Total_Weekly_Sales AS NUMERIC) as total_weekly_sales,
  SAFE_CAST(Net_Growth_Consumer AS NUMERIC) as net_growth_consumer,
  SAFE_CAST(Revenue_Consumer AS NUMERIC) as revenue_consumer,
  SAFE_CAST(Total_Closing_Base AS NUMERIC) as total_closing_base
FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`
WHERE fy_year = (SELECT MAX(fy_year) FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard`)
ORDER BY fy_week_of_year DESC
LIMIT 500","{'hardcoded_dates': [{'date_value': '2025-03-30', 'original_format': '2025-03-30T00:00:00', 'context': ""Used as a 'current date' for week calculations in Query 1 and 2."", 'suggested_fix': 'Replace with `CURRENT_DATE()` or a dashboard date parameter.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024-07-03', 'original_format': '2024-07-03T00:00:00', 'context': 'Used as the fiscal year start reference date for `DATETIME_DIFF` week calculations across all queries.', 'suggested_fix': 'Parameterize as `fiscal_year_start_date` or derive dynamically from a fiscal calendar table.', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2025-02-10', 'original_format': '2025-02-10T00:00:00', 'context': ""Used as a 'current date' for week calculations in Query 3 (6-week rolling metrics)."", 'suggested_fix': 'Replace with `CURRENT_DATE()` or a dashboard date parameter, ensuring consistency with other date parameters.', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'TA'"", ""'DT'"", ""'HS'"", ""'WT'"", ""'GA'"", ""'CM'"", ""'CP'"", ""'TB'"", ""'TC'"", ""'GC'"", ""'TM'"", ""'NT'"", ""'AA'""], 'context': 'Masthead codes are hardcoded in `CASE` statements for mapping to full names and groups.', 'suggested_governance': 'Join to a `masthead_lookup` reference table for maintainability and consistency.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'States and Community'"", ""'The Australian and Prestige'"", ""'Metro'"", ""'Regionals'"", ""'All Mastheads'""], 'context': 'Masthead group names are hardcoded in `CASE` statements and filter logic.', 'suggested_governance': 'Manage these groupings in a reference table or configuration layer.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'thresholds', 'hardcoded_values': ['48', '49', '50', '51', '52'], 'context': 'Specific fiscal week numbers (48-52) are hardcoded for filtering in Query 3, likely for end-of-year or specific period analysis.', 'suggested_governance': 'Parameterize these week numbers or derive from a fiscal calendar table based on reporting period.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'business_rules', 'hardcoded_values': ['2025', '2024'], 'context': 'Fiscal years are hardcoded for filtering (`fy_year = 2025` or `fy_year = 2024`).', 'suggested_governance': 'Use a fiscal year parameter or derive from `CURRENT_DATE()` and fiscal calendar logic.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'placeholders', 'hardcoded_values': ['0 = 1', '0 = 2', '0 = 3', '0 = 4', '0 = 5'], 'context': ""Boolean conditions that always evaluate to false, likely remnants of Looker Studio's query generation for unused comparison periods."", 'suggested_governance': 'Review and remove dead code or ensure proper parameterization if intended for future use.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded dates with dashboard date parameters (e.g., `_DS_START_DATE`, `_DS_END_DATE`) or relative date functions (`CURRENT_DATE()`, `DATE_SUB`).', 'Externalize masthead mappings and groupings into a dedicated lookup table, joining to it instead of using `CASE` statements.', 'Parameterize fiscal year and specific fiscal week thresholds to allow dynamic reporting periods.', 'Consider a configuration table for complex business rules like the fiscal week calculation logic (day of week adjustment, base date for week diff).']",40,57d87efe-c112-4d42-be1b-045f0c8ca73e
"-- THIS IS THE MAIN SQL TO RUN for financial metrics, grouped by fiscal week.
-- Note: The 'Earliest Snapshot Load Time' metric is from a different data grain and source, and is not meaningfully combinable into this query.
WITH base_data AS (
  SELECT
    t0.amount AS amount,
    t0.fy_year_week_number AS fy_year_week_number,
    t0.revenue_type AS revenue_type,
    t0.volume AS volume
  FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
  -- Filter by a recent range of fiscal year-week numbers for cost optimization
  -- Assuming fy_year_week_number is in 'YYYYWW' format (e.g., '202352')
  WHERE SAFE_CAST(t0.fy_year_week_number AS STRING) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY))
)
SELECT
  fy_year_week_number,
  SUM(SAFE_CAST(amount AS NUMERIC)) AS total_amount,
  SUM(SAFE_CAST(volume AS NUMERIC)) AS total_volume,
  SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(revenue_type AS STRING), 2) = '03' THEN SAFE_CAST(amount AS NUMERIC) ELSE 0 END) AS amount_rev_type_03,
  SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(revenue_type AS STRING), 2) = '03' THEN SAFE_CAST(volume AS NUMERIC) ELSE 0 END) AS volume_rev_type_03
FROM base_data
GROUP BY fy_year_week_number
ORDER BY fy_year_week_number DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.fy_year_week_number AS STRING)) AS unique_fy_year_weeks,
  COUNT(DISTINCT SAFE_CAST(SAFE.LEFT(t0.revenue_type, 2) AS STRING)) AS unique_revenue_type_prefixes,
  MIN(SAFE_CAST(t0.fy_year_week_number AS STRING)) AS earliest_fy_year_week,
  MAX(SAFE_CAST(t0.fy_year_week_number AS STRING)) AS latest_fy_year_week,
  SUM(CASE WHEN t0.amount IS NULL THEN 1 ELSE 0 END) AS null_amount_count,
  SUM(CASE WHEN t0.volume IS NULL THEN 1 ELSE 0 END) AS null_volume_count,
  SUM(CASE WHEN t0.revenue_type IS NULL THEN 1 ELSE 0 END) AS null_revenue_type_count
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE SAFE_CAST(t0.fy_year_week_number AS STRING) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY))
LIMIT 1;","SELECT
  'Validation Check' AS test_type,
  CASE WHEN SUM(SAFE_CAST(t0.amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END AS total_amount_positive_test,
  CASE WHEN SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(t0.revenue_type AS STRING), 2) = '03' THEN SAFE_CAST(t0.amount AS NUMERIC) ELSE 0 END) > 0 THEN 'PASS' ELSE 'FAIL' END AS amount_rev_type_03_positive_test,
  CASE WHEN COUNT(DISTINCT SAFE_CAST(t0.fy_year_week_number AS STRING)) > 0 THEN 'PASS' ELSE 'FAIL' END AS fy_year_week_data_exists_test,
  CASE WHEN MAX(SAFE_CAST(t0.fy_year_week_number AS STRING)) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY)) THEN 'PASS' ELSE 'FAIL' END AS data_freshness_test
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE SAFE_CAST(t0.fy_year_week_number AS STRING) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY))
LIMIT 1;","SELECT
  'Business Rule Validation' AS validation_type,
  'revenue_type_03_logic' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(t0.revenue_type AS STRING), 2) = '03' THEN 1 ELSE 0 END) AS records_matching_03_prefix,
  SAFE_DIVIDE(SUM(CASE WHEN SAFE.LEFT(SAFE_CAST(t0.revenue_type AS STRING), 2) = '03' THEN 1 ELSE 0 END), COUNT(*)) * 100 AS percentage_matching_03_prefix
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE SAFE_CAST(t0.fy_year_week_number AS STRING) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY))
LIMIT 1;","SELECT
  SAFE_CAST(t0.amount AS NUMERIC) AS amount,
  SAFE_CAST(t0.fy_year_week_number AS STRING) AS fy_year_week_number,
  SAFE_CAST(t0.revenue_type AS STRING) AS revenue_type,
  SAFE_CAST(t0.volume AS NUMERIC) AS volume
FROM `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE SAFE_CAST(t0.fy_year_week_number AS STRING) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY))
ORDER BY SAFE_CAST(t0.fy_year_week_number AS STRING) DESC, SAFE_CAST(t0.amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'03'""], 'context': 'Revenue type prefix used in CASE statement to filter amount and volume.', 'suggested_governance': 'Join to a `revenue_type_master` or `chart_of_accounts` table to get descriptive names and manage categories centrally.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Circulation'"", ""'Estimate'"", ""'RCTI'"", ""'THINK'"", ""'DTI'""], 'context': 'Source system names, scenario, and sub-source system names used in WHERE clause for snapshot load time.', 'suggested_governance': 'Manage these values in a `system_config` or `source_system_master` table and join/parameterize.', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'timezone', 'hardcoded_values': [""'Australia/Sydney'""], 'context': 'Timezone hardcoded in DATETIME function for snapshot load time.', 'suggested_governance': 'Parameterize the timezone or use a global configuration variable.', 'impact': 'low', 'maintenance_risk': 'low'}]}","[""Replace hardcoded date range filters (e.g., `FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY))`) with dashboard date parameters."", ""Replace hardcoded lookup values (e.g., '03', 'Circulation') with joins to governed reference tables or dashboard parameters."", 'Use configuration tables for business rules (like revenue type categorization) instead of hardcoded logic within queries.']",41,f7a9efeb-df3c-45c9-899d-0bcada701572
"WITH base_data AS (
  SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2,
    t0.offer_category_group_name,
    t0.offer_category_name
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
  WHERE t0.fy_year = 2025 -- Hardcoded year from queries
  LIMIT 1000000 -- Limit for sampling in primary_analysis_sql
),
derived_dimensions_step1 AS (
  SELECT
    fy_year,
    fy_week_of_year,
    masthead,
    sold_in_source_code,
    subscriber_has_email_flag,
    table_nm,
    classification_level_2,
    offer_category_group_name,
    offer_category_name,
    -- Derived: Delivery Type
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_type,
    -- Derived: Masthead Group
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS masthead_group,
    -- Derived: Masthead Category
    CASE
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
      WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
      WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
      WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
      ELSE 'Exclude'
    END AS masthead_category,
    -- Derived: Source Code String (cleaned)
    LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))) AS sold_in_source_code_cleaned,
    -- Derived: Source Code Suffix (3-char)
    SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3) AS source_code_suffix_3char,
    -- Derived: Source Code Suffix (4-char)
    SAFE.RIGHT(SAFE_CAST(sold_in_source_code AS STRING), 4) AS source_code_suffix_4char,
    -- Derived: Delivery Medium Email Flag Combo
    CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) AS delivery_email_flag_combo,
    -- Derived: Classification Level 2 Group (from classification_level_2)
    CASE
      WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
      WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
      WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
      WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
      WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
      WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
      ELSE NULL
    END AS classification_level_2_group
  FROM base_data
),
derived_dimensions_step2 AS (
  SELECT
    *,
    -- Derived: Subscription Type
    CASE
      WHEN (delivery_email_flag_combo IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_type,
    -- Derived: Customer Type (B2C/B2B)
    CASE
      WHEN (classification_level_2_group IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
      WHEN (classification_level_2_group IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
      ELSE 'Others'
    END AS customer_type_b2c_b2b,
    -- Derived: Acquisition Channel (complex logic)
    CASE
      WHEN (STRPOS(source_code_suffix_3char, '_AB') > 0) THEN 'Above the Fold'
      WHEN (STRPOS(source_code_suffix_3char, '_BB') > 0) THEN 'Blackbook'
      WHEN (STRPOS(source_code_suffix_3char, '_CF') > 0) THEN 'Community Form'
      WHEN (STRPOS(source_code_suffix_3char, '_CS') > 0) THEN 'Closing Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_FA') > 0) THEN 'Free Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_FF') > 0) THEN 'Form Finder'
      WHEN (STRPOS(source_code_suffix_3char, '_NA') > 0) THEN 'News Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_PC') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, '_PE') > 0) THEN 'Punters Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_SL') > 0) THEN 'Shortlist'
      WHEN (STRPOS(source_code_suffix_3char, '_SS') > 0) THEN 'Setting Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_TE') > 0) THEN 'Tippers Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_TH') > 0) THEN 'Todays Headlines'
      WHEN (STRPOS(source_code_suffix_3char, '_TO') > 0) THEN 'The Oz'
      WHEN (STRPOS(source_code_suffix_3char, '_WS') > 0) THEN 'Why Subscribe'
      WHEN (STRPOS(source_code_suffix_4char, 'PRED') > 0) THEN 'Predictor'
      WHEN (STRPOS(source_code_suffix_3char, 'AMP') > 0) THEN 'Google AMP'
      WHEN (STRPOS(source_code_suffix_3char, 'FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(source_code_suffix_3char, 'FMB') > 0) THEN 'Facebook Messenger Bot'
      WHEN (STRPOS(source_code_suffix_3char, 'GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'GGN') > 0) THEN 'Google News'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(source_code_suffix_3char, 'LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(source_code_suffix_3char, 'NEW') > 0) THEN 'news.com.au'
      WHEN (STRPOS(source_code_suffix_3char, 'NWL') > 0) THEN 'Newsletter'
      WHEN (STRPOS(source_code_suffix_3char, 'POD') > 0) THEN 'Podcasts'
      WHEN (STRPOS(source_code_suffix_3char, 'POR') > 0) THEN 'Newsletter Sports'
      WHEN (STRPOS(source_code_suffix_3char, 'RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(source_code_suffix_3char, 'SCP') > 0) THEN 'Supercoach Plus'
      WHEN (STRPOS(source_code_suffix_3char, 'SEC') > 0) THEN 'Sectionals'
      WHEN (STRPOS(source_code_suffix_3char, 'TCA') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TMP') > 0) THEN 'Tips Mrket Place'
      WHEN (STRPOS(source_code_suffix_3char, 'TWA') > 0) THEN 'The Weekend Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TWT') > 0) THEN 'Twitter'
      WHEN (STRPOS(source_code_suffix_3char, 'WID') > 0) THEN 'Widget'
      WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
      ELSE NULL
    END AS acquisition_channel
  FROM derived_dimensions_step1
)
SELECT
  fy_year,
  fy_week_of_year,
  masthead,
  offer_category_group_name,
  offer_category_name,
  delivery_type,
  masthead_group,
  masthead_category,
  subscription_type,
  customer_type_b2c_b2b,
  acquisition_channel,
  COUNT(1) AS acquisitions_count
FROM derived_dimensions_step2
WHERE
  masthead_group != 'Exclude'
  AND subscription_type = 'Digital Subscriptions'
  AND table_nm != 'op'
  AND acquisition_channel IS NOT NULL
  AND masthead_category = 'The Australian and Prestige'
  AND fy_year = 2025
  AND customer_type_b2c_b2b IN ('B2C', '') -- This filter is present in Q2 and Q3
GROUP BY
  fy_year,
  fy_week_of_year,
  masthead,
  offer_category_group_name,
  offer_category_name,
  delivery_type,
  masthead_group,
  masthead_category,
  subscription_type,
  customer_type_b2c_b2b,
  acquisition_channel
ORDER BY
  fy_year DESC, fy_week_of_year DESC, acquisitions_count DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.fy_year AS INT64)) as unique_fiscal_years,
  COUNT(DISTINCT SAFE_CAST(t0.fy_week_of_year AS INT64)) as unique_fiscal_weeks_of_year,
  COUNT(DISTINCT SAFE_CAST(t0.masthead AS STRING)) as unique_mastheads,
  COUNT(DISTINCT SAFE_CAST(t0.sold_in_source_code AS STRING)) as unique_sold_in_source_codes,
  COUNT(DISTINCT SAFE_CAST(t0.delivery_medium_type AS STRING)) as unique_delivery_medium_types,
  COUNT(DISTINCT SAFE_CAST(t0.classification_level_2 AS STRING)) as unique_classification_level_2,
  COUNT(DISTINCT SAFE_CAST(t0.offer_category_group_name AS STRING)) as unique_offer_category_groups,
  COUNT(DISTINCT SAFE_CAST(t0.offer_category_name AS STRING)) as unique_offer_category_names,
  COUNT(DISTINCT SAFE_CAST(t0.table_nm AS STRING)) as unique_table_names,
  MIN(SAFE_CAST(t0.fy_year AS INT64)) as earliest_fy_year,
  MAX(SAFE_CAST(t0.fy_year AS INT64)) as latest_fy_year
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
WHERE t0.fy_year >= 2020 -- Look at a broader range for structure analysis
LIMIT 10000;","WITH base_data AS (
  SELECT
    t0.fy_year,
    t0.masthead,
    t0.sold_in_source_code,
    t0.delivery_medium_type,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
  WHERE t0.fy_year = 2025 -- Focus on the year of interest
  LIMIT 100000 -- Sample for validation
),
derived_dims AS (
  SELECT
    *,
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_type,
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS masthead_group,
    CASE
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
      WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
      WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
      WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
      ELSE 'Exclude'
    END AS masthead_category,
    CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) AS delivery_email_flag_combo,
    SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3) AS source_code_suffix_3char,
    SAFE.RIGHT(SAFE_CAST(sold_in_source_code AS STRING), 4) AS source_code_suffix_4char,
    CASE
      WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
      WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
      WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
      WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
      WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
      WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
      ELSE NULL
    END AS classification_level_2_group
  FROM base_data
),
final_dims AS (
  SELECT
    *,
    CASE
      WHEN (delivery_email_flag_combo IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_type,
    CASE
      WHEN (classification_level_2_group IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
      WHEN (classification_level_2_group IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
      ELSE 'Others'
    END AS customer_type_b2c_b2b,
    CASE
      WHEN (STRPOS(source_code_suffix_3char, '_AB') > 0) THEN 'Above the Fold'
      WHEN (STRPOS(source_code_suffix_3char, '_BB') > 0) THEN 'Blackbook'
      WHEN (STRPOS(source_code_suffix_3char, '_CF') > 0) THEN 'Community Form'
      WHEN (STRPOS(source_code_suffix_3char, '_CS') > 0) THEN 'Closing Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_FA') > 0) THEN 'Free Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_FF') > 0) THEN 'Form Finder'
      WHEN (STRPOS(source_code_suffix_3char, '_NA') > 0) THEN 'News Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_PC') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, '_PE') > 0) THEN 'Punters Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_SL') > 0) THEN 'Shortlist'
      WHEN (STRPOS(source_code_suffix_3char, '_SS') > 0) THEN 'Setting Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_TE') > 0) THEN 'Tippers Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_TH') > 0) THEN 'Todays Headlines'
      WHEN (STRPOS(source_code_suffix_3char, '_TO') > 0) THEN 'The Oz'
      WHEN (STRPOS(source_code_suffix_3char, '_WS') > 0) THEN 'Why Subscribe'
      WHEN (STRPOS(source_code_suffix_4char, 'PRED') > 0) THEN 'Predictor'
      WHEN (STRPOS(source_code_suffix_3char, 'AMP') > 0) THEN 'Google AMP'
      WHEN (STRPOS(source_code_suffix_3char, 'FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(source_code_suffix_3char, 'FMB') > 0) THEN 'Facebook Messenger Bot'
      WHEN (STRPOS(source_code_suffix_3char, 'GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'GGN') > 0) THEN 'Google News'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(source_code_suffix_3char, 'LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(source_code_suffix_3char, 'NEW') > 0) THEN 'news.com.au'
      WHEN (STRPOS(source_code_suffix_3char, 'NWL') > 0) THEN 'Newsletter'
      WHEN (STRPOS(source_code_suffix_3char, 'POD') > 0) THEN 'Podcasts'
      WHEN (STRPOS(source_code_suffix_3char, 'POR') > 0) THEN 'Newsletter Sports'
      WHEN (STRPOS(source_code_suffix_3char, 'RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(source_code_suffix_3char, 'SCP') > 0) THEN 'Supercoach Plus'
      WHEN (STRPOS(source_code_suffix_3char, 'SEC') > 0) THEN 'Sectionals'
      WHEN (STRPOS(source_code_suffix_3char, 'TCA') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TMP') > 0) THEN 'Tips Mrket Place'
      WHEN (STRPOS(source_code_suffix_3char, 'TWA') > 0) THEN 'The Weekend Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TWT') > 0) THEN 'Twitter'
      WHEN (STRPOS(source_code_suffix_3char, 'WID') > 0) THEN 'Widget'
      WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
      ELSE NULL
    END AS acquisition_channel
  FROM derived_dims
)
SELECT
  'Validation Check' as test_type,
  COUNT(*) as total_records_processed,
  SUM(CASE WHEN masthead_group != 'Exclude' THEN 1 ELSE 0 END) as records_not_excluded_by_masthead,
  SUM(CASE WHEN subscription_type = 'Digital Subscriptions' THEN 1 ELSE 0 END) as records_digital_subscriptions,
  SUM(CASE WHEN table_nm != 'op' THEN 1 ELSE 0 END) as records_not_op,
  SUM(CASE WHEN acquisition_channel IS NOT NULL THEN 1 ELSE 0 END) as records_with_channel,
  SUM(CASE WHEN masthead_category = 'The Australian and Prestige' THEN 1 ELSE 0 END) as records_the_australian_prestige,
  SUM(CASE WHEN fy_year = 2025 THEN 1 ELSE 0 END) as records_fy2025,
  SUM(CASE WHEN customer_type_b2c_b2b IN ('B2C', '') THEN 1 ELSE 0 END) as records_b2c_customer_type,
  COUNT(CASE WHEN masthead_group = 'Exclude' THEN 1 END) as excluded_masthead_count,
  COUNT(CASE WHEN acquisition_channel IS NULL THEN 1 END) as null_acquisition_channel_count
FROM final_dims
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.masthead,
    t0.sold_in_source_code,
    t0.delivery_medium_type,
    t0.subscriber_has_email_flag,
    t0.classification_level_2
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
  WHERE t0.fy_year = 2025 -- Focus on the year of interest
  LIMIT 100000 -- Sample for business rules validation
),
derived_dims AS (
  SELECT
    *,
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_type,
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS masthead_group,
    CASE
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
      WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
      WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
      WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
      ELSE 'Exclude'
    END AS masthead_category,
    CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) AS delivery_email_flag_combo,
    LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))) AS sold_in_source_code_cleaned,
    SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3) AS source_code_suffix_3char,
    SAFE.RIGHT(SAFE_CAST(sold_in_source_code AS STRING), 4) AS source_code_suffix_4char,
    CASE
      WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
      WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
      WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
      WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
      WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
      WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
      ELSE NULL
    END AS classification_level_2_group
),
final_dims AS (
  SELECT
    *,
    CASE
      WHEN (delivery_email_flag_combo IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_type,
    CASE
      WHEN (classification_level_2_group IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
      WHEN (classification_level_2_group IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
      ELSE 'Others'
    END AS customer_type_b2c_b2b,
    CASE
      WHEN (STRPOS(source_code_suffix_3char, '_AB') > 0) THEN 'Above the Fold'
      WHEN (STRPOS(source_code_suffix_3char, '_BB') > 0) THEN 'Blackbook'
      WHEN (STRPOS(source_code_suffix_3char, '_CF') > 0) THEN 'Community Form'
      WHEN (STRPOS(source_code_suffix_3char, '_CS') > 0) THEN 'Closing Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_FA') > 0) THEN 'Free Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_FF') > 0) THEN 'Form Finder'
      WHEN (STRPOS(source_code_suffix_3char, '_NA') > 0) THEN 'News Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_PC') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, '_PE') > 0) THEN 'Punters Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_SL') > 0) THEN 'Shortlist'
      WHEN (STRPOS(source_code_suffix_3char, '_SS') > 0) THEN 'Setting Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_TE') > 0) THEN 'Tippers Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_TH') > 0) THEN 'Todays Headlines'
      WHEN (STRPOS(source_code_suffix_3char, '_TO') > 0) THEN 'The Oz'
      WHEN (STRPOS(source_code_suffix_3char, '_WS') > 0) THEN 'Why Subscribe'
      WHEN (STRPOS(source_code_suffix_4char, 'PRED') > 0) THEN 'Predictor'
      WHEN (STRPOS(source_code_suffix_3char, 'AMP') > 0) THEN 'Google AMP'
      WHEN (STRPOS(source_code_suffix_3char, 'FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(source_code_suffix_3char, 'FMB') > 0) THEN 'Facebook Messenger Bot'
      WHEN (STRPOS(source_code_suffix_3char, 'GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'GGN') > 0) THEN 'Google News'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(source_code_suffix_3char, 'LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(source_code_suffix_3char, 'NEW') > 0) THEN 'news.com.au'
      WHEN (STRPOS(source_code_suffix_3char, 'NWL') > 0) THEN 'Newsletter'
      WHEN (STRPOS(source_code_suffix_3char, 'POD') > 0) THEN 'Podcasts'
      WHEN (STRPOS(source_code_suffix_3char, 'POR') > 0) THEN 'Newsletter Sports'
      WHEN (STRPOS(source_code_suffix_3char, 'RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(source_code_suffix_3char, 'SCP') > 0) THEN 'Supercoach Plus'
      WHEN (STRPOS(source_code_suffix_3char, 'SEC') > 0) THEN 'Sectionals'
      WHEN (STRPOS(source_code_suffix_3char, 'TCA') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TMP') > 0) THEN 'Tips Mrket Place'
      WHEN (STRPOS(source_code_suffix_3char, 'TWA') > 0) THEN 'The Weekend Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TWT') > 0) THEN 'Twitter'
      WHEN (STRPOS(source_code_suffix_3char, 'WID') > 0) THEN 'Widget'
      WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
      ELSE NULL
    END AS acquisition_channel
  FROM derived_dims
)
SELECT
  'Business Rule Validation' as validation_type,
  'Acquisition Channel Mapping' as rule_name,
  COUNT(*) as total_records,
  COUNT(DISTINCT acquisition_channel) as distinct_channels_identified,
  COUNT(CASE WHEN acquisition_channel IS NULL THEN 1 END) as null_channels_count,
  ARRAY_AGG(DISTINCT acquisition_channel IGNORE NULLS ORDER BY acquisition_channel LIMIT 10) as sample_channels,
  ARRAY_AGG(DISTINCT masthead_group IGNORE NULLS ORDER BY masthead_group LIMIT 10) as sample_masthead_groups,
  ARRAY_AGG(DISTINCT masthead_category IGNORE NULLS ORDER BY masthead_category LIMIT 10) as sample_masthead_categories,
  ARRAY_AGG(DISTINCT subscription_type IGNORE NULLS ORDER BY subscription_type LIMIT 10) as sample_subscription_types,
  ARRAY_AGG(DISTINCT customer_type_b2c_b2b IGNORE NULLS ORDER BY customer_type_b2c_b2b LIMIT 10) as sample_customer_types
FROM final_dims
LIMIT 1;","WITH base_data AS (
  SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2,
    t0.offer_category_group_name,
    t0.offer_category_name
  FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
  WHERE t0.fy_year = 2025 -- Focus on the year of interest
  LIMIT 5000 -- Larger sample for data exploration
),
derived_dims AS (
  SELECT
    *,
    CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_type,
    CASE
      WHEN (masthead = 'TA') THEN 'The Australian'
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
      WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
      WHEN (masthead = 'WT') THEN 'Other Publications'
      WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
      WHEN (masthead IS NULL) THEN 'check'
      ELSE 'Exclude'
    END AS masthead_group,
    CASE
      WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
      WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
      WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
      WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
      ELSE 'Exclude'
    END AS masthead_category,
    CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) AS delivery_email_flag_combo,
    LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))) AS sold_in_source_code_cleaned,
    SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3) AS source_code_suffix_3char,
    SAFE.RIGHT(SAFE_CAST(sold_in_source_code AS STRING), 4) AS source_code_suffix_4char,
    CASE
      WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
      WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
      WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
      WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
      WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
      WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
      ELSE NULL
    END AS classification_level_2_group
),
final_dims AS (
  SELECT
    *,
    CASE
      WHEN (delivery_email_flag_combo IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
      ELSE 'Print Subscriptions'
    END AS subscription_type,
    CASE
      WHEN (classification_level_2_group IN ('Consumer', 'Gift Receiver')) THEN 'B2C'
      WHEN (classification_level_2_group IN ('Campus', 'Corporate', 'Corporate excluding IP', 'Corporate IP', 'IP Access', 'SMB')) THEN 'B2B'
      ELSE 'Others'
    END AS customer_type_b2c_b2b,
    CASE
      WHEN (STRPOS(source_code_suffix_3char, '_AB') > 0) THEN 'Above the Fold'
      WHEN (STRPOS(source_code_suffix_3char, '_BB') > 0) THEN 'Blackbook'
      WHEN (STRPOS(source_code_suffix_3char, '_CF') > 0) THEN 'Community Form'
      WHEN (STRPOS(source_code_suffix_3char, '_CS') > 0) THEN 'Closing Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_FA') > 0) THEN 'Free Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_FF') > 0) THEN 'Form Finder'
      WHEN (STRPOS(source_code_suffix_3char, '_NA') > 0) THEN 'News Articles'
      WHEN (STRPOS(source_code_suffix_3char, '_PC') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, '_PE') > 0) THEN 'Punters Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_SL') > 0) THEN 'Shortlist'
      WHEN (STRPOS(source_code_suffix_3char, '_SS') > 0) THEN 'Setting Speed'
      WHEN (STRPOS(source_code_suffix_3char, '_TE') > 0) THEN 'Tippers Edge'
      WHEN (STRPOS(source_code_suffix_3char, '_TH') > 0) THEN 'Todays Headlines'
      WHEN (STRPOS(source_code_suffix_3char, '_TO') > 0) THEN 'The Oz'
      WHEN (STRPOS(source_code_suffix_3char, '_WS') > 0) THEN 'Why Subscribe'
      WHEN (STRPOS(source_code_suffix_4char, 'PRED') > 0) THEN 'Predictor'
      WHEN (STRPOS(source_code_suffix_3char, 'AMP') > 0) THEN 'Google AMP'
      WHEN (STRPOS(source_code_suffix_3char, 'FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(source_code_suffix_3char, 'FMB') > 0) THEN 'Facebook Messenger Bot'
      WHEN (STRPOS(source_code_suffix_3char, 'GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'GGN') > 0) THEN 'Google News'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(source_code_suffix_3char, 'LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(source_code_suffix_3char, 'NEW') > 0) THEN 'news.com.au'
      WHEN (STRPOS(source_code_suffix_3char, 'NWL') > 0) THEN 'Newsletter'
      WHEN (STRPOS(source_code_suffix_3char, 'POD') > 0) THEN 'Podcasts'
      WHEN (STRPOS(source_code_suffix_3char, 'POR') > 0) THEN 'Newsletter Sports'
      WHEN (STRPOS(source_code_suffix_3char, 'RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(source_code_suffix_3char, 'SCP') > 0) THEN 'Supercoach Plus'
      WHEN (STRPOS(source_code_suffix_3char, 'SEC') > 0) THEN 'Sectionals'
      WHEN (STRPOS(source_code_suffix_3char, 'TCA') > 0) THEN 'True Crime Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TMP') > 0) THEN 'Tips Mrket Place'
      WHEN (STRPOS(source_code_suffix_3char, 'TWA') > 0) THEN 'The Weekend Aus'
      WHEN (STRPOS(source_code_suffix_3char, 'TWT') > 0) THEN 'Twitter'
      WHEN (STRPOS(source_code_suffix_3char, 'WID') > 0) THEN 'Widget'
      WHEN (STRPOS(sold_in_source_code, '_FBK') > 0) THEN 'Facebook'
      WHEN (STRPOS(sold_in_source_code, '_GGL') > 0) THEN 'Google'
      WHEN (STRPOS(source_code_suffix_3char, 'INS') > 0) THEN 'Instagram'
      WHEN (STRPOS(sold_in_source_code, '_LIN') > 0) THEN 'Linked In'
      WHEN (STRPOS(sold_in_source_code, '_RED') > 0) THEN 'Reddit'
      WHEN (STRPOS(sold_in_source_code, '_TWT') > 0) THEN 'Twitter'
      ELSE NULL
    END AS acquisition_channel
  FROM derived_dims
)
SELECT
  fy_year,
  fy_week_of_year,
  masthead,
  sold_in_source_code,
  delivery_medium_type,
  subscriber_has_email_flag,
  table_nm,
  classification_level_2,
  offer_category_group_name,
  offer_category_name,
  delivery_type,
  masthead_group,
  masthead_category,
  subscription_type,
  customer_type_b2c_b2b,
  acquisition_channel
FROM final_dims
WHERE
  masthead_group != 'Exclude'
  AND subscription_type = 'Digital Subscriptions'
  AND table_nm != 'op'
  AND acquisition_channel IS NOT NULL
  AND masthead_category = 'The Australian and Prestige'
  AND fy_year = 2025
  AND customer_type_b2c_b2b IN ('B2C', '')
ORDER BY fy_year DESC, fy_week_of_year DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'Fiscal year filter in all queries', 'suggested_fix': 'replace with a parameter or a dynamic fiscal year calculation (e.g., based on CURRENT_DATE())', 'impact': 'high', 'urgency': 'high'}], 'hardcoded_variables': [{'variable_type': 'lookup_codes', 'hardcoded_values': [""'Not Available'"", ""'TA'"", ""'CM'"", ""'Digital Subscriptions'"", ""'Print Subscriptions'"", ""'B2C'"", ""'B2B'"", ""'Consumer'"", ""'Campus'"", ""'Corporate'"", ""'Free Staff'"", ""'IP Access'"", ""'Education'"", ""'Above the Fold'"", ""'Facebook'"", ""'Google'"", ""'Instagram'"", ""'Linked In'"", ""'Reddit'"", ""'Twitter'"", ""'op'""], 'context': 'Used extensively in CASE statements for deriving dimensions (Delivery Type, Masthead Group, Masthead Category, Subscription Type, Customer Type, Acquisition Channel) and in WHERE clauses.', 'suggested_governance': 'Create and join to dedicated lookup tables for masthead codes, source codes, classification levels, and delivery medium types. This centralizes business logic and simplifies maintenance.', 'impact': 'high', 'maintenance_risk': 'high'}]}","['Replace hardcoded fiscal year (2025) with a dashboard parameter or a dynamic calculation (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())` or a custom fiscal year function).', 'Externalize all hardcoded lookup values (e.g., masthead codes, source code prefixes/suffixes, classification levels, delivery medium types) into dedicated BigQuery lookup tables. Queries should then join to these tables to derive descriptive names and categories.', ""Consider creating a configuration table for the `table_nm != 'op'` filter if 'op' is a business-defined exclusion that might change.""]",42,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
"WITH base_data AS (
  SELECT
    t0.data_load_datetime,
    t0.financial_short_month,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year_str, -- Cast for consistent comparison with string literals
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.cost_model_type,
    t0.advertiser_name,
    t0.gross_revenue_amount,
    t0.revenue_group_subtype,
    t0.revenue_type_level2,
    t0.source_system_code
  FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
  WHERE
    SAFE_CAST(t0.financial_year AS STRING) = '2025' -- Common hardcoded year
    AND t0.source_publishing_division != 'Medium Rare Content Agency' -- Common exclusion
    AND t0.revenue_transaction_status IN ('Billed', 'Booked') -- Common status filter
    AND t0.financial_year IS NOT NULL -- Explicitly check for non-null financial year
)
SELECT
  DATETIME_TRUNC(data_load_datetime, SECOND) AS data_load_datetime_truncated,
  financial_short_month,
  financial_year_str AS financial_year,
  revenue_transaction_status,
  source_publishing_division,
  cost_model_type,
  advertiser_name,
  revenue_group_subtype,
  revenue_type_level2,
  source_system_code,
  SUM(SAFE_CAST(gross_revenue_amount AS NUMERIC)) AS total_gross_revenue_amount,
  COUNT(DISTINCT advertiser_name) AS unique_advertisers,
  COUNT(DISTINCT source_system_code) AS unique_source_systems
FROM base_data
GROUP BY
  data_load_datetime_truncated,
  financial_short_month,
  financial_year,
  revenue_transaction_status,
  source_publishing_division,
  cost_model_type,
  advertiser_name,
  revenue_group_subtype,
  revenue_type_level2,
  source_system_code
ORDER BY
  data_load_datetime_truncated DESC
LIMIT 1000;","SELECT
  'Data Structure Analysis' as analysis_type,
  COUNT(*) as total_records,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS STRING)) as unique_financial_years,
  COUNT(DISTINCT t0.financial_short_month) as unique_financial_months,
  COUNT(DISTINCT t0.source_publishing_division) as unique_publishing_divisions,
  COUNT(DISTINCT t0.revenue_transaction_status) as unique_transaction_statuses,
  COUNT(DISTINCT t0.cost_model_type) as unique_cost_models,
  COUNT(DISTINCT t0.advertiser_name) as unique_advertisers,
  COUNT(DISTINCT t0.revenue_group_subtype) as unique_revenue_subtypes,
  COUNT(DISTINCT t0.revenue_type_level2) as unique_revenue_level2_types,
  COUNT(DISTINCT t0.source_system_code) as unique_source_system_codes,
  MIN(t0.data_load_datetime) as earliest_data_load_datetime,
  MAX(t0.data_load_datetime) as latest_data_load_datetime,
  AVG(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) as avg_gross_revenue_amount,
  SUM(CASE WHEN t0.gross_revenue_amount IS NULL THEN 1 ELSE 0 END) as null_gross_revenue_amount_count
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) = '2025' -- Focus on the year of interest
  AND t0.data_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY) -- Add a recent data filter for structure analysis
LIMIT 1000;","SELECT
  'Validation Check' as test_type,
  CASE WHEN SUM(SAFE_CAST(t0.gross_revenue_amount AS NUMERIC)) > 0 THEN 'PASS' ELSE 'FAIL' END as revenue_positive_test,
  CASE WHEN COUNT(DISTINCT t0.advertiser_name) > 0 THEN 'PASS' ELSE 'FAIL' END as advertiser_present_test,
  CASE WHEN MAX(t0.data_load_datetime) >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 7 DAY) THEN 'PASS' ELSE 'FAIL' END as freshness_test,
  CASE WHEN COUNT(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as transaction_status_test,
  CASE WHEN COUNT(CASE WHEN SAFE_CAST(t0.financial_year AS STRING) = '2025' THEN 1 END) > 0 THEN 'PASS' ELSE 'FAIL' END as financial_year_2025_test
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) = '2025' -- Focus on the year of interest
  AND t0.data_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY) -- Recent data for validation
LIMIT 1;","SELECT
  'Business Rule Validation' as validation_type,
  'source_publishing_division_exclusion' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END) as records_passing_exclusion,
  SAFE_DIVIDE(SUM(CASE WHEN t0.source_publishing_division != 'Medium Rare Content Agency' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_exclusion
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) = '2025'
  AND t0.data_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY)

UNION ALL

SELECT
  'Business Rule Validation' as validation_type,
  'revenue_transaction_status_inclusion' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END) as records_passing_inclusion,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_transaction_status IN ('Billed', 'Booked') THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_inclusion
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) = '2025'
  AND t0.data_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY)

UNION ALL

SELECT
  'Business Rule Validation' as validation_type,
  'programmatic_revenue_filters' as rule_name,
  COUNT(*) as total_records_evaluated,
  SUM(CASE WHEN t0.revenue_type_level2 = 'Programmatic'
            AND t0.revenue_group_subtype IN ('Programmatic Source', 'Digital')
            AND t0.advertiser_name = 'Foxtel Management Pty Ltd'
            AND t0.source_system_code = 'PLUTO' THEN 1 ELSE 0 END) as records_passing_programmatic_filters,
  SAFE_DIVIDE(SUM(CASE WHEN t0.revenue_type_level2 = 'Programmatic'
            AND t0.revenue_group_subtype IN ('Programmatic Source', 'Digital')
            AND t0.advertiser_name = 'Foxtel Management Pty Ltd'
            AND t0.source_system_code = 'PLUTO' THEN 1 ELSE 0 END), COUNT(*)) * 100 as pass_rate_percentage_programmatic_filters
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) = '2025'
  AND t0.data_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY);","SELECT
  t0.data_load_datetime,
  t0.financial_short_month,
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  t0.revenue_transaction_status,
  t0.source_publishing_division,
  t0.cost_model_type,
  t0.advertiser_name,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  t0.revenue_group_subtype,
  t0.revenue_type_level2,
  t0.source_system_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) = '2025'
  AND t0.data_load_datetime >= DATETIME_SUB(CURRENT_DATETIME(), INTERVAL 30 DAY) -- Get recent data
  AND t0.gross_revenue_amount IS NOT NULL -- Ensure meaningful samples
ORDER BY
  t0.data_load_datetime DESC, SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': '2025', 'context': 'financial_year filter in all queries', 'suggested_fix': 'replace with a parameter or relative date logic (e.g., CURRENT_DATE() for current financial year)', 'impact': 'high', 'urgency': 'high'}, {'date_value': 'Oct', 'original_format': 'Oct', 'context': 'financial_short_month filter in query 1', 'suggested_fix': 'replace with a parameter or relative month logic', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Medium Rare Content Agency'""], 'context': 'exclusion for source_publishing_division in all queries', 'suggested_governance': 'use a governed exclusion list or parameter', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Billed'"", ""'Booked'""], 'context': 'inclusion for revenue_transaction_status in all queries', 'suggested_governance': 'use a governed lookup table for transaction statuses', 'impact': 'medium', 'maintenance_risk': 'medium'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic'""], 'context': 'inclusion for revenue_type_level2 in query 3', 'suggested_governance': 'use a governed lookup table for revenue types', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Programmatic Source'"", ""'Digital'""], 'context': 'inclusion for revenue_group_subtype in query 3', 'suggested_governance': 'use a governed lookup table for revenue group subtypes', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Foxtel Management Pty Ltd'""], 'context': 'inclusion for advertiser_name in query 3', 'suggested_governance': 'use a governed advertiser master data table', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'PLUTO'""], 'context': 'inclusion for source_system_code in query 3', 'suggested_governance': 'use a governed lookup table for source system codes', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded financial years and months with date parameters or relative date functions (e.g., `_DS_FINANCIAL_YEAR`, `_DS_FINANCIAL_MONTH`).', 'Replace hardcoded lookup values (e.g., transaction statuses, revenue types, source systems) with joins to governed reference tables or parameters.', 'Use configuration tables for business rules (e.g., `Medium Rare Content Agency` exclusion) instead of hardcoded logic.']",43,705edcb5-737a-4600-b1a7-11870177f97a
"WITH
  base_data AS (
    SELECT
      SAFE_CAST(t0.publication_date AS DATE) AS publication_date,
      SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
      SAFE_CAST(t0.employee_name AS STRING) AS employee_name,
      SAFE_CAST(t0.agency_group AS STRING) AS agency_group,
      SAFE_CAST(t0.unified_publication_name AS STRING) AS unified_publication_name,
      SAFE_CAST(t0.dow AS STRING) AS dow_raw,
      CASE
        WHEN (t0.dow = 'Monday') THEN 'Monday'
        WHEN (t0.dow = 'Tuesday') THEN ' Tuesday'
        WHEN (t0.dow = 'Wednesday') THEN '  Wednesday'
        WHEN (t0.dow = 'Thursday') THEN '   Thursday'
        WHEN (t0.dow = 'Friday') THEN '    Friday'
        WHEN (t0.dow = 'Saturday') THEN '     Saturday'
        WHEN (t0.dow = 'Sunday') THEN '      Sunday'
        ELSE NULL
      END AS day_of_week_formatted,
      CASE
        WHEN ('Fin' = 'Fin') THEN SAFE_CAST(t0.financial_short_month AS STRING)
        ELSE SAFE_CAST(t0.calendar_month_short_name AS STRING)
      END AS selected_financial_period_month,
      CASE
        WHEN ('Fin' = 'Fin') THEN SAFE_CAST(t0.financial_year AS STRING)
        ELSE SAFE_CAST(t0.calendar_year AS STRING)
      END AS selected_financial_period_year,
      CASE
        WHEN ('Curr' = 'Curr') THEN SAFE_CAST(t0.portfolio_conformed_name_current AS STRING)
        ELSE SAFE_CAST(t0.portfolio_conformed_name_sync AS STRING)
      END AS selected_portfolio_name
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  )
SELECT
  publication_date,
  advertiser_name,
  employee_name,
  agency_group,
  unified_publication_name,
  day_of_week_formatted,
  selected_financial_period_month,
  selected_financial_period_year,
  selected_portfolio_name,
  COUNT(*) AS record_count
FROM
  base_data
GROUP BY
  publication_date,
  advertiser_name,
  employee_name,
  agency_group,
  unified_publication_name,
  day_of_week_formatted,
  selected_financial_period_month,
  selected_financial_period_year,
  selected_portfolio_name
ORDER BY
  publication_date DESC
LIMIT 100;","SELECT
  'Data Structure Analysis' AS analysis_type,
  COUNT(*) AS total_records,
  COUNT(DISTINCT SAFE_CAST(t0.publication_date AS DATE)) AS unique_publication_dates,
  COUNT(DISTINCT SAFE_CAST(t0.advertiser_name AS STRING)) AS unique_advertisers,
  COUNT(DISTINCT SAFE_CAST(t0.employee_name AS STRING)) AS unique_employees,
  COUNT(DISTINCT SAFE_CAST(t0.agency_group AS STRING)) AS unique_agency_groups,
  COUNT(DISTINCT SAFE_CAST(t0.unified_publication_name AS STRING)) AS unique_publications,
  COUNT(DISTINCT SAFE_CAST(t0.financial_year AS STRING)) AS unique_financial_years,
  MIN(SAFE_CAST(t0.publication_date AS DATE)) AS earliest_publication_date,
  MAX(SAFE_CAST(t0.publication_date AS DATE)) AS latest_publication_date
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 365 DAY);","SELECT
  'Validation Check' AS test_type,
  CASE
    WHEN COUNT(*) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS data_presence_test,
  CASE
    WHEN MAX(SAFE_CAST(t0.publication_date AS DATE)) >= DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) THEN 'PASS'
    ELSE 'FAIL'
  END AS freshness_test,
  CASE
    WHEN COUNT(DISTINCT SAFE_CAST(t0.advertiser_name AS STRING)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS advertiser_data_test,
  CASE
    WHEN COUNT(DISTINCT SAFE_CAST(t0.employee_name AS STRING)) > 0 THEN 'PASS'
    ELSE 'FAIL'
  END AS employee_data_test
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
LIMIT 1;","WITH
  base_data AS (
    SELECT
      SAFE_CAST(t0.dow AS STRING) AS dow_raw,
      CASE
        WHEN (t0.dow = 'Monday') THEN 'Monday'
        WHEN (t0.dow = 'Tuesday') THEN ' Tuesday'
        WHEN (t0.dow = 'Wednesday') THEN '  Wednesday'
        WHEN (t0.dow = 'Thursday') THEN '   Thursday'
        WHEN (t0.dow = 'Friday') THEN '    Friday'
        WHEN (t0.dow = 'Saturday') THEN '     Saturday'
        WHEN (t0.dow = 'Sunday') THEN '      Sunday'
        ELSE NULL
      END AS day_of_week_formatted,
      SAFE_CAST(t0.financial_short_month AS STRING) AS financial_month,
      SAFE_CAST(t0.calendar_month_short_name AS STRING) AS calendar_month,
      SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
      SAFE_CAST(t0.calendar_year AS STRING) AS calendar_year,
      SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) AS portfolio_current,
      SAFE_CAST(t0.portfolio_conformed_name_sync AS STRING) AS portfolio_sync
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 90 DAY)
  )
SELECT
  'Business Rule Validation' AS validation_type,
  'day_of_week_formatting_check' AS rule_name,
  COUNT(*) AS records_tested,
  SUM(
    CASE
      WHEN dow_raw = 'Monday'
      AND day_of_week_formatted = 'Monday' THEN 1
      WHEN dow_raw = 'Tuesday'
      AND day_of_week_formatted = ' Tuesday' THEN 1
      WHEN dow_raw = 'Wednesday'
      AND day_of_week_formatted = '  Wednesday' THEN 1
      WHEN dow_raw = 'Thursday'
      AND day_of_week_formatted = '   Thursday' THEN 1
      WHEN dow_raw = 'Friday'
      AND day_of_week_formatted = '    Friday' THEN 1
      WHEN dow_raw = 'Saturday'
      AND day_of_week_formatted = '     Saturday' THEN 1
      WHEN dow_raw = 'Sunday'
      AND day_of_week_formatted = '      Sunday' THEN 1
      ELSE 0
    END
  ) AS records_passing_dow_format,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN dow_raw = 'Monday'
        AND day_of_week_formatted = 'Monday' THEN 1
        WHEN dow_raw = 'Tuesday'
        AND day_of_week_formatted = ' Tuesday' THEN 1
        WHEN dow_raw = 'Wednesday'
        AND day_of_week_formatted = '  Wednesday' THEN 1
        WHEN dow_raw = 'Thursday'
        AND day_of_week_formatted = '   Thursday' THEN 1
        WHEN dow_raw = 'Friday'
        AND day_of_week_formatted = '    Friday' THEN 1
        WHEN dow_raw = 'Saturday'
        AND day_of_week_formatted = '     Saturday' THEN 1
        WHEN dow_raw = 'Sunday'
        AND day_of_week_formatted = '      Sunday' THEN 1
        ELSE 0
      END
    ),
    COUNT(*)
  ) * 100 AS dow_format_pass_rate_percentage,
  'financial_vs_calendar_selection_check' AS rule_name_2,
  SUM(
    CASE
      WHEN financial_month IS NOT NULL
      AND financial_year IS NOT NULL
      AND portfolio_current IS NOT NULL THEN 1
      ELSE 0
    END
  ) AS records_with_financial_selection,
  SAFE_DIVIDE(
    SUM(
      CASE
        WHEN financial_month IS NOT NULL
        AND financial_year IS NOT NULL
        AND portfolio_current IS NOT NULL THEN 1
        ELSE 0
      END
    ),
    COUNT(*)
  ) * 100 AS financial_selection_rate_percentage
FROM
  base_data;","SELECT
  SAFE_CAST(t0.publication_date AS DATE) AS publication_date,
  SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
  SAFE_CAST(t0.employee_name AS STRING) AS employee_name,
  SAFE_CAST(t0.agency_group AS STRING) AS agency_group,
  SAFE_CAST(t0.unified_publication_name AS STRING) AS unified_publication_name,
  SAFE_CAST(t0.dow AS STRING) AS dow,
  SAFE_CAST(t0.calendar_month_short_name AS STRING) AS calendar_month_short_name,
  SAFE_CAST(t0.calendar_year AS STRING) AS calendar_year,
  SAFE_CAST(t0.financial_short_month AS STRING) AS financial_short_month,
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) AS portfolio_conformed_name_current,
  SAFE_CAST(t0.portfolio_conformed_name_sync AS STRING) AS portfolio_conformed_name_sync
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
  SAFE_CAST(t0.publication_date AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)
ORDER BY
  SAFE_CAST(t0.publication_date AS DATE) DESC
LIMIT 500;","{'hardcoded_dates': [{'date_value': '2025', 'original_format': 'string', 'context': ""Used as a filter for financial year in Query 2 (clmn10_ IN ('2025'))"", 'suggested_fix': 'Replace with a parameter or relative year (e.g., `EXTRACT(YEAR FROM CURRENT_DATE()) + 1`)', 'impact': 'high', 'urgency': 'high'}, {'date_value': '2024', 'original_format': 'string', 'context': ""Used as an exclusion filter for financial year in Query 3 (clmn7_ NOT IN ('2024'))"", 'suggested_fix': 'Replace with a parameter or relative year (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`)', 'impact': 'high', 'urgency': 'high'}, {'date_value': 'Feb, Mar, Apr, May, Jun', 'original_format': 'string list', 'context': 'Used as a filter for financial month in Query 2 (clmn9_ IN (...))', 'suggested_fix': 'Replace with a parameter or derive from a date dimension table for dynamic period selection.', 'impact': 'medium', 'urgency': 'medium'}, {'date_value': 'Jul, Aug, Sep', 'original_format': 'string list', 'context': 'Used as a filter for financial month in Query 3 (clmn6_ IN (...))', 'suggested_fix': 'Replace with a parameter or derive from a date dimension table for dynamic period selection.', 'impact': 'medium', 'urgency': 'medium'}], 'hardcoded_variables': [{'variable_type': 'business_rules', 'hardcoded_values': [""'Fin' = 'Fin'"", ""'Curr' = 'Curr'""], 'context': ""These conditions are always true, forcing the selection of financial month/year and current portfolio name. While not strictly 'hardcoded variables' in the sense of needing a lookup, they represent fixed business logic that could be made explicit or configurable if the logic ever needed to change."", 'suggested_governance': 'Document this fixed logic. If flexibility is ever needed, introduce a parameter or configuration table.', 'impact': 'low', 'maintenance_risk': 'low'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'NSW IA C3'""], 'context': ""Portfolio name hardcoded in filter in Query 2 (clmn11_ IN ('NSW IA C3'))"", 'suggested_governance': 'Join to a `portfolio_master` or `portfolio_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Marley-Kale Kentia'""], 'context': ""Employee name hardcoded in filter in Query 2 (clmn3_ IN ('Marley-Kale Kentia'))"", 'suggested_governance': 'Join to an `employee_master` or `employee_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Australian Meat Processor Corporation'"", ""'Australian Pork'"", ""'CMC Markets'"", ""'Coco Republic'"", ""'Dry July Limited'"", ""'Fred Hollows Foundation'"", ""'LGT Crestone'""], 'context': 'Advertiser names hardcoded in filter in Query 2 (clmn0_ IN (...))', 'suggested_governance': 'Join to an `advertiser_master` or `advertiser_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'lookup_codes', 'hardcoded_values': [""'Vogue Australia'""], 'context': ""Publication name hardcoded in filter in Query 3 (clmn5_ IN ('Vogue Australia'))"", 'suggested_governance': 'Join to a `publication_master` or `publication_lookup` table.', 'impact': 'high', 'maintenance_risk': 'high'}, {'variable_type': 'categories', 'hardcoded_values': [""'Monday'"", ""' Tuesday'"", ""'  Wednesday'"", ""'   Thursday'"", ""'    Friday'"", ""'     Saturday'"", ""'      Sunday'""], 'context': 'Day of week strings used for formatting and ordering in Query 1.', 'suggested_governance': 'Use a UDF for consistent formatting or a small lookup table for display values if the ordering logic is complex.', 'impact': 'low', 'maintenance_risk': 'low'}]}","['Replace hardcoded years and months with date parameters or relative date functions (e.g., `EXTRACT(YEAR FROM CURRENT_DATE())`).', 'Replace hardcoded lookup values (e.g., portfolio names, employee names, advertiser names, publication names) with joins to governed reference tables.', 'Use configuration tables for business rules (e.g., specific month ranges for reports) instead of hardcoded logic.']",45,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
