primary_analysis_sql,structure_sql,validation_sql,business_rules_sql,response_id,dashboard_id
"SELECT
  t0.advertiser_name,
  t0.booking_number,
  t0.booking_name,
  regexp_extract(SAFE_CAST(t0.booking_name AS STRING), r'^[^ _]+') AS booking_name_1st_keyword,
  t0.sort_caption,
  t0.adsize_name,
  CASE
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
    ELSE 'Media'
  END AS adsize_category,
  t0.classification_name,
  t0.revenue_type,
  t0.revenue_group_subtype,
  t0.financial_year,
  t0.fy_year_month_number,
  t0.financial_short_month,
  t0.source_unified_publication_gl_code,
  t0.source_unified_publication_name,
  t0.unified_publication_gl_code,
  t0.unified_publication_name,
  t0.revenue_transaction_status,
  t0.record_type_code,
  SUM(t0.gross_revenue_amount) AS total_gross_revenue,
  SUM(t0.net_revenue) AS total_net_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  t0.relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(t0.financial_year AS STRING) = '2025' -- Example filter from the original queries
GROUP BY ALL
LIMIT 1000;","SELECT
  advertiser_name,
  booking_number,
  booking_name,
  regexp_extract(SAFE_CAST(booking_name AS STRING), r'^[^ _]+') AS booking_name_1st_keyword,
  sort_caption,
  adsize_name,
  classification_name,
  revenue_type,
  revenue_group_subtype,
  financial_year,
  fy_year_month_number,
  financial_short_month,
  source_unified_publication_gl_code,
  source_unified_publication_name,
  unified_publication_gl_code,
  unified_publication_name,
  revenue_transaction_status,
  record_type_code,
  gross_revenue_amount,
  net_revenue
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
LIMIT 100;","SELECT
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year_str,
  SAFE_CAST(t0.fy_year_month_number AS STRING) AS fy_year_month_number_str,
  CASE
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(t0.adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
    ELSE 'Media'
  END AS adsize_category_validation,
  SUM(t0.gross_revenue_amount) AS total_gross_revenue_validation,
  SUM(t0.net_revenue) AS total_net_revenue_validation
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  t0.relative_fy_year_offset IN (-1, 0, 1)
  AND SAFE_CAST(t0.financial_year AS STRING) = '2025'
GROUP BY
  financial_year_str,
  fy_year_month_number_str,
  adsize_category_validation
LIMIT 10;","SELECT
  -- Check distribution of adsize_category
  CASE
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*event sponsorship.*)$') THEN 'Sponsorship'
    WHEN SAFE.REGEXP_CONTAINS(LOWER(SAFE_CAST(adsize_name AS STRING)), '^(.*production.*)$') THEN 'Production'
    ELSE 'Media'
  END AS adsize_category_distribution,
  COUNT(*) AS count_adsize_category,
  -- Check hardcoded financial year filter
  COUNTIF(SAFE_CAST(financial_year AS STRING) = '2025') AS count_fy_2025,
  -- Check hardcoded fy_year_month_number filter
  COUNTIF(fy_year_month_number IN (202501, 202502, 202503)) AS count_fy_months_2025_Q1,
  -- Check hardcoded booking_name filter
  COUNTIF(SAFE_CAST(booking_name AS STRING) IN ('Future Bradfield 2024', 'Sydney & Brisbane Future Series', 'Future Bradfield FY25 B1', 'Future Sydney Bradfield 2024')) AS count_specific_booking_names,
  -- Check revenue transaction status distribution
  SAFE_CAST(revenue_transaction_status AS STRING) AS revenue_status,
  COUNT(*) AS count_by_revenue_status
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
GROUP BY
  adsize_category_distribution,
  revenue_status
ORDER BY
  adsize_category_distribution, revenue_status;",0,e83da1de-4227-43e6-bcc6-73051c66914b
"WITH base_data AS (
    SELECT
        t0.advertiser_parent,
        t0.financial_quarter,
        t0.financial_short_month,
        t0.booking_line_created_date,
        t0.fix_date_lod,
        t0.gross_revenue_amount,
        t0.relative_fy_year_offset,
        t0.revenue_group_subtype,
        t0.revenue_type,
        t0.sales_segment_l_2_name,
        t0.sales_segment_l_2_name_sync,
        t0.unified_publication_name
    FROM
        `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
    WHERE
        -- Add a reasonable date filter for sampling and performance
        -- Assuming fix_date_lod is a DATE type or can be safely cast
        SAFE_CAST(t0.fix_date_lod AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
),
derived_fields AS (
    SELECT
        advertiser_parent,
        financial_quarter,
        financial_short_month,
        booking_line_created_date,
        fix_date_lod,
        gross_revenue_amount,
        relative_fy_year_offset,
        revenue_group_subtype,
        revenue_type,
        sales_segment_l_2_name,
        sales_segment_l_2_name_sync,
        unified_publication_name,

        -- Derived Dimensions / Flags
        SAFE_CAST(financial_quarter AS INT64) AS fiscal_quarter_int,
        CONCAT('Q', SAFE_CAST(financial_quarter AS STRING)) AS formatted_quarter,
        CASE
            WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1'
            WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2'
            ELSE SAFE_CAST(financial_quarter AS STRING)
        END AS fiscal_half,
        CONCAT(SAFE_CAST(financial_short_month AS STRING), ' ', CONCAT('Q', SAFE_CAST(financial_quarter AS STRING)), ' ',
            CASE
                WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1'
                WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2'
                ELSE SAFE_CAST(financial_quarter AS STRING)
            END
        ) AS financial_period_string,
        (relative_fy_year_offset = 0) AS is_current_fy,
        (relative_fy_year_offset = 1) AS is_previous_fy,
        (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_subtype,
        (revenue_type = 'DIGITAL') AS is_digital_revenue_type,
        (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment,
        (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
        UPPER(SAFE_CAST(unified_publication_name AS STRING)) AS unified_publication_name_upper,
        (UPPER(SAFE_CAST(unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) AS is_specific_publication_type,

        -- Hardcoded ""today's"" date and 365 days prior (from original query)
        DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS hardcoded_comparison_date,
        DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY) AS hardcoded_comparison_date_minus_365d,
        PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS parsed_booking_line_date,

        -- Selected Date for Comparison (clmn26_ equivalent)
        CASE
            WHEN (
                (revenue_type = 'DIGITAL') AND
                (revenue_group_subtype = 'DIGITAL') AND
                (sales_segment_l_2_name_sync = 'Digital Other') AND
                (advertiser_parent != 'DOUBLECLICK')
            ) THEN fix_date_lod
            ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
        END AS selected_date_for_comparison,

        -- Date Condition for Previous Year (clmn32_ equivalent)
        (SAFE_CAST(
            CASE
                WHEN (
                    (revenue_type = 'DIGITAL') AND
                    (revenue_group_subtype = 'DIGITAL') AND
                    (sales_segment_l_2_name_sync = 'Digital Other') AND
                    (advertiser_parent != 'DOUBLECLICK')
                ) THEN fix_date_lod
                ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
            END AS DATETIME
        ) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY)) AS date_condition_for_previous_year,

        -- Measures (clmn16_, clmn17_, clmn18_ equivalents)
        CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue,
        CASE WHEN (relative_fy_year_offset = 1) THEN gross_revenue_amount ELSE 0 END AS previous_fy_gross_revenue
    FROM
        base_data
),
final_metrics AS (
    SELECT
        *,
        -- Revenue in '000s (clmn23_, clmn24_, clmn25_, clmn28_, clmn29_, clmn30_, clmn31_, clmn35_, clmn36_, clmn37_, clmn38_ equivalents)
        SAFE_DIVIDE(current_fy_gross_revenue, 1000) AS current_fy_gross_revenue_k,
        SAFE_DIVIDE(previous_fy_gross_revenue, 1000) AS previous_fy_gross_revenue_k,

        -- Calculated Revenue (clmn33_ equivalent)
        CASE
            WHEN (is_current_fy AND is_specific_publication_type) THEN gross_revenue_amount
            WHEN (is_current_fy AND date_condition_for_previous_year) THEN gross_revenue_amount
            ELSE NULL
        END AS calculated_revenue_raw
    FROM
        derived_fields
)
SELECT
    advertiser_parent,
    sales_segment_l_2_name,
    financial_quarter,
    financial_short_month,
    fiscal_half,
    financial_period_string,
    unified_publication_name_upper,
    SUM(gross_revenue_amount) AS total_gross_revenue_amount,
    SUM(current_fy_gross_revenue) AS sum_current_fy_gross_revenue,
    SUM(previous_fy_gross_revenue) AS sum_previous_fy_gross_revenue,
    SUM(current_fy_gross_revenue_k) AS sum_current_fy_gross_revenue_k,
    SUM(previous_fy_gross_revenue_k) AS sum_previous_fy_gross_revenue_k,
    SUM(CASE WHEN (calculated_revenue_raw IS NULL) THEN 0 ELSE calculated_revenue_raw END) AS sum_calculated_revenue_zero_filled,
    SUM(SAFE_DIVIDE(CASE WHEN (calculated_revenue_raw IS NULL) THEN 0 ELSE calculated_revenue_raw END, 1000)) AS sum_calculated_revenue_k
FROM
    final_metrics
-- Optional: Apply original dashboard filters if a specific view is needed
-- WHERE financial_period_string = 'Jul Q1 H1' -- From Query 1
-- AND sales_segment_l_2_name = 'Consortium QLD' -- From Query 2
GROUP BY
    advertiser_parent,
    sales_segment_l_2_name,
    financial_quarter,
    financial_short_month,
    fiscal_half,
    financial_period_string,
    unified_publication_name_upper
LIMIT 1000;",SELECT * FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` LIMIT 10;,"WITH base_data AS (
    SELECT
        t0.advertiser_parent,
        t0.financial_quarter,
        t0.financial_short_month,
        t0.booking_line_created_date,
        t0.fix_date_lod,
        t0.gross_revenue_amount,
        t0.relative_fy_year_offset,
        t0.revenue_group_subtype,
        t0.revenue_type,
        t0.sales_segment_l_2_name,
        t0.sales_segment_l_2_name_sync,
        t0.unified_publication_name
    FROM
        `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
    WHERE
        SAFE_CAST(t0.fix_date_lod AS DATE) >= DATE_SUB(CURRENT_DATE(), INTERVAL 2 YEAR)
),
derived_fields AS (
    SELECT
        advertiser_parent,
        financial_quarter,
        financial_short_month,
        booking_line_created_date,
        fix_date_lod,
        gross_revenue_amount,
        relative_fy_year_offset,
        revenue_group_subtype,
        revenue_type,
        sales_segment_l_2_name,
        sales_segment_l_2_name_sync,
        unified_publication_name,
        SAFE_CAST(financial_quarter AS INT64) AS fiscal_quarter_int,
        CONCAT('Q', SAFE_CAST(financial_quarter AS STRING)) AS formatted_quarter,
        CASE
            WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1'
            WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2'
            ELSE SAFE_CAST(financial_quarter AS STRING)
        END AS fiscal_half,
        CONCAT(SAFE_CAST(financial_short_month AS STRING), ' ', CONCAT('Q', SAFE_CAST(financial_quarter AS STRING)), ' ',
            CASE
                WHEN (SAFE_CAST(financial_quarter AS INT64) >= 1 AND SAFE_CAST(financial_quarter AS INT64) <= 2) THEN 'H1'
                WHEN (SAFE_CAST(financial_quarter AS INT64) >= 3 AND SAFE_CAST(financial_quarter AS INT64) <= 4) THEN 'H2'
                ELSE SAFE_CAST(financial_quarter AS STRING)
            END
        ) AS financial_period_string,
        (relative_fy_year_offset = 0) AS is_current_fy,
        (relative_fy_year_offset = 1) AS is_previous_fy,
        (revenue_group_subtype = 'DIGITAL') AS is_digital_revenue_subtype,
        (revenue_type = 'DIGITAL') AS is_digital_revenue_type,
        (sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment,
        (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
        UPPER(SAFE_CAST(unified_publication_name AS STRING)) AS unified_publication_name_upper,
        (UPPER(SAFE_CAST(unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) AS is_specific_publication_type,
        DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS hardcoded_comparison_date,
        DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY) AS hardcoded_comparison_date_minus_365d,
        PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS parsed_booking_line_date,
        CASE
            WHEN (
                (revenue_type = 'DIGITAL') AND
                (revenue_group_subtype = 'DIGITAL') AND
                (sales_segment_l_2_name_sync = 'Digital Other') AND
                (advertiser_parent != 'DOUBLECLICK')
            ) THEN fix_date_lod
            ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
        END AS selected_date_for_comparison,
        (SAFE_CAST(
            CASE
                WHEN (
                    (revenue_type = 'DIGITAL') AND
                    (revenue_group_subtype = 'DIGITAL') AND
                    (sales_segment_l_2_name_sync = 'Digital Other') AND
                    (advertiser_parent != 'DOUBLECLICK')
                ) THEN fix_date_lod
                ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
            END AS DATETIME
        ) <= DATETIME_ADD(SAFE_CAST(DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS DATETIME), INTERVAL -365 DAY)) AS date_condition_for_previous_year,
        CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue,
        CASE WHEN (relative_fy_year_offset = 1) THEN gross_revenue_amount ELSE 0 END AS previous_fy_gross_revenue
    FROM
        base_data
),
final_metrics AS (
    SELECT
        *,
        SAFE_DIVIDE(current_fy_gross_revenue, 1000) AS current_fy_gross_revenue_k,
        SAFE_DIVIDE(previous_fy_gross_revenue, 1000) AS previous_fy_gross_revenue_k,
        CASE
            WHEN (is_current_fy AND is_specific_publication_type) THEN gross_revenue_amount
            WHEN (is_current_fy AND date_condition_for_previous_year) THEN gross_revenue_amount
            ELSE NULL
        END AS calculated_revenue_raw
    FROM
        derived_fields
)
SELECT * FROM final_metrics LIMIT 10;","-- Check hardcoded date
SELECT DATE(TIMESTAMP '2025-06-23 10:00:32.354880+00', 'Australia/Sydney') AS hardcoded_date_in_query;

-- Check distinct values for relative_fy_year_offset
SELECT DISTINCT relative_fy_year_offset FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` LIMIT 100;

-- Check distinct values for financial_quarter
SELECT DISTINCT financial_quarter FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` LIMIT 100;

-- Check distinct values for unified_publication_name related to hardcoded list
SELECT DISTINCT unified_publication_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE UPPER(SAFE_CAST(unified_publication_name AS STRING)) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE') LIMIT 100;

-- Check distinct values for sales_segment_l_2_name related to hardcoded filter
SELECT DISTINCT sales_segment_l_2_name FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE sales_segment_l_2_name = 'Consortium QLD' LIMIT 100;

-- Check distinct values for advertiser_parent related to hardcoded exclusion
SELECT DISTINCT advertiser_parent FROM `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` WHERE advertiser_parent = 'DOUBLECLICK' LIMIT 100;
",1,9269e9c6-1ad0-4415-96c3-aca8a710ba01
"WITH base_data AS (
    SELECT
        t0.financial_year,
        t0.revenue_group_subtype,
        t0.unified_publication_name,
        t0.revenue_type,
        t0.xtend_flag,
        t0.dw_asl_load_timestamp
    FROM
        `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
),
derived_dimensions AS (
    SELECT
        financial_year,
        revenue_group_subtype,
        unified_publication_name,
        revenue_type,
        xtend_flag,
        dw_asl_load_timestamp,
        CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END AS revenue_category_raw,
        CASE
            WHEN (CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END) = 'DIGITAL' THEN 'DIGITAL (excl.XTEND)'
            WHEN (CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END) = 'PRINT' THEN 'PRINT'
            WHEN (CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END) = 'XTEND' THEN 'XTEND ONLY'
            ELSE NULL
        END AS revenue_category_display
    FROM
        base_data
)
SELECT
    financial_year,
    revenue_group_subtype,
    unified_publication_name,
    revenue_type,
    xtend_flag,
    revenue_category_raw,
    revenue_category_display,
    DATETIME_TRUNC(dw_asl_load_timestamp, SECOND) AS dw_asl_load_timestamp_truncated,
    COUNT(1) AS record_count
FROM
    derived_dimensions
WHERE
    financial_year IN ('2024', '2025')
    AND (
        revenue_group_subtype IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE')
        OR LOWER(revenue_category_display) = 'digital'
    )
GROUP BY
    financial_year,
    revenue_group_subtype,
    unified_publication_name,
    revenue_type,
    xtend_flag,
    revenue_category_raw,
    revenue_category_display,
    dw_asl_load_timestamp_truncated
LIMIT 1000;","SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    t0.revenue_type,
    t0.xtend_flag,
    t0.dw_asl_load_timestamp
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 10;","SELECT
    MIN(DATETIME_TRUNC(t0.dw_asl_load_timestamp, SECOND)) AS min_dw_asl_load_timestamp_test,
    CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END AS revenue_category_raw_test,
    CASE
        WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END) = 'DIGITAL' THEN 'DIGITAL (excl.XTEND)'
        WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END) = 'PRINT' THEN 'PRINT'
        WHEN (CASE WHEN SAFE_CAST(t0.xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(t0.revenue_type AS STRING) END) = 'XTEND' THEN 'XTEND ONLY'
        ELSE NULL
    END AS revenue_category_display_test
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE
    t0.financial_year IN ('2024', '2025')
LIMIT 1;","WITH base_data AS (
    SELECT
        t0.financial_year,
        t0.revenue_group_subtype,
        t0.revenue_type,
        t0.xtend_flag
    FROM
        `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
),
derived_categories AS (
    SELECT
        financial_year,
        revenue_group_subtype,
        revenue_type,
        xtend_flag,
        CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END AS revenue_category_raw,
        CASE
            WHEN (CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END) = 'DIGITAL' THEN 'DIGITAL (excl.XTEND)'
            WHEN (CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END) = 'PRINT' THEN 'PRINT'
            WHEN (CASE WHEN SAFE_CAST(xtend_flag AS STRING) = 'Y' THEN 'XTEND' ELSE SAFE_CAST(revenue_type AS STRING) END) = 'XTEND' THEN 'XTEND ONLY'
            ELSE NULL
        END AS revenue_category_display
    FROM
        base_data
)
SELECT
    financial_year,
    revenue_group_subtype,
    revenue_type,
    xtend_flag,
    COUNT(1) AS record_count
FROM
    derived_categories
WHERE
    financial_year NOT IN ('2024', '2025') -- Identify records outside hardcoded financial years
    OR (
        revenue_group_subtype NOT IN ('DIGITAL', 'PROGRAMMATIC EXCHANGE', 'PROGRAMMATIC SOURCE')
        AND NOT (LOWER(revenue_category_display) = 'digital')
    ) -- Identify records outside hardcoded revenue subtypes AND not matching the derived digital category
GROUP BY
    financial_year,
    revenue_group_subtype,
    revenue_type,
    xtend_flag
HAVING
    COUNT(1) > 0
LIMIT 100;",2,61f1feb4-fc3e-4bee-b987-84c86cfe6425
"WITH OSandFACT_Base AS (
  SELECT
    os.Actual_Amount,
    os.volume,
    os.Budget_Amount,
    os.Budget_Volume,
    os.Forecast_Amount,
    os.Forecast_Volume,
    os.Last_Year_Actual_Amount,
    os.Last_Year_volume,
    os.relative_fisc_week_number,
    os.relative_fisc_year_number,
    os.day_of_week,
    os.os_level_10,
    os.os_level_7,
    os.os_level_8,
    os.publication_code,
    os.publication_name,
    os.gl_publication_code,
    os.gl_hierarchy_code,
    os.os_level_6,
    pub.l04_publication_code,
    pub.l06_publication_code,
    calendar.fy_first_day_of_week,
    calendar.fy_last_day_of_week,
    calendar.fy_week_of_year,
    calendar.fy_year_week_number,
    calendar.fy_month_of_year,
    calendar.fy_quarter_of_year
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON os.gl_publication_code = pub.publication_code
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
      ON os.fiscal_week_id = calendar.fy_year_week_number
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
      ON control.source_week_number = calendar.fy_year_week_number AND control.period_name IN ('CP', 'PY')
    LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_gl_department` AS dep
      ON os.os_level_12 = dep.department_code
  WHERE
    upper(os.os_level_6) = 'CIRCULATION'
    AND pub.l04_publication_code <> 'Free News & Lifestyle'
    AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
    AND os.gl_hierarchy_code = 'FY2025'
),
DerivedAttributes AS (
  SELECT
    *,
    CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END AS publication_name_transformed,
    CASE
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
      ELSE NULL
    END AS standardized_publication_name,
    CASE
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Cairns Post', 'Geelong Advertiser', 'Gold Coast Bulletin', 'The Australian', 'Toowoomba', 'Townsville Bulletin')) THEN '6 Day Pubs'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury and Sunday Tas'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('NT News', 'Sunday Territorian')) THEN 'NT News & Sunday Territorian'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Other', 'Brisbane Other', 'Cairns Post Digital', 'Corporate', 'Geelong Advertiser Digital', 'Gold Coast Bulletin Digital', 'Gold Coast Other', 'Herald Sun Digital', 'Melbourne Other', 'Mercury Digital', 'News Xtend', 'NIMs', 'NT News Digital', 'NT Other', 'Perth Now Digital', 'Sydney Other', 'The Australian Digital', 'The Courier Mail Digital', 'The Daily Telegraph Digital', 'The Weekend Australian Mag', 'Townsville Bulletin Digital', 'Transformation', 'Weekly Times Digital')) THEN 'Other'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'The Courier Mail'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
      WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
      ELSE (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END)
    END AS publication_group,
    CASE
      WHEN (CASE
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
              ELSE NULL
            END = 'The Daily Telegraph') THEN ' NSW'
      WHEN (CASE
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
              ELSE NULL
            END IN ('The Herald Sun', 'Geelong Advertiser', 'Weekly Times')) THEN '  VIC'
      WHEN (CASE
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
              ELSE NULL
            END = 'The Advertiser') THEN '   SA'
      WHEN (CASE
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
              ELSE NULL
            END IN ('Courier Mail', 'Cairns Post', 'GCB', 'Townsville Bulletin', 'The Chronicle', 'Daily Mercury', 'Sunshine Coast')) THEN '     QLD'
      WHEN (CASE
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
              ELSE NULL
            END = 'Northern Territory News') THEN '      NT'
      WHEN (CASE
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Advertiser', 'Sunday Mail (SA)')) THEN 'The Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Weekly Times')) THEN 'Weekly Times'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Herald Sun', 'Sunday Herald Sun')) THEN 'The Herald Sun'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('The Daily Telegraph', 'The Sunday Telegraph')) THEN 'The Daily Telegraph'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Toowoomba') THEN 'The Chronicle'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Townsville Bulletin') THEN 'Townsville Bulletin'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Gold Coast Bulletin') THEN 'GCB'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Geelong Advertiser') THEN 'Geelong Advertiser'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Cairns Post') THEN 'Cairns Post'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Sunshine Coast') THEN 'Sunshine Coast'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Courier Mail', 'Sunday Mail (QLD)')) THEN 'Courier Mail'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Mercury', 'Sunday Tasmanian')) THEN 'Mercury'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END IN ('Sunday Territorian', 'NT News')) THEN 'Northern Territory News'
              WHEN (CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END = 'Mackay') THEN 'Daily Mercury'
              ELSE NULL
            END = 'Mercury') THEN '    TAS'
      ELSE NULL
    END AS derived_region,
    CASE
      WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels'
      WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations'
      WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies'
      WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions'
      WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets'
      ELSE 'Unspec Channel'
    END AS channel_group,
    CASE
      WHEN (CASE
              WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels'
              WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations'
              WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies'
              WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions'
              WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets'
              ELSE 'Unspec Channel'
            END IN ('Convenience Stores / Service Stations', 'Newsagencies', 'Supermarkets')) THEN 'Retail'
      ELSE CASE
              WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels'
              WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations'
              WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies'
              WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions'
              WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets'
              ELSE 'Unspec Channel'
            END
    END AS channel_group_retail,
    DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'Australia/Sydney') AS current_date_sydney,
    DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'UTC') AS current_date_utc,
    (EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'Australia/Sydney'))) - 1) AS day_of_week_from_current_date,
    DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) AS weeks_diff_from_2024_07_03,
    CASE WHEN ((EXTRACT(DAYOFWEEK FROM TIMESTAMP(DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'Australia/Sydney'))) - 1) <= 2) THEN DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) - 1 ELSE DATETIME_DIFF(SAFE_CAST(DATE(TIMESTAMP '2025-04-15 04:14:20.297382+00', 'Australia/Sydney') AS DATETIME), SAFE_CAST(DATETIME '2024-07-03T00:00:00' AS DATETIME), WEEK) END AS derived_week_num,
    (standardized_publication_name = 'The Courier Mail') AS is_courier_mail,
    (standardized_publication_name = 'The Australian') AS is_the_australian,
    (day_of_week IN ('Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Weekday Entry')) AS is_weekday_group,
    (derived_week_num = 26) AS is_derived_week_num_26,
    (derived_week_num = 40) AS is_derived_week_num_40
  FROM
    OSandFACT_Base
),
CalculatedMetrics AS (
  SELECT
    *,
    CASE WHEN (relative_fisc_week_number < 0) THEN Budget_Volume ELSE NULL END AS budget_volume_if_relative_fisc_week_negative,
    CASE WHEN (relative_fisc_week_number < 0) THEN Budget_Amount ELSE 0 END AS budget_amount_if_relative_fisc_week_negative,
    CASE WHEN (derived_week_num <= fy_year_week_number) THEN Actual_Amount ELSE 0 END AS ytd_actual_amount_derived_week_base,
    (SAFE_DIVIDE(Budget_Volume, (derived_week_num*2))*5) AS budget_volume_daily_avg_calc_1,
    (Budget_Volume*5) AS budget_volume_daily_avg_calc_2,
    (SAFE_DIVIDE(Budget_Volume, 4)*5) AS budget_volume_daily_avg_calc_3,
    (SAFE_DIVIDE(Budget_Volume, derived_week_num)*5) AS budget_volume_daily_avg_calc_4,
    (SAFE_DIVIDE(Budget_Volume, (derived_week_num*5))*5) AS budget_volume_daily_avg_calc_5,
    SAFE_DIVIDE(Budget_Volume, derived_week_num) AS budget_volume_daily_avg_calc_6,
    (SAFE_DIVIDE(Budget_Volume, 2)*5) AS budget_volume_daily_avg_calc_7
  FROM
    DerivedAttributes
),
FinalMetrics AS (
  SELECT
    *,
    CASE WHEN (is_weekday_group) THEN budget_volume_daily_avg_calc_3 ELSE Budget_Volume END AS budget_volume_daily_avg_cond_1,
    CASE WHEN (is_weekday_group) THEN budget_volume_daily_avg_calc_5 ELSE budget_volume_daily_avg_calc_6 END AS budget_volume_daily_avg_cond_2,
    CASE
      WHEN ( (is_derived_week_num_26 OR is_derived_week_num_40) AND (is_the_australian OR is_courier_mail) ) THEN (CASE WHEN (is_weekday_group) THEN budget_volume_daily_avg_calc_3 ELSE Budget_Volume END)
      WHEN (standardized_publication_name = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, 2)*5)
      WHEN (standardized_publication_name = 'Weekly Times') THEN (Budget_Volume*5)
      WHEN (publication_group = 'PNG') THEN 0
      ELSE Budget_Volume
    END AS budget_volume_daily_avg_complex_1,
    CASE
      WHEN (is_the_australian OR is_courier_mail) THEN (CASE WHEN (is_weekday_group) THEN budget_volume_daily_avg_calc_5 ELSE budget_volume_daily_avg_calc_6 END)
      WHEN (standardized_publication_name = 'The Sportsman') THEN (SAFE_DIVIDE(Budget_Volume, (derived_week_num*2))*5)
      WHEN (standardized_publication_name = 'Weekly Times') THEN (SAFE_DIVIDE(Budget_Volume, derived_week_num)*5)
      WHEN (publication_group = 'PNG') THEN 0
      WHEN (is_weekday_group) THEN (SAFE_DIVIDE(Budget_Volume, (derived_week_num*5))*5)
      ELSE SAFE_DIVIDE(Budget_Volume, derived_week_num)
    END AS budget_volume_daily_avg_complex_2
  FROM
    CalculatedMetrics
)
SELECT
  fy_quarter_of_year AS fiscal_quarter_of_year,
  os_level_8 AS os_level_8_dim,
  standardized_publication_name AS publication_name_standardized,
  derived_region AS region_derived,
  channel_group_retail AS channel_group_retail,
  'YTD' AS period_type_ytd,
  SUM(budget_volume_if_relative_fisc_week_negative) AS budget_volume_negative_relative_fisc_week,
  SUM(volume - budget_volume_if_relative_fisc_week_negative) AS volume_minus_budget_volume_negative_relative_fisc_week,
  SUM(volume) AS total_volume,
  MIN(fy_quarter_of_year) AS min_fiscal_quarter_of_year,
  SUM(Budget_Volume) AS budget_volume_selected_period,
  SUM(budget_amount_if_relative_fisc_week_negative) AS budget_amount_selected_period,
  SUM(CASE WHEN (UPPER(SAFE_CAST(os_level_7 AS STRING)) = 'ALL SALES CHANNELS') THEN budget_amount_if_relative_fisc_week_negative ELSE 0 END) AS budget_amount_all_sales_channels,
  SUM(ytd_actual_amount_derived_week_base) AS ytd_actual_amount_derived_week,
  SUM(Actual_Amount) AS total_actual_amount,
  SUM(CASE WHEN (publication_group = 'PNG') THEN 0 WHEN (publication_group = '6 Day Pubs') THEN SAFE_DIVIDE(budget_volume_daily_avg_complex_1, 6) ELSE SAFE_DIVIDE(budget_volume_daily_avg_complex_1, 7) END) AS daily_avg_budget_volume_complex_1,
  SUM(CASE WHEN (publication_group = '6 Day Pubs') THEN SAFE_DIVIDE(budget_volume_daily_avg_complex_2, 6) ELSE SAFE_DIVIDE(budget_volume_daily_avg_complex_2, 7) END) AS daily_avg_budget_volume_complex_2
FROM
  FinalMetrics
WHERE
  os_level_8 != 'DTI Free Copies'
  AND standardized_publication_name IS NOT NULL
  AND channel_group_retail = 'Retail'
GROUP BY
  fy_quarter_of_year,
  os_level_8,
  standardized_publication_name,
  derived_region,
  channel_group_retail
LIMIT 1000;",SELECT * FROM `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` LIMIT 100;,"SELECT
  SUM(Actual_Amount) AS total_actual_amount_check,
  SUM(Budget_Volume) AS total_budget_volume_check,
  SUM(volume) AS total_volume_check,
  MIN(fy_quarter_of_year) AS min_fy_quarter_check,
  MAX(fy_year_week_number) AS max_fy_week_check,
  COUNT(DISTINCT os_level_8) AS distinct_os_level_8_count,
  COUNT(DISTINCT publication_name) AS distinct_publication_name_count
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control` AS control
    ON control.source_week_number = calendar.fy_year_week_number AND control.period_name IN ('CP', 'PY')
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND pub.l04_publication_code <> 'Free News & Lifestyle'
  AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
  AND os.gl_hierarchy_code = 'FY2025'
LIMIT 1;","SELECT
  publication_name,
  publication_code,
  CASE WHEN (publication_code = 'Post Courier') THEN 'PNG' ELSE publication_name END AS publication_name_transformed_check,
  os_level_10,
  CASE
    WHEN (os_level_10 IN ('Airlines', 'Hotels', 'Other Alternate', 'Other Alternate Channels')) THEN 'Alternative Channels'
    WHEN (os_level_10 IN ('Petrol and Convenience')) THEN 'Convenience Stores / Service Stations'
    WHEN (os_level_10 IN ('Agent & Dist')) THEN 'Newsagencies'
    WHEN (os_level_10 IN ('Home Delivery', 'Roadside Delivery', 'Unspecified Print Sub')) THEN 'Subscriptions'
    WHEN (os_level_10 IN ('Supermarkets')) THEN 'Supermarkets'
    ELSE 'Unspec Channel'
  END AS channel_group_check,
  os_level_8,
  relative_fisc_week_number,
  fy_month_of_year,
  fy_year_week_number
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
    ON os.gl_publication_code = pub.publication_code
  LEFT JOIN `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS calendar
    ON os.fiscal_week_id = calendar.fy_year_week_number
WHERE
  upper(os.os_level_6) = 'CIRCULATION'
  AND pub.l04_publication_code <> 'Free News & Lifestyle'
  AND pub.l06_publication_code NOT IN ('Food', 'Prestige')
  AND os.gl_hierarchy_code = 'FY2025'
LIMIT 100;",3,6a26c78f-0070-4fb3-88b8-691ee4a4485a
"-- THIS IS THE MAIN SQL TO RUN - Single query showing all key metrics calculated together with appropriate sampling and date filters.
WITH
  source_exclude AS (
    SELECT
      SAFE_CAST(t0.Category AS STRING) AS category_dim,
      SAFE_CAST(t0.Margin_Level AS STRING) AS margin_level,
      SAFE_CAST(t0.Product_L1 AS STRING) AS product_l1,
      SAFE_CAST(t0.Product_L2 AS STRING) AS product_l2,
      SAFE_CAST(t0.Product_L3 AS STRING) AS product_l3,
      SAFE_CAST(t0.Product_L4 AS STRING) AS product_l4,
      SAFE_CAST(t0.Product_Name AS STRING) AS product_name,
      SAFE_CAST(t0.Product_Revenue AS BIGNUMERIC) AS product_revenue_exclude,
      SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS BIGNUMERIC) AS product_revenue_merged_exclude
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
    LIMIT 10000
  ),
  source_pacman AS (
    SELECT
      SAFE_CAST(t0.Fiscal_Year AS INT64) AS fiscal_year,
      SAFE_CAST(t0.Product_L3 AS STRING) AS product_l3,
      SAFE_CAST(t0.Product_Revenue AS BIGNUMERIC) AS product_revenue_pacman
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
    LIMIT 10000
  )
SELECT
  COALESCE(se.product_l3, sp.product_l3) AS product_l3_unified,
  se.margin_level,
  se.product_name,
  se.product_l1,
  se.product_l2,
  se.product_l4,
  se.category_dim,
  sp.fiscal_year,
  SUM(se.product_revenue_exclude) AS total_product_revenue_exclude,
  SUM(se.product_revenue_merged_exclude) AS total_product_revenue_merged_exclude,
  SUM(sp.product_revenue_pacman) AS total_product_revenue_pacman,
  SUM(CASE WHEN sp.fiscal_year = 2025 THEN sp.product_revenue_pacman ELSE 0 END) AS total_product_revenue_pacman_2025,
  SUM(sp.fiscal_year) AS sum_of_fiscal_year_pacman -- As per Q3, though unusual
FROM
  source_exclude se
  FULL OUTER JOIN source_pacman sp ON SAFE_CAST(se.product_l3 AS STRING) = SAFE_CAST(sp.product_l3 AS STRING)
GROUP BY
  product_l3_unified,
  se.margin_level,
  se.product_name,
  se.product_l1,
  se.product_l2,
  se.product_l4,
  se.category_dim,
  sp.fiscal_year
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling.
SELECT
  'dv_exclude_product_l3_and_l4' AS table_name,
  SAFE_CAST(t0.Category AS STRING) AS Category,
  SAFE_CAST(t0.Margin_Level AS STRING) AS Margin_Level,
  SAFE_CAST(t0.Product_L1 AS STRING) AS Product_L1,
  SAFE_CAST(t0.Product_L2 AS STRING) AS Product_L2,
  SAFE_CAST(t0.Product_L3 AS STRING) AS Product_L3,
  SAFE_CAST(t0.Product_L4 AS STRING) AS Product_L4,
  SAFE_CAST(t0.Product_Name AS STRING) AS Product_Name,
  SAFE_CAST(t0.Product_Revenue AS BIGNUMERIC) AS Product_Revenue,
  SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS BIGNUMERIC) AS Product_Revenue_Merged_OneRow
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
LIMIT 10
UNION ALL
SELECT
  'dv_pacman_running_expense' AS table_name,
  NULL AS Category,
  NULL AS Margin_Level,
  NULL AS Product_L1,
  NULL AS Product_L2,
  SAFE_CAST(t0.Product_L3 AS STRING) AS Product_L3,
  NULL AS Product_L4,
  NULL AS Product_Name,
  SAFE_CAST(t0.Product_Revenue AS BIGNUMERIC) AS Product_Revenue,
  NULL AS Product_Revenue_Merged_OneRow
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
LIMIT 10;","-- Quick validation that all metric calculations work syntactically.
-- Query 1 Validation:
SELECT
  clmn1_,
  SUM(clmn8_) AS t0_qt_2rcko7psod,
  clmn9_ AS t0_qt_3tvri8osod,
  SUM(clmn7_) AS t0_qt_o435ceqsod
FROM (
  SELECT
    CASE
      WHEN SAFE_CAST('Category' AS STRING) = SAFE_CAST('Category' AS STRING) THEN SAFE_CAST(clmn0_ AS STRING)
      WHEN SAFE_CAST('Category' AS STRING) = SAFE_CAST('Product_Name' AS STRING) THEN SAFE_CAST(clmn6_ AS STRING)
      WHEN SAFE_CAST('Category' AS STRING) = SAFE_CAST('Product_L1' AS STRING) THEN SAFE_CAST(clmn2_ AS STRING)
      WHEN SAFE_CAST('Category' AS STRING) = SAFE_CAST('Product_L2' AS STRING) THEN SAFE_CAST(clmn3_ AS STRING)
      WHEN SAFE_CAST('Category' AS STRING) = SAFE_CAST('Product_L3' AS STRING) THEN SAFE_CAST(clmn4_ AS STRING)
      WHEN SAFE_CAST('Category' AS STRING) = SAFE_CAST('Product_L4' AS STRING) THEN SAFE_CAST(clmn5_ AS STRING)
      ELSE SAFE_CAST(clmn0_ AS STRING)
    END AS clmn9_,
    SAFE_CAST(clmn1_ AS STRING) AS clmn1_,
    SAFE_CAST(clmn7_ AS BIGNUMERIC) AS clmn7_,
    SAFE_CAST(clmn8_ AS BIGNUMERIC) AS clmn8_
  FROM (
    SELECT
      SAFE_CAST(t0.Category AS STRING) AS clmn0_,
      SAFE_CAST(t0.Margin_Level AS STRING) AS clmn1_,
      SAFE_CAST(t0.Product_L1 AS STRING) AS clmn2_,
      SAFE_CAST(t0.Product_L2 AS STRING) AS clmn3_,
      SAFE_CAST(t0.Product_L3 AS STRING) AS clmn4_,
      SAFE_CAST(t0.Product_L4 AS STRING) AS clmn5_,
      SAFE_CAST(t0.Product_Name AS STRING) AS clmn6_,
      SAFE_CAST(t0.Product_Revenue AS BIGNUMERIC) AS clmn7_,
      SAFE_CAST(t0.Product_Revenue_Merged_OneRow AS BIGNUMERIC) AS clmn8_
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_exclude_product_l3_and_l4` AS t0
  )
)
GROUP BY
  clmn1_,
  t0_qt_3tvri8osod
LIMIT 10;

-- Query 2 Validation:
SELECT
  SUM(clmn1_) AS t0_qt_r8kqm9z8od
FROM (
  SELECT
    SAFE_CAST(t0.Fiscal_Year AS INT64) AS clmn0_,
    SAFE_CAST(t0.Product_Revenue AS BIGNUMERIC) AS clmn1_
  FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
)
WHERE
  clmn0_ IN (2025)
LIMIT 10;

-- Query 3 Validation:
SELECT
  clmn1_,
  SUM(clmn0_) AS t0_qt_s9v8abksod
FROM (
  SELECT
    SAFE_CAST(t0.Fiscal_Year AS INT64) AS clmn0_,
    SAFE_CAST(t0.Product_L3 AS STRING) AS clmn1_
  FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense` AS t0
)
GROUP BY
  clmn1_
ORDER BY
  t0_qt_s9v8abksod DESC
LIMIT 10;","-- Query to validate key business logic, filters, and data quality.
-- 1. Check for hardcoded fiscal year 2025 in dv_pacman_running_expense
SELECT
  'Hardcoded Fiscal Year 2025 Check' AS rule_name,
  COUNTIF(SAFE_CAST(Fiscal_Year AS INT64) = 2025) AS count_2025_records,
  COUNT(*) AS total_records,
  CASE
    WHEN COUNTIF(SAFE_CAST(Fiscal_Year AS INT64) = 2025) > 0 THEN 'Found records for hardcoded year 2025.'
    ELSE 'No records for hardcoded year 2025, but the filter exists in dashboard query.'
  END AS observation,
  'Recommendation: Parameterize Fiscal_Year filter in Looker Studio.' AS recommendation
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense`
LIMIT 10;

-- 2. Validate the dynamic dimension logic (conceptual check, not executable as a single query)
-- This logic is embedded in the Looker Studio generated SQL and depends on a parameter.
-- To validate, one would typically inspect the dashboard's configuration or run queries with different parameter values.
SELECT
  'Dynamic Dimension Logic Check (Conceptual)' AS rule_name,
  'The dashboard uses a CASE statement to dynamically select a product hierarchy dimension (Category, Product_Name, Product_L1-L4) based on a Looker Studio parameter. This is a common pattern for flexible reporting.' AS observation,
  'Recommendation: Ensure the underlying data for all product hierarchy levels is consistent and complete. Document the parameter usage.' AS recommendation
LIMIT 10;

-- 3. Check the unusual SUM(Fiscal_Year) aggregation
SELECT
  'Unusual SUM(Fiscal_Year) Aggregation Check' AS rule_name,
  SAFE_CAST(Product_L3 AS STRING) AS product_l3_sample,
  SUM(SAFE_CAST(Fiscal_Year AS INT64)) AS sum_of_fiscal_year_sample,
  COUNT(DISTINCT SAFE_CAST(Fiscal_Year AS INT64)) AS distinct_fiscal_years_count,
  'Observation: SUM(Fiscal_Year) is used as a metric, which is highly unusual. This might indicate a misconfigured metric or a specific, non-standard business requirement.' AS observation,
  'Recommendation: Verify the business requirement for this metric. If it is intended to represent a count of years or a specific year, consider using COUNT(DISTINCT Fiscal_Year) or MAX(Fiscal_Year) instead.' AS recommendation
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_pacman_running_expense`
GROUP BY
  product_l3_sample
LIMIT 10;",4,6de90f2a-b3f3-46fe-a4fe-13474b2d6618
"SELECT
    DATETIME_TRUNC(SAFE_CAST(t0.data_load_datetime AS DATETIME), SECOND) AS data_load_datetime_second_grain,
    SAFE_CAST(t0.financial_short_month AS STRING) AS financial_short_month,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
    SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
    SAFE_CAST(t0.cost_model_type AS STRING) AS cost_model_type,
    SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
    SAFE_CAST(t0.revenue_group_subtype AS STRING) AS revenue_group_subtype,
    SAFE_CAST(t0.revenue_type_level2 AS STRING) AS revenue_type_level2,
    SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code,
    SUM(SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC)) AS total_gross_revenue_amount
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IS NOT NULL
    AND SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency'
    AND SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Billed', 'Booked')
    AND SAFE_CAST(t0.financial_year AS STRING) IN ('2025')
GROUP BY
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10
ORDER BY
    financial_year DESC, financial_short_month DESC
LIMIT 10000;","SELECT
    t0.data_load_datetime,
    t0.financial_short_month,
    t0.financial_year,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.cost_model_type,
    t0.advertiser_name,
    t0.gross_revenue_amount,
    t0.revenue_group_subtype,
    t0.revenue_type_level2,
    t0.source_system_code
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2025') -- Use a common filter for sampling
LIMIT 100;","SELECT
    DATETIME_TRUNC(SAFE_CAST(t0.data_load_datetime AS DATETIME), SECOND) AS data_load_datetime_second_grain,
    SAFE_CAST(t0.financial_short_month AS STRING) AS financial_short_month,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
    SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
    SAFE_CAST(t0.cost_model_type AS STRING) AS cost_model_type,
    SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
    SAFE_CAST(t0.revenue_group_subtype AS STRING) AS revenue_group_subtype,
    SAFE_CAST(t0.revenue_type_level2 AS STRING) AS revenue_type_level2,
    SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code,
    SUM(SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC)) AS total_gross_revenue_amount
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2025') -- Apply a common filter for a valid sample
GROUP BY
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10
LIMIT 10;","-- Check distribution of revenue_transaction_status
SELECT
    SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
GROUP BY
    1
ORDER BY
    record_count DESC;

-- Check distribution of source_publishing_division, especially for 'Medium Rare Content Agency'
SELECT
    SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
GROUP BY
    1
ORDER BY
    record_count DESC;

-- Check distribution of financial_year and financial_short_month
SELECT
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    SAFE_CAST(t0.financial_short_month AS STRING) AS financial_short_month,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
GROUP BY
    1, 2
ORDER BY
    financial_year DESC, record_count DESC;

-- Check programmatic specific filters
SELECT
    SAFE_CAST(t0.revenue_type_level2 AS STRING) AS revenue_type_level2,
    SAFE_CAST(t0.revenue_group_subtype AS STRING) AS revenue_group_subtype,
    SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
    SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.revenue_type_level2 AS STRING) = 'Programmatic'
    AND SAFE_CAST(t0.revenue_group_subtype AS STRING) IN ('Programmatic Source', 'Digital')
    AND SAFE_CAST(t0.advertiser_name AS STRING) = 'Foxtel Management Pty Ltd'
    AND SAFE_CAST(t0.source_system_code AS STRING) = 'PLUTO'
GROUP BY
    1, 2, 3, 4
ORDER BY
    record_count DESC
LIMIT 100;",5,705edcb5-737a-4600-b1a7-11870177f97a
"SELECT
    ProductType,
    TransactionTypeCategory,
    SUM(RevenueNet) AS TotalRevenueNet
FROM (
    SELECT
        t0.ProductType,
        t0.RevenueNet,
        CASE
            WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
            WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
            WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
            ELSE SAFE_CAST(t0.TransactionType AS STRING)
        END AS TransactionTypeCategory
    FROM
        `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
)
GROUP BY
    ProductType,
    TransactionTypeCategory
LIMIT 1000;","SELECT
    t0.ProductType,
    t0.TransactionType,
    t0.RevenueNet
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
LIMIT 100;","SELECT
    t0.ProductType,
    t0.RevenueNet,
    CASE
        WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
        WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
        WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
        ELSE SAFE_CAST(t0.TransactionType AS STRING)
    END AS DerivedTransactionTypeCategory
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
LIMIT 10;","-- Validate TransactionType categorization logic and understand the source view's nature.
SELECT DISTINCT
    t0.TransactionType,
    CASE
        WHEN (t0.TransactionType = 'AG' OR t0.TransactionType = 'PG - CPM' OR t0.TransactionType = 'PG - CPD') THEN 'Guaranteed'
        WHEN (t0.TransactionType = 'Deal' OR t0.TransactionType = 'pmp' OR t0.TransactionType = 'PMP_DEAL' OR t0.TransactionType = 'UFR') THEN 'Deal'
        WHEN (t0.TransactionType = 'Open Auction' OR t0.TransactionType = 'RTB' OR t0.TransactionType = 'Unknown') THEN 'Open Auction'
        ELSE SAFE_CAST(t0.TransactionType AS STRING)
    END AS DerivedTransactionTypeCategory
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_60_day_view` AS t0
LIMIT 100;

-- Note: The source table 'programmatic_60_day_view' implies a rolling 60-day window.
-- This is a critical implicit business rule for data freshness and scope, though not explicitly handled by date filters in these specific queries.",6,b15d856f-e3ce-4991-bf2a-92395390524f
"SELECT
    t0.advertiser,
    t0.buyer,
    t0.source,
    UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS source_transaction_type_upper,
    SAFE_CAST(t0.financialyear AS INT64) AS financial_year,
    SAFE_CAST(t0.financialmonthnumber AS INT64) AS financial_month_number,
    SAFE_CAST(t0.financialquarter AS STRING) AS financial_quarter,
    DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS financial_date,
    SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS reporting_month,
    CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) AS financial_period_fyqq,
    SUM(SAFE_CAST(t0.revenuenet AS BIGNUMERIC)) AS total_revenue_net
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
    1=1
    -- Example filters from dashboard queries (can be parameterized or removed for full dataset analysis)
    -- AND UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) IN ('DEAL', 'UFR', 'PG - CPD', 'PG - CPM', 'DIRECT')
    -- AND CONCAT('FY',SUBSTR(SAFE_CAST(t0.financialyear AS STRING), 3, 2),' ',SAFE_CAST(t0.financialquarter AS STRING)) IN ('FY25 Q2', 'FY25 Q3', 'FY25 Q4')
    -- AND SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) IN (DATE '2024-11-01', DATE '2024-12-01', DATE '2025-01-01', DATE '2025-02-01', DATE '2025-03-01', DATE '2025-04-01', DATE '2025-05-01', DATE '2025-06-01')
    -- AND t0.advertiser IN ('The Smith Family *', 'Kmart Corporation *', 'Target Corporation *', 'Myer *')
    -- AND t0.source IN ('DFP', 'Index Exchange', 'Rubicon') -- Note: Query 1 had a redundant broader filter before this narrower one.
GROUP BY
    t0.advertiser,
    t0.buyer,
    t0.source,
    source_transaction_type_upper,
    financial_year,
    financial_month_number,
    financial_quarter,
    financial_date,
    reporting_month,
    financial_period_fyqq
ORDER BY
    reporting_month, t0.advertiser
LIMIT 100;",SELECT * FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` LIMIT 10;,"SELECT
    COUNT(DISTINCT t0.advertiser) AS distinct_advertisers,
    COUNT(DISTINCT t0.buyer) AS distinct_buyers,
    COUNT(DISTINCT t0.source) AS distinct_sources,
    COUNT(DISTINCT UPPER(SAFE_CAST(t0.source_transactiontype AS STRING))) AS distinct_source_transaction_types,
    COUNT(DISTINCT SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE)) AS distinct_reporting_months,
    SUM(SAFE_CAST(t0.revenuenet AS BIGNUMERIC)) AS total_revenue_net_sample,
    MIN(SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE)) AS min_reporting_month,
    MAX(SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE)) AS max_reporting_month
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
WHERE
    SAFE_CAST(t0.financialyear AS INT64) >= 2020 -- Limit data for validation
LIMIT 1;","WITH SourceData AS (
    SELECT
        SAFE_CAST(t0.financialyear AS INT64) AS financial_year,
        SAFE_CAST(t0.financialmonthnumber AS INT64) AS financial_month_number,
        DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS financial_date,
        SAFE_CAST(DATETIME_TRUNC(DATETIME_SUB(SAFE_CAST(DATE(SAFE_CAST(t0.financialyear AS INT64), SAFE_CAST(t0.financialmonthnumber AS INT64), 1) AS DATETIME), INTERVAL 6 MONTH), MONTH) AS DATE) AS reporting_month,
        t0.source AS original_source,
        UPPER(SAFE_CAST(t0.source_transactiontype AS STRING)) AS source_transaction_type_upper,
        SAFE_CAST(t0.revenuenet AS BIGNUMERIC) AS revenuenet,
        t0.advertiser
    FROM
        `ncau-data-newsquery-prd.prstn_advertising.programmatic_weekly_master` AS t0
    WHERE
        SAFE_CAST(t0.financialyear AS INT64) >= 2024 -- Look at recent data
        AND SAFE_CAST(t0.financialyear AS INT64) <= 2025
        AND t0.advertiser IN ('The Smith Family *', 'Kmart Corporation *', 'Target Corporation *', 'Myer *') -- Include relevant advertisers
)
SELECT
    financial_year,
    financial_month_number,
    financial_date,
    reporting_month,
    original_source,
    source_transaction_type_upper,
    advertiser,
    SUM(revenuenet) AS total_revenue_net,
    COUNT(1) AS record_count,
    -- Check the effect of the redundant filter from Query 1
    CASE
        WHEN original_source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor') THEN TRUE
        ELSE FALSE
    END AS is_broad_source_filter_met,
    CASE
        WHEN original_source IN ('DFP', 'Index Exchange', 'Rubicon') THEN TRUE
        ELSE FALSE
    END AS is_narrow_source_filter_met,
    -- This shows if both conditions from Query 1's source filter are met
    CASE
        WHEN (original_source IN ('AdX', 'AppNexus', 'DFP', 'Index Exchange', 'InSkin', 'Kargo', 'Playground XYZ', 'PubMatic', 'Rubicon', 'Tremor') AND original_source IN ('DFP', 'Index Exchange', 'Rubicon')) THEN TRUE
        ELSE FALSE
    END AS is_query1_combined_source_filter_met
FROM
    SourceData
GROUP BY
    financial_year,
    financial_month_number,
    financial_date,
    reporting_month,
    original_source,
    source_transaction_type_upper,
    advertiser,
    is_broad_source_filter_met,
    is_narrow_source_filter_met,
    is_query1_combined_source_filter_met
ORDER BY
    financial_date, original_source
LIMIT 100;",7,783f341c-8660-4e90-bab8-9bc860119cf5
"SELECT
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.financial_week AS STRING) AS financial_week,
  SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code,
  SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
  SAFE_CAST(t0.invoice_number AS STRING) AS invoice_number,
  SAFE_CAST(t0.unified_publication_gl_code AS STRING) AS unified_publication_gl_code,
  DATETIME_TRUNC(t0.data_load_datetime, SECOND) AS data_load_datetime_truncated,
  SUM(t0.gross_revenue_amount) AS total_gross_revenue,
  SUM(SAFE_CAST(t0.financial_week AS INT64)) AS total_financial_week_id_sum_for_ordering
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Booked', 'Billed') AND
  (SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL) AND
  SAFE_CAST(t0.invoice_number AS STRING) = '-1' AND
  SAFE_CAST(t0.source_system_code AS STRING) IN ('PLUTO', 'CPQ', 'ADPT') AND
  SAFE_CAST(t0.financial_year AS STRING) IN ('2025') AND
  SAFE_CAST(t0.unified_publication_gl_code AS STRING) IN ('9707', '9655', '9658')
GROUP BY
  financial_year,
  financial_week,
  source_system_code,
  revenue_transaction_status,
  source_publishing_division,
  invoice_number,
  unified_publication_gl_code,
  data_load_datetime_truncated
ORDER BY financial_year DESC, total_financial_week_id_sum_for_ordering DESC
LIMIT 1000;","SELECT
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.financial_week AS STRING) AS financial_week,
  SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC) AS gross_revenue_amount,
  SAFE_CAST(t0.invoice_number AS STRING) AS invoice_number,
  SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
  SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code,
  SAFE_CAST(t0.data_load_datetime AS DATETIME) AS data_load_datetime,
  SAFE_CAST(t0.unified_publication_gl_code AS STRING) AS unified_publication_gl_code
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
LIMIT 100;

SELECT
  SAFE_CAST(t0.fiscal_week_id AS STRING) AS fiscal_week_id,
  SAFE_CAST(t0.os_level_5 AS STRING) AS os_level_5
FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement` AS t0
LIMIT 100;","SELECT
  SUM(SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC)) AS test_gross_revenue,
  COUNT(1) AS test_record_count,
  DATETIME_TRUNC(MAX(t0.data_load_datetime), SECOND) AS test_latest_data_load
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE FALSE;

SELECT
  COUNT(1) AS test_finance_record_count
FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement` AS t0
WHERE FALSE;","SELECT
  SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
  SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
  SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
  SAFE_CAST(t0.invoice_number AS STRING) AS invoice_number,
  SAFE_CAST(t0.source_system_code AS STRING) AS source_system_code,
  SAFE_CAST(t0.unified_publication_gl_code AS STRING) AS unified_publication_gl_code,
  COUNT(1) AS record_count
FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
  SAFE_CAST(t0.financial_year AS STRING) IN ('2025') OR
  SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Booked', 'Billed') OR
  (SAFE_CAST(t0.source_publishing_division AS STRING) = 'Medium Rare Content Agency' AND t0.source_publishing_division IS NOT NULL) OR
  SAFE_CAST(t0.invoice_number AS STRING) = '-1' OR
  SAFE_CAST(t0.source_system_code AS STRING) IN ('PLUTO', 'CPQ', 'ADPT') OR
  SAFE_CAST(t0.unified_publication_gl_code AS STRING) IN ('9707', '9655', '9658')
GROUP BY 1, 2, 3, 4, 5, 6
LIMIT 100;

SELECT
  SAFE_CAST(t0.fiscal_week_id AS STRING) AS fiscal_week_id,
  COUNT(1) AS record_count
FROM `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement` AS t0
WHERE
  SAFE_CAST(t0.fiscal_week_id AS STRING) IN ('202548', '202549', '202550', '202551')
GROUP BY 1
LIMIT 100;",8,77c68c35-20ce-477a-b216-0c781d43a8ca
"WITH
  BaseData AS (
    SELECT
      t0.DOW_Today,
      t0.advertiser_parent,
      t0.booking_line_created_date,
      t0.financial_quarter,
      t0.financial_short_month,
      t0.financial_year,
      t0.fix_date_lod,
      t0.gross_revenue_amount,
      t0.is_future_period_flag,
      t0.pipeline,
      t0.relative_fy_month_offset,
      t0.relative_fy_week_offset,
      t0.relative_fy_year_offset,
      t0.revenue_group_subtype,
      t0.revenue_type,
      t0.sales_segment_l_2_name_sync,
      t0.ss_lgb,
      t0.xtend_flag,
      -- Hardcoded reference date for calculations (clmn0_)
      DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney') AS reference_date
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  ),
  CalculatedFields1 AS (
    SELECT
      DOW_Today,
      advertiser_parent,
      booking_line_created_date,
      financial_quarter,
      financial_short_month,
      financial_year,
      fix_date_lod,
      gross_revenue_amount,
      is_future_period_flag,
      pipeline,
      relative_fy_month_offset,
      relative_fy_week_offset,
      relative_fy_year_offset,
      revenue_group_subtype,
      revenue_type,
      sales_segment_l_2_name_sync,
      ss_lgb,
      xtend_flag,
      -- clmn19_
      DATETIME_ADD(SAFE_CAST(reference_date AS DATETIME), INTERVAL -365 DAY) AS reference_date_minus_365_days,
      -- clmn20_
      (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
      -- clmn21_
      PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS parsed_booking_line_created_date,
      -- clmn22_
      SAFE_CAST(financial_quarter AS INT64) AS financial_quarter_int,
      -- clmn23_
      CASE
        WHEN (financial_short_month = 'Jul') THEN '1.Jul'
        WHEN (financial_short_month = 'Aug') THEN '2.Aug'
        WHEN (financial_short_month = 'Sep') THEN '3.Sep'
        WHEN (financial_short_month = 'Oct') THEN '4.Oct'
        WHEN (financial_short_month = 'Nov') THEN '5.Nov'
        WHEN (financial_short_month = 'Dec') THEN '6.Dec'
        WHEN (financial_short_month = 'Jan') THEN '7.Jan'
        WHEN (financial_short_month = 'Feb') THEN '8.Feb'
        WHEN (financial_short_month = 'Mar') THEN '9.Mar'
        WHEN (financial_short_month = 'Apr') THEN '10.Apr'
        WHEN (financial_short_month = 'May') THEN '11.May'
        WHEN (financial_short_month = 'Jun') THEN '12.Jun'
        ELSE NULL
      END AS financial_short_month_ordered,
      -- clmn24_
      SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_amount_k,
      -- clmn25_
      (is_future_period_flag = 'N') AS is_not_future_period_flag_N,
      -- clmn26_
      (relative_fy_week_offset = 0) AS is_relative_fy_week_offset_zero,
      -- clmn27_
      (relative_fy_week_offset < 0) AS is_relative_fy_week_offset_negative,
      -- clmn28_ (and clmn32_)
      CASE WHEN (relative_fy_year_offset = -1) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_prev_fy,
      -- clmn29_
      (relative_fy_year_offset = 0) AS is_relative_fy_year_offset_zero,
      -- clmn30_
      (relative_fy_year_offset = -1) AS is_relative_fy_year_offset_prev_fy,
      -- clmn31_ (and clmn33_)
      CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_curr_fy,
      -- clmn34_
      (revenue_group_subtype = 'DIGITAL') AS is_revenue_group_subtype_digital,
      -- clmn35_
      (revenue_type = 'DIGITAL') AS is_revenue_type_digital,
      -- clmn36_
      (sales_segment_l_2_name_sync = 'Digital Other') AS is_sales_segment_digital_other,
      -- clmn37_
      SAFE_DIVIDE((ss_lgb * DOW_Today), 7) AS ss_lgb_weekly_avg,
      -- clmn38_
      SAFE_DIVIDE(ss_lgb, 1000) AS ss_lgb_k,
      -- clmn39_
      CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_or_xtend
    FROM
      BaseData
  ),
  CalculatedFields2 AS (
    SELECT
      *,
      -- clmn40_ (and clmn42_)
      CASE WHEN (is_relative_fy_year_offset_zero) THEN gross_revenue_amount_k ELSE 0 END AS gross_revenue_amount_k_curr_fy,
      -- clmn41_
      CASE WHEN (relative_fy_year_offset = 1) THEN gross_revenue_amount_k ELSE 0 END AS gross_revenue_amount_k_next_fy,
      -- clmn43_
      CASE WHEN (is_relative_fy_year_offset_zero AND is_relative_fy_week_offset_negative) THEN ss_lgb ELSE 0 END AS ss_lgb_curr_fy_prev_week_offset,
      -- clmn44_
      CASE WHEN (is_relative_fy_year_offset_zero AND is_not_future_period_flag_N) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_curr_fy_not_future,
      -- clmn45_
      CASE WHEN (is_revenue_type_digital AND is_revenue_group_subtype_digital AND is_sales_segment_digital_other AND is_not_doubleclick_advertiser) THEN fix_date_lod ELSE parsed_booking_line_created_date END AS lod_or_booking_date,
      -- clmn46_
      CASE WHEN (is_relative_fy_year_offset_zero AND is_relative_fy_week_offset_zero) THEN ss_lgb_weekly_avg ELSE 0 END AS ss_lgb_weekly_avg_curr_fy_curr_week,
      -- clmn47_ (and clmn48_)
      CASE WHEN (is_relative_fy_year_offset_zero) THEN ss_lgb_k ELSE 0 END AS ss_lgb_k_curr_fy
    FROM
      CalculatedFields1
  ),
  CalculatedFields3 AS (
    SELECT
      *,
      -- clmn49_
      SAFE_DIVIDE(gross_revenue_amount_curr_fy_not_future, 1000) AS gross_revenue_amount_curr_fy_not_future_k,
      -- clmn50_
      (SAFE_CAST(lod_or_booking_date AS DATETIME) <= reference_date_minus_365_days) AS lod_or_booking_date_le_ref_date_minus_365
    FROM
      CalculatedFields2
  ),
  CalculatedFields4 AS (
    SELECT
      *,
      -- clmn51_ (and clmn52_)
      CASE WHEN (is_relative_fy_year_offset_prev_fy AND lod_or_booking_date_le_ref_date_minus_365) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_prev_fy_lod_le_ref_date_minus_365
    FROM
      CalculatedFields3
  )
SELECT
  SUM(ss_lgb_weekly_avg_curr_fy_curr_week) AS Total_SS_LGB_Weekly_Avg_Current_FY_Current_Week,
  MAX(is_sales_segment_digital_other) AS Is_Sales_Segment_Digital_Other,
  SUM(gross_revenue_amount_k_curr_fy) AS Total_Gross_Revenue_K_Current_FY,
  SUM(gross_revenue_amount_curr_fy) AS Total_Gross_Revenue_Current_FY,
  SUM(gross_revenue_amount_curr_fy_not_future_k) AS Total_Gross_Revenue_Current_FY_Not_Future_K,
  MAX(relative_fy_month_offset) AS Max_Relative_FY_Month_Offset,
  SUM(pipeline) AS Total_Pipeline,
  SUM(ss_lgb_k_curr_fy) AS Total_SS_LGB_K_Current_FY,
  SUM(ss_lgb_curr_fy_prev_week_offset) AS Total_SS_LGB_Current_FY_Prev_Week_Offset,
  MAX(relative_fy_year_offset) AS Max_Relative_FY_Year_Offset,
  financial_short_month,
  financial_year,
  SUM(gross_revenue_amount) AS Total_Gross_Revenue_Amount,
  financial_short_month_ordered,
  SUM(gross_revenue_amount_prev_fy) AS Total_Gross_Revenue_Amount_Prev_FY,
  SUM(ss_lgb_k_curr_fy) AS Total_SS_LGB_K_Current_FY_Duplicate,
  SUM(gross_revenue_amount_curr_fy) AS Total_Gross_Revenue_Amount_Current_FY_Duplicate,
  SUM((gross_revenue_amount_k_curr_fy - ss_lgb_k_curr_fy)) AS Total_Gross_Revenue_K_Minus_SS_LGB_K_Current_FY,
  SUM(gross_revenue_amount_prev_fy_lod_le_ref_date_minus_365) AS Total_Gross_Revenue_Amount_Prev_FY_LOD_Le_Ref_Date_Minus_365,
  SUM(gross_revenue_amount_k_curr_fy) AS Total_Gross_Revenue_K_Current_FY_Duplicate2,
  SUM(ss_lgb) AS Total_SS_LGB,
  SUM(SAFE_DIVIDE(gross_revenue_amount_prev_fy_lod_le_ref_date_minus_365, 1000)) AS Total_Gross_Revenue_Amount_Prev_FY_LOD_Le_Ref_Date_Minus_365_K,
  SUM(SAFE_DIVIDE(gross_revenue_amount_curr_fy_not_future, 1000)) AS Total_Gross_Revenue_Amount_Current_FY_Not_Future_K_Duplicate,
  revenue_type_or_xtend,
  SUM(gross_revenue_amount_k_next_fy) AS Total_Gross_Revenue_K_Next_FY,
  financial_quarter_int,
  SUM(SAFE_DIVIDE(gross_revenue_amount_prev_fy, 1000)) AS Total_Gross_Revenue_Amount_Prev_FY_K,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync
FROM
  CalculatedFields4
GROUP BY
  financial_short_month,
  financial_year,
  financial_short_month_ordered,
  revenue_type_or_xtend,
  financial_quarter_int,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync
LIMIT 100;","SELECT
  financial_short_month,
  financial_year,
  relative_fy_month_offset,
  relative_fy_year_offset,
  gross_revenue_amount,
  pipeline,
  sales_segment_l_2_name_sync,
  ss_lgb,
  xtend_flag,
  DOW_Today,
  advertiser_parent,
  booking_line_created_date,
  financial_quarter,
  fix_date_lod,
  is_future_period_flag,
  revenue_group_subtype,
  revenue_type,
  unified_publication_name,
  product_group
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
LIMIT 10;","WITH
  BaseData AS (
    SELECT
      t0.DOW_Today,
      t0.advertiser_parent,
      t0.booking_line_created_date,
      t0.financial_quarter,
      t0.financial_short_month,
      t0.financial_year,
      t0.fix_date_lod,
      t0.gross_revenue_amount,
      t0.is_future_period_flag,
      t0.pipeline,
      t0.relative_fy_month_offset,
      t0.relative_fy_week_offset,
      t0.relative_fy_year_offset,
      t0.revenue_group_subtype,
      t0.revenue_type,
      t0.sales_segment_l_2_name_sync,
      t0.ss_lgb,
      t0.xtend_flag,
      DATE(TIMESTAMP '2025-01-06 23:58:33.668651+00', 'Australia/Sydney') AS reference_date
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
  ),
  CalculatedFields1 AS (
    SELECT
      DOW_Today,
      advertiser_parent,
      booking_line_created_date,
      financial_quarter,
      financial_short_month,
      financial_year,
      fix_date_lod,
      gross_revenue_amount,
      is_future_period_flag,
      pipeline,
      relative_fy_month_offset,
      relative_fy_week_offset,
      relative_fy_year_offset,
      revenue_group_subtype,
      revenue_type,
      sales_segment_l_2_name_sync,
      ss_lgb,
      xtend_flag,
      DATETIME_ADD(SAFE_CAST(reference_date AS DATETIME), INTERVAL -365 DAY) AS reference_date_minus_365_days,
      (advertiser_parent != 'DOUBLECLICK') AS is_not_doubleclick_advertiser,
      PARSE_DATE('%Y-%m-%d', booking_line_created_date) AS parsed_booking_line_created_date,
      SAFE_CAST(financial_quarter AS INT64) AS financial_quarter_int,
      CASE
        WHEN (financial_short_month = 'Jul') THEN '1.Jul' WHEN (financial_short_month = 'Aug') THEN '2.Aug' WHEN (financial_short_month = 'Sep') THEN '3.Sep' WHEN (financial_short_month = 'Oct') THEN '4.Oct' WHEN (financial_short_month = 'Nov') THEN '5.Nov' WHEN (financial_short_month = 'Dec') THEN '6.Dec' WHEN (financial_short_month = 'Jan') THEN '7.Jan' WHEN (financial_short_month = 'Feb') THEN '8.Feb' WHEN (financial_short_month = 'Mar') THEN '9.Mar' WHEN (financial_short_month = 'Apr') THEN '10.Apr' WHEN (financial_short_month = 'May') THEN '11.May' WHEN (financial_short_month = 'Jun') THEN '12.Jun' ELSE NULL
      END AS financial_short_month_ordered,
      SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_amount_k,
      (is_future_period_flag = 'N') AS is_not_future_period_flag_N,
      (relative_fy_week_offset = 0) AS is_relative_fy_week_offset_zero,
      (relative_fy_week_offset < 0) AS is_relative_fy_week_offset_negative,
      CASE WHEN (relative_fy_year_offset = -1) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_prev_fy,
      (relative_fy_year_offset = 0) AS is_relative_fy_year_offset_zero,
      (relative_fy_year_offset = -1) AS is_relative_fy_year_offset_prev_fy,
      CASE WHEN (relative_fy_year_offset = 0) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_curr_fy,
      (revenue_group_subtype = 'DIGITAL') AS is_revenue_group_subtype_digital,
      (revenue_type = 'DIGITAL') AS is_revenue_type_digital,
      (sales_segment_l_2_name_sync = 'Digital Other') AS is_sales_segment_digital_other,
      SAFE_DIVIDE((ss_lgb * DOW_Today), 7) AS ss_lgb_weekly_avg,
      SAFE_DIVIDE(ss_lgb, 1000) AS ss_lgb_k,
      CASE WHEN (xtend_flag = 'Y') THEN 'XTEND' ELSE revenue_type END AS revenue_type_or_xtend
    FROM BaseData
  ),
  CalculatedFields2 AS (
    SELECT
      *,
      CASE WHEN (is_relative_fy_year_offset_zero) THEN gross_revenue_amount_k ELSE 0 END AS gross_revenue_amount_k_curr_fy,
      CASE WHEN (relative_fy_year_offset = 1) THEN gross_revenue_amount_k ELSE 0 END AS gross_revenue_amount_k_next_fy,
      CASE WHEN (is_relative_fy_year_offset_zero AND is_relative_fy_week_offset_negative) THEN ss_lgb ELSE 0 END AS ss_lgb_curr_fy_prev_week_offset,
      CASE WHEN (is_relative_fy_year_offset_zero AND is_not_future_period_flag_N) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_curr_fy_not_future,
      CASE WHEN (is_revenue_type_digital AND is_revenue_group_subtype_digital AND is_sales_segment_digital_other AND is_not_doubleclick_advertiser) THEN fix_date_lod ELSE parsed_booking_line_created_date END AS lod_or_booking_date,
      CASE WHEN (is_relative_fy_year_offset_zero AND is_relative_fy_week_offset_zero) THEN ss_lgb_weekly_avg ELSE 0 END AS ss_lgb_weekly_avg_curr_fy_curr_week,
      CASE WHEN (is_relative_fy_year_offset_zero) THEN ss_lgb_k ELSE 0 END AS ss_lgb_k_curr_fy
    FROM CalculatedFields1
  ),
  CalculatedFields3 AS (
    SELECT
      *,
      SAFE_DIVIDE(gross_revenue_amount_curr_fy_not_future, 1000) AS gross_revenue_amount_curr_fy_not_future_k,
      (SAFE_CAST(lod_or_booking_date AS DATETIME) <= reference_date_minus_365_days) AS lod_or_booking_date_le_ref_date_minus_365
    FROM CalculatedFields2
  ),
  CalculatedFields4 AS (
    SELECT
      *,
      CASE WHEN (is_relative_fy_year_offset_prev_fy AND lod_or_booking_date_le_ref_date_minus_365) THEN gross_revenue_amount ELSE 0 END AS gross_revenue_amount_prev_fy_lod_le_ref_date_minus_365
    FROM CalculatedFields3
  )
SELECT
  SUM(ss_lgb_weekly_avg_curr_fy_curr_week) AS Total_SS_LGB_Weekly_Avg_Current_FY_Current_Week,
  MAX(is_sales_segment_digital_other) AS Is_Sales_Segment_Digital_Other,
  SUM(gross_revenue_amount_k_curr_fy) AS Total_Gross_Revenue_K_Current_FY,
  SUM(gross_revenue_amount_curr_fy) AS Total_Gross_Revenue_Current_FY,
  SUM(gross_revenue_amount_curr_fy_not_future_k) AS Total_Gross_Revenue_Current_FY_Not_Future_K,
  MAX(relative_fy_month_offset) AS Max_Relative_FY_Month_Offset,
  SUM(pipeline) AS Total_Pipeline,
  SUM(ss_lgb_k_curr_fy) AS Total_SS_LGB_K_Current_FY,
  SUM(ss_lgb_curr_fy_prev_week_offset) AS Total_SS_LGB_Current_FY_Prev_Week_Offset,
  MAX(relative_fy_year_offset) AS Max_Relative_FY_Year_Offset,
  financial_short_month,
  financial_year,
  SUM(gross_revenue_amount) AS Total_Gross_Revenue_Amount,
  financial_short_month_ordered,
  SUM(gross_revenue_amount_prev_fy) AS Total_Gross_Revenue_Amount_Prev_FY,
  SUM(ss_lgb_k_curr_fy) AS Total_SS_LGB_K_Current_FY_Duplicate,
  SUM(gross_revenue_amount_curr_fy) AS Total_Gross_Revenue_Amount_Current_FY_Duplicate,
  SUM((gross_revenue_amount_k_curr_fy - ss_lgb_k_curr_fy)) AS Total_Gross_Revenue_K_Minus_SS_LGB_K_Current_FY,
  SUM(gross_revenue_amount_prev_fy_lod_le_ref_date_minus_365) AS Total_Gross_Revenue_Amount_Prev_FY_LOD_Le_Ref_Date_Minus_365,
  SUM(gross_revenue_amount_k_curr_fy) AS Total_Gross_Revenue_K_Current_FY_Duplicate2,
  SUM(ss_lgb) AS Total_SS_LGB,
  SUM(SAFE_DIVIDE(gross_revenue_amount_prev_fy_lod_le_ref_date_minus_365, 1000)) AS Total_Gross_Revenue_Amount_Prev_FY_LOD_Le_Ref_Date_Minus_365_K,
  SUM(SAFE_DIVIDE(gross_revenue_amount_curr_fy_not_future, 1000)) AS Total_Gross_Revenue_Amount_Current_FY_Not_Future_K_Duplicate,
  revenue_type_or_xtend,
  SUM(gross_revenue_amount_k_next_fy) AS Total_Gross_Revenue_K_Next_FY,
  financial_quarter_int,
  SUM(SAFE_DIVIDE(gross_revenue_amount_prev_fy, 1000)) AS Total_Gross_Revenue_Amount_Prev_FY_K,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync
FROM
  CalculatedFields4
GROUP BY
  financial_short_month,
  financial_year,
  financial_short_month_ordered,
  revenue_type_or_xtend,
  financial_quarter_int,
  relative_fy_month_offset,
  relative_fy_year_offset,
  sales_segment_l_2_name_sync
LIMIT 1;","SELECT
  relative_fy_year_offset,
  COUNT(1) AS record_count,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
GROUP BY
  relative_fy_year_offset
ORDER BY
  relative_fy_year_offset;

SELECT
  revenue_type,
  revenue_group_subtype,
  sales_segment_l_2_name_sync,
  advertiser_parent,
  xtend_flag,
  COUNT(1) AS record_count,
  SUM(gross_revenue_amount) AS total_gross_revenue_amount
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
GROUP BY
  1, 2, 3, 4, 5
ORDER BY
  record_count DESC
LIMIT 100;

SELECT
  financial_short_month,
  financial_quarter,
  financial_year,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
GROUP BY
  1, 2, 3
ORDER BY
  financial_year, financial_quarter, financial_short_month;",10,4d8074b2-17a8-48ba-babe-c536359b1f64
"SELECT
    t0.Advertiser,
    t0.PortfolioParentGroup,
    t0.PortfolioChildGroup,
    t0.TransactionType,
    SAFE_CAST(t0.FinancialYear AS INT64) AS FinancialYear,
    SAFE_CAST(t0.FinancialQuarter AS INT64) AS FinancialQuarter,
    SAFE_CAST(t0.FinancialMonthNumber AS INT64) AS FinancialMonthNumber,
    SAFE_CAST(t0.RevenueGross AS BIGNUMERIC) AS RevenueGross,
    CONCAT('FY', SAFE_CAST(t0.FinancialYear AS STRING), ' - ', SAFE_CAST(t0.FinancialQuarter AS STRING)) AS FinancialPeriod,
    CASE
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
        ELSE NULL
    END AS AdjustedFiscalMonthNumber,
    DATE(SAFE_CAST(t0.FinancialYear AS INT64), 
         CASE
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
            ELSE NULL
         END, 1) AS AdjustedFiscalMonthStartDate,
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(SAFE_CAST(t0.FinancialYear AS INT64), 
         CASE
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
            ELSE NULL
         END, 1) AS DATETIME), MONTH) AS DATE) AS TruncatedAdjustedFiscalMonth,
    DATE('2025-06-26') AS HardcodedReferenceDate,
    (t0.PortfolioParentGroup = 'INDEPENDENT AGENCIES NSW') AS IsIndependentAgenciesNSW,
    (t0.TransactionType != 'Guaranteed' OR t0.TransactionType IS NULL) AS IsNotGuaranteedTransaction,
    (CONCAT('FY', SAFE_CAST(t0.FinancialYear AS STRING), ' - ', SAFE_CAST(t0.FinancialQuarter AS STRING)) = 'FY2025 - Q4') AS IsFY2025Q4Period,
    (t0.PortfolioParentGroup = 'CONSORTIUM VIC') AS IsConsortiumVIC,
    (t0.TransactionType = 'Deal') AS IsDealTransaction,
    (t0.PortfolioChildGroup IN ('VIC CON B3', 'VIC CON B2', 'VIC CON B1')) AS IsVICConChildGroup,
    (DATE(SAFE_CAST(t0.FinancialYear AS INT64), 
         CASE
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
            ELSE NULL
         END, 1) <= DATE('2025-06-26')) AS IsAdjustedMonthBeforeHardcodedDate
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    SAFE_CAST(t0.FinancialYear AS INT64) >= EXTRACT(YEAR FROM CURRENT_DATE()) - 2 -- Sample data for last 3 financial years
LIMIT 100000","SELECT
    column_name,
    data_type
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`.INFORMATION_SCHEMA.COLUMNS
WHERE
    table_name = 'programmatic_fin_month';

-- Sample data to understand grain and values
SELECT
    Advertiser,
    PortfolioParentGroup,
    PortfolioChildGroup,
    TransactionType,
    FinancialYear,
    FinancialQuarter,
    FinancialMonthNumber,
    RevenueGross
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month`
LIMIT 100;","SELECT
    SUM(SAFE_CAST(t0.RevenueGross AS BIGNUMERIC)) AS total_revenue_gross_check,
    COUNT(DISTINCT t0.Advertiser) AS distinct_advertisers_check,
    COUNT(DISTINCT CONCAT('FY', SAFE_CAST(t0.FinancialYear AS STRING), ' - ', SAFE_CAST(t0.FinancialQuarter AS STRING))) AS distinct_financial_periods_check,
    COUNT(DISTINCT SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(SAFE_CAST(t0.FinancialYear AS INT64), 
         CASE
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
            ELSE NULL
         END, 1) AS DATETIME), MONTH) AS DATE)) AS distinct_truncated_fiscal_months_check
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    SAFE_CAST(t0.FinancialYear AS INT64) = 2024 -- Use a specific year for quick validation","SELECT
    SAFE_CAST(t0.FinancialMonthNumber AS INT64) AS OriginalFinancialMonthNumber,
    CASE
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
        WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
        ELSE NULL
    END AS AdjustedFinancialMonthNumber,
    COUNT(1) AS RecordCount
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
GROUP BY 1, 2
ORDER BY 1;

-- Validate the hardcoded date filter logic
SELECT
    SAFE_CAST(t0.FinancialYear AS INT64) AS FinancialYear,
    SAFE_CAST(t0.FinancialMonthNumber AS INT64) AS FinancialMonthNumber,
    DATE(SAFE_CAST(t0.FinancialYear AS INT64), 
         CASE
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
            ELSE NULL
         END, 1) AS AdjustedFiscalMonthStartDate,
    DATE('2025-06-26') AS HardcodedReferenceDate,
    (DATE(SAFE_CAST(t0.FinancialYear AS INT64), 
         CASE
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 1 THEN 7
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 2 THEN 8
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 3 THEN 9
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 4 THEN 10
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 5 THEN 11
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 6 THEN 12
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 7 THEN 1
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 8 THEN 2
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 9 THEN 3
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 10 THEN 4
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 11 THEN 5
            WHEN SAFE_CAST(t0.FinancialMonthNumber AS INT64) = 12 THEN 6
            ELSE NULL
         END, 1) <= DATE('2025-06-26')) AS IsAdjustedMonthBeforeHardcodedDate
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    SAFE_CAST(t0.FinancialYear AS INT64) = 2025 AND SAFE_CAST(t0.FinancialMonthNumber AS INT64) IN (6,7) -- Sample around the hardcoded date
LIMIT 100;",11,6f1c8731-02da-464f-b146-bf2947860735
"WITH
  base_data AS (
    SELECT
      t0.gross_revenue_amount,
      t0.product_group,
      t0.relative_fy_year_offset,
      t0.revenue_type,
      t0.unified_publication_name,
      t0.dw_asl_load_timestamp
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
    WHERE
      t0.product_group IN ('The Australian & Prestige')
      AND t0.revenue_type IN ('PRINT')
      AND t0.unified_publication_name IN ('GQ Mag')
  )
SELECT
  base_data.product_group,
  base_data.revenue_type,
  base_data.unified_publication_name,
  -- Unified Publication Category
  CASE
    WHEN base_data.unified_publication_name IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    ) THEN 'Sundry Pubs'
    ELSE 'Non Sundry Pubs'
  END AS unified_publication_category,
  -- Current FY Gross Revenue (in '000s)
  SAFE_DIVIDE(SUM(CASE WHEN base_data.relative_fy_year_offset = 0 THEN base_data.gross_revenue_amount ELSE 0 END), 1000) AS current_fy_gross_revenue_k,
  -- Prior FY Gross Revenue (in '000s)
  SAFE_DIVIDE(SUM(CASE WHEN base_data.relative_fy_year_offset = 1 THEN base_data.gross_revenue_amount ELSE 0 END), 1000) AS prior_fy_gross_revenue_k,
  -- Minimum Data Load Timestamp (global min)
  MIN(DATETIME_TRUNC(base_data.dw_asl_load_timestamp, SECOND)) OVER () AS min_dw_asl_load__timestamp
FROM
  base_data
GROUP BY
  base_data.product_group,
  base_data.revenue_type,
  base_data.unified_publication_name
LIMIT 100;","SELECT
  t0.gross_revenue_amount,
  t0.product_group,
  t0.relative_fy_year_offset,
  t0.revenue_type,
  t0.unified_publication_name,
  t0.dw_asl_load_timestamp
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 10;","SELECT
  SAFE_DIVIDE(SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END), 1000) AS current_fy_gross_revenue_k,
  SAFE_DIVIDE(SUM(CASE WHEN t0.relative_fy_year_offset = 1 THEN t0.gross_revenue_amount ELSE 0 END), 1000) AS prior_fy_gross_revenue_k,
  CASE WHEN t0.unified_publication_name IN ('GQ Mag') THEN 'Sundry Pubs' ELSE 'Non Sundry Pubs' END AS unified_publication_category,
  MIN(DATETIME_TRUNC(t0.dw_asl_load_timestamp, SECOND)) AS min_dw_asl_load_timestamp
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE
  t0.product_group IN ('The Australian & Prestige')
  AND t0.revenue_type IN ('PRINT')
  AND t0.unified_publication_name IN ('GQ Mag')
LIMIT 1;","SELECT
  ARRAY_AGG(DISTINCT SAFE_CAST(t0.relative_fy_year_offset AS STRING) IGNORE NULLS) AS distinct_relative_fy_year_offsets_found,
  ARRAY_AGG(DISTINCT t0.product_group IGNORE NULLS) AS distinct_product_groups_found,
  ARRAY_AGG(DISTINCT t0.revenue_type IGNORE NULLS) AS distinct_revenue_types_found,
  ARRAY_AGG(DISTINCT t0.unified_publication_name IGNORE NULLS) AS distinct_unified_publication_names_found,
  COUNTIF(t0.relative_fy_year_offset NOT IN (0, 1)) AS count_of_unexpected_fy_offsets,
  COUNTIF(
    t0.unified_publication_name NOT IN (
      'Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales', 'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin', 'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin', 'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News', 'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin', 'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin'
    )
  ) AS count_of_uncategorized_publications,
  COUNTIF(t0.product_group NOT IN ('The Australian & Prestige')) AS count_of_unfiltered_product_groups,
  COUNTIF(t0.revenue_type NOT IN ('PRINT')) AS count_of_unfiltered_revenue_types,
  COUNTIF(t0.unified_publication_name NOT IN ('GQ Mag')) AS count_of_unfiltered_gq_mag
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 1;",12,4bd7954c-5a94-4fb6-92e1-ed152b1cf7b3
"-- This query retrieves the core account mapping data, showing distinct combinations.
SELECT DISTINCT
    SAFE_CAST(t0.Adpoint_Account AS STRING) AS adpoint_account,
    SAFE_CAST(t0.Genera_Booking_Account AS STRING) AS genera_booking_account,
    SAFE_CAST(t0.Medium_Rare_Debtor_Account AS STRING) AS medium_rare_debtor_account,
    SAFE_CAST(t0.National_Debtor_Account AS STRING) AS national_debtor_account
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0
LIMIT 1000;","-- Query to understand the structure of the primary account mapping data source.
SELECT
    t0.Adpoint_Account,
    t0.Genera_Booking_Account,
    t0.Medium_Rare_Debtor_Account,
    t0.National_Debtor_Account
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0
LIMIT 10;

-- Query to understand the structure of the metadata table for last update time.
SELECT
    last_modified_time
FROM
    sdm_advertisingexternals.__TABLES__
WHERE
    table_id = ""gbaba_act_xref""
LIMIT 1;","-- Validate the core account mapping data retrieval and an example filter application.
SELECT
    SAFE_CAST(t0.Adpoint_Account AS STRING) AS adpoint_account,
    SAFE_CAST(t0.Genera_Booking_Account AS STRING) AS genera_booking_account,
    SAFE_CAST(t0.Medium_Rare_Debtor_Account AS STRING) AS medium_rare_debtor_account,
    SAFE_CAST(t0.National_Debtor_Account AS STRING) AS national_debtor_account
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref` AS t0
WHERE
    SAFE_CAST(t0.Adpoint_Account AS STRING) = '56694' -- Example of a dashboard filter
LIMIT 1;

-- Validate the last update time metadata calculation.
SELECT
    CAST(FORMAT_DATETIME('%F %X', datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"")) AS STRING) AS last_update_time_metadata
FROM
    sdm_advertisingexternals.__TABLES__
WHERE
    table_id = ""gbaba_act_xref""
LIMIT 1;","-- Check for distinctness of account mappings (as implied by original queries' GROUP BY).
SELECT
    COUNT(*) AS total_rows,
    COUNT(DISTINCT CONCAT(SAFE_CAST(Adpoint_Account AS STRING), '-', SAFE_CAST(Genera_Booking_Account AS STRING), '-', SAFE_CAST(Medium_Rare_Debtor_Account AS STRING), '-', SAFE_CAST(National_Debtor_Account AS STRING))) AS distinct_mappings
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`;

-- Check for null values in key account fields, indicating potential data quality issues.
SELECT
    COUNTIF(Adpoint_Account IS NULL) AS null_adpoint_account,
    COUNTIF(Genera_Booking_Account IS NULL) AS null_genera_booking_account,
    COUNTIF(Medium_Rare_Debtor_Account IS NULL) AS null_medium_rare_debtor_account,
    COUNTIF(National_Debtor_Account IS NULL) AS null_national_debtor_account
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_asl_gbaba_act_xref`;

-- Validate the components of the last update time calculation and its source.
SELECT
    CAST(FORMAT_DATETIME('%F %X', datetime(timestamp_millis(last_modified_time), ""Australia/Sydney"")) AS STRING) AS calculated_last_update_time,
    DATETIME(timestamp_millis(last_modified_time), ""Australia/Sydney"") AS raw_last_update_datetime,
    last_modified_time AS raw_last_modified_millis
FROM
    sdm_advertisingexternals.__TABLES__
WHERE
    table_id = ""gbaba_act_xref"";",13,258a722d-9b6e-45df-ba00-1b9954ec36b2
"SELECT
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    CASE
        WHEN (t0.masthead = 'TA') THEN 'The Australian'
        WHEN (t0.masthead = 'DT') THEN 'Daily Telegraph'
        WHEN (t0.masthead = 'HS') THEN 'Herald Sun'
        WHEN (t0.masthead = 'WT') THEN 'Weekly Times'
        WHEN (t0.masthead = 'GA') THEN 'Geelong Advertiser'
        WHEN (t0.masthead = 'CM') THEN 'Courier Mail'
        WHEN (t0.masthead = 'CP') THEN 'Cairns Post'
        WHEN (t0.masthead = 'TB') THEN 'Townsville Bulletin'
        WHEN (t0.masthead = 'TC') THEN 'Toowoomba Chronicles'
        WHEN (t0.masthead = 'GC') THEN 'Gold Coast'
        WHEN (t0.masthead = 'TM') THEN 'The Mercury'
        WHEN (t0.masthead = 'NT') THEN 'NT News'
        WHEN (t0.masthead = 'AA') THEN 'The Advertiser'
        ELSE NULL
    END AS masthead_full_name,
    CASE
        WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'States and Community'
        WHEN (t0.masthead = 'TA') THEN 'The Australian and Prestige'
        ELSE NULL
    END AS masthead_group_states_community,
    CASE
        WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
        WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'Regionals'
        ELSE NULL
    END AS masthead_group_metro_regionals,
    SUM(t0.Always_on_Digital_Sales_V) AS always_on_digital_sales_v,
    SUM(t0.Breach_Sales_V) AS breach_sales_v,
    SUM(t0.Closing_Base_3rd_Party_V) AS closing_base_3rd_party_v,
    SUM(t0.Essentials_V) AS essentials_v,
    SUM(t0.General_Offer_Sales_V) AS general_offer_sales_v,
    SUM(t0.Net_Cancels_V) AS net_cancels_v,
    SUM(t0.Net_Growth_3rd_Party_V) AS net_growth_3rd_party_v,
    SUM(t0.Net_Growth_Consumer_V) AS net_growth_consumer_v,
    SUM(t0.Net_Growth_incl_3rd_Party_V) AS net_growth_incl_3rd_party_v,
    SUM(t0.Other_Sales_V) AS other_sales_v,
    SUM(t0.Revenue_3rd_Party_V) AS revenue_3rd_party_v,
    SUM(t0.Revenue_Campus_V) AS revenue_campus_v,
    SUM(t0.Revenue_Consumer_V) AS revenue_consumer_v,
    SUM(t0.Revenue_Corp_V) AS revenue_corp_v,
    SUM(t0.Revenue_Other_V) AS revenue_other_v,
    SUM(t0.Switches_V) AS switches_v,
    SUM(t0.Total_Cancels_excluding_3rd_Party_V) AS total_cancels_excluding_3rd_party_v,
    SUM(t0.Total_Cancels_including_3rd_Party_V) AS total_cancels_including_3rd_party_v,
    SUM(t0.Total_Closing_Base_V) AS total_closing_base_v,
    SUM(t0.Total_Revenue_V) AS total_revenue_v,
    SUM(t0.Total_Weekly_Sales_V) AS total_weekly_sales_v,
    SUM(t0.Always_on_Digital_Sales) AS always_on_digital_sales,
    SUM(t0.Breach_Sales) AS breach_sales,
    SUM(t0.Closing_Base_3rd_Party) AS closing_base_3rd_party,
    SUM(t0.Closing_Base_3rd_Party_APLS) AS closing_base_3rd_party_apls,
    SUM(t0.Closing_Base_3rd_Party_GPLA) AS closing_base_3rd_party_gpla,
    SUM(t0.Closing_Base_Consumer) AS closing_base_consumer,
    SUM(t0.Essentials) AS essentials,
    SUM(t0.Failed_Payment_Volume) AS failed_payment_volume,
    SUM(t0.General_Offer_Sales) AS general_offer_sales,
    SUM(t0.Net_Cancels) AS net_cancels,
    SUM(t0.Net_Growth_3rd_Party) AS net_growth_3rd_party,
    SUM(t0.Net_Growth_3rd_Party_APLS) AS net_growth_3rd_party_apls,
    SUM(t0.Net_Growth_3rd_Party_GPLA) AS net_growth_3rd_Party_gpla,
    SUM(t0.Net_Growth_Consumer) AS net_growth_consumer,
    SUM(t0.Net_Growth_incl_3rd_Party) AS net_growth_incl_3rd_party,
    SUM(t0.Other_Sales) AS other_sales,
    SUM(t0.Revenue_3rd_Party) AS revenue_3rd_party,
    SUM(t0.Revenue_3rd_Party_APLS) AS revenue_3rd_party_apls,
    SUM(t0.Revenue_3rd_Party_GPLA) AS revenue_3rd_party_gpla,
    SUM(t0.Revenue_Campus) AS revenue_campus,
    SUM(t0.Revenue_Consumer) AS revenue_consumer,
    SUM(t0.Revenue_Corp) AS revenue_corp,
    SUM(t0.Revenue_Other) AS revenue_other,
    SUM(t0.Switches) AS switches,
    SUM(t0.Total_Cancels_excluding_3rd_Party) AS total_cancels_excluding_3rd_party,
    SUM(t0.Total_Cancels_including_3rd_Party) AS total_cancels_including_3rd_party,
    SUM(t0.Total_Closing_Base) AS total_closing_base,
    SUM(t0.Total_Revenue) AS total_revenue,
    SUM(t0.Total_Weekly_Sales) AS total_weekly_sales,
    SUM(t0.Always_on_Digital_Sales_6W) AS always_on_digital_sales_6w,
    SUM(t0.Breach_Sales_6W) AS breach_sales_6w,
    SUM(t0.Closing_Base_3rd_Party_6W) AS closing_base_3rd_party_6w,
    SUM(t0.Closing_Base_3rd_Party_APLS_6W) AS closing_base_3rd_party_apls_6w,
    SUM(t0.Closing_Base_3rd_Party_GPLA_6W) AS closing_base_3rd_party_gpla_6w,
    SUM(t0.Essentials_6W) AS essentials_6w,
    SUM(t0.Failed_Payment_Volume_6W) AS failed_payment_volume_6w,
    SUM(t0.General_Offer_Sales_6W) AS general_offer_sales_6w,
    SUM(t0.Net_Cancels_6W) AS net_cancels_6w,
    SUM(t0.Net_Growth_3rd_Party_6W) AS net_growth_3rd_party_6w,
    SUM(t0.Net_Growth_Consumer_6W) AS net_growth_consumer_6w,
    SUM(t0.Net_Growth_incl_3rd_party_6W) AS net_growth_incl_3rd_party_6w,
    SUM(t0.Other_Sales_6W) AS other_sales_6w,
    SUM(t0.Revenue_3rd_Party_6W) AS revenue_3rd_party_6w,
    SUM(t0.Revenue_3rd_Party_APLS_6W) AS revenue_3rd_party_apls_6w,
    SUM(t0.Revenue_3rd_Party_GPLA_6W) AS revenue_3rd_party_gpla_6w,
    SUM(t0.Revenue_Campus_6W) AS revenue_campus_6w,
    SUM(t0.Revenue_Consumer_6W) AS revenue_consumer_6w,
    SUM(t0.Revenue_Corp_6W) AS revenue_corp_6w,
    SUM(t0.Revenue_Other_6W) AS revenue_other_6w,
    SUM(t0.Switches_6W) AS switches_6w,
    SUM(t0.Total_Cancels_excluding_3rd_Party_6W) AS total_cancels_excluding_3rd_party_6w,
    SUM(t0.Total_Cancels_including_3rd_Party_6W) AS total_cancels_including_3rd_party_6w,
    SUM(t0.Total_Closing_Base_6W) AS total_closing_base_6w,
    SUM(t0.Total_Revenue_6W) AS total_revenue_6w,
    SUM(t0.Total_Weekly_Sales_6W) AS total_weekly_sales_6w
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE
    t0.fy_year = 2025
    AND (
        'All Mastheads' = 'All Mastheads'
        OR 'All Mastheads' = (CASE WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'States and Community' WHEN (t0.masthead = 'TA') THEN 'The Australian and Prestige' ELSE NULL END)
        OR 'All Mastheads' = (CASE WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro' WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'Regionals' ELSE NULL END)
        OR 'All Mastheads' = (CASE WHEN (t0.masthead = 'TA') THEN 'The Australian' WHEN (t0.masthead = 'DT') THEN 'Daily Telegraph' WHEN (t0.masthead = 'HS') THEN 'Herald Sun' WHEN (t0.masthead = 'WT') THEN 'Weekly Times' WHEN (t0.masthead = 'GA') THEN 'Geelong Advertiser' WHEN (t0.masthead = 'CM') THEN 'Courier Mail' WHEN (t0.masthead = 'CP') THEN 'Cairns Post' WHEN (t0.masthead = 'TB') THEN 'Townsville Bulletin' WHEN (t0.masthead = 'TC') THEN 'Toowoomba Chronicles' WHEN (t0.masthead = 'GC') THEN 'Gold Coast' WHEN (t0.masthead = 'TM') THEN 'The Mercury' WHEN (t0.masthead = 'NT') THEN 'NT News' WHEN (t0.masthead = 'AA') THEN 'The Advertiser' ELSE NULL END)
    )
GROUP BY
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead
LIMIT 1000;",SELECT * FROM `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` LIMIT 100;,"SELECT
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead,
    SUM(t0.Total_Revenue_V) AS total_revenue_v_sum,
    SUM(t0.Total_Revenue) AS total_revenue_sum,
    SUM(t0.Total_Revenue_6W) AS total_revenue_6w_sum,
    SUM(t0.Net_Growth_Consumer) AS net_growth_consumer_sum
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE
    t0.fy_year = 2025
GROUP BY
    t0.fy_year,
    t0.fy_week_of_year,
    t0.masthead
LIMIT 100;","SELECT
    t0.masthead,
    CASE
        WHEN (t0.masthead = 'TA') THEN 'The Australian'
        WHEN (t0.masthead = 'DT') THEN 'Daily Telegraph'
        WHEN (t0.masthead = 'HS') THEN 'Herald Sun'
        WHEN (t0.masthead = 'WT') THEN 'Weekly Times'
        WHEN (t0.masthead = 'GA') THEN 'Geelong Advertiser'
        WHEN (t0.masthead = 'CM') THEN 'Courier Mail'
        WHEN (t0.masthead = 'CP') THEN 'Cairns Post'
        WHEN (t0.masthead = 'TB') THEN 'Townsville Bulletin'
        WHEN (t0.masthead = 'TC') THEN 'Toowoomba Chronicles'
        WHEN (t0.masthead = 'GC') THEN 'Gold Coast'
        WHEN (t0.masthead = 'TM') THEN 'The Mercury'
        WHEN (t0.masthead = 'NT') THEN 'NT News'
        WHEN (t0.masthead = 'AA') THEN 'The Advertiser'
        ELSE NULL
    END AS masthead_full_name,
    CASE
        WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'States and Community'
        WHEN (t0.masthead = 'TA') THEN 'The Australian and Prestige'
        ELSE NULL
    END AS masthead_group_states_community,
    CASE
        WHEN (t0.masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
        WHEN (t0.masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT')) THEN 'Regionals'
        ELSE NULL
    END AS masthead_group_metro_regionals,
    t0.fy_year,
    t0.fy_week_of_year,
    DATE(TIMESTAMP '2025-03-30 22:32:24.807251+00', 'Australia/Sydney') AS hardcoded_date_q1_q2,
    DATE(TIMESTAMP '2025-02-10 00:11:05.853262+00', 'Australia/Sydney') AS hardcoded_date_q3,
    DATETIME '2024-07-03T00:00:00' AS hardcoded_base_date_for_week_diff
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.consumer_masthead_scorecard` AS t0
WHERE
    t0.fy_year = 2025
LIMIT 100;",14,57d87efe-c112-4d42-be1b-045f0c8ca73e
"WITH
  subscriptions_data AS (
    SELECT
      SAFE_CAST(t0.fiscal_week_id AS STRING) AS fiscal_week_id,
      t0.category_name,
      t0.gl_publication_code,
      t0.add_volume,
      t0.closing_base,
      t0.earned_amount,
      t0.opening_base,
      t0.red_volume,
      t0.transfer_in,
      t0.transfer_out
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
    WHERE
      SAFE_CAST(t0.fiscal_week_id AS STRING) = '202535' -- Apply filter from original query
  ),
  circulation_data AS (
    SELECT
      t0.channel,
      t0.home_del_charge,
      t0.returns_credit_amount,
      t0.rev_adjust,
      t0.state
    FROM
      `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` AS t0
  )
SELECT
  s.fiscal_week_id,
  s.category_name,
  s.gl_publication_code,
  NULL AS channel, -- Dimensions from circulation_data
  NULL AS state, -- Dimensions from circulation_data
  s.add_volume,
  s.closing_base,
  s.earned_amount,
  s.opening_base,
  s.red_volume,
  s.transfer_in,
  s.transfer_out,
  NULL AS home_del_charge, -- Measures from circulation_data
  NULL AS returns_credit_amount, -- Measures from circulation_data
  NULL AS rev_adjust -- Measures from circulation_data
FROM
  subscriptions_data AS s
UNION ALL
SELECT
  NULL AS fiscal_week_id, -- Dimensions from subscriptions_data
  NULL AS category_name, -- Dimensions from subscriptions_data
  NULL AS gl_publication_code, -- Dimensions from subscriptions_data
  c.channel,
  c.state,
  NULL AS add_volume, -- Measures from subscriptions_data
  NULL AS closing_base, -- Measures from subscriptions_data
  NULL AS earned_amount, -- Measures from subscriptions_data
  NULL AS opening_base, -- Measures from subscriptions_data
  NULL AS red_volume, -- Measures from subscriptions_data
  NULL AS transfer_in, -- Measures from subscriptions_data
  NULL AS transfer_out, -- Measures from subscriptions_data
  c.home_del_charge,
  c.returns_credit_amount,
  c.rev_adjust
FROM
  circulation_data AS c
LIMIT 1000;","SELECT * FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` LIMIT 10;
SELECT * FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` LIMIT 10;","SELECT
  SUM(add_volume) AS total_add_volume,
  SUM(earned_amount) AS total_earned_amount,
  SUM(home_del_charge) AS total_home_del_charge,
  SUM(returns_credit_amount) AS total_returns_credit_amount
FROM (
  SELECT
    t0.add_volume,
    t0.earned_amount,
    NULL AS home_del_charge,
    NULL AS returns_credit_amount
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions` AS t0
  WHERE SAFE_CAST(t0.fiscal_week_id AS STRING) = '202535'
  UNION ALL
  SELECT
    NULL AS add_volume,
    NULL AS earned_amount,
    t0.home_del_charge,
    t0.returns_credit_amount
  FROM `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_circulation_actuals` AS t0
)
LIMIT 1;","SELECT
  SAFE_CAST(fiscal_week_id AS STRING) AS fiscal_week_id_str,
  COUNT(*) AS record_count
FROM
  `ncau-data-newsquery-prd.sbx_fda_corefin.dv_tm1_pbf_subscriptions`
WHERE
  SAFE_CAST(fiscal_week_id AS STRING) = '202535'
GROUP BY 1
LIMIT 10;",16,23c8b213-a9f0-4158-b8fa-bff14425abb5
"-- This query consolidates the logic from all provided SQL samples.
-- It simulates Looker Studio parameters for metric and period selection.
-- Replace the hardcoded parameter values (e.g., 'BUDGET', 'WEEK') with actual Looker Studio parameters if integrating.

WITH
  params AS (
    SELECT
      'BUDGET' AS metric_type_param, -- Options: 'BUDGET', 'FORECAST', 'YOY', 'BUDGET_NY'
      'WEEK' AS period_type_param,   -- Options: 'WEEK', 'QUARTER', 'MONTH', 'YEAR'
      DATE('2025-04-01') AS current_report_date, -- Simulates the hardcoded date in queries
      DATE('2024-07-03') AS base_week_start_date -- Simulates the hardcoded base date for week diff
  ),
  base_data AS (
    SELECT
      t0.BudgetAddsQty,
      t0.BudgetCancelsQty,
      t0.BudgetClosingBase,
      t0.BudgetEarnedAmount,
      t0.BudgetNetAddsQty,
      t0.BudgetNetCancelsQty,
      t0.BudgetOpeningBase,
      t0.ClosingBase,
      t0.EarnedAmount,
      t0.ExclusionReasonCancellation,
      t0.ForecastAddsQty,
      t0.ForecastBudgetEarnedAmount,
      t0.ForecastCancelsQty,
      t0.ForecastClosingBase,
      t0.ForecastNetAddsQty,
      t0.ForecastNetCancelsQty,
      t0.ForecastOpeningBase,
      t0.NFEarnedAmount,
      t0.NYBudgetAddsQty,
      t0.NYBudgetCancelsQty,
      t0.NYBudgetClosingBase,
      t0.NYBudgetEarnedAmount,
      t0.NYBudgetOpeningBase,
      t0.NetAcquisition,
      t0.NetCanellation,
      t0.OpeningBase,
      t0.TotalAcquisition,
      t0.TotalCancellation,
      t0.classification_level_1_description,
      t0.classification_level_2_description,
      t0.delivery_medium_type,
      t0.dw_billing_system_code,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.rate_plan_group_name,
      t0.subscriber_has_email_flag,
      t0.table_union_source,
      t0.fy_year,
      t0.fy_week_of_year,
      t0.fy_month_of_year,
      t0.fy_quarter_of_year,
      t0.fiscal_week_id
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  ),
  derived_dimensions AS (
    SELECT
      *,
      -- Recognition Type
      CASE
        WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition'
        WHEN (subscriber_has_email_flag = 'N') THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS recognition_type,
      -- Publication Name
      CASE
        WHEN (gl_publication_code = '101' OR masthead_code = 'TA' OR gl_publication_code = '100') THEN 'The Australian'
        WHEN (gl_publication_code = '400' OR gl_publication_code = '401' OR gl_publication_code = '402' OR masthead_code = 'CM') THEN 'Courier Mail'
        WHEN (gl_publication_code = '110' OR gl_publication_code = '111' OR gl_publication_code = '116' OR masthead_code = 'DT') THEN 'Daily Telegraph'
        WHEN (gl_publication_code = '301' OR gl_publication_code = '302' OR gl_publication_code = '303' OR masthead_code = 'HS') THEN 'Herald Sun'
        WHEN (gl_publication_code = '500' OR gl_publication_code = '501' OR gl_publication_code = '560' OR masthead_code = 'AA') THEN 'The Advertiser'
        WHEN (gl_publication_code = '450' OR gl_publication_code = '460' OR masthead_code = 'CP') THEN 'Cairns Post'
        WHEN (gl_publication_code = '350' OR gl_publication_code = '351' OR masthead_code = 'GA') THEN 'Geelong'
        WHEN (gl_publication_code = '670' OR gl_publication_code = '685' OR masthead_code = 'GC') THEN 'Gold Coast'
        WHEN (gl_publication_code = '961' OR gl_publication_code = '962' OR gl_publication_code = '963' OR masthead_code = 'NT') THEN 'NT News'
        WHEN (gl_publication_code = '850' OR gl_publication_code = '851' OR gl_publication_code = '852' OR masthead_code = 'TM') THEN 'The Mercury'
        WHEN (gl_publication_code = '5053' OR gl_publication_code = '5253' OR masthead_code = 'TC') THEN 'Toowoomba'
        WHEN (gl_publication_code = '475' OR gl_publication_code = '490' OR masthead_code = 'TB') THEN 'Townsville'
        WHEN (gl_publication_code = '305' OR gl_publication_code = '307' OR masthead_code = 'WT') THEN 'Weekly Times'
        WHEN (gl_publication_code = '9001' OR masthead_code = 'CS') THEN 'Code'
        WHEN (gl_publication_code = '8821' OR gl_publication_code = 'Punters.com.au' OR masthead_code = 'PU') THEN 'Punters'
        WHEN (gl_publication_code = '8822' OR gl_publication_code = 'Racenet' OR masthead_code = 'RN') THEN 'Racenet'
        WHEN (gl_publication_code = '9653' OR masthead_code = 'SC') THEN 'Supercoach Plus'
        WHEN (gl_publication_code = '9600' OR masthead_code = 'TS') THEN 'Taste Online'
        WHEN (gl_publication_code = '9003' OR masthead_code = 'AP') THEN 'Apple Podcast: Crime X'
        WHEN (gl_publication_code = '103' OR masthead_code = 'OZ') THEN 'The Oz'
        WHEN (gl_publication_code = '9000' OR masthead_code = 'NW') THEN 'news.com.au'
        WHEN (gl_publication_code = '121') THEN 'Others'
        WHEN (gl_publication_code = '9002' OR masthead_code = 'BG') THEN 'Brain Games'
        WHEN (gl_publication_code = '9504' OR gl_publication_code = '9514' OR gl_publication_code = '9556' OR gl_publication_code = '9558' OR gl_publication_code = '9560' OR gl_publication_code = '9603' OR gl_publication_code = '9623') THEN 'Others'
        WHEN (gl_publication_code = '9644') THEN 'Suddenly'
        WHEN (gl_publication_code = '9903') THEN 'News Corporate'
        WHEN (gl_publication_code = 'Group Newspaper Management - Digital') THEN 'Group Newspaper Management - Digital'
        ELSE NULL
      END AS publication_name,
      -- Billing System Group
      CASE
        WHEN (dw_billing_system_code IN ('APLP', 'APLS', 'GPLA', 'SWG')) THEN true
        WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Apple Podcasts') THEN true
        WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Apple Store') THEN true
        WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Google Play') THEN true
        WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Subscribe with Google (SWG)') THEN true
        ELSE false
      END AS billing_system_group
    FROM
      base_data
  ),
  final_data AS (
    SELECT
      *,
      -- Publication Group
      CASE
        WHEN (publication_name = 'The Australian') THEN 'The Australian'
        WHEN (publication_name IN ('Courier Mail', 'Daily Telegraph', 'Herald Sun', 'The Advertiser')) THEN 'Metros'
        WHEN (publication_name IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville')) THEN 'Regionals'
        WHEN (publication_name = 'Weekly Times') THEN 'Others'
        WHEN (publication_name IN ('Supercoach Plus', 'Code', 'Punters', 'Racenet', 'Taste Online', 'Apple Podcast: Crime X', 'Brain Games')) THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS publication_group,
      -- Calculated Week for Period Selection (simulating hardcoded date logic)
      DATETIME_DIFF(
        SAFE_CAST(params.current_report_date AS DATETIME),
        SAFE_CAST(params.base_week_start_date AS DATETIME),
        WEEK
      ) AS calculated_week_diff,
      -- Flags for current period selection
      (fy_year = 2025) AS is_fy_2025,
      (fy_week_of_year = DATETIME_DIFF(SAFE_CAST(params.current_report_date AS DATETIME), SAFE_CAST(params.base_week_start_date AS DATETIME), WEEK)) AS is_current_week,
      (fy_week_of_year = DATETIME_DIFF(SAFE_CAST(params.current_report_date AS DATETIME), SAFE_CAST(params.base_week_start_date AS DATETIME), WEEK) - 1) AS is_previous_week,
      (fy_week_of_year <= 22) AS is_week_le_22,
      (fy_week_of_year > 22) AS is_week_gt_22,
      -- Quarter/Month mapping for period selection
      CASE
        WHEN fy_week_of_year <= 13 THEN 1
        WHEN fy_week_of_year <= 26 THEN 2
        WHEN fy_week_of_year <= 39 THEN 3
        WHEN fy_week_of_year <= 53 THEN 4
        ELSE NULL
      END AS fy_quarter_from_week,
      CASE
        WHEN fy_week_of_year <= 4 THEN 1
        WHEN fy_week_of_year <= 9 THEN 2
        WHEN fy_week_of_year <= 13 THEN 3
        WHEN fy_week_of_year <= 17 THEN 4
        WHEN fy_week_of_year <= 22 THEN 5
        WHEN fy_week_of_year <= 26 THEN 6
        WHEN fy_week_of_year <= 30 THEN 7
        WHEN fy_week_of_year <= 35 THEN 8
        WHEN fy_week_of_year <= 39 THEN 9
        WHEN fy_week_of_year <= 43 THEN 10
        WHEN fy_week_of_year <= 48 THEN 11
        WHEN fy_week_of_year <= 53 THEN 12
        ELSE NULL
      END AS fy_month_from_week
    FROM
      derived_dimensions, params
  )
SELECT
  -- Dimensions
  publication_group,
  publication_name,
  recognition_type,
  billing_system_group,
  fy_year,
  fy_week_of_year,
  fy_month_of_year,
  fy_quarter_of_year,
  -- Raw Metrics (for reference)
  SUM(BudgetAddsQty) AS budget_adds_qty,
  SUM(BudgetCancelsQty) AS budget_cancels_qty,
  SUM(BudgetClosingBase) AS budget_closing_base,
  SUM(BudgetEarnedAmount) AS budget_earned_amount,
  SUM(BudgetNetAddsQty) AS budget_net_adds_qty,
  SUM(BudgetNetCancelsQty) AS budget_net_cancels_qty,
  SUM(BudgetOpeningBase) AS budget_opening_base,
  SUM(ClosingBase) AS closing_base,
  SUM(EarnedAmount) AS earned_amount,
  SUM(ForecastAddsQty) AS forecast_adds_qty,
  SUM(ForecastBudgetEarnedAmount) AS forecast_budget_earned_amount,
  SUM(ForecastCancelsQty) AS forecast_cancels_qty,
  SUM(ForecastClosingBase) AS forecast_closing_base,
  SUM(ForecastNetAddsQty) AS forecast_net_adds_qty,
  SUM(ForecastNetCancelsQty) AS forecast_net_cancels_qty,
  SUM(ForecastOpeningBase) AS forecast_opening_base,
  SUM(NFEarnedAmount) AS nf_earned_amount,
  SUM(NYBudgetAddsQty) AS ny_budget_adds_qty,
  SUM(NYBudgetCancelsQty) AS ny_budget_cancels_qty,
  SUM(NYBudgetClosingBase) AS ny_budget_closing_base,
  SUM(NYBudgetEarnedAmount) AS ny_budget_earned_amount,
  SUM(NYBudgetOpeningBase) AS ny_budget_opening_base,
  SUM(NetAcquisition) AS net_acquisition,
  SUM(NetCanellation) AS net_cancellation,
  SUM(OpeningBase) AS opening_base,
  SUM(TotalAcquisition) AS total_acquisition,
  SUM(TotalCancellation) AS total_cancellation,
  SUM(fiscal_week_id) AS fiscal_week_id_sum, -- Note: Summing an ID is unusual, but present in source queries.
  -- Derived Metrics
  SUM(SAFE_DIVIDE(ForecastBudgetEarnedAmount, 1000)) AS forecast_earned_amount_k,
  SUM(ClosingBase - BudgetCancelsQty) AS closing_base_minus_budget_cancels,
  -- Dynamic Metric Selection (simulating Looker Studio parameter)
  SUM(
    CASE params.metric_type_param
      WHEN 'BUDGET' THEN BudgetEarnedAmount
      WHEN 'FORECAST' THEN ForecastBudgetEarnedAmount
      WHEN 'YOY' THEN (BudgetEarnedAmount - NYBudgetEarnedAmount) -- Example YOY calc, actual logic is complex
      WHEN 'BUDGET_NY' THEN NYBudgetEarnedAmount
      ELSE NULL
    END
  ) AS selected_earned_amount,
  SUM(
    SAFE_DIVIDE(
      CASE params.metric_type_param
        WHEN 'BUDGET' THEN BudgetEarnedAmount
        WHEN 'FORECAST' THEN ForecastBudgetEarnedAmount
        WHEN 'YOY' THEN (BudgetEarnedAmount - NYBudgetEarnedAmount)
        WHEN 'BUDGET_NY' THEN NYBudgetEarnedAmount
        ELSE NULL
      END, 1000
    )
  ) AS selected_earned_amount_k,
  -- Dynamic Period Selection (simulating Looker Studio parameter)
  SUM(
    CASE params.period_type_param
      WHEN 'WEEK' THEN
        CASE
          WHEN is_fy_2025 AND is_current_week THEN ClosingBase
          ELSE NULL
        END
      WHEN 'QUARTER' THEN
        CASE
          WHEN is_fy_2025 AND fy_quarter_of_year = fy_quarter_from_week THEN ClosingBase
          ELSE NULL
        END
      WHEN 'MONTH' THEN
        CASE
          WHEN is_fy_2025 AND fy_month_of_year = fy_month_from_week THEN ClosingBase
          ELSE NULL
        END
      WHEN 'YEAR' THEN
        CASE
          WHEN is_fy_2025 THEN ClosingBase
          ELSE NULL
        END
      ELSE NULL
    END
  ) AS selected_period_closing_base
FROM
  final_data
WHERE
  publication_group != 'Discontinued'
  AND recognition_type = 'Digital Recognition'
  AND billing_system_group = true
GROUP BY
  publication_group,
  publication_name,
  recognition_type,
  billing_system_group,
  fy_year,
  fy_week_of_year,
  fy_month_of_year,
  fy_quarter_of_year
LIMIT 1000;
","SELECT
  t0.*
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 10;","WITH
  base_data AS (
    SELECT
      t0.delivery_medium_type,
      t0.subscriber_has_email_flag,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.dw_billing_system_code,
      t0.rate_plan_group_name,
      t0.table_union_source,
      t0.ClosingBase,
      t0.BudgetEarnedAmount,
      t0.ForecastBudgetEarnedAmount,
      t0.BudgetCancelsQty,
      t0.fiscal_week_id
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  )
SELECT
  -- Validate Recognition Type
  CASE
    WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition'
    WHEN (subscriber_has_email_flag = 'N') THEN 'Print Recognition'
    ELSE 'Digital Recognition'
  END AS recognition_type_validation,
  -- Validate Publication Group (simplified for validation)
  CASE
    WHEN (gl_publication_code = '101' OR masthead_code = 'TA') THEN 'The Australian'
    WHEN (gl_publication_code = '400' OR masthead_code = 'CM') THEN 'Metros Example'
    ELSE 'Other'
  END AS publication_group_validation,
  -- Validate Billing System Group
  CASE
    WHEN (dw_billing_system_code IN ('APLP', 'APLS')) THEN true
    WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Apple Podcasts') THEN true
    ELSE false
  END AS billing_system_group_validation,
  -- Validate a few key metrics
  SUM(ClosingBase) AS total_closing_base,
  SUM(BudgetEarnedAmount) AS total_budget_earned_amount,
  SUM(SAFE_DIVIDE(ForecastBudgetEarnedAmount, 1000)) AS total_forecast_earned_amount_k,
  SUM(BudgetCancelsQty) AS total_budget_cancels_qty,
  SUM(fiscal_week_id) AS total_fiscal_week_id_sum_validation
FROM
  base_data
WHERE
  (CASE WHEN (gl_publication_code = '101' OR masthead_code = 'TA') THEN 'The Australian' WHEN (gl_publication_code = '400' OR masthead_code = 'CM') THEN 'Metros Example' ELSE 'Other' END) != 'Discontinued'
  AND (CASE WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition' WHEN (subscriber_has_email_flag = 'N') THEN 'Print Recognition' ELSE 'Digital Recognition' END) = 'Digital Recognition'
  AND (CASE WHEN (dw_billing_system_code IN ('APLP', 'APLS')) THEN true WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Apple Podcasts') THEN true ELSE false END) = true
GROUP BY
  1, 2, 3
LIMIT 10;","SELECT
  -- Check distribution of Recognition Type
  recognition_type,
  COUNT(*) AS record_count
FROM (
  SELECT
    CASE
      WHEN (delivery_medium_type = 'Print') THEN 'Print Recognition'
      WHEN (subscriber_has_email_flag = 'N') THEN 'Print Recognition'
      ELSE 'Digital Recognition'
    END AS recognition_type,
    -- Simplified Publication Grouping for rule validation
    CASE
      WHEN (gl_publication_code = '101' OR masthead_code = 'TA') THEN 'The Australian'
      WHEN (gl_publication_code = '400' OR masthead_code = 'CM') THEN 'Metros'
      ELSE 'Other'
    END AS publication_group,
    -- Simplified Billing System Grouping for rule validation
    CASE
      WHEN (dw_billing_system_code IN ('APLP', 'APLS', 'GPLA', 'SWG')) THEN true
      WHEN (table_union_source = 'budgetforecast' AND rate_plan_group_name = 'Apple Podcasts') THEN true
      ELSE false
    END AS billing_system_group
  FROM
    `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`
) AS sub
WHERE
  publication_group != 'Discontinued'
  AND recognition_type = 'Digital Recognition'
  AND billing_system_group = true
GROUP BY
  recognition_type
ORDER BY
  record_count DESC
LIMIT 100;",17,d05b3d29-4437-4ee5-987a-e0109eb9590e
"-- THIS IS THE MAIN SQL TO RUN --
-- Comprehensive view of key financial metrics and dimensions, sampled for performance.
WITH
  OSandFACT AS (
    SELECT
      os.source_system_name,
      os.sub_source_system_name,
      SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
      os.gl_publication_code,
      os.day_of_week,
      os.state,
      os.os_level_1,
      os.os_level_2,
      os.os_level_3,
      os.os_level_4,
      os.os_level_5,
      os.os_level_6,
      os.os_level_7,
      os.os_level_8,
      os.os_level_9,
      os.os_level_10,
      os.os_level_11,
      os.os_level_12,
      os.Estimate,
      os.True_Up_Adjustment,
      os.Actual_Amount,
      os.volume,
      os.Last_Year_Actual_Amount,
      os.Last_Year_volume,
      os.Budget_Draft_Amount,
      os.Budget_Draft_Volume,
      os.Budget_Amount,
      os.Budget_Volume,
      os.Forecast_Amount,
      os.Forecast_Volume,
      os.Budget_Jan_Amount,
      os.Budget_Jan_Volume,
      os.Budget_Feb_Amount,
      os.Budget_Feb_Volume,
      os.Budget_Mar_Amount,
      os.Budget_Mar_Volume,
      os.Budget_Apr_Amount,
      os.Budget_Apr_Volume,
      os.Budget_May_Amount,
      os.Budget_May_Volume,
      os.Budget_Jun_Amount,
      os.Budget_Jun_Volume,
      os.Budget_Jul_Amount,
      os.Budget_Jul_Volume,
      os.Budget_Aug_Amount,
      os.Budget_Aug_Volume,
      os.Budget_Sep_Amount,
      os.Budget_Sep_Volume,
      os.Budget_Oct_Amount,
      os.Budget_Oct_Volume,
      os.Budget_Nov_Amount,
      os.Budget_Nov_Volume,
      os.Budget_Dec_Amount,
      os.Budget_Dec_Volume,
      os.Forecast_Q1F_Amount,
      os.Forecast_Q1F_Volume,
      os.Forecast_Q2F_Amount,
      os.Forecast_Q2F_Volume,
      os.Forecast_Q3F_Amount,
      os.Forecast_Q3F_Volume,
      os.Forecast_Q4F_Amount,
      os.Forecast_Q4F_Volume,
      os.Forecast_Q5F_Amount,
      os.Forecast_Q5F_Volume,
      SAFE_CAST(calendar.fy_year AS INT64) AS fy_year,
      calendar.fy_month_of_year_short_name,
      calendar.fy_quarter_of_year,
      pub.publication_code AS publication_code_dim,
      dep.department_code AS department_code_dim
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON SAFE_CAST(os.gl_publication_code AS STRING) = SAFE_CAST(pub.publication_code AS STRING)
      LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
          SAFE_CAST(c.fy_year AS INT64) AS fy_year,
          c.fy_month_of_year_short_name,
          SAFE_CAST(c.fy_quarter_of_year AS INT64) AS fy_quarter_of_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
        WHERE
          control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON SAFE_CAST(os.os_level_12 AS STRING) = SAFE_CAST(dep.department_code AS STRING)
  )
SELECT
  fy_year,
  source_system_name,
  gl_publication_code,
  fy_month_of_year_short_name,
  fy_quarter_of_year,
  SUM(Actual_Amount) AS total_actual_amount,
  SUM(Budget_Amount) AS total_budget_amount,
  SUM(Forecast_Amount) AS total_forecast_amount,
  SUM(volume) AS total_volume,
  SUM(Last_Year_Actual_Amount) AS total_last_year_actual_amount
FROM
  OSandFACT
WHERE
  fy_year = (SELECT MAX(SAFE_CAST(fy_year AS INT64)) FROM `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar`) -- Filter for the latest fiscal year for sampling
GROUP BY
  fy_year,
  source_system_name,
  gl_publication_code,
  fy_month_of_year_short_name,
  fy_quarter_of_year
LIMIT 1000;","-- Query to understand data structure, grain, and key dimensions with sampling.
SELECT
  SAFE_CAST(os.fiscal_week_id AS INT64) AS fiscal_week_id,
  SAFE_CAST(calendar.fy_year AS INT64) AS fy_year,
  calendar.fy_month_of_year_short_name,
  os.source_system_name,
  os.gl_publication_code,
  os.os_level_1,
  os.Actual_Amount,
  os.Budget_Amount,
  COUNT(*) AS row_count,
  COUNT(DISTINCT SAFE_CAST(os.fiscal_week_id AS INT64)) AS distinct_fiscal_weeks,
  COUNT(DISTINCT SAFE_CAST(calendar.fy_year AS INT64)) AS distinct_fiscal_years,
  COUNT(DISTINCT os.source_system_name) AS distinct_source_systems
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
  LEFT JOIN
  (
    SELECT DISTINCT
      SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
      SAFE_CAST(c.fy_year AS INT64) AS fy_year,
      c.fy_month_of_year_short_name
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
      JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
      ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
    WHERE
      control.period_name IN ('CP', 'PY')
  ) AS calendar
  ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
WHERE
  SAFE_CAST(calendar.fy_year AS INT64) IS NOT NULL -- Ensure join succeeded for fiscal year
  AND os.Actual_Amount IS NOT NULL -- Sample where actual amount exists
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8
LIMIT 100;","-- Quick validation that all metric calculations work syntactically.
WITH
  OSandFACT AS (
    SELECT
      os.Actual_Amount,
      SAFE_CAST(calendar.fy_year AS INT64) AS fy_year,
      os.source_system_name
    FROM
      `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated` AS os
      LEFT JOIN
      `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_os_publication_hierachy` AS pub
      ON SAFE_CAST(os.gl_publication_code AS STRING) = SAFE_CAST(pub.publication_code AS STRING)
      LEFT JOIN
      (
        SELECT DISTINCT
          SAFE_CAST(c.fy_year_week_number AS INT64) AS fy_year_week_number,
          SAFE_CAST(c.fy_year AS INT64) AS fy_year
        FROM
          `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
          JOIN
          `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_period_control AS control
          ON SAFE_CAST(control.source_week_number AS INT64) = SAFE_CAST(c.fy_year_week_number AS INT64)
        WHERE
          control.period_name IN ('CP', 'PY')
      ) AS calendar
      ON SAFE_CAST(os.fiscal_week_id AS INT64) = SAFE_CAST(calendar.fy_year_week_number AS INT64)
      LEFT JOIN
      `ncau-data-newsquery-prd`.asl_finance.v_asl_DIM_gl_department AS dep
      ON SAFE_CAST(os.os_level_12 AS STRING) = SAFE_CAST(dep.department_code AS STRING)
  )
SELECT
  fy_year,
  source_system_name,
  SUM(Actual_Amount) AS validated_actual_amount_sum,
  COUNT(source_system_name) AS validated_source_system_count
FROM
  OSandFACT
WHERE
  fy_year IS NOT NULL -- Ensure join succeeded
GROUP BY
  fy_year,
  source_system_name
LIMIT 10;","-- Query to validate key business logic, filters, and data quality.
SELECT
  'Period Control Values' AS rule_name,
  period_name AS value_found,
  COUNT(*) AS count_of_value
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_period_control`
GROUP BY
  period_name
UNION ALL
SELECT
  'Calendar Month End Flag Logic Check' AS rule_name,
  CASE
    WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y'
    ELSE 'N'
  END AS value_found,
  COUNT(*) AS count_of_value
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_DIM_calendar` AS c
WHERE
  SAFE_CAST(c.fy_last_day_of_week AS DATE) IS NOT NULL
  AND SAFE_CAST(c.fy_last_day_of_month AS DATE) IS NOT NULL
GROUP BY
  CASE
    WHEN SAFE_CAST(c.fy_last_day_of_week AS DATE) = SAFE_CAST(c.fy_last_day_of_month AS DATE) THEN 'Y'
    ELSE 'N'
  END
UNION ALL
SELECT
  'Fact Table Fiscal Week ID Null Check' AS rule_name,
  CASE WHEN SAFE_CAST(fiscal_week_id AS INT64) IS NULL THEN 'NULL' ELSE 'NOT NULL' END AS value_found,
  COUNT(*) AS count_of_value
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_FCT_finance_os_aggregated`
GROUP BY
  CASE WHEN SAFE_CAST(fiscal_week_id AS INT64) IS NULL THEN 'NULL' ELSE 'NOT NULL' END
LIMIT 100;",18,d7412673-0af1-4efe-8374-ca475b001fb6
"SELECT
    SUM(t0.GROSS_AMOUNT_DIFF) AS total_gross_amount_diff,
    t0.advertiser_parent,
    t0.booking_line_id,
    t0.booking_number,
    t0.movement_date,
    t0.portfolio_group_name_sync,
    t0.portfolio_parent_group_name_sync,
    PARSE_DATE('%Y-%b-%d', CONCAT(SAFE_CAST(t0.financial_year AS STRING),'-',SAFE_CAST(t0.financial_short_month AS STRING),'-1')) AS financial_date_parsed,
    SUM(CASE WHEN (t0.revenue_type = 'DIGITAL') THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS total_digital_gross_amount_diff,
    SUM(CASE WHEN (t0.revenue_type = 'PRINT') THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS total_print_gross_amount_diff,
    CASE WHEN (t0.advertiser_group IS NULL) THEN 'Nah' ELSE t0.advertiser_group END AS advertiser_group_cleaned,
    CASE
        WHEN (t0.xtend_flag = 'Y') THEN 'XTEND'
        WHEN (SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO' OR ((t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (t0.revenue_sub_type = 'DIGITAL'))) THEN 'PROGRAMMATIC'
        WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
        WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY'
        ELSE t0.revenue_sub_type
    END AS revenue_category,
    t0.revenue_type,
    t0.financial_year,
    t0.portfolio_conformed_name_sync
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE
    t0.movement_date BETWEEN DATE('2025-01-01') AND DATE('2025-12-31') -- Example date range, should be parameterized
    AND t0.financial_year = 2025 -- Example filter, should be parameterized
GROUP BY
    t0.advertiser_parent,
    t0.booking_line_id,
    t0.booking_number,
    t0.movement_date,
    t0.portfolio_group_name_sync,
    t0.portfolio_parent_group_name_sync,
    financial_date_parsed,
    advertiser_group_cleaned,
    revenue_category,
    t0.revenue_type,
    t0.financial_year,
    t0.portfolio_conformed_name_sync
LIMIT 1000;","SELECT column_name, data_type FROM `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement`.INFORMATION_SCHEMA.COLUMNS;","SELECT
    SUM(t0.GROSS_AMOUNT_DIFF) AS total_gross_amount_diff,
    CASE WHEN (t0.advertiser_group IS NULL) THEN 'Nah' ELSE t0.advertiser_group END AS advertiser_group_cleaned,
    PARSE_DATE('%Y-%b-%d', CONCAT(SAFE_CAST(t0.financial_year AS STRING),'-',SAFE_CAST(t0.financial_short_month AS STRING),'-1')) AS financial_date_parsed,
    SUM(CASE WHEN (t0.revenue_type = 'DIGITAL') THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS total_digital_gross_amount_diff,
    SUM(CASE WHEN (t0.revenue_type = 'PRINT') THEN t0.GROSS_AMOUNT_DIFF ELSE 0 END) AS total_print_gross_amount_diff,
    CASE
        WHEN (t0.xtend_flag = 'Y') THEN 'XTEND'
        WHEN (SAFE.LEFT(t0.revenue_sub_type, 3) = 'PRO' OR ((t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER') AND (t0.revenue_sub_type = 'DIGITAL'))) THEN 'PROGRAMMATIC'
        WHEN (t0.revenue_sub_type = 'DIGITAL') THEN 'ADPT DIGITAL'
        WHEN (SAFE.LEFT(t0.revenue_sub_type, 6) = 'SUNDRY') THEN 'SUNDRY'
        ELSE t0.revenue_sub_type
    END AS revenue_category
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE
    t0.movement_date BETWEEN DATE('2025-01-01') AND DATE('2025-01-02')
GROUP BY
    advertiser_group_cleaned,
    financial_date_parsed,
    revenue_category
LIMIT 10;","SELECT
    t0.financial_year,
    t0.portfolio_parent_group_name_sync,
    t0.portfolio_conformed_name_sync,
    t0.revenue_sub_type,
    t0.revenue_type,
    t0.xtend_flag,
    COUNT(1) AS record_count,
    COUNTIF(t0.advertiser_group IS NULL) AS null_advertiser_group_count,
    COUNTIF(t0.xtend_flag = 'Y') AS xtend_flag_y_count,
    COUNTIF(t0.revenue_sub_type = 'DIGITAL') AS digital_revenue_sub_type_count,
    COUNTIF(t0.revenue_type = 'DIGITAL') AS digital_revenue_type_count,
    COUNTIF(t0.revenue_type = 'PRINT') AS print_revenue_type_count,
    COUNTIF(t0.portfolio_parent_group_name_sync = 'DIGITAL OTHER') AS digital_other_parent_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
WHERE
    t0.movement_date BETWEEN DATE('2025-01-01') AND DATE('2025-12-31') -- Example date range
GROUP BY
    t0.financial_year,
    t0.portfolio_parent_group_name_sync,
    t0.portfolio_conformed_name_sync,
    t0.revenue_sub_type,
    t0.revenue_type,
    t0.xtend_flag
LIMIT 1000;",19,a1b901e6-c4fb-44bc-955a-3a7070c15829
"WITH
  -- Base data source and date generation CTEs (as in original queries)
  adex_data AS (
    SELECT
      *
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type,
      portfolio_parent_group_name,
      date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM
      (
        SELECT DISTINCT
          Media_Type,
          portfolio_parent_group_name
        FROM
          adex_data
      )
      CROSS JOIN
      UNNEST(GENERATE_DATE_ARRAY((
          SELECT
            MIN(date)
          FROM
            adex_data
        ), (
          SELECT
            MAX(date)
          FROM
            adex_data
        ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*,
      financial_year,
      Major_Category,
      Advertiser_Group___Advertiser,
      Advertiser,
      Media_Network,
      Media_Group,
      Ad_Type,
      Brand,
      Product,
      Category,
      Sub_Category,
      account_number,
      portfolio_group_name,
      portfolio_conformed_name,
      Spend,
      sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN
      adex_data
      ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name =
        adex_data.portfolio_parent_group_name
  ),
  -- Define hardcoded date strings and parse them as seen in original queries
  date_strings AS (
    SELECT
      'Aug 23' AS start_date_str_raw,
      'Jun 24' AS end_date_str_raw
  ),
  parsed_date_components AS (
    SELECT
      SAFE.RIGHT(start_date_str_raw, 2) AS start_year_short,
      SAFE.LEFT(start_date_str_raw, 3) AS start_month_short,
      SAFE.RIGHT(end_date_str_raw, 2) AS end_year_short,
      SAFE.LEFT(end_date_str_raw, 3) AS end_month_short
    FROM date_strings
  ),
  date_params AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(start_year_short AS STRING), '-',
        (CASE start_month_short
          WHEN 'Jan' THEN '1' WHEN 'Feb' THEN '2' WHEN 'Mar' THEN '3' WHEN 'Apr' THEN '4' WHEN 'May' THEN '5' WHEN 'Jun' THEN '6'
          WHEN 'Jul' THEN '7' WHEN 'Aug' THEN '8' WHEN 'Sep' THEN '9' WHEN 'Oct' THEN '10' WHEN 'Nov' THEN '11' WHEN 'Dec' THEN '12'
          ELSE NULL END), '-1')) AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(end_year_short AS STRING), '-',
        (CASE end_month_short
          WHEN 'Jan' THEN '1' WHEN 'Feb' THEN '2' WHEN 'Mar' THEN '3' WHEN 'Apr' THEN '4' WHEN 'May' THEN '5' WHEN 'Jun' THEN '6'
          WHEN 'Jul' THEN '7' WHEN 'Aug' THEN '8' WHEN 'Sep' THEN '9' WHEN 'Oct' THEN '10' WHEN 'Nov' THEN '11' WHEN 'Dec' THEN '12'
          ELSE NULL END), '-1')) AS current_period_end_date
    FROM parsed_date_components
  ),
  -- Final transformed data with all necessary date ranges and original fields
  final_data AS (
    SELECT
      afd.*,
      dp.current_period_start_date,
      dp.current_period_end_date,
      DATE_ADD(dp.current_period_start_date, INTERVAL -12 MONTH) AS previous_year_start_date,
      DATE_ADD(dp.current_period_end_date, INTERVAL -12 MONTH) AS previous_year_end_date,
      FORMAT_DATETIME('%b', DATETIME(afd.date)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', DATETIME(afd.date)) AS INT) AS calendar_year,
      SUM(afd.Spend) OVER (PARTITION BY afd.date) AS spend_monthly_agg -- Re-adding this window function as it was in the original base CTE
    FROM
      adex_full_date AS afd
      CROSS JOIN date_params AS dp
  )
SELECT
  -- Dimensions
  final_data.date,
  final_data.Major_Category,
  final_data.Media_Network,
  final_data.Media_Group,
  final_data.Media_Type,
  final_data.calendar_month_short_name,
  final_data.calendar_year,
  -- Base Measure
  SUM(final_data.Spend) AS total_spend,
  -- Calculated Metrics
  SUM(CASE WHEN (final_data.date >= final_data.current_period_start_date AND final_data.date <= final_data.current_period_end_date) THEN final_data.Spend ELSE NULL END) AS current_period_spend,
  SUM(CASE WHEN (final_data.date >= final_data.previous_year_start_date AND final_data.date <= final_data.previous_year_end_date) THEN final_data.Spend ELSE NULL END) AS previous_year_spend,
  SUM(CASE WHEN (final_data.date >= final_data.current_period_start_date AND final_data.date <= final_data.current_period_end_date AND final_data.Media_Network = 'NEWS CORP') THEN final_data.Spend ELSE NULL END) AS current_period_news_corp_spend,
  SUM(CASE WHEN (final_data.date >= final_data.previous_year_start_date AND final_data.date <= final_data.previous_year_end_date AND final_data.Media_Network = 'NEWS CORP') THEN final_data.Spend ELSE NULL END) AS previous_year_news_corp_spend,
  SUM(CASE WHEN (final_data.date >= final_data.current_period_start_date AND final_data.date <= final_data.current_period_end_date AND final_data.Major_Category = 'Retail') THEN final_data.Spend ELSE NULL END) AS current_period_retail_spend,
  -- Flag (aggregated as MAX to represent if any row in the group falls into the current period)
  MAX(CASE WHEN (final_data.date >= final_data.current_period_start_date AND final_data.date <= final_data.current_period_end_date) THEN TRUE ELSE FALSE END) AS is_current_period_flag,
  -- Window function metric
  ANY_VALUE(final_data.spend_monthly_agg) AS spend_monthly_aggregate -- Use ANY_VALUE as it's already pre-calculated per month
FROM
  final_data
WHERE
  -- Filter to a relevant date range to avoid processing excessive data, covering both current and previous year periods
  final_data.date BETWEEN DATE_ADD(final_data.previous_year_start_date, INTERVAL -1 MONTH) AND DATE_ADD(final_data.current_period_end_date, INTERVAL 1 MONTH)
GROUP BY
  final_data.date,
  final_data.Major_Category,
  final_data.Media_Network,
  final_data.Media_Group,
  final_data.Media_Type,
  final_data.calendar_month_short_name,
  final_data.calendar_year
ORDER BY
  final_data.date,
  final_data.Major_Category,
  final_data.Media_Network,
  final_data.Media_Group,
  final_data.Media_Type
LIMIT 1000;","SELECT
  date,
  Media_Type,
  portfolio_parent_group_name,
  financial_year,
  Major_Category,
  Advertiser_Group___Advertiser,
  Advertiser,
  Media_Network,
  Media_Group,
  Ad_Type,
  Brand,
  Product,
  Category,
  Sub_Category,
  account_number,
  portfolio_group_name,
  portfolio_conformed_name,
  Spend,
  sales_segment_gm_name
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
LIMIT 100;","WITH
  -- Replicate core CTEs for validation
  adex_data AS (
    SELECT
      * FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type, portfolio_parent_group_name, date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM (
      SELECT DISTINCT Media_Type, portfolio_parent_group_name FROM adex_data
    )
    CROSS JOIN UNNEST(GENERATE_DATE_ARRAY((
      SELECT MIN(date) FROM adex_data
    ), (
      SELECT MAX(date) FROM adex_data
    ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*, financial_year, Major_Category, Advertiser_Group___Advertiser, Advertiser, Media_Network, Media_Group, Ad_Type, Brand, Product, Category, Sub_Category, account_number, portfolio_group_name, portfolio_conformed_name, Spend, sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN adex_data ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name = adex_data.portfolio_parent_group_name
  ),
  date_strings AS (
    SELECT 'Aug 23' AS start_date_str_raw, 'Jun 24' AS end_date_str_raw
  ),
  parsed_date_components AS (
    SELECT
      SAFE.RIGHT(start_date_str_raw, 2) AS start_year_short,
      SAFE.LEFT(start_date_str_raw, 3) AS start_month_short,
      SAFE.RIGHT(end_date_str_raw, 2) AS end_year_short,
      SAFE.LEFT(end_date_str_raw, 3) AS end_month_short
    FROM date_strings
  ),
  date_params AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(start_year_short AS STRING), '-',
        (CASE start_month_short WHEN 'Jan' THEN '1' WHEN 'Feb' THEN '2' WHEN 'Mar' THEN '3' WHEN 'Apr' THEN '4' WHEN 'May' THEN '5' WHEN 'Jun' THEN '6'
          WHEN 'Jul' THEN '7' WHEN 'Aug' THEN '8' WHEN 'Sep' THEN '9' WHEN 'Oct' THEN '10' WHEN 'Nov' THEN '11' WHEN 'Dec' THEN '12' ELSE NULL END), '-1')) AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(end_year_short AS STRING), '-',
        (CASE end_month_short WHEN 'Jan' THEN '1' WHEN 'Feb' THEN '2' WHEN 'Mar' THEN '3' WHEN 'Apr' THEN '4' WHEN 'May' THEN '5' WHEN 'Jun' THEN '6'
          WHEN 'Jul' THEN '7' WHEN 'Aug' THEN '8' WHEN 'Sep' THEN '9' WHEN 'Oct' THEN '10' WHEN 'Nov' THEN '11' WHEN 'Dec' THEN '12' ELSE NULL END), '-1')) AS current_period_end_date
    FROM parsed_date_components
  ),
  final_data AS (
    SELECT
      afd.*,
      dp.current_period_start_date,
      dp.current_period_end_date,
      DATE_ADD(dp.current_period_start_date, INTERVAL -12 MONTH) AS previous_year_start_date,
      DATE_ADD(dp.current_period_end_date, INTERVAL -12 MONTH) AS previous_year_end_date
    FROM
      adex_full_date AS afd
      CROSS JOIN date_params AS dp
  )
SELECT
  SUM(CASE WHEN (final_data.date >= final_data.current_period_start_date AND final_data.date <= final_data.current_period_end_date) THEN final_data.Spend ELSE NULL END) AS total_current_period_spend,
  SUM(CASE WHEN (final_data.date >= final_data.previous_year_start_date AND final_data.date <= final_data.previous_year_end_date) THEN final_data.Spend ELSE NULL END) AS total_previous_year_spend,
  SUM(CASE WHEN (final_data.date >= final_data.current_period_start_date AND final_data.date <= final_data.current_period_end_date AND final_data.Media_Network = 'NEWS CORP') THEN final_data.Spend ELSE NULL END) AS total_current_period_news_corp_spend,
  SUM(final_data.Spend) AS overall_total_spend
FROM
  final_data
WHERE
  final_data.date BETWEEN DATE_ADD(final_data.previous_year_start_date, INTERVAL -1 MONTH) AND DATE_ADD(final_data.current_period_end_date, INTERVAL 1 MONTH)
LIMIT 1;","WITH
  -- Replicate core CTEs for business rule validation
  adex_data AS (
    SELECT
      * FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
  ),
  adex_date_fact AS (
    SELECT
      Media_Type, portfolio_parent_group_name, date,
      DATE_ADD(date, INTERVAL 1 MONTH) AS next_mth,
      DATE_ADD(date, INTERVAL 12 MONTH) AS next_yr
    FROM (
      SELECT DISTINCT Media_Type, portfolio_parent_group_name FROM adex_data
    )
    CROSS JOIN UNNEST(GENERATE_DATE_ARRAY((
      SELECT MIN(date) FROM adex_data
    ), (
      SELECT MAX(date) FROM adex_data
    ), INTERVAL 1 MONTH)) AS date
  ),
  adex_full_date AS (
    SELECT
      adf.*, financial_year, Major_Category, Advertiser_Group___Advertiser, Advertiser, Media_Network, Media_Group, Ad_Type, Brand, Product, Category, Sub_Category, account_number, portfolio_group_name, portfolio_conformed_name, Spend, sales_segment_gm_name
    FROM
      adex_date_fact AS adf
      LEFT JOIN adex_data ON adf.date = adex_data.date AND adf.Media_Type = adex_data.Media_Type AND adf.portfolio_parent_group_name = adex_data.portfolio_parent_group_name
  ),
  date_strings AS (
    SELECT 'Aug 23' AS start_date_str_raw, 'Jun 24' AS end_date_str_raw
  ),
  parsed_date_components AS (
    SELECT
      SAFE.RIGHT(start_date_str_raw, 2) AS start_year_short,
      SAFE.LEFT(start_date_str_raw, 3) AS start_month_short,
      SAFE.RIGHT(end_date_str_raw, 2) AS end_year_short,
      SAFE.LEFT(end_date_str_raw, 3) AS end_month_short
    FROM date_strings
  ),
  date_params AS (
    SELECT
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(start_year_short AS STRING), '-',
        (CASE start_month_short WHEN 'Jan' THEN '1' WHEN 'Feb' THEN '2' WHEN 'Mar' THEN '3' WHEN 'Apr' THEN '4' WHEN 'May' THEN '5' WHEN 'Jun' THEN '6'
          WHEN 'Jul' THEN '7' WHEN 'Aug' THEN '8' WHEN 'Sep' THEN '9' WHEN 'Oct' THEN '10' WHEN 'Nov' THEN '11' WHEN 'Dec' THEN '12' ELSE NULL END), '-1')) AS current_period_start_date,
      PARSE_DATE('%Y-%m-%d', CONCAT('20', SAFE_CAST(end_year_short AS STRING), '-',
        (CASE end_month_short WHEN 'Jan' THEN '1' WHEN 'Feb' THEN '2' WHEN 'Mar' THEN '3' WHEN 'Apr' THEN '4' WHEN 'May' THEN '5' WHEN 'Jun' THEN '6'
          WHEN 'Jul' THEN '7' WHEN 'Aug' THEN '8' WHEN 'Sep' THEN '9' WHEN 'Oct' THEN '10' WHEN 'Nov' THEN '11' WHEN 'Dec' THEN '12' ELSE NULL END), '-1')) AS current_period_end_date
    FROM parsed_date_components
  )
SELECT
  'Hardcoded Date Range' AS rule_name,
  dp.current_period_start_date AS start_date,
  dp.current_period_end_date AS end_date,
  DATE_ADD(dp.current_period_start_date, INTERVAL -12 MONTH) AS previous_year_start_date,
  DATE_ADD(dp.current_period_end_date, INTERVAL -12 MONTH) AS previous_year_end_date
FROM date_params AS dp
UNION ALL
SELECT
  'Hardcoded Filter Value: Media_Network' AS rule_name,
  NULL AS start_date,
  NULL AS end_date,
  NULL AS previous_year_start_date,
  NULL AS previous_year_end_date
FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE Media_Network = 'NEWS CORP'
LIMIT 1
UNION ALL
SELECT
  'Hardcoded Filter Value: Major_Category' AS rule_name,
  NULL AS start_date,
  NULL AS end_date,
  NULL AS previous_year_start_date,
  NULL AS previous_year_end_date
FROM `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE Major_Category = 'Retail'
LIMIT 1;",20,e9d8a216-4950-4d30-b344-5011776edbdf
"-- Primary Analysis SQL: Combines key dimensions and calculated fields from the dashboard.
-- This query aims to provide a unified view of the data, incorporating the logic
-- for financial/calendar date selection and custom ordering of dimensions.
-- A placeholder measure (record_count) is included as no explicit measures were found.

SELECT
    t0.advertiser_name,
    t0.agency_group,
    t0.employee_name,
    t0.publication_date,
    t0.dow,
    t0.calendar_month_short_name,
    t0.calendar_year,
    t0.financial_short_month,
    t0.financial_year,
    t0.portfolio_conformed_name_current,
    t0.portfolio_conformed_name_sync,
    t0.unified_publication_name,
    -- Calculated field: Day of Week (Ordered)
    CASE
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Monday' THEN 'Monday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Tuesday' THEN ' Tuesday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Wednesday' THEN '  Wednesday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Thursday' THEN '   Thursday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Friday' THEN '    Friday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Saturday' THEN '     Saturday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Sunday' THEN '      Sunday'
        ELSE NULL
    END AS day_of_week_ordered,
    -- Calculated field: Selected Month (Financial/Calendar)
    -- Note: Original queries hardcoded 'Fin' = 'Fin', always selecting financial.
    -- This version reflects that behavior. For dynamic switching, a parameter is needed.
    CASE
        WHEN 'Fin' = 'Fin' THEN SAFE_CAST(t0.financial_short_month AS STRING)
        ELSE SAFE_CAST(t0.calendar_month_short_name AS STRING)
    END AS selected_month,
    -- Calculated field: Selected Year (Financial/Calendar)
    -- Note: Original queries hardcoded 'Fin' = 'Fin', always selecting financial.
    -- This version reflects that behavior. For dynamic switching, a parameter is needed.
    CASE
        WHEN 'Fin' = 'Fin' THEN SAFE_CAST(t0.financial_year AS STRING)
        ELSE SAFE_CAST(t0.calendar_year AS STRING)
    END AS selected_year,
    -- Calculated field: Selected Portfolio Name (Current/Sync)
    -- Note: Original queries hardcoded 'Curr' = 'Curr', always selecting current.
    -- This version reflects that behavior. For dynamic switching, a parameter is needed.
    CASE
        WHEN 'Curr' = 'Curr' THEN SAFE_CAST(t0.portfolio_conformed_name_current AS STRING)
        ELSE SAFE_CAST(t0.portfolio_conformed_name_sync AS STRING)
    END AS selected_portfolio_name,
    COUNT(*) AS record_count -- Placeholder measure
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    -- Example filters based on original queries, but generalized for broader use.
    -- To replicate specific dashboard views, uncomment and adjust these filters.
    -- SAFE_CAST(t0.financial_year AS STRING) IN ('2025')
    -- AND SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) IN ('NSW IA C3')
    -- AND SAFE_CAST(t0.financial_short_month AS STRING) IN ('Feb', 'Mar', 'Apr', 'May', 'Jun')
    -- AND SAFE_CAST(t0.employee_name AS STRING) IN ('Marley-Kale Kentia')
    -- AND SAFE_CAST(t0.advertiser_name AS STRING) IN ('Australian Meat Processor Corporation', 'Australian Pork', 'CMC Markets', 'Coco Republic', 'Dry July Limited', 'Fred Hollows Foundation', 'LGT Crestone')
    -- AND SAFE_CAST(t0.financial_short_month AS STRING) IN ('Jul', 'Aug', 'Sep') -- This filter was on selected_month
    -- AND (SAFE_CAST(t0.financial_year AS STRING) NOT IN ('2024') OR t0.financial_year IS NULL)
    -- AND SAFE_CAST(t0.unified_publication_name AS STRING) IN ('Vogue Australia')
    1=1 -- Placeholder to allow easy commenting/uncommenting of filters
GROUP BY
    t0.advertiser_name,
    t0.agency_group,
    t0.employee_name,
    t0.publication_date,
    t0.dow,
    t0.calendar_month_short_name,
    t0.calendar_year,
    t0.financial_short_month,
    t0.financial_year,
    t0.portfolio_conformed_name_current,
    t0.portfolio_conformed_name_sync,
    t0.unified_publication_name,
    day_of_week_ordered,
    selected_month,
    selected_year,
    selected_portfolio_name
LIMIT 1000;","-- Structure SQL: Provides insights into the table schema, data types, and cardinality of key dimensions.
-- This helps in understanding the data grain and potential for joins or aggregations.

SELECT
    column_name,
    data_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.INFORMATION_SCHEMA.COLUMNS`
WHERE
    table_name = 'details_dashboard'
ORDER BY
    column_name;

-- Sample data to understand the grain and values
SELECT
    t0.publication_date,
    t0.financial_year,
    t0.financial_short_month,
    t0.calendar_year,
    t0.calendar_month_short_name,
    t0.advertiser_name,
    t0.agency_group,
    t0.employee_name,
    t0.unified_publication_name,
    t0.portfolio_conformed_name_current,
    t0.dow
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
LIMIT 100;

-- Cardinality of key dimensions
SELECT
    'advertiser_name' AS dimension, COUNT(DISTINCT SAFE_CAST(advertiser_name AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'agency_group' AS dimension, COUNT(DISTINCT SAFE_CAST(agency_group AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'employee_name' AS dimension, COUNT(DISTINCT SAFE_CAST(employee_name AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'unified_publication_name' AS dimension, COUNT(DISTINCT SAFE_CAST(unified_publication_name AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'portfolio_conformed_name_current' AS dimension, COUNT(DISTINCT SAFE_CAST(portfolio_conformed_name_current AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'financial_year' AS dimension, COUNT(DISTINCT SAFE_CAST(financial_year AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'calendar_year' AS dimension, COUNT(DISTINCT SAFE_CAST(calendar_year AS STRING)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` UNION ALL
SELECT
    'publication_date' AS dimension, COUNT(DISTINCT SAFE_CAST(publication_date AS DATE)) AS distinct_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`;","-- Validation SQL: Confirms the syntax and basic functionality of calculated fields.
-- This query checks if the CASE statements and casting work as expected.

SELECT
    -- Validate day_of_week_ordered
    SAFE_CAST(t0.dow AS STRING) AS original_dow,
    CASE
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Monday' THEN 'Monday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Tuesday' THEN ' Tuesday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Wednesday' THEN '  Wednesday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Thursday' THEN '   Thursday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Friday' THEN '    Friday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Saturday' THEN '     Saturday'
        WHEN SAFE_CAST(t0.dow AS STRING) = 'Sunday' THEN '      Sunday'
        ELSE NULL
    END AS validated_day_of_week_ordered,
    -- Validate selected_month
    SAFE_CAST(t0.financial_short_month AS STRING) AS original_financial_month,
    SAFE_CAST(t0.calendar_month_short_name AS STRING) AS original_calendar_month,
    CASE
        WHEN 'Fin' = 'Fin' THEN SAFE_CAST(t0.financial_short_month AS STRING)
        ELSE SAFE_CAST(t0.calendar_month_short_name AS STRING)
    END AS validated_selected_month,
    -- Validate selected_year
    SAFE_CAST(t0.financial_year AS STRING) AS original_financial_year,
    SAFE_CAST(t0.calendar_year AS STRING) AS original_calendar_year,
    CASE
        WHEN 'Fin' = 'Fin' THEN SAFE_CAST(t0.financial_year AS STRING)
        ELSE SAFE_CAST(t0.calendar_year AS STRING)
    END AS validated_selected_year,
    -- Validate selected_portfolio_name
    SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) AS original_current_portfolio,
    SAFE_CAST(t0.portfolio_conformed_name_sync AS STRING) AS original_sync_portfolio,
    CASE
        WHEN 'Curr' = 'Curr' THEN SAFE_CAST(t0.portfolio_conformed_name_current AS STRING)
        ELSE SAFE_CAST(t0.portfolio_conformed_name_sync AS STRING)
    END AS validated_selected_portfolio_name
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    t0.dow IS NOT NULL -- Ensure we get some data for validation
LIMIT 10;","-- Business Rules SQL: Examines the impact of hardcoded filters and the behavior of conditional logic.
-- This helps in identifying potential data governance issues and understanding data distribution under specific rules.

-- 1. Check distribution of 'selected_year' when 'Fin' = 'Fin' is hardcoded
SELECT
    CASE
        WHEN 'Fin' = 'Fin' THEN SAFE_CAST(t0.financial_year AS STRING)
        ELSE SAFE_CAST(t0.calendar_year AS STRING)
    END AS selected_year_actual,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
GROUP BY
    1
ORDER BY
    1;

-- 2. Verify the effect of hardcoded filters from Query 2
SELECT
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year_filtered,
    SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) AS portfolio_filtered,
    SAFE_CAST(t0.financial_short_month AS STRING) AS financial_month_filtered,
    SAFE_CAST(t0.employee_name AS STRING) AS employee_filtered,
    SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_filtered,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2025')
    AND SAFE_CAST(t0.portfolio_conformed_name_current AS STRING) IN ('NSW IA C3')
    AND SAFE_CAST(t0.financial_short_month AS STRING) IN ('Feb', 'Mar', 'Apr', 'May', 'Jun')
    AND SAFE_CAST(t0.employee_name AS STRING) IN ('Marley-Kale Kentia')
    AND SAFE_CAST(t0.advertiser_name AS STRING) IN ('Australian Meat Processor Corporation', 'Australian Pork', 'CMC Markets', 'Coco Republic', 'Dry July Limited', 'Fred Hollows Foundation', 'LGT Crestone')
GROUP BY
    1, 2, 3, 4, 5
LIMIT 100;

-- 3. Verify the effect of hardcoded filters from Query 3
SELECT
    SAFE_CAST(t0.financial_short_month AS STRING) AS financial_month_filtered,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year_filtered,
    SAFE_CAST(t0.unified_publication_name AS STRING) AS publication_filtered,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE
    SAFE_CAST(t0.financial_short_month AS STRING) IN ('Jul', 'Aug', 'Sep')
    AND (SAFE_CAST(t0.financial_year AS STRING) NOT IN ('2024') OR t0.financial_year IS NULL)
    AND SAFE_CAST(t0.unified_publication_name AS STRING) IN ('Vogue Australia')
GROUP BY
    1, 2, 3
LIMIT 100;

-- 4. Check for NULLs in key dimensions used in filters
SELECT
    'advertiser_name' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE advertiser_name IS NULL UNION ALL
SELECT
    'employee_name' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE employee_name IS NULL UNION ALL
SELECT
    'publication_date' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE publication_date IS NULL UNION ALL
SELECT
    'financial_year' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE financial_year IS NULL UNION ALL
SELECT
    'financial_short_month' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE financial_short_month IS NULL UNION ALL
SELECT
    'portfolio_conformed_name_current' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE portfolio_conformed_name_current IS NULL UNION ALL
SELECT
    'agency_group' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE agency_group IS NULL UNION ALL
SELECT
    'unified_publication_name' AS column_name, COUNT(*) AS null_count FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` WHERE unified_publication_name IS NULL;",21,d4d68a71-2b12-4caf-bc6b-96fc2d18a025
"SELECT
    SAFE_CAST(t0.month_name AS STRING) AS month_name,
    COUNT(SAFE_CAST(t0.fy_month_num AS INT64)) AS count_of_fiscal_month_numbers,
    SUM(SAFE_CAST(t0.fy_month_num AS INT64)) AS sum_of_fiscal_month_numbers
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
-- Consider adding a WHERE clause for specific fiscal years or date ranges if available in the table
-- e.g., WHERE t0.fiscal_year = 2023
GROUP BY
    month_name
LIMIT 2000001;","SELECT
    SAFE_CAST(t0.month_name AS STRING) AS month_name_sample,
    MIN(SAFE_CAST(t0.fy_month_num AS INT64)) AS min_fiscal_month_number,
    MAX(SAFE_CAST(t0.fy_month_num AS INT64)) AS max_fiscal_month_number,
    COUNT(*) AS records_per_month_name
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
GROUP BY
    month_name_sample
ORDER BY
    min_fiscal_month_number -- Assuming fy_month_num provides a natural order for months
LIMIT 100;","SELECT
    COUNT(SAFE_CAST(t0.fy_month_num AS INT64)) AS total_count_of_fiscal_month_numbers_validation,
    SUM(SAFE_CAST(t0.fy_month_num AS INT64)) AS total_sum_of_fiscal_month_numbers_validation
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
WHERE
    SAFE_CAST(t0.fy_month_num AS INT64) IS NOT NULL -- Ensure we are only counting/summing non-null values
LIMIT 1000;","SELECT
    'month_name_null_check' AS check_type,
    COUNTIF(SAFE_CAST(t0.month_name AS STRING) IS NULL) AS null_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
UNION ALL
SELECT
    'fy_month_num_null_check' AS check_type,
    COUNTIF(SAFE_CAST(t0.fy_month_num AS INT64) IS NULL) AS null_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
UNION ALL
SELECT
    'distinct_month_names_count' AS check_type,
    COUNT(DISTINCT SAFE_CAST(t0.month_name AS STRING)) AS distinct_value_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0
UNION ALL
SELECT
    'distinct_fy_month_num_count' AS check_type,
    COUNT(DISTINCT SAFE_CAST(t0.fy_month_num AS INT64)) AS distinct_value_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dv_gl_reconciliation` AS t0;",22,f353b933-30eb-4853-9976-0d35371db7d7
"WITH BaseData AS (
  SELECT
    t0.cost_model_type,
    t0.financial_month,
    t0.financial_quarter,
    t0.financial_short_month,
    t0.gross_revenue_amount,
    t0.relative_fy_month_offset,
    t0.relative_fy_year_offset,
    t0.reporting_date,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AS hardcoded_reference_date -- Original hardcoded date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
),
DerivedDimensions AS (
  SELECT
    cost_model_type,
    financial_month,
    financial_quarter,
    financial_short_month,
    gross_revenue_amount,
    relative_fy_month_offset,
    relative_fy_year_offset,
    reporting_date,
    revenue_group_subtype,
    unified_publication_name,
    hardcoded_reference_date,
    -- Derived Dimension: Programmatic Type
    CASE
      WHEN unified_publication_name = 'TUBI' THEN 'TUBI'
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
      WHEN unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE'
      ELSE NULL
    END AS programmatic_type,
    -- Derived Flag: Is 'Run of Audience Extension' (for PERFORMANCE type)
    CASE WHEN unified_publication_name = 'Run of Audience Extension' THEN 'Y' ELSE 'N' END AS is_run_of_audience_extension_performance_flag
  FROM BaseData
),
CalculatedRevenue AS (
  SELECT
    cost_model_type,
    financial_month,
    financial_quarter,
    financial_short_month,
    gross_revenue_amount,
    relative_fy_month_offset,
    relative_fy_year_offset,
    reporting_date,
    revenue_group_subtype,
    unified_publication_name,
    programmatic_type,
    hardcoded_reference_date,
    -- Derived Measure: Programmatic Source Revenue
    CASE WHEN UPPER(SAFE_CAST(revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount ELSE NULL END AS programmatic_source_revenue,
    -- Derived Measure: Core Calculated Revenue (clmn20_ in Q1/2, clmn14_/clmn15_ in Q3)
    CASE
      WHEN programmatic_type = 'PERFORMANCE' THEN gross_revenue_amount
      ELSE (CASE WHEN UPPER(SAFE_CAST(revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount ELSE NULL END)
    END AS calculated_revenue
  FROM DerivedDimensions
),
TimeFilteredRevenue AS (
  SELECT
    cost_model_type,
    financial_month,
    financial_quarter,
    financial_short_month,
    gross_revenue_amount,
    relative_fy_month_offset,
    relative_fy_year_offset,
    reporting_date,
    revenue_group_subtype,
    unified_publication_name,
    programmatic_type,
    calculated_revenue,
    -- Derived Flag: Is Actuals (reporting_date < hardcoded_reference_date)
    (reporting_date < hardcoded_reference_date) AS is_actuals_flag,
    -- Derived Measure: Current FY Revenue (relative_fy_year_offset = 0)
    CASE WHEN relative_fy_year_offset = 0 THEN calculated_revenue ELSE NULL END AS current_fy_revenue,
    -- Derived Measure: Previous FY Revenue (relative_fy_year_offset = -1)
    CASE WHEN relative_fy_year_offset = -1 THEN calculated_revenue ELSE NULL END AS previous_fy_revenue,
    -- Derived Measure: Actuals Revenue (reporting_date < hardcoded_reference_date)
    CASE WHEN reporting_date < hardcoded_reference_date THEN calculated_revenue ELSE NULL END AS actuals_revenue
  FROM CalculatedRevenue
)
SELECT
  financial_short_month,
  financial_quarter,
  financial_month,
  relative_fy_month_offset,
  relative_fy_year_offset,
  reporting_date,
  programmatic_type,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(calculated_revenue) AS total_calculated_revenue,
  SUM(current_fy_revenue) AS total_current_fy_revenue,
  SUM(previous_fy_revenue) AS total_previous_fy_revenue,
  SUM(actuals_revenue) AS total_actuals_revenue,
  -- Specific Programmatic Type Revenue (Current FY)
  SUM(CASE WHEN programmatic_type = 'TUBI' THEN current_fy_revenue ELSE 0 END) AS tubi_revenue,
  SUM(CASE WHEN programmatic_type = 'PERFORMANCE' THEN current_fy_revenue ELSE NULL END) AS performance_revenue,
  SUM(CASE WHEN programmatic_type = 'PG' THEN current_fy_revenue ELSE NULL END) AS pg_revenue,
  SUM(CASE WHEN programmatic_type = 'PMP' THEN current_fy_revenue ELSE NULL END) AS pmp_revenue,
  SUM(CASE WHEN programmatic_type = 'OMP' THEN current_fy_revenue ELSE NULL END) AS omp_revenue,
  -- Specific Programmatic Type Actuals Revenue
  SUM(CASE WHEN programmatic_type = 'TUBI' AND is_actuals_flag THEN current_fy_revenue ELSE 0 END) AS tubi_actuals_revenue,
  SUM(CASE WHEN programmatic_type = 'PERFORMANCE' AND is_actuals_flag THEN current_fy_revenue ELSE NULL END) AS performance_actuals_revenue,
  SUM(CASE WHEN programmatic_type = 'PG' THEN actuals_revenue ELSE NULL END) AS pg_actuals_revenue,
  SUM(CASE WHEN programmatic_type = 'PMP' THEN actuals_revenue ELSE NULL END) AS pmp_actuals_revenue,
  SUM(CASE WHEN programmatic_type = 'OMP' THEN actuals_revenue ELSE NULL END) AS omp_actuals_revenue,
  -- Specific Programmatic Type Previous FY Revenue
  SUM(CASE WHEN programmatic_type = 'TUBI' THEN previous_fy_revenue ELSE 0 END) AS tubi_previous_fy_revenue,
  SUM(CASE WHEN programmatic_type = 'PERFORMANCE' THEN previous_fy_revenue ELSE NULL END) AS performance_previous_fy_revenue,
  SUM(CASE WHEN programmatic_type = 'PG' THEN previous_fy_revenue ELSE NULL END) AS pg_previous_fy_revenue,
  SUM(CASE WHEN programmatic_type = 'PMP' THEN previous_fy_revenue ELSE NULL END) AS pmp_previous_fy_revenue,
  SUM(CASE WHEN programmatic_type = 'OMP' THEN previous_fy_revenue ELSE NULL END) AS omp_previous_fy_revenue
FROM TimeFilteredRevenue
WHERE relative_fy_year_offset IN (0, -1) -- Filter for current and previous FY as seen in queries
GROUP BY
  financial_short_month,
  financial_quarter,
  financial_month,
  relative_fy_month_offset,
  relative_fy_year_offset,
  reporting_date,
  programmatic_type
ORDER BY
  relative_fy_year_offset DESC, financial_quarter ASC, financial_month ASC
LIMIT 1000;
","SELECT
  SAFE_CAST(t0.cost_model_type AS STRING) AS cost_model_type,
  SAFE_CAST(t0.financial_month AS INT64) AS financial_month,
  SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter,
  SAFE_CAST(t0.financial_short_month AS STRING) AS financial_short_month,
  SAFE_CAST(t0.gross_revenue_amount AS NUMERIC) AS gross_revenue_amount,
  SAFE_CAST(t0.relative_fy_month_offset AS INT64) AS relative_fy_month_offset,
  SAFE_CAST(t0.relative_fy_year_offset AS INT64) AS relative_fy_year_offset,
  SAFE_CAST(t0.reporting_date AS DATE) AS reporting_date,
  SAFE_CAST(t0.revenue_group_subtype AS STRING) AS revenue_group_subtype,
  SAFE_CAST(t0.unified_publication_name AS STRING) AS unified_publication_name
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
LIMIT 10;","WITH BaseData AS (
  SELECT
    t0.cost_model_type,
    t0.financial_month,
    t0.financial_quarter,
    t0.financial_short_month,
    t0.gross_revenue_amount,
    t0.relative_fy_month_offset,
    t0.relative_fy_year_offset,
    t0.reporting_date,
    t0.revenue_group_subtype,
    t0.unified_publication_name,
    DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AS hardcoded_reference_date
  FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
),
DerivedMetrics AS (
  SELECT
    financial_short_month,
    financial_quarter,
    relative_fy_year_offset,
    -- Programmatic Type
    CASE
      WHEN unified_publication_name = 'TUBI' THEN 'TUBI'
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
      WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
      WHEN unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE'
      ELSE NULL
    END AS programmatic_type,
    -- Core Calculated Revenue
    CASE
      WHEN (CASE WHEN unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG' WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' THEN 'PMP' WHEN unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN gross_revenue_amount
      ELSE (CASE WHEN UPPER(SAFE_CAST(revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount ELSE NULL END)
    END AS calculated_revenue,
    -- Current FY Revenue
    CASE WHEN relative_fy_year_offset = 0 THEN (CASE WHEN (CASE WHEN unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG' WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(SAFE_CAST(cost_model_type AS STRING)) = 'PMP' THEN 'PMP' WHEN unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN gross_revenue_amount ELSE (CASE WHEN UPPER(SAFE_CAST(revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' THEN gross_revenue_amount ELSE NULL END) END) ELSE NULL END AS current_fy_revenue
  FROM BaseData
)
SELECT
  financial_short_month,
  programmatic_type,
  SUM(calculated_revenue) AS total_calculated_revenue,
  SUM(current_fy_revenue) AS total_current_fy_revenue
FROM DerivedMetrics
WHERE relative_fy_year_offset = 0 -- Focus on current FY for validation
GROUP BY
  financial_short_month,
  programmatic_type
LIMIT 100;","SELECT
  t0.unified_publication_name,
  t0.cost_model_type,
  t0.revenue_group_subtype,
  t0.gross_revenue_amount,
  t0.relative_fy_year_offset,
  t0.reporting_date,
  DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney') AS hardcoded_reference_date,
  -- Programmatic Type derivation
  CASE
    WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI'
    WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG'
    WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP'
    WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP' THEN 'PMP'
    WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE'
    ELSE 'OTHER'
  END AS derived_programmatic_type,
  -- Programmatic Source Revenue derivation
  CASE WHEN UPPER(SAFE_CAST(t0.revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END AS derived_programmatic_source_revenue,
  -- Core Calculated Revenue derivation (clmn20_ in Q1/2, clmn14_/clmn15_ in Q3)
  CASE
    WHEN (CASE WHEN t0.unified_publication_name = 'TUBI' THEN 'TUBI' WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'GUARANTEED' THEN 'PG' WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'NON-GUARANTEED' THEN 'OMP' WHEN UPPER(SAFE_CAST(t0.cost_model_type AS STRING)) = 'PMP' THEN 'PMP' WHEN t0.unified_publication_name = 'Run of Audience Extension' THEN 'PERFORMANCE' ELSE NULL END) = 'PERFORMANCE' THEN t0.gross_revenue_amount
    ELSE (CASE WHEN UPPER(SAFE_CAST(t0.revenue_group_subtype AS STRING)) = 'PROGRAMMATIC SOURCE' THEN t0.gross_revenue_amount ELSE NULL END)
  END AS derived_calculated_revenue,
  -- Current FY filter logic
  (t0.relative_fy_year_offset = 0) AS is_current_fiscal_year,
  -- Previous FY filter logic
  (t0.relative_fy_year_offset = -1) AS is_previous_fiscal_year,
  -- Actuals filter logic (reporting_date < hardcoded_reference_date)
  (t0.reporting_date < DATE(TIMESTAMP '2025-07-02 07:12:26.797808+00', 'Australia/Sydney')) AS is_actuals_data
FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
WHERE t0.relative_fy_year_offset IN (0, -1) -- Show data for relevant fiscal years
LIMIT 100;",23,5491badf-5ec0-4b4f-a427-b12a3a3395dd
"WITH
  CTE AS (
    SELECT
      *,
      CASE
        WHEN @reporting_mth = 0 THEN
        CASE
          WHEN relative_fy_month_offset = 0 OR relative_fy_month_offset = -12 THEN CAST(financial_month AS INT)
        END
        ELSE @reporting_mth
      END AS filter_reporting_month,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
  ),
  BaseData AS (
    SELECT
      *,
      MAX(
        CASE
          WHEN filter_reporting_month = CAST(financial_month AS INT) THEN financial_quarter
          WHEN @reporting_mth = 0 THEN `IF`(relative_fy_quarter_offset = 0, financial_quarter, null)
          ELSE NULL
        END) OVER (PARTITION BY filter_reporting_month) AS report_quarter,
      CASE
        WHEN @customer_retention_type = '1' THEN 'All'
        ELSE
        CASE
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
          ELSE 'Other'
        END
      END AS customer_status_full,
      CASE
        WHEN SUM(gross_revenue_amount / 1000) OVER (PARTITION BY portfolio_conformed_name_sync) > 0.01 OR SUM(gross_revenue_amount /
          1000) OVER (PARTITION BY portfolio_conformed_name_sync) < -0.01 OR SUM(`IF`(relative_fy_year_offset =
            0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) != 0 THEN 'include'
        ELSE 'exclude'
      END AS blank_portfolio_flag
    FROM
      CTE
  )
SELECT
  -- Base Dimensions
  GSD,
  advertiser_group,
  relative_fy_month_offset,
  relative_fy_year_offset,
  financial_month,
  financial_quarter,
  portfolio_conformed_name_sync,
  fin_adtype_name,
  product_group,
  revenue_type,
  sales_segment_gm_name_sync,

  -- Derived Dimensions
  filter_reporting_month,
  report_quarter,
  customer_status_full,
  blank_portfolio_flag,

  -- Base Measures
  gross_revenue_amount,
  target AS target_amount,

  -- Derived Measures (from CTE)
  fix_ly_lgr AS last_year_gross_revenue_advertiser_group,
  fix_ty_lgr AS this_year_gross_revenue_advertiser_group,

  -- Derived Measures (from Query 1's outer layers)
  SAFE_DIVIDE(gross_revenue_amount, 1000) AS gross_revenue_k_usd,
  SAFE_DIVIDE(target, 1000) AS target_k_usd,
  (relative_fy_quarter_offset = 0) AS is_current_quarter,
  (relative_fy_quarter_offset = -4) AS is_last_year_same_quarter,
  (relative_fy_year_offset = 0) AS is_current_year,
  (relative_fy_year_offset = -1) AS is_last_year,

  -- Derived Measures (from Query 2's outer layers)
  CASE
    WHEN (product_group = 'The Australian & Prestige') THEN 1
    WHEN (product_group = 'State & Communities') THEN 2
    WHEN (product_group = 'Free News & Lifestyle') THEN 3
    WHEN (product_group = 'Client') THEN 4
    WHEN (product_group = 'Commercial Content') THEN 5
    WHEN (product_group = 'Group Functions') THEN 6
    WHEN (product_group = 'Others') THEN 7
    WHEN (product_group = 'Unknown') THEN 8
    ELSE 9
  END AS product_group_mapped_value,
  CASE WHEN (fin_adtype_name = 'XTEND') THEN 'XTEND' ELSE revenue_type END AS revenue_type_or_xtend

FROM
  BaseData
WHERE 1=1 -- Placeholder for potential dashboard-level filters
LIMIT 1000;",SELECT * FROM `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance LIMIT 10;,"WITH
  CTE AS (
    SELECT
      *,
      CASE
        WHEN 0 = 0 THEN -- Simulate @reporting_mth = 0
        CASE
          WHEN relative_fy_month_offset = 0 OR relative_fy_month_offset = -12 THEN CAST(financial_month AS INT)
        END
        ELSE 0 -- Simulate @reporting_mth
      END AS filter_reporting_month,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
  ),
  BaseData AS (
    SELECT
      *,
      MAX(
        CASE
          WHEN filter_reporting_month = CAST(financial_month AS INT) THEN financial_quarter
          WHEN 0 = 0 THEN `IF`(relative_fy_quarter_offset = 0, financial_quarter, null)
          ELSE NULL
        END) OVER (PARTITION BY filter_reporting_month) AS report_quarter,
      CASE
        WHEN '0' = '1' THEN 'All' -- Simulate @customer_retention_type = '1'
        ELSE
        CASE
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
          ELSE 'Other'
        END
      END AS customer_status_full,
      CASE
        WHEN SUM(gross_revenue_amount / 1000) OVER (PARTITION BY portfolio_conformed_name_sync) > 0.01 OR SUM(gross_revenue_amount /
          1000) OVER (PARTITION BY portfolio_conformed_name_sync) < -0.01 OR SUM(`IF`(relative_fy_year_offset =
            0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) != 0 THEN 'include'
        ELSE 'exclude'
      END AS blank_portfolio_flag
    FROM
      CTE
  )
SELECT
  GSD,
  customer_status_full,
  product_group,
  SUM(SAFE_DIVIDE(gross_revenue_amount, 1000)) AS total_gross_revenue_k_usd,
  SUM(CASE WHEN (relative_fy_year_offset = 0 AND relative_fy_quarter_offset = 0) THEN SAFE_DIVIDE(gross_revenue_amount, 1000) ELSE NULL END) AS current_year_current_quarter_gross_revenue_k_usd,
  COUNT(CASE WHEN (product_group = 'The Australian & Prestige') THEN 1 ELSE NULL END) AS count_the_australian_prestige
FROM
  BaseData
WHERE
  GSD IN ('DESIREE DURRANT', 'CHRIS JEFFS')
GROUP BY
  GSD,
  customer_status_full,
  product_group
LIMIT 100;","WITH
  CTE AS (
    SELECT
      *,
      CASE
        WHEN 0 = 0 THEN -- Simulate @reporting_mth = 0
        CASE
          WHEN relative_fy_month_offset = 0 OR relative_fy_month_offset = -12 THEN CAST(financial_month AS INT)
        END
        ELSE 0 -- Simulate @reporting_mth
      END AS filter_reporting_month,
      SUM(
        CASE
          WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ly_lgr,
      SUM(
        CASE
          WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount
          ELSE 0
        END) OVER (PARTITION BY advertiser_group) AS fix_ty_lgr
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
  ),
  BaseData AS (
    SELECT
      *,
      MAX(
        CASE
          WHEN filter_reporting_month = CAST(financial_month AS INT) THEN financial_quarter
          WHEN 0 = 0 THEN `IF`(relative_fy_quarter_offset = 0, financial_quarter, null)
          ELSE NULL
        END) OVER (PARTITION BY filter_reporting_month) AS report_quarter,
      CASE
        WHEN '0' = '1' THEN 'All' -- Simulate @customer_retention_type = '1'
        ELSE
        CASE
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr > 1 THEN 'NEW BUSINESS'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr > 1 THEN 'RETAINED'
          WHEN fix_ly_lgr > 1 AND fix_ty_lgr <= 1 THEN 'INACTIVE'
          WHEN fix_ly_lgr <= 1 AND fix_ty_lgr <= 1 THEN 'LAPSED'
          ELSE 'Other'
        END
      END AS customer_status_full,
      CASE
        WHEN SUM(gross_revenue_amount / 1000) OVER (PARTITION BY portfolio_conformed_name_sync) > 0.01 OR SUM(gross_revenue_amount /
          1000) OVER (PARTITION BY portfolio_conformed_name_sync) < -0.01 OR SUM(`IF`(relative_fy_year_offset =
            0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) != 0 THEN 'include'
        ELSE 'exclude'
      END AS blank_portfolio_flag,
      CASE
        WHEN (product_group = 'The Australian & Prestige') THEN 1
        WHEN (product_group = 'State & Communities') THEN 2
        WHEN (product_group = 'Free News & Lifestyle') THEN 3
        WHEN (product_group = 'Client') THEN 4
        WHEN (product_group = 'Commercial Content') THEN 5
        WHEN (product_group = 'Group Functions') THEN 6
        WHEN (product_group = 'Others') THEN 7
        WHEN (product_group = 'Unknown') THEN 8
        ELSE 9
      END AS product_group_mapped_value,
      CASE WHEN (fin_adtype_name = 'XTEND') THEN 'XTEND' ELSE revenue_type END AS revenue_type_or_xtend
    FROM
      CTE
  )
SELECT
  customer_status_full,
  COUNT(1) AS record_count,
  COUNT(DISTINCT advertiser_group) AS distinct_advertiser_groups,
  AVG(fix_ly_lgr) AS avg_ly_lgr,
  AVG(fix_ty_lgr) AS avg_ty_lgr
FROM
  BaseData
GROUP BY
  customer_status_full
ORDER BY
  customer_status_full
LIMIT 100;

-- Additional business rule validation: Check blank_portfolio_flag distribution
SELECT
  blank_portfolio_flag,
  COUNT(1) AS record_count
FROM
  (
    SELECT
      CASE
        WHEN SUM(gross_revenue_amount / 1000) OVER (PARTITION BY portfolio_conformed_name_sync) > 0.01 OR SUM(gross_revenue_amount /
          1000) OVER (PARTITION BY portfolio_conformed_name_sync) < -0.01 OR SUM(`IF`(relative_fy_year_offset =
            0, target, null)) OVER (PARTITION BY portfolio_conformed_name_sync) != 0 THEN 'include'
        ELSE 'exclude'
      END AS blank_portfolio_flag
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
  )
GROUP BY
  blank_portfolio_flag
LIMIT 100;

-- Additional business rule validation: Check product_group_mapped_value distribution
SELECT
  product_group,
  product_group_mapped_value,
  COUNT(1) AS record_count
FROM
  (
    SELECT
      product_group,
      CASE
        WHEN (product_group = 'The Australian & Prestige') THEN 1
        WHEN (product_group = 'State & Communities') THEN 2
        WHEN (product_group = 'Free News & Lifestyle') THEN 3
        WHEN (product_group = 'Client') THEN 4
        WHEN (product_group = 'Commercial Content') THEN 5
        WHEN (product_group = 'Group Functions') THEN 6
        WHEN (product_group = 'Others') THEN 7
        WHEN (product_group = 'Unknown') THEN 8
        ELSE 9
      END AS product_group_mapped_value
    FROM
      `ncau-data-newsquery-prd`.asl_finance_derived.adsales_performance
  )
GROUP BY
  product_group,
  product_group_mapped_value
ORDER BY
  product_group_mapped_value
LIMIT 100;",24,155c4518-72bf-4309-a0e9-240dd564f421
"WITH
  base_data AS (
    SELECT
      ad_type_name,
      is_xtend_flag AS xtend_flag,
      unified_publication_name,
      unified_publication_gl_code,
      CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag,
      fy_year_month_number,
      CAST(RIGHT(CAST(fy_year_month_number AS STRING), 2) AS INT) AS fiscal_month_number,
      fy_year AS financial_year,
      fy_quarter_of_year AS financial_quarter,
      fy_month_of_year AS financial_month,
      fy_month_short_name AS financial_short_month,
      fy_week_of_year AS financial_week,
      revenue_transaction_status_code AS revenue_transaction_status,
      is_print_digital_flag,
      current_fy_month_of_year AS current_financial_month,
      current_fy_week_of_year AS current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(ASL.fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sync_sales_segment_l2_name = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE('Australia/Sydney')) AS DOW_Today,
      sales_segment_l1_name AS sales_segment_l_1_name,
      sales_segment_l2_name AS sales_segment_l_2_name,
      sync_sales_segment_l1_name AS sales_segment_l_1_name_sync,
      sync_sales_segment_l2_name AS sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      customer_group_name AS advertiser_group,
      customer_group_parent_name AS advertiser_parent,
      IFNULL(adjustment_amount, 0) AS adjustment_amount,
      curr_sales_segment_gm_name AS sales_segment_gm_name,
      sync_sales_segment_gm_name AS sales_segment_gm_name_sync,
      revenue_group_level1_name AS revenue_group_level_1_name,
      revenue_group_level2_name AS revenue_group_level_2_name,
      IFNULL(lgb_pub_amount, 0) AS pub_lgb,
      IFNULL(lgb_ss_amount, 0) AS ss_lgb,
      IFNULL(pipeline_amount, 0) AS pipeline,
      IFNULL(gross_revenue_amount, 0) AS gross_revenue_amount,
      UPPER(revenue_group_type_code) AS revenue_type,
      UPPER(revenue_type_level2_code) AS revenue_type_Level2,
      UPPER(ASL.revenue_group_sub_type_code) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      sync_portfolio_group_name AS portfolio_group_name_sync,
      current_portfolio_group_name AS portfolio_group_name_current,
      sync_portfolio_parent_group_name AS portfolio_parent_group_name_sync,
      industry_level1_name AS aszsic_industry_level_1_name,
      industry_level1_code AS anzsic_industry_level_1_code,
      industry_level2_code AS anzsic_industry_level_2_code,
      industry_level2_name AS aszsic_industry_level_2_name,
      industry_level3_code AS anzsic_industry_level_3_code,
      industry_level3_name AS anzsic_industry_level_3_name,
      industry_level4_code AS anzsic_industry_level_4_code,
      industry_level4_name AS anzsic_industry_level_4_name,
      industry_pillar_name AS nca_industry_pillar,
      industry_pillar_group_name AS nca_industry_anzsic_pillar_group,
      ASL.product_group_name AS product_group,
      division_group_name AS publishing_division_group,
      division_parent_group_name AS publishing_division_parent,
      CASE
        WHEN client_reporting_date >= CURRENT_DATE('Australia/Sydney') THEN 'Y'
        ELSE 'N'
      END AS is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ly_is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ny_is_future_period_flag,
      cost_model_type_code AS cost_model_type,
      CASE
        WHEN dw_source_system_code = 'PLUTO' THEN CAST(client_reporting_date AS STRING)
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      sync_portfolio_conformed_name AS portfolio_conformed_name_sync,
      publishing_division_name AS publishing_division,
      booking_line_created_week_of_year AS booking_line_created_week,
      booking_line_created_month_of_year AS booking_line_created_month,
      booking_line_created_month_short_name AS booking_line_created_short_month,
      booking_line_created_quarter_of_year AS booking_line_created_quarter,
      booking_line_created_year,
      agency_group_parent_name AS agency_parent,
      agency_group_name AS agency_group,
      agency_name,
      agency_id_src AS agency_number,
      cal_month_name AS calendar_month_name,
      cal_year AS calendar_year,
      section_l5_name AS classification_name,
      IFNULL(target_amount, 0) AS target_amount,
      IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD,
      IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS portfolio_full_name_sync,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS sync_portfolio_conformed_owner_full,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      adtype_l1,
      adtype_l2,
      legacy_growth_flag,
      relative_cal_year_offset,
      cal_quarter_of_year_name AS calendar_quarter_of_year,
      cal_year_week_number AS calendar_week
    FROM
      `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
    WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
          'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
      '-')))
  ),
  derived_metrics_step1 AS (
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN SAFE_CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod,
      DATETIME(TIMESTAMP(CURRENT_TIMESTAMP()), ""Australia/Sydney"") AS dw_asl_load_timestamp,
      CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END AS gross_revenue_current_fy_raw,
      CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END AS gross_revenue_next_fy_raw,
      CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END AS revenue_type_derived_q2,
      CASE WHEN (fin_adtype_name = 'XTEND') THEN 'XTEND' ELSE revenue_type END AS revenue_type_categorized_q3
    FROM
      base_data
  ),
  derived_metrics_step2 AS (
    SELECT
      *,
      SAFE_DIVIDE(gross_revenue_current_fy_raw, 1000) AS gross_revenue_current_fy_k_raw,
      SAFE_DIVIDE(gross_revenue_next_fy_raw, 1000) AS gross_revenue_next_fy_k_raw,
      -- Replicating clmn34_ from Q2 (similar to clmn29_ from Q3)
      CASE
        WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' AND sales_segment_l_2_name_sync = 'Digital Other' AND advertiser_parent != 'DOUBLECLICK')
        THEN fix_date_lod
        ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
      END AS booking_line_date_for_programmatic_check,
      -- Replicating clmn13_ from Q2 (similar to clmn11_ from Q3)
      DATETIME_ADD(SAFE_CAST(CURRENT_DATE('Australia/Sydney') AS DATETIME), INTERVAL -365 DAY) AS date_365_days_ago,
      -- Replicating clmn44_ from Q2
      CASE
        WHEN fin_adtype_name = 'XTEND' THEN 'XTEND'
        WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC - DIGITAL OTHER'
        WHEN (revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'GUA') THEN 'PROGRAMMATIC - GUARANTEED'
        WHEN (revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'NON') THEN 'PROGRAMMATIC - OPEN EXCHANGE'
        WHEN (revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'PMP') THEN 'PROGRAMMATIC - PMP'
        WHEN revenue_group_subtype = 'DIGITAL' THEN 'ADPT DIGITAL'
        WHEN SAFE.LEFT(revenue_group_subtype, 6) = 'SUNDRY' THEN 'SUNDRY'
        ELSE revenue_group_subtype
      END AS programmatic_type_category
    FROM
      derived_metrics_step1
  ),
  final_metrics AS (
    SELECT
      *,
      -- Replicating clmn45_ from Q2 (similar to clmn36_ from Q3)
      CASE
        WHEN (relative_fy_year_offset = 0 AND UPPER(unified_publication_name) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN gross_revenue_amount
        WHEN (relative_fy_year_offset = 0 AND (SAFE_CAST(booking_line_date_for_programmatic_check AS DATETIME) <= date_365_days_ago))
        THEN gross_revenue_amount
        ELSE NULL
      END AS programmatic_revenue_raw,
      -- Replicating clmn47_ from Q2
      CASE WHEN (FALSE = TRUE) THEN programmatic_type_category ELSE revenue_type_derived_q2 END AS programmatic_type_final,
      -- Replicating clmn52_ from Q2
      CASE
        WHEN (FALSE = TRUE) THEN CASE WHEN programmatic_type_category = 'PROGRAMMATIC - GUARANTEED' THEN 1 WHEN programmatic_type_category = 'PROGRAMMATIC - OPEN EXCHANGE' THEN 2 WHEN programmatic_type_category = 'PROGRAMMATIC - PMP' THEN 3 ELSE NULL END
        WHEN (revenue_type_derived_q2 = 'PRINT') THEN 1
        WHEN (revenue_type_derived_q2 = 'DIGITAL') THEN 2
        WHEN (revenue_type_derived_q2 = 'PROGRAMMATIC') THEN 3
        WHEN (revenue_type_derived_q2 = 'PROGRAMMATIC EXCHANGE') THEN 4
        WHEN (revenue_type_derived_q2 = 'PROGRAMMATIC SOURCE') THEN 5
        WHEN (revenue_type_derived_q2 = 'SUNDRY ADSALES OVERLAY') THEN 6
        ELSE NULL
      END AS revenue_type_encoded_q2,
      -- Replicating clmn28_ from Q3
      CASE
        WHEN (revenue_type_categorized_q3 = 'PRINT') THEN 1
        WHEN (revenue_type_categorized_q3 = 'DIGITAL') THEN 2
        WHEN (revenue_type_categorized_q3 = 'XTEND') THEN 3
        ELSE NULL
      END AS revenue_type_encoded_q3
    FROM
      derived_metrics_step2
  )
SELECT
  adtype_l1,
  financial_year,
  revenue_type_derived_q2 AS revenue_type_derived,
  programmatic_type_final AS programmatic_type,
  advertiser_parent,
  booking_line_created_date,
  cost_model_type,
  fin_adtype_name,
  portfolio_parent_group_name_sync,
  relative_fy_year_offset,
  revenue_group_subtype,
  revenue_type,
  sales_segment_l_2_name_sync,
  unified_publication_name,
  fix_date_lod,
  dw_asl_load_timestamp,
  SUM(gross_revenue_current_fy_raw) AS gross_revenue_amount_current_fy,
  SUM(gross_revenue_next_fy_raw) AS gross_revenue_amount_next_fy,
  SUM(gross_revenue_current_fy_k_raw) AS gross_revenue_amount_current_fy_k,
  SUM(gross_revenue_next_fy_k_raw) AS gross_revenue_amount_next_fy_k,
  SUM(programmatic_revenue_raw) AS programmatic_revenue_raw_sum,
  SUM(SAFE_DIVIDE(programmatic_revenue_raw, 1000)) AS programmatic_revenue_k,
  SUM(adjustment_amount) AS adjustment_amount,
  SUM(pub_lgb) AS pub_lgb,
  SUM(ss_lgb) AS ss_lgb,
  SUM(pipeline) AS pipeline,
  SUM(target_amount) AS target_amount,
  COUNT(revenue_type_encoded_q2) AS revenue_type_count_q2,
  SUM(revenue_type_encoded_q2) AS revenue_type_sum_q2,
  COUNT(revenue_type_encoded_q3) AS revenue_type_count_q3,
  SUM(revenue_type_encoded_q3) AS revenue_type_sum_q3
FROM
  final_metrics
WHERE
  financial_year = EXTRACT(YEAR FROM CURRENT_DATE('Australia/Sydney')) -- Example filter for current year
GROUP BY
  adtype_l1,
  financial_year,
  revenue_type_derived_q2,
  programmatic_type_final,
  advertiser_parent,
  booking_line_created_date,
  cost_model_type,
  fin_adtype_name,
  portfolio_parent_group_name_sync,
  relative_fy_year_offset,
  revenue_group_subtype,
  revenue_type,
  sales_segment_l_2_name_sync,
  unified_publication_name,
  fix_date_lod,
  dw_asl_load_timestamp
LIMIT 1000;","SELECT
  adtype_name,
  is_xtend_flag,
  unified_publication_name,
  fy_year,
  fy_month_of_year,
  revenue_transaction_status_code,
  gross_revenue_amount,
  client_reporting_date,
  dw_source_system_code,
  booking_line_created_date,
  relative_fy_year_offset,
  relative_cal_year_offset,
  customer_group_parent_name,
  fin_adtype_name,
  revenue_group_subtype,
  revenue_group_type_code,
  cost_model_type_code,
  sales_segment_l2_name_sync,
  target_amount
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
LIMIT 100;","SELECT
  SUM(gross_revenue_amount_current_fy) AS total_current_fy_revenue,
  SUM(gross_revenue_amount_next_fy) AS total_next_fy_revenue,
  SUM(programmatic_revenue_raw_sum) AS total_programmatic_revenue
FROM (
  WITH
  base_data AS (
    SELECT
      ad_type_name,
      is_xtend_flag AS xtend_flag,
      unified_publication_name,
      unified_publication_gl_code,
      CASE
        WHEN unified_publication_name IN ('Admin.ADV', 'Admin.DTM', 'Admin.HWT', 'Admin.International', 'Admin.Sales',
          'Admin.Sport', 'Admin.TCM', 'Bestrecipes.Admin', 'Bodyandsoul.Admin', 'CODE', 'CodeBet', 'Delicious.admin',
          'Escape.Admin', 'GQ.Admin', 'Kidspot.Admin', 'National Sundry', 'National Tabloid PrePrint', 'News.Admin',
          'odds.com.au', 'Punters.com.au', 'Qantas Travel Insider', 'RACENET', 'Shortlyster Managed Service', 'Sky News',
          'SKYNEWS.ADMIN', 'Stellar.Admin', 'Stockhead', 'SUDDENLY.CW', 'SUDDENLY.NORTH', 'SUDDENLY.TGG', 'Taste.Admin',
          'TAUS.ADMIN', 'The Sunday Times', 'TOOWOOMBACUSTOM', 'Vogue.Admin', 'Vogueliving.Admin') THEN 'Sundry Pubs'
        ELSE 'Non Sundry Pubs'
      END AS Sundry_Pubs_Flag,
      fy_year_month_number,
      CAST(RIGHT(CAST(fy_year_month_number AS STRING), 2) AS INT) AS fiscal_month_number,
      fy_year AS financial_year,
      fy_quarter_of_year AS financial_quarter,
      fy_month_of_year AS financial_month,
      fy_month_short_name AS financial_short_month,
      fy_week_of_year AS financial_week,
      revenue_transaction_status_code AS revenue_transaction_status,
      is_print_digital_flag,
      current_fy_month_of_year AS current_financial_month,
      current_fy_week_of_year AS current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(ASL.fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sync_sales_segment_l2_name = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE('Australia/Sydney')) AS DOW_Today,
      sales_segment_l1_name AS sales_segment_l_1_name,
      sales_segment_l2_name AS sales_segment_l_2_name,
      sync_sales_segment_l1_name AS sales_segment_l_1_name_sync,
      sync_sales_segment_l2_name AS sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      customer_group_name AS advertiser_group,
      customer_group_parent_name AS advertiser_parent,
      IFNULL(adjustment_amount, 0) AS adjustment_amount,
      curr_sales_segment_gm_name AS sales_segment_gm_name,
      sync_sales_segment_gm_name AS sales_segment_gm_name_sync,
      revenue_group_level1_name AS revenue_group_level_1_name,
      revenue_group_level2_name AS revenue_group_level_2_name,
      IFNULL(lgb_pub_amount, 0) AS pub_lgb,
      IFNULL(lgb_ss_amount, 0) AS ss_lgb,
      IFNULL(pipeline_amount, 0) AS pipeline,
      IFNULL(gross_revenue_amount, 0) AS gross_revenue_amount,
      UPPER(revenue_group_type_code) AS revenue_type,
      UPPER(revenue_type_level2_code) AS revenue_type_Level2,
      UPPER(ASL.revenue_group_sub_type_code) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      sync_portfolio_group_name AS portfolio_group_name_sync,
      current_portfolio_group_name AS portfolio_group_name_current,
      sync_portfolio_parent_group_name AS portfolio_parent_group_name_sync,
      industry_level1_name AS aszsic_industry_level_1_name,
      industry_level1_code AS anzsic_industry_level_1_code,
      industry_level2_code AS anzsic_industry_level_2_code,
      industry_level2_name AS aszsic_industry_level_2_name,
      industry_level3_code AS anzsic_industry_level_3_code,
      industry_level3_name AS anzsic_industry_level_3_name,
      industry_level4_code AS anzsic_industry_level_4_code,
      industry_level4_name AS anzsic_industry_level_4_name,
      industry_pillar_name AS nca_industry_pillar,
      industry_pillar_group_name AS nca_industry_anzsic_pillar_group,
      ASL.product_group_name AS product_group,
      division_group_name AS publishing_division_group,
      division_parent_group_name AS publishing_division_parent,
      CASE
        WHEN client_reporting_date >= CURRENT_DATE('Australia/Sydney') THEN 'Y'
        ELSE 'N'
      END AS is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ly_is_future_period_flag,
      CASE
        WHEN client_reporting_date >= DATE_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL 365 DAY) THEN 'Y'
        ELSE 'N'
      END AS ny_is_future_period_flag,
      cost_model_type_code AS cost_model_type,
      CASE
        WHEN dw_source_system_code = 'PLUTO' THEN CAST(client_reporting_date AS STRING)
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      sync_portfolio_conformed_name AS portfolio_conformed_name_sync,
      publishing_division_name AS publishing_division,
      booking_line_created_week_of_year AS booking_line_created_week,
      booking_line_created_month_of_year AS booking_line_created_month,
      booking_line_created_month_short_name AS booking_line_created_short_month,
      booking_line_created_quarter_of_year AS booking_line_created_quarter,
      booking_line_created_year,
      agency_group_parent_name AS agency_parent,
      agency_group_name AS agency_group,
      agency_name,
      agency_id_src AS agency_number,
      cal_month_name AS calendar_month_name,
      cal_year AS calendar_year,
      section_l5_name AS classification_name,
      IFNULL(target_amount, 0) AS target_amount,
      IFNULL(current_portfolio_group_owner_full_name_sync, 'VACANT') AS GSD,
      IFNULL(current_portfolio_group_owner_full_name_current, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      IFNULL(current_portfolio_conformed_owner_full_name_sync, 'VACANT') AS sync_portfolio_conformed_owner_full,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      adtype_l1,
      adtype_l2,
      legacy_growth_flag,
      relative_cal_year_offset,
      cal_quarter_of_year_name AS calendar_quarter_of_year,
      cal_year_week_number AS calendar_week
    FROM
      `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily` AS ASL
    WHERE
      (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
          'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
      '-')))
  ),
  derived_metrics_step1 AS (
    SELECT
      *,
      MIN(CASE WHEN advertiser_parent = ""DOUBLECLICK"" THEN SAFE_CAST(booking_line_created_date AS DATE) END) OVER (PARTITION BY financial_year) AS fix_date_lod,
      DATETIME(TIMESTAMP(CURRENT_TIMESTAMP()), ""Australia/Sydney"") AS dw_asl_load_timestamp,
      CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END AS gross_revenue_current_fy_raw,
      CASE WHEN relative_fy_year_offset = 1 THEN gross_revenue_amount ELSE 0 END AS gross_revenue_next_fy_raw,
      CASE WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC' ELSE revenue_group_subtype END AS revenue_type_derived_q2,
      CASE WHEN (fin_adtype_name = 'XTEND') THEN 'XTEND' ELSE revenue_type END AS revenue_type_categorized_q3
    FROM
      base_data
  ),
  derived_metrics_step2 AS (
    SELECT
      *,
      SAFE_DIVIDE(gross_revenue_current_fy_raw, 1000) AS gross_revenue_current_fy_k_raw,
      SAFE_DIVIDE(gross_revenue_next_fy_raw, 1000) AS gross_revenue_next_fy_k_raw,
      CASE
        WHEN (revenue_type = 'DIGITAL' AND revenue_group_subtype = 'DIGITAL' AND sales_segment_l_2_name_sync = 'Digital Other' AND advertiser_parent != 'DOUBLECLICK')
        THEN fix_date_lod
        ELSE PARSE_DATE('%Y-%m-%d', booking_line_created_date)
      END AS booking_line_date_for_programmatic_check,
      DATETIME_ADD(SAFE_CAST(CURRENT_DATE('Australia/Sydney') AS DATETIME), INTERVAL -365 DAY) AS date_365_days_ago,
      CASE
        WHEN fin_adtype_name = 'XTEND' THEN 'XTEND'
        WHEN (portfolio_parent_group_name_sync = 'DIGITAL OTHER' AND revenue_group_subtype = 'DIGITAL') THEN 'PROGRAMMATIC - DIGITAL OTHER'
        WHEN (revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'GUA') THEN 'PROGRAMMATIC - GUARANTEED'
        WHEN (revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'NON') THEN 'PROGRAMMATIC - OPEN EXCHANGE'
        WHEN (revenue_group_subtype = 'PROGRAMMATIC SOURCE' AND SAFE.LEFT(UPPER(cost_model_type), 3) = 'PMP') THEN 'PROGRAMMATIC - PMP'
        WHEN revenue_group_subtype = 'DIGITAL' THEN 'ADPT DIGITAL'
        WHEN SAFE.LEFT(revenue_group_subtype, 6) = 'SUNDRY' THEN 'SUNDRY'
        ELSE revenue_group_subtype
      END AS programmatic_type_category
    FROM
      derived_metrics_step1
  ),
  final_metrics AS (
    SELECT
      *,
      CASE
        WHEN (relative_fy_year_offset = 0 AND UPPER(unified_publication_name) IN ('OUTSTREAM', 'XTEND', 'EDMEDIA', 'ECOMMERCE')) THEN gross_revenue_amount
        WHEN (relative_fy_year_offset = 0 AND (SAFE_CAST(booking_line_date_for_programmatic_check AS DATETIME) <= date_365_days_ago))
        THEN gross_revenue_amount
        ELSE NULL
      END AS programmatic_revenue_raw,
      CASE WHEN (FALSE = TRUE) THEN programmatic_type_category ELSE revenue_type_derived_q2 END AS programmatic_type_final,
      CASE
        WHEN (FALSE = TRUE) THEN CASE WHEN programmatic_type_category = 'PROGRAMMATIC - GUARANTEED' THEN 1 WHEN programmatic_type_category = 'PROGRAMMATIC - OPEN EXCHANGE' THEN 2 WHEN programmatic_type_category = 'PROGRAMMATIC - PMP' THEN 3 ELSE NULL END
        WHEN (revenue_type_derived_q2 = 'PRINT') THEN 1
        WHEN (revenue_type_derived_q2 = 'DIGITAL') THEN 2
        WHEN (revenue_type_derived_q2 = 'PROGRAMMATIC') THEN 3
        WHEN (revenue_type_derived_q2 = 'PROGRAMMATIC EXCHANGE') THEN 4
        WHEN (revenue_type_derived_q2 = 'PROGRAMMATIC SOURCE') THEN 5
        WHEN (revenue_type_derived_q2 = 'SUNDRY ADSALES OVERLAY') THEN 6
        ELSE NULL
      END AS revenue_type_encoded_q2,
      CASE
        WHEN (revenue_type_categorized_q3 = 'PRINT') THEN 1
        WHEN (revenue_type_categorized_q3 = 'DIGITAL') THEN 2
        WHEN (revenue_type_categorized_q3 = 'XTEND') THEN 3
        ELSE NULL
      END AS revenue_type_encoded_q3
    FROM
      derived_metrics_step2
  )
SELECT
  SUM(gross_revenue_amount_current_fy) AS total_current_fy_revenue,
  SUM(gross_revenue_amount_next_fy) AS total_next_fy_revenue,
  SUM(programmatic_revenue_raw_sum) AS total_programmatic_revenue
FROM
  final_metrics
WHERE
  financial_year = EXTRACT(YEAR FROM CURRENT_DATE('Australia/Sydney'))
LIMIT 10;","SELECT
  financial_year,
  relative_fy_year_offset,
  revenue_transaction_status_code,
  style_name,
  source_publishing_division_name,
  publication_name,
  advertiser_id_src,
  ad_type_name,
  COUNT(*) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.adsales_revenue_performance_daily`
WHERE
  NOT (
    (relative_fy_year_offset IN (-1, 0, 1) OR relative_cal_year_offset IN (-1, 0)) AND UPPER(IFNULL(revenue_transaction_status_code,
          'XXX')) IN ('BILLED', 'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division_name,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND (advertiser_id_src IN ('17114', '29172', '52809') OR ad_type_name =
      '-')))
  )
GROUP BY
  1, 2, 3, 4, 5, 6, 7, 8
LIMIT 100;",25,52c11c9c-052a-4e45-9cda-8fecd87d7964
"WITH BaseData AS (
  SELECT
    ci.charge_type,
    ci.day_of_week,
    ci.fiscal_week_id,
    ci.route_volume,
    ci.charge_amount,
    ci.gl_publication_code,
    ci.sales_channel_l4,
    cal.day_short_name,
    SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) AS fiscal_year
  FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
    LEFT JOIN
    `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
    ON ci.charge_date = cal.calendar_date
  WHERE
    SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025 -- Hardcoded fiscal year 2025
),
CalculatedMetrics AS (
  SELECT
    fiscal_week_id,
    day_of_week,
    sales_channel_l4,
    -- Derived Dimension: Publication Group
    CASE
      WHEN (gl_publication_code IN ('500', '560')) THEN 'ADV'
      WHEN (gl_publication_code = '100') THEN 'AUS'
      WHEN (gl_publication_code IN ('400', '402')) THEN 'CM'
      WHEN (gl_publication_code = '9504') THEN 'Delicious'
      WHEN (gl_publication_code = '9505') THEN 'Delicious Specials'
      WHEN (gl_publication_code IN ('110', '116')) THEN 'DT'
      WHEN (gl_publication_code = '350') THEN 'GAD'
      WHEN (gl_publication_code = '670') THEN 'GCB'
      WHEN (gl_publication_code = '180') THEN 'Group Shared Services'
      WHEN (gl_publication_code = '156') THEN 'Hobart Print Services'
      WHEN (gl_publication_code IN ('301', '303')) THEN 'HS'
      WHEN (gl_publication_code = '5003') THEN 'MDM'
      WHEN (gl_publication_code IN ('850', '852')) THEN 'MERCURY'
      WHEN (gl_publication_code IN ('961', '963')) THEN 'NTN'
      WHEN (gl_publication_code = '158') THEN 'Perth Print Services'
      WHEN (gl_publication_code = 'Post Courier') THEN 'Post Courier'
      WHEN (gl_publication_code = '5024') THEN 'SC'
      WHEN (gl_publication_code IN ('9514', '9515')) THEN 'Taste'
      WHEN (gl_publication_code = '5053') THEN 'TCHRN'
      WHEN (gl_publication_code = '450') THEN 'TCP'
      WHEN (gl_publication_code = '475') THEN 'TVB'
      WHEN (gl_publication_code = '9560') THEN 'Vogue'
      WHEN (gl_publication_code = '9556') THEN 'Vogue Living'
      WHEN (gl_publication_code = '305') THEN 'WT'
      ELSE 'Other'
    END AS publication_group,
    -- Individual volume types (intermediate calculations)
    CASE WHEN charge_type = 'DRAW' THEN route_volume ELSE 0 END AS draw_volume,
    CASE WHEN charge_type = 'RETURNS' THEN route_volume ELSE 0 END AS returns_volume,
    CASE WHEN charge_type = 'ADJUSTMENT' THEN route_volume ELSE 0 END AS adjustment_volume,
    charge_amount
  FROM
    BaseData
)
SELECT
  fiscal_week_id,
  day_of_week,
  sales_channel_l4,
  publication_group,
  SUM(draw_volume) AS total_draw_volume,
  SUM(returns_volume) AS total_returns_volume,
  SUM(draw_volume + returns_volume + adjustment_volume) AS total_draw_returns_adjustment_volume,
  SUM(charge_amount) AS total_charge_amount
FROM
  CalculatedMetrics
WHERE
  fiscal_week_id BETWEEN 202501 AND 202510 -- Sample a few weeks for analysis
GROUP BY
  fiscal_week_id,
  day_of_week,
  sales_channel_l4,
  publication_group
ORDER BY
  fiscal_week_id, day_of_week
LIMIT 1000;","SELECT
  ci.*,
  cal.day_short_name
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025
LIMIT 100;","SELECT
  SUM(CASE WHEN ci.charge_type = 'DRAW' THEN ci.route_volume ELSE 0 END) AS total_draw_volume_check,
  SUM(CASE WHEN ci.charge_type = 'RETURNS' THEN ci.route_volume ELSE 0 END) AS total_returns_volume_check,
  SUM( (CASE WHEN ci.charge_type = 'DRAW' THEN ci.route_volume ELSE 0 END) + (CASE WHEN ci.charge_type = 'RETURNS' THEN ci.route_volume ELSE 0 END) + (CASE WHEN ci.charge_type = 'ADJUSTMENT' THEN ci.route_volume ELSE 0 END) ) AS total_draw_returns_adjustment_volume_check,
  SUM(ci.charge_amount) AS total_charge_amount_check
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025
  AND ci.fiscal_week_id BETWEEN 202501 AND 202502; -- Small date range for quick validation","SELECT
  ci.charge_type,
  ci.route_volume,
  ci.gl_publication_code,
  ci.sales_channel_l4,
  ci.day_of_week,
  ci.fiscal_week_id,
  -- Business Rule: Draw Volume Calculation
  CASE WHEN ci.charge_type = 'DRAW' THEN ci.route_volume ELSE 0 END AS calculated_draw_volume,
  -- Business Rule: Returns Volume Calculation
  CASE WHEN ci.charge_type = 'RETURNS' THEN ci.route_volume ELSE 0 END AS calculated_returns_volume,
  -- Business Rule: Adjustment Volume Calculation
  CASE WHEN ci.charge_type = 'ADJUSTMENT' THEN ci.route_volume ELSE 0 END AS calculated_adjustment_volume,
  -- Business Rule: Publication Group Mapping
  CASE
    WHEN (ci.gl_publication_code IN ('500', '560')) THEN 'ADV'
    WHEN (ci.gl_publication_code = '100') THEN 'AUS'
    WHEN (ci.gl_publication_code IN ('400', '402')) THEN 'CM'
    WHEN (ci.gl_publication_code = '9504') THEN 'Delicious'
    WHEN (ci.gl_publication_code = '9505') THEN 'Delicious Specials'
    WHEN (ci.gl_publication_code IN ('110', '116')) THEN 'DT'
    WHEN (ci.gl_publication_code = '350') THEN 'GAD'
    WHEN (ci.gl_publication_code = '670') THEN 'GCB'
    WHEN (ci.gl_publication_code = '180') THEN 'Group Shared Services'
    WHEN (ci.gl_publication_code = '156') THEN 'Hobart Print Services'
    WHEN (ci.gl_publication_code IN ('301', '303')) THEN 'HS'
    WHEN (ci.gl_publication_code = '5003') THEN 'MDM'
    WHEN (ci.gl_publication_code IN ('850', '852')) THEN 'MERCURY'
    WHEN (ci.gl_publication_code IN ('961', '963')) THEN 'NTN'
    WHEN (ci.gl_publication_code = '158') THEN 'Perth Print Services'
    WHEN (ci.gl_publication_code = 'Post Courier') THEN 'Post Courier'
    WHEN (ci.gl_publication_code = '5024') THEN 'SC'
    WHEN (ci.gl_publication_code IN ('9514', '9515')) THEN 'Taste'
    WHEN (ci.gl_publication_code = '5053') THEN 'TCHRN'
    WHEN (ci.gl_publication_code = '450') THEN 'TCP'
    WHEN (ci.gl_publication_code = '475') THEN 'TVB'
    WHEN (ci.gl_publication_code = '9560') THEN 'Vogue'
    WHEN (ci.gl_publication_code = '9556') THEN 'Vogue Living'
    WHEN (ci.gl_publication_code = '305') THEN 'WT'
    ELSE 'Other'
  END AS derived_publication_group,
  -- Example of hardcoded filter values from original queries
  (ci.day_of_week = 'Sun' AND ci.fiscal_week_id IN (202541, 202542, 202543, 202544, 202545)) AS is_query1_filter_match,
  (ci.sales_channel_l4 = 'Subscriptions' AND ci.fiscal_week_id IN (202533, 202534, 202535, 202536, 202537, 202538, 202539, 202540) AND (CASE WHEN (ci.gl_publication_code IN ('110', '116')) THEN 'DT' ELSE 'Other' END) = 'DT') AS is_query2_filter_match
FROM
  `ncau-data-newsquery-prd.asl_finance.v_asl_circualtion_insights` AS ci
  LEFT JOIN
  `ncau-data-newsquery-prd.prstn_finance.v_calendar_dim` AS cal
  ON ci.charge_date = cal.calendar_date
WHERE
  SAFE_CAST(LEFT(SAFE_CAST(ci.fiscal_week_id AS STRING), 4) AS INT64) = 2025
LIMIT 100;",26,c441950c-1e3f-432c-9838-847d1d315b9e
"SELECT
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
GROUP BY
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync
ORDER BY
  record_count DESC
LIMIT 100;","SELECT DISTINCT
  advertiser_name,
  portfolio_conformed_name_sync,
  sales_segment_l_2_name_sync
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
LIMIT 100;","SELECT DISTINCT
  advertiser_name
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE
  portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9')
LIMIT 10;","SELECT
  portfolio_conformed_name_sync,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance`
WHERE
  portfolio_conformed_name_sync IN ('GAD RAM A1', 'HBT RAM A1', 'VIC DIRECT A7', 'VIC DIRECT A8', 'VIC DIRECT A9')
GROUP BY
  portfolio_conformed_name_sync
ORDER BY
  record_count DESC;",27,80ca81f3-0671-40ef-a0a9-825a1580ca1b
"WITH
  ContraSheetLookup AS (
    SELECT DISTINCT
      SAFE_CAST(NMBS_T_Number AS STRING) AS NMBS_T_Number
    FROM
      `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data`
  ),
  RevenueBase AS (
    SELECT
      t0.financial_year,
      SAFE_CAST(t0.financial_month AS INT64) AS financial_month_no,
      t0.financial_short_month,
      t0.calendar_year_month,
      t0.sales_segment_gm_name,
      t0.portfolio_conformed_name_current,
      IFNULL(t0.current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      t0.advertiser_name,
      SAFE_CAST(t0.adpoint_account_number AS STRING) AS adpoint_account_number,
      t0.revenue_type,
      t0.relative_fy_year_offset,
      CASE
        WHEN SAFE_CAST(t0.adpoint_account_number AS STRING) IN (
          SELECT
            NMBS_T_Number
          FROM
            ContraSheetLookup
        ) THEN 'Y'
        ELSE 'N'
      END AS sheet_account_flag,
      SUM(t0.gross_revenue_amount) AS gross_revenue_amount_summed,
      t0.cost_model_type,
      t0.revenue_group_name,
      t0.revenue_transaction_status,
      t0.style_name,
      t0.source_publishing_division,
      t0.publication_name,
      SAFE_CAST(t0.account_number AS STRING) AS account_number_rev,
      t0.adtype_name
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
    WHERE
      LOWER(LEFT(SAFE_CAST(t0.advertiser_name AS STRING), 3)) = 'ctr'
      AND NOT (SAFE_CAST(t0.cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(t0.revenue_group_name AS STRING) = 'Exchange')
      AND UPPER(IFNULL(SAFE_CAST(t0.revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED')
      AND UPPER(IFNULL(SAFE_CAST(t0.style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE'
      AND UPPER(IFNULL(SAFE_CAST(t0.source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
      AND (
        UPPER(IFNULL(SAFE_CAST(t0.publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%'
        OR (
          UPPER(SAFE_CAST(t0.publication_name AS STRING)) LIKE 'SUDDENLY%'
          AND (SAFE_CAST(t0.account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(t0.adtype_name AS STRING) = '-')
        )
      )
      AND t0.calendar_year_month = '2023-10' -- Example date filter for sampling
    GROUP BY ALL
  ),
  RevenueMetrics AS (
    SELECT
      financial_year,
      financial_month_no,
      financial_short_month,
      calendar_year_month,
      sales_segment_gm_name,
      portfolio_conformed_name_current,
      current_portfolio_conformed_owner_full,
      advertiser_name,
      adpoint_account_number,
      revenue_type,
      gross_revenue_amount_summed AS gross_revenue_amount,
      CASE
        WHEN (adpoint_account_number IN ('13019', '52246', '18387')) THEN 'ctr1'
        ELSE adpoint_account_number
      END AS transformed_adpoint_account_number,
      CASE
        WHEN (
          CASE
            WHEN (adpoint_account_number IN ('13019', '52246', '18387')) THEN 'ctr1'
            ELSE adpoint_account_number
          END = 'ctr1'
        ) THEN 'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'
        ELSE advertiser_name
      END AS transformed_advertiser_name
    FROM
      RevenueBase
  ),
  AccountMetrics AS (
    SELECT
      SAFE_CAST(t0.account_number AS STRING) AS account_number,
      SAFE_CAST(t0.adpoint_account_number AS STRING) AS adpoint_account_number,
      SAFE_CAST(t0.advertiser_name AS STRING) AS advertiser_name,
      t0.current_portfolio_conformed_owner_full,
      t0.nca_industry_pillar,
      t0.sales_segment_gm_name,
      COUNT(1) AS account_count_filtered
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      SAFE_CAST(t0.advertiser_name AS STRING) IN (
        'CTR_2023_AFL SPORT',
        'CTR_2023_GWS GIANTS',
        'CTR_2023_SYDNEY SWANS',
        'CTR_2025_Greater Western Sydney Giants',
        'CTR_2025_Raising Literacy Australia'
      )
      OR (
        SAFE_CAST(t0.nca_industry_pillar AS STRING) = 'Contra'
        AND SAFE_CAST(t0.sales_segment_gm_name AS STRING) IN ('Renee Sycamore')
      )
    GROUP BY
      1, 2, 3, 4, 5, 6
  )
SELECT
  COALESCE(rm.adpoint_account_number, am.adpoint_account_number) AS adpoint_account_number,
  COALESCE(rm.advertiser_name, am.advertiser_name) AS advertiser_name,
  rm.financial_year,
  rm.calendar_year_month,
  rm.sales_segment_gm_name,
  rm.portfolio_conformed_name_current,
  rm.revenue_type,
  rm.gross_revenue_amount,
  rm.transformed_adpoint_account_number,
  rm.transformed_advertiser_name,
  am.account_number,
  am.current_portfolio_conformed_owner_full AS owner_full_name_filtered,
  am.nca_industry_pillar,
  am.sales_segment_gm_name AS sales_segment_gm_name_account,
  am.account_count_filtered
FROM
  RevenueMetrics rm
  FULL OUTER JOIN AccountMetrics am ON SAFE_CAST(rm.adpoint_account_number AS STRING) = SAFE_CAST(am.adpoint_account_number AS STRING)
  AND SAFE_CAST(rm.advertiser_name AS STRING) = SAFE_CAST(am.advertiser_name AS STRING)
TABLESAMPLE SYSTEM (1 PERCENT)
;",SELECT * FROM `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` LIMIT 10;,"WITH
  ContraSheetLookup AS (
    SELECT DISTINCT
      SAFE_CAST(NMBS_T_Number AS STRING) AS NMBS_T_Number
    FROM
      `ncau-data-newsquery-prd.sbx_dcp.contra_sheet_data`
  ),
  RevenueBase AS (
    SELECT
      t0.financial_year,
      SAFE_CAST(t0.financial_month AS INT64) AS financial_month_no,
      t0.financial_short_month,
      t0.calendar_year_month,
      t0.sales_segment_gm_name,
      t0.portfolio_conformed_name_current,
      IFNULL(t0.current_portfolio_conformed_owner_full_name_current, 'VACANT') AS current_portfolio_conformed_owner_full,
      t0.advertiser_name,
      SAFE_CAST(t0.adpoint_account_number AS STRING) AS adpoint_account_number,
      t0.revenue_type,
      t0.relative_fy_year_offset,
      CASE
        WHEN SAFE_CAST(t0.adpoint_account_number AS STRING) IN (
          SELECT
            NMBS_T_Number
          FROM
            ContraSheetLookup
        ) THEN 'Y'
        ELSE 'N'
      END AS sheet_account_flag,
      SUM(t0.gross_revenue_amount) AS gross_revenue_amount_summed,
      t0.cost_model_type,
      t0.revenue_group_name,
      t0.revenue_transaction_status,
      t0.style_name,
      t0.source_publishing_division,
      t0.publication_name,
      SAFE_CAST(t0.account_number AS STRING) AS account_number_rev,
      t0.adtype_name
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily` AS t0
    WHERE
      LOWER(LEFT(SAFE_CAST(t0.advertiser_name AS STRING), 3)) = 'ctr'
      AND NOT (SAFE_CAST(t0.cost_model_type AS STRING) = 'Guaranteed' AND SAFE_CAST(t0.revenue_group_name AS STRING) = 'Exchange')
      AND UPPER(IFNULL(SAFE_CAST(t0.revenue_transaction_status AS STRING), 'XXX')) IN ('BILLED', 'BOOKED')
      AND UPPER(IFNULL(SAFE_CAST(t0.style_name AS STRING), 'XXX')) <> 'ROP COMPOSITE'
      AND UPPER(IFNULL(SAFE_CAST(t0.source_publishing_division AS STRING), 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
      AND (
        UPPER(IFNULL(SAFE_CAST(t0.publication_name AS STRING), 'XXX')) NOT LIKE 'SUDDENLY%'
        OR (
          UPPER(SAFE_CAST(t0.publication_name AS STRING)) LIKE 'SUDDENLY%'
          AND (SAFE_CAST(t0.account_number AS STRING) IN ('17114', '29172', '52809') OR SAFE_CAST(t0.adtype_name AS STRING) = '-')
        )
      )
      AND t0.calendar_year_month = '2023-10' -- Example date filter for sampling
    GROUP BY ALL
  ),
  RevenueMetrics AS (
    SELECT
      gross_revenue_amount_summed AS gross_revenue_amount,
      CASE
        WHEN (adpoint_account_number IN ('13019', '52246', '18387')) THEN 'ctr1'
        ELSE adpoint_account_number
      END AS transformed_adpoint_account_number,
      CASE
        WHEN (
          CASE
            WHEN (adpoint_account_number IN ('13019', '52246', '18387')) THEN 'ctr1'
            ELSE adpoint_account_number
          END = 'ctr1'
        ) THEN 'CTR_2023_AFL Sports CTR_2023_Sydney Swans CTR_2023_GWS Giants'
        ELSE advertiser_name
      END AS transformed_advertiser_name
    FROM
      RevenueBase
  ),
  AccountMetrics AS (
    SELECT
      t0.current_portfolio_conformed_owner_full AS owner_full_name_filtered,
      COUNT(1) AS account_count_filtered
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard` AS t0
    WHERE
      SAFE_CAST(t0.advertiser_name AS STRING) IN (
        'CTR_2023_AFL SPORT',
        'CTR_2023_GWS GIANTS',
        'CTR_2023_SYDNEY SWANS',
        'CTR_2025_Greater Western Sydney Giants',
        'CTR_2025_Raising Literacy Australia'
      )
      OR (
        SAFE_CAST(t0.nca_industry_pillar AS STRING) = 'Contra'
        AND SAFE_CAST(t0.sales_segment_gm_name AS STRING) IN ('Renee Sycamore')
      )
    GROUP BY
      1
  )
SELECT
  (SELECT gross_revenue_amount FROM RevenueMetrics LIMIT 1) AS sample_gross_revenue,
  (SELECT transformed_adpoint_account_number FROM RevenueMetrics LIMIT 1) AS sample_transformed_adpoint_account,
  (SELECT transformed_advertiser_name FROM RevenueMetrics LIMIT 1) AS sample_transformed_advertiser_name,
  (SELECT owner_full_name_filtered FROM AccountMetrics LIMIT 1) AS sample_owner_full_name_filtered,
  (SELECT account_count_filtered FROM AccountMetrics LIMIT 1) AS sample_account_count_filtered
;","SELECT
  (
    SELECT
      COUNT(1)
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_daily`
    WHERE
      LOWER(LEFT(SAFE_CAST(advertiser_name AS STRING), 3)) = 'ctr'
  ) AS count_advertiser_name_starts_with_ctr,
  (
    SELECT
      COUNT(1)
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
    WHERE
      SAFE_CAST(advertiser_name AS STRING) IN (
        'CTR_2023_AFL SPORT',
        'CTR_2023_GWS GIANTS',
        'CTR_2023_SYDNEY SWANS',
        'CTR_2025_Greater Western Sydney Giants',
        'CTR_2025_Raising Literacy Australia'
      )
  ) AS count_details_dashboard_specific_ctr_advertisers,
  (
    SELECT
      COUNT(1)
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.details_dashboard`
    WHERE
      SAFE_CAST(nca_industry_pillar AS STRING) = 'Contra'
      AND SAFE_CAST(sales_segment_gm_name AS STRING) IN ('Renee Sycamore')
  ) AS count_details_dashboard_contra_renee_sycamore
;",28,b9dfd2f4-92fa-4f81-a5b1-17de880470f9
"WITH base_data AS (
    SELECT
        t0.delivery_medium_type,
        t0.fy_year,
        t0.masthead,
        t0.sold_in_source_code,
        t0.subscriber_has_email_flag,
        t0.table_nm,
        t0.classification_level_2,
        t0.fy_week_of_year,
        t0.offer_category_group_name,
        t0.offer_category_name
    FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_dimensions AS (
    SELECT
        fy_year,
        fy_week_of_year,
        offer_category_group_name,
        offer_category_name,
        table_nm,
        -- Delivery Medium
        CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_cleaned,
        -- Masthead Group
        CASE
            WHEN (masthead = 'TA') THEN 'The Australian'
            WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
            WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
            WHEN (masthead = 'WT') THEN 'Other Publications'
            WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
            WHEN (masthead IS NULL) THEN 'check'
            ELSE 'Exclude'
        END AS masthead_group,
        -- Masthead Category
        CASE
            WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
            WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
            WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
            WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
            ELSE 'Exclude'
        END AS masthead_category,
        -- Sold In Source Code (trimmed)
        LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))) AS sold_in_source_code_trimmed,
        -- Subscription Type
        CASE
            WHEN (CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
            ELSE 'Print Subscriptions'
        END AS subscription_type,
        -- Customer Type
        CASE
            WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
            WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
            WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
            WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
            WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
            WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
            ELSE NULL
        END AS customer_type,
        -- Source/Channel
        CASE
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CF') > 0) THEN 'Community Form'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CS') > 0) THEN 'Closing Speed'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FA') > 0) THEN 'Free Articles'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FF') > 0) THEN 'Form Finder'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_NA') > 0) THEN 'News Articles'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PC') > 0) THEN 'True Crime Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PE') > 0) THEN 'Punters Edge'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SL') > 0) THEN 'Shortlist'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SS') > 0) THEN 'Setting Speed'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TE') > 0) THEN 'Tippers Edge'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TH') > 0) THEN 'Todays Headlines'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TO') > 0) THEN 'The Oz'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_WS') > 0) THEN 'Why Subscribe'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 4), 'PRED') > 0) THEN 'Predictor'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'AMP') > 0) THEN 'Google AMP'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FBK') > 0) THEN 'Facebook'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGL') > 0) THEN 'Google'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGN') > 0) THEN 'Google News'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'LIN') > 0) THEN 'Linked In'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NEW') > 0) THEN 'news.com.au'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NWL') > 0) THEN 'Newsletter'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POD') > 0) THEN 'Podcasts'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POR') > 0) THEN 'Newsletter Sports'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'RED') > 0) THEN 'Reddit'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SCP') > 0) THEN 'Supercoach Plus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SEC') > 0) THEN 'Sectionals'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TCA') > 0) THEN 'True Crime Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TMP') > 0) THEN 'Tips Mrket Place'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWA') > 0) THEN 'The Weekend Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWT') > 0) THEN 'Twitter'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'WID') > 0) THEN 'Widget'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_FBK') > 0) THEN 'Facebook'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_GGL') > 0) THEN 'Google'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 'INS') > 0) THEN 'Instagram'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_LIN') > 0) THEN 'Linked In'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_RED') > 0) THEN 'Reddit'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_TWT') > 0) THEN 'Twitter'
            ELSE NULL
        END AS source_channel
    FROM base_data
)
SELECT
    fy_year,
    fy_week_of_year,
    delivery_medium_cleaned,
    masthead_group,
    masthead_category,
    sold_in_source_code_trimmed,
    subscription_type,
    customer_type,
    source_channel,
    offer_category_group_name,
    offer_category_name,
    COUNT(1) AS acquisition_count
FROM derived_dimensions
WHERE
    masthead_group != 'Exclude'
    AND subscription_type = 'Digital Subscriptions'
    AND table_nm != 'op'
    AND source_channel IS NOT NULL
    AND masthead_category = 'The Australian and Prestige'
    AND SAFE_CAST(fy_year AS INT64) = 2025
    AND customer_type IN ('B2C', '')
GROUP BY
    fy_year,
    fy_week_of_year,
    delivery_medium_cleaned,
    masthead_group,
    masthead_category,
    sold_in_source_code_trimmed,
    subscription_type,
    customer_type,
    source_channel,
    offer_category_group_name,
    offer_category_name
LIMIT 1000;","SELECT
    t0.delivery_medium_type,
    t0.fy_year,
    t0.masthead,
    t0.sold_in_source_code,
    t0.subscriber_has_email_flag,
    t0.table_nm,
    t0.classification_level_2,
    t0.fy_week_of_year,
    t0.offer_category_group_name,
    t0.offer_category_name
FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
TABLESAMPLE SYSTEM (1 PERCENT)
LIMIT 100;","WITH base_data AS (
    SELECT
        t0.delivery_medium_type,
        t0.fy_year,
        t0.masthead,
        t0.sold_in_source_code,
        t0.subscriber_has_email_flag,
        t0.table_nm,
        t0.classification_level_2,
        t0.fy_week_of_year,
        t0.offer_category_group_name,
        t0.offer_category_name
    FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_dimensions AS (
    SELECT
        fy_year,
        fy_week_of_year,
        offer_category_group_name,
        offer_category_name,
        table_nm,
        -- Delivery Medium
        CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_cleaned,
        -- Masthead Group
        CASE
            WHEN (masthead = 'TA') THEN 'The Australian'
            WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
            WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
            WHEN (masthead = 'WT') THEN 'Other Publications'
            WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
            WHEN (masthead IS NULL) THEN 'check'
            ELSE 'Exclude'
        END AS masthead_group,
        -- Masthead Category
        CASE
            WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
            WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
            WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
            WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
            ELSE 'Exclude'
        END AS masthead_category,
        -- Sold In Source Code (trimmed)
        LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))) AS sold_in_source_code_trimmed,
        -- Subscription Type
        CASE
            WHEN (CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
            ELSE 'Print Subscriptions'
        END AS subscription_type,
        -- Customer Type
        CASE
            WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
            WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
            WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
            WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
            WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
            WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
            ELSE NULL
        END AS customer_type,
        -- Source/Channel
        CASE
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CF') > 0) THEN 'Community Form'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CS') > 0) THEN 'Closing Speed'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FA') > 0) THEN 'Free Articles'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FF') > 0) THEN 'Form Finder'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_NA') > 0) THEN 'News Articles'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PC') > 0) THEN 'True Crime Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PE') > 0) THEN 'Punters Edge'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SL') > 0) THEN 'Shortlist'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SS') > 0) THEN 'Setting Speed'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TE') > 0) THEN 'Tippers Edge'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TH') > 0) THEN 'Todays Headlines'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TO') > 0) THEN 'The Oz'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_WS') > 0) THEN 'Why Subscribe'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 4), 'PRED') > 0) THEN 'Predictor'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'AMP') > 0) THEN 'Google AMP'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FBK') > 0) THEN 'Facebook'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGL') > 0) THEN 'Google'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGN') > 0) THEN 'Google News'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'LIN') > 0) THEN 'Linked In'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NEW') > 0) THEN 'news.com.au'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NWL') > 0) THEN 'Newsletter'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POD') > 0) THEN 'Podcasts'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POR') > 0) THEN 'Newsletter Sports'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'RED') > 0) THEN 'Reddit'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SCP') > 0) THEN 'Supercoach Plus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SEC') > 0) THEN 'Sectionals'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TCA') > 0) THEN 'True Crime Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TMP') > 0) THEN 'Tips Mrket Place'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWA') > 0) THEN 'The Weekend Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWT') > 0) THEN 'Twitter'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'WID') > 0) THEN 'Widget'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_FBK') > 0) THEN 'Facebook'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_GGL') > 0) THEN 'Google'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 'INS') > 0) THEN 'Instagram'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_LIN') > 0) THEN 'Linked In'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_RED') > 0) THEN 'Reddit'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_TWT') > 0) THEN 'Twitter'
            ELSE NULL
        END AS source_channel
    FROM base_data
)
SELECT
    fy_year,
    fy_week_of_year,
    delivery_medium_cleaned,
    masthead_group,
    masthead_category,
    sold_in_source_code_trimmed,
    subscription_type,
    customer_type,
    source_channel,
    offer_category_group_name,
    offer_category_name,
    COUNT(1) AS acquisition_count
FROM derived_dimensions
WHERE
    masthead_group != 'Exclude'
    AND subscription_type = 'Digital Subscriptions'
    AND table_nm != 'op'
    AND source_channel IS NOT NULL
    AND masthead_category = 'The Australian and Prestige'
    AND SAFE_CAST(fy_year AS INT64) = 2025
    AND customer_type IN ('B2C', '')
GROUP BY
    fy_year,
    fy_week_of_year,
    delivery_medium_cleaned,
    masthead_group,
    masthead_category,
    sold_in_source_code_trimmed,
    subscription_type,
    customer_type,
    source_channel,
    offer_category_group_name,
    offer_category_name
LIMIT 10;","WITH base_data AS (
    SELECT
        t0.delivery_medium_type,
        t0.fy_year,
        t0.masthead,
        t0.sold_in_source_code,
        t0.subscriber_has_email_flag,
        t0.table_nm,
        t0.classification_level_2,
        t0.fy_week_of_year,
        t0.offer_category_group_name,
        t0.offer_category_name
    FROM `ncau-data-newsquery-prd.asl_finance_derived.acquisitions_cancellations_movements` AS t0
),
derived_dimensions AS (
    SELECT
        fy_year,
        fy_week_of_year,
        offer_category_group_name,
        offer_category_name,
        table_nm,
        delivery_medium_type, -- Keep original for validation
        masthead,             -- Keep original for validation
        sold_in_source_code,  -- Keep original for validation
        subscriber_has_email_flag, -- Keep original for validation
        classification_level_2, -- Keep original for validation
        -- Delivery Medium
        CASE WHEN (delivery_medium_type = 'Not Available') THEN 'Digital' ELSE delivery_medium_type END AS delivery_medium_cleaned,
        -- Masthead Group
        CASE
            WHEN (masthead = 'TA') THEN 'The Australian'
            WHEN (masthead IN ('CM', 'DT', 'HS', 'AA')) THEN 'Metro'
            WHEN (masthead IN ('CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC')) THEN 'Regionals'
            WHEN (masthead = 'WT') THEN 'Other Publications'
            WHEN (masthead IN ('SC', 'CS', 'TS', 'AP', 'RN', 'PU')) THEN 'Deep Niche Publications'
            WHEN (masthead IS NULL) THEN 'check'
            ELSE 'Exclude'
        END AS masthead_group,
        -- Masthead Category
        CASE
            WHEN (masthead IN ('CM', 'DT', 'HS', 'AA', 'CP', 'GA', 'GC', 'NT', 'TM', 'TB', 'TC', 'WT', 'CS', 'AP', 'SC')) THEN 'States and Community'
            WHEN (masthead = 'TA') THEN 'The Australian and Prestige'
            WHEN (masthead IN ('PU', 'RN')) THEN 'Commercial Content'
            WHEN (masthead IN ('TS')) THEN 'Free & Lifestyle'
            ELSE 'Exclude'
        END AS masthead_category,
        -- Sold In Source Code (trimmed)
        LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))) AS sold_in_source_code_trimmed,
        -- Subscription Type
        CASE
            WHEN (CONCAT(SAFE_CAST(delivery_medium_type AS STRING),' ',SAFE_CAST(subscriber_has_email_flag AS STRING)) IN ('Digital Y', 'Digital N', 'Bundle Y', 'Not Available Y')) THEN 'Digital Subscriptions'
            ELSE 'Print Subscriptions'
        END AS subscription_type,
        -- Customer Type
        CASE
            WHEN (classification_level_2 IN ('App Subscribers', 'Bundles', 'Digital', 'DPE only', 'Essentials', 'Gift Bundles Activation', 'Gift Digital Activation', 'Mind Games', 'Press Reader', 'Print-only', 'Wine Club')) THEN 'Consumer'
            WHEN (classification_level_2 IN ('Campus Activation', 'Campus Sub')) THEN 'Campus'
            WHEN (classification_level_2 IN ('Corp Volume Print', 'Corporate Activation', 'Corporate Enterprise Sub', 'Corporate Enterprise Activation', 'Corporate Enterprise Activation - Amex', 'Corporate Enterprise Activation - Qantas', 'Corporate Sub', 'Corporate Volume Activation', 'Corporate Volume Sub', 'SMB Activation', 'SMB Digital')) THEN 'Corporate excluding IP'
            WHEN (classification_level_2 = 'Free Staff') THEN 'Staff'
            WHEN (classification_level_2 = 'IP Access') THEN 'Corporate IP'
            WHEN (classification_level_2 IN ('Teachers Bundle', 'Teachers Digital', 'Teachers Print', 'University Bundle', 'University Digital')) THEN 'Education'
            ELSE NULL
        END AS customer_type,
        -- Source/Channel
        CASE
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_AB') > 0) THEN 'Above the Fold'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_BB') > 0) THEN 'Blackbook'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CF') > 0) THEN 'Community Form'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_CS') > 0) THEN 'Closing Speed'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FA') > 0) THEN 'Free Articles'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_FF') > 0) THEN 'Form Finder'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_NA') > 0) THEN 'News Articles'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PC') > 0) THEN 'True Crime Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_PE') > 0) THEN 'Punters Edge'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SL') > 0) THEN 'Shortlist'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_SS') > 0) THEN 'Setting Speed'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TE') > 0) THEN 'Tippers Edge'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TH') > 0) THEN 'Todays Headlines'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_TO') > 0) THEN 'The Oz'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), '_WS') > 0) THEN 'Why Subscribe'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 4), 'PRED') > 0) THEN 'Predictor'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'AMP') > 0) THEN 'Google AMP'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FBK') > 0) THEN 'Facebook'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'FMB') > 0) THEN 'Facebook Messenger Bot'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGL') > 0) THEN 'Google'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'GGN') > 0) THEN 'Google News'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'INS') > 0) THEN 'Instagram'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'LIN') > 0) THEN 'Linked In'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NEW') > 0) THEN 'news.com.au'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'NWL') > 0) THEN 'Newsletter'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POD') > 0) THEN 'Podcasts'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'POR') > 0) THEN 'Newsletter Sports'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'RED') > 0) THEN 'Reddit'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SCP') > 0) THEN 'Supercoach Plus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'SEC') > 0) THEN 'Sectionals'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TCA') > 0) THEN 'True Crime Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TMP') > 0) THEN 'Tips Mrket Place'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWA') > 0) THEN 'The Weekend Aus'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'TWT') > 0) THEN 'Twitter'
            WHEN (STRPOS(SAFE.RIGHT(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 3), 'WID') > 0) THEN 'Widget'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_FBK') > 0) THEN 'Facebook'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_GGL') > 0) THEN 'Google'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), 'INS') > 0) THEN 'Instagram'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_LIN') > 0) THEN 'Linked In'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_RED') > 0) THEN 'Reddit'
            WHEN (STRPOS(LTRIM(RTRIM(SAFE_CAST(sold_in_source_code AS STRING))), '_TWT') > 0) THEN 'Twitter'
            ELSE NULL
        END AS source_channel
    FROM base_data
)
SELECT
    fy_year,
    masthead,
    masthead_group,
    masthead_category,
    sold_in_source_code,
    sold_in_source_code_trimmed,
    source_channel,
    delivery_medium_type,
    subscriber_has_email_flag,
    subscription_type,
    classification_level_2,
    customer_type
FROM derived_dimensions
WHERE
    -- Example validation: Check a specific masthead mapping
    (masthead = 'TA' AND masthead_group != 'The Australian') OR
    (masthead = 'CM' AND masthead_group != 'Metro') OR
    -- Example validation: Check a specific source code mapping
    (sold_in_source_code LIKE '%_AB%' AND source_channel != 'Above the Fold') OR
    (sold_in_source_code LIKE '%PRED%' AND source_channel != 'Predictor') OR
    (sold_in_source_code LIKE '%_FBK%' AND source_channel != 'Facebook') OR
    -- Example validation: Check subscription type mapping
    (CONCAT(delivery_medium_type,' ',subscriber_has_email_flag) = 'Digital Y' AND subscription_type != 'Digital Subscriptions') OR
    -- Example validation: Check customer type mapping
    (classification_level_2 = 'App Subscribers' AND customer_type != 'Consumer')
LIMIT 100;",29,4d22b4c2-4bb3-49db-a0c1-4d46d4fba101
"-- This query consolidates the logic from the provided Looker Studio queries to derive key dimensions and a placeholder metric.
-- It aims to provide a unified view of the data used in the 'Optimizing Digital Subscriptions Report' dashboard.
-- Hardcoded values are replaced with parameters where appropriate, or noted as governance issues.

-- Declare parameters for dynamic filtering and date calculations
DECLARE report_as_of_date DATE DEFAULT '2025-03-23'; -- Corresponds to clmn0_ in Q1
DECLARE fiscal_year_start_date DATETIME DEFAULT '2024-07-03T00:00:00'; -- Corresponds to hardcoded date in clmn8_ in Q1
DECLARE fiscal_year_string STRING DEFAULT '2025'; -- Corresponds to hardcoded '2025' in clmn132_ in Q1
DECLARE masthead_category_filter STRING DEFAULT 'All Mastheads'; -- Corresponds to clmn130_ logic in Q1

WITH
  base_data AS (
    SELECT
      t0.classification_level_1_description,
      t0.classification_level_2_description,
      t0.delivery_medium_type,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.subscriber_has_email_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  ),
  derived_flags AS (
    SELECT
      *,
      -- Intermediate flag for Recognition Type calculation (clmn85_ in Q1, clmn82_ in Q2, clmn84_ in Q3)
      CASE
        WHEN SAFE_CAST(subscriber_has_email_flag AS STRING) = 'subsnapfact' THEN 'Y'
        WHEN (SAFE_CAST(classification_level_1_description AS STRING) = 'Standard Paid' AND SAFE_CAST(delivery_medium_type AS STRING) = 'Bundle') THEN SAFE_CAST(subscriber_has_email_flag AS STRING)
        ELSE 'Y'
      END AS is_print_recognition_flag_intermediate,
      -- Boolean flags for Masthead Name (e.g., clmn89_ to clmn125_ in Q1)
      (SAFE_CAST(gl_publication_code AS STRING) = '963' OR SAFE_CAST(masthead_code AS STRING) = 'NT') AS is_nt_news,
      (SAFE_CAST(gl_publication_code AS STRING) = '9001' OR SAFE_CAST(masthead_code AS STRING) = 'CS') AS is_code,
      (SAFE_CAST(gl_publication_code AS STRING) = '110' OR SAFE_CAST(gl_publication_code AS STRING) = '111' OR SAFE_CAST(masthead_code AS STRING) = 'DT') AS is_daily_telegraph,
      (SAFE_CAST(gl_publication_code AS STRING) = '460' OR SAFE_CAST(masthead_code AS STRING) = 'CP') AS is_cairns_post,
      (SAFE_CAST(gl_publication_code AS STRING) = '9600' OR SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'TS') AS is_taste_online,
      (SAFE_CAST(gl_publication_code AS STRING) = '9504' OR SAFE_CAST(gl_publication_code AS STRING) = '121' OR SAFE_CAST(masthead_code AS STRING) = 'WT') AS is_weekly_times,
      (SAFE_CAST(gl_publication_code AS STRING) = '400' OR SAFE_CAST(gl_publication_code AS STRING) = '401' OR SAFE_CAST(gl_publication_code AS STRING) = '402' OR SAFE_CAST(masthead_code AS STRING) = 'CM') AS is_courier_mail,
      (SAFE_CAST(gl_publication_code AS STRING) = '9653' OR SAFE_CAST(masthead_code AS STRING) = 'SC') AS is_supercoach_plus,
      (SAFE_CAST(gl_publication_code AS STRING) = '475' OR SAFE_CAST(gl_publication_code AS STRING) = '490' OR SAFE_CAST(masthead_code AS STRING) = 'TB') AS is_townsville,
      (SAFE_CAST(gl_publication_code AS STRING) = '301' OR SAFE_CAST(gl_publication_code AS STRING) = '302' OR SAFE_CAST(gl_publication_code AS STRING) = '303' OR SAFE_CAST(masthead_code AS STRING) = 'HS') AS is_herald_sun,
      (SAFE_CAST(gl_publication_code AS STRING) = '5053' OR SAFE_CAST(gl_publication_code AS STRING) = '5253' OR SAFE_CAST(masthead_code AS STRING) = 'TC') AS is_toowoomba,
      (SAFE_CAST(gl_publication_code AS STRING) = '350' OR SAFE_CAST(gl_publication_code AS STRING) = '351' OR SAFE_CAST(masthead_code AS STRING) = 'GA') AS is_geelong,
      (SAFE_CAST(gl_publication_code AS STRING) = '850' OR SAFE_CAST(gl_publication_code AS STRING) = '851' OR SAFE_CAST(gl_publication_code AS STRING) = '852' OR SAFE_CAST(masthead_code AS STRING) = 'TM') AS is_the_mercury,
      (SAFE_CAST(gl_publication_code AS STRING) = '100' OR SAFE_CAST(gl_publication_code AS STRING) = '101' OR SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(masthead_code AS STRING) = 'TA') AS is_the_australian,
      (SAFE_CAST(gl_publication_code AS STRING) = '8821' OR SAFE_CAST(gl_publication_code AS STRING) = '8822' OR SAFE_CAST(masthead_code AS STRING) = 'PU') AS is_punters,
      (SAFE_CAST(gl_publication_code AS STRING) = '670' OR SAFE_CAST(gl_publication_code AS STRING) = '685' OR SAFE_CAST(masthead_code AS STRING) = 'GC') AS is_gold_coast,
      (SAFE_CAST(gl_publication_code AS STRING) = '500' OR SAFE_CAST(gl_publication_code AS STRING) = '501' OR SAFE_CAST(gl_publication_code AS STRING) = '560' OR SAFE_CAST(masthead_code AS STRING) = 'AA') AS is_the_advertiser,
      (SAFE_CAST(gl_publication_code AS STRING) = '9002' OR SAFE_CAST(masthead_code AS STRING) = 'BG') AS is_brain_games,
      (SAFE_CAST(gl_publication_code AS STRING) = 'Racenet' OR SAFE_CAST(masthead_code AS STRING) = 'RN') AS is_racenet,
      (SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'AP') AS is_apple_podcast_crime_x,
      (SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(gl_publication_code AS STRING) = 'The Oz' OR SAFE_CAST(masthead_code AS STRING) = 'NW') AS is_the_oz,
      (SAFE_CAST(gl_publication_code AS STRING) = '9000' OR SAFE_CAST(masthead_code AS STRING) = 'NW') AS is_news_com_au,
      (SAFE_CAST(gl_publication_code AS STRING) = '9644') AS is_suddenly,
      (SAFE_CAST(gl_publication_code AS STRING) = '9903') AS is_news_corporate,
      (SAFE_CAST(gl_publication_code AS STRING) = 'Group Newspaper Management - Digital') AS is_group_newspaper_management_digital,
      (SAFE_CAST(gl_publication_code AS STRING) = '121' OR SAFE_CAST(gl_publication_code AS STRING) = '9504' OR SAFE_CAST(gl_publication_code AS STRING) = '9514' OR SAFE_CAST(gl_publication_code AS STRING) = '9556' OR SAFE_CAST(gl_publication_code AS STRING) = '9558' OR SAFE_CAST(gl_publication_code AS STRING) = '9560' OR SAFE_CAST(gl_publication_code AS STRING) = '9603' OR SAFE_CAST(gl_publication_code AS STRING) = '9623') AS is_other_mastheads
    FROM
      base_data
  ),
  derived_masthead_dims AS (
    SELECT
      *,
      -- Recognition Type (clmn88_ in Q1, clmn84_ in Q2, clmn86_ in Q3)
      CASE
        WHEN SAFE_CAST(delivery_medium_type AS STRING) = 'Print' THEN 'Print Recognition'
        WHEN is_print_recognition_flag_intermediate = 'N' THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS Recognition_Type,
      -- Masthead Name (clmn86_ in Q1, clmn83_ in Q2, clmn85_ in Q3)
      CASE
        WHEN is_the_australian THEN 'The Australian'
        WHEN is_courier_mail THEN 'Courier Mail'
        WHEN is_daily_telegraph THEN 'Daily Telegraph'
        WHEN is_herald_sun THEN 'Herald Sun'
        WHEN is_the_advertiser THEN 'The Advertiser'
        WHEN is_cairns_post THEN 'Cairns Post'
        WHEN is_geelong THEN 'Geelong'
        WHEN is_gold_coast THEN 'Gold Coast'
        WHEN is_nt_news THEN 'NT News'
        WHEN is_the_mercury THEN 'The Mercury'
        WHEN is_toowoomba THEN 'Toowoomba'
        WHEN is_townsville THEN 'Townsville'
        WHEN is_weekly_times THEN 'Weekly Times'
        WHEN is_code THEN 'Code'
        WHEN is_punters THEN 'Punters'
        WHEN is_racenet THEN 'Racenet'
        WHEN is_supercoach_plus THEN 'Supercoach Plus'
        WHEN is_taste_online THEN 'Taste Online'
        WHEN is_apple_podcast_crime_x THEN 'Apple Podcast: Crime X'
        WHEN is_the_oz THEN 'The Oz'
        WHEN is_news_com_au THEN 'news.com.au'
        WHEN SAFE_CAST(gl_publication_code AS STRING) = '121' THEN 'Others'
        WHEN is_brain_games THEN 'Brain Games'
        WHEN is_other_mastheads THEN 'Others'
        WHEN is_suddenly THEN 'Suddenly'
        WHEN is_news_corporate THEN 'News Corporate'
        WHEN is_group_newspaper_management_digital THEN 'Group Newspaper Management - Digital'
        ELSE NULL
      END AS Masthead_Name
    FROM
      derived_flags
  ),
  derived_group_dims AS (
    SELECT
      *,
      -- Masthead Group (clmn127_ in Q1, clmn103_ in Q2, clmn105_ in Q3)
      CASE
        WHEN Masthead_Name = 'The Australian' THEN 'The Australian'
        WHEN Masthead_Name IN ('Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Courier Mail') THEN 'Metros'
        WHEN Masthead_Name IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville') THEN 'Regionals'
        WHEN Masthead_Name = 'Weekly Times' THEN 'Others'
        WHEN Masthead_Name IN ('Supercoach Plus', 'Racenet', 'Code', 'Apple Podcast: Crime X', 'Taste Online', 'Punters', 'Others') THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS Masthead_Group,
      -- Masthead Category (clmn128_ in Q1)
      CASE
        WHEN Masthead_Name = 'The Australian' THEN 'The Australian and Prestige'
        WHEN Masthead_Name IN ('Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Courier Mail', 'Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville', 'Weekly Times', 'Others') THEN 'States & Community'
        WHEN Masthead_Name IN ('Racenet', 'Punters') THEN 'Commercial Content'
        WHEN Masthead_Name IN ('Taste Online', 'Code', 'Apple Podcast: Crime X') THEN 'Free & Lifestyle'
        ELSE 'Discontinued'
      END AS Masthead_Category
    FROM
      derived_masthead_dims
  ),
  derived_time_dims AS (
    SELECT
      *,
      -- Fiscal Week Number (clmn8_ in Q1, then clmn84_ and clmn126_)
      DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 AS Fiscal_Week_Number_Adjusted,
      -- Fiscal Month Number (clmn129_ in Q1)
      CASE
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12
        ELSE NULL
      END AS Fiscal_Month_Number,
      -- Fiscal Month Name (clmn131_ in Q1)
      CASE
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 1 THEN 'July'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 2 THEN 'August'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 3 THEN 'September'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 4 THEN 'October'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 5 THEN 'November'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 6 THEN 'December'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 7 THEN 'January'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 8 THEN 'February'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 9 THEN 'March'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 10 THEN 'April'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 11 THEN 'May'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 12 THEN 'June'
        ELSE NULL
      END AS Fiscal_Month_Name,
      -- FY Week (Month) String (clmn132_ in Q1)
      CONCAT('FY ', fiscal_year_string, ' Week ', SAFE_CAST(DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 AS STRING), ' (', CASE WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 1 THEN 'July' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_SCAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 2 THEN 'August' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 3 THEN 'September' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 4 THEN 'October' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 5 THEN 'November' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 6 THEN 'December' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 7 THEN 'January' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 8 THEN 'February' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 9 THEN 'March' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 10 THEN 'April' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 11 THEN 'May' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 12 THEN 'June' ELSE NULL END, ')') AS Fiscal_Year_Week_Month_String,
      -- Scenario Type (clmn0_ in Q2)
      'FCT' AS Scenario_Type,
      -- Metric Type (clmn0_, clmn1_ in Q3)
      'Gross Acquisitions' AS Metric_Type_Acquisitions,
      'Gross Cancellations' AS Metric_Type_Cancellations
    FROM
      derived_group_dims
  )
SELECT
  Fiscal_Year_Week_Month_String,
  Masthead_Group,
  Masthead_Category,
  Recognition_Type,
  Masthead_Name,
  Scenario_Type,
  Metric_Type_Acquisitions,
  Metric_Type_Cancellations,
  COUNT(1) AS Record_Count -- Placeholder for actual subscription metrics (e.g., COUNT(DISTINCT subscriber_id))
FROM
  derived_time_dims
WHERE
  Recognition_Type = 'Digital Recognition'
  AND Masthead_Group != 'Discontinued'
  AND (masthead_category_filter = 'All Mastheads' OR Masthead_Category = masthead_category_filter)
GROUP BY
  Fiscal_Year_Week_Month_String,
  Masthead_Group,
  Masthead_Category,
  Recognition_Type,
  Masthead_Name,
  Scenario_Type,
  Metric_Type_Acquisitions,
  Metric_Type_Cancellations
LIMIT 1000;
","-- Query to understand data structure, grain, and key dimensions with sampling.
-- This helps verify the raw columns and their types.
SELECT
  SAFE_CAST(t0.classification_level_1_description AS STRING) AS classification_level_1_description,
  SAFE_CAST(t0.classification_level_2_description AS STRING) AS classification_level_2_description,
  SAFE_CAST(t0.delivery_medium_type AS STRING) AS delivery_medium_type,
  SAFE_CAST(t0.gl_publication_code AS STRING) AS gl_publication_code,
  SAFE_CAST(t0.masthead_code AS STRING) AS masthead_code,
  SAFE_CAST(t0.subscriber_has_email_flag AS STRING) AS subscriber_has_email_flag
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 100;
","-- Quick validation that all metric calculations (derived dimensions in this case) work syntactically.
-- Checks distinct values and counts for key derived dimensions.

DECLARE report_as_of_date DATE DEFAULT '2025-03-23';
DECLARE fiscal_year_start_date DATETIME DEFAULT '2024-07-03T00:00:00';
DECLARE fiscal_year_string STRING DEFAULT '2025';

WITH
  base_data AS (
    SELECT
      t0.classification_level_1_description,
      t0.classification_level_2_description,
      t0.delivery_medium_type,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.subscriber_has_email_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  ),
  derived_flags AS (
    SELECT
      *,
      CASE
        WHEN SAFE_CAST(subscriber_has_email_flag AS STRING) = 'subsnapfact' THEN 'Y'
        WHEN (SAFE_CAST(classification_level_1_description AS STRING) = 'Standard Paid' AND SAFE_CAST(delivery_medium_type AS STRING) = 'Bundle') THEN SAFE_CAST(subscriber_has_email_flag AS STRING)
        ELSE 'Y'
      END AS is_print_recognition_flag_intermediate,
      (SAFE_CAST(gl_publication_code AS STRING) = '100' OR SAFE_CAST(gl_publication_code AS STRING) = '101' OR SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(masthead_code AS STRING) = 'TA') AS is_the_australian,
      (SAFE_CAST(gl_publication_code AS STRING) = '400' OR SAFE_CAST(gl_publication_code AS STRING) = '401' OR SAFE_CAST(gl_publication_code AS STRING) = '402' OR SAFE_CAST(masthead_code AS STRING) = 'CM') AS is_courier_mail,
      (SAFE_CAST(gl_publication_code AS STRING) = '110' OR SAFE_CAST(gl_publication_code AS STRING) = '111' OR SAFE_CAST(masthead_code AS STRING) = 'DT') AS is_daily_telegraph,
      (SAFE_CAST(gl_publication_code AS STRING) = '301' OR SAFE_CAST(gl_publication_code AS STRING) = '302' OR SAFE_CAST(gl_publication_code AS STRING) = '303' OR SAFE_CAST(masthead_code AS STRING) = 'HS') AS is_herald_sun,
      (SAFE_CAST(gl_publication_code AS STRING) = '500' OR SAFE_CAST(gl_publication_code AS STRING) = '501' OR SAFE_CAST(gl_publication_code AS STRING) = '560' OR SAFE_CAST(masthead_code AS STRING) = 'AA') AS is_the_advertiser,
      (SAFE_CAST(gl_publication_code AS STRING) = '460' OR SAFE_CAST(masthead_code AS STRING) = 'CP') AS is_cairns_post,
      (SAFE_CAST(gl_publication_code AS STRING) = '350' OR SAFE_CAST(gl_publication_code AS STRING) = '351' OR SAFE_CAST(masthead_code AS STRING) = 'GA') AS is_geelong,
      (SAFE_CAST(gl_publication_code AS STRING) = '670' OR SAFE_CAST(gl_publication_code AS STRING) = '685' OR SAFE_CAST(masthead_code AS STRING) = 'GC') AS is_gold_coast,
      (SAFE_CAST(gl_publication_code AS STRING) = '963' OR SAFE_CAST(masthead_code AS STRING) = 'NT') AS is_nt_news,
      (SAFE_CAST(gl_publication_code AS STRING) = '850' OR SAFE_CAST(gl_publication_code AS STRING) = '851' OR SAFE_CAST(gl_publication_code AS STRING) = '852' OR SAFE_CAST(masthead_code AS STRING) = 'TM') AS is_the_mercury,
      (SAFE_CAST(gl_publication_code AS STRING) = '5053' OR SAFE_CAST(gl_publication_code AS STRING) = '5253' OR SAFE_CAST(masthead_code AS STRING) = 'TC') AS is_toowoomba,
      (SAFE_CAST(gl_publication_code AS STRING) = '475' OR SAFE_CAST(gl_publication_code AS STRING) = '490' OR SAFE_CAST(masthead_code AS STRING) = 'TB') AS is_townsville,
      (SAFE_CAST(gl_publication_code AS STRING) = '305' OR SAFE_CAST(gl_publication_code AS STRING) = '307' OR SAFE_CAST(masthead_code AS STRING) = 'WT') AS is_weekly_times,
      (SAFE_CAST(gl_publication_code AS STRING) = '9001' OR SAFE_CAST(masthead_code AS STRING) = 'CS') AS is_code,
      (SAFE_CAST(gl_publication_code AS STRING) = '8821' OR SAFE_CAST(gl_publication_code AS STRING) = '8822' OR SAFE_CAST(masthead_code AS STRING) = 'PU') AS is_punters,
      (SAFE_CAST(gl_publication_code AS STRING) = 'Racenet' OR SAFE_CAST(masthead_code AS STRING) = 'RN') AS is_racenet,
      (SAFE_CAST(gl_publication_code AS STRING) = '9653' OR SAFE_CAST(masthead_code AS STRING) = 'SC') AS is_supercoach_plus,
      (SAFE_CAST(gl_publication_code AS STRING) = '9600' OR SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'TS') AS is_taste_online,
      (SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'AP') AS is_apple_podcast_crime_x,
      (SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(masthead_code AS STRING) = 'The Oz') AS is_the_oz,
      (SAFE_CAST(gl_publication_code AS STRING) = '9000' OR SAFE_CAST(masthead_code AS STRING) = 'NW') AS is_news_com_au,
      (SAFE_CAST(gl_publication_code AS STRING) = '121') AS is_others_gl_code,
      (SAFE_CAST(gl_publication_code AS STRING) = '9002' OR SAFE_CAST(masthead_code AS STRING) = 'BG') AS is_brain_games,
      (SAFE_CAST(gl_publication_code AS STRING) = '9504' OR SAFE_CAST(gl_publication_code AS STRING) = '9514' OR SAFE_CAST(gl_publication_code AS STRING) = '9556' OR SAFE_CAST(gl_publication_code AS STRING) = '9558' OR SAFE_CAST(gl_publication_code AS STRING) = '9560' OR SAFE_CAST(gl_publication_code AS STRING) = '9603' OR SAFE_CAST(gl_publication_code AS STRING) = '9623') AS is_other_mastheads
    FROM
      base_data
  ),
  derived_masthead_dims AS (
    SELECT
      *,
      CASE
        WHEN SAFE_CAST(delivery_medium_type AS STRING) = 'Print' THEN 'Print Recognition'
        WHEN is_print_recognition_flag_intermediate = 'N' THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS Recognition_Type,
      CASE
        WHEN is_the_australian THEN 'The Australian'
        WHEN is_courier_mail THEN 'Courier Mail'
        WHEN is_daily_telegraph THEN 'Daily Telegraph'
        WHEN is_herald_sun THEN 'Herald Sun'
        WHEN is_the_advertiser THEN 'The Advertiser'
        WHEN is_cairns_post THEN 'Cairns Post'
        WHEN is_geelong THEN 'Geelong'
        WHEN is_gold_coast THEN 'Gold Coast'
        WHEN is_nt_news THEN 'NT News'
        WHEN is_the_mercury THEN 'The Mercury'
        WHEN is_toowoomba THEN 'Toowoomba'
        WHEN is_townsville THEN 'Townsville'
        WHEN is_weekly_times THEN 'Weekly Times'
        WHEN is_code THEN 'Code'
        WHEN is_punters THEN 'Punters'
        WHEN is_racenet THEN 'Racenet'
        WHEN is_supercoach_plus THEN 'Supercoach Plus'
        WHEN is_taste_online THEN 'Taste Online'
        WHEN is_apple_podcast_crime_x THEN 'Apple Podcast: Crime X'
        WHEN is_the_oz THEN 'The Oz'
        WHEN is_news_com_au THEN 'news.com.au'
        WHEN is_others_gl_code THEN 'Others'
        WHEN is_brain_games THEN 'Brain Games'
        WHEN is_other_mastheads THEN 'Others'
        ELSE NULL
      END AS Masthead_Name
    FROM
      derived_flags
  ),
  derived_group_dims AS (
    SELECT
      *,
      CASE
        WHEN Masthead_Name = 'The Australian' THEN 'The Australian'
        WHEN Masthead_Name IN ('Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Courier Mail') THEN 'Metros'
        WHEN Masthead_Name IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville') THEN 'Regionals'
        WHEN Masthead_Name = 'Weekly Times' THEN 'Others'
        WHEN Masthead_Name IN ('Supercoach Plus', 'Racenet', 'Code', 'Apple Podcast: Crime X', 'Taste Online', 'Punters', 'Others') THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS Masthead_Group,
      CASE
        WHEN Masthead_Name = 'The Australian' THEN 'The Australian and Prestige'
        WHEN Masthead_Name IN ('Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Courier Mail', 'Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville', 'Weekly Times', 'Others') THEN 'States & Community'
        WHEN Masthead_Name IN ('Racenet', 'Punters') THEN 'Commercial Content'
        WHEN Masthead_Name IN ('Taste Online', 'Code', 'Apple Podcast: Crime X') THEN 'Free & Lifestyle'
        ELSE 'Discontinued'
      END AS Masthead_Category
    FROM
      derived_masthead_dims
  ),
  derived_time_dims AS (
    SELECT
      *,
      DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 AS Fiscal_Week_Number_Adjusted,
      CASE
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11
        WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12
        ELSE NULL
      END AS Fiscal_Month_Number,
      CASE
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 1 THEN 'July'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 2 THEN 'August'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 3 THEN 'September'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 4 THEN 'October'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 5 THEN 'November'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 6 THEN 'December'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 7 THEN 'January'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 8 THEN 'February'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 9 THEN 'March'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 10 THEN 'April'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 11 THEN 'May'
        WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 12 THEN 'June'
        ELSE NULL
      END AS Fiscal_Month_Name,
      CONCAT('FY ', fiscal_year_string, ' Week ', SAFE_CAST(DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 AS STRING), ' (', CASE WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 1 THEN 'July' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 2 THEN 'August' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 3 THEN 'September' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 4 THEN 'October' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 5 THEN 'November' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 6 THEN 'December' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 7 THEN 'January' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 8 THEN 'February' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 9 THEN 'March' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 10 THEN 'April' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 11 THEN 'May' WHEN (CASE WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 4 THEN 1 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 9 THEN 2 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 13 THEN 3 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 17 THEN 4 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 22 THEN 5 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 26 THEN 6 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 30 THEN 7 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 35 THEN 8 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 39 THEN 9 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 43 THEN 10 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 48 THEN 11 WHEN DATETIME_DIFF(SAFE_CAST(report_as_of_date AS DATETIME), fiscal_year_start_date, WEEK) - 1 <= 53 THEN 12 ELSE NULL END) = 12 THEN 'June' ELSE NULL END, ')') AS Fiscal_Year_Week_Month_String
    FROM
      derived_group_dims
  )
SELECT
  Recognition_Type,
  COUNT(1) AS count_recognition_type
FROM
  derived_time_dims
GROUP BY
  1
UNION ALL
SELECT
  Masthead_Group,
  COUNT(1) AS count_masthead_group
FROM
  derived_time_dims
GROUP BY
  1
UNION ALL
SELECT
  Masthead_Category,
  COUNT(1) AS count_masthead_category
FROM
  derived_time_dims
GROUP BY
  1
UNION ALL
SELECT
  Fiscal_Year_Week_Month_String,
  COUNT(1) AS count_fiscal_week_month
FROM
  derived_time_dims
GROUP BY
  1
LIMIT 100;
","-- Query to validate key business logic, filters, and data quality.
-- Focuses on the primary filters and classifications.

DECLARE report_as_of_date DATE DEFAULT '2025-03-23';
DECLARE fiscal_year_start_date DATETIME DEFAULT '2024-07-03T00:00:00';
DECLARE fiscal_year_string STRING DEFAULT '2025';

WITH
  base_data AS (
    SELECT
      t0.classification_level_1_description,
      t0.classification_level_2_description,
      t0.delivery_medium_type,
      t0.gl_publication_code,
      t0.masthead_code,
      t0.subscriber_has_email_flag
    FROM
      `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
  ),
  derived_flags AS (
    SELECT
      *,
      CASE
        WHEN SAFE_CAST(subscriber_has_email_flag AS STRING) = 'subsnapfact' THEN 'Y'
        WHEN (SAFE_CAST(classification_level_1_description AS STRING) = 'Standard Paid' AND SAFE_CAST(delivery_medium_type AS STRING) = 'Bundle') THEN SAFE_CAST(subscriber_has_email_flag AS STRING)
        ELSE 'Y'
      END AS is_print_recognition_flag_intermediate,
      (SAFE_CAST(gl_publication_code AS STRING) = '100' OR SAFE_CAST(gl_publication_code AS STRING) = '101' OR SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(masthead_code AS STRING) = 'TA') AS is_the_australian,
      (SAFE_CAST(gl_publication_code AS STRING) = '400' OR SAFE_CAST(gl_publication_code AS STRING) = '401' OR SAFE_CAST(gl_publication_code AS STRING) = '402' OR SAFE_CAST(masthead_code AS STRING) = 'CM') AS is_courier_mail,
      (SAFE_CAST(gl_publication_code AS STRING) = '110' OR SAFE_CAST(gl_publication_code AS STRING) = '111' OR SAFE_CAST(masthead_code AS STRING) = 'DT') AS is_daily_telegraph,
      (SAFE_CAST(gl_publication_code AS STRING) = '301' OR SAFE_CAST(gl_publication_code AS STRING) = '302' OR SAFE_CAST(gl_publication_code AS STRING) = '303' OR SAFE_CAST(masthead_code AS STRING) = 'HS') AS is_herald_sun,
      (SAFE_CAST(gl_publication_code AS STRING) = '500' OR SAFE_CAST(gl_publication_code AS STRING) = '501' OR SAFE_CAST(gl_publication_code AS STRING) = '560' OR SAFE_CAST(masthead_code AS STRING) = 'AA') AS is_the_advertiser,
      (SAFE_CAST(gl_publication_code AS STRING) = '460' OR SAFE_CAST(masthead_code AS STRING) = 'CP') AS is_cairns_post,
      (SAFE_CAST(gl_publication_code AS STRING) = '350' OR SAFE_CAST(gl_publication_code AS STRING) = '351' OR SAFE_CAST(masthead_code AS STRING) = 'GA') AS is_geelong,
      (SAFE_CAST(gl_publication_code AS STRING) = '670' OR SAFE_CAST(gl_publication_code AS STRING) = '685' OR SAFE_CAST(masthead_code AS STRING) = 'GC') AS is_gold_coast,
      (SAFE_CAST(gl_publication_code AS STRING) = '963' OR SAFE_CAST(masthead_code AS STRING) = 'NT') AS is_nt_news,
      (SAFE_CAST(gl_publication_code AS STRING) = '850' OR SAFE_CAST(gl_publication_code AS STRING) = '851' OR SAFE_CAST(gl_publication_code AS STRING) = '852' OR SAFE_CAST(masthead_code AS STRING) = 'TM') AS is_the_mercury,
      (SAFE_CAST(gl_publication_code AS STRING) = '5053' OR SAFE_CAST(gl_publication_code AS STRING) = '5253' OR SAFE_CAST(masthead_code AS STRING) = 'TC') AS is_toowoomba,
      (SAFE_CAST(gl_publication_code AS STRING) = '475' OR SAFE_CAST(gl_publication_code AS STRING) = '490' OR SAFE_CAST(masthead_code AS STRING) = 'TB') AS is_townsville,
      (SAFE_CAST(gl_publication_code AS STRING) = '305' OR SAFE_CAST(gl_publication_code AS STRING) = '307' OR SAFE_CAST(masthead_code AS STRING) = 'WT') AS is_weekly_times,
      (SAFE_CAST(gl_publication_code AS STRING) = '9001' OR SAFE_CAST(masthead_code AS STRING) = 'CS') AS is_code,
      (SAFE_CAST(gl_publication_code AS STRING) = '8821' OR SAFE_CAST(gl_publication_code AS STRING) = '8822' OR SAFE_CAST(masthead_code AS STRING) = 'PU') AS is_punters,
      (SAFE_CAST(gl_publication_code AS STRING) = 'Racenet' OR SAFE_CAST(masthead_code AS STRING) = 'RN') AS is_racenet,
      (SAFE_CAST(gl_publication_code AS STRING) = '9653' OR SAFE_CAST(masthead_code AS STRING) = 'SC') AS is_supercoach_plus,
      (SAFE_CAST(gl_publication_code AS STRING) = '9600' OR SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'TS') AS is_taste_online,
      (SAFE_CAST(gl_publication_code AS STRING) = '9003' OR SAFE_CAST(masthead_code AS STRING) = 'AP') AS is_apple_podcast_crime_x,
      (SAFE_CAST(gl_publication_code AS STRING) = '103' OR SAFE_CAST(masthead_code AS STRING) = 'The Oz') AS is_the_oz,
      (SAFE_CAST(gl_publication_code AS STRING) = '9000' OR SAFE_CAST(masthead_code AS STRING) = 'NW') AS is_news_com_au,
      (SAFE_CAST(gl_publication_code AS STRING) = '121') AS is_others_gl_code,
      (SAFE_CAST(gl_publication_code AS STRING) = '9002' OR SAFE_CAST(masthead_code AS STRING) = 'BG') AS is_brain_games,
      (SAFE_CAST(gl_publication_code AS STRING) = '9504' OR SAFE_CAST(gl_publication_code AS STRING) = '9514' OR SAFE_CAST(gl_publication_code AS STRING) = '9556' OR SAFE_CAST(gl_publication_code AS STRING) = '9558' OR SAFE_CAST(gl_publication_code AS STRING) = '9560' OR SAFE_CAST(gl_publication_code AS STRING) = '9603' OR SAFE_CAST(gl_publication_code AS STRING) = '9623') AS is_other_mastheads
    FROM
      base_data
  ),
  derived_masthead_dims AS (
    SELECT
      *,
      CASE
        WHEN SAFE_CAST(delivery_medium_type AS STRING) = 'Print' THEN 'Print Recognition'
        WHEN is_print_recognition_flag_intermediate = 'N' THEN 'Print Recognition'
        ELSE 'Digital Recognition'
      END AS Recognition_Type,
      CASE
        WHEN is_the_australian THEN 'The Australian'
        WHEN is_courier_mail THEN 'Courier Mail'
        WHEN is_daily_telegraph THEN 'Daily Telegraph'
        WHEN is_herald_sun THEN 'Herald Sun'
        WHEN is_the_advertiser THEN 'The Advertiser'
        WHEN is_cairns_post THEN 'Cairns Post'
        WHEN is_geelong THEN 'Geelong'
        WHEN is_gold_coast THEN 'Gold Coast'
        WHEN is_nt_news THEN 'NT News'
        WHEN is_the_mercury THEN 'The Mercury'
        WHEN is_toowoomba THEN 'Toowoomba'
        WHEN is_townsville THEN 'Townsville'
        WHEN is_weekly_times THEN 'Weekly Times'
        WHEN is_code THEN 'Code'
        WHEN is_punters THEN 'Punters'
        WHEN is_racenet THEN 'Racenet'
        WHEN is_supercoach_plus THEN 'Supercoach Plus'
        WHEN is_taste_online THEN 'Taste Online'
        WHEN is_apple_podcast_crime_x THEN 'Apple Podcast: Crime X'
        WHEN is_the_oz THEN 'The Oz'
        WHEN is_news_com_au THEN 'news.com.au'
        WHEN is_others_gl_code THEN 'Others'
        WHEN is_brain_games THEN 'Brain Games'
        WHEN is_other_mastheads THEN 'Others'
        ELSE NULL
      END AS Masthead_Name
    FROM
      derived_flags
  ),
  derived_group_dims AS (
    SELECT
      *,
      CASE
        WHEN Masthead_Name = 'The Australian' THEN 'The Australian'
        WHEN Masthead_Name IN ('Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Courier Mail') THEN 'Metros'
        WHEN Masthead_Name IN ('Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville') THEN 'Regionals'
        WHEN Masthead_Name = 'Weekly Times' THEN 'Others'
        WHEN Masthead_Name IN ('Supercoach Plus', 'Racenet', 'Code', 'Apple Podcast: Crime X', 'Taste Online', 'Punters', 'Others') THEN 'Deep Niche Publications'
        ELSE 'Discontinued'
      END AS Masthead_Group,
      CASE
        WHEN Masthead_Name = 'The Australian' THEN 'The Australian and Prestige'
        WHEN Masthead_Name IN ('Daily Telegraph', 'Herald Sun', 'The Advertiser', 'Courier Mail', 'Cairns Post', 'Geelong', 'Gold Coast', 'NT News', 'The Mercury', 'Toowoomba', 'Townsville', 'Weekly Times', 'Others') THEN 'States & Community'
        WHEN Masthead_Name IN ('Racenet', 'Punters') THEN 'Commercial Content'
        WHEN Masthead_Name IN ('Taste Online', 'Code', 'Apple Podcast: Crime X') THEN 'Free & Lifestyle'
        ELSE 'Discontinued'
      END AS Masthead_Category
    FROM
      derived_masthead_dims
  )
SELECT
  'Recognition Type Filter Check' AS check_name,
  Recognition_Type,
  COUNT(1) AS record_count
FROM
  derived_group_dims
WHERE
  Recognition_Type = 'Digital Recognition'
GROUP BY
  1, 2
UNION ALL
SELECT
  'Masthead Group Filter Check' AS check_name,
  Masthead_Group,
  COUNT(1) AS record_count
FROM
  derived_group_dims
WHERE
  Masthead_Group = 'Discontinued'
GROUP BY
  1, 2
UNION ALL
SELECT
  'Masthead Category Distribution' AS check_name,
  Masthead_Category,
  COUNT(1) AS record_count
FROM
  derived_group_dims
GROUP BY
  1, 2
LIMIT 100;
",30,5dae02f0-dc48-418c-bdf9-5e5d2b1d6e26
"SELECT
    SAFE_CAST(t0.scenario AS STRING) AS scenario,
    COUNT(1) AS count_by_scenario
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
GROUP BY 1
ORDER BY count_by_scenario DESC
LIMIT 1000;",SELECT * FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` LIMIT 10;,"SELECT
    COUNT(1) AS total_rows,
    COUNT(DISTINCT SAFE_CAST(t0.scenario AS STRING)) AS distinct_scenarios,
    SUM(CASE WHEN SAFE_CAST(t0.scenario AS STRING) = '' THEN 1 ELSE 0 END) AS count_of_blank_scenarios
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
LIMIT 1;","SELECT
    SAFE_CAST(t0.scenario AS STRING) AS scenario,
    COUNT(1) AS count_of_records,
    ROUND(COUNT(1) * 100.0 / (SELECT COUNT(1) FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions`), 2) AS percentage_of_total
FROM `ncau-data-newsquery-prd.asl_finance_derived.digital_subscriptions` AS t0
GROUP BY 1
ORDER BY count_of_records DESC
LIMIT 100;",31,52dd1ac1-19b5-4695-a7e6-632ef7a9dba3
"SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.financial_week,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week_int,
    -- Boolean flags indicating if a row satisfies specific filter conditions used in the dashboard
    (t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY') AS satisfies_sundry_adsales_overlay_filter,
    (t0.financial_year = '2025') AS satisfies_fy2025_filter,
    (t0.financial_year IN ('2025', '2024')) AS satisfies_fy2024_or_fy2025_filter,
    (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(t0.financial_week AS INT64) IS NULL) AS satisfies_exclude_q4_weeks_filter
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 1000;","SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.financial_week,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week_int
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 10;","SELECT
    t0.financial_year,
    t0.revenue_group_subtype,
    t0.financial_week,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week_int,
    (t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY') AS satisfies_sundry_adsales_overlay_filter,
    (t0.financial_year = '2025') AS satisfies_fy2025_filter,
    (t0.financial_year IN ('2025', '2024')) AS satisfies_fy2024_or_fy2025_filter,
    (SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(t0.financial_week AS INT64) IS NULL) AS satisfies_exclude_q4_weeks_filter
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
LIMIT 1;","SELECT
    COUNT(1) AS total_rows,
    COUNT(DISTINCT t0.financial_year) AS distinct_financial_years,
    COUNT(DISTINCT t0.revenue_group_subtype) AS distinct_revenue_group_subtypes,
    COUNT(DISTINCT t0.financial_week) AS distinct_financial_weeks,
    -- Validation of specific filter conditions
    COUNTIF(t0.revenue_group_subtype = 'SUNDRY ADSALES OVERLAY') AS count_sundry_adsales_overlay_rows,
    COUNTIF(t0.financial_year = '2025') AS count_fy2025_rows,
    COUNTIF(t0.financial_year IN ('2025', '2024')) AS count_fy2024_or_fy2025_rows,
    COUNTIF(SAFE_CAST(t0.financial_week AS INT64) NOT IN (47, 48, 49, 50, 51, 52) OR SAFE_CAST(t0.financial_week AS INT64) IS NULL) AS count_not_q4_financial_week_rows,
    COUNTIF(SAFE_CAST(t0.financial_week AS INT64) IN (47, 48, 49, 50, 51, 52)) AS count_q4_financial_week_rows,
    COUNTIF(t0.financial_week IS NULL) AS count_null_financial_week_rows
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0;",32,3ee20092-1897-49b7-8bcd-4157d5f816eb
"WITH
  SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  BaseData AS (
    SELECT
      unified_publication_name,
      unified_publication_gl_code,
      fy_year_month_number,
      financial_year,
      financial_quarter,
      financial_month,
      financial_short_month,
      financial_week,
      revenue_transaction_status,
      is_print_digital_flag,
      current_financial_month,
      current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM `current_date`()) AS DOW_Today,
      sales_segment_l_1_name,
      sales_segment_l_2_name,
      sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      advertiser_group,
      advertiser_parent,
      SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
      sales_segment_gm_name,
      CASE
        WHEN upper(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW',
          'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
        ELSE sales_segment_gm_name_sync
      END AS sales_segment_gm_name_sync,
      revenue_group_level_1_name,
      revenue_group_level_2_name,
      SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
      SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
      SUM(IFNULL(pipeline, 0)) AS pipeline,
      SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
      UPPER(revenue_type) AS revenue_type,
      UPPER(revenue_group_subtype) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      portfolio_group_name_sync,
      portfolio_group_name_current,
      portfolio_parent_group_name_sync,
      nca_industry_pillar,
      publishing_division_group,
      publishing_division_parent,
      is_future_period_flag,
      ly_is_future_period_flag,
      ny_is_future_period_flag,
      cost_model_type,
      CASE
        WHEN source_system_code = 'PLUTO' THEN NULL
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      portfolio_conformed_name_sync,
      publishing_division,
      booking_line_created_week,
      booking_line_created_month,
      booking_line_created_short_month,
      booking_line_created_quarter,
      booking_line_created_year,
      agency_parent,
      agency_group,
      agency_name,
      agency_number,
      calendar_month_name,
      calendar_year,
      classification_name,
      SUM(IFNULL(target, 0)) AS target,
      IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED',
        'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE' AND UPPER(IFNULL(source_publishing_division,
          'XXX')) <> 'MEDIUM RARE CONTENT AGENCY' AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR
      (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
    GROUP BY
      unified_publication_name, unified_publication_gl_code, fy_year_month_number, financial_year, financial_quarter,
      financial_month, financial_short_month, financial_week, revenue_transaction_status, is_print_digital_flag,
      current_financial_month, current_financial_week, fy_year_week_number, style_name, fin_adtype_name, Sales_Group,
      DOW_Today, sales_segment_l_1_name, sales_segment_l_2_name, sales_segment_l_2_name_sync,
      fy_quarter_of_year_name, relative_fy_year_offset, relative_fy_quarter_offset, relative_fy_month_offset,
      relative_fy_week_offset, advertiser_group, advertiser_parent, sales_segment_gm_name, sales_segment_gm_name_sync,
      revenue_group_level_1_name, revenue_group_level_2_name, revenue_type, revenue_group_subtype,
      current_portfolio_group_owner_sync, portfolio_group_name_sync, portfolio_group_name_current,
      portfolio_parent_group_name_sync, nca_industry_pillar, publishing_division_group, publishing_division_parent,
      is_future_period_flag, ly_is_future_period_flag, ny_is_future_period_flag, cost_model_type, booking_line_created_date,
      advertiser_name, current_portfolio_conformed_owner_sync, portfolio_conformed_name_sync, publishing_division,
      booking_line_created_week, booking_line_created_month, booking_line_created_short_month, booking_line_created_quarter,
      booking_line_created_year, agency_parent, agency_group, agency_name, agency_number, calendar_month_name,
      calendar_year, classification_name, GSD
  ),
  BaseDataWithCalculatedFields AS (
    SELECT
      *,
      MIN(
        CASE
          WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE)
        END) OVER (PARTITION BY financial_year) AS fix_date_lod_calculated,
      CASE WHEN fin_adtype_name = 'XTEND' THEN 'XTEND' ELSE revenue_type END AS ad_type_revenue_type_dim,
      CASE WHEN '1' = '1' THEN advertiser_parent WHEN '1' = '2' THEN advertiser_group WHEN '1' = '3' THEN advertiser_name ELSE NULL END AS advertiser_grouping_dim,
      DATETIME_ADD(SAFE_CAST(DATE('2025-01-02', 'UTC') AS DATETIME), INTERVAL -365 DAY) AS hardcoded_date_threshold
    FROM
      BaseData
  )
SELECT
  t.Sales_Group AS sales_group_dim,
  t.ad_type_revenue_type_dim,
  t.advertiser_grouping_dim,
  t.relative_fy_year_offset AS relative_fy_year_offset_dim,
  t.financial_year,
  t.financial_quarter,
  t.financial_month,
  t.financial_week,
  t.fix_date_lod_calculated,
  SUM(t.gross_revenue_amount) AS gross_revenue_amount_base,
  SUM(CASE WHEN t.relative_fy_year_offset = -1 THEN t.gross_revenue_amount ELSE 0 END) AS prev_yr_gross_revenue,
  SUM(CASE WHEN t.relative_fy_year_offset = 0 THEN t.gross_revenue_amount ELSE 0 END) AS curr_yr_gross_revenue,
  SUM(SAFE_DIVIDE(CASE WHEN t.relative_fy_year_offset = -1 THEN t.gross_revenue_amount ELSE 0 END, 1000)) AS prev_yr_gross_revenue_k,
  SUM(SAFE_DIVIDE(CASE WHEN t.relative_fy_year_offset = 0 THEN t.gross_revenue_amount ELSE 0 END, 1000)) AS curr_yr_gross_revenue_k,
  SUM(
    CASE
      WHEN (
        t.relative_fy_year_offset = -1
        AND t.revenue_type = 'DIGITAL'
        AND t.revenue_group_subtype = 'DIGITAL'
        AND t.sales_segment_l_2_name_sync = 'Digital Other'
        AND t.advertiser_parent != 'DOUBLECLICK'
        AND SAFE_CAST(COALESCE(t.fix_date_lod_calculated, PARSE_DATE('%Y-%m-%d', t.booking_line_created_date)) AS DATETIME) <= t.hardcoded_date_threshold
      ) THEN t.gross_revenue_amount
      ELSE 0
    END
  ) AS digital_revenue_prev_yr_specific_conditions,
  SUM(
    SAFE_DIVIDE(
      CASE
        WHEN (
          t.relative_fy_year_offset = -1
          AND t.revenue_type = 'DIGITAL'
          AND t.revenue_group_subtype = 'DIGITAL'
          AND t.sales_segment_l_2_name_sync = 'Digital Other'
          AND t.advertiser_parent != 'DOUBLECLICK'
          AND SAFE_CAST(COALESCE(t.fix_date_lod_calculated, PARSE_DATE('%Y-%m-%d', t.booking_line_created_date)) AS DATETIME) <= t.hardcoded_date_threshold
        ) THEN t.gross_revenue_amount
        ELSE 0
      END, 1000
    )
  ) AS digital_revenue_prev_yr_specific_conditions_k
FROM
  BaseDataWithCalculatedFields AS t
WHERE
  t.Sales_Group = 'Client'
  AND t.financial_year = EXTRACT(YEAR FROM CURRENT_DATE()) -- Example filter for current year
GROUP BY
  t.Sales_Group,
  t.ad_type_revenue_type_dim,
  t.advertiser_grouping_dim,
  t.relative_fy_year_offset,
  t.financial_year,
  t.financial_quarter,
  t.financial_month,
  t.financial_week,
  t.fix_date_lod_calculated
ORDER BY
  t.financial_year DESC, t.financial_week DESC
LIMIT 1000;","SELECT
  column_name, data_type
FROM
  `ncau-data-newsquery-prd.asl_advertising.INFORMATION_SCHEMA.COLUMNS`
WHERE
  table_name = 'v_adsales_revenue_client_weekly'
LIMIT 100;","WITH
  SFCE_USER AS (
    SELECT
      TEMP1.network_user_name AS login_name,
      TEMP1.user_name AS full_name
    FROM
      (
        SELECT
          UPPER(network_user_name) AS network_user_name,
          UPPER(user_name) AS user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  BaseData AS (
    SELECT
      financial_year,
      relative_fy_year_offset,
      advertiser_parent,
      gross_revenue_amount,
      revenue_type,
      revenue_group_subtype,
      sales_segment_l_2_name_sync,
      CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Sales_Group,
      CASE WHEN source_system_code = 'PLUTO' THEN NULL ELSE booking_line_created_date END AS booking_line_created_date
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1) AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED',
        'BOOKED') AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
    LIMIT 100
  ),
  BaseDataWithCalculatedFields AS (
    SELECT
      *,
      MIN(
        CASE
          WHEN advertiser_parent = ""DOUBLECLICK"" THEN CAST(booking_line_created_date AS DATE)
        END) OVER (PARTITION BY financial_year) AS fix_date_lod_calculated,
      DATETIME_ADD(SAFE_CAST(DATE('2025-01-02', 'UTC') AS DATETIME), INTERVAL -365 DAY) AS hardcoded_date_threshold
    FROM
      BaseData
  )
SELECT
  SUM(CASE WHEN t.relative_fy_year_offset = -1 THEN t.gross_revenue_amount ELSE 0 END) AS prev_yr_gross_revenue,
  SUM(
    CASE
      WHEN (
        t.relative_fy_year_offset = -1
        AND t.revenue_type = 'DIGITAL'
        AND t.revenue_group_subtype = 'DIGITAL'
        AND t.sales_segment_l_2_name_sync = 'Digital Other'
        AND t.advertiser_parent != 'DOUBLECLICK'
        AND SAFE_CAST(COALESCE(t.fix_date_lod_calculated, PARSE_DATE('%Y-%m-%d', t.booking_line_created_date)) AS DATETIME) <= t.hardcoded_date_threshold
      ) THEN t.gross_revenue_amount
      ELSE 0
    END
  ) AS digital_revenue_prev_yr_specific_conditions
FROM
  BaseDataWithCalculatedFields AS t
WHERE
  t.Sales_Group = 'Client'
LIMIT 1;","SELECT
  revenue_transaction_status,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10;

SELECT
  style_name,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10;

SELECT
  source_publishing_division,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10;

SELECT
  publication_name,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
GROUP BY
  1
ORDER BY
  2 DESC
LIMIT 10;

SELECT
  sales_segment_l_2_name_sync,
  CASE WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA' ELSE 'Client' END AS Derived_Sales_Group,
  COUNT(1) AS record_count
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
GROUP BY
  1, 2
ORDER BY
  3 DESC
LIMIT 10;",33,1a5f7b4e-ea3a-46e4-8b77-b428f4178510
"SELECT
    SAFE_CAST(t0.sales_segment_l_2_name_sync AS STRING) AS sales_segment_l_2_name_sync,
    SAFE_CAST(t0.booking_number AS STRING) AS booking_number,
    SAFE_CAST(t0.adsize_name AS STRING) AS adsize_name,
    SAFE_CAST(t0.fin_adtype_name AS STRING) AS fin_adtype_name,
    SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
    SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Booked', 'Billed')
    AND (SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026')
    AND SAFE_CAST(t0.fin_adtype_name AS STRING) IN (
        'Audio (Targeted)', 'Audio (Non-Targeted)',
        'Events (Non-Targeted)', 'Events (Targeted)',
        'Rich Media (Non-Targeted)', 'Rich Media (Targeted)',
        'Social Display (Targeted)', 'Social Display (Non-Targeted)',
        'Standard Display (Targeted)', 'Standard Display (Non-Targeted)',
        'TTIV (Targeted)', 'TTIV (Non-Targeted)',
        'Content Discovery (Non-Targeted)', 'Content Discovery (Targeted)',
        'Native (Non-Targeted)', 'Native (Targeted)'
    )
GROUP BY
    1, 2, 3, 4, 5, 6, 7
LIMIT 1000;",SELECT * FROM `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` LIMIT 10;,"SELECT
    SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
    SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    COUNT(DISTINCT SAFE_CAST(t0.fin_adtype_name AS STRING)) AS distinct_fin_adtype_name_count,
    COUNT(*) AS total_records
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.revenue_transaction_status AS STRING) IN ('Booked', 'Billed')
    AND (SAFE_CAST(t0.source_publishing_division AS STRING) != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026')
GROUP BY
    1, 2, 3
ORDER BY
    financial_year, revenue_transaction_status, source_publishing_division
LIMIT 100;","SELECT
    SAFE_CAST(t0.source_publishing_division AS STRING) AS source_publishing_division,
    SAFE_CAST(t0.revenue_transaction_status AS STRING) AS revenue_transaction_status,
    SAFE_CAST(t0.financial_year AS STRING) AS financial_year,
    COUNT(*) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    SAFE_CAST(t0.financial_year AS STRING) IN ('2025', '2026') -- Limiting scope for faster check
GROUP BY
    1, 2, 3
ORDER BY
    financial_year, revenue_transaction_status, source_publishing_division
LIMIT 1000;",34,f65a9149-93b4-4aa9-aef6-d12002853222
"WITH
  base_data AS (
    SELECT
      t.Major_Category,
      t.Media_Network,
      t.Spend,
      t.date,
      t.financial_year,
      t.portfolio_parent_group_name,
      t.Advertiser,
      t.Category,
      t.Sub_Category,
      FORMAT_DATETIME('%b', SAFE_CAST(t.date AS DATETIME)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', SAFE_CAST(t.date AS DATETIME)) AS INT) AS calendar_year,
      MAX(t.date) OVER () AS latest_date, -- Calculated once for the entire dataset
      MAX(t.financial_year) OVER () AS max_fin_year -- Calculated once for the entire dataset
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource AS t
    WHERE
      t.source = 'Adex' -- Filter as per original CTEs
  ),
  time_period_enriched AS (
    SELECT
      *,
      CASE
        WHEN DATE_DIFF(SAFE_CAST(latest_date AS DATETIME), SAFE_CAST(date AS DATETIME), MONTH) <= 11 THEN 'ty'
        WHEN DATE_DIFF(SAFE_CAST(latest_date AS DATETIME), SAFE_CAST(date AS DATETIME), MONTH) BETWEEN 12 AND 23 THEN 'ly'
        ELSE NULL
      END AS time_period_indicator, -- Equivalent to ty_ly_embed in original CTEs
      CASE WHEN (Media_Network = 'NEWS CORP') THEN TRUE ELSE FALSE END AS is_news_corp_network,
      CASE WHEN (Spend IS NULL) THEN 0 ELSE Spend END AS spend_raw_value,
      SAFE_DIVIDE(CASE WHEN (Spend IS NULL) THEN 0 ELSE Spend END, 1000) AS spend_k_value,
      EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) AS month_number,
      ((SAFE_CAST(calendar_year AS FLOAT64)*100)+EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME))) AS year_month_numeric,
      CASE
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 1 AND 3 THEN 'Q1'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 4 AND 6 THEN 'Q2'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 7 AND 9 THEN 'Q3'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 10 AND 12 THEN 'Q4'
        ELSE NULL
      END AS calendar_quarter_name
    FROM
      base_data
  )
SELECT
  Major_Category,
  Media_Network,
  calendar_year,
  portfolio_parent_group_name,
  Advertiser,
  Category,
  Sub_Category,
  month_number,
  year_month_numeric,
  calendar_quarter_name,
  SUM(CASE WHEN time_period_indicator = 'ty' THEN spend_k_value ELSE 0 END) AS Spend_TY_k,
  SUM(CASE WHEN time_period_indicator = 'ly' THEN spend_k_value ELSE 0 END) AS Spend_LY_k,
  SUM(CASE WHEN time_period_indicator = 'ty' AND is_news_corp_network THEN spend_k_value ELSE 0 END) AS NewsCorp_Spend_TY_k,
  SUM(CASE WHEN time_period_indicator = 'ly' AND is_news_corp_network THEN spend_k_value ELSE 0 END) AS NewsCorp_Spend_LY_k,
  COUNT(DISTINCT Media_Network) OVER() AS Fixed_Publisher_Count -- This is a constant across the entire dataset, as seen in Q2
FROM
  time_period_enriched
WHERE
  -- Replicate filters from Q1
  portfolio_parent_group_name IN ('KEY ACCOUNTS TRAVEL')
  AND calendar_quarter_name IN ('Q2') -- Based on the hardcoded 'Rolling 12 months' logic in Q1 for clmn56_
  -- Replicate filters from Q3
  AND Advertiser IN ('NT Dept Of Trade Business & Innovation', 'NT Dept Of Chief Minister', 'NT Dept Of Infrastructure Planning & Logistics', 'NT Dept Of Industry Tourism & Trade', 'NT Dept Of Education Employment & Training', 'NT Dept Of Tourism & Culture', 'NT Dept Of Transport', 'NT Dept Of Attorney-General & Justice', 'NT Dept Of Environment & Natural Resources', 'NT Dept Of Lands Planning & The Environment', 'NT Dept Of Health', 'NT Dept Of Police Fire & Emergency Services', 'NT Dept Of Business', 'NT Dept Of Territory Families, Housing & Communities', 'NT Dept Of Primary Industry & Resources', 'NT Dept Of Environment Parks & Water Security', 'NT Dept Of Corporate & Information Services')
GROUP BY
  Major_Category,
  Media_Network,
  calendar_year,
  portfolio_parent_group_name,
  Advertiser,
  Category,
  Sub_Category,
  month_number,
  year_month_numeric,
  calendar_quarter_name
LIMIT 1000;
","SELECT
  t.Major_Category,
  t.Media_Network,
  t.Spend,
  t.date,
  t.financial_year,
  t.portfolio_parent_group_name,
  t.Advertiser,
  t.Category,
  t.Sub_Category,
  FORMAT_DATETIME('%b', SAFE_CAST(t.date AS DATETIME)) AS calendar_month_short_name,
  CAST(FORMAT_DATETIME('%Y', SAFE_CAST(t.date AS DATETIME)) AS INT) AS calendar_year,
  MAX(t.date) OVER () AS latest_date,
  MAX(t.financial_year) OVER () AS max_fin_year
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource AS t
WHERE
  t.source = 'Adex'
LIMIT 100;","WITH
  base_data AS (
    SELECT
      t.Major_Category,
      t.Media_Network,
      t.Spend,
      t.date,
      t.financial_year,
      t.portfolio_parent_group_name,
      t.Advertiser,
      t.Category,
      t.Sub_Category,
      FORMAT_DATETIME('%b', SAFE_CAST(t.date AS DATETIME)) AS calendar_month_short_name,
      CAST(FORMAT_DATETIME('%Y', SAFE_CAST(t.date AS DATETIME)) AS INT) AS calendar_year,
      MAX(t.date) OVER () AS latest_date,
      MAX(t.financial_year) OVER () AS max_fin_year
    FROM
      `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource AS t
    WHERE
      t.source = 'Adex'
  ),
  time_period_enriched AS (
    SELECT
      *,
      CASE
        WHEN DATE_DIFF(SAFE_CAST(latest_date AS DATETIME), SAFE_CAST(date AS DATETIME), MONTH) <= 11 THEN 'ty'
        WHEN DATE_DIFF(SAFE_CAST(latest_date AS DATETIME), SAFE_CAST(date AS DATETIME), MONTH) BETWEEN 12 AND 23 THEN 'ly'
        ELSE NULL
      END AS time_period_indicator,
      CASE WHEN (Media_Network = 'NEWS CORP') THEN TRUE ELSE FALSE END AS is_news_corp_network,
      CASE WHEN (Spend IS NULL) THEN 0 ELSE Spend END AS spend_raw_value,
      SAFE_DIVIDE(CASE WHEN (Spend IS NULL) THEN 0 ELSE Spend END, 1000) AS spend_k_value,
      EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) AS month_number,
      ((SAFE_CAST(calendar_year AS FLOAT64)*100)+EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME))) AS year_month_numeric,
      CASE
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 1 AND 3 THEN 'Q1'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 4 AND 6 THEN 'Q2'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 7 AND 9 THEN 'Q3'
        WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 10 AND 12 THEN 'Q4'
        ELSE NULL
      END AS calendar_quarter_name
    FROM
      base_data
  )
SELECT
  SUM(CASE WHEN time_period_indicator = 'ty' THEN spend_k_value ELSE 0 END) AS Spend_TY_k_Validation,
  SUM(CASE WHEN time_period_indicator = 'ly' THEN spend_k_value ELSE 0 END) AS Spend_LY_k_Validation,
  SUM(CASE WHEN time_period_indicator = 'ty' AND is_news_corp_network THEN spend_k_value ELSE 0 END) AS NewsCorp_Spend_TY_k_Validation,
  SUM(CASE WHEN time_period_indicator = 'ly' AND is_news_corp_network THEN spend_k_value ELSE 0 END) AS NewsCorp_Spend_LY_k_Validation,
  COUNT(DISTINCT Media_Network) AS Fixed_Publisher_Count_Validation
FROM
  time_period_enriched
WHERE
  portfolio_parent_group_name IN ('KEY ACCOUNTS TRAVEL')
  AND calendar_quarter_name IN ('Q2')
  AND Advertiser IN ('NT Dept Of Trade Business & Innovation', 'NT Dept Of Chief Minister', 'NT Dept Of Infrastructure Planning & Logistics', 'NT Dept Of Industry Tourism & Trade', 'NT Dept Of Education Employment & Training', 'NT Dept Of Tourism & Culture', 'NT Dept Of Transport', 'NT Dept Of Attorney-General & Justice', 'NT Dept Of Environment & Natural Resources', 'NT Dept Of Lands Planning & The Environment', 'NT Dept Of Health', 'NT Dept Of Police Fire & Emergency Services', 'NT Dept Of Business', 'NT Dept Of Territory Families, Housing & Communities', 'NT Dept Of Primary Industry & Resources', 'NT Dept Of Environment Parks & Water Security', 'NT Dept Of Corporate & Information Services');","SELECT
  'Time Period Logic' AS rule_name,
  COUNTIF(DATE_DIFF(SAFE_CAST(latest_date AS DATETIME), SAFE_CAST(date AS DATETIME), MONTH) <= 11) AS count_ty_rolling_12_months,
  COUNTIF(DATE_DIFF(SAFE_CAST(latest_date AS DATETIME), SAFE_CAST(date AS DATETIME), MONTH) BETWEEN 12 AND 23) AS count_ly_rolling_12_months
FROM (
  SELECT
    t.date,
    MAX(t.date) OVER () AS latest_date
  FROM
    `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource AS t
  WHERE
    t.source = 'Adex'
) AS subquery
UNION ALL
SELECT
  'Hardcoded Filter: Portfolio Parent Group Name' AS rule_name,
  COUNT(DISTINCT portfolio_parent_group_name) AS distinct_values_in_filter,
  COUNTIF(portfolio_parent_group_name = 'KEY ACCOUNTS TRAVEL') AS count_key_accounts_travel
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  source = 'Adex'
UNION ALL
SELECT
  'Hardcoded Filter: Calendar Quarter Name (Q2)' AS rule_name,
  COUNT(DISTINCT CASE WHEN EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 4 AND 6 THEN 'Q2' ELSE NULL END) AS distinct_q2_values,
  COUNTIF(EXTRACT(MONTH FROM SAFE_CAST(date AS DATETIME)) BETWEEN 4 AND 6) AS count_q2_records
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  source = 'Adex'
UNION ALL
SELECT
  'Hardcoded Filter: Advertiser List' AS rule_name,
  COUNT(DISTINCT Advertiser) AS distinct_advertisers_in_filter,
  COUNTIF(Advertiser IN ('NT Dept Of Trade Business & Innovation', 'NT Dept Of Chief Minister', 'NT Dept Of Infrastructure Planning & Logistics', 'NT Dept Of Industry Tourism & Trade', 'NT Dept Of Education Employment & Training', 'NT Dept Of Tourism & Culture', 'NT Dept Of Transport', 'NT Dept Of Attorney-General & Justice', 'NT Dept Of Environment & Natural Resources', 'NT Dept Of Lands Planning & The Environment', 'NT Dept Of Health', 'NT Dept Of Police Fire & Emergency Services', 'NT Dept Of Business', 'NT Dept Of Territory Families, Housing & Communities', 'NT Dept Of Primary Industry & Resources', 'NT Dept Of Environment Parks & Water Security', 'NT Dept Of Corporate & Information Services')) AS count_filtered_advertisers
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  source = 'Adex'
UNION ALL
SELECT
  'Currency Conversion Logic' AS rule_name,
  COUNTIF(Spend IS NULL) AS count_null_spend,
  COUNTIF(SAFE_DIVIDE(Spend, 1000) IS NULL AND Spend IS NOT NULL) AS count_divide_by_zero_spend
FROM
  `ncau-data-newsquery-prd`.sbx_dcp.adex_datasource
WHERE
  source = 'Adex';
",35,601ed0d2-e944-4189-8170-d593c8e72026
"SELECT
  SAFE_CAST(DATETIME_TRUNC(t0.movement_datetime, SECOND) AS DATE) AS movement_date,
  SUBSTR(t0.sold_in_source_code, 1, 2) AS source_masthead,
  COUNT(DISTINCT t0.subscription_id_src) AS total_distinct_subscriptions,
  COUNT(DISTINCT t0.subscriber_id_src) AS total_distinct_subscribers,
  COUNT(DISTINCT CASE
    WHEN t0.sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12') THEN t0.subscription_id_src
  END) AS subscriptions_filtered_by_rate_plan,
  COUNT(DISTINCT CASE
    WHEN t0.subscriber_id_src = 2452260 THEN t0.subscription_id_src
  END) AS subscriptions_for_specific_subscriber,
  COUNT(DISTINCT CASE
    WHEN SUBSTR(t0.sold_in_source_code, 1, 2) IN ('CS') THEN t0.subscription_id_src
  END) AS subscriptions_filtered_by_cs_source_masthead
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement` AS t0
WHERE
  t0.masthead = 'SC'
  AND t0.subscription_movement_count_type = 'acquisition'
  AND t0.movement_datetime >= DATE '2024-07-01'
  AND t0.movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
GROUP BY
  1,
  2
ORDER BY
  movement_date DESC
LIMIT 1000;","SELECT
  movement_datetime,
  subscription_id_src,
  subscriber_id_src,
  subscription_movement_count_type,
  masthead,
  is_paying_flag,
  sold_in_source_code,
  sold_in_rate_plan_code
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
LIMIT 10;","SELECT
  COUNT(DISTINCT subscription_id_src) AS total_subscriptions_check,
  COUNT(DISTINCT subscriber_id_src) AS total_subscribers_check
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  masthead = 'SC'
  AND subscription_movement_count_type = 'acquisition'
  AND movement_datetime >= DATE '2024-07-01'
  AND movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
LIMIT 1;","SELECT
  COUNT(1) AS total_rows,
  COUNT(CASE WHEN masthead = 'SC' THEN 1 END) AS sc_masthead_rows,
  COUNT(CASE WHEN subscription_movement_count_type = 'acquisition' THEN 1 END) AS acquisition_rows,
  COUNT(CASE WHEN sold_in_rate_plan_code IN ('SC_SDO_AP24AM12', 'SC_SDO_AP20AM12') THEN 1 END) AS specific_rate_plan_rows,
  COUNT(CASE WHEN subscriber_id_src = 2452260 THEN 1 END) AS specific_subscriber_rows,
  COUNT(CASE WHEN SUBSTR(sold_in_source_code, 1, 2) IN ('CS') THEN 1 END) AS cs_source_masthead_rows
FROM
  `ncau-data-newsquery-prd.prstn_consumer_views.v_subscription_movement`
WHERE
  movement_datetime >= DATE '2024-07-01'
  AND movement_datetime < DATETIME_ADD(DATE '2024-08-19', INTERVAL 1 DAY)
LIMIT 1;",36,6e8b534b-485a-48dd-842d-13dc6bebb01a
"SELECT
    t0.fy_year_week_number,
    SUM(t0.amount) AS total_amount,
    SUM(t0.volume) AS total_volume,
    SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.amount ELSE 0 END) AS amount_revenue_type_03,
    SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.volume ELSE 0 END) AS volume_revenue_type_03
FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
WHERE
    -- Filter for a recent fiscal year-week number, adjust as needed for actual data format (e.g., 'YYYYWW')
    SAFE_CAST(t0.fy_year_week_number AS STRING) >= FORMAT_DATE('%Y%W', DATE_SUB(CURRENT_DATE(), INTERVAL 1 YEAR))
GROUP BY
    t0.fy_year_week_number
ORDER BY
    t0.fy_year_week_number DESC
LIMIT 1000;","SELECT
    t0.amount,
    t0.fy_year_week_number,
    t0.revenue_type,
    t0.volume
FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
LIMIT 10;","SELECT
    1 AS validation_check
FROM
    (
        SELECT
            SUM(CASE WHEN SAFE.LEFT(t0.revenue_type, 2) = '03' THEN t0.amount ELSE 0 END) AS amount_revenue_type_03_validation
        FROM
            `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
        LIMIT 1
    )
UNION ALL
SELECT
    1 AS validation_check
FROM
    (
        SELECT
            MIN(DATETIME_TRUNC(snap_load_time, SECOND)) AS latest_data_load_time_validation
        FROM
            (
                SELECT
                    DATETIME(MAX(dw_prstn_load_timestamp), 'Australia/Sydney') AS snap_load_time
                FROM
                    `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
                WHERE
                    1 = 1
                    AND source_system_name = 'Circulation'
                    AND scenario = 'Estimate'
                    AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
                UNION ALL
                SELECT
                    DATETIME(MAX(dw_bdm_load_timestamp), 'Australia/Sydney') AS snap_load_time
                FROM
                    `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`
            ) AS load_time_union
        LIMIT 1
    );","SELECT
    'revenue_type_prefix_distribution' AS rule_check,
    SAFE.LEFT(t0.revenue_type, 2) AS key_value,
    COUNT(*) AS count_value,
    SUM(t0.amount) AS sum_amount,
    SUM(t0.volume) AS sum_volume,
    NULL AS max_timestamp_value
FROM
    `ncau-data-newsquery-prd.asl_finance.v_asl_circulation_dq_check` AS t0
GROUP BY
    1, 2
ORDER BY
    count_value DESC
LIMIT 100
UNION ALL
SELECT
    'finance_operating_statement_max_load_time' AS rule_check,
    'Circulation_Estimate_RCTI_THINK_DTI' AS key_value,
    NULL AS count_value,
    NULL AS sum_amount,
    NULL AS sum_volume,
    DATETIME(MAX(dw_prstn_load_timestamp), 'Australia/Sydney') AS max_timestamp_value
FROM
    `ncau-data-newsquery-prd.prstn_finance_persisted.finance_operating_statement`
WHERE
    source_system_name = 'Circulation'
    AND scenario = 'Estimate'
    AND sub_source_system_name IN ('RCTI', 'THINK', 'DTI')
UNION ALL
SELECT
    'v_circulation_snapshot_fct_max_load_time' AS rule_check,
    'All' AS key_value,
    NULL AS count_value,
    NULL AS sum_amount,
    NULL AS sum_volume,
    DATETIME(MAX(dw_bdm_load_timestamp), 'Australia/Sydney') AS max_timestamp_value
FROM
    `ncau-data-newsquery-prd.prstn_finance.v_circulation_snapshot_fct`;",37,f7a9efeb-df3c-45c9-899d-0bcada701572
"-- This query provides a unified dataset by selecting all relevant base columns from 'programmatic_fin_month' and calculating the derived pacing dimensions as separate columns, applying their respective filters.
-- The 'ProductType' dimension comes from a separate table ('programmatic_cal_month') and is not directly joinable in this context without more information.
SELECT
    t0.CurrentMonthFlag,
    t0.FinancialMonthNumber,
    t0.FinancialYear,
    t0.Source,
    t0.StaticDays,
    t0.NumDays,
    (t0.FinancialYear * 100) + t0.FinancialMonthNumber AS financial_period_identifier,
    CASE
        WHEN t0.CurrentMonthFlag = 1 AND t0.Source IN ('Kargo') THEN CONCAT(SAFE_CAST(t0.StaticDays AS STRING), ' (', SAFE_CAST(((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS STRING), ' )')
        ELSE NULL
    END AS kargo_static_days_financial_period,
    CASE
        WHEN t0.CurrentMonthFlag = 1 AND (t0.Source NOT IN ('AdX') OR t0.Source IS NULL) THEN CONCAT(SAFE_CAST(t0.NumDays AS STRING), ' (', SAFE_CAST(((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS STRING), ' )')
        ELSE NULL
    END AS non_adx_num_days_financial_period
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    t0.CurrentMonthFlag = 1 -- Common filter applied across relevant queries
LIMIT 1000;","-- Query to understand the structure of the primary financial month data table.
SELECT * FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` LIMIT 100;

-- Query to understand the structure of the product calendar month data table.
SELECT * FROM `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` LIMIT 100;","-- Validate the calculation of 'Kargo Static Days (Financial Period)'
SELECT
    CONCAT(SAFE_CAST(t0.StaticDays AS STRING), ' (', SAFE_CAST(((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS STRING), ' )') AS test_kargo_static_days_calc
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    t0.CurrentMonthFlag = 1 AND t0.Source IN ('Kargo')
LIMIT 10;

-- Validate the calculation of 'Non-AdX Number of Days (Financial Period)'
SELECT
    CONCAT(SAFE_CAST(t0.NumDays AS STRING), ' (', SAFE_CAST(((t0.FinancialYear * 100) + t0.FinancialMonthNumber) AS STRING), ' )') AS test_non_adx_num_days_calc
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    t0.CurrentMonthFlag = 1 AND (t0.Source NOT IN ('AdX') OR t0.Source IS NULL)
LIMIT 10;

-- Validate the retrieval of 'Product Type'
SELECT
    t0.ProductType AS test_product_type
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
LIMIT 10;","-- Query to validate key business logic and filters applied in the dashboard queries.
SELECT
    t0.CurrentMonthFlag,
    t0.Source,
    t0.FinancialYear,
    t0.FinancialMonthNumber,
    t0.StaticDays,
    t0.NumDays,
    (t0.FinancialYear * 100) + t0.FinancialMonthNumber AS calculated_financial_period_id,
    CASE WHEN t0.CurrentMonthFlag = 1 THEN 'Is Current Month' ELSE 'Not Current Month' END AS current_month_status,
    CASE WHEN t0.Source IN ('Kargo') THEN 'Is Kargo Source' ELSE 'Not Kargo Source' END AS kargo_source_status,
    CASE WHEN (t0.Source NOT IN ('AdX') OR t0.Source IS NULL) THEN 'Is Non-AdX Source' ELSE 'Is AdX Source or Not Null' END AS adx_source_status
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_fin_month` AS t0
WHERE
    t0.CurrentMonthFlag = 1 -- Focus on the data relevant to the dashboard's primary filters
LIMIT 100;",38,a8fe6bb0-3cbf-4d6e-8838-fa6e6dce447f
"WITH Parameters AS (
    SELECT
        2025 AS current_fiscal_year,
        DATE('2025-03-26') AS q1_ref_date,
        DATE('2025-03-25') AS q2_ref_date,
        DATE('2024-07-03') AS week_diff_base_date
),
BaseData AS (
    SELECT
        t0.BudgetEarnedAmount,
        t0.ClosingBase,
        t0.EarnedAmount,
        t0.ForecastBudgetEarnedAmount,
        t0.NFEarnedAmount,
        t0.NYBudgetEarnedAmount,
        t0.OpeningBase,
        t0.finance_recognition,
        t0.fy_month_of_year,
        t0.fy_quarter_of_year,
        t0.fy_week_of_year,
        t0.fy_year,
        t0.masthead_group
    FROM
        `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
    WHERE
        SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued'
        AND SAFE_CAST(t0.finance_recognition AS STRING) = 'Digital Recognition'
),
Q1_DateCalculations AS (
    SELECT
        *,
        (EXTRACT(DAYOFWEEK FROM TIMESTAMP(p.q1_ref_date)) - 1) AS clmn19_q1,
        DATETIME_DIFF(SAFE_CAST(p.q1_ref_date AS DATETIME), SAFE_CAST(p.week_diff_base_date AS DATETIME), WEEK) AS clmn20_q1
    FROM
        BaseData
    CROSS JOIN
        Parameters p
),
Q1_IntermediateCalculations AS (
    SELECT
        *,
        (SAFE_CAST(fy_year AS INT64) = p.current_fiscal_year) AS clmn21_q1_fy_current,
        (p.current_fiscal_year = SAFE_CAST(fy_year AS INT64)) AS clmn22_q1_fy_current_alt,
        (SAFE_CAST(fy_year AS INT64) + 1 = p.current_fiscal_year) AS clmn28_q1_fy_next_is_current,
        (SAFE_CAST(fy_year AS INT64) > (p.current_fiscal_year - 1)) AS clmn24_q1_fy_gt_prev,
        (SAFE_CAST(fy_year AS INT64) <= (p.current_fiscal_year - 1)) AS clmn25_q1_fy_le_prev,
        (SAFE_CAST(fy_year AS INT64) = (p.current_fiscal_year - 1)) AS clmn26_q1_fy_prev_is_current,
        (clmn20_q1 - 1) AS clmn27_q1_week_diff_minus_1,
        CASE WHEN clmn19_q1 <= 2 THEN clmn27_q1_week_diff_minus_1 ELSE clmn20_q1 END AS clmn29_q1_week_offset,
        CASE WHEN (0 = 0) THEN (CASE WHEN clmn19_q1 <= 2 THEN clmn27_q1_week_diff_minus_1 ELSE clmn20_q1 END) ELSE 0 END AS clmn30_q1_week_offset_final
    FROM
        Q1_DateCalculations
    CROSS JOIN
        Parameters p
),
Q1_FinalCalculations AS (
    SELECT
        *,
        (SAFE_CAST(fy_week_of_year AS INT64) = clmn30_q1_week_offset_final) AS clmn31_q1_week_match,
        (clmn21_q1_fy_current AND clmn31_q1_week_match) AS clmn39_q1_fy_current_week_match,
        (clmn26_q1_fy_prev_is_current AND clmn31_q1_week_match) AS clmn38_q1_fy_prev_week_match,
        (clmn21_q1_fy_current AND clmn39_q1_fy_current_week_match) AS clmn52_q1_active_condition,
        (clmn26_q1_fy_prev_is_current AND clmn38_q1_fy_prev_week_match) AS clmn53_q1_active_condition_alt,
        (SAFE_CAST(fy_week_of_year AS INT64) = clmn30_q1_week_offset_final) AS clmn54_q1_week_match_alt,
        (SAFE_CAST(fy_week_of_year AS INT64) = clmn30_q1_week_offset_final) AS clmn55_q1_week_match_alt2,
        (clmn52_q1_active_condition = true) AS clmn56_q1_final_active_condition,
        (clmn53_q1_active_condition_alt = true) AS clmn57_q1_final_active_condition_alt
    FROM
        Q1_IntermediateCalculations
),
Q2_DateCalculations AS (
    SELECT
        *,
        (EXTRACT(DAYOFWEEK FROM TIMESTAMP(p.q2_ref_date)) - 1) AS clmn10_q2,
        DATETIME_DIFF(SAFE_CAST(p.q2_ref_date AS DATETIME), SAFE_CAST(p.week_diff_base_date AS DATETIME), WEEK) AS clmn11_q2
    FROM
        BaseData
    CROSS JOIN
        Parameters p
),
Q2_IntermediateCalculations AS (
    SELECT
        *,
        (SAFE_CAST(fy_year AS INT64) = p.current_fiscal_year) AS clmn12_q2_fy_current,
        (p.current_fiscal_year = SAFE_CAST(fy_year AS INT64)) AS clmn13_q2_fy_current_alt,
        (clmn11_q2 - 1) AS clmn14_q2_week_diff_minus_1,
        CASE WHEN clmn10_q2 <= 2 THEN clmn14_q2_week_diff_minus_1 ELSE clmn11_q2 END AS clmn15_q2_week_offset,
        CASE WHEN (0 = 0) THEN (CASE WHEN clmn10_q2 <= 2 THEN clmn14_q2_week_diff_minus_1 ELSE clmn11_q2 END) ELSE 0 END AS clmn16_q2_week_offset_final
    FROM
        Q2_DateCalculations
    CROSS JOIN
        Parameters p
),
Q2_FinalCalculations AS (
    SELECT
        *,
        (SAFE_CAST(fy_week_of_year AS INT64) = clmn16_q2_week_offset_final) AS clmn17_q2_week_match,
        (SAFE_CAST(fy_week_of_year AS INT64) <= clmn16_q2_week_offset_final) AS clmn18_q2_week_le_match,
        (clmn12_q2_fy_current AND clmn17_q2_week_match) AS clmn21_q2_fy_current_week_match,
        (clmn18_q2_week_le_match AND clmn13_q2_fy_current_alt) AS clmn23_q2_fy_current_week_le_match,
        (clmn12_q2_fy_current AND clmn21_q2_fy_current_week_match) AS clmn33_q2_active_condition,
        (clmn12_q2_fy_current AND clmn17_q2_week_match) AS clmn35_q2_week_match_alt
    FROM
        Q2_IntermediateCalculations
)
SELECT
    b.masthead_group AS dim_masthead_group,
    b.finance_recognition AS dim_finance_recognition,
    b.fy_year AS dim_fiscal_year,
    b.fy_month_of_year AS dim_fiscal_month_of_year,
    b.fy_quarter_of_year AS dim_fiscal_quarter_of_year,
    b.fy_week_of_year AS dim_fiscal_week_of_year,
    'Week to Date & Budget View' AS dim_view_type, -- Hardcoded from Q3 logic

    SUM(b.BudgetEarnedAmount) AS base_budget_earned_amount,
    SUM(b.ClosingBase) AS base_closing_base,
    SUM(b.EarnedAmount) AS base_earned_amount,
    SUM(b.ForecastBudgetEarnedAmount) AS base_forecast_budget_earned_amount,
    SUM(b.NFEarnedAmount) AS base_nf_earned_amount,
    SUM(b.NYBudgetEarnedAmount) AS base_ny_budget_earned_amount,
    SUM(b.OpeningBase) AS base_opening_base,

    -- Q1 Metrics
    SUM(CASE WHEN (TRUE AND q1.clmn56_q1_final_active_condition) THEN b.BudgetEarnedAmount ELSE 0 END) AS metric_total_earned_amount_complex_logic,
    SUM(CASE WHEN (q1.clmn21_q1_fy_current AND q1.clmn31_q1_week_match) THEN b.ClosingBase ELSE 0 END) AS metric_q1_closing_base_current_fy_week,
    SUM(CASE WHEN (q1.clmn21_q1_fy_current AND q1.clmn54_q1_week_match_alt) THEN b.OpeningBase ELSE 0 END) AS metric_q1_opening_base_current_fy_week,
    SUM(CASE WHEN (q1.clmn21_q1_fy_current AND q1.clmn56_q1_final_active_condition) THEN b.EarnedAmount ELSE NULL END) AS metric_q1_earned_amount_current_fy_alt,
    SUM(CASE WHEN (q1.clmn28_q1_fy_next_is_current AND q1.clmn31_q1_week_match) THEN b.ClosingBase ELSE 0 END - CASE WHEN (q1.clmn28_q1_fy_next_is_current AND q1.clmn55_q1_week_match_alt2) THEN b.ClosingBase ELSE 0 END) AS metric_closing_base_difference,

    -- Q2 Metrics
    SUM(CASE WHEN (q2.clmn12_q2_fy_current AND q2.clmn17_q2_week_match) THEN b.EarnedAmount ELSE 0 END) AS metric_q2_earned_amount_current_fy_week,
    SUM(CASE WHEN (q2.clmn12_q2_fy_current AND q2.clmn35_q2_week_match_alt) THEN b.OpeningBase ELSE 0 END) AS metric_q2_opening_base_current_fy_week,
    SUM(CASE WHEN (q2.clmn12_q2_fy_current AND q2.clmn33_q2_active_condition) THEN b.EarnedAmount ELSE NULL END) AS metric_q2_earned_amount_current_fy_alt
FROM
    BaseData b
LEFT JOIN
    Q1_FinalCalculations q1 ON b.fy_year = q1.fy_year AND b.fy_week_of_year = q1.fy_week_of_year AND b.masthead_group = q1.masthead_group AND b.finance_recognition = q1.finance_recognition
LEFT JOIN
    Q2_FinalCalculations q2 ON b.fy_year = q2.fy_year AND b.fy_week_of_year = q2.fy_week_of_year AND b.masthead_group = q2.masthead_group AND b.finance_recognition = q2.finance_recognition
GROUP BY
    1, 2, 3, 4, 5, 6, 7
LIMIT 1000
","SELECT
    t0.BudgetEarnedAmount AS budget_earned_amount,
    t0.ClosingBase AS closing_base,
    t0.EarnedAmount AS earned_amount,
    t0.ForecastBudgetEarnedAmount AS forecast_budget_earned_amount,
    t0.NFEarnedAmount AS nf_earned_amount,
    t0.NYBudgetEarnedAmount AS ny_budget_earned_amount,
    t0.OpeningBase AS opening_base,
    t0.finance_recognition AS finance_recognition,
    t0.fy_month_of_year AS fy_month_of_year,
    t0.fy_quarter_of_year AS fy_quarter_of_year,
    t0.fy_week_of_year AS fy_week_of_year,
    t0.fy_year AS fy_year,
    t0.masthead_group AS masthead_group
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
LIMIT 100;","SELECT
    SUM(SAFE_CAST(t0.BudgetEarnedAmount AS BIGNUMERIC)) AS test_budget_earned_amount,
    SUM(SAFE_CAST(t0.ClosingBase AS BIGNUMERIC)) AS test_closing_base,
    SUM(SAFE_CAST(t0.EarnedAmount AS BIGNUMERIC)) AS test_earned_amount,
    SUM(SAFE_CAST(t0.ForecastBudgetEarnedAmount AS BIGNUMERIC)) AS test_forecast_budget_earned_amount,
    SUM(SAFE_CAST(t0.NFEarnedAmount AS BIGNUMERIC)) AS test_nf_earned_amount,
    SUM(SAFE_CAST(t0.NYBudgetEarnedAmount AS BIGNUMERIC)) AS test_ny_budget_earned_amount,
    SUM(SAFE_CAST(t0.OpeningBase AS BIGNUMERIC)) AS test_opening_base
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    SAFE_CAST(t0.masthead_group AS STRING) != 'Discontinued'
    AND SAFE_CAST(t0.finance_recognition AS STRING) = 'Digital Recognition'
LIMIT 1;","SELECT
    t0.masthead_group,
    t0.finance_recognition,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.sbx_fda_corefin.dt_digital_subscriptions` AS t0
WHERE
    SAFE_CAST(t0.masthead_group AS STRING) = 'Discontinued'
    OR SAFE_CAST(t0.finance_recognition AS STRING) != 'Digital Recognition'
GROUP BY
    1, 2
LIMIT 100;",39,bb49fa78-5abe-4e68-a9c1-8172a832e724
"-- Primary Analysis SQL: Consolidates all metrics and dimensions from the dashboard queries.
-- This query aims to provide a comprehensive view of the underlying data,
-- applying common filters identified across all dashboard components.
-- Hardcoded values are highlighted for potential parameterization.

SELECT
    t0.account_number,
    t0.advertiser_name,
    t0.advertiser_parent,
    t0.financial_year,
    SAFE_CAST(t0.financial_month AS FLOAT64) AS financial_month_float, -- Casted to FLOAT64 in one original query
    t0.invoice_number,
    t0.revenue_group_subtype,
    t0.revenue_transaction_status,
    t0.revenue_type,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.unified_publication_name,
    SUM(t0.gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj_amount,
    SUM(t0.rebate_3_amount) AS total_rebate_3_amount,
    SUM(t0.adjustment_amount) AS total_adjustment_amount,
    SUM(t0.gross_revenue_amount) AS total_gross_revenue_amount
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND t0.financial_year IS NOT NULL
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.revenue_type IN ('Print', 'Digital')
    AND t0.revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital')
    -- Specific filters found in individual dashboard components (consider parameterizing these):
    -- AND t0.rebate_3_amount != 0.000000 -- Filter from Q1, Q2
    -- AND SAFE_CAST(t0.financial_year AS STRING) = '2025' -- Hardcoded year from Q1, Q2
    -- AND SAFE_CAST(t0.financial_month AS FLOAT64) = 10.000000 -- Hardcoded month from Q1
    -- AND SAFE_CAST(t0.account_number AS STRING) = '4039072' -- Hardcoded account from Q3
GROUP BY
    t0.account_number,
    t0.advertiser_name,
    t0.advertiser_parent,
    t0.financial_year,
    financial_month_float,
    t0.invoice_number,
    t0.revenue_group_subtype,
    t0.revenue_transaction_status,
    t0.revenue_type,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.unified_publication_name
LIMIT 1000;","-- Structure SQL: Provides insight into the raw data structure, grain, and key dimensions.
-- Useful for understanding available columns and their types.
SELECT
    t0.account_number,
    t0.adjustment_amount,
    t0.advertiser_name,
    t0.advertiser_parent,
    t0.financial_month,
    t0.financial_year,
    t0.gross_revenue_amount,
    t0.gross_revenue_ex_adj_amount,
    t0.invoice_number,
    t0.rebate_3_amount,
    t0.revenue_group_subtype,
    t0.revenue_transaction_status,
    t0.revenue_type,
    t0.source_publishing_division,
    t0.source_system_code,
    t0.unified_publication_name
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
LIMIT 100;","-- Validation SQL: Quick check to ensure all identified metrics can be calculated syntactically
-- with the common filters applied.
SELECT
    SUM(t0.gross_revenue_ex_adj_amount) AS total_gross_revenue_ex_adj_amount,
    SUM(t0.rebate_3_amount) AS total_rebate_3_amount,
    SUM(t0.adjustment_amount) AS total_adjustment_amount,
    SUM(t0.gross_revenue_amount) AS total_gross_revenue_amount
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND t0.financial_year IS NOT NULL
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.revenue_type IN ('Print', 'Digital')
    AND t0.revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital');","-- Business Rules SQL: Illustrates the impact of key business logic and filters.
-- Shows row counts before and after applying the common WHERE clauses.
SELECT
    'Total Rows' AS description,
    COUNT(1) AS row_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
UNION ALL
SELECT
    'Rows after common filters' AS description,
    COUNT(1) AS row_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.revenue_transaction_status IN ('Booked', 'Billed')
    AND t0.financial_year IS NOT NULL
    AND (t0.source_publishing_division != 'Medium Rare Content Agency' OR t0.source_publishing_division IS NULL)
    AND t0.revenue_type IN ('Print', 'Digital')
    AND t0.revenue_group_subtype IN ('Programmatic Source', 'Print', 'Digital');",40,a17622e2-ad43-49cc-b3c5-1c95036fd14
"SELECT
    t0.financial_year,
    t0.publication_name,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.advertiser_name,
    t0.calendar_month,
    SAFE_CAST(t0.calendar_month AS FLOAT64) AS calendar_month_float,
    t0.calendar_year,
    t0.revenue_group_subtype,
    t0.advertiser_group,
    t0.booking_number,
    t0.revenue_type,
    t0.source_unified_publication_name,
    SUM(SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC)) AS total_gross_revenue_amount
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    AND (
        SAFE_CAST(t0.financial_year AS STRING) IN ('202') -- Filter from Query 1
        OR (
            t0.revenue_group_subtype IN ('Digital', 'Print')
            AND (SAFE_CAST(t0.calendar_year AS STRING) NOT IN ('2022') OR t0.calendar_year IS NULL)
            AND t0.advertiser_name IN ('INTERNAL PUIG Oceania', 'PUIG Oceania')
        ) -- Filters from Query 2
        OR (
            t0.revenue_group_subtype IN ('Digital', 'Print')
            AND SAFE_CAST(t0.calendar_year AS STRING) IN ('2024', '2025')
            AND t0.advertiser_name IN ('Greyhound Racing Victoria')
        ) -- Filters from Query 3
    )
GROUP BY
    t0.financial_year,
    t0.publication_name,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.advertiser_name,
    t0.calendar_month,
    calendar_month_float,
    t0.calendar_year,
    t0.revenue_group_subtype,
    t0.advertiser_group,
    t0.booking_number,
    t0.revenue_type,
    t0.source_unified_publication_name
LIMIT 1000;","SELECT
    t0.financial_year,
    t0.publication_name,
    t0.revenue_transaction_status,
    t0.source_publishing_division,
    t0.advertiser_name,
    t0.calendar_month,
    t0.calendar_year,
    t0.revenue_group_subtype,
    t0.gross_revenue_amount,
    t0.advertiser_group,
    t0.booking_number,
    t0.revenue_type,
    t0.source_unified_publication_name
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
LIMIT 10;","SELECT
    SUM(SAFE_CAST(t0.gross_revenue_amount AS BIGNUMERIC)) AS total_gross_revenue,
    COUNT(DISTINCT t0.publication_name) AS distinct_publications,
    COUNT(DISTINCT t0.advertiser_name) AS distinct_advertisers,
    COUNT(DISTINCT SAFE_CAST(t0.calendar_month AS FLOAT64)) AS distinct_calendar_months_float
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
LIMIT 1;","SELECT
    'Q1_Financial_Year_202_Count' AS rule_name,
    COUNT(1) AS row_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    AND SAFE_CAST(t0.financial_year AS STRING) IN ('202')
UNION ALL
SELECT
    'Q2_PUIG_Advertisers_Count' AS rule_name,
    COUNT(1) AS row_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    AND t0.revenue_group_subtype IN ('Digital', 'Print')
    AND (SAFE_CAST(t0.calendar_year AS STRING) NOT IN ('2022') OR t0.calendar_year IS NULL)
    AND t0.advertiser_name IN ('INTERNAL PUIG Oceania', 'PUIG Oceania')
UNION ALL
SELECT
    'Q3_Greyhound_Advertiser_Count' AS rule_name,
    COUNT(1) AS row_count
FROM
    `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client` AS t0
WHERE
    t0.financial_year IS NOT NULL
    AND t0.source_publishing_division != 'Medium Rare Content Agency'
    AND t0.revenue_transaction_status IN ('Billed', 'Booked')
    AND t0.revenue_group_subtype IN ('Digital', 'Print')
    AND SAFE_CAST(t0.calendar_year AS STRING) IN ('2024', '2025')
    AND t0.advertiser_name IN ('Greyhound Racing Victoria');",41,c560ed20-040d-4c6a-9c3f-ec8bce27d132
"SELECT
    t0.Source AS Source,
    t0.Advertiser AS Advertiser,
    t0.TransactionType AS TransactionType,
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS MonthStartDate,
    SUM(t0.PaidImpressions) AS TotalPaidImpressions,
    SUM(t0.RevenueGross) AS TotalRevenueGross
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
WHERE 1=1
    -- Example of how to add dynamic filters, e.g., for a date range parameter:
    -- AND SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) BETWEEN PARSE_DATE('%Y-%m-%d', '2024-01-01') AND PARSE_DATE('%Y-%m-%d', '2024-12-31')
GROUP BY
    Source, Advertiser, TransactionType, MonthStartDate
LIMIT 1000;","SELECT
    t0.Source,
    t0.Advertiser,
    t0.CalendarMonth,
    t0.CalendarYear,
    t0.PaidImpressions,
    t0.RevenueGross,
    t0.TransactionType
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
LIMIT 10;","SELECT
    SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) AS MonthStartDate,
    SUM(t0.PaidImpressions) AS TotalPaidImpressions,
    SUM(t0.RevenueGross) AS TotalRevenueGross
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0
GROUP BY
    MonthStartDate
LIMIT 10;","SELECT
    COUNT(1) AS total_rows,
    COUNTIF(t0.TransactionType = 'Guaranteed') AS guaranteed_transaction_count,
    COUNTIF(t0.Advertiser = 'Chemist Warehouse *') AS chemist_warehouse_advertiser_count,
    COUNTIF(SAFE_CAST(DATETIME_TRUNC(SAFE_CAST(DATE(t0.CalendarYear, t0.CalendarMonth, 1) AS DATETIME), MONTH) AS DATE) = DATE '2025-06-01') AS june_2025_data_count
FROM
    `ncau-data-newsquery-prd.prstn_advertising.programmatic_cal_month` AS t0;",42,87651b69-c43e-471f-9c4b-98df120a844
"WITH base_ia_data AS (
  SELECT
    t0.agency_parent,
    t0.booking_line_created_date,
    t0.gross_revenue_amount,
    t0.relative_cal_month_offset,
    t0.relative_cal_year_offset,
    t0.relative_fy_month_offset,
    t0.relative_fy_year_offset,
    t0.revenue_group_subtype,
    SAFE_CAST(t0.financial_month AS INT64) AS financial_month, -- From Query 2
    SAFE_CAST(t0.financial_quarter AS INT64) AS financial_quarter -- From Query 2
  FROM
    `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
  WHERE
    (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL)
),
calculated_ia_metrics AS (
  SELECT
    agency_parent,
    booking_line_created_date,
    gross_revenue_amount,
    relative_cal_month_offset,
    relative_cal_year_offset,
    relative_fy_month_offset,
    relative_fy_year_offset,
    revenue_group_subtype,
    financial_month,
    financial_quarter,
    -- Derived Metrics/Dimensions
    CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END AS current_fy_gross_revenue_raw,
    CASE WHEN relative_fy_year_offset = -1 THEN gross_revenue_amount ELSE 0 END AS previous_fy_gross_revenue_raw,
    (SAFE_CAST(booking_line_created_date AS DATETIME) <= DATETIME_ADD(CURRENT_DATE('Australia/Sydney'), INTERVAL -365 DAY)) AS year_ago_date_comparison_flag,
    CASE WHEN financial_month > 6 THEN (financial_month - 6) ELSE (financial_month + 6) END AS fiscal_month_adjusted
  FROM
    base_ia_data
)
SELECT
  agency_parent,
  booking_line_created_date,
  revenue_group_subtype,
  relative_fy_year_offset,
  relative_fy_month_offset,
  financial_month,
  financial_quarter,
  fiscal_month_adjusted,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(current_fy_gross_revenue_raw) AS current_fy_gross_revenue,
  SUM(previous_fy_gross_revenue_raw) AS previous_fy_gross_revenue,
  SUM(
    CASE
      WHEN relative_fy_month_offset < -12 THEN previous_fy_gross_revenue_raw
      ELSE CASE WHEN (relative_fy_year_offset = -1 AND year_ago_date_comparison_flag) THEN gross_revenue_amount ELSE 0 END
    END
  ) AS complex_conditional_revenue
FROM
  calculated_ia_metrics
GROUP BY
  agency_parent,
  booking_line_created_date,
  revenue_group_subtype,
  relative_fy_year_offset,
  relative_fy_month_offset,
  financial_month,
  financial_quarter,
  fiscal_month_adjusted
ORDER BY
  agency_parent, booking_line_created_date
LIMIT 1000;","SELECT
    'ncau-data-newsquery-prd.sbx_dcp.ia' AS source_table,
    t0.agency_parent,
    t0.booking_line_created_date,
    t0.gross_revenue_amount,
    t0.relative_cal_month_offset,
    t0.relative_cal_year_offset,
    t0.relative_fy_month_offset,
    t0.relative_fy_year_offset,
    t0.revenue_group_subtype,
    t0.calendar_month,
    t0.calendar_quarter,
    t0.financial_month,
    t0.financial_quarter
FROM
    `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
LIMIT 10
UNION ALL
SELECT
    'ncau-data-newsquery-prd.asl_finance_derived.revenue_movement' AS source_table,
    t0.agency_parent,
    t0.movement_date AS booking_line_created_date, -- Aligning column names for UNION
    t0.GROSS_AMOUNT_DIFF AS gross_revenue_amount, -- Aligning column names for UNION
    NULL AS relative_cal_month_offset,
    t0.relative_cal_year_offset,
    t0.financial_month AS relative_fy_month_offset, -- Aligning column names for UNION
    t0.relative_fy_year_offset,
    NULL AS revenue_group_subtype,
    NULL AS calendar_month,
    t0.calendar_quarter_of_year AS calendar_quarter, -- Aligning column names for UNION
    t0.financial_month,
    NULL AS financial_quarter
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
LIMIT 10;","SELECT
  SUM(CASE WHEN t0.relative_fy_year_offset = 0 THEN t0.gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue_sample,
  SUM(t1.GROSS_AMOUNT_DIFF) AS total_gross_amount_diff_sample
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
LEFT JOIN
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t1
ON
  t0.agency_parent = t1.agency_parent AND SAFE_CAST(t0.booking_line_created_date AS DATE) = SAFE_CAST(t1.movement_date AS DATE) -- Adding a date join for more realistic validation
WHERE
  (t0.revenue_group_subtype != 'PROGRAMMATIC EXCHANGE' OR t0.revenue_group_subtype IS NULL)
LIMIT 1;","SELECT
  COUNT(1) AS total_rows,
  COUNTIF(t0.revenue_group_subtype = 'PROGRAMMATIC EXCHANGE') AS programmatic_exchange_count_ia,
  COUNTIF(t0.revenue_group_subtype IS NULL) AS null_revenue_group_subtype_count_ia,
  MIN(t0.booking_line_created_date) AS min_booking_date_ia,
  MAX(t0.booking_line_created_date) AS max_booking_date_ia,
  COUNTIF(SAFE_CAST(t0.booking_line_created_date AS DATETIME) <= DATETIME_ADD(DATE('2025-05-23', 'Australia/Sydney'), INTERVAL -365 DAY)) AS hardcoded_date_comparison_count_q1,
  COUNTIF(SAFE_CAST(t0.booking_line_created_date AS DATETIME) <= DATETIME_ADD(DATE('2025-06-22', 'Australia/Sydney'), INTERVAL -365 DAY)) AS hardcoded_date_comparison_count_q2
FROM
  `ncau-data-newsquery-prd.sbx_dcp.ia` AS t0
UNION ALL
SELECT
  COUNT(1) AS total_rows,
  NULL AS programmatic_exchange_count_ia,
  NULL AS null_revenue_group_subtype_count_ia,
  NULL AS min_booking_date_ia,
  NULL AS max_booking_date_ia,
  COUNTIF(SAFE_CAST(t0.movement_financial_week AS INT64) != SAFE_CAST(t0.min_week AS INT64)) AS movement_financial_week_filter_count,
  NULL AS hardcoded_date_comparison_count_q2
FROM
  `ncau-data-newsquery-prd.asl_finance_derived.revenue_movement` AS t0
LIMIT 100;",43,fed70b12-c274-4cde-9920-592ca4c4dab0
"WITH
  SFCE_USER AS (
    SELECT
      UPPER(network_user_name) AS login_name,
      UPPER(user_name) AS full_name
    FROM
      (
        SELECT
          network_user_name,
          user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  ),
  BaseRevenueData AS (
    SELECT
      unified_publication_name,
      unified_publication_gl_code,
      fy_year_month_number,
      financial_year,
      financial_quarter,
      financial_month,
      financial_short_month,
      financial_week,
      revenue_transaction_status,
      is_print_digital_flag,
      current_financial_month,
      current_financial_week,
      fy_year_week_number,
      style_name,
      UPPER(fin_adtype_name) AS fin_adtype_name,
      CASE
        WHEN sales_segment_l_2_name_sync = 'MRCA' THEN 'MRCA'
        ELSE 'Client'
      END AS Sales_Group,
      EXTRACT(DAYOFWEEK FROM CURRENT_DATE()) AS DOW_Today,
      sales_segment_l_1_name,
      nca_industry_anzsic_pillar_group,
      sales_segment_l_2_name,
      sales_segment_l_1_name_sync,
      sales_segment_l_2_name_sync,
      fy_quarter_of_year_name,
      relative_fy_year_offset,
      relative_fy_quarter_offset,
      relative_fy_month_offset,
      relative_fy_week_offset,
      advertiser_group,
      advertiser_parent,
      SUM(IFNULL(adjustment_amount, 0)) AS adjustment_amount,
      sales_segment_gm_name,
      CASE
        WHEN UPPER(sales_segment_l_2_name_sync) IN ('CONSORTIUM NSW', 'KEY ACCOUNTS NSW RETAIL', 'DIRECT NSW', 'INDEPENDENT AGENCIES NSW', 'PRESTIGE') THEN 'Ian Paterson'
        ELSE sales_segment_gm_name_sync
      END AS sales_segment_gm_name_sync,
      revenue_group_level_1_name,
      revenue_group_level_2_name,
      SUM(IFNULL(pub_lgb, 0)) AS pub_lgb,
      SUM(IFNULL(ss_lgb, 0)) AS ss_lgb,
      SUM(IFNULL(pipeline, 0)) AS pipeline,
      SUM(IFNULL(gross_revenue_amount, 0)) AS gross_revenue_amount,
      UPPER(revenue_type) AS revenue_type,
      UPPER(revenue_group_subtype) AS revenue_group_subtype,
      current_portfolio_group_owner_sync,
      portfolio_group_name_sync,
      portfolio_group_name_current,
      portfolio_parent_group_name_sync,
      nca_industry_pillar,
      publishing_division_group,
      publishing_division_parent,
      is_future_period_flag,
      ly_is_future_period_flag,
      xtend_flag,
      ny_is_future_period_flag,
      cost_model_type,
      CASE
        WHEN source_system_code = 'PLUTO' THEN NULL
        ELSE booking_line_created_date
      END AS booking_line_created_date,
      advertiser_name,
      current_portfolio_conformed_owner_sync,
      portfolio_conformed_name_sync,
      publishing_division,
      booking_line_created_week,
      booking_line_created_month,
      booking_line_created_short_month,
      booking_line_created_quarter,
      booking_line_created_year,
      agency_parent,
      agency_group,
      agency_name,
      agency_number,
      calendar_month_name,
      calendar_year,
      classification_name,
      product_group,
      SUM(IFNULL(target, 0)) AS target,
      IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD,
      current_portfolio_conformed_owner_current,
      current_portfolio_group_owner_current,
      IFNULL(GSD_JOIN_CURR.full_name, 'VACANT') AS current_portfolio_group_owner_full,
      IFNULL(GSD_JOIN_CONFORM.full_name, 'VACANT') AS current_portfolio_conformed_owner_full
    FROM
      `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
      LEFT JOIN
      SFCE_USER AS GSD_JOIN
      ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
      LEFT JOIN
      SFCE_USER AS GSD_JOIN_CURR
      ON UPPER(current_portfolio_group_owner_current) = GSD_JOIN_CURR.login_name
      LEFT JOIN
      SFCE_USER AS GSD_JOIN_CONFORM
      ON UPPER(current_portfolio_conformed_owner_current) = GSD_JOIN_CONFORM.login_name
    WHERE
      relative_fy_year_offset IN (-1, 0, 1)
      AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
      AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
      AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
      AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
    GROUP BY
      unified_publication_name, unified_publication_gl_code, fy_year_month_number, financial_year, financial_quarter, financial_month, financial_short_month, financial_week, revenue_transaction_status, is_print_digital_flag, current_financial_month, current_financial_week, fy_year_week_number, style_name, fin_adtype_name, Sales_Group, DOW_Today, sales_segment_l_1_name, nca_industry_anzsic_pillar_group, sales_segment_l_2_name, sales_segment_l_1_name_sync, sales_segment_l_2_name_sync, fy_quarter_of_year_name, relative_fy_year_offset, relative_fy_quarter_offset, relative_fy_month_offset, relative_fy_week_offset, advertiser_group, advertiser_parent, sales_segment_gm_name, sales_segment_gm_name_sync, revenue_group_level_1_name, revenue_group_level_2_name, revenue_type, revenue_group_subtype, current_portfolio_group_owner_sync, portfolio_group_name_sync, portfolio_group_name_current, portfolio_parent_group_name_sync, nca_industry_pillar, publishing_division_group, publishing_division_parent, is_future_period_flag, ly_is_future_period_flag, xtend_flag, ny_is_future_period_flag, cost_model_type, booking_line_created_date, advertiser_name, current_portfolio_conformed_owner_sync, portfolio_conformed_name_sync, publishing_division, booking_line_created_week, booking_line_created_month, booking_line_created_short_month, booking_line_created_quarter, booking_line_created_year, agency_parent, agency_group, agency_name, agency_number, calendar_month_name, calendar_year, classification_name, product_group, GSD, current_portfolio_conformed_owner_current, current_portfolio_group_owner_current, current_portfolio_group_owner_full, current_portfolio_conformed_owner_full
  )
SELECT
  financial_month,
  financial_year,
  financial_short_month,
  SAFE_CAST(financial_quarter AS FLOAT64) AS financial_quarter_float,
  sales_segment_l_2_name_sync,
  portfolio_group_name_sync,
  GSD AS gsd_owner,
  CASE WHEN xtend_flag = 'Y' THEN 'XTEND' ELSE revenue_type END AS revenue_type_xtend_adjusted,
  MAX(sales_segment_l_2_name_sync = 'Digital Other') AS is_digital_other_sales_segment,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN pipeline ELSE 0 END) AS current_fy_pipeline,
  SUM(pipeline) AS total_pipeline,
  SUM(gross_revenue_amount) AS total_gross_revenue,
  SUM(adjustment_amount) AS total_adjustment_amount,
  SUM(pub_lgb) AS total_pub_lgb,
  SUM(ss_lgb) AS total_ss_lgb,
  SUM(target) AS total_target
FROM
  BaseRevenueData
GROUP BY
  financial_month,
  financial_year,
  financial_short_month,
  financial_quarter_float,
  sales_segment_l_2_name_sync,
  portfolio_group_name_sync,
  gsd_owner,
  revenue_type_xtend_adjusted
ORDER BY
  financial_year DESC, financial_month DESC
LIMIT 1000;
","SELECT
  column_name,
  data_type
FROM
  `ncau-data-newsquery-prd.asl_advertising.INFORMATION_SCHEMA.COLUMNS`
WHERE
  table_name = 'v_adsales_revenue_client_weekly'
LIMIT 100;
","WITH
  SFCE_USER AS (
    SELECT
      UPPER(network_user_name) AS login_name,
      UPPER(user_name) AS full_name
    FROM
      (
        SELECT
          network_user_name,
          user_name,
          ROW_NUMBER() OVER (PARTITION BY UPPER(network_user_name)) AS RN
        FROM
          `ncau-data-newsquery-prd`.prstn_advertising_views.v_user_dim
        WHERE
          dw_source_system_code = 'SFCE'
      ) AS TEMP1
    WHERE
      TEMP1.RN = 1
  )
SELECT
  financial_year,
  financial_month,
  SUM(CASE WHEN relative_fy_year_offset = 0 THEN gross_revenue_amount ELSE 0 END) AS current_fy_gross_revenue,
  SUM(pipeline) AS total_pipeline,
  IFNULL(GSD_JOIN.full_name, 'VACANT') AS GSD_Owner
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
  LEFT JOIN
  SFCE_USER AS GSD_JOIN
  ON UPPER(current_portfolio_group_owner_sync) = GSD_JOIN.login_name
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
GROUP BY
  financial_year, financial_month, GSD_Owner
LIMIT 100;
","SELECT
  DISTINCT relative_fy_year_offset,
  COUNT(1) OVER (PARTITION BY relative_fy_year_offset) AS count_of_rows_with_offset,
  ARRAY_AGG(DISTINCT revenue_transaction_status IGNORE NULLS) AS distinct_revenue_transaction_statuses,
  ARRAY_AGG(DISTINCT style_name IGNORE NULLS) AS distinct_style_names,
  ARRAY_AGG(DISTINCT source_publishing_division IGNORE NULLS) AS distinct_source_publishing_divisions,
  ARRAY_AGG(DISTINCT publication_name IGNORE NULLS) AS distinct_publication_names,
  ARRAY_AGG(DISTINCT account_number IGNORE NULLS) AS distinct_account_numbers_for_suddenly_pubs
FROM
  `ncau-data-newsquery-prd.asl_advertising.v_adsales_revenue_client_weekly`
WHERE
  relative_fy_year_offset IN (-1, 0, 1)
  AND UPPER(IFNULL(revenue_transaction_status, 'XXX')) IN ('BILLED', 'BOOKED')
  AND UPPER(IFNULL(style_name, 'XXX')) <> 'ROP COMPOSITE'
  AND UPPER(IFNULL(source_publishing_division, 'XXX')) <> 'MEDIUM RARE CONTENT AGENCY'
  AND (UPPER(IFNULL(publication_name, 'XXX')) NOT LIKE 'SUDDENLY%' OR (UPPER(publication_name) LIKE 'SUDDENLY%' AND account_number IN ('17114', '29172', '52809')))
GROUP BY
  relative_fy_year_offset
LIMIT 100;
",44,8956e94b-f6d1-46a3-9c7f-87a91fbe98b5
"SELECT
    t0.fin_adtype_name,
    t0.product_group,
    SAFE_CAST(t0.financial_week AS INT64) AS financial_week,
    SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS current_fy_revenue_excl_future_k,
    SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS current_fy_revenue_k,
    SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = -1 AND t0.stly_flag = 'Y') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS previous_fy_stly_revenue_k
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE
    (t0.product_group IN ('Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige', '') OR t0.product_group IS NULL)
    AND t0.product_group NOT IN ('Unknown')
GROUP BY
    t0.fin_adtype_name,
    t0.product_group,
    financial_week
LIMIT 10000;","SELECT
    column_name,
    data_type
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.INFORMATION_SCHEMA.COLUMNS`
WHERE
    table_name = 'adsales_performance'
LIMIT 100;","SELECT
    SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0 AND t0.is_future_period_flag = 'N') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS current_fy_revenue_excl_future_k,
    SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = 0) THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS current_fy_revenue_k,
    SUM(SAFE_DIVIDE(CASE WHEN (t0.relative_fy_year_offset = -1 AND t0.stly_flag = 'Y') THEN t0.gross_revenue_amount ELSE 0 END, 1000)) AS previous_fy_stly_revenue_k
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
WHERE
    t0.product_group IN ('Free News & Lifestyle', 'State & Communities', 'The Australian & Prestige', '')
    AND t0.relative_fy_year_offset IN (0, -1)
LIMIT 1;","SELECT
    t0.product_group,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
GROUP BY
    t0.product_group
ORDER BY
    record_count DESC
LIMIT 100;

SELECT
    t0.relative_fy_year_offset,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
GROUP BY
    t0.relative_fy_year_offset
ORDER BY
    record_count DESC
LIMIT 100;

SELECT
    t0.is_future_period_flag,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
GROUP BY
    t0.is_future_period_flag
ORDER BY
    record_count DESC
LIMIT 100;

SELECT
    t0.stly_flag,
    COUNT(1) AS record_count
FROM
    `ncau-data-newsquery-prd.asl_finance_derived.adsales_performance` AS t0
GROUP BY
    t0.stly_flag
ORDER BY
    record_count DESC
LIMIT 100;",45,d3bcf796-2396-4a6f-b0a3-da0b7f299a58
